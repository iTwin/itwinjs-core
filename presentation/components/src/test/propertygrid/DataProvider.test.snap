// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PropertyDataProvider getData with flat categories handles records with no values 1`] = `
Object {
  "categories": Array [
    Object {
      "expand": false,
      "label": "Test Category",
      "name": "test-category",
    },
  ],
  "description": undefined,
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "",
      "value": "",
      "valueFormat": 0,
    },
  },
  "records": Object {
    "test-category": Array [
      PropertyRecord {
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "SimpleField",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "",
          "value": undefined,
          "valueFormat": 0,
        },
      },
    ],
  },
  "reusePropertyDataState": true,
}
`;

exports[`PropertyDataProvider getData with flat categories nested content handling moves all nested fields into separate category and hides nested content field when all nested fields are categorized 1`] = `
Object {
  "categories": Array [
    Object {
      "expand": false,
      "label": "Test Category",
      "name": "Category2",
    },
  ],
  "description": undefined,
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "",
      "value": "",
      "valueFormat": 0,
    },
  },
  "records": Object {
    "Category2": Array [
      PropertyRecord {
        "description": "display value 1",
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "root-field$nested-field-1",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "display value 1",
          "value": "value 1",
          "valueFormat": 0,
        },
      },
      PropertyRecord {
        "description": "display value 2",
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "root-field$nested-field-2",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "display value 2",
          "value": "value 2",
          "valueFormat": 0,
        },
      },
    ],
  },
  "reusePropertyDataState": true,
}
`;

exports[`PropertyDataProvider getData with flat categories nested content handling moves field into separate category with its grandparent when both are categorized with the same category 1`] = `
Object {
  "categories": Array [
    Object {
      "expand": false,
      "label": "Test Category",
      "name": "Category1",
    },
    Object {
      "expand": false,
      "label": "Test Category",
      "name": "Category2",
    },
  ],
  "description": undefined,
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "",
      "value": "",
      "valueFormat": 0,
    },
  },
  "records": Object {
    "Category1": Array [
      PropertyRecord {
        "description": "display value 4",
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "nested-field-4",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "display value 4",
          "value": "value 4",
          "valueFormat": 0,
        },
      },
      PropertyRecord {
        "description": "display value 1",
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "root-field$middle-field$nested-field-1",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "display value 1",
          "value": "value 1",
          "valueFormat": 0,
        },
      },
    ],
    "Category2": Array [
      PropertyRecord {
        "description": "display value 3",
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "root-field$nested-field-3",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "display value 3",
          "value": "value 3",
          "valueFormat": 0,
        },
      },
      PropertyRecord {
        "property": Object {
          "displayLabel": "Nested Content",
          "name": "root-field$middle-field",
          "typename": "NestedContentFieldType",
        },
        "value": Object {
          "members": Object {
            "nested-field-2": PropertyRecord {
              "description": "display value 2",
              "property": Object {
                "displayLabel": "Simple Field",
                "name": "root-field$middle-field$nested-field-2",
                "typename": "string",
              },
              "value": Object {
                "displayValue": "display value 2",
                "value": "value 2",
                "valueFormat": 0,
              },
            },
          },
          "valueFormat": 2,
        },
      },
    ],
  },
  "reusePropertyDataState": true,
}
`;

exports[`PropertyDataProvider getData with flat categories nested content handling moves fields into separate category under common ancestor when both are categorized with the same category 1`] = `
Object {
  "categories": Array [
    Object {
      "expand": false,
      "label": "Test Category",
      "name": "Category1",
    },
    Object {
      "expand": true,
      "label": "Test Category",
      "name": "Category2",
    },
  ],
  "description": undefined,
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "",
      "value": "",
      "valueFormat": 0,
    },
  },
  "records": Object {
    "Category1": Array [
      PropertyRecord {
        "description": "display value",
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "root-sibling",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "display value",
          "value": "value",
          "valueFormat": 0,
        },
      },
      PropertyRecord {
        "property": Object {
          "displayLabel": "Nested Content",
          "name": "root-field",
          "typename": "NestedContentFieldType",
        },
        "value": Object {
          "members": Object {
            "middle-field-1": PropertyRecord {
              "isReadonly": true,
              "property": Object {
                "displayLabel": "Nested Content",
                "name": "root-field$middle-field-1",
                "typename": "NestedContentFieldType[]",
              },
              "value": Object {
                "items": Array [
                  PropertyRecord {
                    "property": Object {
                      "displayLabel": "Nested Content",
                      "name": "root-field$middle-field-1",
                      "typename": "NestedContentFieldType",
                    },
                    "value": Object {
                      "members": Object {
                        "nested-field-1": PropertyRecord {
                          "description": "display value 1",
                          "property": Object {
                            "displayLabel": "Simple Field",
                            "name": "root-field$middle-field-1$nested-field-1",
                            "typename": "string",
                          },
                          "value": Object {
                            "displayValue": "display value 1",
                            "value": "value 1",
                            "valueFormat": 0,
                          },
                        },
                      },
                      "valueFormat": 2,
                    },
                  },
                ],
                "itemsTypeName": "NestedContentFieldType",
                "valueFormat": 1,
              },
            },
            "middle-field-2": PropertyRecord {
              "isReadonly": true,
              "property": Object {
                "displayLabel": "Nested Content",
                "name": "root-field$middle-field-2",
                "typename": "NestedContentFieldType[]",
              },
              "value": Object {
                "items": Array [
                  PropertyRecord {
                    "property": Object {
                      "displayLabel": "Nested Content",
                      "name": "root-field$middle-field-2",
                      "typename": "NestedContentFieldType",
                    },
                    "value": Object {
                      "members": Object {
                        "nested-field-3": PropertyRecord {
                          "description": "display value 3",
                          "property": Object {
                            "displayLabel": "Simple Field",
                            "name": "root-field$middle-field-2$nested-field-3",
                            "typename": "string",
                          },
                          "value": Object {
                            "displayValue": "display value 3",
                            "value": "value 3",
                            "valueFormat": 0,
                          },
                        },
                      },
                      "valueFormat": 2,
                    },
                  },
                ],
                "itemsTypeName": "NestedContentFieldType",
                "valueFormat": 1,
              },
            },
          },
          "valueFormat": 2,
        },
      },
    ],
    "Category2": Array [
      PropertyRecord {
        "property": Object {
          "displayLabel": "Nested Content",
          "name": "root-field$middle-field-1",
          "typename": "NestedContentFieldType",
        },
        "value": Object {
          "members": Object {
            "nested-field-2": PropertyRecord {
              "description": "display value 2",
              "property": Object {
                "displayLabel": "Simple Field",
                "name": "root-field$middle-field-1$nested-field-2",
                "typename": "string",
              },
              "value": Object {
                "displayValue": "display value 2",
                "value": "value 2",
                "valueFormat": 0,
              },
            },
          },
          "valueFormat": 2,
        },
      },
      PropertyRecord {
        "property": Object {
          "displayLabel": "Nested Content",
          "name": "root-field$middle-field-2",
          "typename": "NestedContentFieldType",
        },
        "value": Object {
          "members": Object {
            "nested-field-4": PropertyRecord {
              "description": "display value 4",
              "property": Object {
                "displayLabel": "Simple Field",
                "name": "root-field$middle-field-2$nested-field-4",
                "typename": "string",
              },
              "value": Object {
                "displayValue": "display value 4",
                "value": "value 4",
                "valueFormat": 0,
              },
            },
            "nested-field-5": PropertyRecord {
              "description": "display value 5",
              "property": Object {
                "displayLabel": "Simple Field",
                "name": "root-field$middle-field-2$nested-field-5",
                "typename": "string",
              },
              "value": Object {
                "displayValue": "display value 5",
                "value": "value 5",
                "valueFormat": 0,
              },
            },
          },
          "valueFormat": 2,
        },
      },
    ],
  },
  "reusePropertyDataState": true,
}
`;

exports[`PropertyDataProvider getData with flat categories nested content handling moves nested field into separate category and hides nested content field when there's only 1 nested field 1`] = `
Object {
  "categories": Array [
    Object {
      "expand": false,
      "label": "Test Category",
      "name": "Category2",
    },
  ],
  "description": undefined,
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "",
      "value": "",
      "valueFormat": 0,
    },
  },
  "records": Object {
    "Category2": Array [
      PropertyRecord {
        "description": "display value 1",
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "root-field$nested-field-1",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "display value 1",
          "value": "value 1",
          "valueFormat": 0,
        },
      },
    ],
  },
  "reusePropertyDataState": true,
}
`;

exports[`PropertyDataProvider getData with flat categories nested content handling moves nested field into separate category and keeps nested content field with remaining nested fields when there are more than 1 nested fields and no sibling fields 1`] = `
Object {
  "categories": Array [
    Object {
      "expand": false,
      "label": "Test Category",
      "name": "Category1",
    },
    Object {
      "expand": false,
      "label": "Test Category",
      "name": "Category2",
    },
  ],
  "description": undefined,
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "",
      "value": "",
      "valueFormat": 0,
    },
  },
  "records": Object {
    "Category1": Array [
      PropertyRecord {
        "description": "display value 1",
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "root-field$nested-field-1",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "display value 1",
          "value": "value 1",
          "valueFormat": 0,
        },
      },
    ],
    "Category2": Array [
      PropertyRecord {
        "description": "display value 2",
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "root-field$nested-field-2",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "display value 2",
          "value": "value 2",
          "valueFormat": 0,
        },
      },
    ],
  },
  "reusePropertyDataState": true,
}
`;

exports[`PropertyDataProvider getData with flat categories nested content handling moves nested field into separate category and keeps nested content field with remaining nested fields when there are more than 1 nested fields and sibling fields 1`] = `
Object {
  "categories": Array [
    Object {
      "expand": false,
      "label": "Test Category",
      "name": "Category1",
    },
    Object {
      "expand": false,
      "label": "Test Category",
      "name": "Category2",
    },
  ],
  "description": undefined,
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "",
      "value": "",
      "valueFormat": 0,
    },
  },
  "records": Object {
    "Category1": Array [
      PropertyRecord {
        "description": "display value 3",
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "sibling-root-field",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "display value 3",
          "value": "value 3",
          "valueFormat": 0,
        },
      },
      PropertyRecord {
        "property": Object {
          "displayLabel": "Nested Content",
          "name": "root-field",
          "typename": "NestedContentFieldType",
        },
        "value": Object {
          "members": Object {
            "nested-field-1": PropertyRecord {
              "description": "display value 1",
              "property": Object {
                "displayLabel": "Simple Field",
                "name": "root-field$nested-field-1",
                "typename": "string",
              },
              "value": Object {
                "displayValue": "display value 1",
                "value": "value 1",
                "valueFormat": 0,
              },
            },
          },
          "valueFormat": 2,
        },
      },
    ],
    "Category2": Array [
      PropertyRecord {
        "description": "display value 2",
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "root-field$nested-field-2",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "display value 2",
          "value": "value 2",
          "valueFormat": 0,
        },
      },
    ],
  },
  "reusePropertyDataState": true,
}
`;

exports[`PropertyDataProvider getData with flat categories nested content handling returns nested content with multiple nested records as struct array 1`] = `
Object {
  "categories": Array [
    Object {
      "expand": false,
      "label": "Test Category",
      "name": "test-category",
    },
  ],
  "description": undefined,
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "",
      "value": "",
      "valueFormat": 0,
    },
  },
  "records": Object {
    "test-category": Array [
      PropertyRecord {
        "isReadonly": true,
        "property": Object {
          "displayLabel": "Nested Content",
          "name": "root-field",
          "typename": "NestedContentFieldType[]",
        },
        "value": Object {
          "items": Array [
            PropertyRecord {
              "property": Object {
                "displayLabel": "Nested Content",
                "name": "root-field",
                "typename": "NestedContentFieldType",
              },
              "value": Object {
                "members": Object {
                  "nested-field": PropertyRecord {
                    "description": "display value 1",
                    "property": Object {
                      "displayLabel": "Simple Field",
                      "name": "root-field$nested-field",
                      "typename": "string",
                    },
                    "value": Object {
                      "displayValue": "display value 1",
                      "value": "value 1",
                      "valueFormat": 0,
                    },
                  },
                },
                "valueFormat": 2,
              },
            },
            PropertyRecord {
              "property": Object {
                "displayLabel": "Nested Content",
                "name": "root-field",
                "typename": "NestedContentFieldType",
              },
              "value": Object {
                "members": Object {
                  "nested-field": PropertyRecord {
                    "description": "display value 2",
                    "property": Object {
                      "displayLabel": "Simple Field",
                      "name": "root-field$nested-field",
                      "typename": "string",
                    },
                    "value": Object {
                      "displayValue": "display value 2",
                      "value": "value 2",
                      "valueFormat": 0,
                    },
                  },
                },
                "valueFormat": 2,
              },
            },
          ],
          "itemsTypeName": "NestedContentFieldType",
          "valueFormat": 1,
        },
      },
    ],
  },
  "reusePropertyDataState": true,
}
`;

exports[`PropertyDataProvider getData with flat categories nested content handling returns nested content with single nested record as individual properties when are no sibling fields 1`] = `
Object {
  "categories": Array [
    Object {
      "expand": false,
      "label": "Test Category",
      "name": "test-category",
    },
  ],
  "description": undefined,
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "",
      "value": "",
      "valueFormat": 0,
    },
  },
  "records": Object {
    "test-category": Array [
      PropertyRecord {
        "description": "display value 1",
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "root-field$nested-field",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "display value 1",
          "value": "value 1",
          "valueFormat": 0,
        },
      },
    ],
  },
  "reusePropertyDataState": true,
}
`;

exports[`PropertyDataProvider getData with flat categories nested content handling returns nested content with single nested record as struct when there're sibling fields 1`] = `
Object {
  "categories": Array [
    Object {
      "expand": false,
      "label": "Test Category",
      "name": "test-category",
    },
  ],
  "description": undefined,
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "",
      "value": "",
      "valueFormat": 0,
    },
  },
  "records": Object {
    "test-category": Array [
      PropertyRecord {
        "description": "display value 3",
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "sibling-root-field",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "display value 3",
          "value": "value 3",
          "valueFormat": 0,
        },
      },
      PropertyRecord {
        "property": Object {
          "displayLabel": "Nested Content",
          "name": "root-field",
          "typename": "NestedContentFieldType",
        },
        "value": Object {
          "members": Object {
            "nested-field": PropertyRecord {
              "description": "display value 1",
              "property": Object {
                "displayLabel": "Simple Field",
                "name": "root-field$nested-field",
                "typename": "string",
              },
              "value": Object {
                "displayValue": "display value 1",
                "value": "value 1",
                "valueFormat": 0,
              },
            },
          },
          "valueFormat": 2,
        },
      },
    ],
  },
  "reusePropertyDataState": true,
}
`;

exports[`PropertyDataProvider getData with flat categories returns array property data 1`] = `
Object {
  "categories": Array [
    Object {
      "expand": false,
      "label": "Test Category",
      "name": "test-category",
    },
  ],
  "description": undefined,
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "",
      "value": "",
      "valueFormat": 0,
    },
  },
  "records": Object {
    "test-category": Array [
      PropertyRecord {
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "SimpleField",
          "typename": "myarray[]",
        },
        "value": Object {
          "items": Array [
            PropertyRecord {
              "description": "some display value 1",
              "property": Object {
                "displayLabel": "Simple Field",
                "name": "SimpleField",
                "typename": "MyType",
              },
              "value": Object {
                "displayValue": "some display value 1",
                "value": "some value 1",
                "valueFormat": 0,
              },
            },
            PropertyRecord {
              "description": "some display value 2",
              "property": Object {
                "displayLabel": "Simple Field",
                "name": "SimpleField",
                "typename": "MyType",
              },
              "value": Object {
                "displayValue": "some display value 2",
                "value": "some value 2",
                "valueFormat": 0,
              },
            },
          ],
          "itemsTypeName": "MyType",
          "valueFormat": 1,
        },
      },
    ],
  },
  "reusePropertyDataState": true,
}
`;

exports[`PropertyDataProvider getData with flat categories returns primitive property data 1`] = `
Object {
  "categories": Array [
    Object {
      "expand": false,
      "label": "Test Category",
      "name": "test-category",
    },
  ],
  "description": undefined,
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "",
      "value": "",
      "valueFormat": 0,
    },
  },
  "records": Object {
    "test-category": Array [
      PropertyRecord {
        "description": "some display value",
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "SimpleField",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "some display value",
          "value": "some value",
          "valueFormat": 0,
        },
      },
    ],
  },
  "reusePropertyDataState": true,
}
`;

exports[`PropertyDataProvider getData with flat categories returns struct property data 1`] = `
Object {
  "categories": Array [
    Object {
      "expand": false,
      "label": "Test Category",
      "name": "test-category",
    },
  ],
  "description": undefined,
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "",
      "value": "",
      "valueFormat": 0,
    },
  },
  "records": Object {
    "test-category": Array [
      PropertyRecord {
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "SimpleField",
          "typename": "mystruct",
        },
        "value": Object {
          "members": Object {
            "MyProperty": PropertyRecord {
              "description": "some display value",
              "property": Object {
                "displayLabel": "My Property",
                "name": "MyProperty",
                "typename": "MyType",
              },
              "value": Object {
                "displayValue": "some display value",
                "value": "some value",
                "valueFormat": 0,
              },
            },
          },
          "valueFormat": 2,
        },
      },
    ],
  },
  "reusePropertyDataState": true,
}
`;

exports[`PropertyDataProvider getData with nested categories handles records with no values 1`] = `
Object {
  "categories": Array [
    Object {
      "childCategories": Array [],
      "expand": false,
      "label": "Test Category",
      "name": "test-category",
    },
  ],
  "description": undefined,
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "",
      "value": "",
      "valueFormat": 0,
    },
  },
  "records": Object {
    "test-category": Array [
      PropertyRecord {
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "SimpleField",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "",
          "value": undefined,
          "valueFormat": 0,
        },
      },
    ],
  },
  "reusePropertyDataState": true,
}
`;

exports[`PropertyDataProvider getData with nested categories nested content handling moves all nested fields into separate category and hides nested content field when all nested fields are categorized 1`] = `
Object {
  "categories": Array [
    Object {
      "childCategories": Array [],
      "expand": false,
      "label": "Test Category",
      "name": "Category2",
    },
  ],
  "description": undefined,
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "",
      "value": "",
      "valueFormat": 0,
    },
  },
  "records": Object {
    "Category2": Array [
      PropertyRecord {
        "description": "display value 1",
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "root-field$nested-field-1",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "display value 1",
          "value": "value 1",
          "valueFormat": 0,
        },
      },
      PropertyRecord {
        "description": "display value 2",
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "root-field$nested-field-2",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "display value 2",
          "value": "value 2",
          "valueFormat": 0,
        },
      },
    ],
  },
  "reusePropertyDataState": true,
}
`;

exports[`PropertyDataProvider getData with nested categories nested content handling moves field into separate category with its grandparent when both are categorized with the same category 1`] = `
Object {
  "categories": Array [
    Object {
      "childCategories": Array [],
      "expand": false,
      "label": "Test Category",
      "name": "Category1",
    },
    Object {
      "childCategories": Array [],
      "expand": false,
      "label": "Test Category",
      "name": "Category2",
    },
  ],
  "description": undefined,
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "",
      "value": "",
      "valueFormat": 0,
    },
  },
  "records": Object {
    "Category1": Array [
      PropertyRecord {
        "description": "display value 1",
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "root-field$middle-field$nested-field-1",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "display value 1",
          "value": "value 1",
          "valueFormat": 0,
        },
      },
      PropertyRecord {
        "description": "display value 4",
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "nested-field-4",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "display value 4",
          "value": "value 4",
          "valueFormat": 0,
        },
      },
    ],
    "Category2": Array [
      PropertyRecord {
        "property": Object {
          "displayLabel": "Nested Content",
          "name": "root-field$middle-field",
          "typename": "NestedContentFieldType",
        },
        "value": Object {
          "members": Object {
            "nested-field-2": PropertyRecord {
              "description": "display value 2",
              "property": Object {
                "displayLabel": "Simple Field",
                "name": "root-field$middle-field$nested-field-2",
                "typename": "string",
              },
              "value": Object {
                "displayValue": "display value 2",
                "value": "value 2",
                "valueFormat": 0,
              },
            },
          },
          "valueFormat": 2,
        },
      },
      PropertyRecord {
        "description": "display value 3",
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "root-field$nested-field-3",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "display value 3",
          "value": "value 3",
          "valueFormat": 0,
        },
      },
    ],
  },
  "reusePropertyDataState": true,
}
`;

exports[`PropertyDataProvider getData with nested categories nested content handling moves fields into separate category under common ancestor when both are categorized with the same category 1`] = `
Object {
  "categories": Array [
    Object {
      "childCategories": Array [],
      "expand": false,
      "label": "Test Category",
      "name": "Category1",
    },
    Object {
      "childCategories": Array [],
      "expand": true,
      "label": "Test Category",
      "name": "Category2",
    },
  ],
  "description": undefined,
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "",
      "value": "",
      "valueFormat": 0,
    },
  },
  "records": Object {
    "Category1": Array [
      PropertyRecord {
        "property": Object {
          "displayLabel": "Nested Content",
          "name": "root-field",
          "typename": "NestedContentFieldType",
        },
        "value": Object {
          "members": Object {
            "middle-field-1": PropertyRecord {
              "isReadonly": true,
              "property": Object {
                "displayLabel": "Nested Content",
                "name": "root-field$middle-field-1",
                "typename": "NestedContentFieldType[]",
              },
              "value": Object {
                "items": Array [
                  PropertyRecord {
                    "property": Object {
                      "displayLabel": "Nested Content",
                      "name": "root-field$middle-field-1",
                      "typename": "NestedContentFieldType",
                    },
                    "value": Object {
                      "members": Object {
                        "nested-field-1": PropertyRecord {
                          "description": "display value 1",
                          "property": Object {
                            "displayLabel": "Simple Field",
                            "name": "root-field$middle-field-1$nested-field-1",
                            "typename": "string",
                          },
                          "value": Object {
                            "displayValue": "display value 1",
                            "value": "value 1",
                            "valueFormat": 0,
                          },
                        },
                      },
                      "valueFormat": 2,
                    },
                  },
                ],
                "itemsTypeName": "NestedContentFieldType",
                "valueFormat": 1,
              },
            },
            "middle-field-2": PropertyRecord {
              "isReadonly": true,
              "property": Object {
                "displayLabel": "Nested Content",
                "name": "root-field$middle-field-2",
                "typename": "NestedContentFieldType[]",
              },
              "value": Object {
                "items": Array [
                  PropertyRecord {
                    "property": Object {
                      "displayLabel": "Nested Content",
                      "name": "root-field$middle-field-2",
                      "typename": "NestedContentFieldType",
                    },
                    "value": Object {
                      "members": Object {
                        "nested-field-3": PropertyRecord {
                          "description": "display value 3",
                          "property": Object {
                            "displayLabel": "Simple Field",
                            "name": "root-field$middle-field-2$nested-field-3",
                            "typename": "string",
                          },
                          "value": Object {
                            "displayValue": "display value 3",
                            "value": "value 3",
                            "valueFormat": 0,
                          },
                        },
                      },
                      "valueFormat": 2,
                    },
                  },
                ],
                "itemsTypeName": "NestedContentFieldType",
                "valueFormat": 1,
              },
            },
          },
          "valueFormat": 2,
        },
      },
      PropertyRecord {
        "description": "display value",
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "root-sibling",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "display value",
          "value": "value",
          "valueFormat": 0,
        },
      },
    ],
    "Category2": Array [
      PropertyRecord {
        "property": Object {
          "displayLabel": "Nested Content",
          "name": "root-field$middle-field-1",
          "typename": "NestedContentFieldType",
        },
        "value": Object {
          "members": Object {
            "nested-field-2": PropertyRecord {
              "description": "display value 2",
              "property": Object {
                "displayLabel": "Simple Field",
                "name": "root-field$middle-field-1$nested-field-2",
                "typename": "string",
              },
              "value": Object {
                "displayValue": "display value 2",
                "value": "value 2",
                "valueFormat": 0,
              },
            },
          },
          "valueFormat": 2,
        },
      },
      PropertyRecord {
        "property": Object {
          "displayLabel": "Nested Content",
          "name": "root-field$middle-field-2",
          "typename": "NestedContentFieldType",
        },
        "value": Object {
          "members": Object {
            "nested-field-4": PropertyRecord {
              "description": "display value 4",
              "property": Object {
                "displayLabel": "Simple Field",
                "name": "root-field$middle-field-2$nested-field-4",
                "typename": "string",
              },
              "value": Object {
                "displayValue": "display value 4",
                "value": "value 4",
                "valueFormat": 0,
              },
            },
            "nested-field-5": PropertyRecord {
              "description": "display value 5",
              "property": Object {
                "displayLabel": "Simple Field",
                "name": "root-field$middle-field-2$nested-field-5",
                "typename": "string",
              },
              "value": Object {
                "displayValue": "display value 5",
                "value": "value 5",
                "valueFormat": 0,
              },
            },
          },
          "valueFormat": 2,
        },
      },
    ],
  },
  "reusePropertyDataState": true,
}
`;

exports[`PropertyDataProvider getData with nested categories nested content handling moves nested field into separate category and hides nested content field when there's only 1 nested field 1`] = `
Object {
  "categories": Array [
    Object {
      "childCategories": Array [],
      "expand": false,
      "label": "Test Category",
      "name": "Category2",
    },
  ],
  "description": undefined,
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "",
      "value": "",
      "valueFormat": 0,
    },
  },
  "records": Object {
    "Category2": Array [
      PropertyRecord {
        "description": "display value 1",
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "root-field$nested-field-1",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "display value 1",
          "value": "value 1",
          "valueFormat": 0,
        },
      },
    ],
  },
  "reusePropertyDataState": true,
}
`;

exports[`PropertyDataProvider getData with nested categories nested content handling moves nested field into separate category and keeps nested content field with remaining nested fields when there are more than 1 nested fields and no sibling fields 1`] = `
Object {
  "categories": Array [
    Object {
      "childCategories": Array [],
      "expand": false,
      "label": "Test Category",
      "name": "Category1",
    },
    Object {
      "childCategories": Array [],
      "expand": false,
      "label": "Test Category",
      "name": "Category2",
    },
  ],
  "description": undefined,
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "",
      "value": "",
      "valueFormat": 0,
    },
  },
  "records": Object {
    "Category1": Array [
      PropertyRecord {
        "description": "display value 1",
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "root-field$nested-field-1",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "display value 1",
          "value": "value 1",
          "valueFormat": 0,
        },
      },
    ],
    "Category2": Array [
      PropertyRecord {
        "description": "display value 2",
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "root-field$nested-field-2",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "display value 2",
          "value": "value 2",
          "valueFormat": 0,
        },
      },
    ],
  },
  "reusePropertyDataState": true,
}
`;

exports[`PropertyDataProvider getData with nested categories nested content handling moves nested field into separate category and keeps nested content field with remaining nested fields when there are more than 1 nested fields and sibling fields 1`] = `
Object {
  "categories": Array [
    Object {
      "childCategories": Array [],
      "expand": false,
      "label": "Test Category",
      "name": "Category1",
    },
    Object {
      "childCategories": Array [],
      "expand": false,
      "label": "Test Category",
      "name": "Category2",
    },
  ],
  "description": undefined,
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "",
      "value": "",
      "valueFormat": 0,
    },
  },
  "records": Object {
    "Category1": Array [
      PropertyRecord {
        "property": Object {
          "displayLabel": "Nested Content",
          "name": "root-field",
          "typename": "NestedContentFieldType",
        },
        "value": Object {
          "members": Object {
            "nested-field-1": PropertyRecord {
              "description": "display value 1",
              "property": Object {
                "displayLabel": "Simple Field",
                "name": "root-field$nested-field-1",
                "typename": "string",
              },
              "value": Object {
                "displayValue": "display value 1",
                "value": "value 1",
                "valueFormat": 0,
              },
            },
          },
          "valueFormat": 2,
        },
      },
      PropertyRecord {
        "description": "display value 3",
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "sibling-root-field",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "display value 3",
          "value": "value 3",
          "valueFormat": 0,
        },
      },
    ],
    "Category2": Array [
      PropertyRecord {
        "description": "display value 2",
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "root-field$nested-field-2",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "display value 2",
          "value": "value 2",
          "valueFormat": 0,
        },
      },
    ],
  },
  "reusePropertyDataState": true,
}
`;

exports[`PropertyDataProvider getData with nested categories nested content handling returns nested content with multiple nested records as struct array 1`] = `
Object {
  "categories": Array [
    Object {
      "childCategories": Array [],
      "expand": false,
      "label": "Test Category",
      "name": "test-category",
    },
  ],
  "description": undefined,
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "",
      "value": "",
      "valueFormat": 0,
    },
  },
  "records": Object {
    "test-category": Array [
      PropertyRecord {
        "isReadonly": true,
        "property": Object {
          "displayLabel": "Nested Content",
          "name": "root-field",
          "typename": "NestedContentFieldType[]",
        },
        "value": Object {
          "items": Array [
            PropertyRecord {
              "property": Object {
                "displayLabel": "Nested Content",
                "name": "root-field",
                "typename": "NestedContentFieldType",
              },
              "value": Object {
                "members": Object {
                  "nested-field": PropertyRecord {
                    "description": "display value 1",
                    "property": Object {
                      "displayLabel": "Simple Field",
                      "name": "root-field$nested-field",
                      "typename": "string",
                    },
                    "value": Object {
                      "displayValue": "display value 1",
                      "value": "value 1",
                      "valueFormat": 0,
                    },
                  },
                },
                "valueFormat": 2,
              },
            },
            PropertyRecord {
              "property": Object {
                "displayLabel": "Nested Content",
                "name": "root-field",
                "typename": "NestedContentFieldType",
              },
              "value": Object {
                "members": Object {
                  "nested-field": PropertyRecord {
                    "description": "display value 2",
                    "property": Object {
                      "displayLabel": "Simple Field",
                      "name": "root-field$nested-field",
                      "typename": "string",
                    },
                    "value": Object {
                      "displayValue": "display value 2",
                      "value": "value 2",
                      "valueFormat": 0,
                    },
                  },
                },
                "valueFormat": 2,
              },
            },
          ],
          "itemsTypeName": "NestedContentFieldType",
          "valueFormat": 1,
        },
      },
    ],
  },
  "reusePropertyDataState": true,
}
`;

exports[`PropertyDataProvider getData with nested categories nested content handling returns nested content with single nested record as individual properties when are no sibling fields 1`] = `
Object {
  "categories": Array [
    Object {
      "childCategories": Array [],
      "expand": false,
      "label": "Test Category",
      "name": "test-category",
    },
  ],
  "description": undefined,
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "",
      "value": "",
      "valueFormat": 0,
    },
  },
  "records": Object {
    "test-category": Array [
      PropertyRecord {
        "description": "display value 1",
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "root-field$nested-field",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "display value 1",
          "value": "value 1",
          "valueFormat": 0,
        },
      },
    ],
  },
  "reusePropertyDataState": true,
}
`;

exports[`PropertyDataProvider getData with nested categories nested content handling returns nested content with single nested record as struct when there're sibling fields 1`] = `
Object {
  "categories": Array [
    Object {
      "childCategories": Array [],
      "expand": false,
      "label": "Test Category",
      "name": "test-category",
    },
  ],
  "description": undefined,
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "",
      "value": "",
      "valueFormat": 0,
    },
  },
  "records": Object {
    "test-category": Array [
      PropertyRecord {
        "property": Object {
          "displayLabel": "Nested Content",
          "name": "root-field",
          "typename": "NestedContentFieldType",
        },
        "value": Object {
          "members": Object {
            "nested-field": PropertyRecord {
              "description": "display value 1",
              "property": Object {
                "displayLabel": "Simple Field",
                "name": "root-field$nested-field",
                "typename": "string",
              },
              "value": Object {
                "displayValue": "display value 1",
                "value": "value 1",
                "valueFormat": 0,
              },
            },
          },
          "valueFormat": 2,
        },
      },
      PropertyRecord {
        "description": "display value 3",
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "sibling-root-field",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "display value 3",
          "value": "value 3",
          "valueFormat": 0,
        },
      },
    ],
  },
  "reusePropertyDataState": true,
}
`;

exports[`PropertyDataProvider getData with nested categories returns array property data 1`] = `
Object {
  "categories": Array [
    Object {
      "childCategories": Array [],
      "expand": false,
      "label": "Test Category",
      "name": "test-category",
    },
  ],
  "description": undefined,
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "",
      "value": "",
      "valueFormat": 0,
    },
  },
  "records": Object {
    "test-category": Array [
      PropertyRecord {
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "SimpleField",
          "typename": "myarray[]",
        },
        "value": Object {
          "items": Array [
            PropertyRecord {
              "description": "some display value 1",
              "property": Object {
                "displayLabel": "Simple Field",
                "name": "SimpleField",
                "typename": "MyType",
              },
              "value": Object {
                "displayValue": "some display value 1",
                "value": "some value 1",
                "valueFormat": 0,
              },
            },
            PropertyRecord {
              "description": "some display value 2",
              "property": Object {
                "displayLabel": "Simple Field",
                "name": "SimpleField",
                "typename": "MyType",
              },
              "value": Object {
                "displayValue": "some display value 2",
                "value": "some value 2",
                "valueFormat": 0,
              },
            },
          ],
          "itemsTypeName": "MyType",
          "valueFormat": 1,
        },
      },
    ],
  },
  "reusePropertyDataState": true,
}
`;

exports[`PropertyDataProvider getData with nested categories returns primitive property data 1`] = `
Object {
  "categories": Array [
    Object {
      "childCategories": Array [],
      "expand": false,
      "label": "Test Category",
      "name": "test-category",
    },
  ],
  "description": undefined,
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "",
      "value": "",
      "valueFormat": 0,
    },
  },
  "records": Object {
    "test-category": Array [
      PropertyRecord {
        "description": "some display value",
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "SimpleField",
          "typename": "string",
        },
        "value": Object {
          "displayValue": "some display value",
          "value": "some value",
          "valueFormat": 0,
        },
      },
    ],
  },
  "reusePropertyDataState": true,
}
`;

exports[`PropertyDataProvider getData with nested categories returns struct property data 1`] = `
Object {
  "categories": Array [
    Object {
      "childCategories": Array [],
      "expand": false,
      "label": "Test Category",
      "name": "test-category",
    },
  ],
  "description": undefined,
  "label": PropertyRecord {
    "property": Object {
      "displayLabel": "Label",
      "name": "label",
      "typename": "string",
    },
    "value": Object {
      "displayValue": "",
      "value": "",
      "valueFormat": 0,
    },
  },
  "records": Object {
    "test-category": Array [
      PropertyRecord {
        "property": Object {
          "displayLabel": "Simple Field",
          "name": "SimpleField",
          "typename": "mystruct",
        },
        "value": Object {
          "members": Object {
            "MyProperty": PropertyRecord {
              "description": "some display value",
              "property": Object {
                "displayLabel": "My Property",
                "name": "MyProperty",
                "typename": "MyType",
              },
              "value": Object {
                "displayValue": "some display value",
                "value": "some value",
                "valueFormat": 0,
              },
            },
          },
          "valueFormat": 2,
        },
      },
    ],
  },
  "reusePropertyDataState": true,
}
`;
