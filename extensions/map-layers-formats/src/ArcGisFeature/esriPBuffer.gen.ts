
/*---------------------------------------------------------------------------------------------
* Copyright (c) Bentley Systems, Incorporated. All rights reserved.
* See LICENSE.md in the project root for license terms and full copyright notice.
*--------------------------------------------------------------------------------------------*/

/* eslint-disable */

/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.2
 * source: https://github.com/Esri/arcgis-pbf/blob/main/proto/FeatureCollection/FeatureCollection.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";

/** @internal */
export namespace esriPBuffer {
  export class FeatureCollectionPBuffer extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
          version?: string;
          queryResult?: FeatureCollectionPBuffer.QueryResult;
        }) {
          super();
          pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
          if (!Array.isArray(data) && typeof data == "object") {
            if ("version" in data && data.version != undefined) {
              this.version = data.version;
            }
            if ("queryResult" in data && data.queryResult != undefined) {
              this.queryResult = data.queryResult;
            }
          }
        }
        get version() {
          return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set version(value: string) {
          pb_1.Message.setField(this, 1, value);
        }
        get queryResult() {
          return pb_1.Message.getWrapperField(this, FeatureCollectionPBuffer.QueryResult, 2) as FeatureCollectionPBuffer.QueryResult;
        }
        set queryResult(value: FeatureCollectionPBuffer.QueryResult) {
          pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_queryResult() {
          return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
          version?: string;
          queryResult?: ReturnType<typeof FeatureCollectionPBuffer.QueryResult.prototype.toObject>;
        }): FeatureCollectionPBuffer {
          const message = new FeatureCollectionPBuffer({});
          if (data.version != null) {
            message.version = data.version;
          }
          if (data.queryResult != null) {
            message.queryResult = FeatureCollectionPBuffer.QueryResult.fromObject(data.queryResult);
          }
          return message;
        }
        toObject() {
          const data: {
            version?: string;
            queryResult?: ReturnType<typeof FeatureCollectionPBuffer.QueryResult.prototype.toObject>;
          } = {};
          if (this.version != null) {
            data.version = this.version;
          }
          if (this.queryResult != null) {
            data.queryResult = this.queryResult.toObject();
          }
          return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
          const writer = w || new pb_1.BinaryWriter();
          if (this.version.length)
            writer.writeString(1, this.version);
          if (this.has_queryResult)
            writer.writeMessage(2, this.queryResult, () => this.queryResult.serialize(writer));
          if (!w)
            return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FeatureCollectionPBuffer {
          const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FeatureCollectionPBuffer();
          while (reader.nextField()) {
            if (reader.isEndGroup())
              break;
            switch (reader.getFieldNumber()) {
              case 1:
                message.version = reader.readString();
                break;
              case 2:
                reader.readMessage(message.queryResult, () => message.queryResult = FeatureCollectionPBuffer.QueryResult.deserialize(reader));
                break;
              default: reader.skipField();
            }
          }
          return message;
        }
        serializeBinary(): Uint8Array {
          return this.serialize();
        }
        static override deserializeBinary(bytes: Uint8Array): FeatureCollectionPBuffer {
          return FeatureCollectionPBuffer.deserialize(bytes);
        }
  }
  export namespace FeatureCollectionPBuffer {
    export enum GeometryType {
      esriGeometryTypePoint = 0,
      esriGeometryTypeMultipoint = 1,
      esriGeometryTypePolyline = 2,
      esriGeometryTypePolygon = 3,
      esriGeometryTypeMultipatch = 4,
      esriGeometryTypeNone = 127
    }
    export enum FieldType {
      esriFieldTypeSmallInteger = 0,
      esriFieldTypeInteger = 1,
      esriFieldTypeSingle = 2,
      esriFieldTypeDouble = 3,
      esriFieldTypeString = 4,
      esriFieldTypeDate = 5,
      esriFieldTypeOID = 6,
      esriFieldTypeGeometry = 7,
      esriFieldTypeBlob = 8,
      esriFieldTypeRaster = 9,
      esriFieldTypeGUID = 10,
      esriFieldTypeGlobalID = 11,
      esriFieldTypeXML = 12
    }
    export enum SQLType {
      sqlTypeBigInt = 0,
      sqlTypeBinary = 1,
      sqlTypeBit = 2,
      sqlTypeChar = 3,
      sqlTypeDate = 4,
      sqlTypeDecimal = 5,
      sqlTypeDouble = 6,
      sqlTypeFloat = 7,
      sqlTypeGeometry = 8,
      sqlTypeGUID = 9,
      sqlTypeInteger = 10,
      sqlTypeLongNVarchar = 11,
      sqlTypeLongVarbinary = 12,
      sqlTypeLongVarchar = 13,
      sqlTypeNChar = 14,
      sqlTypeNVarchar = 15,
      sqlTypeOther = 16,
      sqlTypeReal = 17,
      sqlTypeSmallInt = 18,
      sqlTypeSqlXml = 19,
      sqlTypeTime = 20,
      sqlTypeTimestamp = 21,
      sqlTypeTimestamp2 = 22,
      sqlTypeTinyInt = 23,
      sqlTypeVarbinary = 24,
      sqlTypeVarchar = 25
    }
    export enum QuantizeOriginPostion {
      upperLeft = 0,
      lowerLeft = 1
    }
    export class SpatialReference extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
              wkid?: number;
              lastestWkid?: number;
              vcsWkid?: number;
              latestVcsWkid?: number;
              wkt?: string;
            }) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("wkid" in data && data.wkid != undefined) {
                  this.wkid = data.wkid;
                }
                if ("lastestWkid" in data && data.lastestWkid != undefined) {
                  this.lastestWkid = data.lastestWkid;
                }
                if ("vcsWkid" in data && data.vcsWkid != undefined) {
                  this.vcsWkid = data.vcsWkid;
                }
                if ("latestVcsWkid" in data && data.latestVcsWkid != undefined) {
                  this.latestVcsWkid = data.latestVcsWkid;
                }
                if ("wkt" in data && data.wkt != undefined) {
                  this.wkt = data.wkt;
                }
              }
            }
            get wkid() {
              return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set wkid(value: number) {
              pb_1.Message.setField(this, 1, value);
            }
            get lastestWkid() {
              return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set lastestWkid(value: number) {
              pb_1.Message.setField(this, 2, value);
            }
            get vcsWkid() {
              return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set vcsWkid(value: number) {
              pb_1.Message.setField(this, 3, value);
            }
            get latestVcsWkid() {
              return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set latestVcsWkid(value: number) {
              pb_1.Message.setField(this, 4, value);
            }
            get wkt() {
              return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
            }
            set wkt(value: string) {
              pb_1.Message.setField(this, 5, value);
            }
            static fromObject(data: {
              wkid?: number;
              lastestWkid?: number;
              vcsWkid?: number;
              latestVcsWkid?: number;
              wkt?: string;
            }): SpatialReference {
              const message = new SpatialReference({});
              if (data.wkid != null) {
                message.wkid = data.wkid;
              }
              if (data.lastestWkid != null) {
                message.lastestWkid = data.lastestWkid;
              }
              if (data.vcsWkid != null) {
                message.vcsWkid = data.vcsWkid;
              }
              if (data.latestVcsWkid != null) {
                message.latestVcsWkid = data.latestVcsWkid;
              }
              if (data.wkt != null) {
                message.wkt = data.wkt;
              }
              return message;
            }
            toObject() {
              const data: {
                wkid?: number;
                lastestWkid?: number;
                vcsWkid?: number;
                latestVcsWkid?: number;
                wkt?: string;
              } = {};
              if (this.wkid != null) {
                data.wkid = this.wkid;
              }
              if (this.lastestWkid != null) {
                data.lastestWkid = this.lastestWkid;
              }
              if (this.vcsWkid != null) {
                data.vcsWkid = this.vcsWkid;
              }
              if (this.latestVcsWkid != null) {
                data.latestVcsWkid = this.latestVcsWkid;
              }
              if (this.wkt != null) {
                data.wkt = this.wkt;
              }
              return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
              const writer = w || new pb_1.BinaryWriter();
              if (this.wkid != 0)
                writer.writeUint32(1, this.wkid);
              if (this.lastestWkid != 0)
                writer.writeUint32(2, this.lastestWkid);
              if (this.vcsWkid != 0)
                writer.writeUint32(3, this.vcsWkid);
              if (this.latestVcsWkid != 0)
                writer.writeUint32(4, this.latestVcsWkid);
              if (this.wkt.length)
                writer.writeString(5, this.wkt);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SpatialReference {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SpatialReference();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.wkid = reader.readUint32();
                    break;
                  case 2:
                    message.lastestWkid = reader.readUint32();
                    break;
                  case 3:
                    message.vcsWkid = reader.readUint32();
                    break;
                  case 4:
                    message.latestVcsWkid = reader.readUint32();
                    break;
                  case 5:
                    message.wkt = reader.readString();
                    break;
                  default: reader.skipField();
                }
              }
              return message;
            }
            serializeBinary(): Uint8Array {
              return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): SpatialReference {
              return SpatialReference.deserialize(bytes);
            }
    }
    export class Field extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
              name?: string;
              fieldType?: FeatureCollectionPBuffer.FieldType;
              alias?: string;
              sqlType?: FeatureCollectionPBuffer.SQLType;
              domain?: string;
              defaultValue?: string;
            }) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                  this.name = data.name;
                }
                if ("fieldType" in data && data.fieldType != undefined) {
                  this.fieldType = data.fieldType;
                }
                if ("alias" in data && data.alias != undefined) {
                  this.alias = data.alias;
                }
                if ("sqlType" in data && data.sqlType != undefined) {
                  this.sqlType = data.sqlType;
                }
                if ("domain" in data && data.domain != undefined) {
                  this.domain = data.domain;
                }
                if ("defaultValue" in data && data.defaultValue != undefined) {
                  this.defaultValue = data.defaultValue;
                }
              }
            }
            get name() {
              return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set name(value: string) {
              pb_1.Message.setField(this, 1, value);
            }
            get fieldType() {
              return pb_1.Message.getFieldWithDefault(this, 2, FeatureCollectionPBuffer.FieldType.esriFieldTypeSmallInteger) as FeatureCollectionPBuffer.FieldType;
            }
            set fieldType(value: FeatureCollectionPBuffer.FieldType) {
              pb_1.Message.setField(this, 2, value);
            }
            get alias() {
              return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set alias(value: string) {
              pb_1.Message.setField(this, 3, value);
            }
            get sqlType() {
              return pb_1.Message.getFieldWithDefault(this, 4, FeatureCollectionPBuffer.SQLType.sqlTypeBigInt) as FeatureCollectionPBuffer.SQLType;
            }
            set sqlType(value: FeatureCollectionPBuffer.SQLType) {
              pb_1.Message.setField(this, 4, value);
            }
            get domain() {
              return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
            }
            set domain(value: string) {
              pb_1.Message.setField(this, 5, value);
            }
            get defaultValue() {
              return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
            }
            set defaultValue(value: string) {
              pb_1.Message.setField(this, 6, value);
            }
            static fromObject(data: {
              name?: string;
              fieldType?: FeatureCollectionPBuffer.FieldType;
              alias?: string;
              sqlType?: FeatureCollectionPBuffer.SQLType;
              domain?: string;
              defaultValue?: string;
            }): Field {
              const message = new Field({});
              if (data.name != null) {
                message.name = data.name;
              }
              if (data.fieldType != null) {
                message.fieldType = data.fieldType;
              }
              if (data.alias != null) {
                message.alias = data.alias;
              }
              if (data.sqlType != null) {
                message.sqlType = data.sqlType;
              }
              if (data.domain != null) {
                message.domain = data.domain;
              }
              if (data.defaultValue != null) {
                message.defaultValue = data.defaultValue;
              }
              return message;
            }
            toObject() {
              const data: {
                name?: string;
                fieldType?: FeatureCollectionPBuffer.FieldType;
                alias?: string;
                sqlType?: FeatureCollectionPBuffer.SQLType;
                domain?: string;
                defaultValue?: string;
              } = {};
              if (this.name != null) {
                data.name = this.name;
              }
              if (this.fieldType != null) {
                data.fieldType = this.fieldType;
              }
              if (this.alias != null) {
                data.alias = this.alias;
              }
              if (this.sqlType != null) {
                data.sqlType = this.sqlType;
              }
              if (this.domain != null) {
                data.domain = this.domain;
              }
              if (this.defaultValue != null) {
                data.defaultValue = this.defaultValue;
              }
              return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
              const writer = w || new pb_1.BinaryWriter();
              if (this.name.length)
                writer.writeString(1, this.name);
              if (this.fieldType != FeatureCollectionPBuffer.FieldType.esriFieldTypeSmallInteger)
                writer.writeEnum(2, this.fieldType);
              if (this.alias.length)
                writer.writeString(3, this.alias);
              if (this.sqlType != FeatureCollectionPBuffer.SQLType.sqlTypeBigInt)
                writer.writeEnum(4, this.sqlType);
              if (this.domain.length)
                writer.writeString(5, this.domain);
              if (this.defaultValue.length)
                writer.writeString(6, this.defaultValue);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Field {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Field();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.name = reader.readString();
                    break;
                  case 2:
                    message.fieldType = reader.readEnum();
                    break;
                  case 3:
                    message.alias = reader.readString();
                    break;
                  case 4:
                    message.sqlType = reader.readEnum();
                    break;
                  case 5:
                    message.domain = reader.readString();
                    break;
                  case 6:
                    message.defaultValue = reader.readString();
                    break;
                  default: reader.skipField();
                }
              }
              return message;
            }
            serializeBinary(): Uint8Array {
              return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): Field {
              return Field.deserialize(bytes);
            }
    }
    export class Value extends pb_1.Message {
            #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8, 9]];
            constructor(data?: any[] | ({} & (({
              string_value?: string;
              float_value?: never;
              double_value?: never;
              sint_value?: never;
              uint_value?: never;
              int64_value?: never;
              uint64_value?: never;
              sint64_value?: never;
              bool_value?: never;
            } | {
              string_value?: never;
              float_value?: number;
              double_value?: never;
              sint_value?: never;
              uint_value?: never;
              int64_value?: never;
              uint64_value?: never;
              sint64_value?: never;
              bool_value?: never;
            } | {
              string_value?: never;
              float_value?: never;
              double_value?: number;
              sint_value?: never;
              uint_value?: never;
              int64_value?: never;
              uint64_value?: never;
              sint64_value?: never;
              bool_value?: never;
            } | {
              string_value?: never;
              float_value?: never;
              double_value?: never;
              sint_value?: number;
              uint_value?: never;
              int64_value?: never;
              uint64_value?: never;
              sint64_value?: never;
              bool_value?: never;
            } | {
              string_value?: never;
              float_value?: never;
              double_value?: never;
              sint_value?: never;
              uint_value?: number;
              int64_value?: never;
              uint64_value?: never;
              sint64_value?: never;
              bool_value?: never;
            } | {
              string_value?: never;
              float_value?: never;
              double_value?: never;
              sint_value?: never;
              uint_value?: never;
              int64_value?: number;
              uint64_value?: never;
              sint64_value?: never;
              bool_value?: never;
            } | {
              string_value?: never;
              float_value?: never;
              double_value?: never;
              sint_value?: never;
              uint_value?: never;
              int64_value?: never;
              uint64_value?: number;
              sint64_value?: never;
              bool_value?: never;
            } | {
              string_value?: never;
              float_value?: never;
              double_value?: never;
              sint_value?: never;
              uint_value?: never;
              int64_value?: never;
              uint64_value?: never;
              sint64_value?: number;
              bool_value?: never;
            } | {
              string_value?: never;
              float_value?: never;
              double_value?: never;
              sint_value?: never;
              uint_value?: never;
              int64_value?: never;
              uint64_value?: never;
              sint64_value?: never;
              bool_value?: boolean;
            })))) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("string_value" in data && data.string_value != undefined) {
                  this.string_value = data.string_value;
                }
                if ("float_value" in data && data.float_value != undefined) {
                  this.float_value = data.float_value;
                }
                if ("double_value" in data && data.double_value != undefined) {
                  this.double_value = data.double_value;
                }
                if ("sint_value" in data && data.sint_value != undefined) {
                  this.sint_value = data.sint_value;
                }
                if ("uint_value" in data && data.uint_value != undefined) {
                  this.uint_value = data.uint_value;
                }
                if ("int64_value" in data && data.int64_value != undefined) {
                  this.int64_value = data.int64_value;
                }
                if ("uint64_value" in data && data.uint64_value != undefined) {
                  this.uint64_value = data.uint64_value;
                }
                if ("sint64_value" in data && data.sint64_value != undefined) {
                  this.sint64_value = data.sint64_value;
                }
                if ("bool_value" in data && data.bool_value != undefined) {
                  this.bool_value = data.bool_value;
                }
              }
            }
            get string_value() {
              return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set string_value(value: string) {
              pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
            }
            get has_string_value() {
              return pb_1.Message.getField(this, 1) != null;
            }
            get float_value() {
              return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set float_value(value: number) {
              pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
            }
            get has_float_value() {
              return pb_1.Message.getField(this, 2) != null;
            }
            get double_value() {
              return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set double_value(value: number) {
              pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
            }
            get has_double_value() {
              return pb_1.Message.getField(this, 3) != null;
            }
            get sint_value() {
              return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set sint_value(value: number) {
              pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
            }
            get has_sint_value() {
              return pb_1.Message.getField(this, 4) != null;
            }
            get uint_value() {
              return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set uint_value(value: number) {
              pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
            }
            get has_uint_value() {
              return pb_1.Message.getField(this, 5) != null;
            }
            get int64_value() {
              return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }
            set int64_value(value: number) {
              pb_1.Message.setOneofField(this, 6, this.#one_of_decls[0], value);
            }
            get has_int64_value() {
              return pb_1.Message.getField(this, 6) != null;
            }
            get uint64_value() {
              return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }
            set uint64_value(value: number) {
              pb_1.Message.setOneofField(this, 7, this.#one_of_decls[0], value);
            }
            get has_uint64_value() {
              return pb_1.Message.getField(this, 7) != null;
            }
            get sint64_value() {
              return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
            }
            set sint64_value(value: number) {
              pb_1.Message.setOneofField(this, 8, this.#one_of_decls[0], value);
            }
            get has_sint64_value() {
              return pb_1.Message.getField(this, 8) != null;
            }
            get bool_value() {
              return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
            }
            set bool_value(value: boolean) {
              pb_1.Message.setOneofField(this, 9, this.#one_of_decls[0], value);
            }
            get has_bool_value() {
              return pb_1.Message.getField(this, 9) != null;
            }
            get value_type() {
              const cases: {
                [index: number]: "none" | "string_value" | "float_value" | "double_value" | "sint_value" | "uint_value" | "int64_value" | "uint64_value" | "sint64_value" | "bool_value";
              } = {
                0: "none",
                1: "string_value",
                2: "float_value",
                3: "double_value",
                4: "sint_value",
                5: "uint_value",
                6: "int64_value",
                7: "uint64_value",
                8: "sint64_value",
                9: "bool_value",
              };
              return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9])];
            }
            static fromObject(data: {
              string_value?: string;
              float_value?: number;
              double_value?: number;
              sint_value?: number;
              uint_value?: number;
              int64_value?: number;
              uint64_value?: number;
              sint64_value?: number;
              bool_value?: boolean;
            }): Value {
              const message = new Value({});
              if (data.string_value != null) {
                message.string_value = data.string_value;
              }
              if (data.float_value != null) {
                message.float_value = data.float_value;
              }
              if (data.double_value != null) {
                message.double_value = data.double_value;
              }
              if (data.sint_value != null) {
                message.sint_value = data.sint_value;
              }
              if (data.uint_value != null) {
                message.uint_value = data.uint_value;
              }
              if (data.int64_value != null) {
                message.int64_value = data.int64_value;
              }
              if (data.uint64_value != null) {
                message.uint64_value = data.uint64_value;
              }
              if (data.sint64_value != null) {
                message.sint64_value = data.sint64_value;
              }
              if (data.bool_value != null) {
                message.bool_value = data.bool_value;
              }
              return message;
            }
            toObject() {
              const data: {
                string_value?: string;
                float_value?: number;
                double_value?: number;
                sint_value?: number;
                uint_value?: number;
                int64_value?: number;
                uint64_value?: number;
                sint64_value?: number;
                bool_value?: boolean;
              } = {};
              if (this.string_value != null) {
                data.string_value = this.string_value;
              }
              if (this.float_value != null) {
                data.float_value = this.float_value;
              }
              if (this.double_value != null) {
                data.double_value = this.double_value;
              }
              if (this.sint_value != null) {
                data.sint_value = this.sint_value;
              }
              if (this.uint_value != null) {
                data.uint_value = this.uint_value;
              }
              if (this.int64_value != null) {
                data.int64_value = this.int64_value;
              }
              if (this.uint64_value != null) {
                data.uint64_value = this.uint64_value;
              }
              if (this.sint64_value != null) {
                data.sint64_value = this.sint64_value;
              }
              if (this.bool_value != null) {
                data.bool_value = this.bool_value;
              }
              return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
              const writer = w || new pb_1.BinaryWriter();
              if (this.has_string_value)
                writer.writeString(1, this.string_value);
              if (this.has_float_value)
                writer.writeFloat(2, this.float_value);
              if (this.has_double_value)
                writer.writeDouble(3, this.double_value);
              if (this.has_sint_value)
                writer.writeSint32(4, this.sint_value);
              if (this.has_uint_value)
                writer.writeUint32(5, this.uint_value);
              if (this.has_int64_value)
                writer.writeInt64(6, this.int64_value);
              if (this.has_uint64_value)
                writer.writeUint64(7, this.uint64_value);
              if (this.has_sint64_value)
                writer.writeSint64(8, this.sint64_value);
              if (this.has_bool_value)
                writer.writeBool(9, this.bool_value);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Value {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Value();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.string_value = reader.readString();
                    break;
                  case 2:
                    message.float_value = reader.readFloat();
                    break;
                  case 3:
                    message.double_value = reader.readDouble();
                    break;
                  case 4:
                    message.sint_value = reader.readSint32();
                    break;
                  case 5:
                    message.uint_value = reader.readUint32();
                    break;
                  case 6:
                    message.int64_value = reader.readInt64();
                    break;
                  case 7:
                    message.uint64_value = reader.readUint64();
                    break;
                  case 8:
                    message.sint64_value = reader.readSint64();
                    break;
                  case 9:
                    message.bool_value = reader.readBool();
                    break;
                  default: reader.skipField();
                }
              }
              return message;
            }
            serializeBinary(): Uint8Array {
              return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): Value {
              return Value.deserialize(bytes);
            }
    }
    export class Geometry extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
              lengths?: number[];
              coords?: number[];
            }) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("lengths" in data && data.lengths != undefined) {
                  this.lengths = data.lengths;
                }
                if ("coords" in data && data.coords != undefined) {
                  this.coords = data.coords;
                }
              }
            }
            get lengths() {
              return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
            }
            set lengths(value: number[]) {
              pb_1.Message.setField(this, 2, value);
            }
            get coords() {
              return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
            }
            set coords(value: number[]) {
              pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
              lengths?: number[];
              coords?: number[];
            }): Geometry {
              const message = new Geometry({});
              if (data.lengths != null) {
                message.lengths = data.lengths;
              }
              if (data.coords != null) {
                message.coords = data.coords;
              }
              return message;
            }
            toObject() {
              const data: {
                lengths?: number[];
                coords?: number[];
              } = {};
              if (this.lengths != null) {
                data.lengths = this.lengths;
              }
              if (this.coords != null) {
                data.coords = this.coords;
              }
              return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
              const writer = w || new pb_1.BinaryWriter();
              if (this.lengths.length)
                writer.writePackedUint32(2, this.lengths);
              if (this.coords.length)
                writer.writePackedSint64(3, this.coords);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Geometry {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Geometry();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 2:
                    message.lengths = reader.readPackedUint32();
                    break;
                  case 3:
                    message.coords = reader.readPackedSint64();
                    break;
                  default: reader.skipField();
                }
              }
              return message;
            }
            serializeBinary(): Uint8Array {
              return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): Geometry {
              return Geometry.deserialize(bytes);
            }
    }
    export class esriShapeBuffer extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
              bytes?: Uint8Array;
            }) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("bytes" in data && data.bytes != undefined) {
                  this.bytes = data.bytes;
                }
              }
            }
            get bytes() {
              return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array()) as Uint8Array;
            }
            set bytes(value: Uint8Array) {
              pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
              bytes?: Uint8Array;
            }): esriShapeBuffer {
              const message = new esriShapeBuffer({});
              if (data.bytes != null) {
                message.bytes = data.bytes;
              }
              return message;
            }
            toObject() {
              const data: {
                bytes?: Uint8Array;
              } = {};
              if (this.bytes != null) {
                data.bytes = this.bytes;
              }
              return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
              const writer = w || new pb_1.BinaryWriter();
              if (this.bytes.length)
                writer.writeBytes(1, this.bytes);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): esriShapeBuffer {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new esriShapeBuffer();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.bytes = reader.readBytes();
                    break;
                  default: reader.skipField();
                }
              }
              return message;
            }
            serializeBinary(): Uint8Array {
              return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): esriShapeBuffer {
              return esriShapeBuffer.deserialize(bytes);
            }
    }
    export class Feature extends pb_1.Message {
            #one_of_decls: number[][] = [[2, 3]];
            constructor(data?: any[] | ({
              attributes?: FeatureCollectionPBuffer.Value[];
              centroid?: FeatureCollectionPBuffer.Geometry;
            } & (({
              geometry?: FeatureCollectionPBuffer.Geometry;
              shapeBuffer?: never;
            } | {
              geometry?: never;
              shapeBuffer?: FeatureCollectionPBuffer.esriShapeBuffer;
            })))) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("attributes" in data && data.attributes != undefined) {
                  this.attributes = data.attributes;
                }
                if ("geometry" in data && data.geometry != undefined) {
                  this.geometry = data.geometry;
                }
                if ("shapeBuffer" in data && data.shapeBuffer != undefined) {
                  this.shapeBuffer = data.shapeBuffer;
                }
                if ("centroid" in data && data.centroid != undefined) {
                  this.centroid = data.centroid;
                }
              }
            }
            get attributes() {
              return pb_1.Message.getRepeatedWrapperField(this, FeatureCollectionPBuffer.Value, 1) as FeatureCollectionPBuffer.Value[];
            }
            set attributes(value: FeatureCollectionPBuffer.Value[]) {
              pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            get geometry() {
              return pb_1.Message.getWrapperField(this, FeatureCollectionPBuffer.Geometry, 2) as FeatureCollectionPBuffer.Geometry;
            }
            set geometry(value: FeatureCollectionPBuffer.Geometry) {
              pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
            }
            get has_geometry() {
              return pb_1.Message.getField(this, 2) != null;
            }
            get shapeBuffer() {
              return pb_1.Message.getWrapperField(this, FeatureCollectionPBuffer.esriShapeBuffer, 3) as FeatureCollectionPBuffer.esriShapeBuffer;
            }
            set shapeBuffer(value: FeatureCollectionPBuffer.esriShapeBuffer) {
              pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
            }
            get has_shapeBuffer() {
              return pb_1.Message.getField(this, 3) != null;
            }
            get centroid() {
              return pb_1.Message.getWrapperField(this, FeatureCollectionPBuffer.Geometry, 4) as FeatureCollectionPBuffer.Geometry;
            }
            set centroid(value: FeatureCollectionPBuffer.Geometry) {
              pb_1.Message.setWrapperField(this, 4, value);
            }
            get has_centroid() {
              return pb_1.Message.getField(this, 4) != null;
            }
            get compressed_geometry() {
              const cases: {
                [index: number]: "none" | "geometry" | "shapeBuffer";
              } = {
                0: "none",
                2: "geometry",
                3: "shapeBuffer",
              };
              return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
            }
            static fromObject(data: {
              attributes?: ReturnType<typeof FeatureCollectionPBuffer.Value.prototype.toObject>[];
              geometry?: ReturnType<typeof FeatureCollectionPBuffer.Geometry.prototype.toObject>;
              shapeBuffer?: ReturnType<typeof FeatureCollectionPBuffer.esriShapeBuffer.prototype.toObject>;
              centroid?: ReturnType<typeof FeatureCollectionPBuffer.Geometry.prototype.toObject>;
            }): Feature {
              const message = new Feature({});
              if (data.attributes != null) {
                message.attributes = data.attributes.map((item) => FeatureCollectionPBuffer.Value.fromObject(item));
              }
              if (data.geometry != null) {
                message.geometry = FeatureCollectionPBuffer.Geometry.fromObject(data.geometry);
              }
              if (data.shapeBuffer != null) {
                message.shapeBuffer = FeatureCollectionPBuffer.esriShapeBuffer.fromObject(data.shapeBuffer);
              }
              if (data.centroid != null) {
                message.centroid = FeatureCollectionPBuffer.Geometry.fromObject(data.centroid);
              }
              return message;
            }
            toObject() {
              const data: {
                attributes?: ReturnType<typeof FeatureCollectionPBuffer.Value.prototype.toObject>[];
                geometry?: ReturnType<typeof FeatureCollectionPBuffer.Geometry.prototype.toObject>;
                shapeBuffer?: ReturnType<typeof FeatureCollectionPBuffer.esriShapeBuffer.prototype.toObject>;
                centroid?: ReturnType<typeof FeatureCollectionPBuffer.Geometry.prototype.toObject>;
              } = {};
              if (this.attributes != null) {
                data.attributes = this.attributes.map((item: FeatureCollectionPBuffer.Value) => item.toObject());
              }
              if (this.geometry != null) {
                data.geometry = this.geometry.toObject();
              }
              if (this.shapeBuffer != null) {
                data.shapeBuffer = this.shapeBuffer.toObject();
              }
              if (this.centroid != null) {
                data.centroid = this.centroid.toObject();
              }
              return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
              const writer = w || new pb_1.BinaryWriter();
              if (this.attributes.length)
                writer.writeRepeatedMessage(1, this.attributes, (item: FeatureCollectionPBuffer.Value) => item.serialize(writer));
              if (this.has_geometry)
                writer.writeMessage(2, this.geometry, () => this.geometry.serialize(writer));
              if (this.has_shapeBuffer)
                writer.writeMessage(3, this.shapeBuffer, () => this.shapeBuffer.serialize(writer));
              if (this.has_centroid)
                writer.writeMessage(4, this.centroid, () => this.centroid.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Feature {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Feature();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.attributes, () => pb_1.Message.addToRepeatedWrapperField(message, 1, FeatureCollectionPBuffer.Value.deserialize(reader), FeatureCollectionPBuffer.Value));
                    break;
                  case 2:
                    reader.readMessage(message.geometry, () => message.geometry = FeatureCollectionPBuffer.Geometry.deserialize(reader));
                    break;
                  case 3:
                    reader.readMessage(message.shapeBuffer, () => message.shapeBuffer = FeatureCollectionPBuffer.esriShapeBuffer.deserialize(reader));
                    break;
                  case 4:
                    reader.readMessage(message.centroid, () => message.centroid = FeatureCollectionPBuffer.Geometry.deserialize(reader));
                    break;
                  default: reader.skipField();
                }
              }
              return message;
            }
            serializeBinary(): Uint8Array {
              return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): Feature {
              return Feature.deserialize(bytes);
            }
    }
    export class UniqueIdField extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
              name?: string;
              isSystemMaintained?: boolean;
            }) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                  this.name = data.name;
                }
                if ("isSystemMaintained" in data && data.isSystemMaintained != undefined) {
                  this.isSystemMaintained = data.isSystemMaintained;
                }
              }
            }
            get name() {
              return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set name(value: string) {
              pb_1.Message.setField(this, 1, value);
            }
            get isSystemMaintained() {
              return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
            }
            set isSystemMaintained(value: boolean) {
              pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
              name?: string;
              isSystemMaintained?: boolean;
            }): UniqueIdField {
              const message = new UniqueIdField({});
              if (data.name != null) {
                message.name = data.name;
              }
              if (data.isSystemMaintained != null) {
                message.isSystemMaintained = data.isSystemMaintained;
              }
              return message;
            }
            toObject() {
              const data: {
                name?: string;
                isSystemMaintained?: boolean;
              } = {};
              if (this.name != null) {
                data.name = this.name;
              }
              if (this.isSystemMaintained != null) {
                data.isSystemMaintained = this.isSystemMaintained;
              }
              return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
              const writer = w || new pb_1.BinaryWriter();
              if (this.name.length)
                writer.writeString(1, this.name);
              if (this.isSystemMaintained != false)
                writer.writeBool(2, this.isSystemMaintained);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UniqueIdField {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UniqueIdField();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.name = reader.readString();
                    break;
                  case 2:
                    message.isSystemMaintained = reader.readBool();
                    break;
                  default: reader.skipField();
                }
              }
              return message;
            }
            serializeBinary(): Uint8Array {
              return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): UniqueIdField {
              return UniqueIdField.deserialize(bytes);
            }
    }
    export class GeometryProperties extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
              shapeAreaFieldName?: string;
              shapeLengthFieldName?: string;
              units?: string;
            }) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("shapeAreaFieldName" in data && data.shapeAreaFieldName != undefined) {
                  this.shapeAreaFieldName = data.shapeAreaFieldName;
                }
                if ("shapeLengthFieldName" in data && data.shapeLengthFieldName != undefined) {
                  this.shapeLengthFieldName = data.shapeLengthFieldName;
                }
                if ("units" in data && data.units != undefined) {
                  this.units = data.units;
                }
              }
            }
            get shapeAreaFieldName() {
              return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set shapeAreaFieldName(value: string) {
              pb_1.Message.setField(this, 1, value);
            }
            get shapeLengthFieldName() {
              return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set shapeLengthFieldName(value: string) {
              pb_1.Message.setField(this, 2, value);
            }
            get units() {
              return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set units(value: string) {
              pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
              shapeAreaFieldName?: string;
              shapeLengthFieldName?: string;
              units?: string;
            }): GeometryProperties {
              const message = new GeometryProperties({});
              if (data.shapeAreaFieldName != null) {
                message.shapeAreaFieldName = data.shapeAreaFieldName;
              }
              if (data.shapeLengthFieldName != null) {
                message.shapeLengthFieldName = data.shapeLengthFieldName;
              }
              if (data.units != null) {
                message.units = data.units;
              }
              return message;
            }
            toObject() {
              const data: {
                shapeAreaFieldName?: string;
                shapeLengthFieldName?: string;
                units?: string;
              } = {};
              if (this.shapeAreaFieldName != null) {
                data.shapeAreaFieldName = this.shapeAreaFieldName;
              }
              if (this.shapeLengthFieldName != null) {
                data.shapeLengthFieldName = this.shapeLengthFieldName;
              }
              if (this.units != null) {
                data.units = this.units;
              }
              return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
              const writer = w || new pb_1.BinaryWriter();
              if (this.shapeAreaFieldName.length)
                writer.writeString(1, this.shapeAreaFieldName);
              if (this.shapeLengthFieldName.length)
                writer.writeString(2, this.shapeLengthFieldName);
              if (this.units.length)
                writer.writeString(3, this.units);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GeometryProperties {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GeometryProperties();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.shapeAreaFieldName = reader.readString();
                    break;
                  case 2:
                    message.shapeLengthFieldName = reader.readString();
                    break;
                  case 3:
                    message.units = reader.readString();
                    break;
                  default: reader.skipField();
                }
              }
              return message;
            }
            serializeBinary(): Uint8Array {
              return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): GeometryProperties {
              return GeometryProperties.deserialize(bytes);
            }
    }
    export class ServerGens extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
              minServerGen?: number;
              serverGen?: number;
            }) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("minServerGen" in data && data.minServerGen != undefined) {
                  this.minServerGen = data.minServerGen;
                }
                if ("serverGen" in data && data.serverGen != undefined) {
                  this.serverGen = data.serverGen;
                }
              }
            }
            get minServerGen() {
              return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set minServerGen(value: number) {
              pb_1.Message.setField(this, 1, value);
            }
            get serverGen() {
              return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set serverGen(value: number) {
              pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
              minServerGen?: number;
              serverGen?: number;
            }): ServerGens {
              const message = new ServerGens({});
              if (data.minServerGen != null) {
                message.minServerGen = data.minServerGen;
              }
              if (data.serverGen != null) {
                message.serverGen = data.serverGen;
              }
              return message;
            }
            toObject() {
              const data: {
                minServerGen?: number;
                serverGen?: number;
              } = {};
              if (this.minServerGen != null) {
                data.minServerGen = this.minServerGen;
              }
              if (this.serverGen != null) {
                data.serverGen = this.serverGen;
              }
              return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
              const writer = w || new pb_1.BinaryWriter();
              if (this.minServerGen != 0)
                writer.writeUint64(1, this.minServerGen);
              if (this.serverGen != 0)
                writer.writeUint64(2, this.serverGen);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServerGens {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServerGens();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.minServerGen = reader.readUint64();
                    break;
                  case 2:
                    message.serverGen = reader.readUint64();
                    break;
                  default: reader.skipField();
                }
              }
              return message;
            }
            serializeBinary(): Uint8Array {
              return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): ServerGens {
              return ServerGens.deserialize(bytes);
            }
    }
    export class Scale extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
              xScale?: number;
              yScale?: number;
              mScale?: number;
              zScale?: number;
            }) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("xScale" in data && data.xScale != undefined) {
                  this.xScale = data.xScale;
                }
                if ("yScale" in data && data.yScale != undefined) {
                  this.yScale = data.yScale;
                }
                if ("mScale" in data && data.mScale != undefined) {
                  this.mScale = data.mScale;
                }
                if ("zScale" in data && data.zScale != undefined) {
                  this.zScale = data.zScale;
                }
              }
            }
            get xScale() {
              return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set xScale(value: number) {
              pb_1.Message.setField(this, 1, value);
            }
            get yScale() {
              return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set yScale(value: number) {
              pb_1.Message.setField(this, 2, value);
            }
            get mScale() {
              return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set mScale(value: number) {
              pb_1.Message.setField(this, 3, value);
            }
            get zScale() {
              return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set zScale(value: number) {
              pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data: {
              xScale?: number;
              yScale?: number;
              mScale?: number;
              zScale?: number;
            }): Scale {
              const message = new Scale({});
              if (data.xScale != null) {
                message.xScale = data.xScale;
              }
              if (data.yScale != null) {
                message.yScale = data.yScale;
              }
              if (data.mScale != null) {
                message.mScale = data.mScale;
              }
              if (data.zScale != null) {
                message.zScale = data.zScale;
              }
              return message;
            }
            toObject() {
              const data: {
                xScale?: number;
                yScale?: number;
                mScale?: number;
                zScale?: number;
              } = {};
              if (this.xScale != null) {
                data.xScale = this.xScale;
              }
              if (this.yScale != null) {
                data.yScale = this.yScale;
              }
              if (this.mScale != null) {
                data.mScale = this.mScale;
              }
              if (this.zScale != null) {
                data.zScale = this.zScale;
              }
              return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
              const writer = w || new pb_1.BinaryWriter();
              if (this.xScale != 0)
                writer.writeDouble(1, this.xScale);
              if (this.yScale != 0)
                writer.writeDouble(2, this.yScale);
              if (this.mScale != 0)
                writer.writeDouble(3, this.mScale);
              if (this.zScale != 0)
                writer.writeDouble(4, this.zScale);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Scale {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Scale();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.xScale = reader.readDouble();
                    break;
                  case 2:
                    message.yScale = reader.readDouble();
                    break;
                  case 3:
                    message.mScale = reader.readDouble();
                    break;
                  case 4:
                    message.zScale = reader.readDouble();
                    break;
                  default: reader.skipField();
                }
              }
              return message;
            }
            serializeBinary(): Uint8Array {
              return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): Scale {
              return Scale.deserialize(bytes);
            }
    }
    export class Translate extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
              xTranslate?: number;
              yTranslate?: number;
              mTranslate?: number;
              zTranslate?: number;
            }) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("xTranslate" in data && data.xTranslate != undefined) {
                  this.xTranslate = data.xTranslate;
                }
                if ("yTranslate" in data && data.yTranslate != undefined) {
                  this.yTranslate = data.yTranslate;
                }
                if ("mTranslate" in data && data.mTranslate != undefined) {
                  this.mTranslate = data.mTranslate;
                }
                if ("zTranslate" in data && data.zTranslate != undefined) {
                  this.zTranslate = data.zTranslate;
                }
              }
            }
            get xTranslate() {
              return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set xTranslate(value: number) {
              pb_1.Message.setField(this, 1, value);
            }
            get yTranslate() {
              return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set yTranslate(value: number) {
              pb_1.Message.setField(this, 2, value);
            }
            get mTranslate() {
              return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set mTranslate(value: number) {
              pb_1.Message.setField(this, 3, value);
            }
            get zTranslate() {
              return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set zTranslate(value: number) {
              pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data: {
              xTranslate?: number;
              yTranslate?: number;
              mTranslate?: number;
              zTranslate?: number;
            }): Translate {
              const message = new Translate({});
              if (data.xTranslate != null) {
                message.xTranslate = data.xTranslate;
              }
              if (data.yTranslate != null) {
                message.yTranslate = data.yTranslate;
              }
              if (data.mTranslate != null) {
                message.mTranslate = data.mTranslate;
              }
              if (data.zTranslate != null) {
                message.zTranslate = data.zTranslate;
              }
              return message;
            }
            toObject() {
              const data: {
                xTranslate?: number;
                yTranslate?: number;
                mTranslate?: number;
                zTranslate?: number;
              } = {};
              if (this.xTranslate != null) {
                data.xTranslate = this.xTranslate;
              }
              if (this.yTranslate != null) {
                data.yTranslate = this.yTranslate;
              }
              if (this.mTranslate != null) {
                data.mTranslate = this.mTranslate;
              }
              if (this.zTranslate != null) {
                data.zTranslate = this.zTranslate;
              }
              return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
              const writer = w || new pb_1.BinaryWriter();
              if (this.xTranslate != 0)
                writer.writeDouble(1, this.xTranslate);
              if (this.yTranslate != 0)
                writer.writeDouble(2, this.yTranslate);
              if (this.mTranslate != 0)
                writer.writeDouble(3, this.mTranslate);
              if (this.zTranslate != 0)
                writer.writeDouble(4, this.zTranslate);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Translate {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Translate();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.xTranslate = reader.readDouble();
                    break;
                  case 2:
                    message.yTranslate = reader.readDouble();
                    break;
                  case 3:
                    message.mTranslate = reader.readDouble();
                    break;
                  case 4:
                    message.zTranslate = reader.readDouble();
                    break;
                  default: reader.skipField();
                }
              }
              return message;
            }
            serializeBinary(): Uint8Array {
              return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): Translate {
              return Translate.deserialize(bytes);
            }
    }
    export class Transform extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
              quantizeOriginPostion?: FeatureCollectionPBuffer.QuantizeOriginPostion;
              scale?: FeatureCollectionPBuffer.Scale;
              translate?: FeatureCollectionPBuffer.Translate;
            }) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("quantizeOriginPostion" in data && data.quantizeOriginPostion != undefined) {
                  this.quantizeOriginPostion = data.quantizeOriginPostion;
                }
                if ("scale" in data && data.scale != undefined) {
                  this.scale = data.scale;
                }
                if ("translate" in data && data.translate != undefined) {
                  this.translate = data.translate;
                }
              }
            }
            get quantizeOriginPostion() {
              return pb_1.Message.getFieldWithDefault(this, 1, FeatureCollectionPBuffer.QuantizeOriginPostion.upperLeft) as FeatureCollectionPBuffer.QuantizeOriginPostion;
            }
            set quantizeOriginPostion(value: FeatureCollectionPBuffer.QuantizeOriginPostion) {
              pb_1.Message.setField(this, 1, value);
            }
            get scale() {
              return pb_1.Message.getWrapperField(this, FeatureCollectionPBuffer.Scale, 2) as FeatureCollectionPBuffer.Scale;
            }
            set scale(value: FeatureCollectionPBuffer.Scale) {
              pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_scale() {
              return pb_1.Message.getField(this, 2) != null;
            }
            get translate() {
              return pb_1.Message.getWrapperField(this, FeatureCollectionPBuffer.Translate, 3) as FeatureCollectionPBuffer.Translate;
            }
            set translate(value: FeatureCollectionPBuffer.Translate) {
              pb_1.Message.setWrapperField(this, 3, value);
            }
            get has_translate() {
              return pb_1.Message.getField(this, 3) != null;
            }
            static fromObject(data: {
              quantizeOriginPostion?: FeatureCollectionPBuffer.QuantizeOriginPostion;
              scale?: ReturnType<typeof FeatureCollectionPBuffer.Scale.prototype.toObject>;
              translate?: ReturnType<typeof FeatureCollectionPBuffer.Translate.prototype.toObject>;
            }): Transform {
              const message = new Transform({});
              if (data.quantizeOriginPostion != null) {
                message.quantizeOriginPostion = data.quantizeOriginPostion;
              }
              if (data.scale != null) {
                message.scale = FeatureCollectionPBuffer.Scale.fromObject(data.scale);
              }
              if (data.translate != null) {
                message.translate = FeatureCollectionPBuffer.Translate.fromObject(data.translate);
              }
              return message;
            }
            toObject() {
              const data: {
                quantizeOriginPostion?: FeatureCollectionPBuffer.QuantizeOriginPostion;
                scale?: ReturnType<typeof FeatureCollectionPBuffer.Scale.prototype.toObject>;
                translate?: ReturnType<typeof FeatureCollectionPBuffer.Translate.prototype.toObject>;
              } = {};
              if (this.quantizeOriginPostion != null) {
                data.quantizeOriginPostion = this.quantizeOriginPostion;
              }
              if (this.scale != null) {
                data.scale = this.scale.toObject();
              }
              if (this.translate != null) {
                data.translate = this.translate.toObject();
              }
              return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
              const writer = w || new pb_1.BinaryWriter();
              if (this.quantizeOriginPostion != FeatureCollectionPBuffer.QuantizeOriginPostion.upperLeft)
                writer.writeEnum(1, this.quantizeOriginPostion);
              if (this.has_scale)
                writer.writeMessage(2, this.scale, () => this.scale.serialize(writer));
              if (this.has_translate)
                writer.writeMessage(3, this.translate, () => this.translate.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Transform {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Transform();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.quantizeOriginPostion = reader.readEnum();
                    break;
                  case 2:
                    reader.readMessage(message.scale, () => message.scale = FeatureCollectionPBuffer.Scale.deserialize(reader));
                    break;
                  case 3:
                    reader.readMessage(message.translate, () => message.translate = FeatureCollectionPBuffer.Translate.deserialize(reader));
                    break;
                  default: reader.skipField();
                }
              }
              return message;
            }
            serializeBinary(): Uint8Array {
              return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): Transform {
              return Transform.deserialize(bytes);
            }
    }
    export class FeatureResult extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
              objectIdFieldName?: string;
              uniqueIdField?: FeatureCollectionPBuffer.UniqueIdField;
              globalIdFieldName?: string;
              geohashFieldName?: string;
              geometryProperties?: FeatureCollectionPBuffer.GeometryProperties;
              serverGens?: FeatureCollectionPBuffer.ServerGens;
              geometryType?: FeatureCollectionPBuffer.GeometryType;
              spatialReference?: FeatureCollectionPBuffer.SpatialReference;
              exceededTransferLimit?: boolean;
              hasZ?: boolean;
              hasM?: boolean;
              transform?: FeatureCollectionPBuffer.Transform;
              fields?: FeatureCollectionPBuffer.Field[];
              values?: FeatureCollectionPBuffer.Value[];
              features?: FeatureCollectionPBuffer.Feature[];
            }) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [13, 14, 15], this.#one_of_decls);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("objectIdFieldName" in data && data.objectIdFieldName != undefined) {
                  this.objectIdFieldName = data.objectIdFieldName;
                }
                if ("uniqueIdField" in data && data.uniqueIdField != undefined) {
                  this.uniqueIdField = data.uniqueIdField;
                }
                if ("globalIdFieldName" in data && data.globalIdFieldName != undefined) {
                  this.globalIdFieldName = data.globalIdFieldName;
                }
                if ("geohashFieldName" in data && data.geohashFieldName != undefined) {
                  this.geohashFieldName = data.geohashFieldName;
                }
                if ("geometryProperties" in data && data.geometryProperties != undefined) {
                  this.geometryProperties = data.geometryProperties;
                }
                if ("serverGens" in data && data.serverGens != undefined) {
                  this.serverGens = data.serverGens;
                }
                if ("geometryType" in data && data.geometryType != undefined) {
                  this.geometryType = data.geometryType;
                }
                if ("spatialReference" in data && data.spatialReference != undefined) {
                  this.spatialReference = data.spatialReference;
                }
                if ("exceededTransferLimit" in data && data.exceededTransferLimit != undefined) {
                  this.exceededTransferLimit = data.exceededTransferLimit;
                }
                if ("hasZ" in data && data.hasZ != undefined) {
                  this.hasZ = data.hasZ;
                }
                if ("hasM" in data && data.hasM != undefined) {
                  this.hasM = data.hasM;
                }
                if ("transform" in data && data.transform != undefined) {
                  this.transform = data.transform;
                }
                if ("fields" in data && data.fields != undefined) {
                  this.fields = data.fields;
                }
                if ("values" in data && data.values != undefined) {
                  this.values = data.values;
                }
                if ("features" in data && data.features != undefined) {
                  this.features = data.features;
                }
              }
            }
            get objectIdFieldName() {
              return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set objectIdFieldName(value: string) {
              pb_1.Message.setField(this, 1, value);
            }
            get uniqueIdField() {
              return pb_1.Message.getWrapperField(this, FeatureCollectionPBuffer.UniqueIdField, 2) as FeatureCollectionPBuffer.UniqueIdField;
            }
            set uniqueIdField(value: FeatureCollectionPBuffer.UniqueIdField) {
              pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_uniqueIdField() {
              return pb_1.Message.getField(this, 2) != null;
            }
            get globalIdFieldName() {
              return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set globalIdFieldName(value: string) {
              pb_1.Message.setField(this, 3, value);
            }
            get geohashFieldName() {
              return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set geohashFieldName(value: string) {
              pb_1.Message.setField(this, 4, value);
            }
            get geometryProperties() {
              return pb_1.Message.getWrapperField(this, FeatureCollectionPBuffer.GeometryProperties, 5) as FeatureCollectionPBuffer.GeometryProperties;
            }
            set geometryProperties(value: FeatureCollectionPBuffer.GeometryProperties) {
              pb_1.Message.setWrapperField(this, 5, value);
            }
            get has_geometryProperties() {
              return pb_1.Message.getField(this, 5) != null;
            }
            get serverGens() {
              return pb_1.Message.getWrapperField(this, FeatureCollectionPBuffer.ServerGens, 6) as FeatureCollectionPBuffer.ServerGens;
            }
            set serverGens(value: FeatureCollectionPBuffer.ServerGens) {
              pb_1.Message.setWrapperField(this, 6, value);
            }
            get has_serverGens() {
              return pb_1.Message.getField(this, 6) != null;
            }
            get geometryType() {
              return pb_1.Message.getFieldWithDefault(this, 7, FeatureCollectionPBuffer.GeometryType.esriGeometryTypePoint) as FeatureCollectionPBuffer.GeometryType;
            }
            set geometryType(value: FeatureCollectionPBuffer.GeometryType) {
              pb_1.Message.setField(this, 7, value);
            }
            get spatialReference() {
              return pb_1.Message.getWrapperField(this, FeatureCollectionPBuffer.SpatialReference, 8) as FeatureCollectionPBuffer.SpatialReference;
            }
            set spatialReference(value: FeatureCollectionPBuffer.SpatialReference) {
              pb_1.Message.setWrapperField(this, 8, value);
            }
            get has_spatialReference() {
              return pb_1.Message.getField(this, 8) != null;
            }
            get exceededTransferLimit() {
              return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
            }
            set exceededTransferLimit(value: boolean) {
              pb_1.Message.setField(this, 9, value);
            }
            get hasZ() {
              return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
            }
            set hasZ(value: boolean) {
              pb_1.Message.setField(this, 10, value);
            }
            get hasM() {
              return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
            }
            set hasM(value: boolean) {
              pb_1.Message.setField(this, 11, value);
            }
            get transform() {
              return pb_1.Message.getWrapperField(this, FeatureCollectionPBuffer.Transform, 12) as FeatureCollectionPBuffer.Transform;
            }
            set transform(value: FeatureCollectionPBuffer.Transform) {
              pb_1.Message.setWrapperField(this, 12, value);
            }
            get has_transform() {
              return pb_1.Message.getField(this, 12) != null;
            }
            get fields() {
              return pb_1.Message.getRepeatedWrapperField(this, FeatureCollectionPBuffer.Field, 13) as FeatureCollectionPBuffer.Field[];
            }
            set fields(value: FeatureCollectionPBuffer.Field[]) {
              pb_1.Message.setRepeatedWrapperField(this, 13, value);
            }
            get values() {
              return pb_1.Message.getRepeatedWrapperField(this, FeatureCollectionPBuffer.Value, 14) as FeatureCollectionPBuffer.Value[];
            }
            set values(value: FeatureCollectionPBuffer.Value[]) {
              pb_1.Message.setRepeatedWrapperField(this, 14, value);
            }
            get features() {
              return pb_1.Message.getRepeatedWrapperField(this, FeatureCollectionPBuffer.Feature, 15) as FeatureCollectionPBuffer.Feature[];
            }
            set features(value: FeatureCollectionPBuffer.Feature[]) {
              pb_1.Message.setRepeatedWrapperField(this, 15, value);
            }
            static fromObject(data: {
              objectIdFieldName?: string;
              uniqueIdField?: ReturnType<typeof FeatureCollectionPBuffer.UniqueIdField.prototype.toObject>;
              globalIdFieldName?: string;
              geohashFieldName?: string;
              geometryProperties?: ReturnType<typeof FeatureCollectionPBuffer.GeometryProperties.prototype.toObject>;
              serverGens?: ReturnType<typeof FeatureCollectionPBuffer.ServerGens.prototype.toObject>;
              geometryType?: FeatureCollectionPBuffer.GeometryType;
              spatialReference?: ReturnType<typeof FeatureCollectionPBuffer.SpatialReference.prototype.toObject>;
              exceededTransferLimit?: boolean;
              hasZ?: boolean;
              hasM?: boolean;
              transform?: ReturnType<typeof FeatureCollectionPBuffer.Transform.prototype.toObject>;
              fields?: ReturnType<typeof FeatureCollectionPBuffer.Field.prototype.toObject>[];
              values?: ReturnType<typeof FeatureCollectionPBuffer.Value.prototype.toObject>[];
              features?: ReturnType<typeof FeatureCollectionPBuffer.Feature.prototype.toObject>[];
            }): FeatureResult {
              const message = new FeatureResult({});
              if (data.objectIdFieldName != null) {
                message.objectIdFieldName = data.objectIdFieldName;
              }
              if (data.uniqueIdField != null) {
                message.uniqueIdField = FeatureCollectionPBuffer.UniqueIdField.fromObject(data.uniqueIdField);
              }
              if (data.globalIdFieldName != null) {
                message.globalIdFieldName = data.globalIdFieldName;
              }
              if (data.geohashFieldName != null) {
                message.geohashFieldName = data.geohashFieldName;
              }
              if (data.geometryProperties != null) {
                message.geometryProperties = FeatureCollectionPBuffer.GeometryProperties.fromObject(data.geometryProperties);
              }
              if (data.serverGens != null) {
                message.serverGens = FeatureCollectionPBuffer.ServerGens.fromObject(data.serverGens);
              }
              if (data.geometryType != null) {
                message.geometryType = data.geometryType;
              }
              if (data.spatialReference != null) {
                message.spatialReference = FeatureCollectionPBuffer.SpatialReference.fromObject(data.spatialReference);
              }
              if (data.exceededTransferLimit != null) {
                message.exceededTransferLimit = data.exceededTransferLimit;
              }
              if (data.hasZ != null) {
                message.hasZ = data.hasZ;
              }
              if (data.hasM != null) {
                message.hasM = data.hasM;
              }
              if (data.transform != null) {
                message.transform = FeatureCollectionPBuffer.Transform.fromObject(data.transform);
              }
              if (data.fields != null) {
                message.fields = data.fields.map((item) => FeatureCollectionPBuffer.Field.fromObject(item));
              }
              if (data.values != null) {
                message.values = data.values.map((item) => FeatureCollectionPBuffer.Value.fromObject(item));
              }
              if (data.features != null) {
                message.features = data.features.map((item) => FeatureCollectionPBuffer.Feature.fromObject(item));
              }
              return message;
            }
            toObject() {
              const data: {
                objectIdFieldName?: string;
                uniqueIdField?: ReturnType<typeof FeatureCollectionPBuffer.UniqueIdField.prototype.toObject>;
                globalIdFieldName?: string;
                geohashFieldName?: string;
                geometryProperties?: ReturnType<typeof FeatureCollectionPBuffer.GeometryProperties.prototype.toObject>;
                serverGens?: ReturnType<typeof FeatureCollectionPBuffer.ServerGens.prototype.toObject>;
                geometryType?: FeatureCollectionPBuffer.GeometryType;
                spatialReference?: ReturnType<typeof FeatureCollectionPBuffer.SpatialReference.prototype.toObject>;
                exceededTransferLimit?: boolean;
                hasZ?: boolean;
                hasM?: boolean;
                transform?: ReturnType<typeof FeatureCollectionPBuffer.Transform.prototype.toObject>;
                fields?: ReturnType<typeof FeatureCollectionPBuffer.Field.prototype.toObject>[];
                values?: ReturnType<typeof FeatureCollectionPBuffer.Value.prototype.toObject>[];
                features?: ReturnType<typeof FeatureCollectionPBuffer.Feature.prototype.toObject>[];
              } = {};
              if (this.objectIdFieldName != null) {
                data.objectIdFieldName = this.objectIdFieldName;
              }
              if (this.uniqueIdField != null) {
                data.uniqueIdField = this.uniqueIdField.toObject();
              }
              if (this.globalIdFieldName != null) {
                data.globalIdFieldName = this.globalIdFieldName;
              }
              if (this.geohashFieldName != null) {
                data.geohashFieldName = this.geohashFieldName;
              }
              if (this.geometryProperties != null) {
                data.geometryProperties = this.geometryProperties.toObject();
              }
              if (this.serverGens != null) {
                data.serverGens = this.serverGens.toObject();
              }
              if (this.geometryType != null) {
                data.geometryType = this.geometryType;
              }
              if (this.spatialReference != null) {
                data.spatialReference = this.spatialReference.toObject();
              }
              if (this.exceededTransferLimit != null) {
                data.exceededTransferLimit = this.exceededTransferLimit;
              }
              if (this.hasZ != null) {
                data.hasZ = this.hasZ;
              }
              if (this.hasM != null) {
                data.hasM = this.hasM;
              }
              if (this.transform != null) {
                data.transform = this.transform.toObject();
              }
              if (this.fields != null) {
                data.fields = this.fields.map((item: FeatureCollectionPBuffer.Field) => item.toObject());
              }
              if (this.values != null) {
                data.values = this.values.map((item: FeatureCollectionPBuffer.Value) => item.toObject());
              }
              if (this.features != null) {
                data.features = this.features.map((item: FeatureCollectionPBuffer.Feature) => item.toObject());
              }
              return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
              const writer = w || new pb_1.BinaryWriter();
              if (this.objectIdFieldName.length)
                writer.writeString(1, this.objectIdFieldName);
              if (this.has_uniqueIdField)
                writer.writeMessage(2, this.uniqueIdField, () => this.uniqueIdField.serialize(writer));
              if (this.globalIdFieldName.length)
                writer.writeString(3, this.globalIdFieldName);
              if (this.geohashFieldName.length)
                writer.writeString(4, this.geohashFieldName);
              if (this.has_geometryProperties)
                writer.writeMessage(5, this.geometryProperties, () => this.geometryProperties.serialize(writer));
              if (this.has_serverGens)
                writer.writeMessage(6, this.serverGens, () => this.serverGens.serialize(writer));
              if (this.geometryType != FeatureCollectionPBuffer.GeometryType.esriGeometryTypePoint)
                writer.writeEnum(7, this.geometryType);
              if (this.has_spatialReference)
                writer.writeMessage(8, this.spatialReference, () => this.spatialReference.serialize(writer));
              if (this.exceededTransferLimit != false)
                writer.writeBool(9, this.exceededTransferLimit);
              if (this.hasZ != false)
                writer.writeBool(10, this.hasZ);
              if (this.hasM != false)
                writer.writeBool(11, this.hasM);
              if (this.has_transform)
                writer.writeMessage(12, this.transform, () => this.transform.serialize(writer));
              if (this.fields.length)
                writer.writeRepeatedMessage(13, this.fields, (item: FeatureCollectionPBuffer.Field) => item.serialize(writer));
              if (this.values.length)
                writer.writeRepeatedMessage(14, this.values, (item: FeatureCollectionPBuffer.Value) => item.serialize(writer));
              if (this.features.length)
                writer.writeRepeatedMessage(15, this.features, (item: FeatureCollectionPBuffer.Feature) => item.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FeatureResult {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FeatureResult();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.objectIdFieldName = reader.readString();
                    break;
                  case 2:
                    reader.readMessage(message.uniqueIdField, () => message.uniqueIdField = FeatureCollectionPBuffer.UniqueIdField.deserialize(reader));
                    break;
                  case 3:
                    message.globalIdFieldName = reader.readString();
                    break;
                  case 4:
                    message.geohashFieldName = reader.readString();
                    break;
                  case 5:
                    reader.readMessage(message.geometryProperties, () => message.geometryProperties = FeatureCollectionPBuffer.GeometryProperties.deserialize(reader));
                    break;
                  case 6:
                    reader.readMessage(message.serverGens, () => message.serverGens = FeatureCollectionPBuffer.ServerGens.deserialize(reader));
                    break;
                  case 7:
                    message.geometryType = reader.readEnum();
                    break;
                  case 8:
                    reader.readMessage(message.spatialReference, () => message.spatialReference = FeatureCollectionPBuffer.SpatialReference.deserialize(reader));
                    break;
                  case 9:
                    message.exceededTransferLimit = reader.readBool();
                    break;
                  case 10:
                    message.hasZ = reader.readBool();
                    break;
                  case 11:
                    message.hasM = reader.readBool();
                    break;
                  case 12:
                    reader.readMessage(message.transform, () => message.transform = FeatureCollectionPBuffer.Transform.deserialize(reader));
                    break;
                  case 13:
                    reader.readMessage(message.fields, () => pb_1.Message.addToRepeatedWrapperField(message, 13, FeatureCollectionPBuffer.Field.deserialize(reader), FeatureCollectionPBuffer.Field));
                    break;
                  case 14:
                    reader.readMessage(message.values, () => pb_1.Message.addToRepeatedWrapperField(message, 14, FeatureCollectionPBuffer.Value.deserialize(reader), FeatureCollectionPBuffer.Value));
                    break;
                  case 15:
                    reader.readMessage(message.features, () => pb_1.Message.addToRepeatedWrapperField(message, 15, FeatureCollectionPBuffer.Feature.deserialize(reader), FeatureCollectionPBuffer.Feature));
                    break;
                  default: reader.skipField();
                }
              }
              return message;
            }
            serializeBinary(): Uint8Array {
              return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): FeatureResult {
              return FeatureResult.deserialize(bytes);
            }
    }
    export class CountResult extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
              count?: number;
            }) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("count" in data && data.count != undefined) {
                  this.count = data.count;
                }
              }
            }
            get count() {
              return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set count(value: number) {
              pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
              count?: number;
            }): CountResult {
              const message = new CountResult({});
              if (data.count != null) {
                message.count = data.count;
              }
              return message;
            }
            toObject() {
              const data: {
                count?: number;
              } = {};
              if (this.count != null) {
                data.count = this.count;
              }
              return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
              const writer = w || new pb_1.BinaryWriter();
              if (this.count != 0)
                writer.writeUint64(1, this.count);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CountResult {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CountResult();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.count = reader.readUint64();
                    break;
                  default: reader.skipField();
                }
              }
              return message;
            }
            serializeBinary(): Uint8Array {
              return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): CountResult {
              return CountResult.deserialize(bytes);
            }
    }
    export class ObjectIdsResult extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
              objectIdFieldName?: string;
              serverGens?: FeatureCollectionPBuffer.ServerGens;
              objectIds?: number[];
            }) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("objectIdFieldName" in data && data.objectIdFieldName != undefined) {
                  this.objectIdFieldName = data.objectIdFieldName;
                }
                if ("serverGens" in data && data.serverGens != undefined) {
                  this.serverGens = data.serverGens;
                }
                if ("objectIds" in data && data.objectIds != undefined) {
                  this.objectIds = data.objectIds;
                }
              }
            }
            get objectIdFieldName() {
              return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set objectIdFieldName(value: string) {
              pb_1.Message.setField(this, 1, value);
            }
            get serverGens() {
              return pb_1.Message.getWrapperField(this, FeatureCollectionPBuffer.ServerGens, 2) as FeatureCollectionPBuffer.ServerGens;
            }
            set serverGens(value: FeatureCollectionPBuffer.ServerGens) {
              pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_serverGens() {
              return pb_1.Message.getField(this, 2) != null;
            }
            get objectIds() {
              return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
            }
            set objectIds(value: number[]) {
              pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
              objectIdFieldName?: string;
              serverGens?: ReturnType<typeof FeatureCollectionPBuffer.ServerGens.prototype.toObject>;
              objectIds?: number[];
            }): ObjectIdsResult {
              const message = new ObjectIdsResult({});
              if (data.objectIdFieldName != null) {
                message.objectIdFieldName = data.objectIdFieldName;
              }
              if (data.serverGens != null) {
                message.serverGens = FeatureCollectionPBuffer.ServerGens.fromObject(data.serverGens);
              }
              if (data.objectIds != null) {
                message.objectIds = data.objectIds;
              }
              return message;
            }
            toObject() {
              const data: {
                objectIdFieldName?: string;
                serverGens?: ReturnType<typeof FeatureCollectionPBuffer.ServerGens.prototype.toObject>;
                objectIds?: number[];
              } = {};
              if (this.objectIdFieldName != null) {
                data.objectIdFieldName = this.objectIdFieldName;
              }
              if (this.serverGens != null) {
                data.serverGens = this.serverGens.toObject();
              }
              if (this.objectIds != null) {
                data.objectIds = this.objectIds;
              }
              return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
              const writer = w || new pb_1.BinaryWriter();
              if (this.objectIdFieldName.length)
                writer.writeString(1, this.objectIdFieldName);
              if (this.has_serverGens)
                writer.writeMessage(2, this.serverGens, () => this.serverGens.serialize(writer));
              if (this.objectIds.length)
                writer.writePackedUint64(3, this.objectIds);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ObjectIdsResult {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ObjectIdsResult();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.objectIdFieldName = reader.readString();
                    break;
                  case 2:
                    reader.readMessage(message.serverGens, () => message.serverGens = FeatureCollectionPBuffer.ServerGens.deserialize(reader));
                    break;
                  case 3:
                    message.objectIds = reader.readPackedUint64();
                    break;
                  default: reader.skipField();
                }
              }
              return message;
            }
            serializeBinary(): Uint8Array {
              return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): ObjectIdsResult {
              return ObjectIdsResult.deserialize(bytes);
            }
    }
    export class QueryResult extends pb_1.Message {
            #one_of_decls: number[][] = [[1, 2, 3]];
            constructor(data?: any[] | ({} & (({
              featureResult?: FeatureCollectionPBuffer.FeatureResult;
              countResult?: never;
              idsResult?: never;
            } | {
              featureResult?: never;
              countResult?: FeatureCollectionPBuffer.CountResult;
              idsResult?: never;
            } | {
              featureResult?: never;
              countResult?: never;
              idsResult?: FeatureCollectionPBuffer.ObjectIdsResult;
            })))) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("featureResult" in data && data.featureResult != undefined) {
                  this.featureResult = data.featureResult;
                }
                if ("countResult" in data && data.countResult != undefined) {
                  this.countResult = data.countResult;
                }
                if ("idsResult" in data && data.idsResult != undefined) {
                  this.idsResult = data.idsResult;
                }
              }
            }
            get featureResult() {
              return pb_1.Message.getWrapperField(this, FeatureCollectionPBuffer.FeatureResult, 1) as FeatureCollectionPBuffer.FeatureResult;
            }
            set featureResult(value: FeatureCollectionPBuffer.FeatureResult) {
              pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
            }
            get has_featureResult() {
              return pb_1.Message.getField(this, 1) != null;
            }
            get countResult() {
              return pb_1.Message.getWrapperField(this, FeatureCollectionPBuffer.CountResult, 2) as FeatureCollectionPBuffer.CountResult;
            }
            set countResult(value: FeatureCollectionPBuffer.CountResult) {
              pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
            }
            get has_countResult() {
              return pb_1.Message.getField(this, 2) != null;
            }
            get idsResult() {
              return pb_1.Message.getWrapperField(this, FeatureCollectionPBuffer.ObjectIdsResult, 3) as FeatureCollectionPBuffer.ObjectIdsResult;
            }
            set idsResult(value: FeatureCollectionPBuffer.ObjectIdsResult) {
              pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
            }
            get has_idsResult() {
              return pb_1.Message.getField(this, 3) != null;
            }
            get Results() {
              const cases: {
                [index: number]: "none" | "featureResult" | "countResult" | "idsResult";
              } = {
                0: "none",
                1: "featureResult",
                2: "countResult",
                3: "idsResult",
              };
              return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
            }
            static fromObject(data: {
              featureResult?: ReturnType<typeof FeatureCollectionPBuffer.FeatureResult.prototype.toObject>;
              countResult?: ReturnType<typeof FeatureCollectionPBuffer.CountResult.prototype.toObject>;
              idsResult?: ReturnType<typeof FeatureCollectionPBuffer.ObjectIdsResult.prototype.toObject>;
            }): QueryResult {
              const message = new QueryResult({});
              if (data.featureResult != null) {
                message.featureResult = FeatureCollectionPBuffer.FeatureResult.fromObject(data.featureResult);
              }
              if (data.countResult != null) {
                message.countResult = FeatureCollectionPBuffer.CountResult.fromObject(data.countResult);
              }
              if (data.idsResult != null) {
                message.idsResult = FeatureCollectionPBuffer.ObjectIdsResult.fromObject(data.idsResult);
              }
              return message;
            }
            toObject() {
              const data: {
                featureResult?: ReturnType<typeof FeatureCollectionPBuffer.FeatureResult.prototype.toObject>;
                countResult?: ReturnType<typeof FeatureCollectionPBuffer.CountResult.prototype.toObject>;
                idsResult?: ReturnType<typeof FeatureCollectionPBuffer.ObjectIdsResult.prototype.toObject>;
              } = {};
              if (this.featureResult != null) {
                data.featureResult = this.featureResult.toObject();
              }
              if (this.countResult != null) {
                data.countResult = this.countResult.toObject();
              }
              if (this.idsResult != null) {
                data.idsResult = this.idsResult.toObject();
              }
              return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
              const writer = w || new pb_1.BinaryWriter();
              if (this.has_featureResult)
                writer.writeMessage(1, this.featureResult, () => this.featureResult.serialize(writer));
              if (this.has_countResult)
                writer.writeMessage(2, this.countResult, () => this.countResult.serialize(writer));
              if (this.has_idsResult)
                writer.writeMessage(3, this.idsResult, () => this.idsResult.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryResult {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryResult();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.featureResult, () => message.featureResult = FeatureCollectionPBuffer.FeatureResult.deserialize(reader));
                    break;
                  case 2:
                    reader.readMessage(message.countResult, () => message.countResult = FeatureCollectionPBuffer.CountResult.deserialize(reader));
                    break;
                  case 3:
                    reader.readMessage(message.idsResult, () => message.idsResult = FeatureCollectionPBuffer.ObjectIdsResult.deserialize(reader));
                    break;
                  default: reader.skipField();
                }
              }
              return message;
            }
            serializeBinary(): Uint8Array {
              return this.serialize();
            }
            static override deserializeBinary(bytes: Uint8Array): QueryResult {
              return QueryResult.deserialize(bytes);
            }
    }
  }
}
