/*---------------------------------------------------------------------------------------------
* Copyright (c) Bentley Systems, Incorporated. All rights reserved.
* See LICENSE.md in the project root for license terms and full copyright notice.
*--------------------------------------------------------------------------------------------*/
/** @packageDocumentation
 * @module Serialization
 */
import { flatbuffers } from "flatbuffers";
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable @typescript-eslint/explicit-member-accessibility */
// cspell:word flatbuffers
// cspell:word Akima
/* eslint-disable @bentley/prefer-get */
// cspell:word flatbuffers

/** @packageDocumentation
 * @module Serialization
 */
export namespace BGFBAccessors {
// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @enum {number}
 */
export enum LoopTypeEnum{
  Parity= 1,
  InteriorToLeft= 2
};

/**
 * @enum {number}
 */
export enum VariantGeometryUnion{
      tagNONE = 0,
      tagLineSegment = 1,
      tagEllipticArc = 2,
      tagBsplineCurve = 3,
      tagLineString = 4,
      tagCurveVector = 5,
      tagDgnCone = 6,
      tagDgnSphere = 7,
      tagDgnTorusPipe = 8,
      tagDgnBox = 9,
      tagDgnExtrusion = 10,
      tagDgnRotationalSweep = 11,
      tagDgnRuledSweep = 12,
      tagPolyface = 13,
      tagBsplineSurface = 14,
      tagVectorOfVariantGeometry = 15,
      tagInterpolationCurve = 16,
      tagTransitionSpiral = 17,
      tagPointString = 18,
      tagAkimaCurve = 19,
      tagCatenaryCurve = 20,
      tagPartialCurve = 21
};

/**
 * @constructor
 */
export class DPoint3d {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns DPoint3d
 */
__init(i: number, bb: flatbuffers.ByteBuffer): DPoint3d {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
x(): number {
  return this.bb!.readFloat64(this.bb_pos);
};

/**
 * @returns number
 */
y(): number {
  return this.bb!.readFloat64(this.bb_pos + 8);
};

/**
 * @returns number
 */
z(): number {
  return this.bb!.readFloat64(this.bb_pos + 16);
};

/**
 * @param flatbuffers.Builder builder
 * @param number x
 * @param number y
 * @param number z
 * @returns flatbuffers.Offset
 */
static createDPoint3d(builder: flatbuffers.Builder, x: number, y: number, z: number): flatbuffers.Offset {
  builder.prep(8, 24);
  builder.writeFloat64(z);
  builder.writeFloat64(y);
  builder.writeFloat64(x);
  return builder.offset();
};

}
/**
 * @constructor
 */
export class DRay3d {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns DRay3d
 */
__init(i: number, bb: flatbuffers.ByteBuffer): DRay3d {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
x(): number {
  return this.bb!.readFloat64(this.bb_pos);
};

/**
 * @returns number
 */
y(): number {
  return this.bb!.readFloat64(this.bb_pos + 8);
};

/**
 * @returns number
 */
z(): number {
  return this.bb!.readFloat64(this.bb_pos + 16);
};

/**
 * @returns number
 */
ux(): number {
  return this.bb!.readFloat64(this.bb_pos + 24);
};

/**
 * @returns number
 */
uy(): number {
  return this.bb!.readFloat64(this.bb_pos + 32);
};

/**
 * @returns number
 */
uz(): number {
  return this.bb!.readFloat64(this.bb_pos + 40);
};

/**
 * @param flatbuffers.Builder builder
 * @param number x
 * @param number y
 * @param number z
 * @param number ux
 * @param number uy
 * @param number uz
 * @returns flatbuffers.Offset
 */
static createDRay3d(builder: flatbuffers.Builder, x: number, y: number, z: number, ux: number, uy: number, uz: number): flatbuffers.Offset {
  builder.prep(8, 48);
  builder.writeFloat64(uz);
  builder.writeFloat64(uy);
  builder.writeFloat64(ux);
  builder.writeFloat64(z);
  builder.writeFloat64(y);
  builder.writeFloat64(x);
  return builder.offset();
};

}
/**
 * @constructor
 */
export class DPoint2d {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns DPoint2d
 */
__init(i: number, bb: flatbuffers.ByteBuffer): DPoint2d {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
x(): number {
  return this.bb!.readFloat64(this.bb_pos);
};

/**
 * @returns number
 */
y(): number {
  return this.bb!.readFloat64(this.bb_pos + 8);
};

/**
 * @param flatbuffers.Builder builder
 * @param number x
 * @param number y
 * @returns flatbuffers.Offset
 */
static createDPoint2d(builder: flatbuffers.Builder, x: number, y: number): flatbuffers.Offset {
  builder.prep(8, 16);
  builder.writeFloat64(y);
  builder.writeFloat64(x);
  return builder.offset();
};

}
/**
 * @constructor
 */
export class DVector3d {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns DVector3d
 */
__init(i: number, bb: flatbuffers.ByteBuffer): DVector3d {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
x(): number {
  return this.bb!.readFloat64(this.bb_pos);
};

/**
 * @returns number
 */
y(): number {
  return this.bb!.readFloat64(this.bb_pos + 8);
};

/**
 * @returns number
 */
z(): number {
  return this.bb!.readFloat64(this.bb_pos + 16);
};

/**
 * @param flatbuffers.Builder builder
 * @param number x
 * @param number y
 * @param number z
 * @returns flatbuffers.Offset
 */
static createDVector3d(builder: flatbuffers.Builder, x: number, y: number, z: number): flatbuffers.Offset {
  builder.prep(8, 24);
  builder.writeFloat64(z);
  builder.writeFloat64(y);
  builder.writeFloat64(x);
  return builder.offset();
};

}
/**
 * @constructor
 */
export class Angle {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns Angle
 */
__init(i: number, bb: flatbuffers.ByteBuffer): Angle {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
degrees(): number {
  return this.bb!.readFloat64(this.bb_pos);
};

/**
 * @param flatbuffers.Builder builder
 * @param number degrees
 * @returns flatbuffers.Offset
 */
static createAngle(builder: flatbuffers.Builder, degrees: number): flatbuffers.Offset {
  builder.prep(8, 8);
  builder.writeFloat64(degrees);
  return builder.offset();
};

}
/**
 * @constructor
 */
export class DEllipse3d {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns DEllipse3d
 */
__init(i: number, bb: flatbuffers.ByteBuffer): DEllipse3d {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
centerX(): number {
  return this.bb!.readFloat64(this.bb_pos);
};

/**
 * @returns number
 */
centerY(): number {
  return this.bb!.readFloat64(this.bb_pos + 8);
};

/**
 * @returns number
 */
centerZ(): number {
  return this.bb!.readFloat64(this.bb_pos + 16);
};

/**
 * @returns number
 */
vector0X(): number {
  return this.bb!.readFloat64(this.bb_pos + 24);
};

/**
 * @returns number
 */
vector0Y(): number {
  return this.bb!.readFloat64(this.bb_pos + 32);
};

/**
 * @returns number
 */
vector0Z(): number {
  return this.bb!.readFloat64(this.bb_pos + 40);
};

/**
 * @returns number
 */
vector90X(): number {
  return this.bb!.readFloat64(this.bb_pos + 48);
};

/**
 * @returns number
 */
vector90Y(): number {
  return this.bb!.readFloat64(this.bb_pos + 56);
};

/**
 * @returns number
 */
vector90Z(): number {
  return this.bb!.readFloat64(this.bb_pos + 64);
};

/**
 * @returns number
 */
startRadians(): number {
  return this.bb!.readFloat64(this.bb_pos + 72);
};

/**
 * @returns number
 */
sweepRadians(): number {
  return this.bb!.readFloat64(this.bb_pos + 80);
};

/**
 * @param flatbuffers.Builder builder
 * @param number centerX
 * @param number centerY
 * @param number centerZ
 * @param number vector0X
 * @param number vector0Y
 * @param number vector0Z
 * @param number vector90X
 * @param number vector90Y
 * @param number vector90Z
 * @param number startRadians
 * @param number sweepRadians
 * @returns flatbuffers.Offset
 */
static createDEllipse3d(builder: flatbuffers.Builder, centerX: number, centerY: number, centerZ: number, vector0X: number, vector0Y: number, vector0Z: number, vector90X: number, vector90Y: number, vector90Z: number, startRadians: number, sweepRadians: number): flatbuffers.Offset {
  builder.prep(8, 88);
  builder.writeFloat64(sweepRadians);
  builder.writeFloat64(startRadians);
  builder.writeFloat64(vector90Z);
  builder.writeFloat64(vector90Y);
  builder.writeFloat64(vector90X);
  builder.writeFloat64(vector0Z);
  builder.writeFloat64(vector0Y);
  builder.writeFloat64(vector0X);
  builder.writeFloat64(centerZ);
  builder.writeFloat64(centerY);
  builder.writeFloat64(centerX);
  return builder.offset();
};

}
/**
 * @constructor
 */
export class DSegment3d {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns DSegment3d
 */
__init(i: number, bb: flatbuffers.ByteBuffer): DSegment3d {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
point0X(): number {
  return this.bb!.readFloat64(this.bb_pos);
};

/**
 * @returns number
 */
point0Y(): number {
  return this.bb!.readFloat64(this.bb_pos + 8);
};

/**
 * @returns number
 */
point0Z(): number {
  return this.bb!.readFloat64(this.bb_pos + 16);
};

/**
 * @returns number
 */
point1X(): number {
  return this.bb!.readFloat64(this.bb_pos + 24);
};

/**
 * @returns number
 */
point1Y(): number {
  return this.bb!.readFloat64(this.bb_pos + 32);
};

/**
 * @returns number
 */
point1Z(): number {
  return this.bb!.readFloat64(this.bb_pos + 40);
};

/**
 * @param flatbuffers.Builder builder
 * @param number point0X
 * @param number point0Y
 * @param number point0Z
 * @param number point1X
 * @param number point1Y
 * @param number point1Z
 * @returns flatbuffers.Offset
 */
static createDSegment3d(builder: flatbuffers.Builder, point0X: number, point0Y: number, point0Z: number, point1X: number, point1Y: number, point1Z: number): flatbuffers.Offset {
  builder.prep(8, 48);
  builder.writeFloat64(point1Z);
  builder.writeFloat64(point1Y);
  builder.writeFloat64(point1X);
  builder.writeFloat64(point0Z);
  builder.writeFloat64(point0Y);
  builder.writeFloat64(point0X);
  return builder.offset();
};

}
/**
 * @constructor
 */
export class DTransform3d {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns DTransform3d
 */
__init(i: number, bb: flatbuffers.ByteBuffer): DTransform3d {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
axx(): number {
  return this.bb!.readFloat64(this.bb_pos);
};

/**
 * @returns number
 */
axy(): number {
  return this.bb!.readFloat64(this.bb_pos + 8);
};

/**
 * @returns number
 */
axz(): number {
  return this.bb!.readFloat64(this.bb_pos + 16);
};

/**
 * @returns number
 */
axw(): number {
  return this.bb!.readFloat64(this.bb_pos + 24);
};

/**
 * @returns number
 */
ayx(): number {
  return this.bb!.readFloat64(this.bb_pos + 32);
};

/**
 * @returns number
 */
ayy(): number {
  return this.bb!.readFloat64(this.bb_pos + 40);
};

/**
 * @returns number
 */
ayz(): number {
  return this.bb!.readFloat64(this.bb_pos + 48);
};

/**
 * @returns number
 */
ayw(): number {
  return this.bb!.readFloat64(this.bb_pos + 56);
};

/**
 * @returns number
 */
azx(): number {
  return this.bb!.readFloat64(this.bb_pos + 64);
};

/**
 * @returns number
 */
azy(): number {
  return this.bb!.readFloat64(this.bb_pos + 72);
};

/**
 * @returns number
 */
azz(): number {
  return this.bb!.readFloat64(this.bb_pos + 80);
};

/**
 * @returns number
 */
azw(): number {
  return this.bb!.readFloat64(this.bb_pos + 88);
};

/**
 * @param flatbuffers.Builder builder
 * @param number axx
 * @param number axy
 * @param number axz
 * @param number axw
 * @param number ayx
 * @param number ayy
 * @param number ayz
 * @param number ayw
 * @param number azx
 * @param number azy
 * @param number azz
 * @param number azw
 * @returns flatbuffers.Offset
 */
static createDTransform3d(builder: flatbuffers.Builder, axx: number, axy: number, axz: number, axw: number, ayx: number, ayy: number, ayz: number, ayw: number, azx: number, azy: number, azz: number, azw: number): flatbuffers.Offset {
  builder.prep(8, 96);
  builder.writeFloat64(azw);
  builder.writeFloat64(azz);
  builder.writeFloat64(azy);
  builder.writeFloat64(azx);
  builder.writeFloat64(ayw);
  builder.writeFloat64(ayz);
  builder.writeFloat64(ayy);
  builder.writeFloat64(ayx);
  builder.writeFloat64(axw);
  builder.writeFloat64(axz);
  builder.writeFloat64(axy);
  builder.writeFloat64(axx);
  return builder.offset();
};

}
/**
 * @constructor
 */
export class DgnBoxDetail {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns DgnBoxDetail
 */
__init(i: number, bb: flatbuffers.ByteBuffer): DgnBoxDetail {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
baseOriginX(): number {
  return this.bb!.readFloat64(this.bb_pos);
};

/**
 * @returns number
 */
baseOriginY(): number {
  return this.bb!.readFloat64(this.bb_pos + 8);
};

/**
 * @returns number
 */
baseOriginZ(): number {
  return this.bb!.readFloat64(this.bb_pos + 16);
};

/**
 * @returns number
 */
topOriginX(): number {
  return this.bb!.readFloat64(this.bb_pos + 24);
};

/**
 * @returns number
 */
topOriginY(): number {
  return this.bb!.readFloat64(this.bb_pos + 32);
};

/**
 * @returns number
 */
topOriginZ(): number {
  return this.bb!.readFloat64(this.bb_pos + 40);
};

/**
 * @returns number
 */
vectorXX(): number {
  return this.bb!.readFloat64(this.bb_pos + 48);
};

/**
 * @returns number
 */
vectorXY(): number {
  return this.bb!.readFloat64(this.bb_pos + 56);
};

/**
 * @returns number
 */
vectorXZ(): number {
  return this.bb!.readFloat64(this.bb_pos + 64);
};

/**
 * @returns number
 */
vectorYX(): number {
  return this.bb!.readFloat64(this.bb_pos + 72);
};

/**
 * @returns number
 */
vectorYY(): number {
  return this.bb!.readFloat64(this.bb_pos + 80);
};

/**
 * @returns number
 */
vectorYZ(): number {
  return this.bb!.readFloat64(this.bb_pos + 88);
};

/**
 * @returns number
 */
baseX(): number {
  return this.bb!.readFloat64(this.bb_pos + 96);
};

/**
 * @returns number
 */
baseY(): number {
  return this.bb!.readFloat64(this.bb_pos + 104);
};

/**
 * @returns number
 */
topX(): number {
  return this.bb!.readFloat64(this.bb_pos + 112);
};

/**
 * @returns number
 */
topY(): number {
  return this.bb!.readFloat64(this.bb_pos + 120);
};

/**
 * @returns boolean
 */
capped(): boolean {
  return !!this.bb!.readInt8(this.bb_pos + 128);
};

/**
 * @param flatbuffers.Builder builder
 * @param number baseOriginX
 * @param number baseOriginY
 * @param number baseOriginZ
 * @param number topOriginX
 * @param number topOriginY
 * @param number topOriginZ
 * @param number vectorXX
 * @param number vectorXY
 * @param number vectorXZ
 * @param number vectorYX
 * @param number vectorYY
 * @param number vectorYZ
 * @param number baseX
 * @param number baseY
 * @param number topX
 * @param number topY
 * @param boolean capped
 * @returns flatbuffers.Offset
 */
static createDgnBoxDetail(builder: flatbuffers.Builder, baseOriginX: number, baseOriginY: number, baseOriginZ: number, topOriginX: number, topOriginY: number, topOriginZ: number, vectorXX: number, vectorXY: number, vectorXZ: number, vectorYX: number, vectorYY: number, vectorYZ: number, baseX: number, baseY: number, topX: number, topY: number, capped: boolean): flatbuffers.Offset {
  builder.prep(8, 136);
  builder.pad(7);
  builder.writeInt8(+capped);
  builder.writeFloat64(topY);
  builder.writeFloat64(topX);
  builder.writeFloat64(baseY);
  builder.writeFloat64(baseX);
  builder.writeFloat64(vectorYZ);
  builder.writeFloat64(vectorYY);
  builder.writeFloat64(vectorYX);
  builder.writeFloat64(vectorXZ);
  builder.writeFloat64(vectorXY);
  builder.writeFloat64(vectorXX);
  builder.writeFloat64(topOriginZ);
  builder.writeFloat64(topOriginY);
  builder.writeFloat64(topOriginX);
  builder.writeFloat64(baseOriginZ);
  builder.writeFloat64(baseOriginY);
  builder.writeFloat64(baseOriginX);
  return builder.offset();
};

}
/**
 * @constructor
 */
export class DgnSphereDetail {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns DgnSphereDetail
 */
__init(i: number, bb: flatbuffers.ByteBuffer): DgnSphereDetail {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param DTransform3d= obj
 * @returns DTransform3d|null
 */
localToWorld(obj?: DTransform3d): DTransform3d|null {
  return (obj || new DTransform3d()).__init(this.bb_pos, this.bb!);
};

/**
 * @returns number
 */
startLatitudeRadians(): number {
  return this.bb!.readFloat64(this.bb_pos + 96);
};

/**
 * @returns number
 */
latitudeSweepRadians(): number {
  return this.bb!.readFloat64(this.bb_pos + 104);
};

/**
 * @returns boolean
 */
capped(): boolean {
  return !!this.bb!.readInt8(this.bb_pos + 112);
};

/**
 * @param flatbuffers.Builder builder
 * @param number localToWorld_axx
 * @param number localToWorld_axy
 * @param number localToWorld_axz
 * @param number localToWorld_axw
 * @param number localToWorld_ayx
 * @param number localToWorld_ayy
 * @param number localToWorld_ayz
 * @param number localToWorld_ayw
 * @param number localToWorld_azx
 * @param number localToWorld_azy
 * @param number localToWorld_azz
 * @param number localToWorld_azw
 * @param number startLatitudeRadians
 * @param number latitudeSweepRadians
 * @param boolean capped
 * @returns flatbuffers.Offset
 */
static createDgnSphereDetail(builder: flatbuffers.Builder, localToWorld_axx: number, localToWorld_axy: number, localToWorld_axz: number, localToWorld_axw: number, localToWorld_ayx: number, localToWorld_ayy: number, localToWorld_ayz: number, localToWorld_ayw: number, localToWorld_azx: number, localToWorld_azy: number, localToWorld_azz: number, localToWorld_azw: number, startLatitudeRadians: number, latitudeSweepRadians: number, capped: boolean): flatbuffers.Offset {
  builder.prep(8, 120);
  builder.pad(7);
  builder.writeInt8(+capped);
  builder.writeFloat64(latitudeSweepRadians);
  builder.writeFloat64(startLatitudeRadians);
  builder.prep(8, 96);
  builder.writeFloat64(localToWorld_azw);
  builder.writeFloat64(localToWorld_azz);
  builder.writeFloat64(localToWorld_azy);
  builder.writeFloat64(localToWorld_azx);
  builder.writeFloat64(localToWorld_ayw);
  builder.writeFloat64(localToWorld_ayz);
  builder.writeFloat64(localToWorld_ayy);
  builder.writeFloat64(localToWorld_ayx);
  builder.writeFloat64(localToWorld_axw);
  builder.writeFloat64(localToWorld_axz);
  builder.writeFloat64(localToWorld_axy);
  builder.writeFloat64(localToWorld_axx);
  return builder.offset();
};

}
/**
 * @constructor
 */
export class DgnConeDetail {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns DgnConeDetail
 */
__init(i: number, bb: flatbuffers.ByteBuffer): DgnConeDetail {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
centerAX(): number {
  return this.bb!.readFloat64(this.bb_pos);
};

/**
 * @returns number
 */
centerAY(): number {
  return this.bb!.readFloat64(this.bb_pos + 8);
};

/**
 * @returns number
 */
centerAZ(): number {
  return this.bb!.readFloat64(this.bb_pos + 16);
};

/**
 * @returns number
 */
centerBX(): number {
  return this.bb!.readFloat64(this.bb_pos + 24);
};

/**
 * @returns number
 */
centerBY(): number {
  return this.bb!.readFloat64(this.bb_pos + 32);
};

/**
 * @returns number
 */
centerBZ(): number {
  return this.bb!.readFloat64(this.bb_pos + 40);
};

/**
 * @returns number
 */
vector0X(): number {
  return this.bb!.readFloat64(this.bb_pos + 48);
};

/**
 * @returns number
 */
vector0Y(): number {
  return this.bb!.readFloat64(this.bb_pos + 56);
};

/**
 * @returns number
 */
vector0Z(): number {
  return this.bb!.readFloat64(this.bb_pos + 64);
};

/**
 * @returns number
 */
vector90X(): number {
  return this.bb!.readFloat64(this.bb_pos + 72);
};

/**
 * @returns number
 */
vector90Y(): number {
  return this.bb!.readFloat64(this.bb_pos + 80);
};

/**
 * @returns number
 */
vector90Z(): number {
  return this.bb!.readFloat64(this.bb_pos + 88);
};

/**
 * @returns number
 */
radiusA(): number {
  return this.bb!.readFloat64(this.bb_pos + 96);
};

/**
 * @returns number
 */
radiusB(): number {
  return this.bb!.readFloat64(this.bb_pos + 104);
};

/**
 * @returns boolean
 */
capped(): boolean {
  return !!this.bb!.readInt8(this.bb_pos + 112);
};

/**
 * @param flatbuffers.Builder builder
 * @param number centerAX
 * @param number centerAY
 * @param number centerAZ
 * @param number centerBX
 * @param number centerBY
 * @param number centerBZ
 * @param number vector0X
 * @param number vector0Y
 * @param number vector0Z
 * @param number vector90X
 * @param number vector90Y
 * @param number vector90Z
 * @param number radiusA
 * @param number radiusB
 * @param boolean capped
 * @returns flatbuffers.Offset
 */
static createDgnConeDetail(builder: flatbuffers.Builder, centerAX: number, centerAY: number, centerAZ: number, centerBX: number, centerBY: number, centerBZ: number, vector0X: number, vector0Y: number, vector0Z: number, vector90X: number, vector90Y: number, vector90Z: number, radiusA: number, radiusB: number, capped: boolean): flatbuffers.Offset {
  builder.prep(8, 120);
  builder.pad(7);
  builder.writeInt8(+capped);
  builder.writeFloat64(radiusB);
  builder.writeFloat64(radiusA);
  builder.writeFloat64(vector90Z);
  builder.writeFloat64(vector90Y);
  builder.writeFloat64(vector90X);
  builder.writeFloat64(vector0Z);
  builder.writeFloat64(vector0Y);
  builder.writeFloat64(vector0X);
  builder.writeFloat64(centerBZ);
  builder.writeFloat64(centerBY);
  builder.writeFloat64(centerBX);
  builder.writeFloat64(centerAZ);
  builder.writeFloat64(centerAY);
  builder.writeFloat64(centerAX);
  return builder.offset();
};

}
/**
 * @constructor
 */
export class DgnTorusPipeDetail {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns DgnTorusPipeDetail
 */
__init(i: number, bb: flatbuffers.ByteBuffer): DgnTorusPipeDetail {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
centerX(): number {
  return this.bb!.readFloat64(this.bb_pos);
};

/**
 * @returns number
 */
centerY(): number {
  return this.bb!.readFloat64(this.bb_pos + 8);
};

/**
 * @returns number
 */
centerZ(): number {
  return this.bb!.readFloat64(this.bb_pos + 16);
};

/**
 * @returns number
 */
vectorXX(): number {
  return this.bb!.readFloat64(this.bb_pos + 24);
};

/**
 * @returns number
 */
vectorXY(): number {
  return this.bb!.readFloat64(this.bb_pos + 32);
};

/**
 * @returns number
 */
vectorXZ(): number {
  return this.bb!.readFloat64(this.bb_pos + 40);
};

/**
 * @returns number
 */
vectorYX(): number {
  return this.bb!.readFloat64(this.bb_pos + 48);
};

/**
 * @returns number
 */
vectorYY(): number {
  return this.bb!.readFloat64(this.bb_pos + 56);
};

/**
 * @returns number
 */
vectorYZ(): number {
  return this.bb!.readFloat64(this.bb_pos + 64);
};

/**
 * @returns number
 */
majorRadius(): number {
  return this.bb!.readFloat64(this.bb_pos + 72);
};

/**
 * @returns number
 */
minorRadius(): number {
  return this.bb!.readFloat64(this.bb_pos + 80);
};

/**
 * @returns number
 */
sweepRadians(): number {
  return this.bb!.readFloat64(this.bb_pos + 88);
};

/**
 * @returns boolean
 */
capped(): boolean {
  return !!this.bb!.readInt8(this.bb_pos + 96);
};

/**
 * @param flatbuffers.Builder builder
 * @param number centerX
 * @param number centerY
 * @param number centerZ
 * @param number vectorXX
 * @param number vectorXY
 * @param number vectorXZ
 * @param number vectorYX
 * @param number vectorYY
 * @param number vectorYZ
 * @param number majorRadius
 * @param number minorRadius
 * @param number sweepRadians
 * @param boolean capped
 * @returns flatbuffers.Offset
 */
static createDgnTorusPipeDetail(builder: flatbuffers.Builder, centerX: number, centerY: number, centerZ: number, vectorXX: number, vectorXY: number, vectorXZ: number, vectorYX: number, vectorYY: number, vectorYZ: number, majorRadius: number, minorRadius: number, sweepRadians: number, capped: boolean): flatbuffers.Offset {
  builder.prep(8, 104);
  builder.pad(7);
  builder.writeInt8(+capped);
  builder.writeFloat64(sweepRadians);
  builder.writeFloat64(minorRadius);
  builder.writeFloat64(majorRadius);
  builder.writeFloat64(vectorYZ);
  builder.writeFloat64(vectorYY);
  builder.writeFloat64(vectorYX);
  builder.writeFloat64(vectorXZ);
  builder.writeFloat64(vectorXY);
  builder.writeFloat64(vectorXX);
  builder.writeFloat64(centerZ);
  builder.writeFloat64(centerY);
  builder.writeFloat64(centerX);
  return builder.offset();
};

}
/**
 * @constructor
 */
export class LineSegment {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns LineSegment
 */
__init(i: number, bb: flatbuffers.ByteBuffer): LineSegment {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param LineSegment= obj
 * @returns LineSegment
 */
static getRootAsLineSegment(bb: flatbuffers.ByteBuffer, obj?: LineSegment): LineSegment {
  return (obj || new LineSegment()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param LineSegment= obj
 * @returns LineSegment
 */
static getSizePrefixedRootAsLineSegment(bb: flatbuffers.ByteBuffer, obj?: LineSegment): LineSegment {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LineSegment()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param DSegment3d= obj
 * @returns DSegment3d|null
 */
segment(obj?: DSegment3d): DSegment3d|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new DSegment3d()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startLineSegment(builder: flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset segmentOffset
 */
static addSegment(builder: flatbuffers.Builder, segmentOffset: flatbuffers.Offset) {
  builder.addFieldStruct(0, segmentOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endLineSegment(builder: flatbuffers.Builder): flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
};

static createLineSegment(builder: flatbuffers.Builder, segmentOffset: flatbuffers.Offset): flatbuffers.Offset {
  LineSegment.startLineSegment(builder);
  LineSegment.addSegment(builder, segmentOffset);
  return LineSegment.endLineSegment(builder);
}
}
/**
 * @constructor
 */
export class LineString {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns LineString
 */
__init(i: number, bb: flatbuffers.ByteBuffer): LineString {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param LineString= obj
 * @returns LineString
 */
static getRootAsLineString(bb: flatbuffers.ByteBuffer, obj?: LineString): LineString {
  return (obj || new LineString()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param LineString= obj
 * @returns LineString
 */
static getSizePrefixedRootAsLineString(bb: flatbuffers.ByteBuffer, obj?: LineString): LineString {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new LineString()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param number index
 * @returns number
 */
points(index: number): number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
};

/**
 * @returns number
 */
pointsLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Float64Array
 */
pointsArray(): Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startLineString(builder: flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset pointsOffset
 */
static addPoints(builder: flatbuffers.Builder, pointsOffset: flatbuffers.Offset) {
  builder.addFieldOffset(0, pointsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createPointsVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startPointsVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(8, numElems, 8);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endLineString(builder: flatbuffers.Builder): flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
};

static createLineString(builder: flatbuffers.Builder, pointsOffset: flatbuffers.Offset): flatbuffers.Offset {
  LineString.startLineString(builder);
  LineString.addPoints(builder, pointsOffset);
  return LineString.endLineString(builder);
}
}
/**
 * @constructor
 */
export class PointString {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns PointString
 */
__init(i: number, bb: flatbuffers.ByteBuffer): PointString {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PointString= obj
 * @returns PointString
 */
static getRootAsPointString(bb: flatbuffers.ByteBuffer, obj?: PointString): PointString {
  return (obj || new PointString()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PointString= obj
 * @returns PointString
 */
static getSizePrefixedRootAsPointString(bb: flatbuffers.ByteBuffer, obj?: PointString): PointString {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PointString()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param number index
 * @returns number
 */
points(index: number): number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
};

/**
 * @returns number
 */
pointsLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Float64Array
 */
pointsArray(): Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startPointString(builder: flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset pointsOffset
 */
static addPoints(builder: flatbuffers.Builder, pointsOffset: flatbuffers.Offset) {
  builder.addFieldOffset(0, pointsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createPointsVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startPointsVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(8, numElems, 8);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endPointString(builder: flatbuffers.Builder): flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
};

static createPointString(builder: flatbuffers.Builder, pointsOffset: flatbuffers.Offset): flatbuffers.Offset {
  PointString.startPointString(builder);
  PointString.addPoints(builder, pointsOffset);
  return PointString.endPointString(builder);
}
}
/**
 * @constructor
 */
export class EllipticArc {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns EllipticArc
 */
__init(i: number, bb: flatbuffers.ByteBuffer): EllipticArc {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param EllipticArc= obj
 * @returns EllipticArc
 */
static getRootAsEllipticArc(bb: flatbuffers.ByteBuffer, obj?: EllipticArc): EllipticArc {
  return (obj || new EllipticArc()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param EllipticArc= obj
 * @returns EllipticArc
 */
static getSizePrefixedRootAsEllipticArc(bb: flatbuffers.ByteBuffer, obj?: EllipticArc): EllipticArc {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EllipticArc()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param DEllipse3d= obj
 * @returns DEllipse3d|null
 */
arc(obj?: DEllipse3d): DEllipse3d|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new DEllipse3d()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startEllipticArc(builder: flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset arcOffset
 */
static addArc(builder: flatbuffers.Builder, arcOffset: flatbuffers.Offset) {
  builder.addFieldStruct(0, arcOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endEllipticArc(builder: flatbuffers.Builder): flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
};

static createEllipticArc(builder: flatbuffers.Builder, arcOffset: flatbuffers.Offset): flatbuffers.Offset {
  EllipticArc.startEllipticArc(builder);
  EllipticArc.addArc(builder, arcOffset);
  return EllipticArc.endEllipticArc(builder);
}
}
/**
 * @constructor
 */
export class BsplineCurve {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns BsplineCurve
 */
__init(i: number, bb: flatbuffers.ByteBuffer): BsplineCurve {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param BsplineCurve= obj
 * @returns BsplineCurve
 */
static getRootAsBsplineCurve(bb: flatbuffers.ByteBuffer, obj?: BsplineCurve): BsplineCurve {
  return (obj || new BsplineCurve()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param BsplineCurve= obj
 * @returns BsplineCurve
 */
static getSizePrefixedRootAsBsplineCurve(bb: flatbuffers.ByteBuffer, obj?: BsplineCurve): BsplineCurve {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BsplineCurve()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
order(): number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns boolean
 */
closed(): boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param number index
 * @returns number
 */
poles(index: number): number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
};

/**
 * @returns number
 */
polesLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Float64Array
 */
polesArray(): Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param number index
 * @returns number
 */
weights(index: number): number|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
};

/**
 * @returns number
 */
weightsLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Float64Array
 */
weightsArray(): Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param number index
 * @returns number
 */
knots(index: number): number|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
};

/**
 * @returns number
 */
knotsLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Float64Array
 */
knotsArray(): Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startBsplineCurve(builder: flatbuffers.Builder) {
  builder.startObject(5);
};

/**
 * @param flatbuffers.Builder builder
 * @param number order
 */
static addOrder(builder: flatbuffers.Builder, order: number) {
  builder.addFieldInt32(0, order, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean closed
 */
static addClosed(builder: flatbuffers.Builder, closed: boolean) {
  builder.addFieldInt8(1, +closed, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset polesOffset
 */
static addPoles(builder: flatbuffers.Builder, polesOffset: flatbuffers.Offset) {
  builder.addFieldOffset(2, polesOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createPolesVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startPolesVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(8, numElems, 8);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset weightsOffset
 */
static addWeights(builder: flatbuffers.Builder, weightsOffset: flatbuffers.Offset) {
  builder.addFieldOffset(3, weightsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createWeightsVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startWeightsVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(8, numElems, 8);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset knotsOffset
 */
static addKnots(builder: flatbuffers.Builder, knotsOffset: flatbuffers.Offset) {
  builder.addFieldOffset(4, knotsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createKnotsVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startKnotsVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(8, numElems, 8);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endBsplineCurve(builder: flatbuffers.Builder): flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
};

static createBsplineCurve(builder: flatbuffers.Builder, order: number, closed: boolean, polesOffset: flatbuffers.Offset, weightsOffset: flatbuffers.Offset, knotsOffset: flatbuffers.Offset): flatbuffers.Offset {
  BsplineCurve.startBsplineCurve(builder);
  BsplineCurve.addOrder(builder, order);
  BsplineCurve.addClosed(builder, closed);
  BsplineCurve.addPoles(builder, polesOffset);
  BsplineCurve.addWeights(builder, weightsOffset);
  BsplineCurve.addKnots(builder, knotsOffset);
  return BsplineCurve.endBsplineCurve(builder);
}
}
/**
 * @constructor
 */
export class InterpolationCurve {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns InterpolationCurve
 */
__init(i: number, bb: flatbuffers.ByteBuffer): InterpolationCurve {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param InterpolationCurve= obj
 * @returns InterpolationCurve
 */
static getRootAsInterpolationCurve(bb: flatbuffers.ByteBuffer, obj?: InterpolationCurve): InterpolationCurve {
  return (obj || new InterpolationCurve()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param InterpolationCurve= obj
 * @returns InterpolationCurve
 */
static getSizePrefixedRootAsInterpolationCurve(bb: flatbuffers.ByteBuffer, obj?: InterpolationCurve): InterpolationCurve {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new InterpolationCurve()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
order(): number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns boolean
 */
closed(): boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns number
 */
isChordLenKnots(): number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
isColinearTangents(): number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
isChordLenTangents(): number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
isNaturalTangents(): number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param DPoint3d= obj
 * @returns DPoint3d|null
 */
startTangent(obj?: DPoint3d): DPoint3d|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new DPoint3d()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param DVector3d= obj
 * @returns DVector3d|null
 */
endTangent(obj?: DVector3d): DVector3d|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new DVector3d()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param number index
 * @returns number
 */
fitPoints(index: number): number|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
};

/**
 * @returns number
 */
fitPointsLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Float64Array
 */
fitPointsArray(): Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param number index
 * @returns number
 */
knots(index: number): number|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
};

/**
 * @returns number
 */
knotsLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Float64Array
 */
knotsArray(): Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startInterpolationCurve(builder: flatbuffers.Builder) {
  builder.startObject(10);
};

/**
 * @param flatbuffers.Builder builder
 * @param number order
 */
static addOrder(builder: flatbuffers.Builder, order: number) {
  builder.addFieldInt32(0, order, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean closed
 */
static addClosed(builder: flatbuffers.Builder, closed: boolean) {
  builder.addFieldInt8(1, +closed, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param number isChordLenKnots
 */
static addIsChordLenKnots(builder: flatbuffers.Builder, isChordLenKnots: number) {
  builder.addFieldInt32(2, isChordLenKnots, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number isColinearTangents
 */
static addIsColinearTangents(builder: flatbuffers.Builder, isColinearTangents: number) {
  builder.addFieldInt32(3, isColinearTangents, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number isChordLenTangents
 */
static addIsChordLenTangents(builder: flatbuffers.Builder, isChordLenTangents: number) {
  builder.addFieldInt32(4, isChordLenTangents, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number isNaturalTangents
 */
static addIsNaturalTangents(builder: flatbuffers.Builder, isNaturalTangents: number) {
  builder.addFieldInt32(5, isNaturalTangents, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset startTangentOffset
 */
static addStartTangent(builder: flatbuffers.Builder, startTangentOffset: flatbuffers.Offset) {
  builder.addFieldStruct(6, startTangentOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset endTangentOffset
 */
static addEndTangent(builder: flatbuffers.Builder, endTangentOffset: flatbuffers.Offset) {
  builder.addFieldStruct(7, endTangentOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset fitPointsOffset
 */
static addFitPoints(builder: flatbuffers.Builder, fitPointsOffset: flatbuffers.Offset) {
  builder.addFieldOffset(8, fitPointsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createFitPointsVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startFitPointsVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(8, numElems, 8);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset knotsOffset
 */
static addKnots(builder: flatbuffers.Builder, knotsOffset: flatbuffers.Offset) {
  builder.addFieldOffset(9, knotsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createKnotsVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startKnotsVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(8, numElems, 8);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endInterpolationCurve(builder: flatbuffers.Builder): flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
};

static createInterpolationCurve(builder: flatbuffers.Builder, order: number, closed: boolean, isChordLenKnots: number, isColinearTangents: number, isChordLenTangents: number, isNaturalTangents: number, startTangentOffset: flatbuffers.Offset, endTangentOffset: flatbuffers.Offset, fitPointsOffset: flatbuffers.Offset, knotsOffset: flatbuffers.Offset): flatbuffers.Offset {
  InterpolationCurve.startInterpolationCurve(builder);
  InterpolationCurve.addOrder(builder, order);
  InterpolationCurve.addClosed(builder, closed);
  InterpolationCurve.addIsChordLenKnots(builder, isChordLenKnots);
  InterpolationCurve.addIsColinearTangents(builder, isColinearTangents);
  InterpolationCurve.addIsChordLenTangents(builder, isChordLenTangents);
  InterpolationCurve.addIsNaturalTangents(builder, isNaturalTangents);
  InterpolationCurve.addStartTangent(builder, startTangentOffset);
  InterpolationCurve.addEndTangent(builder, endTangentOffset);
  InterpolationCurve.addFitPoints(builder, fitPointsOffset);
  InterpolationCurve.addKnots(builder, knotsOffset);
  return InterpolationCurve.endInterpolationCurve(builder);
}
}
/**
 * @constructor
 */
export class AkimaCurve {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns AkimaCurve
 */
__init(i: number, bb: flatbuffers.ByteBuffer): AkimaCurve {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param AkimaCurve= obj
 * @returns AkimaCurve
 */
static getRootAsAkimaCurve(bb: flatbuffers.ByteBuffer, obj?: AkimaCurve): AkimaCurve {
  return (obj || new AkimaCurve()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param AkimaCurve= obj
 * @returns AkimaCurve
 */
static getSizePrefixedRootAsAkimaCurve(bb: flatbuffers.ByteBuffer, obj?: AkimaCurve): AkimaCurve {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new AkimaCurve()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param number index
 * @returns number
 */
points(index: number): number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
};

/**
 * @returns number
 */
pointsLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Float64Array
 */
pointsArray(): Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startAkimaCurve(builder: flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset pointsOffset
 */
static addPoints(builder: flatbuffers.Builder, pointsOffset: flatbuffers.Offset) {
  builder.addFieldOffset(0, pointsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createPointsVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startPointsVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(8, numElems, 8);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endAkimaCurve(builder: flatbuffers.Builder): flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
};

static createAkimaCurve(builder: flatbuffers.Builder, pointsOffset: flatbuffers.Offset): flatbuffers.Offset {
  AkimaCurve.startAkimaCurve(builder);
  AkimaCurve.addPoints(builder, pointsOffset);
  return AkimaCurve.endAkimaCurve(builder);
}
}
/**
 * @constructor
 */
export class CatenaryCurve {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns CatenaryCurve
 */
__init(i: number, bb: flatbuffers.ByteBuffer): CatenaryCurve {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param CatenaryCurve= obj
 * @returns CatenaryCurve
 */
static getRootAsCatenaryCurve(bb: flatbuffers.ByteBuffer, obj?: CatenaryCurve): CatenaryCurve {
  return (obj || new CatenaryCurve()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param CatenaryCurve= obj
 * @returns CatenaryCurve
 */
static getSizePrefixedRootAsCatenaryCurve(bb: flatbuffers.ByteBuffer, obj?: CatenaryCurve): CatenaryCurve {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CatenaryCurve()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
a(): number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
};

/**
 * @param DPoint3d= obj
 * @returns DPoint3d|null
 */
origin(obj?: DPoint3d): DPoint3d|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new DPoint3d()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param DVector3d= obj
 * @returns DVector3d|null
 */
vectorU(obj?: DVector3d): DVector3d|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new DVector3d()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param DVector3d= obj
 * @returns DVector3d|null
 */
vectorV(obj?: DVector3d): DVector3d|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new DVector3d()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @returns number
 */
x0(): number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
x1(): number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startCatenaryCurve(builder: flatbuffers.Builder) {
  builder.startObject(6);
};

/**
 * @param flatbuffers.Builder builder
 * @param number a
 */
static addA(builder: flatbuffers.Builder, a: number) {
  builder.addFieldFloat64(0, a, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset originOffset
 */
static addOrigin(builder: flatbuffers.Builder, originOffset: flatbuffers.Offset) {
  builder.addFieldStruct(1, originOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset vectorUOffset
 */
static addVectorU(builder: flatbuffers.Builder, vectorUOffset: flatbuffers.Offset) {
  builder.addFieldStruct(2, vectorUOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset vectorVOffset
 */
static addVectorV(builder: flatbuffers.Builder, vectorVOffset: flatbuffers.Offset) {
  builder.addFieldStruct(3, vectorVOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number x0
 */
static addX0(builder: flatbuffers.Builder, x0: number) {
  builder.addFieldFloat64(4, x0, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number x1
 */
static addX1(builder: flatbuffers.Builder, x1: number) {
  builder.addFieldFloat64(5, x1, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endCatenaryCurve(builder: flatbuffers.Builder): flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
};

static createCatenaryCurve(builder: flatbuffers.Builder, a: number, originOffset: flatbuffers.Offset, vectorUOffset: flatbuffers.Offset, vectorVOffset: flatbuffers.Offset, x0: number, x1: number): flatbuffers.Offset {
  CatenaryCurve.startCatenaryCurve(builder);
  CatenaryCurve.addA(builder, a);
  CatenaryCurve.addOrigin(builder, originOffset);
  CatenaryCurve.addVectorU(builder, vectorUOffset);
  CatenaryCurve.addVectorV(builder, vectorVOffset);
  CatenaryCurve.addX0(builder, x0);
  CatenaryCurve.addX1(builder, x1);
  return CatenaryCurve.endCatenaryCurve(builder);
}
}
/**
 * @constructor
 */
export class PartialCurve {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns PartialCurve
 */
__init(i: number, bb: flatbuffers.ByteBuffer): PartialCurve {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PartialCurve= obj
 * @returns PartialCurve
 */
static getRootAsPartialCurve(bb: flatbuffers.ByteBuffer, obj?: PartialCurve): PartialCurve {
  return (obj || new PartialCurve()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PartialCurve= obj
 * @returns PartialCurve
 */
static getSizePrefixedRootAsPartialCurve(bb: flatbuffers.ByteBuffer, obj?: PartialCurve): PartialCurve {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PartialCurve()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
fraction0(): number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
fraction1(): number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
};

/**
 * @param VariantGeometry= obj
 * @returns VariantGeometry|null
 */
target(obj?: VariantGeometry): VariantGeometry|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new VariantGeometry()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startPartialCurve(builder: flatbuffers.Builder) {
  builder.startObject(3);
};

/**
 * @param flatbuffers.Builder builder
 * @param number fraction0
 */
static addFraction0(builder: flatbuffers.Builder, fraction0: number) {
  builder.addFieldFloat64(0, fraction0, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number fraction1
 */
static addFraction1(builder: flatbuffers.Builder, fraction1: number) {
  builder.addFieldFloat64(1, fraction1, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset targetOffset
 */
static addTarget(builder: flatbuffers.Builder, targetOffset: flatbuffers.Offset) {
  builder.addFieldOffset(2, targetOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endPartialCurve(builder: flatbuffers.Builder): flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
};

static createPartialCurve(builder: flatbuffers.Builder, fraction0: number, fraction1: number, targetOffset: flatbuffers.Offset): flatbuffers.Offset {
  PartialCurve.startPartialCurve(builder);
  PartialCurve.addFraction0(builder, fraction0);
  PartialCurve.addFraction1(builder, fraction1);
  PartialCurve.addTarget(builder, targetOffset);
  return PartialCurve.endPartialCurve(builder);
}
}
/**
 * @constructor
 */
export class CurvePrimitiveId {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns CurvePrimitiveId
 */
__init(i: number, bb: flatbuffers.ByteBuffer): CurvePrimitiveId {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param CurvePrimitiveId= obj
 * @returns CurvePrimitiveId
 */
static getRootAsCurvePrimitiveId(bb: flatbuffers.ByteBuffer, obj?: CurvePrimitiveId): CurvePrimitiveId {
  return (obj || new CurvePrimitiveId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param CurvePrimitiveId= obj
 * @returns CurvePrimitiveId
 */
static getSizePrefixedRootAsCurvePrimitiveId(bb: flatbuffers.ByteBuffer, obj?: CurvePrimitiveId): CurvePrimitiveId {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CurvePrimitiveId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
type(): number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
geomIndex(): number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
partIndex(): number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @returns number
 */
bytes(index: number): number|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
};

/**
 * @returns number
 */
bytesLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Uint8Array
 */
bytesArray(): Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startCurvePrimitiveId(builder: flatbuffers.Builder) {
  builder.startObject(4);
};

/**
 * @param flatbuffers.Builder builder
 * @param number type
 */
static addType(builder: flatbuffers.Builder, type: number) {
  builder.addFieldInt16(0, type, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number geomIndex
 */
static addGeomIndex(builder: flatbuffers.Builder, geomIndex: number) {
  builder.addFieldInt16(1, geomIndex, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number partIndex
 */
static addPartIndex(builder: flatbuffers.Builder, partIndex: number) {
  builder.addFieldInt16(2, partIndex, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset bytesOffset
 */
static addBytes(builder: flatbuffers.Builder, bytesOffset: flatbuffers.Offset) {
  builder.addFieldOffset(3, bytesOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createBytesVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startBytesVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endCurvePrimitiveId(builder: flatbuffers.Builder): flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
};

static createCurvePrimitiveId(builder: flatbuffers.Builder, type: number, geomIndex: number, partIndex: number, bytesOffset: flatbuffers.Offset): flatbuffers.Offset {
  CurvePrimitiveId.startCurvePrimitiveId(builder);
  CurvePrimitiveId.addType(builder, type);
  CurvePrimitiveId.addGeomIndex(builder, geomIndex);
  CurvePrimitiveId.addPartIndex(builder, partIndex);
  CurvePrimitiveId.addBytes(builder, bytesOffset);
  return CurvePrimitiveId.endCurvePrimitiveId(builder);
}
}
/**
 * @constructor
 */
export class CurveVector {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns CurveVector
 */
__init(i: number, bb: flatbuffers.ByteBuffer): CurveVector {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param CurveVector= obj
 * @returns CurveVector
 */
static getRootAsCurveVector(bb: flatbuffers.ByteBuffer, obj?: CurveVector): CurveVector {
  return (obj || new CurveVector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param CurveVector= obj
 * @returns CurveVector
 */
static getSizePrefixedRootAsCurveVector(bb: flatbuffers.ByteBuffer, obj?: CurveVector): CurveVector {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new CurveVector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
type(): number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @param VariantGeometry= obj
 * @returns VariantGeometry
 */
curves(index: number, obj?: VariantGeometry): VariantGeometry|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new VariantGeometry()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
curvesLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startCurveVector(builder: flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param number type
 */
static addType(builder: flatbuffers.Builder, type: number) {
  builder.addFieldInt32(0, type, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset curvesOffset
 */
static addCurves(builder: flatbuffers.Builder, curvesOffset: flatbuffers.Offset) {
  builder.addFieldOffset(1, curvesOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createCurvesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startCurvesVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endCurveVector(builder: flatbuffers.Builder): flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
};

static createCurveVector(builder: flatbuffers.Builder, type: number, curvesOffset: flatbuffers.Offset): flatbuffers.Offset {
  CurveVector.startCurveVector(builder);
  CurveVector.addType(builder, type);
  CurveVector.addCurves(builder, curvesOffset);
  return CurveVector.endCurveVector(builder);
}
}
/**
 * @constructor
 */
export class VectorOfVariantGeometry {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns VectorOfVariantGeometry
 */
__init(i: number, bb: flatbuffers.ByteBuffer): VectorOfVariantGeometry {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param VectorOfVariantGeometry= obj
 * @returns VectorOfVariantGeometry
 */
static getRootAsVectorOfVariantGeometry(bb: flatbuffers.ByteBuffer, obj?: VectorOfVariantGeometry): VectorOfVariantGeometry {
  return (obj || new VectorOfVariantGeometry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param VectorOfVariantGeometry= obj
 * @returns VectorOfVariantGeometry
 */
static getSizePrefixedRootAsVectorOfVariantGeometry(bb: flatbuffers.ByteBuffer, obj?: VectorOfVariantGeometry): VectorOfVariantGeometry {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VectorOfVariantGeometry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param number index
 * @param VariantGeometry= obj
 * @returns VariantGeometry
 */
members(index: number, obj?: VariantGeometry): VariantGeometry|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new VariantGeometry()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
membersLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startVectorOfVariantGeometry(builder: flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset membersOffset
 */
static addMembers(builder: flatbuffers.Builder, membersOffset: flatbuffers.Offset) {
  builder.addFieldOffset(0, membersOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createMembersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startMembersVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endVectorOfVariantGeometry(builder: flatbuffers.Builder): flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
};

static createVectorOfVariantGeometry(builder: flatbuffers.Builder, membersOffset: flatbuffers.Offset): flatbuffers.Offset {
  VectorOfVariantGeometry.startVectorOfVariantGeometry(builder);
  VectorOfVariantGeometry.addMembers(builder, membersOffset);
  return VectorOfVariantGeometry.endVectorOfVariantGeometry(builder);
}
}
/**
 * @constructor
 */
export class BsplineSurface {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns BsplineSurface
 */
__init(i: number, bb: flatbuffers.ByteBuffer): BsplineSurface {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param BsplineSurface= obj
 * @returns BsplineSurface
 */
static getRootAsBsplineSurface(bb: flatbuffers.ByteBuffer, obj?: BsplineSurface): BsplineSurface {
  return (obj || new BsplineSurface()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param BsplineSurface= obj
 * @returns BsplineSurface
 */
static getSizePrefixedRootAsBsplineSurface(bb: flatbuffers.ByteBuffer, obj?: BsplineSurface): BsplineSurface {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BsplineSurface()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param number index
 * @returns number
 */
poles(index: number): number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
};

/**
 * @returns number
 */
polesLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Float64Array
 */
polesArray(): Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param number index
 * @returns number
 */
weights(index: number): number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
};

/**
 * @returns number
 */
weightsLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Float64Array
 */
weightsArray(): Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param number index
 * @returns number
 */
knotsU(index: number): number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
};

/**
 * @returns number
 */
knotsULength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Float64Array
 */
knotsUArray(): Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param number index
 * @returns number
 */
knotsV(index: number): number|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
};

/**
 * @returns number
 */
knotsVLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Float64Array
 */
knotsVArray(): Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @returns number
 */
numPolesU(): number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
numPolesV(): number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
orderU(): number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
orderV(): number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
numRulesU(): number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
numRulesV(): number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
holeOrigin(): number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param CurveVector= obj
 * @returns CurveVector|null
 */
boundaries(obj?: CurveVector): CurveVector|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? (obj || new CurveVector()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @returns boolean
 */
closedU(): boolean {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns boolean
 */
closedV(): boolean {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param flatbuffers.Builder builder
 */
static startBsplineSurface(builder: flatbuffers.Builder) {
  builder.startObject(14);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset polesOffset
 */
static addPoles(builder: flatbuffers.Builder, polesOffset: flatbuffers.Offset) {
  builder.addFieldOffset(0, polesOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createPolesVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startPolesVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(8, numElems, 8);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset weightsOffset
 */
static addWeights(builder: flatbuffers.Builder, weightsOffset: flatbuffers.Offset) {
  builder.addFieldOffset(1, weightsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createWeightsVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startWeightsVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(8, numElems, 8);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset knotsUOffset
 */
static addKnotsU(builder: flatbuffers.Builder, knotsUOffset: flatbuffers.Offset) {
  builder.addFieldOffset(2, knotsUOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createKnotsUVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startKnotsUVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(8, numElems, 8);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset knotsVOffset
 */
static addKnotsV(builder: flatbuffers.Builder, knotsVOffset: flatbuffers.Offset) {
  builder.addFieldOffset(3, knotsVOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createKnotsVVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startKnotsVVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(8, numElems, 8);
};

/**
 * @param flatbuffers.Builder builder
 * @param number numPolesU
 */
static addNumPolesU(builder: flatbuffers.Builder, numPolesU: number) {
  builder.addFieldInt32(4, numPolesU, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number numPolesV
 */
static addNumPolesV(builder: flatbuffers.Builder, numPolesV: number) {
  builder.addFieldInt32(5, numPolesV, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number orderU
 */
static addOrderU(builder: flatbuffers.Builder, orderU: number) {
  builder.addFieldInt32(6, orderU, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number orderV
 */
static addOrderV(builder: flatbuffers.Builder, orderV: number) {
  builder.addFieldInt32(7, orderV, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number numRulesU
 */
static addNumRulesU(builder: flatbuffers.Builder, numRulesU: number) {
  builder.addFieldInt32(8, numRulesU, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number numRulesV
 */
static addNumRulesV(builder: flatbuffers.Builder, numRulesV: number) {
  builder.addFieldInt32(9, numRulesV, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number holeOrigin
 */
static addHoleOrigin(builder: flatbuffers.Builder, holeOrigin: number) {
  builder.addFieldInt32(10, holeOrigin, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset boundariesOffset
 */
static addBoundaries(builder: flatbuffers.Builder, boundariesOffset: flatbuffers.Offset) {
  builder.addFieldOffset(11, boundariesOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean closedU
 */
static addClosedU(builder: flatbuffers.Builder, closedU: boolean) {
  builder.addFieldInt8(12, +closedU, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean closedV
 */
static addClosedV(builder: flatbuffers.Builder, closedV: boolean) {
  builder.addFieldInt8(13, +closedV, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endBsplineSurface(builder: flatbuffers.Builder): flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
};

static createBsplineSurface(builder: flatbuffers.Builder, polesOffset: flatbuffers.Offset, weightsOffset: flatbuffers.Offset, knotsUOffset: flatbuffers.Offset, knotsVOffset: flatbuffers.Offset, numPolesU: number, numPolesV: number, orderU: number, orderV: number, numRulesU: number, numRulesV: number, holeOrigin: number, boundariesOffset: flatbuffers.Offset, closedU: boolean, closedV: boolean): flatbuffers.Offset {
  BsplineSurface.startBsplineSurface(builder);
  BsplineSurface.addPoles(builder, polesOffset);
  BsplineSurface.addWeights(builder, weightsOffset);
  BsplineSurface.addKnotsU(builder, knotsUOffset);
  BsplineSurface.addKnotsV(builder, knotsVOffset);
  BsplineSurface.addNumPolesU(builder, numPolesU);
  BsplineSurface.addNumPolesV(builder, numPolesV);
  BsplineSurface.addOrderU(builder, orderU);
  BsplineSurface.addOrderV(builder, orderV);
  BsplineSurface.addNumRulesU(builder, numRulesU);
  BsplineSurface.addNumRulesV(builder, numRulesV);
  BsplineSurface.addHoleOrigin(builder, holeOrigin);
  BsplineSurface.addBoundaries(builder, boundariesOffset);
  BsplineSurface.addClosedU(builder, closedU);
  BsplineSurface.addClosedV(builder, closedV);
  return BsplineSurface.endBsplineSurface(builder);
}
}
/**
 * @constructor
 */
export class DgnBox {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns DgnBox
 */
__init(i: number, bb: flatbuffers.ByteBuffer): DgnBox {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DgnBox= obj
 * @returns DgnBox
 */
static getRootAsDgnBox(bb: flatbuffers.ByteBuffer, obj?: DgnBox): DgnBox {
  return (obj || new DgnBox()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DgnBox= obj
 * @returns DgnBox
 */
static getSizePrefixedRootAsDgnBox(bb: flatbuffers.ByteBuffer, obj?: DgnBox): DgnBox {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DgnBox()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param DgnBoxDetail= obj
 * @returns DgnBoxDetail|null
 */
detail(obj?: DgnBoxDetail): DgnBoxDetail|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new DgnBoxDetail()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startDgnBox(builder: flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset detailOffset
 */
static addDetail(builder: flatbuffers.Builder, detailOffset: flatbuffers.Offset) {
  builder.addFieldStruct(0, detailOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endDgnBox(builder: flatbuffers.Builder): flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
};

static createDgnBox(builder: flatbuffers.Builder, detailOffset: flatbuffers.Offset): flatbuffers.Offset {
  DgnBox.startDgnBox(builder);
  DgnBox.addDetail(builder, detailOffset);
  return DgnBox.endDgnBox(builder);
}
}
/**
 * @constructor
 */
export class DgnSphere {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns DgnSphere
 */
__init(i: number, bb: flatbuffers.ByteBuffer): DgnSphere {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DgnSphere= obj
 * @returns DgnSphere
 */
static getRootAsDgnSphere(bb: flatbuffers.ByteBuffer, obj?: DgnSphere): DgnSphere {
  return (obj || new DgnSphere()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DgnSphere= obj
 * @returns DgnSphere
 */
static getSizePrefixedRootAsDgnSphere(bb: flatbuffers.ByteBuffer, obj?: DgnSphere): DgnSphere {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DgnSphere()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param DgnSphereDetail= obj
 * @returns DgnSphereDetail|null
 */
detail(obj?: DgnSphereDetail): DgnSphereDetail|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new DgnSphereDetail()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startDgnSphere(builder: flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset detailOffset
 */
static addDetail(builder: flatbuffers.Builder, detailOffset: flatbuffers.Offset) {
  builder.addFieldStruct(0, detailOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endDgnSphere(builder: flatbuffers.Builder): flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
};

static createDgnSphere(builder: flatbuffers.Builder, detailOffset: flatbuffers.Offset): flatbuffers.Offset {
  DgnSphere.startDgnSphere(builder);
  DgnSphere.addDetail(builder, detailOffset);
  return DgnSphere.endDgnSphere(builder);
}
}
/**
 * @constructor
 */
export class DgnCone {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns DgnCone
 */
__init(i: number, bb: flatbuffers.ByteBuffer): DgnCone {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DgnCone= obj
 * @returns DgnCone
 */
static getRootAsDgnCone(bb: flatbuffers.ByteBuffer, obj?: DgnCone): DgnCone {
  return (obj || new DgnCone()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DgnCone= obj
 * @returns DgnCone
 */
static getSizePrefixedRootAsDgnCone(bb: flatbuffers.ByteBuffer, obj?: DgnCone): DgnCone {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DgnCone()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param DgnConeDetail= obj
 * @returns DgnConeDetail|null
 */
detail(obj?: DgnConeDetail): DgnConeDetail|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new DgnConeDetail()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startDgnCone(builder: flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset detailOffset
 */
static addDetail(builder: flatbuffers.Builder, detailOffset: flatbuffers.Offset) {
  builder.addFieldStruct(0, detailOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endDgnCone(builder: flatbuffers.Builder): flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
};

static createDgnCone(builder: flatbuffers.Builder, detailOffset: flatbuffers.Offset): flatbuffers.Offset {
  DgnCone.startDgnCone(builder);
  DgnCone.addDetail(builder, detailOffset);
  return DgnCone.endDgnCone(builder);
}
}
/**
 * @constructor
 */
export class DgnTorusPipe {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns DgnTorusPipe
 */
__init(i: number, bb: flatbuffers.ByteBuffer): DgnTorusPipe {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DgnTorusPipe= obj
 * @returns DgnTorusPipe
 */
static getRootAsDgnTorusPipe(bb: flatbuffers.ByteBuffer, obj?: DgnTorusPipe): DgnTorusPipe {
  return (obj || new DgnTorusPipe()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DgnTorusPipe= obj
 * @returns DgnTorusPipe
 */
static getSizePrefixedRootAsDgnTorusPipe(bb: flatbuffers.ByteBuffer, obj?: DgnTorusPipe): DgnTorusPipe {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DgnTorusPipe()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param DgnTorusPipeDetail= obj
 * @returns DgnTorusPipeDetail|null
 */
detail(obj?: DgnTorusPipeDetail): DgnTorusPipeDetail|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new DgnTorusPipeDetail()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startDgnTorusPipe(builder: flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset detailOffset
 */
static addDetail(builder: flatbuffers.Builder, detailOffset: flatbuffers.Offset) {
  builder.addFieldStruct(0, detailOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endDgnTorusPipe(builder: flatbuffers.Builder): flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
};

static createDgnTorusPipe(builder: flatbuffers.Builder, detailOffset: flatbuffers.Offset): flatbuffers.Offset {
  DgnTorusPipe.startDgnTorusPipe(builder);
  DgnTorusPipe.addDetail(builder, detailOffset);
  return DgnTorusPipe.endDgnTorusPipe(builder);
}
}
/**
 * @constructor
 */
export class DgnExtrusion {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns DgnExtrusion
 */
__init(i: number, bb: flatbuffers.ByteBuffer): DgnExtrusion {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DgnExtrusion= obj
 * @returns DgnExtrusion
 */
static getRootAsDgnExtrusion(bb: flatbuffers.ByteBuffer, obj?: DgnExtrusion): DgnExtrusion {
  return (obj || new DgnExtrusion()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DgnExtrusion= obj
 * @returns DgnExtrusion
 */
static getSizePrefixedRootAsDgnExtrusion(bb: flatbuffers.ByteBuffer, obj?: DgnExtrusion): DgnExtrusion {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DgnExtrusion()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param CurveVector= obj
 * @returns CurveVector|null
 */
baseCurve(obj?: CurveVector): CurveVector|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new CurveVector()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @param DVector3d= obj
 * @returns DVector3d|null
 */
extrusionVector(obj?: DVector3d): DVector3d|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new DVector3d()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @returns boolean
 */
capped(): boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param flatbuffers.Builder builder
 */
static startDgnExtrusion(builder: flatbuffers.Builder) {
  builder.startObject(3);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset baseCurveOffset
 */
static addBaseCurve(builder: flatbuffers.Builder, baseCurveOffset: flatbuffers.Offset) {
  builder.addFieldOffset(0, baseCurveOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset extrusionVectorOffset
 */
static addExtrusionVector(builder: flatbuffers.Builder, extrusionVectorOffset: flatbuffers.Offset) {
  builder.addFieldStruct(1, extrusionVectorOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean capped
 */
static addCapped(builder: flatbuffers.Builder, capped: boolean) {
  builder.addFieldInt8(2, +capped, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endDgnExtrusion(builder: flatbuffers.Builder): flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
};

static createDgnExtrusion(builder: flatbuffers.Builder, baseCurveOffset: flatbuffers.Offset, extrusionVectorOffset: flatbuffers.Offset, capped: boolean): flatbuffers.Offset {
  DgnExtrusion.startDgnExtrusion(builder);
  DgnExtrusion.addBaseCurve(builder, baseCurveOffset);
  DgnExtrusion.addExtrusionVector(builder, extrusionVectorOffset);
  DgnExtrusion.addCapped(builder, capped);
  return DgnExtrusion.endDgnExtrusion(builder);
}
}
/**
 * @constructor
 */
export class DgnRotationalSweep {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns DgnRotationalSweep
 */
__init(i: number, bb: flatbuffers.ByteBuffer): DgnRotationalSweep {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DgnRotationalSweep= obj
 * @returns DgnRotationalSweep
 */
static getRootAsDgnRotationalSweep(bb: flatbuffers.ByteBuffer, obj?: DgnRotationalSweep): DgnRotationalSweep {
  return (obj || new DgnRotationalSweep()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DgnRotationalSweep= obj
 * @returns DgnRotationalSweep
 */
static getSizePrefixedRootAsDgnRotationalSweep(bb: flatbuffers.ByteBuffer, obj?: DgnRotationalSweep): DgnRotationalSweep {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DgnRotationalSweep()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param CurveVector= obj
 * @returns CurveVector|null
 */
baseCurve(obj?: CurveVector): CurveVector|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new CurveVector()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @param DRay3d= obj
 * @returns DRay3d|null
 */
axis(obj?: DRay3d): DRay3d|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new DRay3d()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @returns number
 */
sweepRadians(): number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
numVRules(): number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns boolean
 */
capped(): boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param flatbuffers.Builder builder
 */
static startDgnRotationalSweep(builder: flatbuffers.Builder) {
  builder.startObject(5);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset baseCurveOffset
 */
static addBaseCurve(builder: flatbuffers.Builder, baseCurveOffset: flatbuffers.Offset) {
  builder.addFieldOffset(0, baseCurveOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset axisOffset
 */
static addAxis(builder: flatbuffers.Builder, axisOffset: flatbuffers.Offset) {
  builder.addFieldStruct(1, axisOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number sweepRadians
 */
static addSweepRadians(builder: flatbuffers.Builder, sweepRadians: number) {
  builder.addFieldFloat64(2, sweepRadians, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number numVRules
 */
static addNumVRules(builder: flatbuffers.Builder, numVRules: number) {
  builder.addFieldInt32(3, numVRules, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean capped
 */
static addCapped(builder: flatbuffers.Builder, capped: boolean) {
  builder.addFieldInt8(4, +capped, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endDgnRotationalSweep(builder: flatbuffers.Builder): flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
};

static createDgnRotationalSweep(builder: flatbuffers.Builder, baseCurveOffset: flatbuffers.Offset, axisOffset: flatbuffers.Offset, sweepRadians: number, numVRules: number, capped: boolean): flatbuffers.Offset {
  DgnRotationalSweep.startDgnRotationalSweep(builder);
  DgnRotationalSweep.addBaseCurve(builder, baseCurveOffset);
  DgnRotationalSweep.addAxis(builder, axisOffset);
  DgnRotationalSweep.addSweepRadians(builder, sweepRadians);
  DgnRotationalSweep.addNumVRules(builder, numVRules);
  DgnRotationalSweep.addCapped(builder, capped);
  return DgnRotationalSweep.endDgnRotationalSweep(builder);
}
}
/**
 * @constructor
 */
export class DgnRuledSweep {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns DgnRuledSweep
 */
__init(i: number, bb: flatbuffers.ByteBuffer): DgnRuledSweep {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DgnRuledSweep= obj
 * @returns DgnRuledSweep
 */
static getRootAsDgnRuledSweep(bb: flatbuffers.ByteBuffer, obj?: DgnRuledSweep): DgnRuledSweep {
  return (obj || new DgnRuledSweep()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param DgnRuledSweep= obj
 * @returns DgnRuledSweep
 */
static getSizePrefixedRootAsDgnRuledSweep(bb: flatbuffers.ByteBuffer, obj?: DgnRuledSweep): DgnRuledSweep {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DgnRuledSweep()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param number index
 * @param CurveVector= obj
 * @returns CurveVector
 */
curves(index: number, obj?: CurveVector): CurveVector|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new CurveVector()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
curvesLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns boolean
 */
capped(): boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param flatbuffers.Builder builder
 */
static startDgnRuledSweep(builder: flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset curvesOffset
 */
static addCurves(builder: flatbuffers.Builder, curvesOffset: flatbuffers.Offset) {
  builder.addFieldOffset(0, curvesOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createCurvesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startCurvesVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean capped
 */
static addCapped(builder: flatbuffers.Builder, capped: boolean) {
  builder.addFieldInt8(1, +capped, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endDgnRuledSweep(builder: flatbuffers.Builder): flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
};

static createDgnRuledSweep(builder: flatbuffers.Builder, curvesOffset: flatbuffers.Offset, capped: boolean): flatbuffers.Offset {
  DgnRuledSweep.startDgnRuledSweep(builder);
  DgnRuledSweep.addCurves(builder, curvesOffset);
  DgnRuledSweep.addCapped(builder, capped);
  return DgnRuledSweep.endDgnRuledSweep(builder);
}
}
/**
 * @constructor
 */
export class PolyfaceAuxChannelData {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns PolyfaceAuxChannelData
 */
__init(i: number, bb: flatbuffers.ByteBuffer): PolyfaceAuxChannelData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PolyfaceAuxChannelData= obj
 * @returns PolyfaceAuxChannelData
 */
static getRootAsPolyfaceAuxChannelData(bb: flatbuffers.ByteBuffer, obj?: PolyfaceAuxChannelData): PolyfaceAuxChannelData {
  return (obj || new PolyfaceAuxChannelData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PolyfaceAuxChannelData= obj
 * @returns PolyfaceAuxChannelData
 */
static getSizePrefixedRootAsPolyfaceAuxChannelData(bb: flatbuffers.ByteBuffer, obj?: PolyfaceAuxChannelData): PolyfaceAuxChannelData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PolyfaceAuxChannelData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
input(): number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
};

/**
 * @param number index
 * @returns number
 */
values(index: number): number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
};

/**
 * @returns number
 */
valuesLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Float64Array
 */
valuesArray(): Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startPolyfaceAuxChannelData(builder: flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param number input
 */
static addInput(builder: flatbuffers.Builder, input: number) {
  builder.addFieldFloat64(0, input, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset valuesOffset
 */
static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {
  builder.addFieldOffset(1, valuesOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createValuesVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startValuesVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(8, numElems, 8);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endPolyfaceAuxChannelData(builder: flatbuffers.Builder): flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
};

static createPolyfaceAuxChannelData(builder: flatbuffers.Builder, input: number, valuesOffset: flatbuffers.Offset): flatbuffers.Offset {
  PolyfaceAuxChannelData.startPolyfaceAuxChannelData(builder);
  PolyfaceAuxChannelData.addInput(builder, input);
  PolyfaceAuxChannelData.addValues(builder, valuesOffset);
  return PolyfaceAuxChannelData.endPolyfaceAuxChannelData(builder);
}
}
/**
 * @constructor
 */
export class PolyfaceAuxChannel {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns PolyfaceAuxChannel
 */
__init(i: number, bb: flatbuffers.ByteBuffer): PolyfaceAuxChannel {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PolyfaceAuxChannel= obj
 * @returns PolyfaceAuxChannel
 */
static getRootAsPolyfaceAuxChannel(bb: flatbuffers.ByteBuffer, obj?: PolyfaceAuxChannel): PolyfaceAuxChannel {
  return (obj || new PolyfaceAuxChannel()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PolyfaceAuxChannel= obj
 * @returns PolyfaceAuxChannel
 */
static getSizePrefixedRootAsPolyfaceAuxChannel(bb: flatbuffers.ByteBuffer, obj?: PolyfaceAuxChannel): PolyfaceAuxChannel {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PolyfaceAuxChannel()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
dataType(): number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
name(): string|null
name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null
name(optionalEncoding?: any): string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
inputName(): string|null
inputName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null
inputName(optionalEncoding?: any): string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param number index
 * @param PolyfaceAuxChannelData= obj
 * @returns PolyfaceAuxChannelData
 */
data(index: number, obj?: PolyfaceAuxChannelData): PolyfaceAuxChannelData|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new PolyfaceAuxChannelData()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
dataLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startPolyfaceAuxChannel(builder: flatbuffers.Builder) {
  builder.startObject(4);
};

/**
 * @param flatbuffers.Builder builder
 * @param number dataType
 */
static addDataType(builder: flatbuffers.Builder, dataType: number) {
  builder.addFieldInt32(0, dataType, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset nameOffset
 */
static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset inputNameOffset
 */
static addInputName(builder: flatbuffers.Builder, inputNameOffset: flatbuffers.Offset) {
  builder.addFieldOffset(2, inputNameOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset dataOffset
 */
static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {
  builder.addFieldOffset(3, dataOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startDataVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endPolyfaceAuxChannel(builder: flatbuffers.Builder): flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
};

static createPolyfaceAuxChannel(builder: flatbuffers.Builder, dataType: number, nameOffset: flatbuffers.Offset, inputNameOffset: flatbuffers.Offset, dataOffset: flatbuffers.Offset): flatbuffers.Offset {
  PolyfaceAuxChannel.startPolyfaceAuxChannel(builder);
  PolyfaceAuxChannel.addDataType(builder, dataType);
  PolyfaceAuxChannel.addName(builder, nameOffset);
  PolyfaceAuxChannel.addInputName(builder, inputNameOffset);
  PolyfaceAuxChannel.addData(builder, dataOffset);
  return PolyfaceAuxChannel.endPolyfaceAuxChannel(builder);
}
}
/**
 * @constructor
 */
export class PolyfaceAuxData {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns PolyfaceAuxData
 */
__init(i: number, bb: flatbuffers.ByteBuffer): PolyfaceAuxData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PolyfaceAuxData= obj
 * @returns PolyfaceAuxData
 */
static getRootAsPolyfaceAuxData(bb: flatbuffers.ByteBuffer, obj?: PolyfaceAuxData): PolyfaceAuxData {
  return (obj || new PolyfaceAuxData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param PolyfaceAuxData= obj
 * @returns PolyfaceAuxData
 */
static getSizePrefixedRootAsPolyfaceAuxData(bb: flatbuffers.ByteBuffer, obj?: PolyfaceAuxData): PolyfaceAuxData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PolyfaceAuxData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param number index
 * @returns number
 */
indices(index: number): number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns number
 */
indicesLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Int32Array
 */
indicesArray(): Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param number index
 * @param PolyfaceAuxChannel= obj
 * @returns PolyfaceAuxChannel
 */
channels(index: number, obj?: PolyfaceAuxChannel): PolyfaceAuxChannel|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new PolyfaceAuxChannel()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
channelsLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startPolyfaceAuxData(builder: flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset indicesOffset
 */
static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {
  builder.addFieldOffset(0, indicesOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createIndicesVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startIndicesVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset channelsOffset
 */
static addChannels(builder: flatbuffers.Builder, channelsOffset: flatbuffers.Offset) {
  builder.addFieldOffset(1, channelsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createChannelsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startChannelsVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endPolyfaceAuxData(builder: flatbuffers.Builder): flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
};

static createPolyfaceAuxData(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset, channelsOffset: flatbuffers.Offset): flatbuffers.Offset {
  PolyfaceAuxData.startPolyfaceAuxData(builder);
  PolyfaceAuxData.addIndices(builder, indicesOffset);
  PolyfaceAuxData.addChannels(builder, channelsOffset);
  return PolyfaceAuxData.endPolyfaceAuxData(builder);
}
}
/**
 * @constructor
 */
export class Polyface {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns Polyface
 */
__init(i: number, bb: flatbuffers.ByteBuffer): Polyface {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param Polyface= obj
 * @returns Polyface
 */
static getRootAsPolyface(bb: flatbuffers.ByteBuffer, obj?: Polyface): Polyface {
  return (obj || new Polyface()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param Polyface= obj
 * @returns Polyface
 */
static getSizePrefixedRootAsPolyface(bb: flatbuffers.ByteBuffer, obj?: Polyface): Polyface {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Polyface()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param number index
 * @returns number
 */
point(index: number): number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
};

/**
 * @returns number
 */
pointLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Float64Array
 */
pointArray(): Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param number index
 * @returns number
 */
param(index: number): number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
};

/**
 * @returns number
 */
paramLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Float64Array
 */
paramArray(): Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param number index
 * @returns number
 */
normal(index: number): number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
};

/**
 * @returns number
 */
normalLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Float64Array
 */
normalArray(): Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param number index
 * @returns number
 */
doubleColor(index: number): number|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
};

/**
 * @returns number
 */
doubleColorLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Float64Array
 */
doubleColorArray(): Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param number index
 * @returns number
 */
intColor(index: number): number|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns number
 */
intColorLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Int32Array
 */
intColorArray(): Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param number index
 * @returns number
 */
pointIndex(index: number): number|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns number
 */
pointIndexLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Int32Array
 */
pointIndexArray(): Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param number index
 * @returns number
 */
paramIndex(index: number): number|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns number
 */
paramIndexLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Int32Array
 */
paramIndexArray(): Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param number index
 * @returns number
 */
normalIndex(index: number): number|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns number
 */
normalIndexLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Int32Array
 */
normalIndexArray(): Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param number index
 * @returns number
 */
colorIndex(index: number): number|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns number
 */
colorIndexLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Int32Array
 */
colorIndexArray(): Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param number index
 * @returns number
 */
colorTable(index: number): number|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns number
 */
colorTableLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Int32Array
 */
colorTableArray(): Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @returns number
 */
numPerFace(): number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
numPerRow(): number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
meshStyle(): number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns boolean
 */
twoSided(): boolean {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param number index
 * @returns number
 */
faceIndex(index: number): number|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns number
 */
faceIndexLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Int32Array
 */
faceIndexArray(): Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param number index
 * @returns number
 */
faceData(index: number): number|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
};

/**
 * @returns number
 */
faceDataLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Float64Array
 */
faceDataArray(): Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param PolyfaceAuxData= obj
 * @returns PolyfaceAuxData|null
 */
auxData(obj?: PolyfaceAuxData): PolyfaceAuxData|null {
  const offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? (obj || new PolyfaceAuxData()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startPolyface(builder: flatbuffers.Builder) {
  builder.startObject(17);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset pointOffset
 */
static addPoint(builder: flatbuffers.Builder, pointOffset: flatbuffers.Offset) {
  builder.addFieldOffset(0, pointOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createPointVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startPointVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(8, numElems, 8);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset paramOffset
 */
static addParam(builder: flatbuffers.Builder, paramOffset: flatbuffers.Offset) {
  builder.addFieldOffset(1, paramOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createParamVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startParamVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(8, numElems, 8);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset normalOffset
 */
static addNormal(builder: flatbuffers.Builder, normalOffset: flatbuffers.Offset) {
  builder.addFieldOffset(2, normalOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createNormalVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startNormalVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(8, numElems, 8);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset doubleColorOffset
 */
static addDoubleColor(builder: flatbuffers.Builder, doubleColorOffset: flatbuffers.Offset) {
  builder.addFieldOffset(3, doubleColorOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createDoubleColorVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startDoubleColorVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(8, numElems, 8);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset intColorOffset
 */
static addIntColor(builder: flatbuffers.Builder, intColorOffset: flatbuffers.Offset) {
  builder.addFieldOffset(4, intColorOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createIntColorVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startIntColorVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset pointIndexOffset
 */
static addPointIndex(builder: flatbuffers.Builder, pointIndexOffset: flatbuffers.Offset) {
  builder.addFieldOffset(5, pointIndexOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createPointIndexVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startPointIndexVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset paramIndexOffset
 */
static addParamIndex(builder: flatbuffers.Builder, paramIndexOffset: flatbuffers.Offset) {
  builder.addFieldOffset(6, paramIndexOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createParamIndexVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startParamIndexVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset normalIndexOffset
 */
static addNormalIndex(builder: flatbuffers.Builder, normalIndexOffset: flatbuffers.Offset) {
  builder.addFieldOffset(7, normalIndexOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createNormalIndexVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startNormalIndexVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset colorIndexOffset
 */
static addColorIndex(builder: flatbuffers.Builder, colorIndexOffset: flatbuffers.Offset) {
  builder.addFieldOffset(8, colorIndexOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createColorIndexVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startColorIndexVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset colorTableOffset
 */
static addColorTable(builder: flatbuffers.Builder, colorTableOffset: flatbuffers.Offset) {
  builder.addFieldOffset(9, colorTableOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createColorTableVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startColorTableVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param number numPerFace
 */
static addNumPerFace(builder: flatbuffers.Builder, numPerFace: number) {
  builder.addFieldInt32(10, numPerFace, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number numPerRow
 */
static addNumPerRow(builder: flatbuffers.Builder, numPerRow: number) {
  builder.addFieldInt32(11, numPerRow, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number meshStyle
 */
static addMeshStyle(builder: flatbuffers.Builder, meshStyle: number) {
  builder.addFieldInt32(12, meshStyle, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param boolean twoSided
 */
static addTwoSided(builder: flatbuffers.Builder, twoSided: boolean) {
  builder.addFieldInt8(13, +twoSided, +false);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset faceIndexOffset
 */
static addFaceIndex(builder: flatbuffers.Builder, faceIndexOffset: flatbuffers.Offset) {
  builder.addFieldOffset(14, faceIndexOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createFaceIndexVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startFaceIndexVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset faceDataOffset
 */
static addFaceData(builder: flatbuffers.Builder, faceDataOffset: flatbuffers.Offset) {
  builder.addFieldOffset(15, faceDataOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createFaceDataVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startFaceDataVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(8, numElems, 8);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset auxDataOffset
 */
static addAuxData(builder: flatbuffers.Builder, auxDataOffset: flatbuffers.Offset) {
  builder.addFieldOffset(16, auxDataOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endPolyface(builder: flatbuffers.Builder): flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
};

static createPolyface(builder: flatbuffers.Builder, pointOffset: flatbuffers.Offset, paramOffset: flatbuffers.Offset, normalOffset: flatbuffers.Offset, doubleColorOffset: flatbuffers.Offset, intColorOffset: flatbuffers.Offset, pointIndexOffset: flatbuffers.Offset, paramIndexOffset: flatbuffers.Offset, normalIndexOffset: flatbuffers.Offset, colorIndexOffset: flatbuffers.Offset, colorTableOffset: flatbuffers.Offset, numPerFace: number, numPerRow: number, meshStyle: number, twoSided: boolean, faceIndexOffset: flatbuffers.Offset, faceDataOffset: flatbuffers.Offset, auxDataOffset: flatbuffers.Offset): flatbuffers.Offset {
  Polyface.startPolyface(builder);
  Polyface.addPoint(builder, pointOffset);
  Polyface.addParam(builder, paramOffset);
  Polyface.addNormal(builder, normalOffset);
  Polyface.addDoubleColor(builder, doubleColorOffset);
  Polyface.addIntColor(builder, intColorOffset);
  Polyface.addPointIndex(builder, pointIndexOffset);
  Polyface.addParamIndex(builder, paramIndexOffset);
  Polyface.addNormalIndex(builder, normalIndexOffset);
  Polyface.addColorIndex(builder, colorIndexOffset);
  Polyface.addColorTable(builder, colorTableOffset);
  Polyface.addNumPerFace(builder, numPerFace);
  Polyface.addNumPerRow(builder, numPerRow);
  Polyface.addMeshStyle(builder, meshStyle);
  Polyface.addTwoSided(builder, twoSided);
  Polyface.addFaceIndex(builder, faceIndexOffset);
  Polyface.addFaceData(builder, faceDataOffset);
  Polyface.addAuxData(builder, auxDataOffset);
  return Polyface.endPolyface(builder);
}
}
/**
 * @constructor
 */
export class TransitionSpiralDetail {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns TransitionSpiralDetail
 */
__init(i: number, bb: flatbuffers.ByteBuffer): TransitionSpiralDetail {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param DTransform3d= obj
 * @returns DTransform3d|null
 */
transform(obj?: DTransform3d): DTransform3d|null {
  return (obj || new DTransform3d()).__init(this.bb_pos, this.bb!);
};

/**
 * @returns number
 */
fractionA(): number {
  return this.bb!.readFloat64(this.bb_pos + 96);
};

/**
 * @returns number
 */
fractionB(): number {
  return this.bb!.readFloat64(this.bb_pos + 104);
};

/**
 * @returns number
 */
bearing0Radians(): number {
  return this.bb!.readFloat64(this.bb_pos + 112);
};

/**
 * @returns number
 */
bearing1Radians(): number {
  return this.bb!.readFloat64(this.bb_pos + 120);
};

/**
 * @returns number
 */
curvature0(): number {
  return this.bb!.readFloat64(this.bb_pos + 128);
};

/**
 * @returns number
 */
curvature1(): number {
  return this.bb!.readFloat64(this.bb_pos + 136);
};

/**
 * @returns number
 */
spiralType(): number {
  return this.bb!.readInt32(this.bb_pos + 144);
};

/**
 * @returns number
 */
constructionHint(): number {
  return this.bb!.readInt32(this.bb_pos + 148);
};

/**
 * @param flatbuffers.Builder builder
 * @param number transform_axx
 * @param number transform_axy
 * @param number transform_axz
 * @param number transform_axw
 * @param number transform_ayx
 * @param number transform_ayy
 * @param number transform_ayz
 * @param number transform_ayw
 * @param number transform_azx
 * @param number transform_azy
 * @param number transform_azz
 * @param number transform_azw
 * @param number fractionA
 * @param number fractionB
 * @param number bearing0Radians
 * @param number bearing1Radians
 * @param number curvature0
 * @param number curvature1
 * @param number spiralType
 * @param number constructionHint
 * @returns flatbuffers.Offset
 */
static createTransitionSpiralDetail(builder: flatbuffers.Builder, transform_axx: number, transform_axy: number, transform_axz: number, transform_axw: number, transform_ayx: number, transform_ayy: number, transform_ayz: number, transform_ayw: number, transform_azx: number, transform_azy: number, transform_azz: number, transform_azw: number, fractionA: number, fractionB: number, bearing0Radians: number, bearing1Radians: number, curvature0: number, curvature1: number, spiralType: number, constructionHint: number): flatbuffers.Offset {
  builder.prep(8, 152);
  builder.writeInt32(constructionHint);
  builder.writeInt32(spiralType);
  builder.writeFloat64(curvature1);
  builder.writeFloat64(curvature0);
  builder.writeFloat64(bearing1Radians);
  builder.writeFloat64(bearing0Radians);
  builder.writeFloat64(fractionB);
  builder.writeFloat64(fractionA);
  builder.prep(8, 96);
  builder.writeFloat64(transform_azw);
  builder.writeFloat64(transform_azz);
  builder.writeFloat64(transform_azy);
  builder.writeFloat64(transform_azx);
  builder.writeFloat64(transform_ayw);
  builder.writeFloat64(transform_ayz);
  builder.writeFloat64(transform_ayy);
  builder.writeFloat64(transform_ayx);
  builder.writeFloat64(transform_axw);
  builder.writeFloat64(transform_axz);
  builder.writeFloat64(transform_axy);
  builder.writeFloat64(transform_axx);
  return builder.offset();
};

}
/**
 * @constructor
 */
export class DirectSpiralDetail {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns DirectSpiralDetail
 */
__init(i: number, bb: flatbuffers.ByteBuffer): DirectSpiralDetail {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns number
 */
nominalLength(): number {
  return this.bb!.readFloat64(this.bb_pos);
};

/**
 * @returns number
 */
trueLength(): number {
  return this.bb!.readFloat64(this.bb_pos + 8);
};

/**
 * @returns number
 */
doubleTag0(): number {
  return this.bb!.readFloat64(this.bb_pos + 16);
};

/**
 * @returns number
 */
doubleTag1(): number {
  return this.bb!.readFloat64(this.bb_pos + 24);
};

/**
 * @returns number
 */
intTag0(): number {
  return this.bb!.readFloat64(this.bb_pos + 32);
};

/**
 * @returns number
 */
intTag1(): number {
  return this.bb!.readFloat64(this.bb_pos + 40);
};

/**
 * @param flatbuffers.Builder builder
 * @param number nominalLength
 * @param number trueLength
 * @param number doubleTag0
 * @param number doubleTag1
 * @param number intTag0
 * @param number intTag1
 * @returns flatbuffers.Offset
 */
static createDirectSpiralDetail(builder: flatbuffers.Builder, nominalLength: number, trueLength: number, doubleTag0: number, doubleTag1: number, intTag0: number, intTag1: number): flatbuffers.Offset {
  builder.prep(8, 48);
  builder.writeFloat64(intTag1);
  builder.writeFloat64(intTag0);
  builder.writeFloat64(doubleTag1);
  builder.writeFloat64(doubleTag0);
  builder.writeFloat64(trueLength);
  builder.writeFloat64(nominalLength);
  return builder.offset();
};

}
/**
 * @constructor
 */
export class TransitionSpiral {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns TransitionSpiral
 */
__init(i: number, bb: flatbuffers.ByteBuffer): TransitionSpiral {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param TransitionSpiral= obj
 * @returns TransitionSpiral
 */
static getRootAsTransitionSpiral(bb: flatbuffers.ByteBuffer, obj?: TransitionSpiral): TransitionSpiral {
  return (obj || new TransitionSpiral()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param TransitionSpiral= obj
 * @returns TransitionSpiral
 */
static getSizePrefixedRootAsTransitionSpiral(bb: flatbuffers.ByteBuffer, obj?: TransitionSpiral): TransitionSpiral {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TransitionSpiral()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param TransitionSpiralDetail= obj
 * @returns TransitionSpiralDetail|null
 */
detail(obj?: TransitionSpiralDetail): TransitionSpiralDetail|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new TransitionSpiralDetail()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param number index
 * @returns number
 */
extraData(index: number): number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
};

/**
 * @returns number
 */
extraDataLength(): number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns Float64Array
 */
extraDataArray(): Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param DirectSpiralDetail= obj
 * @returns DirectSpiralDetail|null
 */
directDetail(obj?: DirectSpiralDetail): DirectSpiralDetail|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new DirectSpiralDetail()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startTransitionSpiral(builder: flatbuffers.Builder) {
  builder.startObject(3);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset detailOffset
 */
static addDetail(builder: flatbuffers.Builder, detailOffset: flatbuffers.Offset) {
  builder.addFieldStruct(0, detailOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset extraDataOffset
 */
static addExtraData(builder: flatbuffers.Builder, extraDataOffset: flatbuffers.Offset) {
  builder.addFieldOffset(1, extraDataOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createExtraDataVector(builder: flatbuffers.Builder, data: number[] | Uint8Array): flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startExtraDataVector(builder: flatbuffers.Builder, numElems: number) {
  builder.startVector(8, numElems, 8);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset directDetailOffset
 */
static addDirectDetail(builder: flatbuffers.Builder, directDetailOffset: flatbuffers.Offset) {
  builder.addFieldStruct(2, directDetailOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endTransitionSpiral(builder: flatbuffers.Builder): flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
};

static createTransitionSpiral(builder: flatbuffers.Builder, detailOffset: flatbuffers.Offset, extraDataOffset: flatbuffers.Offset, directDetailOffset: flatbuffers.Offset): flatbuffers.Offset {
  TransitionSpiral.startTransitionSpiral(builder);
  TransitionSpiral.addDetail(builder, detailOffset);
  TransitionSpiral.addExtraData(builder, extraDataOffset);
  TransitionSpiral.addDirectDetail(builder, directDetailOffset);
  return TransitionSpiral.endTransitionSpiral(builder);
}
}
/**
 * @constructor
 */
export class VariantGeometry {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos: number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns VariantGeometry
 */
__init(i: number, bb: flatbuffers.ByteBuffer): VariantGeometry {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param VariantGeometry= obj
 * @returns VariantGeometry
 */
static getRootAsVariantGeometry(bb: flatbuffers.ByteBuffer, obj?: VariantGeometry): VariantGeometry {
  return (obj || new VariantGeometry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param VariantGeometry= obj
 * @returns VariantGeometry
 */
static getSizePrefixedRootAsVariantGeometry(bb: flatbuffers.ByteBuffer, obj?: VariantGeometry): VariantGeometry {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new VariantGeometry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns VariantGeometryUnion
 */
geometryType(): VariantGeometryUnion {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : VariantGeometryUnion.tagNONE;
};

/**
 * @param flatbuffers.Table obj
 * @returns ?flatbuffers.Table
 */
geometry<T extends flatbuffers.Table>(obj: T): T|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
};

/**
 * @param CurvePrimitiveId= obj
 * @returns CurvePrimitiveId|null
 */
tag(obj?: CurvePrimitiveId): CurvePrimitiveId|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new CurvePrimitiveId()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startVariantGeometry(builder: flatbuffers.Builder) {
  builder.startObject(3);
};

/**
 * @param flatbuffers.Builder builder
 * @param VariantGeometryUnion geometryType
 */
static addGeometryType(builder: flatbuffers.Builder, geometryType: VariantGeometryUnion) {
  builder.addFieldInt8(0, geometryType, VariantGeometryUnion.tagNONE);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset geometryOffset
 */
static addGeometry(builder: flatbuffers.Builder, geometryOffset: flatbuffers.Offset) {
  builder.addFieldOffset(1, geometryOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset tagOffset
 */
static addTag(builder: flatbuffers.Builder, tagOffset: flatbuffers.Offset) {
  builder.addFieldOffset(2, tagOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endVariantGeometry(builder: flatbuffers.Builder): flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
};

static createVariantGeometry(builder: flatbuffers.Builder, geometryType: VariantGeometryUnion, geometryOffset: flatbuffers.Offset, tagOffset: flatbuffers.Offset): flatbuffers.Offset {
  VariantGeometry.startVariantGeometry(builder);
  VariantGeometry.addGeometryType(builder, geometryType);
  VariantGeometry.addGeometry(builder, geometryOffset);
  VariantGeometry.addTag(builder, tagOffset);
  return VariantGeometry.endVariantGeometry(builder);
}
}
}
