{
  "$schema": "https://dev.bentley.com/json_schemas/ec/32/ecschema",
  "alias": "ts",
  "items": {
    "AbstractDerivedAbstract": {
      "baseClass": "TestSchema.AbstractEntityClass",
      "description": "An abstract class derived from an abstract class",
      "modifier": "Abstract",
      "schemaItemType": "EntityClass"
    },
    "AbstractEntityClass": {
      "description": "Abstract class, cannot be instantiated",
      "modifier": "Abstract",
      "properties": [
        {
          "name": "AbstractClassProperty1",
          "type": "PrimitiveProperty",
          "typeName": "dateTime"
        },
        {
          "direction": "Backward",
          "name": "FromAbstractToNormalClass",
          "type": "NavigationProperty",
          "relationshipName": "TestSchema.NormalReferAbstractForward"
        }
      ],
      "schemaItemType": "EntityClass"
    },
    "BaseEntity": {
      "description": "Base Entity Description",
      "label": "Base Entity",
      "mixins": ["TestSchema.MixinClass"],
      "modifier": "Abstract",
      "properties": [
        {
          "name": "InheritedProperty",
          "type": "PrimitiveProperty",
          "typeName": "string"
        }
      ],
      "schemaItemType": "EntityClass"
    },
    "BaseEntityReferNormal": {
      "modifier": "Abstract",
      "schemaItemType": "RelationshipClass",
      "source": {
        "constraintClasses": ["TestSchema.BaseEntity"],
        "multiplicity": "(0..*)",
        "polymorphic": true,
        "roleLabel": "refers to"
      },
      "strength": "Referencing",
      "strengthDirection": "Forward",
      "target": {
        "constraintClasses": ["TestSchema.NormalEntityClass"],
        "multiplicity": "(0..1)",
        "polymorphic": true,
        "roleLabel": "is referred to by"
      }
    },
    "ClassCustomAttribute": {
      "appliesTo": "AnyClass",
      "description": "Custom Attribute that can only be applied to classes.",
      "properties": [
        {
          "name": "Primitive",
          "type": "PrimitiveProperty",
          "typeName": "string"
        }
      ],
      "schemaItemType": "CustomAttributeClass"
    },
    "CustomAnyClassAttribute": {
      "appliesTo": "AnyClass",
      "description": "Custom Attribute that can be applied to relationshipConstraint.",
      "schemaItemType": "CustomAttributeClass"
    },
    "CustomAnyPropertyAttribute": {
      "appliesTo": "AnyProperty",
      "description": "Custom Attribute that can be applied to any of the property types.",
      "schemaItemType": "CustomAttributeClass"
    },
    "CustomArrayPropertyAttribute": {
      "appliesTo": "ArrayProperty",
      "description": "Custom Attribute that can be applied to an ECArrayProperty.",
      "schemaItemType": "CustomAttributeClass"
    },
    "CustomCustomAttributeClassAttribute": {
      "appliesTo": "CustomAttributeClass",
      "description": "Custom Attribute that can be applied to an ECCustomAttributeClass.",
      "schemaItemType": "CustomAttributeClass"
    },
    "CustomEntityClassAttribute": {
      "appliesTo": "EntityClass",
      "description": "Custom Attribute that can be applied to an ECEntityClass.",
      "properties": [
        {
          "name": "EntityClassStringPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "string"
        },
        {
          "name": "EntityClassBinaryPrimitive",
          "type": "PrimitiveProperty",
          "isReadOnly": true,
          "typeName": "binary"
        },
        {
          "name": "EntityClassDateTimePrimitive",
          "type": "PrimitiveProperty",
          "isReadOnly": true,
          "typeName": "dateTime"
        },
        {
          "name": "EntityClassDoublePrimitive",
          "type": "PrimitiveProperty",
          "typeName": "double"
        },
        {
          "name": "EntityClassIGeometryPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "Bentley.Geometry.Common.IGeometry"
        },
        {
          "name": "EntityClassIntPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "int"
        },
        {
          "name": "EntityClassLongPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "long"
        },
        {
          "name": "EntityClassPoint2dPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "point2d"
        },
        {
          "name": "EntityClassPoint3dPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "point3d"
        },
        {
          "name": "EntityClassIntEnumerationPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "TestSchema.IntEnumeration"
        },
        {
          "name": "EntityClassStringEnumerationPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "TestSchema.StringEnumeration"
        },
        {
          "name": "CAStructProperty",
          "type": "StructProperty",
          "typeName": "TestSchema.DerivedStruct"
        },
        {
          "minOccurs": 0,
          "name": "CAPrimitiveArrayProperty",
          "type": "PrimitiveArrayProperty",
          "typeName": "string"
        },
        {
          "minOccurs": 0,
          "name": "CAStructArrayProperty",
          "type": "StructArrayProperty",
          "typeName": "TestSchema.Struct"
        }
      ],
      "schemaItemType": "CustomAttributeClass"
    },
    "CustomNavigationPropertyAttribute": {
      "appliesTo": "NavigationProperty",
      "description": "Custom Attribute that can be applied to an ECNavigationProperty.",
      "schemaItemType": "CustomAttributeClass"
    },
    "CustomPrimitivePropertyAttribute": {
      "appliesTo": "PrimitiveProperty",
      "description": "Custom Attribute that can be applied to an ECProperty.",
      "schemaItemType": "CustomAttributeClass"
    },
    "CustomRelationshipClassAttribute": {
      "appliesTo": "RelationshipClass",
      "description": "Custom Attribute that can be applied to an ECRelationshipClass.",
      "schemaItemType": "CustomAttributeClass"
    },
    "CustomRelationshipConstraintAttribute": {
      "appliesTo": "AnyRelationshipConstraint",
      "description": "Custom Attribute that can be applied to relationshipConstraint.",
      "schemaItemType": "CustomAttributeClass"
    },
    "CustomRelationshipConstraintAttributeSecond": {
      "appliesTo": "AnyRelationshipConstraint",
      "description": "Custom Attribute that can be applied to relationshipConstraint.",
      "schemaItemType": "CustomAttributeClass"
    },
    "CustomStructArrayPropertyAttribute": {
      "appliesTo": "StructArrayProperty",
      "description": "Custom Attribute that can be applied to an ECStructArrayProperty.",
      "schemaItemType": "CustomAttributeClass"
    },
    "CustomStructClassAttribute": {
      "appliesTo": "StructClass",
      "description": "Custom Attribute that can be applied to an ECStructClass.",
      "schemaItemType": "CustomAttributeClass"
    },
    "CustomStructPropertyAttribute": {
      "appliesTo": "StructProperty",
      "description": "Custom Attribute that can be applied to an ECStructProperty.",
      "schemaItemType": "CustomAttributeClass"
    },
    "DerivedAbstract": {
      "baseClass": "TestSchema.AbstractEntityClass",
      "description": "A class derived from an abstract class",
      "schemaItemType": "EntityClass"
    },
    "DerivedAbstractSecond": {
      "baseClass": "TestSchema.AbstractEntityClass",
      "description": "A class derived from an abstract class",
      "schemaItemType": "EntityClass"
    },
    "DerivedMixin": {
      "appliesTo": "TestSchema.Entity",
      "baseClass": "TestSchema.MixinClass",
      "description": "A Mixin class derived from a Mixin class",
      "properties": [
        {
          "name": "DerivedMixinStringPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "string"
        },
        {
          "name": "DerivedMixinBinaryPrimitive",
          "type": "PrimitiveProperty",
          "isReadOnly": true,
          "typeName": "binary"
        },
        {
          "name": "DerivedMixinDateTimePrimitive",
          "type": "PrimitiveProperty",
          "isReadOnly": true,
          "typeName": "dateTime"
        },
        {
          "name": "DerivedMixinDoublePrimitive",
          "type": "PrimitiveProperty",
          "typeName": "double"
        },
        {
          "name": "DerivedMixinIGeometryPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "Bentley.Geometry.Common.IGeometry"
        },
        {
          "name": "DerivedMixinIntPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "int"
        },
        {
          "name": "DerivedMixinLongPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "long"
        },
        {
          "name": "DerivedMixinPoint2dPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "point2d"
        },
        {
          "name": "DerivedMixinPoint3dPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "point3d"
        }
      ],
      "schemaItemType": "Mixin"
    },
    "DerivedNormal": {
      "baseClass": "TestSchema.NormalEntityClass",
      "description": "A class derived from a normal class",
      "properties": [
        {
          "name": "DerivedProperty1",
          "type": "PrimitiveProperty",
          "typeName": "string"
        }
      ],
      "schemaItemType": "EntityClass"
    },
    "DerivedNormalSecond": {
      "baseClass": "TestSchema.NormalEntityClass",
      "description": "A class derived from a normal class",
      "properties": [
        {
          "name": "DerivedProperty2",
          "type": "PrimitiveProperty",
          "typeName": "long"
        }
      ],
      "schemaItemType": "EntityClass"
    },
    "DerivedRelationshipClass": {
      "baseClass": "TestSchema.NormalReferMixinForward",
      "modifier": "Sealed",
      "schemaItemType": "RelationshipClass",
      "source": {
        "constraintClasses": ["TestSchema.DerivedNormal"],
        "multiplicity": "(1..1)",
        "polymorphic": true,
        "roleLabel": "references"
      },
      "strength": "Referencing",
      "strengthDirection": "Forward",
      "target": {
        "abstractConstraint": "TestSchema.MixinClass",
        "constraintClasses": ["TestSchema.DerivedMixin"],
        "multiplicity": "(0..1)",
        "polymorphic": false,
        "roleLabel": "is referenced by"
      }
    },
    "DerivedStruct": {
      "baseClass": "TestSchema.Struct",
      "label": "A Struct derived from a Struct",
      "schemaItemType": "StructClass"
    },
    "Entity": {
      "baseClass": "TestSchema.BaseEntity",
      "mixins": ["TestSchema.DerivedMixin"],
      "properties": [
        {
          "description": "A property override.",
          "name": "InheritedProperty",
          "type": "PrimitiveProperty",
          "typeName": "string"
        }
      ],
      "schemaItemType": "EntityClass"
    },
    "EntityEmbedNormalBackward": {
      "modifier": "Abstract",
      "schemaItemType": "RelationshipClass",
      "source": {
        "constraintClasses": ["TestSchema.Entity"],
        "multiplicity": "(0..1)",
        "polymorphic": true,
        "roleLabel": "is embedded by"
      },
      "strength": "Embedding",
      "strengthDirection": "Backward",
      "target": {
        "constraintClasses": ["TestSchema.NormalEntityClass"],
        "customAttributes": [
          {
            "className": "TestSchema.CustomRelationshipConstraintAttribute"
          },
          {
            "className": "TestSchema.CustomRelationshipConstraintAttributeSecond"
          }
        ],
        "multiplicity": "(1..*)",
        "polymorphic": true,
        "roleLabel": "embeds"
      }
    },
    "EntityReferDerivedNormal": {
      "baseClass": "TestSchema.BaseEntityReferNormal",
      "modifier": "Sealed",
      "schemaItemType": "RelationshipClass",
      "source": {
        "constraintClasses": ["TestSchema.Entity"],
        "multiplicity": "(0..*)",
        "polymorphic": true,
        "roleLabel": "refers to"
      },
      "strength": "Referencing",
      "strengthDirection": "Forward",
      "target": {
        "constraintClasses": ["TestSchema.DerivedNormal"],
        "multiplicity": "(0..1)",
        "polymorphic": true,
        "roleLabel": "is referred to by"
      }
    },
    "EntityReferEntity": {
      "modifier": "Sealed",
      "properties": [
        {
          "name": "RelationshipProperty",
          "type": "PrimitiveProperty",
          "typeName": "string"
        }
      ],
      "schemaItemType": "RelationshipClass",
      "source": {
        "constraintClasses": ["TestSchema.Entity"],
        "multiplicity": "(0..1)",
        "polymorphic": true,
        "roleLabel": "references"
      },
      "strength": "Referencing",
      "strengthDirection": "Forward",
      "target": {
        "constraintClasses": ["TestSchema.Entity"],
        "multiplicity": "(0..1)",
        "polymorphic": true,
        "roleLabel": "is referenced by"
      }
    },
    "GeneralCustomAttribute": {
      "appliesTo": "Any",
      "description": "Custom Attribute that can be applied to anything.",
      "schemaItemType": "CustomAttributeClass"
    },
    "IntEnumeration": {
      "type": "int",
      "description": "Int Enumeration",
      "enumerators": [
        {
          "name": "First",
          "value": 1
        },
        {
          "name": "Second",
          "value": 2
        },
        {
          "name": "Third",
          "value": 3
        }
      ],
      "isStrict": true,
      "label": "This is a display label.",
      "schemaItemType": "Enumeration"
    },
    "MixinClass": {
      "appliesTo": "TestSchema.BaseEntity",
      "description": "A Mixin is designed to avoid issues with multiple inheritance",
      "properties": [
        {
          "name": "MixinStringPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "string"
        },
        {
          "name": "MixinBinaryPrimitive",
          "type": "PrimitiveProperty",
          "isReadOnly": true,
          "typeName": "binary"
        },
        {
          "name": "MixinDateTimePrimitive",
          "type": "PrimitiveProperty",
          "isReadOnly": true,
          "typeName": "dateTime"
        },
        {
          "name": "MixinDoublePrimitive",
          "type": "PrimitiveProperty",
          "typeName": "double"
        },
        {
          "name": "MixinIGeometryPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "Bentley.Geometry.Common.IGeometry"
        },
        {
          "name": "MixinIntPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "int"
        },
        {
          "name": "MixinLongPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "long"
        },
        {
          "name": "MixinPoint2dPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "point2d"
        },
        {
          "name": "MixinPoint3dPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "point3d"
        },
        {
          "name": "MixinIntEnumerationPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "TestSchema.IntEnumeration"
        },
        {
          "name": "MixinStringEnumerationPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "TestSchema.StringEnumeration"
        }
      ],
      "schemaItemType": "Mixin"
    },
    "NormalEntityClass": {
      "customAttributes": [
        {
          "className": "TestSchema.CustomEntityClassAttribute"
        },
        {
          "className": "TestSchema.GeneralCustomAttribute"
        }
      ],
      "description": "Normal class with no modifier",
      "properties": [
        {
          "name": "Property1",
          "type": "PrimitiveProperty",
          "typeName": "int"
        }
      ],
      "schemaItemType": "EntityClass"
    },
    "NormalReferAbstractBackward": {
      "modifier": "Abstract",
      "schemaItemType": "RelationshipClass",
      "source": {
        "constraintClasses": ["TestSchema.NormalEntityClass"],
        "multiplicity": "(1..*)",
        "polymorphic": true,
        "roleLabel": "is referred to by"
      },
      "strength": "Referencing",
      "strengthDirection": "Backward",
      "target": {
        "abstractConstraint": "TestSchema.AbstractEntityClass",
        "constraintClasses": [
          "TestSchema.AbstractEntityClass",
          "TestSchema.AbstractDerivedAbstract",
          "TestSchema.DerivedAbstract",
          "TestSchema.DerivedAbstractSecond"
        ],
        "multiplicity": "(0..1)",
        "polymorphic": false,
        "roleLabel": "refers to"
      }
    },
    "NormalReferAbstractForward": {
      "customAttributes": [
        {
          "className": "TestSchema.GeneralCustomAttribute"
        },
        {
          "className": "TestSchema.CustomRelationshipClassAttribute"
        }
      ],
      "modifier": "Abstract",
      "schemaItemType": "RelationshipClass",
      "source": {
        "abstractConstraint": "TestSchema.NormalEntityClass",
        "constraintClasses": [
          "TestSchema.DerivedNormal",
          "TestSchema.NormalEntityClass",
          "TestSchema.SealedDerivedNormal"
        ],
        "multiplicity": "(1..1)",
        "polymorphic": true,
        "roleLabel": "refers to"
      },
      "strength": "Referencing",
      "strengthDirection": "Forward",
      "target": {
        "abstractConstraint": "TestSchema.AbstractEntityClass",
        "constraintClasses": ["TestSchema.AbstractEntityClass"],
        "multiplicity": "(0..*)",
        "polymorphic": false,
        "roleLabel": "is referred to by"
      }
    },
    "NormalReferMixinForward": {
      "modifier": "Abstract",
      "schemaItemType": "RelationshipClass",
      "source": {
        "constraintClasses": ["TestSchema.NormalEntityClass"],
        "multiplicity": "(0..*)",
        "polymorphic": true,
        "roleLabel": "references"
      },
      "strength": "Referencing",
      "strengthDirection": "Forward",
      "target": {
        "abstractConstraint": "TestSchema.MixinClass",
        "constraintClasses": ["TestSchema.DerivedMixin"],
        "multiplicity": "(0..1)",
        "polymorphic": true,
        "roleLabel": "is referenced by"
      }
    },
    "PropertyCollection": {
      "customAttributes": [
        {
          "Primitive": "General Value on Class",
          "className": "TestSchema.ClassCustomAttribute"
        },
        {
          "className": "TestSchema.CustomAnyClassAttribute"
        }
      ],
      "modifier": "Sealed",
      "properties": [
        {
          "label": "Property Display Label",
          "name": "PropCollectionBinaryPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "binary"
        },
        {
          "description": "Property Description",
          "name": "PropCollectionBooleanPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "boolean"
        },
        {
          "name": "PropCollectionDateTimePrimitive",
          "type": "PrimitiveProperty",
          "isReadOnly": true,
          "typeName": "dateTime"
        },
        {
          "maxValue": 9.6,
          "minValue": 2.3,
          "name": "PropCollectionDoublePrimitive",
          "type": "PrimitiveProperty",
          "typeName": "double"
        },
        {
          "name": "PropCollectionIGeometryPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "Bentley.Geometry.Common.IGeometry"
        },
        {
          "maxValue": 10000,
          "minValue": 0,
          "name": "PropCollectionIntPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "int"
        },
        {
          "name": "PropCollectionLongPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "long"
        },
        {
          "name": "PropCollectionPoint2dPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "point2d"
        },
        {
          "name": "PropCollectionPoint3dPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "point3d"
        },
        {
          "name": "PropCollectionStringPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "string"
        },
        {
          "name": "IntEnumerationPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "TestSchema.IntEnumeration"
        },
        {
          "name": "StringEnumerationPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "TestSchema.StringEnumeration"
        },
        {
          "customAttributes": [
            {
              "className": "TestSchema.CustomPrimitivePropertyAttribute"
            },
            {
              "className": "TestSchema.CustomAnyPropertyAttribute"
            },
            {
              "className": "TestSchema.GeneralCustomAttribute"
            }
          ],
          "name": "PropertyWithCustomAttribute",
          "type": "PrimitiveProperty",
          "typeName": "string"
        },
        {
          "minOccurs": 0,
          "name": "LongArray",
          "type": "PrimitiveArrayProperty",
          "typeName": "long"
        },
        {
          "minOccurs": 1,
          "name": "BinaryArray",
          "type": "PrimitiveArrayProperty",
          "typeName": "binary"
        },
        {
          "customAttributes": [
            {
              "className": "TestSchema.CustomArrayPropertyAttribute"
            },
            {
              "className": "TestSchema.CustomAnyPropertyAttribute"
            },
            {
              "className": "TestSchema.GeneralCustomAttribute"
            }
          ],
          "maxOccurs": 10,
          "minOccurs": 0,
          "name": "BooleanArray",
          "type": "PrimitiveArrayProperty",
          "isReadOnly": true,
          "typeName": "boolean"
        },
        {
          "maxOccurs": 10,
          "minOccurs": 1,
          "name": "DateTimeArray",
          "type": "PrimitiveArrayProperty",
          "isReadOnly": true,
          "typeName": "dateTime"
        },
        {
          "maxOccurs": 5,
          "minOccurs": 5,
          "name": "DoubleArray",
          "type": "PrimitiveArrayProperty",
          "typeName": "double"
        },
        {
          "maxOccurs": 100,
          "minOccurs": 2,
          "name": "IGeometryArray",
          "type": "PrimitiveArrayProperty",
          "typeName": "Bentley.Geometry.Common.IGeometry"
        },
        {
          "minOccurs": 0,
          "name": "IntArray",
          "type": "PrimitiveArrayProperty",
          "isReadOnly": true,
          "typeName": "int"
        },
        {
          "maxOccurs": 3,
          "minOccurs": 3,
          "name": "Point2dArray",
          "type": "PrimitiveArrayProperty",
          "typeName": "point2d"
        },
        {
          "minOccurs": 0,
          "name": "Point3dArray",
          "type": "PrimitiveArrayProperty",
          "isReadOnly": true,
          "typeName": "point3d"
        },
        {
          "maxOccurs": 15,
          "minOccurs": 1,
          "name": "StringArray",
          "type": "PrimitiveArrayProperty",
          "isReadOnly": true,
          "typeName": "string"
        },
        {
          "customAttributes": [
            {
              "className": "TestSchema.CustomStructPropertyAttribute"
            },
            {
              "className": "TestSchema.CustomAnyPropertyAttribute"
            },
            {
              "className": "TestSchema.GeneralCustomAttribute"
            }
          ],
          "name": "Struct1",
          "type": "StructProperty",
          "typeName": "TestSchema.Struct"
        },
        {
          "customAttributes": [
            {
              "className": "TestSchema.CustomStructArrayPropertyAttribute"
            },
            {
              "className": "TestSchema.CustomAnyPropertyAttribute"
            },
            {
              "className": "TestSchema.GeneralCustomAttribute"
            }
          ],
          "minOccurs": 0,
          "name": "StructArray",
          "type": "StructArrayProperty",
          "typeName": "TestSchema.Struct"
        },
        {
          "maxOccurs": 100,
          "minOccurs": 1,
          "name": "StructArraySecond",
          "type": "StructArrayProperty",
          "typeName": "TestSchema.Struct"
        },
        {
          "maxOccurs": 4,
          "minOccurs": 4,
          "name": "StructArrayThird",
          "type": "StructArrayProperty",
          "typeName": "TestSchema.Struct"
        }
      ],
      "schemaItemType": "EntityClass"
    },
    "SchemaCustomAttribute": {
      "appliesTo": "Schema",
      "description": "Custom Attribute that can be applied to a schema.",
      "schemaItemType": "CustomAttributeClass"
    },
    "SealedDerivedAbstract": {
      "baseClass": "TestSchema.AbstractEntityClass",
      "description": "A sealed class derived from an abstract class",
      "modifier": "Sealed",
      "schemaItemType": "EntityClass"
    },
    "SealedDerivedNormal": {
      "baseClass": "TestSchema.NormalEntityClass",
      "description": "A sealed class derived from a normal class",
      "modifier": "Sealed",
      "schemaItemType": "EntityClass"
    },
    "SealedEntityClass": {
      "description": "Instantiable, but cannot be used as base class",
      "modifier": "Sealed",
      "properties": [
        {
          "name": "SealedClassProperty1",
          "type": "PrimitiveProperty",
          "typeName": "boolean"
        }
      ],
      "schemaItemType": "EntityClass"
    },
    "SealedHoldNormalBackward": {
      "modifier": "Abstract",
      "schemaItemType": "RelationshipClass",
      "source": {
        "constraintClasses": ["TestSchema.SealedEntityClass"],
        "multiplicity": "(0..1)",
        "polymorphic": false,
        "roleLabel": "is held by"
      },
      "strength": "Holding",
      "strengthDirection": "Backward",
      "target": {
        "constraintClasses": ["TestSchema.NormalEntityClass"],
        "customAttributes": [
          {
            "className": "TestSchema.CustomRelationshipConstraintAttribute"
          },
          {
            "className": "TestSchema.CustomRelationshipConstraintAttributeSecond"
          }
        ],
        "multiplicity": "(0..1)",
        "polymorphic": true,
        "roleLabel": "holds"
      }
    },
    "SealedHoldNormalForward": {
      "modifier": "Sealed",
      "schemaItemType": "RelationshipClass",
      "source": {
        "constraintClasses": ["TestSchema.SealedEntityClass"],
        "multiplicity": "(1..1)",
        "polymorphic": true,
        "roleLabel": "holds"
      },
      "strength": "Holding",
      "strengthDirection": "Forward",
      "target": {
        "abstractConstraint": "TestSchema.NormalEntityClass",
        "constraintClasses": [
          "TestSchema.NormalEntityClass",
          "TestSchema.DerivedNormal",
          "TestSchema.SealedDerivedNormal"
        ],
        "customAttributes": [
          {
            "className": "TestSchema.CustomRelationshipConstraintAttribute"
          },
          {
            "className": "TestSchema.CustomRelationshipConstraintAttributeSecond"
          }
        ],
        "multiplicity": "(0..*)",
        "polymorphic": true,
        "roleLabel": "is held by"
      }
    },
    "StringEnumeration": {
      "type": "string",
      "description": "String Enumeration",
      "enumerators": [
        {
          "name": "FirstSeason",
          "value": "spring"
        },
        {
          "name": "SecondSeason",
          "value": "summer"
        },
        {
          "name": "ThirdSeason",
          "value": "fall"
        },
        {
          "name": "FourthSeason",
          "value": "winter"
        }
      ],
      "isStrict": true,
      "schemaItemType": "Enumeration"
    },
    "Struct": {
      "customAttributes": [
        {
          "className": "TestSchema.GeneralCustomAttribute"
        },
        {
          "className": "TestSchema.CustomStructClassAttribute"
        },
        {
          "className": "TestSchema.CustomAnyClassAttribute"
        }
      ],
      "label": "Struct Class",
      "properties": [
        {
          "name": "StructStringPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "string"
        },
        {
          "name": "StructBinaryPrimitive",
          "type": "PrimitiveProperty",
          "isReadOnly": true,
          "typeName": "binary"
        },
        {
          "name": "StructDateTimePrimitive",
          "type": "PrimitiveProperty",
          "isReadOnly": true,
          "typeName": "dateTime"
        },
        {
          "name": "StructDoublePrimitive",
          "type": "PrimitiveProperty",
          "typeName": "double"
        },
        {
          "name": "StructIGeometryPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "Bentley.Geometry.Common.IGeometry"
        },
        {
          "name": "StructIntPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "int"
        },
        {
          "name": "StructLongPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "long"
        },
        {
          "name": "StructPoint2dPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "point2d"
        },
        {
          "name": "StructPoint3dPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "point3d"
        },
        {
          "name": "StructIntEnumerationPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "TestSchema.IntEnumeration"
        },
        {
          "name": "StructStringEnumerationPrimitive",
          "type": "PrimitiveProperty",
          "typeName": "TestSchema.StringEnumeration"
        }
      ],
      "schemaItemType": "StructClass"
    },
    "UsingCustomAttributeClass": {
      "appliesTo": "Any",
      "customAttributes": [
        {
          "className": "TestSchema.GeneralCustomAttribute"
        },
        {
          "className": "TestSchema.CustomCustomAttributeClassAttribute"
        },
        {
          "className": "TestSchema.CustomAnyClassAttribute"
        }
      ],
      "description": "Custom Attribute class that use an ECCustomAttributeClass",
      "schemaItemType": "CustomAttributeClass"
    }
  },
  "customAttributes": [
    {
      "className": "TestSchema.GeneralCustomAttribute"
    },
    {
      "className": "TestSchema.SchemaCustomAttribute"
    }
  ],
  "description": "Comprehensive Schema to demonstrate use of all ECSchema concepts.",
  "label": "Comprehensive Schema",
  "name": "TestSchema",
  "references": [
    {
      "name": "CoreCustomAttributes",
      "version": "01.00.04"
    }
  ],
  "version": "01.00.00"
}
