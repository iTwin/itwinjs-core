{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/ipc/IpcWebSocket.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module IpcSocket\n */\n/** @internal */\nexport var IpcWebSocketMessageType;\n(function (IpcWebSocketMessageType) {\n    IpcWebSocketMessageType[IpcWebSocketMessageType[\"Send\"] = 0] = \"Send\";\n    IpcWebSocketMessageType[IpcWebSocketMessageType[\"Push\"] = 1] = \"Push\";\n    IpcWebSocketMessageType[IpcWebSocketMessageType[\"Invoke\"] = 2] = \"Invoke\";\n    IpcWebSocketMessageType[IpcWebSocketMessageType[\"Response\"] = 3] = \"Response\";\n    IpcWebSocketMessageType[IpcWebSocketMessageType[\"Internal\"] = 4] = \"Internal\";\n    IpcWebSocketMessageType[IpcWebSocketMessageType[\"Duplicate\"] = 5] = \"Duplicate\";\n})(IpcWebSocketMessageType || (IpcWebSocketMessageType = {}));\n/** @internal */\nexport var IpcWebSocketMessage;\n(function (IpcWebSocketMessage) {\n    function internal() {\n        return { type: IpcWebSocketMessageType.Internal, channel: \"\", sequence: Number.MIN_SAFE_INTEGER };\n    }\n    IpcWebSocketMessage.internal = internal;\n    function duplicate() {\n        return { type: IpcWebSocketMessageType.Duplicate, channel: \"\", sequence: Number.MIN_SAFE_INTEGER };\n    }\n    IpcWebSocketMessage.duplicate = duplicate;\n    function skip(message) {\n        return message.type === IpcWebSocketMessageType.Internal || message.type === IpcWebSocketMessageType.Duplicate;\n    }\n    IpcWebSocketMessage.skip = skip;\n})(IpcWebSocketMessage || (IpcWebSocketMessage = {}));\n/** @internal */\nclass IpcWebSocket {\n    constructor() {\n        this._channels = new Map();\n        IpcWebSocket.receivers.add(async (e, m) => this.broadcast(e, m));\n    }\n    addListener(channel, listener) {\n        let listeners = this._channels.get(channel);\n        if (!listeners) {\n            listeners = new Set();\n            this._channels.set(channel, listeners);\n        }\n        if (!listeners.has(listener))\n            listeners.add(listener);\n        return () => listeners.delete(listener);\n    }\n    removeListener(channel, listener) {\n        this._channels.get(channel)?.delete(listener);\n    }\n    async broadcast(evt, message) {\n        if (message.type !== IpcWebSocketMessageType.Send && message.type !== IpcWebSocketMessageType.Push)\n            return;\n        const handlers = this._channels.get(message.channel);\n        if (!handlers)\n            return;\n        let arg = message.data;\n        if (typeof (arg) === \"undefined\")\n            arg = [];\n        for (const handler of handlers)\n            handler(evt, ...arg);\n    }\n}\nIpcWebSocket.receivers = new Set();\nexport { IpcWebSocket };\n/** @internal */\nexport class IpcWebSocketFrontend extends IpcWebSocket {\n    constructor() {\n        super();\n        this._nextRequest = 0;\n        this._pendingRequests = new Map();\n        IpcWebSocket.receivers.add(async (e, m) => this.dispatch(e, m));\n    }\n    send(channel, ...data) {\n        IpcWebSocket.transport.send({ type: IpcWebSocketMessageType.Send, channel, data, sequence: -1 });\n    }\n    async invoke(channel, methodName, ...args) {\n        const requestId = ++this._nextRequest;\n        IpcWebSocket.transport.send({ type: IpcWebSocketMessageType.Invoke, channel, method: methodName, data: args, request: requestId, sequence: -1 });\n        return new Promise((resolve) => {\n            this._pendingRequests.set(requestId, resolve);\n        });\n    }\n    async dispatch(_evt, message) {\n        if (message.type !== IpcWebSocketMessageType.Response || !message.response)\n            return;\n        const pendingHandler = this._pendingRequests.get(message.response);\n        if (!pendingHandler)\n            return;\n        this._pendingRequests.delete(message.response);\n        pendingHandler(message.data);\n    }\n}\n/** @internal */\nexport class IpcWebSocketBackend extends IpcWebSocket {\n    constructor() {\n        super();\n        this._handlers = new Map();\n        this._processingQueue = [];\n        IpcWebSocket.receivers.add(async (e, m) => this.dispatch(e, m));\n    }\n    send(channel, ...data) {\n        IpcWebSocket.transport.send({ type: IpcWebSocketMessageType.Push, channel, data, sequence: -1 });\n    }\n    handle(channel, handler) {\n        this._handlers.set(channel, handler);\n        return () => {\n            if (this._handlers.get(channel) === handler)\n                this._handlers.delete(channel);\n        };\n    }\n    async dispatch(_evt, message) {\n        if (message.type !== IpcWebSocketMessageType.Invoke)\n            return;\n        this._processingQueue.push(message);\n        await this.processMessages();\n    }\n    async processMessages() {\n        if (!this._processingQueue.length) {\n            return;\n        }\n        const message = this._processingQueue.shift();\n        if (message && message.method) {\n            const handler = this._handlers.get(message.channel);\n            if (handler) {\n                let args = message.data;\n                if (typeof (args) === \"undefined\")\n                    args = [];\n                const response = await handler({}, message.method, ...args);\n                IpcWebSocket.transport.send({\n                    type: IpcWebSocketMessageType.Response,\n                    channel: message.channel,\n                    response: message.request,\n                    data: response,\n                    sequence: -1,\n                });\n            }\n        }\n        await this.processMessages();\n    }\n}\n//# sourceMappingURL=IpcWebSocket.js.map",
      "start": 1693508120883,
      "end": 1693508120933,
      "sourcemaps": null
    }
  ]
}
