{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/Sprites.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Views\n */\nimport { Logger } from \"@itwin/core-bentley\";\nimport { Point2d, Point3d } from \"@itwin/core-geometry\";\nimport { FrontendLoggerCategory } from \"./common/FrontendLoggerCategory\";\nimport { imageElementFromImageSource, imageElementFromUrl } from \"./common/ImageUtil\";\n/** Sprites are small raster images that are drawn *on top* of Viewports by a ViewDecoration.\n * Their purpose is to draw the user's attention to something of importance.\n *\n * There are two classes in the Sprites subsystem: Sprite (a Sprite image) and SpriteLocation.\n * Sprite are the images that define the way a type of sprite looks and are generally\n * loaded one time and saved for the rest of a session. A SpriteLocation defines the current\n * position of a single Sprite in a Viewport.\n *\n * A SpriteLocation can be either active or inactive. It becomes active by specifying a location\n * (an x,y point) and a Sprite to draw at that point. A Sprite\n * can be used many times by many SpriteLocations and a single SpriteLocation can\n * change both position and which Sprite is shown at that position over time.\n * @public\n * @extensions\n */\nexport class Sprite {\n    /** The offset to the middle of this Sprite. If not loaded, value is not meaningful. */\n    get offset() { return new Point2d(Math.round(this.size.x) / 2, Math.round(this.size.y / 2)); }\n    /** Whether this sprite has be successfully loaded. */\n    get isLoaded() { return undefined !== this.image; }\n    /** construct a Sprite from an ImageSource or a Url\n     * @param src The ImageSource holding an image to create the texture for this Sprite, or the url of the image\n     */\n    constructor(src) {\n        /** The size of this Sprite. If not loaded, value is not meaningful. */\n        this.size = new Point2d();\n        this.loadPromise = (typeof src === \"string\") ? imageElementFromUrl(src) : imageElementFromImageSource(src);\n        this.loadPromise.then((image) => {\n            this.image = image;\n            this.size.set(image.naturalWidth, image.naturalHeight);\n        }).catch((err) => {\n            const str = err.toString();\n            console.log(str); // eslint-disable-line no-console\n            Logger.logError(`${FrontendLoggerCategory.Package}.sprites`, str);\n        });\n    }\n}\n/** Icon sprites are loaded from .png files in the assets directory of imodeljs-native.\n * They are cached by name, and the cache is cleared when the ToolAdmin is shut down.\n * @public\n * @extensions\n */\nclass IconSprites {\n    /** Look up an IconSprite by url. If not loaded, create and load it.\n     * @param spriteUrl The url of an image to load for this Sprite.\n     */\n    static getSpriteFromUrl(spriteUrl) {\n        let sprite = this._sprites.get(spriteUrl);\n        if (!sprite) {\n            sprite = new Sprite(spriteUrl);\n            this._sprites.set(spriteUrl, sprite);\n        }\n        return sprite;\n    }\n    /** Empty the cache, disposing all existing Sprites. */\n    static emptyAll() { this._sprites.clear(); }\n}\nIconSprites._sprites = new Map();\nexport { IconSprites };\n/** A Sprite location. Sprites generally move around on the screen and this object holds the current location\n * and current Sprite within a ScreenViewport. SpriteLocations can be either inactive (not visible) or active.\n *\n * A SpriteLocation can also specify that a Sprite should be drawn partially transparent.\n * @public\n * @extensions\n */\nexport class SpriteLocation {\n    constructor() {\n        /** The current position of this sprite in view coordinates.\n         * @see [[CanvasDecoration.position]]\n         */\n        this.position = new Point3d();\n    }\n    get isActive() { return this._viewport !== undefined; }\n    /** Activate this SpriteLocation to show a Sprite at a location in a single ScreenViewport.\n     * This call does not display the Sprite. Rather, subsequent calls to [[decorate]] from  will show the Sprite.\n     * This SpriteLocation remains active until [[deactivate]] is called.\n     * @param sprite The Sprite to draw at this SpriteLocation\n     * @param viewport The Viewport onto which the Sprite is drawn\n     * @param locationWorld The position, in world coordinates\n     * @param alpha Optional alpha for the Sprite. Must be a number between 0 (fully transparent) and 1 (fully opaque).\n     */\n    activate(sprite, viewport, locationWorld, alpha) {\n        this._sprite = sprite;\n        this._alpha = alpha;\n        this._viewport = viewport;\n        viewport.worldToView(locationWorld, this.position);\n        sprite.loadPromise.then(() => {\n            if (this._viewport === viewport) // was this deactivated while we were loading?\n                viewport.invalidateDecorations();\n        }).catch(() => this._viewport = undefined); // sprite was not loaded properly\n    }\n    /** Turn this SpriteLocation off so it will no longer show. */\n    deactivate() {\n        if (!this.isActive)\n            return;\n        this._viewport.invalidateDecorations();\n        this._viewport = undefined;\n    }\n    /** Draw this sprite onto the supplied canvas.\n     * @see [[CanvasDecoration.drawDecoration]]\n     */\n    drawDecoration(ctx) {\n        const sprite = this._sprite;\n        if (undefined === sprite.image)\n            return;\n        if (undefined !== this._alpha)\n            ctx.globalAlpha = this._alpha;\n        ctx.drawImage(sprite.image, -sprite.offset.x, -sprite.offset.y);\n    }\n    /** If this SpriteLocation is active and the supplied DecorateContext is for its Viewport, add the Sprite to decorations. */\n    decorate(context) {\n        if (context.viewport === this._viewport)\n            context.addCanvasDecoration(this);\n    }\n}\n//# sourceMappingURL=Sprites.js.map",
      "start": 1693508119473,
      "end": 1693508119641,
      "sourcemaps": null
    }
  ]
}
