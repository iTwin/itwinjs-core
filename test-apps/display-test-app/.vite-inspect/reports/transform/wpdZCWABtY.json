{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/ClassificationsPanel.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { assert, compareStringsOrUndefined, GuidString } from \"@itwin/core-bentley\";\r\nimport { ComboBox, ComboBoxEntry, createCheckBox, createComboBox, createNestedMenu, createNumericInput, NestedMenu } from \"@itwin/frontend-devtools\";\r\nimport {\r\n  CartographicRange, ContextRealityModelProps, ModelProps, RealityDataFormat, RealityDataProvider, RealityDataSourceKey, SpatialClassifier, SpatialClassifierFlagsProps, SpatialClassifierInsideDisplay,\r\n  SpatialClassifierOutsideDisplay, SpatialClassifiers,\r\n} from \"@itwin/core-common\";\r\nimport {\r\n  ContextRealityModelState, DisplayStyle3dState, IModelApp, SpatialModelState, SpatialViewState, Viewport,\r\n} from \"@itwin/core-frontend\";\r\nimport { DisplayTestApp } from \"./App\";\r\nimport { ToolBarDropDown } from \"./ToolBar\";\r\nimport { ITwinRealityData, RealityDataAccessClient, RealityDataClientOptions, RealityDataQueryCriteria, RealityDataResponse } from \"@itwin/reality-data-client\";\r\n\r\nfunction clearElement(element: HTMLElement): void {\r\n  while (element.hasChildNodes())\r\n    element.removeChild(element.firstChild!);\r\n}\r\n\r\nconst NO_MODEL_ID = \"-1\";\r\n\r\nenum RealityDataType {\r\n  REALITYMESH3DTILES  = \"REALITYMESH3DTILES\",\r\n  OSMBUILDINGS = \"OSMBUILDINGS\",\r\n  OPC = \"OPC\",\r\n  TERRAIN3DTILES = \"TERRAIN3DTILES\", // Terrain3DTiles\r\n  OMR = \"OMR\", // Mapping Resource, this type is supported from Context Share but can only be displayed by Orbit Photo Navigation (not publicly available)\r\n  CESIUM3DTILES = \"CESIUM3DTILES\",\r\n  UNKNOWN = \"UNKNOWN\",\r\n}\r\n\r\nexport class ClassificationsPanel extends ToolBarDropDown {\r\n  private readonly _vp: Viewport;\r\n  private readonly _element: HTMLElement;\r\n  private readonly _realityModelListDiv: HTMLDivElement;\r\n  private readonly _modelListDiv: HTMLDivElement;\r\n  private readonly _propertiesDiv: HTMLDivElement;\r\n  private readonly _realityModelPickerMenu: NestedMenu;\r\n  private _selectedSpatialClassifiers: SpatialClassifiers | undefined;\r\n  private _selectedSpatialClassifiersIndex: number = 0;\r\n  private _modelComboBox?: ComboBox;\r\n  private _models: { [modelId: string]: ModelProps } = {};\r\n  // for IMJS_ITWIN_ID to work it should be define in your environment and you should be in signin mode with correct BUDDI region set\r\n  //  IMJS_STANDALONE_SIGNIN=true\r\n  //  IMJS_ITWIN_ID=\"fb1696c8-c074-4c76-a539-a5546e048cc6\"\r\n  private _iTwinId: GuidString | undefined = DisplayTestApp.iTwinId;\r\n\r\n  private get _selectedClassifier(): SpatialClassifier | undefined {\r\n    if (undefined === this._selectedSpatialClassifiers)\r\n      return undefined;\r\n    const classifiers = this._selectedSpatialClassifiers;\r\n    if (undefined !== classifiers.active)\r\n      return classifiers.active;\r\n    return undefined;\r\n  }\r\n\r\n  private setAsActiveClassifier(modelProps: ModelProps | undefined): void {\r\n    if (undefined === this._selectedSpatialClassifiers)\r\n      return;\r\n\r\n    let classifier: SpatialClassifier | undefined;\r\n    if (undefined !== modelProps) {\r\n      // Find existing classifier, or create if one doesn't exist for modelId.\r\n      const modelId = modelProps.id!;\r\n      classifier = this._selectedSpatialClassifiers.find((x) => x.modelId === modelId);\r\n      if (!classifier)\r\n        classifier = this._selectedSpatialClassifiers.add(new SpatialClassifier(modelId, modelProps.name!));\r\n    }\r\n\r\n    this._selectedSpatialClassifiers.setActive(classifier);\r\n    this.populateClassifierProperties();\r\n  }\r\n\r\n  constructor(vp: Viewport, parent: HTMLElement) {\r\n    super();\r\n    this._vp = vp;\r\n\r\n    this._element = IModelApp.makeHTMLElement(\"div\", { parent, className: \"toolMenu\" });\r\n    this._realityModelListDiv = IModelApp.makeHTMLElement(\"div\", { parent: this._element });\r\n    this._modelListDiv = IModelApp.makeHTMLElement(\"div\", { parent: this._element });\r\n    this._propertiesDiv = IModelApp.makeHTMLElement(\"div\", { parent: this._element });\r\n    this._realityModelPickerMenu = createNestedMenu({\r\n      label: \"Reality Model Picker\",\r\n    });\r\n\r\n    this._element.style.display = \"block\";\r\n    this._element.style.cssFloat = \"left\";\r\n    this._element.style.width = \"max-content\";\r\n    this._element.style.minWidth = \"350px\";\r\n\r\n    this._element.appendChild(this._realityModelPickerMenu.div);\r\n  }\r\n\r\n  private createRealityDataSourceKeyFromITwinRealityData(iTwinRealityData: ITwinRealityData): RealityDataSourceKey {\r\n    return {\r\n      provider: RealityDataProvider.ContextShare,\r\n      format: iTwinRealityData.type === \"OPC\" ? RealityDataFormat.OPC : RealityDataFormat.ThreeDTile,\r\n      id: iTwinRealityData.id,\r\n    };\r\n  }\r\n\r\n  private hasAttachedRealityModelFromKey(style: DisplayStyle3dState, rdSourceKey: RealityDataSourceKey ): boolean {\r\n    return undefined !== style.settings.contextRealityModels.models.find((x) => x.rdSourceKey && RealityDataSourceKey.isEqual(rdSourceKey,x.rdSourceKey));\r\n  }\r\n\r\n  private isSupportedType(type: string | undefined): boolean {\r\n    if (type === undefined)\r\n      return false;\r\n\r\n    switch (type.toUpperCase()) {\r\n      case RealityDataType.REALITYMESH3DTILES:\r\n        return true;\r\n      case RealityDataType.CESIUM3DTILES:\r\n        return true;\r\n      case RealityDataType.OPC:\r\n        return true;\r\n      case RealityDataType.OSMBUILDINGS:\r\n        return true;\r\n      case RealityDataType.TERRAIN3DTILES:\r\n        return true;\r\n      case RealityDataType.OMR:\r\n        return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private isSupportedDisplayType(type: string | undefined): boolean {\r\n    if (type === undefined)\r\n      return false;\r\n    if (this.isSupportedType(type)) {\r\n      switch (type.toUpperCase()) {\r\n        case RealityDataType.OMR:\r\n          return false; // this type is supported from Context Share but can only be displayed by Orbit Photo Navigation (not publicly available)\r\n        default:\r\n          return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private async populateRealityModelsPicker(): Promise<void> {\r\n    this._realityModelPickerMenu.div.style.display = \"none\";\r\n    clearElement(this._realityModelPickerMenu.body);\r\n\r\n    const view = this._vp.view;\r\n    const ecef = this._vp.iModel.ecefLocation;\r\n    if (!view.isSpatialView() || undefined === ecef) {\r\n      return;\r\n    }\r\n\r\n    const range = new CartographicRange(this._vp.iModel.projectExtents, ecef.getTransform());\r\n    let available: RealityDataResponse = {realityDatas: []};\r\n    try {\r\n      if (this._iTwinId !== undefined && IModelApp.authorizationClient) {\r\n        const accessToken = await IModelApp.authorizationClient.getAccessToken();\r\n        if (accessToken) {\r\n          const criteria: RealityDataQueryCriteria = {\r\n            extent: range,\r\n          };\r\n          const realityDataClientOptions: RealityDataClientOptions = {\r\n            /** API Version. v1 by default */\r\n            // version?: ApiVersion;\r\n            /** API Url. Used to select environment. Defaults to \"https://api.bentley.com/realitydata\" */\r\n            baseUrl: `https://${process.env.IMJS_URL_PREFIX}api.bentley.com/realitydata`,\r\n          };\r\n          available = await new RealityDataAccessClient(realityDataClientOptions).getRealityDatas(accessToken, this._iTwinId, criteria);\r\n        }\r\n      }\r\n    } catch (_error) {\r\n      // eslint-disable-next-line no-console\r\n      console.error(\"Error in query RealitydataList, you need to set IMJS_STANDALONE_SIGNIN=true, and is your IMJS_ITWIN_ID correctly set?\");\r\n    }\r\n\r\n    for (const rdEntry of available.realityDatas) {\r\n      const name = undefined !== rdEntry.displayName ? rdEntry.displayName : rdEntry.id;\r\n      const rdSourceKey = this.createRealityDataSourceKeyFromITwinRealityData(rdEntry);\r\n      const tilesetUrl = await IModelApp.realityDataAccess?.getRealityDataUrl(this._iTwinId,rdSourceKey.id);\r\n      const isDisplaySupported = this.isSupportedDisplayType(rdEntry.type);\r\n      if (tilesetUrl && isDisplaySupported) {\r\n        const entry: ContextRealityModelProps = {\r\n          rdSourceKey,\r\n          tilesetUrl,\r\n          name,\r\n          description: rdEntry?.description,\r\n          realityDataId: rdSourceKey.id,\r\n        };\r\n\r\n        createCheckBox({\r\n          name,\r\n          id: RealityDataSourceKey.convertToString(rdSourceKey),\r\n          parent: this._realityModelPickerMenu.body,\r\n          isChecked: this.hasAttachedRealityModelFromKey(view.displayStyle, rdSourceKey),\r\n          handler: (checkbox) => this.toggle(entry, checkbox.checked),\r\n        });\r\n      }\r\n    }\r\n    IModelApp.makeHTMLElement(\"hr\", { parent: this._realityModelPickerMenu.body });\r\n    if (available.realityDatas.length > 0)\r\n      this._realityModelPickerMenu.div.style.display = \"block\";\r\n  }\r\n\r\n  private populateRealityModelList(): void {\r\n    // assemble list of Spatial Classifiers for context reality models (should usually be at most one)\r\n    const realityModels: Array<{ spatialClassifiers: SpatialClassifiers, modelName: string }> = [];\r\n    (this._vp.view.displayStyle as DisplayStyle3dState).forEachRealityModel((contextModel: ContextRealityModelState) => {\r\n      const classifiers = contextModel.classifiers;\r\n      if (undefined !== classifiers)\r\n        realityModels.push({ spatialClassifiers: classifiers, modelName: contextModel.name });\r\n    });\r\n\r\n    // include any attached reality models (may be any number; must be loaded already)\r\n    for (const loaded of this._vp.iModel.models)\r\n      if (loaded instanceof SpatialModelState && undefined !== loaded.classifiers)\r\n        realityModels.push({ spatialClassifiers: loaded.classifiers, modelName: `${loaded.name} (attached)` });\r\n\r\n    // create list of entries for Classifier in the spatial Classifiers\r\n    const entries = realityModels.map((spatialClassifier, i) => {\r\n      return ({ name: spatialClassifier.modelName, value: i } as ComboBoxEntry);\r\n    });\r\n\r\n    clearElement(this._realityModelListDiv);\r\n    const activeIndex = this._selectedSpatialClassifiersIndex;\r\n    createComboBox({\r\n      parent: this._realityModelListDiv,\r\n      id: \"ClassifierSelectionBox\",\r\n      name: \"Reality Models: \",\r\n      value: activeIndex,\r\n      handler: (select) => {\r\n        const valueIndex = Number.parseInt(select.value, 10);\r\n        this._selectedSpatialClassifiersIndex = valueIndex;\r\n        const spatialClassifier = valueIndex >= 0 ? realityModels[valueIndex].spatialClassifiers : undefined;\r\n        this.setSelectedClassification(spatialClassifier);\r\n      },\r\n      entries,\r\n    });\r\n\r\n    if (undefined !== realityModels[activeIndex])\r\n      this.setSelectedClassification(realityModels[activeIndex].spatialClassifiers);\r\n    else\r\n      this.setSelectedClassification(undefined);\r\n  }\r\n\r\n  private async populateModelList(): Promise<void> {\r\n    const view = this._vp.view as SpatialViewState;\r\n    assert(undefined !== view && view.isSpatialView());\r\n\r\n    const query = { from: SpatialModelState.classFullName, wantPrivate: false };\r\n    const props = await view.iModel.models.queryProps(query);\r\n    props.sort((lhs, rhs) => compareStringsOrUndefined(lhs.name, rhs.name));\r\n\r\n    const entries: ComboBoxEntry[] = [{ name: \"None\", value: NO_MODEL_ID }];\r\n    this._models = {};\r\n    props.forEach((prop) => {\r\n      if (undefined !== prop.id && undefined !== prop.name) {\r\n        entries.push({ name: prop.name, value: prop.id });\r\n        this._models[prop.id] = prop;\r\n      }\r\n    });\r\n\r\n    clearElement(this._modelListDiv);\r\n\r\n    this._modelComboBox = createComboBox({\r\n      entries,\r\n      parent: this._modelListDiv,\r\n      id: \"classifiers_modelBox\",\r\n      name: \"Active Classifier: \",\r\n      value: undefined !== this._selectedClassifier ? this._selectedClassifier.modelId : undefined,\r\n      handler: (select) => {\r\n        this.setAsActiveClassifier(this._models[select.value]);\r\n        this.populateRealityModelList();\r\n        this._vp.invalidateScene();\r\n      },\r\n    });\r\n  }\r\n\r\n  public async populate(): Promise<void> {\r\n    this._selectedSpatialClassifiers = undefined;\r\n    if (this._vp.view.is2d())\r\n      return;\r\n\r\n    this._realityModelPickerMenu.div.style.display = \"none\";\r\n    this.populateRealityModelList();\r\n    await this.populateRealityModelsPicker();\r\n    await this.populateModelList();\r\n  }\r\n\r\n  public get isOpen(): boolean { return \"none\" !== this._element.style.display; }\r\n  protected _open(): void {\r\n    this.populateRealityModelList();\r\n    this._element.style.display = \"block\";\r\n  }\r\n  protected _close(): void { this._element.style.display = \"none\"; }\r\n  public override get onViewChanged(): Promise<void> { return this.populate(); }\r\n\r\n  private updateModelComboBox(modelId: string): void {\r\n    if (undefined !== this._modelComboBox)\r\n      this._modelComboBox.select.value = modelId;\r\n  }\r\n\r\n  private detachRealityModelByKey(style: DisplayStyle3dState, rdSourceKey: RealityDataSourceKey): boolean {\r\n    const model = style.settings.contextRealityModels.models.find((x) => x.rdSourceKey && RealityDataSourceKey.isEqual(rdSourceKey,x.rdSourceKey));\r\n    return undefined !== model && style.settings.contextRealityModels.delete(model);\r\n  }\r\n\r\n  private toggle(entry: ContextRealityModelProps, enabled: boolean): void {\r\n    const view = this._vp.view as SpatialViewState;\r\n    const style = view.getDisplayStyle3d();\r\n    if (enabled)\r\n      style.attachRealityModel(entry);\r\n    else\r\n      entry.rdSourceKey ? this.detachRealityModelByKey(style, entry.rdSourceKey) : style.detachRealityModelByNameAndUrl(entry.name!, entry.tilesetUrl);\r\n\r\n    this.populateRealityModelList();\r\n    this._vp.invalidateScene();\r\n  }\r\n\r\n  private setSelectedClassification(spatialClassifiers: SpatialClassifiers | undefined) {\r\n    this._selectedSpatialClassifiers = spatialClassifiers;\r\n    if (undefined === spatialClassifiers) {\r\n      this.updateModelComboBox(NO_MODEL_ID);\r\n      this.populateClassifierProperties();\r\n      return;\r\n    }\r\n\r\n    const classifier = spatialClassifiers.active;\r\n\r\n    if (undefined === classifier) {\r\n      this.updateModelComboBox(NO_MODEL_ID);\r\n      this.populateClassifierProperties();\r\n      return;\r\n    }\r\n\r\n    this.updateModelComboBox(classifier.modelId);\r\n\r\n    this.populateClassifierProperties();\r\n  }\r\n\r\n  private populateClassifierProperties(): void {\r\n    const classifier = this._selectedClassifier;\r\n    const parent = this._propertiesDiv;\r\n    clearElement(parent);\r\n\r\n    if (undefined === classifier)\r\n      return;\r\n\r\n    const outsideEntries: ComboBoxEntry[] = [\r\n      { name: \"Off\", value: SpatialClassifierOutsideDisplay.Off },\r\n      { name: \"On\", value: SpatialClassifierOutsideDisplay.On },\r\n      { name: \"Dimmed\", value: SpatialClassifierOutsideDisplay.Dimmed },\r\n    ];\r\n\r\n    const insideEntries: ComboBoxEntry[] = [\r\n      { name: \"Off\", value: SpatialClassifierInsideDisplay.Off },\r\n      { name: \"On\", value: SpatialClassifierInsideDisplay.On },\r\n      { name: \"Dimmed\", value: SpatialClassifierInsideDisplay.Dimmed },\r\n      { name: \"Hilite\", value: SpatialClassifierInsideDisplay.Hilite },\r\n      { name: \"Element Color\", value: SpatialClassifierInsideDisplay.ElementColor },\r\n    ];\r\n\r\n    const updateFlags = (newFlags: Partial<SpatialClassifierFlagsProps>) => {\r\n      const c = this._selectedClassifier!;\r\n      this._selectedSpatialClassifiers!.replace(c, c.clone({ flags: c.flags.clone(newFlags) }));\r\n    };\r\n\r\n    createComboBox({\r\n      name: \"Inside: \",\r\n      id: \"InsideComboBox\",\r\n      parent,\r\n      entries: insideEntries,\r\n      handler: (select) => {\r\n        const newValue = Number.parseInt(select.value, 10) as SpatialClassifierInsideDisplay;\r\n        updateFlags({ inside: newValue });\r\n        this._vp.invalidateScene();\r\n      },\r\n      value: classifier.flags.inside,\r\n    });\r\n\r\n    createComboBox({\r\n      name: \"Outside: \",\r\n      id: \"OutsideComboBox\",\r\n      parent,\r\n      entries: outsideEntries,\r\n      handler: (select) => {\r\n        const newValue = Number.parseInt(select.value, 10) as SpatialClassifierOutsideDisplay;\r\n        updateFlags({ outside: newValue });\r\n        this._vp.invalidateScene();\r\n      },\r\n      value: classifier.flags.outside,\r\n    });\r\n\r\n    const label = IModelApp.makeHTMLElement(\"label\", { parent });\r\n    label.textContent = \"Expansion: \";\r\n\r\n    createNumericInput({\r\n      parent,\r\n      display: \"inline\",\r\n      value: classifier.expand,\r\n      handler: (value) => {\r\n        const c = this._selectedClassifier!;\r\n        this._selectedSpatialClassifiers!.replace(c, c.clone({ expand: value }));\r\n        this._vp.invalidateScene();\r\n      },\r\n    });\r\n\r\n    createCheckBox({\r\n      name: \"Volume: \",\r\n      id: \"cbxVolumeClassifier\",\r\n      parent,\r\n      isChecked: classifier.flags.isVolumeClassifier,\r\n      handler: (cb) => {\r\n        updateFlags({ isVolumeClassifier: cb.checked });\r\n        this._vp.invalidateScene();\r\n      },\r\n    });\r\n  }\r\n}\r\n",
      "start": 1693508124550,
      "end": 1693508124708,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { assert, compareStringsOrUndefined } from \"@itwin/core-bentley\";\nimport { createCheckBox, createComboBox, createNestedMenu, createNumericInput } from \"@itwin/frontend-devtools\";\nimport {\n  CartographicRange,\n  RealityDataFormat,\n  RealityDataProvider,\n  RealityDataSourceKey,\n  SpatialClassifier,\n  SpatialClassifierInsideDisplay,\n  SpatialClassifierOutsideDisplay\n} from \"@itwin/core-common\";\nimport {\n  IModelApp,\n  SpatialModelState\n} from \"@itwin/core-frontend\";\nimport { DisplayTestApp } from \"./App\";\nimport { ToolBarDropDown } from \"./ToolBar\";\nimport { RealityDataAccessClient } from \"@itwin/reality-data-client\";\nfunction clearElement(element) {\n  while (element.hasChildNodes())\n    element.removeChild(element.firstChild);\n}\nconst NO_MODEL_ID = \"-1\";\nvar RealityDataType = /* @__PURE__ */ ((RealityDataType2) => {\n  RealityDataType2[\"REALITYMESH3DTILES\"] = \"REALITYMESH3DTILES\";\n  RealityDataType2[\"OSMBUILDINGS\"] = \"OSMBUILDINGS\";\n  RealityDataType2[\"OPC\"] = \"OPC\";\n  RealityDataType2[\"TERRAIN3DTILES\"] = \"TERRAIN3DTILES\";\n  RealityDataType2[\"OMR\"] = \"OMR\";\n  RealityDataType2[\"CESIUM3DTILES\"] = \"CESIUM3DTILES\";\n  RealityDataType2[\"UNKNOWN\"] = \"UNKNOWN\";\n  return RealityDataType2;\n})(RealityDataType || {});\nexport class ClassificationsPanel extends ToolBarDropDown {\n  constructor(vp, parent) {\n    super();\n    this._selectedSpatialClassifiersIndex = 0;\n    this._models = {};\n    // for IMJS_ITWIN_ID to work it should be define in your environment and you should be in signin mode with correct BUDDI region set\n    //  IMJS_STANDALONE_SIGNIN=true\n    //  IMJS_ITWIN_ID=\"fb1696c8-c074-4c76-a539-a5546e048cc6\"\n    this._iTwinId = DisplayTestApp.iTwinId;\n    this._vp = vp;\n    this._element = IModelApp.makeHTMLElement(\"div\", { parent, className: \"toolMenu\" });\n    this._realityModelListDiv = IModelApp.makeHTMLElement(\"div\", { parent: this._element });\n    this._modelListDiv = IModelApp.makeHTMLElement(\"div\", { parent: this._element });\n    this._propertiesDiv = IModelApp.makeHTMLElement(\"div\", { parent: this._element });\n    this._realityModelPickerMenu = createNestedMenu({\n      label: \"Reality Model Picker\"\n    });\n    this._element.style.display = \"block\";\n    this._element.style.cssFloat = \"left\";\n    this._element.style.width = \"max-content\";\n    this._element.style.minWidth = \"350px\";\n    this._element.appendChild(this._realityModelPickerMenu.div);\n  }\n  get _selectedClassifier() {\n    if (void 0 === this._selectedSpatialClassifiers)\n      return void 0;\n    const classifiers = this._selectedSpatialClassifiers;\n    if (void 0 !== classifiers.active)\n      return classifiers.active;\n    return void 0;\n  }\n  setAsActiveClassifier(modelProps) {\n    if (void 0 === this._selectedSpatialClassifiers)\n      return;\n    let classifier;\n    if (void 0 !== modelProps) {\n      const modelId = modelProps.id;\n      classifier = this._selectedSpatialClassifiers.find((x) => x.modelId === modelId);\n      if (!classifier)\n        classifier = this._selectedSpatialClassifiers.add(new SpatialClassifier(modelId, modelProps.name));\n    }\n    this._selectedSpatialClassifiers.setActive(classifier);\n    this.populateClassifierProperties();\n  }\n  createRealityDataSourceKeyFromITwinRealityData(iTwinRealityData) {\n    return {\n      provider: RealityDataProvider.ContextShare,\n      format: iTwinRealityData.type === \"OPC\" ? RealityDataFormat.OPC : RealityDataFormat.ThreeDTile,\n      id: iTwinRealityData.id\n    };\n  }\n  hasAttachedRealityModelFromKey(style, rdSourceKey) {\n    return void 0 !== style.settings.contextRealityModels.models.find((x) => x.rdSourceKey && RealityDataSourceKey.isEqual(rdSourceKey, x.rdSourceKey));\n  }\n  isSupportedType(type) {\n    if (type === void 0)\n      return false;\n    switch (type.toUpperCase()) {\n      case \"REALITYMESH3DTILES\" /* REALITYMESH3DTILES */:\n        return true;\n      case \"CESIUM3DTILES\" /* CESIUM3DTILES */:\n        return true;\n      case \"OPC\" /* OPC */:\n        return true;\n      case \"OSMBUILDINGS\" /* OSMBUILDINGS */:\n        return true;\n      case \"TERRAIN3DTILES\" /* TERRAIN3DTILES */:\n        return true;\n      case \"OMR\" /* OMR */:\n        return true;\n    }\n    return false;\n  }\n  isSupportedDisplayType(type) {\n    if (type === void 0)\n      return false;\n    if (this.isSupportedType(type)) {\n      switch (type.toUpperCase()) {\n        case \"OMR\" /* OMR */:\n          return false;\n        default:\n          return true;\n      }\n    }\n    return false;\n  }\n  async populateRealityModelsPicker() {\n    this._realityModelPickerMenu.div.style.display = \"none\";\n    clearElement(this._realityModelPickerMenu.body);\n    const view = this._vp.view;\n    const ecef = this._vp.iModel.ecefLocation;\n    if (!view.isSpatialView() || void 0 === ecef) {\n      return;\n    }\n    const range = new CartographicRange(this._vp.iModel.projectExtents, ecef.getTransform());\n    let available = { realityDatas: [] };\n    try {\n      if (this._iTwinId !== void 0 && IModelApp.authorizationClient) {\n        const accessToken = await IModelApp.authorizationClient.getAccessToken();\n        if (accessToken) {\n          const criteria = {\n            extent: range\n          };\n          const realityDataClientOptions = {\n            /** API Version. v1 by default */\n            // version?: ApiVersion;\n            /** API Url. Used to select environment. Defaults to \"https://api.bentley.com/realitydata\" */\n            baseUrl: `https://${process.env.IMJS_URL_PREFIX}api.bentley.com/realitydata`\n          };\n          available = await new RealityDataAccessClient(realityDataClientOptions).getRealityDatas(accessToken, this._iTwinId, criteria);\n        }\n      }\n    } catch (_error) {\n      console.error(\"Error in query RealitydataList, you need to set IMJS_STANDALONE_SIGNIN=true, and is your IMJS_ITWIN_ID correctly set?\");\n    }\n    for (const rdEntry of available.realityDatas) {\n      const name = void 0 !== rdEntry.displayName ? rdEntry.displayName : rdEntry.id;\n      const rdSourceKey = this.createRealityDataSourceKeyFromITwinRealityData(rdEntry);\n      const tilesetUrl = await IModelApp.realityDataAccess?.getRealityDataUrl(this._iTwinId, rdSourceKey.id);\n      const isDisplaySupported = this.isSupportedDisplayType(rdEntry.type);\n      if (tilesetUrl && isDisplaySupported) {\n        const entry = {\n          rdSourceKey,\n          tilesetUrl,\n          name,\n          description: rdEntry?.description,\n          realityDataId: rdSourceKey.id\n        };\n        createCheckBox({\n          name,\n          id: RealityDataSourceKey.convertToString(rdSourceKey),\n          parent: this._realityModelPickerMenu.body,\n          isChecked: this.hasAttachedRealityModelFromKey(view.displayStyle, rdSourceKey),\n          handler: (checkbox) => this.toggle(entry, checkbox.checked)\n        });\n      }\n    }\n    IModelApp.makeHTMLElement(\"hr\", { parent: this._realityModelPickerMenu.body });\n    if (available.realityDatas.length > 0)\n      this._realityModelPickerMenu.div.style.display = \"block\";\n  }\n  populateRealityModelList() {\n    const realityModels = [];\n    this._vp.view.displayStyle.forEachRealityModel((contextModel) => {\n      const classifiers = contextModel.classifiers;\n      if (void 0 !== classifiers)\n        realityModels.push({ spatialClassifiers: classifiers, modelName: contextModel.name });\n    });\n    for (const loaded of this._vp.iModel.models)\n      if (loaded instanceof SpatialModelState && void 0 !== loaded.classifiers)\n        realityModels.push({ spatialClassifiers: loaded.classifiers, modelName: `${loaded.name} (attached)` });\n    const entries = realityModels.map((spatialClassifier, i) => {\n      return { name: spatialClassifier.modelName, value: i };\n    });\n    clearElement(this._realityModelListDiv);\n    const activeIndex = this._selectedSpatialClassifiersIndex;\n    createComboBox({\n      parent: this._realityModelListDiv,\n      id: \"ClassifierSelectionBox\",\n      name: \"Reality Models: \",\n      value: activeIndex,\n      handler: (select) => {\n        const valueIndex = Number.parseInt(select.value, 10);\n        this._selectedSpatialClassifiersIndex = valueIndex;\n        const spatialClassifier = valueIndex >= 0 ? realityModels[valueIndex].spatialClassifiers : void 0;\n        this.setSelectedClassification(spatialClassifier);\n      },\n      entries\n    });\n    if (void 0 !== realityModels[activeIndex])\n      this.setSelectedClassification(realityModels[activeIndex].spatialClassifiers);\n    else\n      this.setSelectedClassification(void 0);\n  }\n  async populateModelList() {\n    const view = this._vp.view;\n    assert(void 0 !== view && view.isSpatialView());\n    const query = { from: SpatialModelState.classFullName, wantPrivate: false };\n    const props = await view.iModel.models.queryProps(query);\n    props.sort((lhs, rhs) => compareStringsOrUndefined(lhs.name, rhs.name));\n    const entries = [{ name: \"None\", value: NO_MODEL_ID }];\n    this._models = {};\n    props.forEach((prop) => {\n      if (void 0 !== prop.id && void 0 !== prop.name) {\n        entries.push({ name: prop.name, value: prop.id });\n        this._models[prop.id] = prop;\n      }\n    });\n    clearElement(this._modelListDiv);\n    this._modelComboBox = createComboBox({\n      entries,\n      parent: this._modelListDiv,\n      id: \"classifiers_modelBox\",\n      name: \"Active Classifier: \",\n      value: void 0 !== this._selectedClassifier ? this._selectedClassifier.modelId : void 0,\n      handler: (select) => {\n        this.setAsActiveClassifier(this._models[select.value]);\n        this.populateRealityModelList();\n        this._vp.invalidateScene();\n      }\n    });\n  }\n  async populate() {\n    this._selectedSpatialClassifiers = void 0;\n    if (this._vp.view.is2d())\n      return;\n    this._realityModelPickerMenu.div.style.display = \"none\";\n    this.populateRealityModelList();\n    await this.populateRealityModelsPicker();\n    await this.populateModelList();\n  }\n  get isOpen() {\n    return \"none\" !== this._element.style.display;\n  }\n  _open() {\n    this.populateRealityModelList();\n    this._element.style.display = \"block\";\n  }\n  _close() {\n    this._element.style.display = \"none\";\n  }\n  get onViewChanged() {\n    return this.populate();\n  }\n  updateModelComboBox(modelId) {\n    if (void 0 !== this._modelComboBox)\n      this._modelComboBox.select.value = modelId;\n  }\n  detachRealityModelByKey(style, rdSourceKey) {\n    const model = style.settings.contextRealityModels.models.find((x) => x.rdSourceKey && RealityDataSourceKey.isEqual(rdSourceKey, x.rdSourceKey));\n    return void 0 !== model && style.settings.contextRealityModels.delete(model);\n  }\n  toggle(entry, enabled) {\n    const view = this._vp.view;\n    const style = view.getDisplayStyle3d();\n    if (enabled)\n      style.attachRealityModel(entry);\n    else\n      entry.rdSourceKey ? this.detachRealityModelByKey(style, entry.rdSourceKey) : style.detachRealityModelByNameAndUrl(entry.name, entry.tilesetUrl);\n    this.populateRealityModelList();\n    this._vp.invalidateScene();\n  }\n  setSelectedClassification(spatialClassifiers) {\n    this._selectedSpatialClassifiers = spatialClassifiers;\n    if (void 0 === spatialClassifiers) {\n      this.updateModelComboBox(NO_MODEL_ID);\n      this.populateClassifierProperties();\n      return;\n    }\n    const classifier = spatialClassifiers.active;\n    if (void 0 === classifier) {\n      this.updateModelComboBox(NO_MODEL_ID);\n      this.populateClassifierProperties();\n      return;\n    }\n    this.updateModelComboBox(classifier.modelId);\n    this.populateClassifierProperties();\n  }\n  populateClassifierProperties() {\n    const classifier = this._selectedClassifier;\n    const parent = this._propertiesDiv;\n    clearElement(parent);\n    if (void 0 === classifier)\n      return;\n    const outsideEntries = [\n      { name: \"Off\", value: SpatialClassifierOutsideDisplay.Off },\n      { name: \"On\", value: SpatialClassifierOutsideDisplay.On },\n      { name: \"Dimmed\", value: SpatialClassifierOutsideDisplay.Dimmed }\n    ];\n    const insideEntries = [\n      { name: \"Off\", value: SpatialClassifierInsideDisplay.Off },\n      { name: \"On\", value: SpatialClassifierInsideDisplay.On },\n      { name: \"Dimmed\", value: SpatialClassifierInsideDisplay.Dimmed },\n      { name: \"Hilite\", value: SpatialClassifierInsideDisplay.Hilite },\n      { name: \"Element Color\", value: SpatialClassifierInsideDisplay.ElementColor }\n    ];\n    const updateFlags = (newFlags) => {\n      const c = this._selectedClassifier;\n      this._selectedSpatialClassifiers.replace(c, c.clone({ flags: c.flags.clone(newFlags) }));\n    };\n    createComboBox({\n      name: \"Inside: \",\n      id: \"InsideComboBox\",\n      parent,\n      entries: insideEntries,\n      handler: (select) => {\n        const newValue = Number.parseInt(select.value, 10);\n        updateFlags({ inside: newValue });\n        this._vp.invalidateScene();\n      },\n      value: classifier.flags.inside\n    });\n    createComboBox({\n      name: \"Outside: \",\n      id: \"OutsideComboBox\",\n      parent,\n      entries: outsideEntries,\n      handler: (select) => {\n        const newValue = Number.parseInt(select.value, 10);\n        updateFlags({ outside: newValue });\n        this._vp.invalidateScene();\n      },\n      value: classifier.flags.outside\n    });\n    const label = IModelApp.makeHTMLElement(\"label\", { parent });\n    label.textContent = \"Expansion: \";\n    createNumericInput({\n      parent,\n      display: \"inline\",\n      value: classifier.expand,\n      handler: (value) => {\n        const c = this._selectedClassifier;\n        this._selectedSpatialClassifiers.replace(c, c.clone({ expand: value }));\n        this._vp.invalidateScene();\n      }\n    });\n    createCheckBox({\n      name: \"Volume: \",\n      id: \"cbxVolumeClassifier\",\n      parent,\n      isChecked: classifier.flags.isVolumeClassifier,\n      handler: (cb) => {\n        updateFlags({ isVolumeClassifier: cb.checked });\n        this._vp.invalidateScene();\n      }\n    });\n  }\n}\n",
      "start": 1693508124708,
      "end": 1693508124781,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/ClassificationsPanel.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { assert, compareStringsOrUndefined, GuidString } from \"@itwin/core-bentley\";\r\nimport { ComboBox, ComboBoxEntry, createCheckBox, createComboBox, createNestedMenu, createNumericInput, NestedMenu } from \"@itwin/frontend-devtools\";\r\nimport {\r\n  CartographicRange, ContextRealityModelProps, ModelProps, RealityDataFormat, RealityDataProvider, RealityDataSourceKey, SpatialClassifier, SpatialClassifierFlagsProps, SpatialClassifierInsideDisplay,\r\n  SpatialClassifierOutsideDisplay, SpatialClassifiers,\r\n} from \"@itwin/core-common\";\r\nimport {\r\n  ContextRealityModelState, DisplayStyle3dState, IModelApp, SpatialModelState, SpatialViewState, Viewport,\r\n} from \"@itwin/core-frontend\";\r\nimport { DisplayTestApp } from \"./App\";\r\nimport { ToolBarDropDown } from \"./ToolBar\";\r\nimport { ITwinRealityData, RealityDataAccessClient, RealityDataClientOptions, RealityDataQueryCriteria, RealityDataResponse } from \"@itwin/reality-data-client\";\r\n\r\nfunction clearElement(element: HTMLElement): void {\r\n  while (element.hasChildNodes())\r\n    element.removeChild(element.firstChild!);\r\n}\r\n\r\nconst NO_MODEL_ID = \"-1\";\r\n\r\nenum RealityDataType {\r\n  REALITYMESH3DTILES  = \"REALITYMESH3DTILES\",\r\n  OSMBUILDINGS = \"OSMBUILDINGS\",\r\n  OPC = \"OPC\",\r\n  TERRAIN3DTILES = \"TERRAIN3DTILES\", // Terrain3DTiles\r\n  OMR = \"OMR\", // Mapping Resource, this type is supported from Context Share but can only be displayed by Orbit Photo Navigation (not publicly available)\r\n  CESIUM3DTILES = \"CESIUM3DTILES\",\r\n  UNKNOWN = \"UNKNOWN\",\r\n}\r\n\r\nexport class ClassificationsPanel extends ToolBarDropDown {\r\n  private readonly _vp: Viewport;\r\n  private readonly _element: HTMLElement;\r\n  private readonly _realityModelListDiv: HTMLDivElement;\r\n  private readonly _modelListDiv: HTMLDivElement;\r\n  private readonly _propertiesDiv: HTMLDivElement;\r\n  private readonly _realityModelPickerMenu: NestedMenu;\r\n  private _selectedSpatialClassifiers: SpatialClassifiers | undefined;\r\n  private _selectedSpatialClassifiersIndex: number = 0;\r\n  private _modelComboBox?: ComboBox;\r\n  private _models: { [modelId: string]: ModelProps } = {};\r\n  // for IMJS_ITWIN_ID to work it should be define in your environment and you should be in signin mode with correct BUDDI region set\r\n  //  IMJS_STANDALONE_SIGNIN=true\r\n  //  IMJS_ITWIN_ID=\"fb1696c8-c074-4c76-a539-a5546e048cc6\"\r\n  private _iTwinId: GuidString | undefined = DisplayTestApp.iTwinId;\r\n\r\n  private get _selectedClassifier(): SpatialClassifier | undefined {\r\n    if (undefined === this._selectedSpatialClassifiers)\r\n      return undefined;\r\n    const classifiers = this._selectedSpatialClassifiers;\r\n    if (undefined !== classifiers.active)\r\n      return classifiers.active;\r\n    return undefined;\r\n  }\r\n\r\n  private setAsActiveClassifier(modelProps: ModelProps | undefined): void {\r\n    if (undefined === this._selectedSpatialClassifiers)\r\n      return;\r\n\r\n    let classifier: SpatialClassifier | undefined;\r\n    if (undefined !== modelProps) {\r\n      // Find existing classifier, or create if one doesn't exist for modelId.\r\n      const modelId = modelProps.id!;\r\n      classifier = this._selectedSpatialClassifiers.find((x) => x.modelId === modelId);\r\n      if (!classifier)\r\n        classifier = this._selectedSpatialClassifiers.add(new SpatialClassifier(modelId, modelProps.name!));\r\n    }\r\n\r\n    this._selectedSpatialClassifiers.setActive(classifier);\r\n    this.populateClassifierProperties();\r\n  }\r\n\r\n  constructor(vp: Viewport, parent: HTMLElement) {\r\n    super();\r\n    this._vp = vp;\r\n\r\n    this._element = IModelApp.makeHTMLElement(\"div\", { parent, className: \"toolMenu\" });\r\n    this._realityModelListDiv = IModelApp.makeHTMLElement(\"div\", { parent: this._element });\r\n    this._modelListDiv = IModelApp.makeHTMLElement(\"div\", { parent: this._element });\r\n    this._propertiesDiv = IModelApp.makeHTMLElement(\"div\", { parent: this._element });\r\n    this._realityModelPickerMenu = createNestedMenu({\r\n      label: \"Reality Model Picker\",\r\n    });\r\n\r\n    this._element.style.display = \"block\";\r\n    this._element.style.cssFloat = \"left\";\r\n    this._element.style.width = \"max-content\";\r\n    this._element.style.minWidth = \"350px\";\r\n\r\n    this._element.appendChild(this._realityModelPickerMenu.div);\r\n  }\r\n\r\n  private createRealityDataSourceKeyFromITwinRealityData(iTwinRealityData: ITwinRealityData): RealityDataSourceKey {\r\n    return {\r\n      provider: RealityDataProvider.ContextShare,\r\n      format: iTwinRealityData.type === \"OPC\" ? RealityDataFormat.OPC : RealityDataFormat.ThreeDTile,\r\n      id: iTwinRealityData.id,\r\n    };\r\n  }\r\n\r\n  private hasAttachedRealityModelFromKey(style: DisplayStyle3dState, rdSourceKey: RealityDataSourceKey ): boolean {\r\n    return undefined !== style.settings.contextRealityModels.models.find((x) => x.rdSourceKey && RealityDataSourceKey.isEqual(rdSourceKey,x.rdSourceKey));\r\n  }\r\n\r\n  private isSupportedType(type: string | undefined): boolean {\r\n    if (type === undefined)\r\n      return false;\r\n\r\n    switch (type.toUpperCase()) {\r\n      case RealityDataType.REALITYMESH3DTILES:\r\n        return true;\r\n      case RealityDataType.CESIUM3DTILES:\r\n        return true;\r\n      case RealityDataType.OPC:\r\n        return true;\r\n      case RealityDataType.OSMBUILDINGS:\r\n        return true;\r\n      case RealityDataType.TERRAIN3DTILES:\r\n        return true;\r\n      case RealityDataType.OMR:\r\n        return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private isSupportedDisplayType(type: string | undefined): boolean {\r\n    if (type === undefined)\r\n      return false;\r\n    if (this.isSupportedType(type)) {\r\n      switch (type.toUpperCase()) {\r\n        case RealityDataType.OMR:\r\n          return false; // this type is supported from Context Share but can only be displayed by Orbit Photo Navigation (not publicly available)\r\n        default:\r\n          return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private async populateRealityModelsPicker(): Promise<void> {\r\n    this._realityModelPickerMenu.div.style.display = \"none\";\r\n    clearElement(this._realityModelPickerMenu.body);\r\n\r\n    const view = this._vp.view;\r\n    const ecef = this._vp.iModel.ecefLocation;\r\n    if (!view.isSpatialView() || undefined === ecef) {\r\n      return;\r\n    }\r\n\r\n    const range = new CartographicRange(this._vp.iModel.projectExtents, ecef.getTransform());\r\n    let available: RealityDataResponse = {realityDatas: []};\r\n    try {\r\n      if (this._iTwinId !== undefined && IModelApp.authorizationClient) {\r\n        const accessToken = await IModelApp.authorizationClient.getAccessToken();\r\n        if (accessToken) {\r\n          const criteria: RealityDataQueryCriteria = {\r\n            extent: range,\r\n          };\r\n          const realityDataClientOptions: RealityDataClientOptions = {\r\n            /** API Version. v1 by default */\r\n            // version?: ApiVersion;\r\n            /** API Url. Used to select environment. Defaults to \"https://api.bentley.com/realitydata\" */\r\n            baseUrl: `https://${process.env.IMJS_URL_PREFIX}api.bentley.com/realitydata`,\r\n          };\r\n          available = await new RealityDataAccessClient(realityDataClientOptions).getRealityDatas(accessToken, this._iTwinId, criteria);\r\n        }\r\n      }\r\n    } catch (_error) {\r\n      // eslint-disable-next-line no-console\r\n      console.error(\"Error in query RealitydataList, you need to set IMJS_STANDALONE_SIGNIN=true, and is your IMJS_ITWIN_ID correctly set?\");\r\n    }\r\n\r\n    for (const rdEntry of available.realityDatas) {\r\n      const name = undefined !== rdEntry.displayName ? rdEntry.displayName : rdEntry.id;\r\n      const rdSourceKey = this.createRealityDataSourceKeyFromITwinRealityData(rdEntry);\r\n      const tilesetUrl = await IModelApp.realityDataAccess?.getRealityDataUrl(this._iTwinId,rdSourceKey.id);\r\n      const isDisplaySupported = this.isSupportedDisplayType(rdEntry.type);\r\n      if (tilesetUrl && isDisplaySupported) {\r\n        const entry: ContextRealityModelProps = {\r\n          rdSourceKey,\r\n          tilesetUrl,\r\n          name,\r\n          description: rdEntry?.description,\r\n          realityDataId: rdSourceKey.id,\r\n        };\r\n\r\n        createCheckBox({\r\n          name,\r\n          id: RealityDataSourceKey.convertToString(rdSourceKey),\r\n          parent: this._realityModelPickerMenu.body,\r\n          isChecked: this.hasAttachedRealityModelFromKey(view.displayStyle, rdSourceKey),\r\n          handler: (checkbox) => this.toggle(entry, checkbox.checked),\r\n        });\r\n      }\r\n    }\r\n    IModelApp.makeHTMLElement(\"hr\", { parent: this._realityModelPickerMenu.body });\r\n    if (available.realityDatas.length > 0)\r\n      this._realityModelPickerMenu.div.style.display = \"block\";\r\n  }\r\n\r\n  private populateRealityModelList(): void {\r\n    // assemble list of Spatial Classifiers for context reality models (should usually be at most one)\r\n    const realityModels: Array<{ spatialClassifiers: SpatialClassifiers, modelName: string }> = [];\r\n    (this._vp.view.displayStyle as DisplayStyle3dState).forEachRealityModel((contextModel: ContextRealityModelState) => {\r\n      const classifiers = contextModel.classifiers;\r\n      if (undefined !== classifiers)\r\n        realityModels.push({ spatialClassifiers: classifiers, modelName: contextModel.name });\r\n    });\r\n\r\n    // include any attached reality models (may be any number; must be loaded already)\r\n    for (const loaded of this._vp.iModel.models)\r\n      if (loaded instanceof SpatialModelState && undefined !== loaded.classifiers)\r\n        realityModels.push({ spatialClassifiers: loaded.classifiers, modelName: `${loaded.name} (attached)` });\r\n\r\n    // create list of entries for Classifier in the spatial Classifiers\r\n    const entries = realityModels.map((spatialClassifier, i) => {\r\n      return ({ name: spatialClassifier.modelName, value: i } as ComboBoxEntry);\r\n    });\r\n\r\n    clearElement(this._realityModelListDiv);\r\n    const activeIndex = this._selectedSpatialClassifiersIndex;\r\n    createComboBox({\r\n      parent: this._realityModelListDiv,\r\n      id: \"ClassifierSelectionBox\",\r\n      name: \"Reality Models: \",\r\n      value: activeIndex,\r\n      handler: (select) => {\r\n        const valueIndex = Number.parseInt(select.value, 10);\r\n        this._selectedSpatialClassifiersIndex = valueIndex;\r\n        const spatialClassifier = valueIndex >= 0 ? realityModels[valueIndex].spatialClassifiers : undefined;\r\n        this.setSelectedClassification(spatialClassifier);\r\n      },\r\n      entries,\r\n    });\r\n\r\n    if (undefined !== realityModels[activeIndex])\r\n      this.setSelectedClassification(realityModels[activeIndex].spatialClassifiers);\r\n    else\r\n      this.setSelectedClassification(undefined);\r\n  }\r\n\r\n  private async populateModelList(): Promise<void> {\r\n    const view = this._vp.view as SpatialViewState;\r\n    assert(undefined !== view && view.isSpatialView());\r\n\r\n    const query = { from: SpatialModelState.classFullName, wantPrivate: false };\r\n    const props = await view.iModel.models.queryProps(query);\r\n    props.sort((lhs, rhs) => compareStringsOrUndefined(lhs.name, rhs.name));\r\n\r\n    const entries: ComboBoxEntry[] = [{ name: \"None\", value: NO_MODEL_ID }];\r\n    this._models = {};\r\n    props.forEach((prop) => {\r\n      if (undefined !== prop.id && undefined !== prop.name) {\r\n        entries.push({ name: prop.name, value: prop.id });\r\n        this._models[prop.id] = prop;\r\n      }\r\n    });\r\n\r\n    clearElement(this._modelListDiv);\r\n\r\n    this._modelComboBox = createComboBox({\r\n      entries,\r\n      parent: this._modelListDiv,\r\n      id: \"classifiers_modelBox\",\r\n      name: \"Active Classifier: \",\r\n      value: undefined !== this._selectedClassifier ? this._selectedClassifier.modelId : undefined,\r\n      handler: (select) => {\r\n        this.setAsActiveClassifier(this._models[select.value]);\r\n        this.populateRealityModelList();\r\n        this._vp.invalidateScene();\r\n      },\r\n    });\r\n  }\r\n\r\n  public async populate(): Promise<void> {\r\n    this._selectedSpatialClassifiers = undefined;\r\n    if (this._vp.view.is2d())\r\n      return;\r\n\r\n    this._realityModelPickerMenu.div.style.display = \"none\";\r\n    this.populateRealityModelList();\r\n    await this.populateRealityModelsPicker();\r\n    await this.populateModelList();\r\n  }\r\n\r\n  public get isOpen(): boolean { return \"none\" !== this._element.style.display; }\r\n  protected _open(): void {\r\n    this.populateRealityModelList();\r\n    this._element.style.display = \"block\";\r\n  }\r\n  protected _close(): void { this._element.style.display = \"none\"; }\r\n  public override get onViewChanged(): Promise<void> { return this.populate(); }\r\n\r\n  private updateModelComboBox(modelId: string): void {\r\n    if (undefined !== this._modelComboBox)\r\n      this._modelComboBox.select.value = modelId;\r\n  }\r\n\r\n  private detachRealityModelByKey(style: DisplayStyle3dState, rdSourceKey: RealityDataSourceKey): boolean {\r\n    const model = style.settings.contextRealityModels.models.find((x) => x.rdSourceKey && RealityDataSourceKey.isEqual(rdSourceKey,x.rdSourceKey));\r\n    return undefined !== model && style.settings.contextRealityModels.delete(model);\r\n  }\r\n\r\n  private toggle(entry: ContextRealityModelProps, enabled: boolean): void {\r\n    const view = this._vp.view as SpatialViewState;\r\n    const style = view.getDisplayStyle3d();\r\n    if (enabled)\r\n      style.attachRealityModel(entry);\r\n    else\r\n      entry.rdSourceKey ? this.detachRealityModelByKey(style, entry.rdSourceKey) : style.detachRealityModelByNameAndUrl(entry.name!, entry.tilesetUrl);\r\n\r\n    this.populateRealityModelList();\r\n    this._vp.invalidateScene();\r\n  }\r\n\r\n  private setSelectedClassification(spatialClassifiers: SpatialClassifiers | undefined) {\r\n    this._selectedSpatialClassifiers = spatialClassifiers;\r\n    if (undefined === spatialClassifiers) {\r\n      this.updateModelComboBox(NO_MODEL_ID);\r\n      this.populateClassifierProperties();\r\n      return;\r\n    }\r\n\r\n    const classifier = spatialClassifiers.active;\r\n\r\n    if (undefined === classifier) {\r\n      this.updateModelComboBox(NO_MODEL_ID);\r\n      this.populateClassifierProperties();\r\n      return;\r\n    }\r\n\r\n    this.updateModelComboBox(classifier.modelId);\r\n\r\n    this.populateClassifierProperties();\r\n  }\r\n\r\n  private populateClassifierProperties(): void {\r\n    const classifier = this._selectedClassifier;\r\n    const parent = this._propertiesDiv;\r\n    clearElement(parent);\r\n\r\n    if (undefined === classifier)\r\n      return;\r\n\r\n    const outsideEntries: ComboBoxEntry[] = [\r\n      { name: \"Off\", value: SpatialClassifierOutsideDisplay.Off },\r\n      { name: \"On\", value: SpatialClassifierOutsideDisplay.On },\r\n      { name: \"Dimmed\", value: SpatialClassifierOutsideDisplay.Dimmed },\r\n    ];\r\n\r\n    const insideEntries: ComboBoxEntry[] = [\r\n      { name: \"Off\", value: SpatialClassifierInsideDisplay.Off },\r\n      { name: \"On\", value: SpatialClassifierInsideDisplay.On },\r\n      { name: \"Dimmed\", value: SpatialClassifierInsideDisplay.Dimmed },\r\n      { name: \"Hilite\", value: SpatialClassifierInsideDisplay.Hilite },\r\n      { name: \"Element Color\", value: SpatialClassifierInsideDisplay.ElementColor },\r\n    ];\r\n\r\n    const updateFlags = (newFlags: Partial<SpatialClassifierFlagsProps>) => {\r\n      const c = this._selectedClassifier!;\r\n      this._selectedSpatialClassifiers!.replace(c, c.clone({ flags: c.flags.clone(newFlags) }));\r\n    };\r\n\r\n    createComboBox({\r\n      name: \"Inside: \",\r\n      id: \"InsideComboBox\",\r\n      parent,\r\n      entries: insideEntries,\r\n      handler: (select) => {\r\n        const newValue = Number.parseInt(select.value, 10) as SpatialClassifierInsideDisplay;\r\n        updateFlags({ inside: newValue });\r\n        this._vp.invalidateScene();\r\n      },\r\n      value: classifier.flags.inside,\r\n    });\r\n\r\n    createComboBox({\r\n      name: \"Outside: \",\r\n      id: \"OutsideComboBox\",\r\n      parent,\r\n      entries: outsideEntries,\r\n      handler: (select) => {\r\n        const newValue = Number.parseInt(select.value, 10) as SpatialClassifierOutsideDisplay;\r\n        updateFlags({ outside: newValue });\r\n        this._vp.invalidateScene();\r\n      },\r\n      value: classifier.flags.outside,\r\n    });\r\n\r\n    const label = IModelApp.makeHTMLElement(\"label\", { parent });\r\n    label.textContent = \"Expansion: \";\r\n\r\n    createNumericInput({\r\n      parent,\r\n      display: \"inline\",\r\n      value: classifier.expand,\r\n      handler: (value) => {\r\n        const c = this._selectedClassifier!;\r\n        this._selectedSpatialClassifiers!.replace(c, c.clone({ expand: value }));\r\n        this._vp.invalidateScene();\r\n      },\r\n    });\r\n\r\n    createCheckBox({\r\n      name: \"Volume: \",\r\n      id: \"cbxVolumeClassifier\",\r\n      parent,\r\n      isChecked: classifier.flags.isVolumeClassifier,\r\n      handler: (cb) => {\r\n        updateFlags({ isVolumeClassifier: cb.checked });\r\n        this._vp.invalidateScene();\r\n      },\r\n    });\r\n  }\r\n}\r\n"
        ],
        "mappings": ";AAKA,SAAS,QAAQ,iCAA6C;AAC9D,SAAkC,gBAAgB,gBAAgB,kBAAkB,0BAAsC;AAC1H;AAAA,EACE;AAAA,EAAyD;AAAA,EAAmB;AAAA,EAAqB;AAAA,EAAsB;AAAA,EAAgD;AAAA,EACvK;AAAA,OACK;AACP;AAAA,EACiD;AAAA,EAAW;AAAA,OACrD;AACP,SAAS,sBAAsB;AAC/B,SAAS,uBAAuB;AAChC,SAA2B,+BAAwG;AAEnI,SAAS,aAAa,SAA4B;AAChD,SAAO,QAAQ,cAAc;AAC3B,YAAQ,YAAY,QAAQ,UAAW;AAC3C;AAEA,MAAM,cAAc;AAEpB,IAAK,kBAAL,kBAAKA,qBAAL;AACE,EAAAA,iBAAA,wBAAsB;AACtB,EAAAA,iBAAA,kBAAe;AACf,EAAAA,iBAAA,SAAM;AACN,EAAAA,iBAAA,oBAAiB;AACjB,EAAAA,iBAAA,SAAM;AACN,EAAAA,iBAAA,mBAAgB;AAChB,EAAAA,iBAAA,aAAU;AAPP,SAAAA;AAAA,GAAA;AAUE,aAAM,6BAA6B,gBAAgB;AAAA,EA0CxD,YAAY,IAAc,QAAqB;AAC7C,UAAM;AAnCR,SAAQ,mCAA2C;AAEnD,SAAQ,UAA6C,CAAC;AAItD;AAAA;AAAA;AAAA,SAAQ,WAAmC,eAAe;AA8BxD,SAAK,MAAM;AAEX,SAAK,WAAW,UAAU,gBAAgB,OAAO,EAAE,QAAQ,WAAW,WAAW,CAAC;AAClF,SAAK,uBAAuB,UAAU,gBAAgB,OAAO,EAAE,QAAQ,KAAK,SAAS,CAAC;AACtF,SAAK,gBAAgB,UAAU,gBAAgB,OAAO,EAAE,QAAQ,KAAK,SAAS,CAAC;AAC/E,SAAK,iBAAiB,UAAU,gBAAgB,OAAO,EAAE,QAAQ,KAAK,SAAS,CAAC;AAChF,SAAK,0BAA0B,iBAAiB;AAAA,MAC9C,OAAO;AAAA,IACT,CAAC;AAED,SAAK,SAAS,MAAM,UAAU;AAC9B,SAAK,SAAS,MAAM,WAAW;AAC/B,SAAK,SAAS,MAAM,QAAQ;AAC5B,SAAK,SAAS,MAAM,WAAW;AAE/B,SAAK,SAAS,YAAY,KAAK,wBAAwB,GAAG;AAAA,EAC5D;AAAA,EA5CA,IAAY,sBAAqD;AAC/D,QAAI,WAAc,KAAK;AACrB,aAAO;AACT,UAAM,cAAc,KAAK;AACzB,QAAI,WAAc,YAAY;AAC5B,aAAO,YAAY;AACrB,WAAO;AAAA,EACT;AAAA,EAEQ,sBAAsB,YAA0C;AACtE,QAAI,WAAc,KAAK;AACrB;AAEF,QAAI;AACJ,QAAI,WAAc,YAAY;AAE5B,YAAM,UAAU,WAAW;AAC3B,mBAAa,KAAK,4BAA4B,KAAK,CAAC,MAAM,EAAE,YAAY,OAAO;AAC/E,UAAI,CAAC;AACH,qBAAa,KAAK,4BAA4B,IAAI,IAAI,kBAAkB,SAAS,WAAW,IAAK,CAAC;AAAA,IACtG;AAEA,SAAK,4BAA4B,UAAU,UAAU;AACrD,SAAK,6BAA6B;AAAA,EACpC;AAAA,EAsBQ,+CAA+C,kBAA0D;AAC/G,WAAO;AAAA,MACL,UAAU,oBAAoB;AAAA,MAC9B,QAAQ,iBAAiB,SAAS,QAAQ,kBAAkB,MAAM,kBAAkB;AAAA,MACpF,IAAI,iBAAiB;AAAA,IACvB;AAAA,EACF;AAAA,EAEQ,+BAA+B,OAA4B,aAA6C;AAC9G,WAAO,WAAc,MAAM,SAAS,qBAAqB,OAAO,KAAK,CAAC,MAAM,EAAE,eAAe,qBAAqB,QAAQ,aAAY,EAAE,WAAW,CAAC;AAAA,EACtJ;AAAA,EAEQ,gBAAgB,MAAmC;AACzD,QAAI,SAAS;AACX,aAAO;AAET,YAAQ,KAAK,YAAY,GAAG;AAAA,MAC1B,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,IACX;AACA,WAAO;AAAA,EACT;AAAA,EAEQ,uBAAuB,MAAmC;AAChE,QAAI,SAAS;AACX,aAAO;AACT,QAAI,KAAK,gBAAgB,IAAI,GAAG;AAC9B,cAAQ,KAAK,YAAY,GAAG;AAAA,QAC1B,KAAK;AACH,iBAAO;AAAA,QACT;AACE,iBAAO;AAAA,MACX;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EAEA,MAAc,8BAA6C;AACzD,SAAK,wBAAwB,IAAI,MAAM,UAAU;AACjD,iBAAa,KAAK,wBAAwB,IAAI;AAE9C,UAAM,OAAO,KAAK,IAAI;AACtB,UAAM,OAAO,KAAK,IAAI,OAAO;AAC7B,QAAI,CAAC,KAAK,cAAc,KAAK,WAAc,MAAM;AAC/C;AAAA,IACF;AAEA,UAAM,QAAQ,IAAI,kBAAkB,KAAK,IAAI,OAAO,gBAAgB,KAAK,aAAa,CAAC;AACvF,QAAI,YAAiC,EAAC,cAAc,CAAC,EAAC;AACtD,QAAI;AACF,UAAI,KAAK,aAAa,UAAa,UAAU,qBAAqB;AAChE,cAAM,cAAc,MAAM,UAAU,oBAAoB,eAAe;AACvE,YAAI,aAAa;AACf,gBAAM,WAAqC;AAAA,YACzC,QAAQ;AAAA,UACV;AACA,gBAAM,2BAAqD;AAAA;AAAA;AAAA;AAAA,YAIzD,SAAS,WAAW,QAAQ,IAAI,eAAe;AAAA,UACjD;AACA,sBAAY,MAAM,IAAI,wBAAwB,wBAAwB,EAAE,gBAAgB,aAAa,KAAK,UAAU,QAAQ;AAAA,QAC9H;AAAA,MACF;AAAA,IACF,SAAS,QAAQ;AAEf,cAAQ,MAAM,uHAAuH;AAAA,IACvI;AAEA,eAAW,WAAW,UAAU,cAAc;AAC5C,YAAM,OAAO,WAAc,QAAQ,cAAc,QAAQ,cAAc,QAAQ;AAC/E,YAAM,cAAc,KAAK,+CAA+C,OAAO;AAC/E,YAAM,aAAa,MAAM,UAAU,mBAAmB,kBAAkB,KAAK,UAAS,YAAY,EAAE;AACpG,YAAM,qBAAqB,KAAK,uBAAuB,QAAQ,IAAI;AACnE,UAAI,cAAc,oBAAoB;AACpC,cAAM,QAAkC;AAAA,UACtC;AAAA,UACA;AAAA,UACA;AAAA,UACA,aAAa,SAAS;AAAA,UACtB,eAAe,YAAY;AAAA,QAC7B;AAEA,uBAAe;AAAA,UACb;AAAA,UACA,IAAI,qBAAqB,gBAAgB,WAAW;AAAA,UACpD,QAAQ,KAAK,wBAAwB;AAAA,UACrC,WAAW,KAAK,+BAA+B,KAAK,cAAc,WAAW;AAAA,UAC7E,SAAS,CAAC,aAAa,KAAK,OAAO,OAAO,SAAS,OAAO;AAAA,QAC5D,CAAC;AAAA,MACH;AAAA,IACF;AACA,cAAU,gBAAgB,MAAM,EAAE,QAAQ,KAAK,wBAAwB,KAAK,CAAC;AAC7E,QAAI,UAAU,aAAa,SAAS;AAClC,WAAK,wBAAwB,IAAI,MAAM,UAAU;AAAA,EACrD;AAAA,EAEQ,2BAAiC;AAEvC,UAAM,gBAAsF,CAAC;AAC7F,IAAC,KAAK,IAAI,KAAK,aAAqC,oBAAoB,CAAC,iBAA2C;AAClH,YAAM,cAAc,aAAa;AACjC,UAAI,WAAc;AAChB,sBAAc,KAAK,EAAE,oBAAoB,aAAa,WAAW,aAAa,KAAK,CAAC;AAAA,IACxF,CAAC;AAGD,eAAW,UAAU,KAAK,IAAI,OAAO;AACnC,UAAI,kBAAkB,qBAAqB,WAAc,OAAO;AAC9D,sBAAc,KAAK,EAAE,oBAAoB,OAAO,aAAa,WAAW,GAAG,OAAO,IAAI,cAAc,CAAC;AAGzG,UAAM,UAAU,cAAc,IAAI,CAAC,mBAAmB,MAAM;AAC1D,aAAQ,EAAE,MAAM,kBAAkB,WAAW,OAAO,EAAE;AAAA,IACxD,CAAC;AAED,iBAAa,KAAK,oBAAoB;AACtC,UAAM,cAAc,KAAK;AACzB,mBAAe;AAAA,MACb,QAAQ,KAAK;AAAA,MACb,IAAI;AAAA,MACJ,MAAM;AAAA,MACN,OAAO;AAAA,MACP,SAAS,CAAC,WAAW;AACnB,cAAM,aAAa,OAAO,SAAS,OAAO,OAAO,EAAE;AACnD,aAAK,mCAAmC;AACxC,cAAM,oBAAoB,cAAc,IAAI,cAAc,UAAU,EAAE,qBAAqB;AAC3F,aAAK,0BAA0B,iBAAiB;AAAA,MAClD;AAAA,MACA;AAAA,IACF,CAAC;AAED,QAAI,WAAc,cAAc,WAAW;AACzC,WAAK,0BAA0B,cAAc,WAAW,EAAE,kBAAkB;AAAA;AAE5E,WAAK,0BAA0B,MAAS;AAAA,EAC5C;AAAA,EAEA,MAAc,oBAAmC;AAC/C,UAAM,OAAO,KAAK,IAAI;AACtB,WAAO,WAAc,QAAQ,KAAK,cAAc,CAAC;AAEjD,UAAM,QAAQ,EAAE,MAAM,kBAAkB,eAAe,aAAa,MAAM;AAC1E,UAAM,QAAQ,MAAM,KAAK,OAAO,OAAO,WAAW,KAAK;AACvD,UAAM,KAAK,CAAC,KAAK,QAAQ,0BAA0B,IAAI,MAAM,IAAI,IAAI,CAAC;AAEtE,UAAM,UAA2B,CAAC,EAAE,MAAM,QAAQ,OAAO,YAAY,CAAC;AACtE,SAAK,UAAU,CAAC;AAChB,UAAM,QAAQ,CAAC,SAAS;AACtB,UAAI,WAAc,KAAK,MAAM,WAAc,KAAK,MAAM;AACpD,gBAAQ,KAAK,EAAE,MAAM,KAAK,MAAM,OAAO,KAAK,GAAG,CAAC;AAChD,aAAK,QAAQ,KAAK,EAAE,IAAI;AAAA,MAC1B;AAAA,IACF,CAAC;AAED,iBAAa,KAAK,aAAa;AAE/B,SAAK,iBAAiB,eAAe;AAAA,MACnC;AAAA,MACA,QAAQ,KAAK;AAAA,MACb,IAAI;AAAA,MACJ,MAAM;AAAA,MACN,OAAO,WAAc,KAAK,sBAAsB,KAAK,oBAAoB,UAAU;AAAA,MACnF,SAAS,CAAC,WAAW;AACnB,aAAK,sBAAsB,KAAK,QAAQ,OAAO,KAAK,CAAC;AACrD,aAAK,yBAAyB;AAC9B,aAAK,IAAI,gBAAgB;AAAA,MAC3B;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,MAAa,WAA0B;AACrC,SAAK,8BAA8B;AACnC,QAAI,KAAK,IAAI,KAAK,KAAK;AACrB;AAEF,SAAK,wBAAwB,IAAI,MAAM,UAAU;AACjD,SAAK,yBAAyB;AAC9B,UAAM,KAAK,4BAA4B;AACvC,UAAM,KAAK,kBAAkB;AAAA,EAC/B;AAAA,EAEA,IAAW,SAAkB;AAAE,WAAO,WAAW,KAAK,SAAS,MAAM;AAAA,EAAS;AAAA,EACpE,QAAc;AACtB,SAAK,yBAAyB;AAC9B,SAAK,SAAS,MAAM,UAAU;AAAA,EAChC;AAAA,EACU,SAAe;AAAE,SAAK,SAAS,MAAM,UAAU;AAAA,EAAQ;AAAA,EACjE,IAAoB,gBAA+B;AAAE,WAAO,KAAK,SAAS;AAAA,EAAG;AAAA,EAErE,oBAAoB,SAAuB;AACjD,QAAI,WAAc,KAAK;AACrB,WAAK,eAAe,OAAO,QAAQ;AAAA,EACvC;AAAA,EAEQ,wBAAwB,OAA4B,aAA4C;AACtG,UAAM,QAAQ,MAAM,SAAS,qBAAqB,OAAO,KAAK,CAAC,MAAM,EAAE,eAAe,qBAAqB,QAAQ,aAAY,EAAE,WAAW,CAAC;AAC7I,WAAO,WAAc,SAAS,MAAM,SAAS,qBAAqB,OAAO,KAAK;AAAA,EAChF;AAAA,EAEQ,OAAO,OAAiC,SAAwB;AACtE,UAAM,OAAO,KAAK,IAAI;AACtB,UAAM,QAAQ,KAAK,kBAAkB;AACrC,QAAI;AACF,YAAM,mBAAmB,KAAK;AAAA;AAE9B,YAAM,cAAc,KAAK,wBAAwB,OAAO,MAAM,WAAW,IAAI,MAAM,+BAA+B,MAAM,MAAO,MAAM,UAAU;AAEjJ,SAAK,yBAAyB;AAC9B,SAAK,IAAI,gBAAgB;AAAA,EAC3B;AAAA,EAEQ,0BAA0B,oBAAoD;AACpF,SAAK,8BAA8B;AACnC,QAAI,WAAc,oBAAoB;AACpC,WAAK,oBAAoB,WAAW;AACpC,WAAK,6BAA6B;AAClC;AAAA,IACF;AAEA,UAAM,aAAa,mBAAmB;AAEtC,QAAI,WAAc,YAAY;AAC5B,WAAK,oBAAoB,WAAW;AACpC,WAAK,6BAA6B;AAClC;AAAA,IACF;AAEA,SAAK,oBAAoB,WAAW,OAAO;AAE3C,SAAK,6BAA6B;AAAA,EACpC;AAAA,EAEQ,+BAAqC;AAC3C,UAAM,aAAa,KAAK;AACxB,UAAM,SAAS,KAAK;AACpB,iBAAa,MAAM;AAEnB,QAAI,WAAc;AAChB;AAEF,UAAM,iBAAkC;AAAA,MACtC,EAAE,MAAM,OAAO,OAAO,gCAAgC,IAAI;AAAA,MAC1D,EAAE,MAAM,MAAM,OAAO,gCAAgC,GAAG;AAAA,MACxD,EAAE,MAAM,UAAU,OAAO,gCAAgC,OAAO;AAAA,IAClE;AAEA,UAAM,gBAAiC;AAAA,MACrC,EAAE,MAAM,OAAO,OAAO,+BAA+B,IAAI;AAAA,MACzD,EAAE,MAAM,MAAM,OAAO,+BAA+B,GAAG;AAAA,MACvD,EAAE,MAAM,UAAU,OAAO,+BAA+B,OAAO;AAAA,MAC/D,EAAE,MAAM,UAAU,OAAO,+BAA+B,OAAO;AAAA,MAC/D,EAAE,MAAM,iBAAiB,OAAO,+BAA+B,aAAa;AAAA,IAC9E;AAEA,UAAM,cAAc,CAAC,aAAmD;AACtE,YAAM,IAAI,KAAK;AACf,WAAK,4BAA6B,QAAQ,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,MAAM,QAAQ,EAAE,CAAC,CAAC;AAAA,IAC1F;AAEA,mBAAe;AAAA,MACb,MAAM;AAAA,MACN,IAAI;AAAA,MACJ;AAAA,MACA,SAAS;AAAA,MACT,SAAS,CAAC,WAAW;AACnB,cAAM,WAAW,OAAO,SAAS,OAAO,OAAO,EAAE;AACjD,oBAAY,EAAE,QAAQ,SAAS,CAAC;AAChC,aAAK,IAAI,gBAAgB;AAAA,MAC3B;AAAA,MACA,OAAO,WAAW,MAAM;AAAA,IAC1B,CAAC;AAED,mBAAe;AAAA,MACb,MAAM;AAAA,MACN,IAAI;AAAA,MACJ;AAAA,MACA,SAAS;AAAA,MACT,SAAS,CAAC,WAAW;AACnB,cAAM,WAAW,OAAO,SAAS,OAAO,OAAO,EAAE;AACjD,oBAAY,EAAE,SAAS,SAAS,CAAC;AACjC,aAAK,IAAI,gBAAgB;AAAA,MAC3B;AAAA,MACA,OAAO,WAAW,MAAM;AAAA,IAC1B,CAAC;AAED,UAAM,QAAQ,UAAU,gBAAgB,SAAS,EAAE,OAAO,CAAC;AAC3D,UAAM,cAAc;AAEpB,uBAAmB;AAAA,MACjB;AAAA,MACA,SAAS;AAAA,MACT,OAAO,WAAW;AAAA,MAClB,SAAS,CAAC,UAAU;AAClB,cAAM,IAAI,KAAK;AACf,aAAK,4BAA6B,QAAQ,GAAG,EAAE,MAAM,EAAE,QAAQ,MAAM,CAAC,CAAC;AACvE,aAAK,IAAI,gBAAgB;AAAA,MAC3B;AAAA,IACF,CAAC;AAED,mBAAe;AAAA,MACb,MAAM;AAAA,MACN,IAAI;AAAA,MACJ;AAAA,MACA,WAAW,WAAW,MAAM;AAAA,MAC5B,SAAS,CAAC,OAAO;AACf,oBAAY,EAAE,oBAAoB,GAAG,QAAQ,CAAC;AAC9C,aAAK,IAAI,gBAAgB;AAAA,MAC3B;AAAA,IACF,CAAC;AAAA,EACH;AACF;",
        "names": [
          "RealityDataType"
        ]
      }
    },
    {
      "name": "vite:define",
      "result": "\"use strict\";\nimport { assert, compareStringsOrUndefined } from \"@itwin/core-bentley\";\nimport { createCheckBox, createComboBox, createNestedMenu, createNumericInput } from \"@itwin/frontend-devtools\";\nimport {\n  CartographicRange,\n  RealityDataFormat,\n  RealityDataProvider,\n  RealityDataSourceKey,\n  SpatialClassifier,\n  SpatialClassifierInsideDisplay,\n  SpatialClassifierOutsideDisplay\n} from \"@itwin/core-common\";\nimport {\n  IModelApp,\n  SpatialModelState\n} from \"@itwin/core-frontend\";\nimport { DisplayTestApp } from \"./App\";\nimport { ToolBarDropDown } from \"./ToolBar\";\nimport { RealityDataAccessClient } from \"@itwin/reality-data-client\";\nfunction clearElement(element) {\n  while (element.hasChildNodes())\n    element.removeChild(element.firstChild);\n}\nconst NO_MODEL_ID = \"-1\";\nvar RealityDataType = /* @__PURE__ */ ((RealityDataType2) => {\n  RealityDataType2[\"REALITYMESH3DTILES\"] = \"REALITYMESH3DTILES\";\n  RealityDataType2[\"OSMBUILDINGS\"] = \"OSMBUILDINGS\";\n  RealityDataType2[\"OPC\"] = \"OPC\";\n  RealityDataType2[\"TERRAIN3DTILES\"] = \"TERRAIN3DTILES\";\n  RealityDataType2[\"OMR\"] = \"OMR\";\n  RealityDataType2[\"CESIUM3DTILES\"] = \"CESIUM3DTILES\";\n  RealityDataType2[\"UNKNOWN\"] = \"UNKNOWN\";\n  return RealityDataType2;\n})(RealityDataType || {});\nexport class ClassificationsPanel extends ToolBarDropDown {\n  constructor(vp, parent) {\n    super();\n    this._selectedSpatialClassifiersIndex = 0;\n    this._models = {};\n    // for IMJS_ITWIN_ID to work it should be define in your environment and you should be in signin mode with correct BUDDI region set\n    //  IMJS_STANDALONE_SIGNIN=true\n    //  IMJS_ITWIN_ID=\"fb1696c8-c074-4c76-a539-a5546e048cc6\"\n    this._iTwinId = DisplayTestApp.iTwinId;\n    this._vp = vp;\n    this._element = IModelApp.makeHTMLElement(\"div\", { parent, className: \"toolMenu\" });\n    this._realityModelListDiv = IModelApp.makeHTMLElement(\"div\", { parent: this._element });\n    this._modelListDiv = IModelApp.makeHTMLElement(\"div\", { parent: this._element });\n    this._propertiesDiv = IModelApp.makeHTMLElement(\"div\", { parent: this._element });\n    this._realityModelPickerMenu = createNestedMenu({\n      label: \"Reality Model Picker\"\n    });\n    this._element.style.display = \"block\";\n    this._element.style.cssFloat = \"left\";\n    this._element.style.width = \"max-content\";\n    this._element.style.minWidth = \"350px\";\n    this._element.appendChild(this._realityModelPickerMenu.div);\n  }\n  get _selectedClassifier() {\n    if (void 0 === this._selectedSpatialClassifiers)\n      return void 0;\n    const classifiers = this._selectedSpatialClassifiers;\n    if (void 0 !== classifiers.active)\n      return classifiers.active;\n    return void 0;\n  }\n  setAsActiveClassifier(modelProps) {\n    if (void 0 === this._selectedSpatialClassifiers)\n      return;\n    let classifier;\n    if (void 0 !== modelProps) {\n      const modelId = modelProps.id;\n      classifier = this._selectedSpatialClassifiers.find((x) => x.modelId === modelId);\n      if (!classifier)\n        classifier = this._selectedSpatialClassifiers.add(new SpatialClassifier(modelId, modelProps.name));\n    }\n    this._selectedSpatialClassifiers.setActive(classifier);\n    this.populateClassifierProperties();\n  }\n  createRealityDataSourceKeyFromITwinRealityData(iTwinRealityData) {\n    return {\n      provider: RealityDataProvider.ContextShare,\n      format: iTwinRealityData.type === \"OPC\" ? RealityDataFormat.OPC : RealityDataFormat.ThreeDTile,\n      id: iTwinRealityData.id\n    };\n  }\n  hasAttachedRealityModelFromKey(style, rdSourceKey) {\n    return void 0 !== style.settings.contextRealityModels.models.find((x) => x.rdSourceKey && RealityDataSourceKey.isEqual(rdSourceKey, x.rdSourceKey));\n  }\n  isSupportedType(type) {\n    if (type === void 0)\n      return false;\n    switch (type.toUpperCase()) {\n      case \"REALITYMESH3DTILES\" /* REALITYMESH3DTILES */:\n        return true;\n      case \"CESIUM3DTILES\" /* CESIUM3DTILES */:\n        return true;\n      case \"OPC\" /* OPC */:\n        return true;\n      case \"OSMBUILDINGS\" /* OSMBUILDINGS */:\n        return true;\n      case \"TERRAIN3DTILES\" /* TERRAIN3DTILES */:\n        return true;\n      case \"OMR\" /* OMR */:\n        return true;\n    }\n    return false;\n  }\n  isSupportedDisplayType(type) {\n    if (type === void 0)\n      return false;\n    if (this.isSupportedType(type)) {\n      switch (type.toUpperCase()) {\n        case \"OMR\" /* OMR */:\n          return false;\n        default:\n          return true;\n      }\n    }\n    return false;\n  }\n  async populateRealityModelsPicker() {\n    this._realityModelPickerMenu.div.style.display = \"none\";\n    clearElement(this._realityModelPickerMenu.body);\n    const view = this._vp.view;\n    const ecef = this._vp.iModel.ecefLocation;\n    if (!view.isSpatialView() || void 0 === ecef) {\n      return;\n    }\n    const range = new CartographicRange(this._vp.iModel.projectExtents, ecef.getTransform());\n    let available = { realityDatas: [] };\n    try {\n      if (this._iTwinId !== void 0 && IModelApp.authorizationClient) {\n        const accessToken = await IModelApp.authorizationClient.getAccessToken();\n        if (accessToken) {\n          const criteria = {\n            extent: range\n          };\n          const realityDataClientOptions = {\n            /** API Version. v1 by default */\n            // version?: ApiVersion;\n            /** API Url. Used to select environment. Defaults to \"https://api.bentley.com/realitydata\" */\n            baseUrl: `https://${{\"ALLUSERSPROFILE\":\"C:\\\\ProgramData\",\"ANDROID_NDK_ROOT\":\"d:\\\\android-ndk-r12b-windows-x86_64\\\\android-ndk-r12b\\\\\",\"APPDATA\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\",\"BBNODOC\":\"--buildDocDeferralRule=never\",\"BEGTEST_LOGGING_CONFIG\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\BeGTest\\\\gtest\\\\logging.config.xml\",\"BUILDARCHITECTURE\":\"x64\",\"BUILDIMODEL_SYMLINKS\":\"1\",\"BUILDSTRATEGY\":\"TYPESCRIPT\",\"CD1\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\core\\\\geometry\\\\\",\"CLANG_ENFORCE_OVERRIDE\":\"1\",\"COLOR\":\"0\",\"COMMONPROGRAMFILES\":\"C:\\\\Program Files\\\\Common Files\",\"COMMONPROGRAMFILES(X86)\":\"C:\\\\Program Files (x86)\\\\Common Files\",\"COMMONPROGRAMW6432\":\"C:\\\\Program Files\\\\Common Files\",\"COMPILEBGNETSTRUCTSBSPLINESUPPORT\":\"1\",\"COMPILEMTGBASE1\":\"1\",\"COMPILE_BVRANGETREE\":\"1\",\"COMPUTERNAME\":\"NAOU22376A\",\"COMSPEC\":\"C:\\\\Windows\\\\system32\\\\cmd.exe\",\"CONSOLECOLOR\":\"74\",\"CORESRC\":\"backend\\\\src clients\\\\src common\\\\src frontend\\\\src geometry\\\\src\",\"CUBESRC\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\\\\\ui\\\\framework\\\\src\\\\configurableui\\\\navigationaids\\\\\",\"CUBETEST\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\test-apps\\\\ui-test-app\\\\\",\"DEBUG\":\"1\",\"DRIVERDATA\":\"C:\\\\Windows\\\\System32\\\\Drivers\\\\DriverData\",\"EDITOR\":\"notepad.exe\",\"EXPAND_GEOMETRY_GENSRC\":\"1\",\"FPS_BROWSER_APP_PROFILE_STRING\":\"Internet Explorer\",\"FPS_BROWSER_USER_PROFILE_STRING\":\"Default\",\"GEMADIR\":\"d:\\\\source\\\\bsitools\\\\winnt\\\\gemascripts\\\\\",\"GEOMETRYCORE\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\core\\\\geometry\\\\\",\"GEOMETRYROOT\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\\\\\core\\\\geometry\",\"GEOMTESTOUTPUTDIR\":\"d:\\\\tmp\\\\geomtest\\\\\",\"GITBASEBRANCH\":\"master\",\"GITROOT\":\"hub2023A\",\"HGRCPATH\":\"C:\\\\DevTools\\\\Mercurial-BSI\\\\Mercurial\\\\mercurial.ini;%APPDATA%\\\\Mercurial-BSI\\\\mercurial.user.ini\",\"HOME\":\"C:\\\\Users\\\\Earlin.Lutz\",\"HOMEDRIVE\":\"C:\",\"HOMEPATH\":\"\\\\Users\\\\Earlin.Lutz\",\"INIT_CWD\":\"D:\\\\hub2023A\\\\itwinjs-core\\\\test-apps\\\\display-test-app\",\"LOCALAPPDATA\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Local\",\"LOGONSERVER\":\"\\\\\\\\BENTLEYDC5\",\"METASRCPATH\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\BentleyGeometryNet\\\\src\\\\Structs\\\\metasrc\\\\\",\"MS_ALLOW_EDIT_IMODEL\":\"1\",\"MS_FEATUREASPECTSBETA\":\"FeatureAspects_Interchange_RFA;FeatureAspects_Interchange_RFA_Import;FeatureAspects_Printing_Printing3D;FeatureAspects_Mesh_NewModify\",\"MS_IGNORE_ASSERTS\":\"1\",\"NODE\":\"C:\\\\Program Files\\\\nodejs\\\\node.exe\",\"NODE_ENV\":\"development\",\"NODE_EXE\":\"C:\\\\Program Files\\\\nodejs\\\\\\\\node.exe\",\"NODE_OPTIONS\":\"--max_old_space_size=8192\",\"NODE_PATH\":\"D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.pnpm\\\\vite@4.4.9\\\\node_modules\\\\vite\\\\bin\\\\node_modules;D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.pnpm\\\\vite@4.4.9\\\\node_modules\\\\vite\\\\node_modules;D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.pnpm\\\\vite@4.4.9\\\\node_modules;D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.pnpm\\\\node_modules;D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.pnpm\\\\cross-env@5.2.1\\\\node_modules\\\\cross-env\\\\dist\\\\bin\\\\node_modules;D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.pnpm\\\\cross-env@5.2.1\\\\node_modules\\\\cross-env\\\\dist\\\\node_modules;D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.pnpm\\\\cross-env@5.2.1\\\\node_modules\\\\cross-env\\\\node_modules;D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.pnpm\\\\cross-env@5.2.1\\\\node_modules;D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.pnpm\\\\node_modules\",\"NPM_CLI_JS\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\",\"npm_command\":\"run-script\",\"npm_config_always_auth\":\"true\",\"npm_config_cache\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Local\\\\npm-cache\",\"npm_config_globalconfig\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\\\\npm\\\\etc\\\\npmrc\",\"npm_config_global_prefix\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\\\\npm\",\"npm_config_init_module\":\"C:\\\\Users\\\\Earlin.Lutz\\\\.npm-init.js\",\"npm_config_local_prefix\":\"D:\\\\hub2023A\\\\itwinjs-core\\\\test-apps\\\\display-test-app\",\"npm_config_loglevel\":\"silent\",\"npm_config_metrics_registry\":\"https://registry.npmjs.org/\",\"npm_config_node_gyp\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\node_modules\\\\node-gyp\\\\bin\\\\node-gyp.js\",\"npm_config_noproxy\":\"\",\"npm_config_prefix\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\\\\npm\",\"npm_config_userconfig\":\"C:\\\\Users\\\\Earlin.Lutz\\\\.npmrc\",\"npm_config_user_agent\":\"npm/8.12.2 node/v18.14.1 win32 x64 workspaces/false\",\"npm_execpath\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\",\"npm_lifecycle_event\":\"build:frontend-vite\",\"npm_lifecycle_script\":\"cross-env NODE_OPTIONS=--max_old_space_size=8192 vite build\",\"npm_node_execpath\":\"C:\\\\Program Files\\\\nodejs\\\\node.exe\",\"npm_package_engines_node\":\"^18.0.0\",\"npm_package_json\":\"D:\\\\hub2023A\\\\itwinjs-core\\\\test-apps\\\\display-test-app\\\\package.json\",\"npm_package_name\":\"display-test-app\",\"npm_package_version\":\"1.8.0\",\"NPM_PREFIX_NPM_CLI_JS\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\",\"NUMBER_OF_PROCESSORS\":\"24\",\"ONEDRIVE\":\"C:\\\\Users\\\\Earlin.Lutz\\\\OneDrive - Bentley Systems, Inc\",\"ONEDRIVECOMMERCIAL\":\"C:\\\\Users\\\\Earlin.Lutz\\\\OneDrive - Bentley Systems, Inc\",\"OS\":\"Windows_NT\",\"OUTBASE\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\\\\\core\\\\geometry\\\\lib\\\\\",\"OUTROOT\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\\\\\core\\\\geometry\\\\lib\\\\\",\"PATH\":\"D:\\\\hub2023A\\\\itwinjs-core\\\\test-apps\\\\display-test-app\\\\node_modules\\\\.bin;D:\\\\hub2023A\\\\itwinjs-core\\\\test-apps\\\\node_modules\\\\.bin;D:\\\\hub2023A\\\\itwinjs-core\\\\node_modules\\\\.bin;D:\\\\hub2023A\\\\node_modules\\\\.bin;D:\\\\node_modules\\\\.bin;C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\node_modules\\\\@npmcli\\\\run-script\\\\lib\\\\node-gyp-bin;D:\\\\hub2023A\\\\itwinjs-core\\\\test-apps\\\\display-test-app\\\\node_modules\\\\.bin;D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.bin;C:\\\\Program Files (x86)\\\\Microsoft SDKs\\\\Azure\\\\CLI2\\\\wbin;C:\\\\DevTools\\\\python38\\\\Scripts\\\\;C:\\\\DevTools\\\\python38\\\\;C:\\\\Windows\\\\system32;C:\\\\Windows;C:\\\\Windows\\\\System32\\\\Wbem;C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\;C:\\\\Windows\\\\System32\\\\OpenSSH\\\\;C:\\\\DevTools\\\\Mercurial-BSI\\\\Mercurial\\\\;C:\\\\DevTools\\\\Mercurial-BSI\\\\KDiff3\\\\;C:\\\\Program Files\\\\TortoiseHg\\\\;C:\\\\Program Files\\\\Microsoft SQL Server\\\\130\\\\Tools\\\\Binn\\\\;C:\\\\Program Files\\\\dotnet\\\\;C:\\\\Program Files\\\\Microsoft SQL Server\\\\Client SDK\\\\ODBC\\\\170\\\\Tools\\\\Binn\\\\;C:\\\\Program Files\\\\nodejs\\\\;c:\\\\DevTools\\\\Git\\\\cmd;C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Local\\\\Microsoft\\\\WindowsApps;C:\\\\devtools\\\\cvsnt\\\\;C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Local\\\\Programs\\\\Microsoft VS Code\\\\bin;C:\\\\Users\\\\Earlin.Lutz\\\\.dotnet\\\\tools;C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\\\\npm;c:\\\\bin\\\\;c:\\\\bin\\\\build\\\\;d:\\\\hub2023A\\\\itwinjs-core\\\\bsitools\\\\anycpu;\",\"PATHEXT\":\".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JSE;.WSF;.WSH;.MSC;.PY;.PYW\",\"PROCESSOR_ARCHITECTURE\":\"AMD64\",\"PROCESSOR_IDENTIFIER\":\"Intel64 Family 6 Model 85 Stepping 4, GenuineIntel\",\"PROCESSOR_LEVEL\":\"6\",\"PROCESSOR_REVISION\":\"5504\",\"PROGRAMDATA\":\"C:\\\\ProgramData\",\"PROGRAMFILES\":\"C:\\\\Program Files\",\"PROGRAMFILES(X86)\":\"C:\\\\Program Files (x86)\",\"PROGRAMW6432\":\"C:\\\\Program Files\",\"PROMPT\":\"$P$G\",\"PSMODULEPATH\":\"C:\\\\Program Files\\\\WindowsPowerShell\\\\Modules;C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\Modules\",\"PUBLIC\":\"C:\\\\Users\\\\Public\",\"RUSHSTACK_FILE_ERROR_BASE_FOLDER\":\"D:\\\\hub2023A\\\\itwinjs-core\",\"RUSH_INVOKED_FOLDER\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\core\\\\geometry\",\"SESSIONNAME\":\"Console\",\"SRCROOT\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\\",\"SYSTEMDRIVE\":\"C:\",\"SYSTEMROOT\":\"C:\\\\Windows\",\"TEMP\":\"C:\\\\Users\\\\EARLIN~1.LUT\\\\AppData\\\\Local\\\\Temp\",\"TESTAPPS\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\test-apps\\\\\",\"TMP\":\"C:\\\\Users\\\\EARLIN~1.LUT\\\\AppData\\\\Local\\\\Temp\",\"TOOLCACHE\":\"d:\\\\toolcache\\\\\",\"UATDATA\":\"C:\\\\Windows\\\\CCM\\\\UATData\\\\D9F8C395-CAB8-491d-B8AC-179A1FE1BE77\",\"UIFRAMEWORK\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\ui\\\\framework\\\\\",\"USERDNSDOMAIN\":\"BENTLEY.COM\",\"USERDOMAIN\":\"BENTLEY\",\"USERDOMAIN_ROAMINGPROFILE\":\"BENTLEY\",\"USERNAME\":\"Earlin.Lutz\",\"USERPROFILE\":\"C:\\\\Users\\\\Earlin.Lutz\",\"USE_NEW_BB\":\"1\",\"UTILROOT\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\util\\\\\",\"WINDIR\":\"C:\\\\Windows\",\"WIPPARTENABLE_ANDROIDTOOLCACHE\":\"1\",\"_RUSH_LIB_PATH\":\"C:\\\\Users\\\\Earlin.Lutz\\\\.rush\\\\node-v18.14.1\\\\rush-5.99.0\\\\node_modules\\\\@microsoft\\\\rush-lib\\\\lib\\\\index.js\",\"_USTN_CONVERTASSERTSTOPRINTF\":\"1\",\"__PSLOCKDOWNPOLICY\":\"0\",\"__TAIL0__\":\"g\",\"__TAIL__\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\core\\\\geometry\\\\\"}.IMJS_URL_PREFIX}api.bentley.com/realitydata`\n          };\n          available = await new RealityDataAccessClient(realityDataClientOptions).getRealityDatas(accessToken, this._iTwinId, criteria);\n        }\n      }\n    } catch (_error) {\n      console.error(\"Error in query RealitydataList, you need to set IMJS_STANDALONE_SIGNIN=true, and is your IMJS_ITWIN_ID correctly set?\");\n    }\n    for (const rdEntry of available.realityDatas) {\n      const name = void 0 !== rdEntry.displayName ? rdEntry.displayName : rdEntry.id;\n      const rdSourceKey = this.createRealityDataSourceKeyFromITwinRealityData(rdEntry);\n      const tilesetUrl = await IModelApp.realityDataAccess?.getRealityDataUrl(this._iTwinId, rdSourceKey.id);\n      const isDisplaySupported = this.isSupportedDisplayType(rdEntry.type);\n      if (tilesetUrl && isDisplaySupported) {\n        const entry = {\n          rdSourceKey,\n          tilesetUrl,\n          name,\n          description: rdEntry?.description,\n          realityDataId: rdSourceKey.id\n        };\n        createCheckBox({\n          name,\n          id: RealityDataSourceKey.convertToString(rdSourceKey),\n          parent: this._realityModelPickerMenu.body,\n          isChecked: this.hasAttachedRealityModelFromKey(view.displayStyle, rdSourceKey),\n          handler: (checkbox) => this.toggle(entry, checkbox.checked)\n        });\n      }\n    }\n    IModelApp.makeHTMLElement(\"hr\", { parent: this._realityModelPickerMenu.body });\n    if (available.realityDatas.length > 0)\n      this._realityModelPickerMenu.div.style.display = \"block\";\n  }\n  populateRealityModelList() {\n    const realityModels = [];\n    this._vp.view.displayStyle.forEachRealityModel((contextModel) => {\n      const classifiers = contextModel.classifiers;\n      if (void 0 !== classifiers)\n        realityModels.push({ spatialClassifiers: classifiers, modelName: contextModel.name });\n    });\n    for (const loaded of this._vp.iModel.models)\n      if (loaded instanceof SpatialModelState && void 0 !== loaded.classifiers)\n        realityModels.push({ spatialClassifiers: loaded.classifiers, modelName: `${loaded.name} (attached)` });\n    const entries = realityModels.map((spatialClassifier, i) => {\n      return { name: spatialClassifier.modelName, value: i };\n    });\n    clearElement(this._realityModelListDiv);\n    const activeIndex = this._selectedSpatialClassifiersIndex;\n    createComboBox({\n      parent: this._realityModelListDiv,\n      id: \"ClassifierSelectionBox\",\n      name: \"Reality Models: \",\n      value: activeIndex,\n      handler: (select) => {\n        const valueIndex = Number.parseInt(select.value, 10);\n        this._selectedSpatialClassifiersIndex = valueIndex;\n        const spatialClassifier = valueIndex >= 0 ? realityModels[valueIndex].spatialClassifiers : void 0;\n        this.setSelectedClassification(spatialClassifier);\n      },\n      entries\n    });\n    if (void 0 !== realityModels[activeIndex])\n      this.setSelectedClassification(realityModels[activeIndex].spatialClassifiers);\n    else\n      this.setSelectedClassification(void 0);\n  }\n  async populateModelList() {\n    const view = this._vp.view;\n    assert(void 0 !== view && view.isSpatialView());\n    const query = { from: SpatialModelState.classFullName, wantPrivate: false };\n    const props = await view.iModel.models.queryProps(query);\n    props.sort((lhs, rhs) => compareStringsOrUndefined(lhs.name, rhs.name));\n    const entries = [{ name: \"None\", value: NO_MODEL_ID }];\n    this._models = {};\n    props.forEach((prop) => {\n      if (void 0 !== prop.id && void 0 !== prop.name) {\n        entries.push({ name: prop.name, value: prop.id });\n        this._models[prop.id] = prop;\n      }\n    });\n    clearElement(this._modelListDiv);\n    this._modelComboBox = createComboBox({\n      entries,\n      parent: this._modelListDiv,\n      id: \"classifiers_modelBox\",\n      name: \"Active Classifier: \",\n      value: void 0 !== this._selectedClassifier ? this._selectedClassifier.modelId : void 0,\n      handler: (select) => {\n        this.setAsActiveClassifier(this._models[select.value]);\n        this.populateRealityModelList();\n        this._vp.invalidateScene();\n      }\n    });\n  }\n  async populate() {\n    this._selectedSpatialClassifiers = void 0;\n    if (this._vp.view.is2d())\n      return;\n    this._realityModelPickerMenu.div.style.display = \"none\";\n    this.populateRealityModelList();\n    await this.populateRealityModelsPicker();\n    await this.populateModelList();\n  }\n  get isOpen() {\n    return \"none\" !== this._element.style.display;\n  }\n  _open() {\n    this.populateRealityModelList();\n    this._element.style.display = \"block\";\n  }\n  _close() {\n    this._element.style.display = \"none\";\n  }\n  get onViewChanged() {\n    return this.populate();\n  }\n  updateModelComboBox(modelId) {\n    if (void 0 !== this._modelComboBox)\n      this._modelComboBox.select.value = modelId;\n  }\n  detachRealityModelByKey(style, rdSourceKey) {\n    const model = style.settings.contextRealityModels.models.find((x) => x.rdSourceKey && RealityDataSourceKey.isEqual(rdSourceKey, x.rdSourceKey));\n    return void 0 !== model && style.settings.contextRealityModels.delete(model);\n  }\n  toggle(entry, enabled) {\n    const view = this._vp.view;\n    const style = view.getDisplayStyle3d();\n    if (enabled)\n      style.attachRealityModel(entry);\n    else\n      entry.rdSourceKey ? this.detachRealityModelByKey(style, entry.rdSourceKey) : style.detachRealityModelByNameAndUrl(entry.name, entry.tilesetUrl);\n    this.populateRealityModelList();\n    this._vp.invalidateScene();\n  }\n  setSelectedClassification(spatialClassifiers) {\n    this._selectedSpatialClassifiers = spatialClassifiers;\n    if (void 0 === spatialClassifiers) {\n      this.updateModelComboBox(NO_MODEL_ID);\n      this.populateClassifierProperties();\n      return;\n    }\n    const classifier = spatialClassifiers.active;\n    if (void 0 === classifier) {\n      this.updateModelComboBox(NO_MODEL_ID);\n      this.populateClassifierProperties();\n      return;\n    }\n    this.updateModelComboBox(classifier.modelId);\n    this.populateClassifierProperties();\n  }\n  populateClassifierProperties() {\n    const classifier = this._selectedClassifier;\n    const parent = this._propertiesDiv;\n    clearElement(parent);\n    if (void 0 === classifier)\n      return;\n    const outsideEntries = [\n      { name: \"Off\", value: SpatialClassifierOutsideDisplay.Off },\n      { name: \"On\", value: SpatialClassifierOutsideDisplay.On },\n      { name: \"Dimmed\", value: SpatialClassifierOutsideDisplay.Dimmed }\n    ];\n    const insideEntries = [\n      { name: \"Off\", value: SpatialClassifierInsideDisplay.Off },\n      { name: \"On\", value: SpatialClassifierInsideDisplay.On },\n      { name: \"Dimmed\", value: SpatialClassifierInsideDisplay.Dimmed },\n      { name: \"Hilite\", value: SpatialClassifierInsideDisplay.Hilite },\n      { name: \"Element Color\", value: SpatialClassifierInsideDisplay.ElementColor }\n    ];\n    const updateFlags = (newFlags) => {\n      const c = this._selectedClassifier;\n      this._selectedSpatialClassifiers.replace(c, c.clone({ flags: c.flags.clone(newFlags) }));\n    };\n    createComboBox({\n      name: \"Inside: \",\n      id: \"InsideComboBox\",\n      parent,\n      entries: insideEntries,\n      handler: (select) => {\n        const newValue = Number.parseInt(select.value, 10);\n        updateFlags({ inside: newValue });\n        this._vp.invalidateScene();\n      },\n      value: classifier.flags.inside\n    });\n    createComboBox({\n      name: \"Outside: \",\n      id: \"OutsideComboBox\",\n      parent,\n      entries: outsideEntries,\n      handler: (select) => {\n        const newValue = Number.parseInt(select.value, 10);\n        updateFlags({ outside: newValue });\n        this._vp.invalidateScene();\n      },\n      value: classifier.flags.outside\n    });\n    const label = IModelApp.makeHTMLElement(\"label\", { parent });\n    label.textContent = \"Expansion: \";\n    createNumericInput({\n      parent,\n      display: \"inline\",\n      value: classifier.expand,\n      handler: (value) => {\n        const c = this._selectedClassifier;\n        this._selectedSpatialClassifiers.replace(c, c.clone({ expand: value }));\n        this._vp.invalidateScene();\n      }\n    });\n    createCheckBox({\n      name: \"Volume: \",\n      id: \"cbxVolumeClassifier\",\n      parent,\n      isChecked: classifier.flags.isVolumeClassifier,\n      handler: (cb) => {\n        updateFlags({ isVolumeClassifier: cb.checked });\n        this._vp.invalidateScene();\n      }\n    });\n  }\n}\n",
      "start": 1693508124781,
      "end": 1693508124782,
      "order": "normal",
      "sourcemaps": null
    }
  ]
}
