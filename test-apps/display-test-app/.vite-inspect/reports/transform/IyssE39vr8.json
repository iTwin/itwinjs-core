{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/SubCategoryAppearance.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Symbology\n */\nimport { Id64, JsonUtils } from \"@itwin/core-bentley\";\nimport { ColorDef } from \"./ColorDef\";\n/** Parameters that define the way geometry on a [[SubCategory]] appears.\n * SubCategoryAppearance describes the intrinsic appearance of geometry belonging to that SubCategory, independent of a particular [[ViewState]].\n * Aspects of a SubCategory's appearance can be overridden in the context of a particular [[ViewState]] through the use of [[SubCategoryOverride]]s.\n * @public\n */\nclass SubCategoryAppearance {\n    /** The fill color of geometry marked as being filled.\n     * @note The transparency component of the fill color is ignored.\n     * @see [[SubCategoryAppearance.fillTransparency]].\n     */\n    get fillColor() { return (undefined !== this._fillColor ? this._fillColor : this.color); }\n    /** A value in the range [0, 1] indicating the fill transparency of the geometry where 0.0 means \"fully opaque\" and 1.0 means \"fully transparent\". */\n    get fillTransparency() { return (undefined !== this._fillTransparency ? this._fillTransparency : this.transparency); }\n    constructor(props) {\n        if (!props) {\n            this.color = ColorDef.black;\n            this.weight = 0;\n            this.priority = 0;\n            this.transparency = 0;\n            this.invisible = this.dontPlot = this.dontSnap = this.dontLocate = false;\n            this.styleId = Id64.invalid;\n            this.materialId = Id64.invalid;\n            return;\n        }\n        this.invisible = JsonUtils.asBool(props.invisible);\n        this.dontSnap = JsonUtils.asBool(props.dontSnap);\n        this.dontLocate = JsonUtils.asBool(props.dontLocate);\n        this.dontPlot = JsonUtils.asBool(props.dontPlot);\n        this.color = ColorDef.fromJSON(props.color);\n        this.weight = JsonUtils.asInt(props.weight);\n        this.styleId = Id64.fromJSON(props.style);\n        this.priority = JsonUtils.asInt(props.priority);\n        this.materialId = Id64.fromJSON(props.material);\n        this.transparency = JsonUtils.asDouble(props.transp);\n        if (props.fill)\n            this._fillColor = ColorDef.fromJSON(props.fill);\n        if (props.transpFill)\n            this._fillTransparency = JsonUtils.asDouble(props.transpFill);\n    }\n    equals(other) {\n        return this.invisible === other.invisible &&\n            this.dontPlot === other.dontPlot &&\n            this.dontSnap === other.dontSnap &&\n            this.dontLocate === other.dontLocate &&\n            this.color.equals(other.color) &&\n            this.weight === other.weight &&\n            this.priority === other.priority &&\n            this.styleId === other.styleId &&\n            this.materialId === other.materialId &&\n            this.transparency === other.transparency &&\n            this.fillColor.equals(other.fillColor) &&\n            this.fillTransparency === other.fillTransparency;\n    }\n    /** @internal */\n    toJSON() {\n        const val = { color: this.color.toJSON() };\n        if (this.invisible)\n            val.invisible = true;\n        if (this.dontPlot)\n            val.dontPlot = true;\n        if (this.dontSnap)\n            val.dontSnap = true;\n        if (this.dontLocate)\n            val.dontLocate = true;\n        if (0 !== this.weight)\n            val.weight = this.weight;\n        if (0 !== this.priority)\n            val.priority = this.priority;\n        if (Id64.isValid(this.styleId))\n            val.style = this.styleId;\n        if (Id64.isValid(this.materialId))\n            val.material = this.materialId;\n        if (0.0 !== this.transparency)\n            val.transp = this.transparency;\n        if (this._fillColor)\n            val.fill = this._fillColor.toJSON();\n        if (this._fillTransparency)\n            val.transpFill = this._fillTransparency;\n        return val;\n    }\n    clone() { return new SubCategoryAppearance(this.toJSON()); }\n}\nSubCategoryAppearance.defaults = new SubCategoryAppearance();\nexport { SubCategoryAppearance };\n//# sourceMappingURL=SubCategoryAppearance.js.map",
      "start": 1693508120969,
      "end": 1693508121025,
      "sourcemaps": null
    }
  ]
}
