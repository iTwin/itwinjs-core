{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/Fence.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { EmphasizeElements, IModelApp, ScreenViewport, Tool } from \"@itwin/core-frontend\";\r\nimport { BentleyStatus, Id64, Id64Array } from \"@itwin/core-bentley\";\r\nimport { ClipPlaneContainment, ClipVector } from \"@itwin/core-geometry\";\r\nimport { ColorDef, GeometryContainmentRequestProps } from \"@itwin/core-common\";\r\n\r\n/** Color code current selection set based on containment with current view clip.\r\n * For selecting elements outside clip, turn off clipvolume in view settings dialog.\r\n * Use EDIT on clip tools dialog to re-display clip decoration after classification.\r\n */\r\nexport class FenceClassifySelectedTool extends Tool {\r\n  public static override toolId = \"Fence.ClassifySelected\";\r\n  public static override get minArgs() { return 0; }\r\n  public static override get maxArgs() { return 1; }\r\n\r\n  public async doClassify(vp: ScreenViewport, candidates: Id64Array, clip: ClipVector, allowOverlaps: boolean): Promise<void> {\r\n    const requestProps: GeometryContainmentRequestProps = {\r\n      candidates,\r\n      clip: clip.toJSON(),\r\n      allowOverlaps,\r\n      viewFlags: vp.viewFlags.toJSON(),\r\n    };\r\n\r\n    const result = await vp.iModel.getGeometryContainment(requestProps);\r\n    if (BentleyStatus.SUCCESS !== result.status || undefined === result.candidatesContainment)\r\n      return;\r\n\r\n    const inside: Id64Array = [];\r\n    const outside: Id64Array = [];\r\n    const overlap: Id64Array = [];\r\n\r\n    result.candidatesContainment.forEach((val, index) => {\r\n      switch (val) {\r\n        case ClipPlaneContainment.StronglyInside:\r\n          inside.push(candidates[index]);\r\n          break;\r\n        case ClipPlaneContainment.Ambiguous:\r\n          overlap.push(candidates[index]);\r\n          break;\r\n        case ClipPlaneContainment.StronglyOutside:\r\n          outside.push(candidates[index]);\r\n          break;\r\n      }\r\n    });\r\n\r\n    EmphasizeElements.getOrCreate(vp).overrideElements(inside, vp, ColorDef.green);\r\n    EmphasizeElements.getOrCreate(vp).overrideElements(outside, vp, ColorDef.red);\r\n    EmphasizeElements.getOrCreate(vp).overrideElements(overlap, vp, ColorDef.blue);\r\n    EmphasizeElements.getOrCreate(vp).defaultAppearance = EmphasizeElements.getOrCreate(vp).createDefaultAppearance();\r\n  }\r\n\r\n  public override async run(insideOnly?: true | undefined): Promise<boolean> {\r\n    const vp = IModelApp.viewManager.selectedView;\r\n    if (undefined === vp)\r\n      return false;\r\n\r\n    const isActive = EmphasizeElements.getOrCreate(vp).isActive(vp);\r\n    EmphasizeElements.clear(vp);\r\n\r\n    if (undefined === vp.view.getViewClip() || !vp.iModel.selectionSet.isActive)\r\n      return !isActive;\r\n\r\n    const candidates: Id64Array = [];\r\n    vp.iModel.selectionSet.elements.forEach((val) => {\r\n      if (!Id64.isInvalid(val) && !Id64.isTransient(val))\r\n        candidates.push(val);\r\n    });\r\n\r\n    if (0 === candidates.length)\r\n      return false;\r\n\r\n    vp.iModel.selectionSet.emptyAll();\r\n    await this.doClassify(vp, candidates, vp.view.getViewClip()!, insideOnly ? false : true);\r\n    return true;\r\n  }\r\n\r\n  public override async parseAndRun(...args: string[]): Promise<boolean> {\r\n    const insideOnly = (undefined !== args[0] && \"inside\" === args[0].toLowerCase()) ? true : undefined;\r\n    await this.run(insideOnly);\r\n    return true;\r\n  }\r\n}\r\n",
      "start": 1693508121192,
      "end": 1693508121255,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { EmphasizeElements, IModelApp, Tool } from \"@itwin/core-frontend\";\nimport { BentleyStatus, Id64 } from \"@itwin/core-bentley\";\nimport { ClipPlaneContainment } from \"@itwin/core-geometry\";\nimport { ColorDef } from \"@itwin/core-common\";\nexport class FenceClassifySelectedTool extends Tool {\n  static get minArgs() {\n    return 0;\n  }\n  static get maxArgs() {\n    return 1;\n  }\n  async doClassify(vp, candidates, clip, allowOverlaps) {\n    const requestProps = {\n      candidates,\n      clip: clip.toJSON(),\n      allowOverlaps,\n      viewFlags: vp.viewFlags.toJSON()\n    };\n    const result = await vp.iModel.getGeometryContainment(requestProps);\n    if (BentleyStatus.SUCCESS !== result.status || void 0 === result.candidatesContainment)\n      return;\n    const inside = [];\n    const outside = [];\n    const overlap = [];\n    result.candidatesContainment.forEach((val, index) => {\n      switch (val) {\n        case ClipPlaneContainment.StronglyInside:\n          inside.push(candidates[index]);\n          break;\n        case ClipPlaneContainment.Ambiguous:\n          overlap.push(candidates[index]);\n          break;\n        case ClipPlaneContainment.StronglyOutside:\n          outside.push(candidates[index]);\n          break;\n      }\n    });\n    EmphasizeElements.getOrCreate(vp).overrideElements(inside, vp, ColorDef.green);\n    EmphasizeElements.getOrCreate(vp).overrideElements(outside, vp, ColorDef.red);\n    EmphasizeElements.getOrCreate(vp).overrideElements(overlap, vp, ColorDef.blue);\n    EmphasizeElements.getOrCreate(vp).defaultAppearance = EmphasizeElements.getOrCreate(vp).createDefaultAppearance();\n  }\n  async run(insideOnly) {\n    const vp = IModelApp.viewManager.selectedView;\n    if (void 0 === vp)\n      return false;\n    const isActive = EmphasizeElements.getOrCreate(vp).isActive(vp);\n    EmphasizeElements.clear(vp);\n    if (void 0 === vp.view.getViewClip() || !vp.iModel.selectionSet.isActive)\n      return !isActive;\n    const candidates = [];\n    vp.iModel.selectionSet.elements.forEach((val) => {\n      if (!Id64.isInvalid(val) && !Id64.isTransient(val))\n        candidates.push(val);\n    });\n    if (0 === candidates.length)\n      return false;\n    vp.iModel.selectionSet.emptyAll();\n    await this.doClassify(vp, candidates, vp.view.getViewClip(), insideOnly ? false : true);\n    return true;\n  }\n  async parseAndRun(...args) {\n    const insideOnly = void 0 !== args[0] && \"inside\" === args[0].toLowerCase() ? true : void 0;\n    await this.run(insideOnly);\n    return true;\n  }\n}\nFenceClassifySelectedTool.toolId = \"Fence.ClassifySelected\";\n",
      "start": 1693508121255,
      "end": 1693508121398,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/Fence.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { EmphasizeElements, IModelApp, ScreenViewport, Tool } from \"@itwin/core-frontend\";\r\nimport { BentleyStatus, Id64, Id64Array } from \"@itwin/core-bentley\";\r\nimport { ClipPlaneContainment, ClipVector } from \"@itwin/core-geometry\";\r\nimport { ColorDef, GeometryContainmentRequestProps } from \"@itwin/core-common\";\r\n\r\n/** Color code current selection set based on containment with current view clip.\r\n * For selecting elements outside clip, turn off clipvolume in view settings dialog.\r\n * Use EDIT on clip tools dialog to re-display clip decoration after classification.\r\n */\r\nexport class FenceClassifySelectedTool extends Tool {\r\n  public static override toolId = \"Fence.ClassifySelected\";\r\n  public static override get minArgs() { return 0; }\r\n  public static override get maxArgs() { return 1; }\r\n\r\n  public async doClassify(vp: ScreenViewport, candidates: Id64Array, clip: ClipVector, allowOverlaps: boolean): Promise<void> {\r\n    const requestProps: GeometryContainmentRequestProps = {\r\n      candidates,\r\n      clip: clip.toJSON(),\r\n      allowOverlaps,\r\n      viewFlags: vp.viewFlags.toJSON(),\r\n    };\r\n\r\n    const result = await vp.iModel.getGeometryContainment(requestProps);\r\n    if (BentleyStatus.SUCCESS !== result.status || undefined === result.candidatesContainment)\r\n      return;\r\n\r\n    const inside: Id64Array = [];\r\n    const outside: Id64Array = [];\r\n    const overlap: Id64Array = [];\r\n\r\n    result.candidatesContainment.forEach((val, index) => {\r\n      switch (val) {\r\n        case ClipPlaneContainment.StronglyInside:\r\n          inside.push(candidates[index]);\r\n          break;\r\n        case ClipPlaneContainment.Ambiguous:\r\n          overlap.push(candidates[index]);\r\n          break;\r\n        case ClipPlaneContainment.StronglyOutside:\r\n          outside.push(candidates[index]);\r\n          break;\r\n      }\r\n    });\r\n\r\n    EmphasizeElements.getOrCreate(vp).overrideElements(inside, vp, ColorDef.green);\r\n    EmphasizeElements.getOrCreate(vp).overrideElements(outside, vp, ColorDef.red);\r\n    EmphasizeElements.getOrCreate(vp).overrideElements(overlap, vp, ColorDef.blue);\r\n    EmphasizeElements.getOrCreate(vp).defaultAppearance = EmphasizeElements.getOrCreate(vp).createDefaultAppearance();\r\n  }\r\n\r\n  public override async run(insideOnly?: true | undefined): Promise<boolean> {\r\n    const vp = IModelApp.viewManager.selectedView;\r\n    if (undefined === vp)\r\n      return false;\r\n\r\n    const isActive = EmphasizeElements.getOrCreate(vp).isActive(vp);\r\n    EmphasizeElements.clear(vp);\r\n\r\n    if (undefined === vp.view.getViewClip() || !vp.iModel.selectionSet.isActive)\r\n      return !isActive;\r\n\r\n    const candidates: Id64Array = [];\r\n    vp.iModel.selectionSet.elements.forEach((val) => {\r\n      if (!Id64.isInvalid(val) && !Id64.isTransient(val))\r\n        candidates.push(val);\r\n    });\r\n\r\n    if (0 === candidates.length)\r\n      return false;\r\n\r\n    vp.iModel.selectionSet.emptyAll();\r\n    await this.doClassify(vp, candidates, vp.view.getViewClip()!, insideOnly ? false : true);\r\n    return true;\r\n  }\r\n\r\n  public override async parseAndRun(...args: string[]): Promise<boolean> {\r\n    const insideOnly = (undefined !== args[0] && \"inside\" === args[0].toLowerCase()) ? true : undefined;\r\n    await this.run(insideOnly);\r\n    return true;\r\n  }\r\n}\r\n"
        ],
        "mappings": ";AAKA,SAAS,mBAAmB,WAA2B,YAAY;AACnE,SAAS,eAAe,YAAuB;AAC/C,SAAS,4BAAwC;AACjD,SAAS,gBAAiD;AAMnD,aAAM,kCAAkC,KAAK;AAAA,EAElD,WAA2B,UAAU;AAAE,WAAO;AAAA,EAAG;AAAA,EACjD,WAA2B,UAAU;AAAE,WAAO;AAAA,EAAG;AAAA,EAEjD,MAAa,WAAW,IAAoB,YAAuB,MAAkB,eAAuC;AAC1H,UAAM,eAAgD;AAAA,MACpD;AAAA,MACA,MAAM,KAAK,OAAO;AAAA,MAClB;AAAA,MACA,WAAW,GAAG,UAAU,OAAO;AAAA,IACjC;AAEA,UAAM,SAAS,MAAM,GAAG,OAAO,uBAAuB,YAAY;AAClE,QAAI,cAAc,YAAY,OAAO,UAAU,WAAc,OAAO;AAClE;AAEF,UAAM,SAAoB,CAAC;AAC3B,UAAM,UAAqB,CAAC;AAC5B,UAAM,UAAqB,CAAC;AAE5B,WAAO,sBAAsB,QAAQ,CAAC,KAAK,UAAU;AACnD,cAAQ,KAAK;AAAA,QACX,KAAK,qBAAqB;AACxB,iBAAO,KAAK,WAAW,KAAK,CAAC;AAC7B;AAAA,QACF,KAAK,qBAAqB;AACxB,kBAAQ,KAAK,WAAW,KAAK,CAAC;AAC9B;AAAA,QACF,KAAK,qBAAqB;AACxB,kBAAQ,KAAK,WAAW,KAAK,CAAC;AAC9B;AAAA,MACJ;AAAA,IACF,CAAC;AAED,sBAAkB,YAAY,EAAE,EAAE,iBAAiB,QAAQ,IAAI,SAAS,KAAK;AAC7E,sBAAkB,YAAY,EAAE,EAAE,iBAAiB,SAAS,IAAI,SAAS,GAAG;AAC5E,sBAAkB,YAAY,EAAE,EAAE,iBAAiB,SAAS,IAAI,SAAS,IAAI;AAC7E,sBAAkB,YAAY,EAAE,EAAE,oBAAoB,kBAAkB,YAAY,EAAE,EAAE,wBAAwB;AAAA,EAClH;AAAA,EAEA,MAAsB,IAAI,YAAiD;AACzE,UAAM,KAAK,UAAU,YAAY;AACjC,QAAI,WAAc;AAChB,aAAO;AAET,UAAM,WAAW,kBAAkB,YAAY,EAAE,EAAE,SAAS,EAAE;AAC9D,sBAAkB,MAAM,EAAE;AAE1B,QAAI,WAAc,GAAG,KAAK,YAAY,KAAK,CAAC,GAAG,OAAO,aAAa;AACjE,aAAO,CAAC;AAEV,UAAM,aAAwB,CAAC;AAC/B,OAAG,OAAO,aAAa,SAAS,QAAQ,CAAC,QAAQ;AAC/C,UAAI,CAAC,KAAK,UAAU,GAAG,KAAK,CAAC,KAAK,YAAY,GAAG;AAC/C,mBAAW,KAAK,GAAG;AAAA,IACvB,CAAC;AAED,QAAI,MAAM,WAAW;AACnB,aAAO;AAET,OAAG,OAAO,aAAa,SAAS;AAChC,UAAM,KAAK,WAAW,IAAI,YAAY,GAAG,KAAK,YAAY,GAAI,aAAa,QAAQ,IAAI;AACvF,WAAO;AAAA,EACT;AAAA,EAEA,MAAsB,eAAe,MAAkC;AACrE,UAAM,aAAc,WAAc,KAAK,CAAC,KAAK,aAAa,KAAK,CAAC,EAAE,YAAY,IAAK,OAAO;AAC1F,UAAM,KAAK,IAAI,UAAU;AACzB,WAAO;AAAA,EACT;AACF;AAvEa,0BACY,SAAS;",
        "names": []
      }
    }
  ]
}
