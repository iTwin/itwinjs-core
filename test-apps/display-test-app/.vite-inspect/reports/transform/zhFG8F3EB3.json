{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/bentley/lib/esm/OrderedSet.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Collections\n */\nimport { shallowClone, SortedArray } from \"./SortedArray\";\n/** A read-only equivalent of `Set<T>` that maintains its elements in sorted order as specified by a comparison function.\n * Iteration returns elements in the order specified by the comparison function, as opposed to `Set` which returns elements in insertion order.\n * Implemented in terms of [[SortedArray]].\n * @public\n */\nexport class ReadonlyOrderedSet {\n    /** Construct a new ReadonlyOrderedSet<T>.\n     * @param compare The function used to compare elements within the set, determining their ordering.\n     * @param clone The function invoked to clone a new element for insertion into the set. The default implementation simply returns its input.\n     */\n    constructor(compare, clone = shallowClone) {\n        this._array = new SortedArray(compare, false, clone);\n    }\n    /** The number of elements in the set. */\n    get size() {\n        return this._array.length;\n    }\n    /** Returns true if `value` is present in the set. */\n    has(value) {\n        return -1 !== this._array.indexOf(value);\n    }\n    /** Iterate over the elements in sorted order (as opposed to `Set`'s iterator, which returns elements in insertion order). */\n    [Symbol.iterator]() {\n        return this._array[Symbol.iterator]();\n    }\n}\n/** A mutable [[ReadonlyOrderedSet]].\n * @public\n */\nexport class OrderedSet extends ReadonlyOrderedSet {\n    /** Construct a new OrderedSet<T>.\n     * @param compare The function used to compare elements within the set, determining their ordering.\n     * @param clone The function invoked to clone a new element for insertion into the set. The default implementation simply returns its input.\n     */\n    constructor(compare, clone = shallowClone) {\n        super(compare, clone);\n    }\n    /** Remove all elements from the set. */\n    clear() {\n        this._array.clear();\n    }\n    /** Add the specified element to the set. Returns this set. */\n    add(value) {\n        this._array.insert(value);\n        return this;\n    }\n    /** Removes the specified element from the set. Returns `true` if the element was present. */\n    delete(value) {\n        return -1 !== this._array.remove(value);\n    }\n}\n//# sourceMappingURL=OrderedSet.js.map",
      "start": 1693508120599,
      "end": 1693508120670,
      "sourcemaps": null
    }
  ]
}
