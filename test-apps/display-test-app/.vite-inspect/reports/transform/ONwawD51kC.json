{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/system/buffer/ABuffer.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\n/**\n * Class ABuffer defines a raw byte buffer.\n */\n/** @internal */\nexport class ABuffer {\n    /**\n     * Create a new buffer.\n     */\n    constructor(size) {\n        this._content = (size < 0) ? null : new ArrayBuffer(size);\n        this._contentBytes = (size < 0) ? null : new Uint8Array(this._content);\n    }\n    /**\n     * Wrap an existing buffer.\n     */\n    static wrap(buffer) {\n        let wrapper = new ABuffer(-1);\n        wrapper._content = buffer;\n        wrapper._contentBytes = new Uint8Array(wrapper._content);\n        return wrapper;\n    }\n    /**\n     * Wrap an existing buffer.\n     */\n    static wrapRange(buffer, offset, size) {\n        /* The whole buffer? */\n        if ((offset == 0) && (size == buffer.byteLength))\n            return ABuffer.wrap(buffer);\n        /* Copy the range */\n        let original = ABuffer.wrap(buffer);\n        let wrapper = new ABuffer(size);\n        ABuffer.arrayCopy(original, offset, wrapper, 0, size);\n        return wrapper;\n    }\n    /**\n     * Return the content as a native buffer\n     */\n    toNativeBuffer() {\n        return this._content;\n    }\n    /**\n     * Get the size of the buffer.\n     */\n    size() {\n        return this._contentBytes.byteLength;\n    }\n    /**\n     * Get a byte (0..255).\n     */\n    get(index) {\n        return this._contentBytes[index];\n    }\n    /**\n     * Set a byte.\n     */\n    set(index, value) {\n        this._contentBytes[index] = value;\n    }\n    /**\n     * Slice a part of the buffer.\n     */\n    slice(begin, end) {\n        if (begin < 0)\n            begin += this._content.byteLength;\n        if (end < 0)\n            end += this._content.byteLength;\n        let result = new ABuffer(end - begin);\n        for (let i = 0; i < result._content.byteLength; i++)\n            result.set(i, this.get(begin + i));\n        return result;\n    }\n    /**\n     * Copy data from a source to a target buffer.\n     */\n    static arrayCopy(source, sourceIndex, target, targetIndex, count) {\n        for (let i = 0; i < count; i++)\n            target.set(targetIndex++, source.get(sourceIndex++));\n    }\n}\n//# sourceMappingURL=ABuffer.js.map",
      "start": 1693508126549,
      "end": 1693508126631,
      "sourcemaps": null
    }
  ]
}
