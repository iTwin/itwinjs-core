{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/geometry/ImageGraphic.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Geometry\n */\nimport { Point3d, Range3d } from \"@itwin/core-geometry\";\n/** Defines the 4 corners of an [[ImageGraphic]]. The points are expected to lie in a single plane and define a (possibly-skewed) quadrilateral.\n * The points map to the corners of the image as follows:\n * `\n *  3____2\n *  |    |\n *  |____|\n *  0    1\n * `\n * The image can be flipped and/or rotated by specifying the points in a different order.\n * @public\n */\nexport class ImageGraphicCorners {\n    constructor(p0, p1, p2, p3) {\n        this[0] = p0;\n        this[1] = p1;\n        this[2] = p2;\n        this[3] = p3;\n    }\n    static fromJSON(props) {\n        return new ImageGraphicCorners(Point3d.fromJSON(props[0]), Point3d.fromJSON(props[1]), Point3d.fromJSON(props[2]), Point3d.fromJSON(props[3]));\n    }\n    static from4Points(points) {\n        return new ImageGraphicCorners(points[0], points[1], points[2], points[3]);\n    }\n    clone() {\n        return new ImageGraphicCorners(this[0].clone(), this[1].clone(), this[2].clone(), this[3].clone());\n    }\n    toJSON() {\n        return [this[0].toJSON(), this[1].toJSON(), this[2].toJSON(), this[3].toJSON()];\n    }\n}\n/** A geometric primitive that displays an image mapped to the corners of a quadrilateral, with an optional border.\n * The image is always displayed regardless of [[RenderMode]] or [[ViewFlags]], and is displayed without lighting.\n * @public\n */\nexport class ImageGraphic {\n    /** Construct a new ImageGraphic.\n     * @param corners Defines the 4 corners of the quadrilateral on which the image is to be displayed. The ImageGraphic takes ownership of this input.\n     * @param textureId Identifies a persistent [[Texture]] element defining the image to be mapped onto the quadrilateral.\n     * @param hasBorder Whether or not to display a border around the image.\n     */\n    constructor(corners, textureId, hasBorder = false) {\n        this.corners = corners;\n        this.textureId = textureId;\n        this.hasBorder = hasBorder;\n    }\n    static fromJSON(props) {\n        const corners = ImageGraphicCorners.fromJSON(props.corners);\n        return new ImageGraphic(corners, props.textureId, props.hasBorder);\n    }\n    clone() {\n        return new ImageGraphic(this.corners.clone(), this.textureId, this.hasBorder);\n    }\n    cloneTransformed(transform) {\n        const clone = this.clone();\n        clone.transformInPlace(transform);\n        return clone;\n    }\n    toJSON() {\n        return {\n            corners: this.corners.toJSON(),\n            textureId: this.textureId,\n            hasBorder: this.hasBorder,\n        };\n    }\n    /** Computes and returns the range.\n     * @param result If supplied, will be modified to hold the computed range and returned.\n     * @returns The computed range.\n     */\n    computeRange(result) {\n        if (undefined === result)\n            result = new Range3d();\n        else\n            result.setNull();\n        result.extend(this.corners[0], this.corners[1], this.corners[2], this.corners[3]);\n        return result;\n    }\n    /** Apply a transform to the corners of the quadrilateral. */\n    transformInPlace(transform) {\n        transform.multiplyPoint3d(this.corners[0], this.corners[0]);\n        transform.multiplyPoint3d(this.corners[1], this.corners[1]);\n        transform.multiplyPoint3d(this.corners[2], this.corners[2]);\n        transform.multiplyPoint3d(this.corners[3], this.corners[3]);\n    }\n}\n//# sourceMappingURL=ImageGraphic.js.map",
      "start": 1693508120778,
      "end": 1693508120883,
      "sourcemaps": null
    }
  ]
}
