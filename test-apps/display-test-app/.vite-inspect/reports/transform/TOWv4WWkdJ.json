{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/geometry/lib/esm/polyface/multiclip/GriddedRaggedRange2dSetWithOverflow.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module RangeSearch\n */\nimport { Range2d } from \"../../geometry3d/Range\";\nimport { GriddedRaggedRange2dSet } from \"./GriddedRaggedRange2dSet\";\nimport { LinearSearchRange2dArray } from \"./LinearSearchRange2dArray\";\n/**\n * Use GriddedRaggedRange2dSetWithOverflow for searching among many ranges for which:\n * * Most ranges are of somewhat consistent size.\n * * A modest number of oversizes.\n * * Maintain the smallish ones in a GriddedRaggedRange2dSet.\n * * Maintain the overflows in a Range2dSearchInterface.\n * @public\n */\nexport class GriddedRaggedRange2dSetWithOverflow {\n    constructor(gridSet, overflowSet) {\n        this._gridSet = gridSet;\n        this._overflowSet = overflowSet;\n    }\n    /**\n     * Create an (empty) set of ranges.\n     * @param range\n     * @param numXEdge\n     * @param numYEdge\n     */\n    static create(range, numXEdge, numYEdge) {\n        const grids = GriddedRaggedRange2dSet.create(range.clone(), numXEdge, numYEdge);\n        if (grids)\n            return new GriddedRaggedRange2dSetWithOverflow(grids, new LinearSearchRange2dArray());\n        return undefined;\n    }\n    /**\n     * * Search for ranges containing testRange\n     * * Pass each range and tag to handler\n     * * terminate search if handler returns false.\n     * @param testRange search range.\n     * @param handler function to receive range and tag hits.\n     * @return false if search terminated by handler.  Return true if no handler returned false.\n     */\n    searchXY(x, y, handler) {\n        return this._gridSet.searchXY(x, y, handler) && this._overflowSet.searchXY(x, y, handler);\n    }\n    /**\n     * * Search for ranges overlapping testRange\n     * * Pass each range and tag to handler\n     * * terminate search if handler returns false.\n     * @param testRange search range.\n     * @param handler function to receive range and tag hits.\n     * @return false if search terminated by handler.  Return true if no handler returned false.\n     */\n    searchRange2d(testRange, handler) {\n        return this._gridSet.searchRange2d(testRange, handler) && this._overflowSet.searchRange2d(testRange, handler);\n    }\n    /** If possible, insert a range into the set.\n     * * Decline to insert (and return false) if\n     *   * range is null\n     *   * range is not completely contained in the overall range of this set.\n     *   * range x or y extent is larger than 2 grid blocks.\n     */\n    addRange(range, tag) {\n        if (!Range2d.isNull(range)) {\n            if (!this._gridSet.conditionalInsert(range, tag))\n                this._overflowSet.addRange(range, tag);\n        }\n    }\n    /** Return the overall range of all members. */\n    totalRange(result) {\n        if (result)\n            result.setNull();\n        else\n            result = Range2d.createNull();\n        this.visitChildren(0, (_depth, child) => {\n            const childRange = GriddedRaggedRange2dSetWithOverflow._workRange = child.totalRange(GriddedRaggedRange2dSetWithOverflow._workRange);\n            result.extendRange(childRange);\n        });\n        return result;\n    }\n    /** Call the handler on the overflow set, and on each defined block in the grid. */\n    visitChildren(initialDepth, handler) {\n        handler(initialDepth, this._overflowSet);\n        this._gridSet.visitChildren(initialDepth + 1, handler);\n    }\n}\n//# sourceMappingURL=GriddedRaggedRange2dSetWithOverflow.js.map",
      "start": 1693508123928,
      "end": 1693508124086,
      "sourcemaps": null
    }
  ]
}
