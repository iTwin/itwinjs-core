{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/spatial/ecrs/CoordinateSystem.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { Message } from \"../../system/runtime/Message\";\nimport { Strings } from \"../../system/runtime/Strings\";\nimport { CRS } from \"./CRS\";\nimport { Registry } from \"./Registry\";\nimport { Unit } from \"./Unit\";\n/**\n * Class CoordinateSystem manages the different coordinate systems.\n *\n * @version 1.0 October 2014\n */\n/** @internal */\nclass CoordinateSystem {\n    /**\n     * Check if easting-northing axis order is swapped?\n     * @param csCode the code of the coordinate-system.\n     * @return true for swapped CRS.\n     */\n    static isSwappedEN(csCode) {\n        if (csCode == 1029)\n            return true;\n        //    \tif (csCode==4400) return true; // this used to be swapped in the EPSG database, but not anymore\n        if (csCode == 4498)\n            return true;\n        if (csCode == 4500)\n            return true;\n        if (csCode == 4532)\n            return true;\n        return false;\n    }\n    /**\n     * Create a coordinate system.\n     * @param type the type of coordinate reference system (PROJECTED,GEOGRAPHIC_2D,...).\n     * @param csCode the coordinate-system code.\n     * @param axes the (sorted on order) coordinate axes.\n     * @return the coordinate system (null for an identify system).\n     */\n    static create(type, csCode, axes) {\n        let coordinateSystem = new CoordinateSystem(type, csCode, axes);\n        if (coordinateSystem.isIdentity())\n            return null;\n        return coordinateSystem;\n    }\n    /**\n     * Create a new coordinate system.\n     * @param type the type of coordinate reference system (PROJECTED,GEOGRAPHIC_2D,...).\n     * @param csCode the coordinate-system code.\n     * @param axes the (sorted on order) coordinate axes.\n     */\n    constructor(type, csCode, axes) {\n        /* Store the parameters */\n        this._type = type;\n        this._csCode = csCode;\n        this._axes = axes;\n        /* Clear */\n        this._xAxis = null;\n        this._yAxis = null;\n        this._zAxis = null;\n        this._xUnit = null;\n        this._yUnit = null;\n        this._zUnit = null;\n        /* Projection? */\n        if (type == CRS.PROJECTED)\n            this.parseProjection();\n        /* Log? */\n        if (this.isIdentity() == false) {\n            /* Log */\n            Message.print(CoordinateSystem.MODULE, \"Created coordinate system \" + this._csCode);\n            if (this._xAxis != null)\n                Message.print(CoordinateSystem.MODULE, \"X axis '\" + this._xAxis.getAbbreviation() + \"'/'\" + this._xAxis.getAxisName() + \"' (\" + this._xAxis.getOrder() + \")\");\n            if (this._yAxis != null)\n                Message.print(CoordinateSystem.MODULE, \"Y axis '\" + this._yAxis.getAbbreviation() + \"'/'\" + this._yAxis.getAxisName() + \"' (\" + this._yAxis.getOrder() + \")\");\n            if (this._zAxis != null)\n                Message.print(CoordinateSystem.MODULE, \"Z axis '\" + this._zAxis.getAbbreviation() + \"'/'\" + this._zAxis.getAxisName() + \"' (\" + this._zAxis.getOrder() + \")\");\n            if (this._xUnit != null)\n                Message.print(CoordinateSystem.MODULE, \"X unit '\" + this._xUnit.getName() + \"'\");\n            if (this._yUnit != null)\n                Message.print(CoordinateSystem.MODULE, \"Y unit '\" + this._yUnit.getName() + \"'\");\n            if (this._zUnit != null)\n                Message.print(CoordinateSystem.MODULE, \"Z unit '\" + this._zUnit.getName() + \"'\");\n        }\n    }\n    /**\n     * Get the type of coordinate reference system (PROJECTED,GEOGRAPHIC_2D,...).\n     * @return the type.\n     */\n    getType() {\n        return this._type;\n    }\n    /**\n     * Get the code of the coordinate system.\n     * @return the code of the coordinate system.\n     */\n    getCode() {\n        return this._csCode;\n    }\n    /**\n     * Get the coordinate axes.\n     * @return the coordinate axes.\n     */\n    getAxes() {\n        return this._axes;\n    }\n    /**\n     * Do we have an identity transformation between local and standard forms?\n     * @return true for an identity transform.\n     */\n    isIdentity() {\n        /* Check the axis */\n        if ((this._xAxis != null) && (this._xAxis.getOrder() != 1))\n            return false;\n        if ((this._yAxis != null) && (this._yAxis.getOrder() != 2))\n            return false;\n        if ((this._zAxis != null) && (this._zAxis.getOrder() != 3))\n            return false;\n        /* Check the units */\n        if (this._xUnit != null)\n            return false;\n        if (this._yUnit != null)\n            return false;\n        if (this._zUnit != null)\n            return false;\n        /* We have identity */\n        return true;\n    }\n    /**\n     * Get the X axis.\n     * @return the X axis.\n     */\n    getXAxis() {\n        return this._xAxis;\n    }\n    /**\n     * Get the Y axis.\n     * @return the Y axis.\n     */\n    getYAxis() {\n        return this._yAxis;\n    }\n    /**\n     * Get the Z axis.\n     * @return the Z axis.\n     */\n    getZAxis() {\n        return this._zAxis;\n    }\n    /**\n     * Get the unit of the first axis.\n     * @return the unit of the first axis (null for the default unit).\n     */\n    getXUnit() {\n        return this._xUnit;\n    }\n    /**\n     * Get the unit of the second axis.\n     * @return the unit of the second axis (null for the default unit).\n     */\n    getYUnit() {\n        return this._yUnit;\n    }\n    /**\n     * Get the unit of the third axis.\n     * @return the unit of the third axis (null for the default unit).\n     */\n    getZUnit() {\n        return this._zUnit;\n    }\n    /**\n     * Parse a projection type coordinate system.\n     */\n    parseProjection() {\n        /* Get the abbreviations */\n        let name1 = this._axes.get(0).getAbbreviation();\n        let name2 = this._axes.get(1).getAbbreviation();\n        //        /* Get the axis names */\n        //        String aname1 = this._axis[0].getAxisName();\n        //        String aname2 = this._axis[1].getAxisName();\n        //        /* Special cases */\n        //        if (aname1.equalsIgnoreCase(\"Northing\") && aname2.equalsIgnoreCase(\"Easting\"))\n        //        {\n        //            /* Coordinate system 4531, used by CRS 2180: ETRS89 / Poland CS92 */\n        //            name1 = \"N\";\n        //            name2 = \"E\";\n        //        }\n        /* Check the various combinations */\n        let xy1 = (Strings.equalsIgnoreCase(name1, \"X\") && Strings.equalsIgnoreCase(name2, \"Y\"));\n        let xy2 = (Strings.equalsIgnoreCase(name1, \"E\") && Strings.equalsIgnoreCase(name2, \"N\"));\n        let xy3 = (Strings.equalsIgnoreCase(name1, \"E(X)\") && Strings.equalsIgnoreCase(name2, \"N(Y)\"));\n        let xy4 = (Strings.equalsIgnoreCase(name1, \"M\") && Strings.equalsIgnoreCase(name2, \"P\")); // csCode 1024, Portuguese\n        let yx1 = (Strings.equalsIgnoreCase(name1, \"Y\") && Strings.equalsIgnoreCase(name2, \"X\"));\n        let yx2 = (Strings.equalsIgnoreCase(name1, \"N\") && Strings.equalsIgnoreCase(name2, \"E\"));\n        /* XY sequence? */\n        if (xy1 || xy2 || xy3 || xy4) {\n            this._xAxis = this._axes.get(0);\n            this._yAxis = this._axes.get(1);\n        }\n        /* YX sequence */\n        else if (yx1 || yx2) {\n            this._xAxis = this._axes.get(1);\n            this._yAxis = this._axes.get(0);\n        }\n        /* Default */\n        else {\n            this._xAxis = this._axes.get(0);\n            this._yAxis = this._axes.get(1);\n            /* Log */\n            Message.printWarning(CoordinateSystem.MODULE, \"Invalid projected axis '\" + name1 + \"','\" + name2 + \"'\");\n        }\n        /* Do we have a Z axis? */\n        if (this._axes.size() >= 3) {\n            this._zAxis = this._axes.get(2);\n        }\n        /* Get the units */\n        if ((this._xAxis != null) && this._xAxis.getUnitCode() != Unit.METER)\n            this._xUnit = Registry.getUnit(this._xAxis.getUnitCode());\n        if ((this._yAxis != null) && this._yAxis.getUnitCode() != Unit.METER)\n            this._yUnit = Registry.getUnit(this._yAxis.getUnitCode());\n        if ((this._zAxis != null) && this._zAxis.getUnitCode() != Unit.METER)\n            this._zUnit = Registry.getUnit(this._zAxis.getUnitCode());\n    }\n    /**\n     * Get a local coordinate.\n     * @param local the coordinate.\n     * @param axis the standard axis to retrieve.\n     * @param order the default order.\n     * @return the coordinate.\n     */\n    static getLocalCoordinate(local, axis, order) {\n        /* Do we have an axis? */\n        if (axis != null)\n            order = axis.getOrder();\n        /* Return the request coordinate */\n        if (order == 1)\n            return local.getX();\n        if (order == 2)\n            return local.getY();\n        if (order == 3)\n            return local.getZ();\n        return 0.0;\n    }\n    /**\n     * Convert a coordinate from the local to the standard form.\n     * @param local the local coordinate (input).\n     * @param standard the standard coordinate (can be same as local) (output).\n     */\n    localToStandard(local, standard) {\n        /* Get X */\n        let x = CoordinateSystem.getLocalCoordinate(local, this._xAxis, 1);\n        if (this._xUnit != null)\n            x = this._xUnit.toStandard(x);\n        /* Get Y */\n        let y = CoordinateSystem.getLocalCoordinate(local, this._yAxis, 2);\n        if (this._yUnit != null)\n            y = this._yUnit.toStandard(y);\n        /* Get Z */\n        let z = CoordinateSystem.getLocalCoordinate(local, this._zAxis, 3);\n        if (this._zUnit != null)\n            z = this._zUnit.toStandard(z);\n        /* Set */\n        standard.setX(x);\n        standard.setY(y);\n        standard.setZ(z);\n    }\n    /**\n     * Get a standard coordinate.\n     * @param x the standard x coordinate.\n     * @param y the standard y coordinate.\n     * @param z the standard z coordinate.\n     * @param axis the local axis to consider.\n     * @param index the default index.\n     * @return the coordinate.\n     */\n    getStandardCoordinate(x, y, z, axis, index) {\n        /* Check the standard index of the axis */\n        if (axis == this._xAxis)\n            index = 1;\n        else if (axis == this._yAxis)\n            index = 2;\n        else if (axis == this._zAxis)\n            index = 3;\n        /* Return the coordinate */\n        if (index == 1)\n            return x;\n        if (index == 2)\n            return y;\n        if (index == 3)\n            return z;\n        return 0.0;\n    }\n    /**\n     * Convert a coordinate from the standard to the local form.\n     * @param standard the standard coordinate (input).\n     * @param local the local coordinate (can be same as standard) (output).\n     */\n    standardToLocal(standard, local) {\n        /* Get X */\n        let x = standard.getX();\n        if (this._xUnit != null)\n            x = this._xUnit.fromStandard(x);\n        /* Get Y */\n        let y = standard.getY();\n        if (this._yUnit != null)\n            y = this._yUnit.fromStandard(y);\n        /* Get Z */\n        let z = standard.getZ();\n        if (this._zUnit != null)\n            z = this._zUnit.fromStandard(z);\n        /* Set */\n        local.setX(this.getStandardCoordinate(x, y, z, this._axes.get(0), 1));\n        local.setY(this.getStandardCoordinate(x, y, z, this._axes.get(1), 2));\n        if (this._axes.size() >= 3)\n            local.setZ(this.getStandardCoordinate(x, y, z, this._axes.get(2), 3));\n    }\n}\n/** The name of this module */\nCoordinateSystem.MODULE = \"CoordinateSystem\";\nexport { CoordinateSystem };\n//# sourceMappingURL=CoordinateSystem.js.map",
      "start": 1693508127389,
      "end": 1693508127448,
      "sourcemaps": null
    }
  ]
}
