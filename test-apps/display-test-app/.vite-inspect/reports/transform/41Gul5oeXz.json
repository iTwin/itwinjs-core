{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/AspectRatioSkewDecorator.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { assert } from \"@itwin/core-bentley\";\r\nimport { IModelJson, Path } from \"@itwin/core-geometry\";\r\nimport { ColorDef, ViewDetails } from \"@itwin/core-common\";\r\nimport { DecorateContext, GraphicType, IModelApp, IModelConnection, Tool } from \"@itwin/core-frontend\";\r\nimport { parseArgs } from \"@itwin/frontend-devtools\";\r\n\r\nclass AspectRatioSkewDecorator {\r\n  private static _instance?: AspectRatioSkewDecorator;\r\n  private readonly _path: Path;\r\n  private readonly _applyAspectRatioSkew: boolean;\r\n\r\n  private constructor(iModel: IModelConnection, applyAspectRatioSkew: boolean) {\r\n    this._applyAspectRatioSkew = applyAspectRatioSkew;\r\n\r\n    const l = iModel.projectExtents.low;\r\n    const h = iModel.projectExtents.high;\r\n    const c = iModel.projectExtents.center;\r\n    const json = {\r\n      path: [{\r\n        bcurve: {\r\n          closed: false,\r\n          knots: [0, 0, 0, 1, 1, 1],\r\n          order: 3,\r\n          points: [\r\n            [l.x, l.y, c.z],\r\n            [c.x, h.y, c.z],\r\n            [h.x, c.y, c.z],\r\n          ],\r\n        },\r\n      }],\r\n    };\r\n\r\n    const path = IModelJson.Reader.parse(json);\r\n    assert(path instanceof Path);\r\n    this._path = path;\r\n\r\n    // Increase the max aspect ratio skew to fit our needs for profile display\r\n    ViewDetails.maxSkew = 1000;\r\n  }\r\n\r\n  public decorate(context: DecorateContext): void {\r\n    if (!context.viewport.view.isSpatialView())\r\n      return;\r\n\r\n    const builder = context.createGraphic({ type: GraphicType.WorldDecoration, applyAspectRatioSkew: this._applyAspectRatioSkew });\r\n    builder.setSymbology(ColorDef.white, ColorDef.white, 3);\r\n    builder.addPath(this._path);\r\n    context.addDecorationFromBuilder(builder);\r\n  }\r\n\r\n  public static toggle(iModel: IModelConnection, applyAspectRatioSkew: boolean): void {\r\n    const dec = this._instance;\r\n    if (dec) {\r\n      IModelApp.viewManager.dropDecorator(dec);\r\n      this._instance = undefined;\r\n    } else {\r\n      this._instance = new AspectRatioSkewDecorator(iModel, applyAspectRatioSkew);\r\n      IModelApp.viewManager.addDecorator(this._instance);\r\n    }\r\n  }\r\n}\r\n\r\n/** Decorates all spatial views with a simple bspline curve based on the iModel's project extents, taking into account the view's aspect ratio skew when\r\n * producing the decoration graphics unless specified otherwise. Use `fdt aspect skew` to change the aspect ratio skew.\r\n * The level of detail of the graphics should be adjusted based on the skew; if the key-in argument specifies *not* to do so, expect lower-resolution\r\n * graphics when skew > 1.\r\n */\r\nexport class ToggleAspectRatioSkewDecoratorTool extends Tool {\r\n  private _applyAspectRatioSkew = true;\r\n\r\n  public static override toolId = \"ToggleAspectRatioSkewDecorator\";\r\n  public static override get minArgs() { return 0; }\r\n  public static override get maxArgs() { return 1; }\r\n\r\n  public override async run(): Promise<boolean> {\r\n    const iModel = IModelApp.viewManager.selectedView?.iModel;\r\n    if (iModel)\r\n      AspectRatioSkewDecorator.toggle(iModel, this._applyAspectRatioSkew);\r\n\r\n    return true;\r\n  }\r\n\r\n  public override async parseAndRun(...args: string[]): Promise<boolean> {\r\n    const parsedArgs = parseArgs(args);\r\n    this._applyAspectRatioSkew = parsedArgs.getBoolean(\"a\") ?? true;\r\n    return this.run();\r\n  }\r\n}\r\n",
      "start": 1693508121171,
      "end": 1693508121253,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { assert } from \"@itwin/core-bentley\";\nimport { IModelJson, Path } from \"@itwin/core-geometry\";\nimport { ColorDef, ViewDetails } from \"@itwin/core-common\";\nimport { GraphicType, IModelApp, Tool } from \"@itwin/core-frontend\";\nimport { parseArgs } from \"@itwin/frontend-devtools\";\nclass AspectRatioSkewDecorator {\n  constructor(iModel, applyAspectRatioSkew) {\n    this._applyAspectRatioSkew = applyAspectRatioSkew;\n    const l = iModel.projectExtents.low;\n    const h = iModel.projectExtents.high;\n    const c = iModel.projectExtents.center;\n    const json = {\n      path: [{\n        bcurve: {\n          closed: false,\n          knots: [0, 0, 0, 1, 1, 1],\n          order: 3,\n          points: [\n            [l.x, l.y, c.z],\n            [c.x, h.y, c.z],\n            [h.x, c.y, c.z]\n          ]\n        }\n      }]\n    };\n    const path = IModelJson.Reader.parse(json);\n    assert(path instanceof Path);\n    this._path = path;\n    ViewDetails.maxSkew = 1e3;\n  }\n  decorate(context) {\n    if (!context.viewport.view.isSpatialView())\n      return;\n    const builder = context.createGraphic({ type: GraphicType.WorldDecoration, applyAspectRatioSkew: this._applyAspectRatioSkew });\n    builder.setSymbology(ColorDef.white, ColorDef.white, 3);\n    builder.addPath(this._path);\n    context.addDecorationFromBuilder(builder);\n  }\n  static toggle(iModel, applyAspectRatioSkew) {\n    const dec = this._instance;\n    if (dec) {\n      IModelApp.viewManager.dropDecorator(dec);\n      this._instance = void 0;\n    } else {\n      this._instance = new AspectRatioSkewDecorator(iModel, applyAspectRatioSkew);\n      IModelApp.viewManager.addDecorator(this._instance);\n    }\n  }\n}\nexport class ToggleAspectRatioSkewDecoratorTool extends Tool {\n  constructor() {\n    super(...arguments);\n    this._applyAspectRatioSkew = true;\n  }\n  static get minArgs() {\n    return 0;\n  }\n  static get maxArgs() {\n    return 1;\n  }\n  async run() {\n    const iModel = IModelApp.viewManager.selectedView?.iModel;\n    if (iModel)\n      AspectRatioSkewDecorator.toggle(iModel, this._applyAspectRatioSkew);\n    return true;\n  }\n  async parseAndRun(...args) {\n    const parsedArgs = parseArgs(args);\n    this._applyAspectRatioSkew = parsedArgs.getBoolean(\"a\") ?? true;\n    return this.run();\n  }\n}\nToggleAspectRatioSkewDecoratorTool.toolId = \"ToggleAspectRatioSkewDecorator\";\n",
      "start": 1693508121253,
      "end": 1693508121398,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/AspectRatioSkewDecorator.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { assert } from \"@itwin/core-bentley\";\r\nimport { IModelJson, Path } from \"@itwin/core-geometry\";\r\nimport { ColorDef, ViewDetails } from \"@itwin/core-common\";\r\nimport { DecorateContext, GraphicType, IModelApp, IModelConnection, Tool } from \"@itwin/core-frontend\";\r\nimport { parseArgs } from \"@itwin/frontend-devtools\";\r\n\r\nclass AspectRatioSkewDecorator {\r\n  private static _instance?: AspectRatioSkewDecorator;\r\n  private readonly _path: Path;\r\n  private readonly _applyAspectRatioSkew: boolean;\r\n\r\n  private constructor(iModel: IModelConnection, applyAspectRatioSkew: boolean) {\r\n    this._applyAspectRatioSkew = applyAspectRatioSkew;\r\n\r\n    const l = iModel.projectExtents.low;\r\n    const h = iModel.projectExtents.high;\r\n    const c = iModel.projectExtents.center;\r\n    const json = {\r\n      path: [{\r\n        bcurve: {\r\n          closed: false,\r\n          knots: [0, 0, 0, 1, 1, 1],\r\n          order: 3,\r\n          points: [\r\n            [l.x, l.y, c.z],\r\n            [c.x, h.y, c.z],\r\n            [h.x, c.y, c.z],\r\n          ],\r\n        },\r\n      }],\r\n    };\r\n\r\n    const path = IModelJson.Reader.parse(json);\r\n    assert(path instanceof Path);\r\n    this._path = path;\r\n\r\n    // Increase the max aspect ratio skew to fit our needs for profile display\r\n    ViewDetails.maxSkew = 1000;\r\n  }\r\n\r\n  public decorate(context: DecorateContext): void {\r\n    if (!context.viewport.view.isSpatialView())\r\n      return;\r\n\r\n    const builder = context.createGraphic({ type: GraphicType.WorldDecoration, applyAspectRatioSkew: this._applyAspectRatioSkew });\r\n    builder.setSymbology(ColorDef.white, ColorDef.white, 3);\r\n    builder.addPath(this._path);\r\n    context.addDecorationFromBuilder(builder);\r\n  }\r\n\r\n  public static toggle(iModel: IModelConnection, applyAspectRatioSkew: boolean): void {\r\n    const dec = this._instance;\r\n    if (dec) {\r\n      IModelApp.viewManager.dropDecorator(dec);\r\n      this._instance = undefined;\r\n    } else {\r\n      this._instance = new AspectRatioSkewDecorator(iModel, applyAspectRatioSkew);\r\n      IModelApp.viewManager.addDecorator(this._instance);\r\n    }\r\n  }\r\n}\r\n\r\n/** Decorates all spatial views with a simple bspline curve based on the iModel's project extents, taking into account the view's aspect ratio skew when\r\n * producing the decoration graphics unless specified otherwise. Use `fdt aspect skew` to change the aspect ratio skew.\r\n * The level of detail of the graphics should be adjusted based on the skew; if the key-in argument specifies *not* to do so, expect lower-resolution\r\n * graphics when skew > 1.\r\n */\r\nexport class ToggleAspectRatioSkewDecoratorTool extends Tool {\r\n  private _applyAspectRatioSkew = true;\r\n\r\n  public static override toolId = \"ToggleAspectRatioSkewDecorator\";\r\n  public static override get minArgs() { return 0; }\r\n  public static override get maxArgs() { return 1; }\r\n\r\n  public override async run(): Promise<boolean> {\r\n    const iModel = IModelApp.viewManager.selectedView?.iModel;\r\n    if (iModel)\r\n      AspectRatioSkewDecorator.toggle(iModel, this._applyAspectRatioSkew);\r\n\r\n    return true;\r\n  }\r\n\r\n  public override async parseAndRun(...args: string[]): Promise<boolean> {\r\n    const parsedArgs = parseArgs(args);\r\n    this._applyAspectRatioSkew = parsedArgs.getBoolean(\"a\") ?? true;\r\n    return this.run();\r\n  }\r\n}\r\n"
        ],
        "mappings": ";AAKA,SAAS,cAAc;AACvB,SAAS,YAAY,YAAY;AACjC,SAAS,UAAU,mBAAmB;AACtC,SAA0B,aAAa,WAA6B,YAAY;AAChF,SAAS,iBAAiB;AAE1B,MAAM,yBAAyB;AAAA,EAKrB,YAAY,QAA0B,sBAA+B;AAC3E,SAAK,wBAAwB;AAE7B,UAAM,IAAI,OAAO,eAAe;AAChC,UAAM,IAAI,OAAO,eAAe;AAChC,UAAM,IAAI,OAAO,eAAe;AAChC,UAAM,OAAO;AAAA,MACX,MAAM,CAAC;AAAA,QACL,QAAQ;AAAA,UACN,QAAQ;AAAA,UACR,OAAO,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,UACxB,OAAO;AAAA,UACP,QAAQ;AAAA,YACN,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;AAAA,YACd,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;AAAA,YACd,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;AAAA,UAChB;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AAEA,UAAM,OAAO,WAAW,OAAO,MAAM,IAAI;AACzC,WAAO,gBAAgB,IAAI;AAC3B,SAAK,QAAQ;AAGb,gBAAY,UAAU;AAAA,EACxB;AAAA,EAEO,SAAS,SAAgC;AAC9C,QAAI,CAAC,QAAQ,SAAS,KAAK,cAAc;AACvC;AAEF,UAAM,UAAU,QAAQ,cAAc,EAAE,MAAM,YAAY,iBAAiB,sBAAsB,KAAK,sBAAsB,CAAC;AAC7H,YAAQ,aAAa,SAAS,OAAO,SAAS,OAAO,CAAC;AACtD,YAAQ,QAAQ,KAAK,KAAK;AAC1B,YAAQ,yBAAyB,OAAO;AAAA,EAC1C;AAAA,EAEA,OAAc,OAAO,QAA0B,sBAAqC;AAClF,UAAM,MAAM,KAAK;AACjB,QAAI,KAAK;AACP,gBAAU,YAAY,cAAc,GAAG;AACvC,WAAK,YAAY;AAAA,IACnB,OAAO;AACL,WAAK,YAAY,IAAI,yBAAyB,QAAQ,oBAAoB;AAC1E,gBAAU,YAAY,aAAa,KAAK,SAAS;AAAA,IACnD;AAAA,EACF;AACF;AAOO,aAAM,2CAA2C,KAAK;AAAA,EAAtD;AAAA;AACL,SAAQ,wBAAwB;AAAA;AAAA,EAGhC,WAA2B,UAAU;AAAE,WAAO;AAAA,EAAG;AAAA,EACjD,WAA2B,UAAU;AAAE,WAAO;AAAA,EAAG;AAAA,EAEjD,MAAsB,MAAwB;AAC5C,UAAM,SAAS,UAAU,YAAY,cAAc;AACnD,QAAI;AACF,+BAAyB,OAAO,QAAQ,KAAK,qBAAqB;AAEpE,WAAO;AAAA,EACT;AAAA,EAEA,MAAsB,eAAe,MAAkC;AACrE,UAAM,aAAa,UAAU,IAAI;AACjC,SAAK,wBAAwB,WAAW,WAAW,GAAG,KAAK;AAC3D,WAAO,KAAK,IAAI;AAAA,EAClB;AACF;AApBa,mCAGY,SAAS;",
        "names": []
      }
    }
  ]
}
