{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/Code.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Codes\n */\nimport { Id64, JsonUtils } from \"@itwin/core-bentley\";\n/**\n * A three-part structure containing information about the [Code]($docs/bis/guide/fundamentals/codes) of an Element\n * @public\n */\nexport class Code {\n    /** The [CodeValue]($docs/bis/guide/fundamentals/codes.md#codevalue-property) of the Element\n     * @note Leading and trailing whitespace is invalid so is automatically trimmed.\n     */\n    get value() { return this._value ?? \"\"; }\n    set value(val) { this._value = val?.trim(); }\n    constructor(codeProps) {\n        this.spec = Id64.fromJSON(codeProps.spec);\n        this.scope = JsonUtils.asString(codeProps.scope);\n        this.value = JsonUtils.asString(codeProps.value);\n    }\n    /** Create an empty, non-unique code with no special meaning. */\n    static createEmpty() {\n        const id = Id64.fromLocalAndBriefcaseIds(1, 0);\n        return new Code({ spec: id, scope: id });\n    }\n    static fromJSON(json) { return json ? new Code(json) : Code.createEmpty(); }\n    toJSON() { return { spec: this.spec, scope: this.scope, value: this.value }; }\n    equals(other) { return Code.equalCodes(this, other); }\n    /** @internal */\n    static equalCodes(c1, c2) {\n        return c1.spec === c2.spec && c1.scope === c2.scope && c1.value === c2.value;\n    }\n    /** Determine whether this Code is valid. */\n    static isValid(c) { return Id64.isValidId64(c.spec); }\n    /** Determine if this code is valid but not otherwise meaningful (and therefore not necessarily unique) */\n    static isEmpty(c) { return this.isValid(c) && (c.value === undefined || c.value === \"\"); }\n}\n/** Names of the internal BIS CodeSpecs. These names match those specified by the native library.\n * For other domains, the best practice is to include the domain name or alias as part of the CodeSpec name to ensure global uniqueness.\n * @public\n* @extensions\n* @see [CodeSpec]($docs/bis/guide/fundamentals/codes.md#codespec)\n */\nexport var BisCodeSpec;\n(function (BisCodeSpec) {\n    /** The name of the standard [[CodeSpec]] used when creating *empty* codes.\n     * @see [[Code.createEmpty]]\n     */\n    BisCodeSpec[\"nullCodeSpec\"] = \"bis:NullCodeSpec\";\n    /** @internal */\n    BisCodeSpec[\"annotationFrameStyle\"] = \"bis:AnnotationFrameStyle\";\n    /** @internal */\n    BisCodeSpec[\"annotationLeaderStyle\"] = \"bis:AnnotationLeaderStyle\";\n    /** @internal */\n    BisCodeSpec[\"annotationTextStyle\"] = \"bis:AnnotationTextStyle\";\n    /** The name of the standard [[CodeSpec]] used when creating codes for [AuxCoordSystem2d]($backend) elements.\n     * @see [AuxCoordSystem2d.createCode]($backend)\n     */\n    BisCodeSpec[\"auxCoordSystem2d\"] = \"bis:AuxCoordSystem2d\";\n    /** The name of the standard [[CodeSpec]] used when creating codes for [AuxCoordSystem3d]($backend) elements.\n     * @see [AuxCoordSystem3d.createCode]($backend)\n     */\n    BisCodeSpec[\"auxCoordSystem3d\"] = \"bis:AuxCoordSystem3d\";\n    /** The name of the standard [[CodeSpec]] used when creating codes for [AuxCoordSystemSpatial]($backend) elements.\n     * @see [AuxCoordSystemSpatial.createCode]($backend)\n     */\n    BisCodeSpec[\"auxCoordSystemSpatial\"] = \"bis:AuxCoordSystemSpatial\";\n    /** The name of the standard [[CodeSpec]] used when creating codes for [CategorySelector]($backend) elements.\n     * @see [CategorySelector.createCode]($backend)\n     */\n    BisCodeSpec[\"categorySelector\"] = \"bis:CategorySelector\";\n    /** @internal */\n    BisCodeSpec[\"colorBook\"] = \"bis:ColorBook\";\n    /** The name of the standard [[CodeSpec]] used when creating codes for [DisplayStyle]($backend) elements.\n     * @see [DisplayStyle.createCode]($backend)\n     */\n    BisCodeSpec[\"displayStyle\"] = \"bis:DisplayStyle\";\n    /** The name of the standard [[CodeSpec]] used when creating codes for [Drawing]($backend) elements.\n     * @see [Drawing.createCode]($backend)\n     */\n    BisCodeSpec[\"drawing\"] = \"bis:Drawing\";\n    /** The name of the standard [[CodeSpec]] used when creating codes for [DrawingCategory]($backend) elements.\n     * @see [DrawingCategory.createCode]($backend)\n     */\n    BisCodeSpec[\"drawingCategory\"] = \"bis:DrawingCategory\";\n    /** The name of the standard [[CodeSpec]] used when creating codes for [ExternalSource]($backend) elements.\n     * @note This CodeSpec is not automatically created, so use [ExternalSource.ensureCodeSpec]($backend) to make sure that it exists.\n     * @see [ExternalSource.createCode]($backend)\n     */\n    BisCodeSpec[\"externalSource\"] = \"bis:ExternalSource\";\n    /** The name of the standard [[CodeSpec]] used when creating codes for [ExternalSourceAttachment]($backend) elements.\n     * @note This CodeSpec is not automatically created, so use [ExternalSourceAttachment.ensureCodeSpec]($backend) to make sure that it exists.\n     * @see [ExternalSource.createCode]($backend)\n     */\n    BisCodeSpec[\"externalSourceAttachment\"] = \"bis:ExternalSourceAttachment\";\n    /** The name of the standard [[CodeSpec]] used when creating codes for [GeometryPart]($backend) elements.\n     * @see [GeometryPart.createCode]($backend)\n     */\n    BisCodeSpec[\"geometryPart\"] = \"bis:GeometryPart\";\n    /** The name of the standard [[CodeSpec]] used when creating codes for [GraphicalType2d]($backend) elements.\n     * @see [GraphicalType2d.createCode]($backend)\n     */\n    BisCodeSpec[\"graphicalType2d\"] = \"bis:GraphicalType2d\";\n    /** The name of the standard [[CodeSpec]] used when creating codes for [LineStyle]($backend) elements.\n     * @see [LineStyle.createCode]($backend)\n     */\n    BisCodeSpec[\"lineStyle\"] = \"bis:LineStyle\";\n    /** The name of the standard [[CodeSpec]] used when creating codes for [LinkElement]($backend) elements.\n     * @see [LinkElement.createCode]($backend)\n     */\n    BisCodeSpec[\"linkElement\"] = \"bis:LinkElement\";\n    /** The name of the standard [[CodeSpec]] used when creating codes for [ModelSelector]($backend) elements.\n     * @see [ModelSelector.createCode]($backend)\n     */\n    BisCodeSpec[\"modelSelector\"] = \"bis:ModelSelector\";\n    /** The name of the standard [[CodeSpec]] used when creating codes for [PhysicalMaterial]($backend) elements.\n     * @see [PhysicalMaterial.createCode]($backend)\n     */\n    BisCodeSpec[\"physicalMaterial\"] = \"bis:PhysicalMaterial\";\n    /** The name of the standard [[CodeSpec]] used when creating codes for [PhysicalType]($backend) elements.\n     * @see [PhysicalType.createCode]($backend)\n     */\n    BisCodeSpec[\"physicalType\"] = \"bis:PhysicalType\";\n    /** The name of the standard [[CodeSpec]] used when creating codes for [InformationPartitionElement]($backend) elements.\n     * @see [InformationPartitionElement.createCode]($backend)\n     */\n    BisCodeSpec[\"informationPartitionElement\"] = \"bis:InformationPartitionElement\";\n    /** The name of the standard [[CodeSpec]] used when creating codes for [RenderMaterialElement]($backend) elements.\n     * @see [RenderMaterialElement.createCode]($backend)\n     */\n    BisCodeSpec[\"renderMaterial\"] = \"bis:RenderMaterial\";\n    /** The name of the standard [[CodeSpec]] used when creating codes for [Sheet]($backend) elements.\n     * @see [Sheet.createCode]($backend)\n     */\n    BisCodeSpec[\"sheet\"] = \"bis:Sheet\";\n    /** The name of the standard [[CodeSpec]] used when creating codes for [SpatialCategory]($backend) elements.\n     * @see [SpatialCategory.createCode]($backend)\n     */\n    BisCodeSpec[\"spatialCategory\"] = \"bis:SpatialCategory\";\n    /** The name of the standard [[CodeSpec]] used when creating codes for [SpatialLocationType]($backend) elements.\n     * @see [SpatialLocationType.createCode]($backend)\n     */\n    BisCodeSpec[\"spatialLocationType\"] = \"bis:SpatialLocationType\";\n    /** The name of the standard [[CodeSpec]] used when creating codes for [SubCategory]($backend) elements.\n     * @see [SubCategory.createCode]($backend)\n     */\n    BisCodeSpec[\"subCategory\"] = \"bis:SubCategory\";\n    /** The name of the standard [[CodeSpec]] used when creating codes for [Subject]($backend) elements.\n     * @see [Subject.createCode]($backend)\n     */\n    BisCodeSpec[\"subject\"] = \"bis:Subject\";\n    /** The name of the standard [[CodeSpec]] used when creating codes for [TemplateRecipe2d]($backend) elements.\n     * @see [TemplateRecipe2d.createCode]($backend)\n     */\n    BisCodeSpec[\"templateRecipe2d\"] = \"bis:TemplateRecipe2d\";\n    /** The name of the standard [[CodeSpec]] used when creating codes for [TemplateRecipe3d]($backend) elements.\n     * @see [TemplateRecipe3d.createCode]($backend)\n     */\n    BisCodeSpec[\"templateRecipe3d\"] = \"bis:TemplateRecipe3d\";\n    /** @internal */\n    BisCodeSpec[\"textAnnotationSeed\"] = \"bis:TextAnnotationSeed\";\n    /** The name of the standard [[CodeSpec]] used when creating codes for [Texture]($backend) elements.\n     * @see [Texture.createCode]($backend)\n     */\n    BisCodeSpec[\"texture\"] = \"bis:Texture\";\n    /** The name of the standard [[CodeSpec]] used when creating codes for [ViewDefinition]($backend) elements.\n     * @see [ViewDefinition.createCode]($backend)\n     */\n    BisCodeSpec[\"viewDefinition\"] = \"bis:ViewDefinition\";\n})(BisCodeSpec || (BisCodeSpec = {}));\n/** The scope of the Code.\n * @public\n */\nexport var CodeScopeSpec;\n(function (CodeScopeSpec) {\n    /** The standard ways the CodeScope can be specified.\n     * @public\n     */\n    let Type;\n    (function (Type) {\n        /** The Code value must be unique within (at least) the iModel repository */\n        Type[Type[\"Repository\"] = 1] = \"Repository\";\n        /** The Code value must be unique within the scope of the Model */\n        Type[Type[\"Model\"] = 2] = \"Model\";\n        /** The Code value must be unique among other children of the same parent element */\n        Type[Type[\"ParentElement\"] = 3] = \"ParentElement\";\n        /** The Code value must be unique among other elements also scoped by the same element */\n        Type[Type[\"RelatedElement\"] = 4] = \"RelatedElement\";\n    })(Type = CodeScopeSpec.Type || (CodeScopeSpec.Type = {}));\n    /**\n     * Requirements for how the CodeScope Element is identified.\n     * @public\n     */\n    let ScopeRequirement;\n    (function (ScopeRequirement) {\n        /** The ElementId of CodeScope element identifies its scope. Used for Codes that are unique only within a single iModel. */\n        ScopeRequirement[ScopeRequirement[\"ElementId\"] = 1] = \"ElementId\";\n        /** The FederationGuid of the CodeScope element identifies its scope. Used for Codes that are globally unique. */\n        ScopeRequirement[ScopeRequirement[\"FederationGuid\"] = 2] = \"FederationGuid\";\n    })(ScopeRequirement = CodeScopeSpec.ScopeRequirement || (CodeScopeSpec.ScopeRequirement = {}));\n})(CodeScopeSpec || (CodeScopeSpec = {}));\n/** A [Code Specification]($docs/bis/guide/references/glossary#codespec) captures the rules for encoding and decoding significant business information into\n * and from a Code (string). This specification is used to generate and validate Codes.\n *\n * A CodeSpec defines the format of a Code for a certain type of Element in an IModel.\n * A CodeSpec can identify an external system that maintains and/or assigns Codes.\n * @public\n */\nexport class CodeSpec {\n    constructor(iModel, id, name, properties) {\n        this.iModel = iModel;\n        this.id = id;\n        this.name = name;\n        this.properties = properties ?? { scopeSpec: { type: CodeScopeSpec.Type.Repository } };\n    }\n    /** Create a new CodeSpec from the specified parameters\n     * > Note: CodeSpec.id will not be valid until inserted\n     * @see [CodeSpecs.insert]($backend)\n     */\n    static create(iModel, name, scopeType, scopeReq) {\n        const props = { scopeSpec: { type: scopeType } };\n        if (scopeReq)\n            props.scopeSpec.fGuidRequired = scopeReq === CodeScopeSpec.ScopeRequirement.FederationGuid;\n        return new CodeSpec(iModel, Id64.invalid, name, props);\n    }\n    /** Create a new CodeSpec directly from JSON. Used internally by the CodeSpecs.load function.\n     * @internal\n     */\n    static createFromJson(iModel, id, name, properties) {\n        return new CodeSpec(iModel, id, name, properties);\n    }\n    /** Will be true if the id of this CodeSpec is valid. */\n    get isValid() { return Id64.isValid(this.id); }\n    get isExternal() {\n        return true === this.properties.scopeSpec.fGuidRequired;\n    }\n    /** The scope type of this CodeSpec. */\n    get scopeType() { return this.properties.scopeSpec.type; }\n    set scopeType(scopeType) { this.properties.scopeSpec.type = scopeType; }\n    /** Will be `CodeScopeSpec.ScopeRequirement.FederationGuid` if the scoping element is required to have a FederationGuid or\n     * CodeScopeSpec.ScopeRequirement.ElementId` otherwise (the default).\n     */\n    get scopeReq() {\n        return this.properties.scopeSpec.fGuidRequired ? CodeScopeSpec.ScopeRequirement.FederationGuid : CodeScopeSpec.ScopeRequirement.ElementId;\n    }\n    set scopeReq(req) {\n        if (CodeScopeSpec.ScopeRequirement.FederationGuid === req)\n            this.properties.scopeSpec.fGuidRequired = true;\n        else\n            this.properties.scopeSpec.fGuidRequired = undefined;\n    }\n    /** Will be true if the codes associated with this CodeSpec are managed along with the iModel and false if the codes are managed by an external service.\n     * @deprecated in 3.6 Use scopeReq instead.\n     */\n    get isManagedWithIModel() {\n        return this.properties.spec?.isManagedWithDgnDb ?? true;\n    }\n    set isManagedWithIModel(value) {\n        if (!this.properties.spec)\n            this.properties.spec = {};\n        this.properties.spec.isManagedWithDgnDb = value;\n    }\n}\n//# sourceMappingURL=Code.js.map",
      "start": 1693508120687,
      "end": 1693508120735,
      "sourcemaps": null
    }
  ]
}
