{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/pointcloud/model/CloudPoint.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { Coordinate } from \"../../spatial/geom/Coordinate\";\nimport { ALong } from \"../../system/runtime/ALong\";\nimport { Message } from \"../../system/runtime/Message\";\nimport { Numbers } from \"../../system/runtime/Numbers\";\nimport { AttributeValue } from \"./AttributeValue\";\nimport { PointAttribute } from \"./PointAttribute\";\n/**\n * Class CloudPoint defines a point in the point cloud.\n *\n * @version 1.0 November 2011\n */\n/** @internal */\nclass CloudPoint {\n    /**\n     * Create a new point.\n     */\n    constructor() {\n        this._index = ALong.ZERO;\n        this._x = 0.0;\n        this._y = 0.0;\n        this._z = 0.0;\n        this._color = 0;\n        this._intensity = 0;\n        this._weight = 0;\n        this._selected = false;\n        this._attributes = null;\n        this._values = null;\n    }\n    /**\n     * Create a new point.\n     * @param index the index of the point.\n     * @param x the x position.\n     * @param y the y position.\n     * @param z the z position.\n     * @param color the ARGB color.\n     * @param intensity the intensity.\n     * @return the new point.\n     */\n    static create(index, x, y, z, color, intensity) {\n        let point = new CloudPoint();\n        point._index = index;\n        point._x = x;\n        point._y = y;\n        point._z = z;\n        point._color = color;\n        point._intensity = intensity;\n        return point;\n    }\n    /**\n     * Create a new point.\n     * @param attributes the definitions of the attributes.\n     * @return the new point.\n     */\n    static createWithAttributes(attributes) {\n        let point = new CloudPoint();\n        point._attributes = attributes;\n        if (attributes != null) {\n            point._values = new Array(attributes.length);\n            for (let i = 0; i < attributes.length; i++)\n                point._values[i] = new AttributeValue();\n        }\n        return point;\n    }\n    /**\n     * Clear the point.\n     */\n    clear() {\n        this._index = ALong.ZERO;\n        this._x = 0.0;\n        this._y = 0.0;\n        this._z = 0.0;\n        this._color = 0;\n        this._intensity = 0;\n        this._weight = 0;\n        this._selected = false;\n    }\n    /**\n     * Get the index.\n     * @return the index.\n     */\n    getIndex() {\n        return this._index;\n    }\n    /**\n     * Set the index.\n     * @param index the index.\n     */\n    setIndex(index) {\n        this._index = index;\n    }\n    /**\n     * Get the x position.\n     * @return the x position.\n     */\n    getX() {\n        return this._x;\n    }\n    /**\n     * Set the x position.\n     * @param x the new x position.\n     */\n    setX(x) {\n        this._x = x;\n    }\n    /**\n     * Get the y position.\n     * @return the y position.\n     */\n    getY() {\n        return this._y;\n    }\n    /**\n     * Set the y position.\n     * @param y the new y position.\n     */\n    setY(y) {\n        this._y = y;\n    }\n    /**\n     * Get the z position.\n     * @return the z position.\n     */\n    getZ() {\n        return this._z;\n    }\n    /**\n     * Set the z position.\n     * @param z the new z position.\n     */\n    setZ(z) {\n        this._z = z;\n    }\n    /**\n     * Get the ARGB color.\n     * @return the color.\n     */\n    getColor() {\n        return this._color;\n    }\n    /**\n     * Set the color.\n     * @param color the new color.\n     */\n    setColor(color) {\n        this._color = color;\n    }\n    /**\n     * Get the intensity.\n     * @return the intensity.\n     */\n    getIntensity() {\n        return this._intensity;\n    }\n    /**\n     * Set the intensity.\n     * @param intensity the new intensity.\n     */\n    setIntensity(intensity) {\n        this._intensity = intensity;\n    }\n    /**\n     * Get the weight.\n     * @return the weight.\n     */\n    getWeight() {\n        return this._weight;\n    }\n    /**\n     * Set the weight.\n     * @param weight the weight.\n     */\n    setWeight(weight) {\n        this._weight = weight;\n    }\n    /**\n     * Has the point been selected?\n     * @return true if selected.\n     */\n    isSelected() {\n        return this._selected;\n    }\n    /**\n     * Select the point.\n     * @param selected true if the point has been selected.\n     */\n    setSelected(selected) {\n        this._selected = selected;\n    }\n    /**\n     * Get the attribute definitions.\n     * @return the attribute definitions.\n     */\n    getAttributes() {\n        return this._attributes;\n    }\n    /**\n     * Get an attribute definitions.\n     * @param index the index of the attribute.\n     * @return an attribute definitions.\n     */\n    getAttribute(index) {\n        return this._attributes[index];\n    }\n    /**\n     * Get the attribute values.\n     * @return the attribute values.\n     */\n    getAttributeValues() {\n        return this._values;\n    }\n    /**\n     * Get an attribute value.\n     * @param index the index of the value.\n     * @return the value.\n     */\n    getAttributeValue(index) {\n        return this._values[index];\n    }\n    /**\n     * Get an attribute value.\n     * @param attributeName the name of the attribute.\n     * @return the value.\n     */\n    getNamedAttributeValue(attributeName) {\n        let index = PointAttribute.indexOfName(this._attributes, attributeName);\n        return (index < 0) ? (null) : this._values[index];\n    }\n    /**\n     * Set the attributes.\n     * @param attributes the definitions of the attributes.\n     * @param values the values of the attributes.\n     */\n    setAttributes(attributes, values) {\n        this._attributes = attributes;\n        this._values = values;\n    }\n    /**\n     * Copy the values to another point.\n     * @param other the other point.\n     */\n    copyTo(other) {\n        other._index = this._index;\n        other._x = this._x;\n        other._y = this._y;\n        other._z = this._z;\n        other._color = this._color;\n        other._intensity = this._intensity;\n        other._weight = this._weight;\n        other._selected = this._selected;\n        other._attributes = this._attributes;\n        other._values = AttributeValue.copyList(this._values);\n    }\n    /**\n     * Make a copy.\n     * @return a copy.\n     */\n    copy() {\n        let copy = new CloudPoint();\n        this.copyTo(copy);\n        return copy;\n    }\n    /**\n     * Get the distance to another point.\n     * @param other the other point.\n     * @return the distance.\n     */\n    getDistance(other) {\n        let dx = (other._x - this._x);\n        let dy = (other._y - this._y);\n        let dz = (other._z - this._z);\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\n    }\n    /**\n     * Get the square distance to another point.\n     * @param other the other point.\n     * @return the square distance.\n     */\n    getSquareDistance(other) {\n        let dx = (other._x - this._x);\n        let dy = (other._y - this._y);\n        let dz = (other._z - this._z);\n        return (dx * dx + dy * dy + dz * dz);\n    }\n    /**\n     * Get a coordinate.\n     * @return a coordinate.\n     */\n    getCoordinate() {\n        return new Coordinate(this._x, this._y, this._z);\n    }\n    /**\n     * Print the point.\n     */\n    print() {\n        Message.print(CloudPoint.MODULE, \"Index: \" + this._index);\n        Message.print(CloudPoint.MODULE, \"Position: \" + this._x + \",\" + this._y + \",\" + this._z);\n        Message.print(CloudPoint.MODULE, \"Color: \" + Numbers.rgbToString(this._color));\n        Message.print(CloudPoint.MODULE, \"Intensity: \" + this._intensity);\n        Message.print(CloudPoint.MODULE, \"Weight: \" + this._weight);\n        Message.print(CloudPoint.MODULE, \"Selected? \" + this._selected);\n        if (this._attributes != null)\n            for (let i = 0; i < this._attributes.length; i++)\n                Message.print(CloudPoint.MODULE, \"Attribute '\" + this._attributes[i].getName() + \"': \" + this._values[i]);\n    }\n}\n/** The name of this module */\nCloudPoint.MODULE = \"CloudPoint\";\nexport { CloudPoint };\n//# sourceMappingURL=CloudPoint.js.map",
      "start": 1693508127204,
      "end": 1693508127272,
      "sourcemaps": null
    }
  ]
}
