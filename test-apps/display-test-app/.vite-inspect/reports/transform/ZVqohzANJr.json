{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/geometry/TextString.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Geometry\n */\nimport { Point3d, Vector3d, YawPitchRollAngles } from \"@itwin/core-geometry\";\n/** A single line of text, all with the same font, styles (underline, bold, italic), and size.\n * This class also holds the origin and direction for the text.\n * A paragraph is composed of one or more instances of TextStrings.\n * @public\n */\nexport class TextString {\n    get width() { return this.height * (this.widthFactor ? this.widthFactor : 1.0); }\n    constructor(props) {\n        this.text = props.text;\n        this.font = props.font;\n        this.height = props.height;\n        this.widthFactor = props.widthFactor;\n        this.bold = props.bold;\n        this.italic = props.italic;\n        this.underline = props.underline;\n        this.origin = Point3d.fromJSON(props.origin);\n        this.rotation = YawPitchRollAngles.fromJSON(props.rotation);\n    }\n    toJSON() {\n        const val = {};\n        val.text = this.text;\n        val.font = this.font;\n        val.height = this.height;\n        val.widthFactor = this.widthFactor;\n        val.bold = this.bold;\n        val.italic = this.italic;\n        val.underline = this.underline;\n        if (!this.origin.isAlmostZero)\n            val.origin = this.origin;\n        if (!this.rotation.isIdentity())\n            val.rotation = this.rotation;\n        return val;\n    }\n    transformInPlace(transform) {\n        const newOrigin = transform.multiplyPoint3d(this.origin, this.origin);\n        const newTransform = this.rotation.toMatrix3d().multiplyMatrixTransform(transform);\n        const scales = new Vector3d();\n        if (!newTransform.matrix.normalizeColumnsInPlace(scales))\n            return false;\n        const newRotation = YawPitchRollAngles.createFromMatrix3d(newTransform.matrix);\n        if (undefined === newRotation)\n            return false;\n        const newHeight = this.height * scales.y;\n        const newWidth = this.width * scales.x;\n        if (newHeight < 1.0e-10 || newWidth < 1.0e-10)\n            return false;\n        this.origin.setFrom(newOrigin);\n        this.rotation.setFrom(newRotation);\n        this.height = newHeight;\n        this.widthFactor = (newHeight === newWidth ? undefined : (newWidth / newHeight));\n        return true;\n    }\n}\n//# sourceMappingURL=TextString.js.map",
      "start": 1693508120785,
      "end": 1693508120892,
      "sourcemaps": null
    }
  ]
}
