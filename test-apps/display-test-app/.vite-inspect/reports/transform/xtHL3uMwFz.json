{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend-devtools/lib/esm/ui/TextBox.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @alpha */\nexport function createTextBox(props) {\n    const div = document.createElement(\"div\");\n    if (true === props.inline)\n        div.style.display = \"inline\";\n    let label;\n    if (undefined !== props.label) {\n        label = document.createElement(\"label\");\n        label.innerText = props.label;\n        if (undefined !== props.id)\n            label.htmlFor = props.id;\n        div.appendChild(label);\n    }\n    const textbox = document.createElement(\"input\");\n    textbox.type = \"text\";\n    if (undefined !== props.id)\n        textbox.id = props.id;\n    div.appendChild(textbox);\n    if (undefined !== props.parent)\n        props.parent.appendChild(div);\n    const handler = props.handler;\n    if (undefined !== handler) {\n        textbox.onchange = () => handler(textbox);\n    }\n    // Don't want the document's listeners intepreting keypresses as keyboard shortcuts...\n    const stopPropagation = (ev) => ev.stopPropagation();\n    textbox.onkeydown = textbox.onkeyup = stopPropagation;\n    const keypresshandler = props.keypresshandler;\n    if (undefined !== keypresshandler) {\n        textbox.onkeypress = (ev) => {\n            keypresshandler(textbox, ev);\n            ev.stopPropagation();\n        };\n    }\n    else {\n        textbox.onkeypress = stopPropagation; // eslint-disable-line deprecation/deprecation\n    }\n    const focushandler = props.focushandler;\n    if (undefined !== focushandler) {\n        textbox.onfocus = () => focushandler(textbox);\n    }\n    if (undefined !== props.list) {\n        textbox.setAttribute(\"list\", props.list);\n    }\n    if (undefined !== props.tooltip)\n        div.title = props.tooltip;\n    return { label, textbox, div };\n}\n//# sourceMappingURL=TextBox.js.map",
      "start": 1693508122816,
      "end": 1693508122874,
      "sourcemaps": null
    }
  ]
}
