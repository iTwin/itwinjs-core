{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/webgl/HiliteUniforms.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module WebGL\n */\nimport { Hilite } from \"@itwin/core-common\";\nimport { FloatRgb } from \"./FloatRGBA\";\nimport { Matrix3 } from \"./Matrix\";\nimport { desync, sync } from \"./Sync\";\n/** Maintains state for uniforms related to hilite and emphasis.\n * @internal\n */\nexport class HiliteUniforms {\n    constructor() {\n        this._compositeSettings = new Matrix3();\n        this._compositeWidths = new Float32Array(2);\n        this._featureSettings = new Matrix3();\n        this._hiliteSettings = new Hilite.Settings();\n        this._emphasisSettings = new Hilite.Settings();\n        this._hiliteRgb = FloatRgb.fromColorDef(this.hiliteSettings.color);\n        this.syncKey = 0;\n    }\n    get hiliteSettings() { return this._hiliteSettings; }\n    get emphasisSettings() { return this._emphasisSettings; }\n    get hiliteColor() { return this._hiliteRgb; }\n    update(hilite, emphasis) {\n        if (Hilite.equalSettings(hilite, this._hiliteSettings) && Hilite.equalSettings(emphasis, this._emphasisSettings))\n            return;\n        desync(this);\n        this._hiliteSettings = Hilite.cloneSettings(hilite);\n        this._emphasisSettings = Hilite.cloneSettings(emphasis);\n        const c = this._compositeSettings;\n        const f = this._featureSettings;\n        const rgb = this._hiliteRgb;\n        rgb.setColorDef(emphasis.color);\n        c.data[3] = f.data[3] = rgb.red;\n        c.data[4] = f.data[4] = rgb.green;\n        c.data[5] = f.data[5] = rgb.blue;\n        // NB: Must set to hilite color last - is exposed through getter.\n        rgb.setColorDef(hilite.color);\n        c.data[0] = f.data[0] = rgb.red;\n        c.data[1] = f.data[1] = rgb.green;\n        c.data[2] = f.data[2] = rgb.blue;\n        c.data[6] = hilite.hiddenRatio;\n        c.data[7] = emphasis.hiddenRatio;\n        f.data[6] = hilite.visibleRatio;\n        f.data[7] = emphasis.visibleRatio;\n        this._compositeWidths[0] = hilite.silhouette;\n        this._compositeWidths[1] = emphasis.silhouette;\n    }\n    // mat3:\n    // hilite.red     hilite.green hilite.blue\n    // emph.red       emph.green   emph.blue\n    // hilite.hidden  emph.hidden unused\n    bindCompositeSettings(uniform) {\n        if (!sync(this, uniform))\n            uniform.setMatrix3(this._compositeSettings);\n    }\n    // vec2:\n    // hilite.silhouette emph.silhouette\n    bindCompositeWidths(uniform) {\n        if (!sync(this, uniform))\n            uniform.setUniform2fv(this._compositeWidths);\n    }\n    // mat3:\n    // hilite.red     hilite.green hilite.blue\n    // emph.red       emph.green   emph.blue\n    // hilite.visible emph.visible unused\n    bindFeatureSettings(uniform) {\n        if (!sync(this, uniform))\n            uniform.setMatrix3(this._featureSettings);\n    }\n}\n//# sourceMappingURL=HiliteUniforms.js.map",
      "start": 1693508124754,
      "end": 1693508124986,
      "sourcemaps": null
    }
  ]
}
