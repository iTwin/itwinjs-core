{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/pointcloud/model/Grid.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { Bounds } from \"../../spatial/geom/Bounds\";\nimport { Coordinate } from \"../../spatial/geom/Coordinate\";\nimport { Numbers } from \"../../system/runtime/Numbers\";\nimport { GridIndex } from \"./GridIndex\";\n/**\n * Class Grid defines an infinite 3D grid of cells.\n *\n * @version 1.0 January 2012\n */\n/** @internal */\nexport class Grid {\n    /**\n     * Create a new grid.\n     * @param x0 the x origin.\n     * @param y0 the y origin.\n     * @param z0 the z origin.\n     * @param sizeX the cell X size.\n     * @param sizeY the cell Y size.\n     * @param sizeZ the cell Z size.\n     */\n    constructor(p0, size) {\n        this.p0 = p0;\n        this.size = size;\n    }\n    /**\n     * Get the cell index of an X position.\n     * @param x the x position.\n     * @return the cell index.\n     */\n    getCellX(x) {\n        return (x - this.p0.x) / this.size.x;\n    }\n    /**\n     * Get the cell index of a Y position.\n     * @param y the y position.\n     * @return the cell index.\n     */\n    getCellY(y) {\n        return (y - this.p0.y) / this.size.y;\n    }\n    /**\n     * Get the cell index of a Z position.\n     * @param z the z position.\n     * @return the cell index.\n     */\n    getCellZ(z) {\n        return (z - this.p0.z) / this.size.z;\n    }\n    /**\n     * Get the cell index of a position.\n     * @param position the position.\n     * @param cellIndex the cell index.\n     */\n    getCellIndexTo(position, cellIndex) {\n        cellIndex.x = Numbers.intFloor((position.x - this.p0.x) / this.size.x);\n        cellIndex.y = Numbers.intFloor((position.y - this.p0.y) / this.size.y);\n        cellIndex.z = Numbers.intFloor((position.z - this.p0.z) / this.size.z);\n        return cellIndex;\n    }\n    /**\n     * Get the cell index of a position.\n     * @param position the position.\n     * @return the cell index.\n     */\n    getCellIndex(position) {\n        return this.getCellIndexTo(position, new GridIndex(0, 0, 0));\n    }\n    /**\n     * Get the center point of a cell.\n     * @param cellIndex the index of the cell.\n     * @return the center point.\n     */\n    getCellCenter(cellIndex) {\n        let cx = this.p0.x + (cellIndex.x + 0.5) * this.size.x;\n        let cy = this.p0.y + (cellIndex.y + 0.5) * this.size.y;\n        let cz = this.p0.z + (cellIndex.z + 0.5) * this.size.z;\n        return new Coordinate(cx, cy, cz);\n    }\n    /**\n     * Get the bounds of a cell.\n     * @param cellIndex the index of the cell.\n     * @return the bounds.\n     */\n    getCellBounds(cellIndex) {\n        let x0 = this.p0.x + (cellIndex.x) * this.size.x;\n        let y0 = this.p0.y + (cellIndex.y) * this.size.y;\n        let z0 = this.p0.z + (cellIndex.z) * this.size.z;\n        let bounds = new Bounds();\n        bounds.addXYZ(x0, y0, z0);\n        bounds.addXYZ(x0 + this.size.x, y0 + this.size.y, z0 + this.size.z);\n        return bounds;\n    }\n    /**\n     * Scale the grid.\n     * @param scale the scale factor.\n     * @return the scaled grid.\n     */\n    scale(scale) {\n        return new Grid(new Coordinate(this.p0.x, this.p0.y, this.p0.z), new Coordinate(scale * this.size.x, scale * this.size.y, scale * this.size.z));\n    }\n    /**\n     * Move the grid.\n     * @param dx the x offset.\n     * @param dy the y offset.\n     * @param dz the z offset.\n     * @return the scaled grid.\n     */\n    scale3(dx, dy, dz) {\n        return new Grid(new Coordinate(this.p0.x + dx, this.p0.y + dy, this.p0.z + dz), new Coordinate(this.size.x, this.size.y, this.size.z));\n    }\n    /**\n     * The standard toString method.\n     * @see Object#toString\n     */\n    toString() {\n        return \"[Grid:x0=\" + this.p0.x + \",y0=\" + this.p0.y + \",z0=\" + this.p0.z + \",sx=\" + this.size.x + \",sy=\" + this.size.y + \",sz=\" + this.size.z + \"]\";\n    }\n}\n//# sourceMappingURL=Grid.js.map",
      "start": 1693508127457,
      "end": 1693508127511,
      "sourcemaps": null
    }
  ]
}
