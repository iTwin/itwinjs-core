{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/RealityDataProvider.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { assert } from \"@itwin/core-bentley\";\r\nimport { RealityDataSourceKey } from \"@itwin/core-common\";\r\nimport { IModelApp, RealityDataSource, Tool } from \"@itwin/core-frontend\";\r\n\r\nclass CustomRealityDataSource implements RealityDataSource {\r\n  public readonly key: RealityDataSourceKey;\r\n  public readonly usesGeometricError = true;\r\n  public maximumScreenSpaceError = 32; // Experiment with this. Cesium default is 16.\r\n  private readonly _tilesetUrl: string;\r\n  private readonly _baseUrl: string;\r\n  private readonly _apiKey: string;\r\n\r\n  public constructor(sourceKey: RealityDataSourceKey, apiKey: string) {\r\n    assert(sourceKey.provider === \"DtaRealityDataProvider\");\r\n    this.key = sourceKey;\r\n    this._tilesetUrl = this.key.id;\r\n    this._apiKey = apiKey;\r\n\r\n    const url = new URL(this._tilesetUrl);\r\n    this._baseUrl = url.origin;\r\n  }\r\n\r\n  public get isContextShare() { return false; }\r\n  public get realityData() { return undefined; }\r\n  public get realityDataId() { return undefined; }\r\n  public get realityDataType() { return \"ThreeDTile\"; }\r\n  public async getServiceUrl() { return Promise.resolve(this._tilesetUrl); }\r\n  public async getSpatialLocationAndExtents() { return Promise.resolve(undefined); }\r\n  public async getPublisherProductInfo() { return Promise.resolve(undefined); }\r\n\r\n  public async getRootDocument(): Promise<any> {\r\n    const response = await fetch(`${this._tilesetUrl}?key=${this._apiKey}`);\r\n    return response.json();\r\n  }\r\n\r\n  private async _getTileContent(name: string, responseType: \"json\" | \"arraybuffer\"): Promise<any> {\r\n    const response = await fetch(`${this._baseUrl}/${name}?key=${this._apiKey}`);\r\n    return \"json\" === responseType ? response.json() : response.arrayBuffer();\r\n  }\r\n\r\n  public async getTileContent(name: string): Promise<any> {\r\n    return this._getTileContent(name, \"arraybuffer\");\r\n  }\r\n\r\n  public async getTileJson(name: string): Promise<any> {\r\n    return this._getTileContent(name, \"json\");\r\n  }\r\n\r\n  public getTileContentType(url: string): \"tile\" | \"tileset\" {\r\n    return url.indexOf(\"tileset\") > 0 ? \"tileset\" : \"tile\";\r\n  }\r\n}\r\n\r\nexport function registerRealityDataSourceProvider(apiKey: string): void {\r\n  IModelApp.realityDataSourceProviders.register(\"DtaRealityDataProvider\", {\r\n    createRealityDataSource: async (key) => new CustomRealityDataSource(key, apiKey),\r\n  });\r\n}\r\n\r\nexport class AttachCustomRealityDataTool extends Tool {\r\n  public static override toolId = \"AttachCustomRealityData\";\r\n  public static override get minArgs() { return 1; }\r\n  public static override get maxArgs() { return 1; }\r\n\r\n  public override async run(url: string): Promise<boolean> {\r\n    const vp = IModelApp.viewManager.selectedView;\r\n    if (vp) {\r\n      vp.displayStyle.attachRealityModel({\r\n        tilesetUrl: url,\r\n        rdSourceKey: {\r\n          provider: \"DtaRealityDataProvider\",\r\n          format: \"ThreeDTile\",\r\n          id: url,\r\n        },\r\n      });\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public override async parseAndRun(...args: string[]): Promise<boolean> {\r\n    return this.run(args[0]);\r\n  }\r\n}\r\n",
      "start": 1693508121255,
      "end": 1693508121327,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { assert } from \"@itwin/core-bentley\";\nimport { IModelApp, Tool } from \"@itwin/core-frontend\";\nclass CustomRealityDataSource {\n  constructor(sourceKey, apiKey) {\n    this.usesGeometricError = true;\n    this.maximumScreenSpaceError = 32;\n    assert(sourceKey.provider === \"DtaRealityDataProvider\");\n    this.key = sourceKey;\n    this._tilesetUrl = this.key.id;\n    this._apiKey = apiKey;\n    const url = new URL(this._tilesetUrl);\n    this._baseUrl = url.origin;\n  }\n  get isContextShare() {\n    return false;\n  }\n  get realityData() {\n    return void 0;\n  }\n  get realityDataId() {\n    return void 0;\n  }\n  get realityDataType() {\n    return \"ThreeDTile\";\n  }\n  async getServiceUrl() {\n    return Promise.resolve(this._tilesetUrl);\n  }\n  async getSpatialLocationAndExtents() {\n    return Promise.resolve(void 0);\n  }\n  async getPublisherProductInfo() {\n    return Promise.resolve(void 0);\n  }\n  async getRootDocument() {\n    const response = await fetch(`${this._tilesetUrl}?key=${this._apiKey}`);\n    return response.json();\n  }\n  async _getTileContent(name, responseType) {\n    const response = await fetch(`${this._baseUrl}/${name}?key=${this._apiKey}`);\n    return \"json\" === responseType ? response.json() : response.arrayBuffer();\n  }\n  async getTileContent(name) {\n    return this._getTileContent(name, \"arraybuffer\");\n  }\n  async getTileJson(name) {\n    return this._getTileContent(name, \"json\");\n  }\n  getTileContentType(url) {\n    return url.indexOf(\"tileset\") > 0 ? \"tileset\" : \"tile\";\n  }\n}\nexport function registerRealityDataSourceProvider(apiKey) {\n  IModelApp.realityDataSourceProviders.register(\"DtaRealityDataProvider\", {\n    createRealityDataSource: async (key) => new CustomRealityDataSource(key, apiKey)\n  });\n}\nexport class AttachCustomRealityDataTool extends Tool {\n  static get minArgs() {\n    return 1;\n  }\n  static get maxArgs() {\n    return 1;\n  }\n  async run(url) {\n    const vp = IModelApp.viewManager.selectedView;\n    if (vp) {\n      vp.displayStyle.attachRealityModel({\n        tilesetUrl: url,\n        rdSourceKey: {\n          provider: \"DtaRealityDataProvider\",\n          format: \"ThreeDTile\",\n          id: url\n        }\n      });\n    }\n    return true;\n  }\n  async parseAndRun(...args) {\n    return this.run(args[0]);\n  }\n}\nAttachCustomRealityDataTool.toolId = \"AttachCustomRealityData\";\n",
      "start": 1693508121327,
      "end": 1693508121653,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/RealityDataProvider.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { assert } from \"@itwin/core-bentley\";\r\nimport { RealityDataSourceKey } from \"@itwin/core-common\";\r\nimport { IModelApp, RealityDataSource, Tool } from \"@itwin/core-frontend\";\r\n\r\nclass CustomRealityDataSource implements RealityDataSource {\r\n  public readonly key: RealityDataSourceKey;\r\n  public readonly usesGeometricError = true;\r\n  public maximumScreenSpaceError = 32; // Experiment with this. Cesium default is 16.\r\n  private readonly _tilesetUrl: string;\r\n  private readonly _baseUrl: string;\r\n  private readonly _apiKey: string;\r\n\r\n  public constructor(sourceKey: RealityDataSourceKey, apiKey: string) {\r\n    assert(sourceKey.provider === \"DtaRealityDataProvider\");\r\n    this.key = sourceKey;\r\n    this._tilesetUrl = this.key.id;\r\n    this._apiKey = apiKey;\r\n\r\n    const url = new URL(this._tilesetUrl);\r\n    this._baseUrl = url.origin;\r\n  }\r\n\r\n  public get isContextShare() { return false; }\r\n  public get realityData() { return undefined; }\r\n  public get realityDataId() { return undefined; }\r\n  public get realityDataType() { return \"ThreeDTile\"; }\r\n  public async getServiceUrl() { return Promise.resolve(this._tilesetUrl); }\r\n  public async getSpatialLocationAndExtents() { return Promise.resolve(undefined); }\r\n  public async getPublisherProductInfo() { return Promise.resolve(undefined); }\r\n\r\n  public async getRootDocument(): Promise<any> {\r\n    const response = await fetch(`${this._tilesetUrl}?key=${this._apiKey}`);\r\n    return response.json();\r\n  }\r\n\r\n  private async _getTileContent(name: string, responseType: \"json\" | \"arraybuffer\"): Promise<any> {\r\n    const response = await fetch(`${this._baseUrl}/${name}?key=${this._apiKey}`);\r\n    return \"json\" === responseType ? response.json() : response.arrayBuffer();\r\n  }\r\n\r\n  public async getTileContent(name: string): Promise<any> {\r\n    return this._getTileContent(name, \"arraybuffer\");\r\n  }\r\n\r\n  public async getTileJson(name: string): Promise<any> {\r\n    return this._getTileContent(name, \"json\");\r\n  }\r\n\r\n  public getTileContentType(url: string): \"tile\" | \"tileset\" {\r\n    return url.indexOf(\"tileset\") > 0 ? \"tileset\" : \"tile\";\r\n  }\r\n}\r\n\r\nexport function registerRealityDataSourceProvider(apiKey: string): void {\r\n  IModelApp.realityDataSourceProviders.register(\"DtaRealityDataProvider\", {\r\n    createRealityDataSource: async (key) => new CustomRealityDataSource(key, apiKey),\r\n  });\r\n}\r\n\r\nexport class AttachCustomRealityDataTool extends Tool {\r\n  public static override toolId = \"AttachCustomRealityData\";\r\n  public static override get minArgs() { return 1; }\r\n  public static override get maxArgs() { return 1; }\r\n\r\n  public override async run(url: string): Promise<boolean> {\r\n    const vp = IModelApp.viewManager.selectedView;\r\n    if (vp) {\r\n      vp.displayStyle.attachRealityModel({\r\n        tilesetUrl: url,\r\n        rdSourceKey: {\r\n          provider: \"DtaRealityDataProvider\",\r\n          format: \"ThreeDTile\",\r\n          id: url,\r\n        },\r\n      });\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public override async parseAndRun(...args: string[]): Promise<boolean> {\r\n    return this.run(args[0]);\r\n  }\r\n}\r\n"
        ],
        "mappings": ";AAKA,SAAS,cAAc;AAEvB,SAAS,WAA8B,YAAY;AAEnD,MAAM,wBAAqD;AAAA,EAQlD,YAAY,WAAiC,QAAgB;AANpE,SAAgB,qBAAqB;AACrC,SAAO,0BAA0B;AAM/B,WAAO,UAAU,aAAa,wBAAwB;AACtD,SAAK,MAAM;AACX,SAAK,cAAc,KAAK,IAAI;AAC5B,SAAK,UAAU;AAEf,UAAM,MAAM,IAAI,IAAI,KAAK,WAAW;AACpC,SAAK,WAAW,IAAI;AAAA,EACtB;AAAA,EAEA,IAAW,iBAAiB;AAAE,WAAO;AAAA,EAAO;AAAA,EAC5C,IAAW,cAAc;AAAE,WAAO;AAAA,EAAW;AAAA,EAC7C,IAAW,gBAAgB;AAAE,WAAO;AAAA,EAAW;AAAA,EAC/C,IAAW,kBAAkB;AAAE,WAAO;AAAA,EAAc;AAAA,EACpD,MAAa,gBAAgB;AAAE,WAAO,QAAQ,QAAQ,KAAK,WAAW;AAAA,EAAG;AAAA,EACzE,MAAa,+BAA+B;AAAE,WAAO,QAAQ,QAAQ,MAAS;AAAA,EAAG;AAAA,EACjF,MAAa,0BAA0B;AAAE,WAAO,QAAQ,QAAQ,MAAS;AAAA,EAAG;AAAA,EAE5E,MAAa,kBAAgC;AAC3C,UAAM,WAAW,MAAM,MAAM,GAAG,KAAK,WAAW,QAAQ,KAAK,OAAO,EAAE;AACtE,WAAO,SAAS,KAAK;AAAA,EACvB;AAAA,EAEA,MAAc,gBAAgB,MAAc,cAAoD;AAC9F,UAAM,WAAW,MAAM,MAAM,GAAG,KAAK,QAAQ,IAAI,IAAI,QAAQ,KAAK,OAAO,EAAE;AAC3E,WAAO,WAAW,eAAe,SAAS,KAAK,IAAI,SAAS,YAAY;AAAA,EAC1E;AAAA,EAEA,MAAa,eAAe,MAA4B;AACtD,WAAO,KAAK,gBAAgB,MAAM,aAAa;AAAA,EACjD;AAAA,EAEA,MAAa,YAAY,MAA4B;AACnD,WAAO,KAAK,gBAAgB,MAAM,MAAM;AAAA,EAC1C;AAAA,EAEO,mBAAmB,KAAiC;AACzD,WAAO,IAAI,QAAQ,SAAS,IAAI,IAAI,YAAY;AAAA,EAClD;AACF;AAEO,gBAAS,kCAAkC,QAAsB;AACtE,YAAU,2BAA2B,SAAS,0BAA0B;AAAA,IACtE,yBAAyB,OAAO,QAAQ,IAAI,wBAAwB,KAAK,MAAM;AAAA,EACjF,CAAC;AACH;AAEO,aAAM,oCAAoC,KAAK;AAAA,EAEpD,WAA2B,UAAU;AAAE,WAAO;AAAA,EAAG;AAAA,EACjD,WAA2B,UAAU;AAAE,WAAO;AAAA,EAAG;AAAA,EAEjD,MAAsB,IAAI,KAA+B;AACvD,UAAM,KAAK,UAAU,YAAY;AACjC,QAAI,IAAI;AACN,SAAG,aAAa,mBAAmB;AAAA,QACjC,YAAY;AAAA,QACZ,aAAa;AAAA,UACX,UAAU;AAAA,UACV,QAAQ;AAAA,UACR,IAAI;AAAA,QACN;AAAA,MACF,CAAC;AAAA,IACH;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAsB,eAAe,MAAkC;AACrE,WAAO,KAAK,IAAI,KAAK,CAAC,CAAC;AAAA,EACzB;AACF;AAxBa,4BACY,SAAS;",
        "names": []
      }
    }
  ]
}
