{
  "resolvedId": "D:/hub2023A/itwinjs-core/common/temp/node_modules/.pnpm/@itwin+imodels-client-management@3.1.0/node_modules/@itwin/imodels-client-management/lib/esm/operations/IModelsApiUrlFormatter.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "export class IModelsApiUrlFormatter {\r\n    constructor(baseUrl) {\r\n        this.baseUrl = baseUrl;\r\n        this._regexIgnoreCaseOption = \"i\";\r\n        this._groupNames = {\r\n            iModelId: \"iModelId\",\r\n            changesetIdOrIndex: \"changesetIdOrIndex\",\r\n            namedVersionId: \"namedVersionId\",\r\n            userId: \"userId\"\r\n        };\r\n        this._numericRegex = new RegExp(\"^\\\\d+$\");\r\n        this._changesetUrlRegex = new RegExp(`/iModels/(?<${this._groupNames.iModelId}>.*)/changesets/(?<${this._groupNames.changesetIdOrIndex}>[^/]*)`, this._regexIgnoreCaseOption);\r\n        this._checkpointUrlRegex = new RegExp(`/iModels/(?<${this._groupNames.iModelId}>.*)/changesets/(?<${this._groupNames.changesetIdOrIndex}>.*)/checkpoint`, this._regexIgnoreCaseOption);\r\n        this._namedVersionUrlRegex = new RegExp(`/iModels/(?<${this._groupNames.iModelId}>.*)/namedversions/(?<${this._groupNames.namedVersionId}>[^/]*)`, this._regexIgnoreCaseOption);\r\n        this._userUrlRegex = new RegExp(`/iModels/(?<${this._groupNames.iModelId}>.*)/users/(?<${this._groupNames.userId}>[^/]*)`, this._regexIgnoreCaseOption);\r\n    }\r\n    getCreateIModelUrl() {\r\n        return this.baseUrl;\r\n    }\r\n    getSingleIModelUrl(params) {\r\n        return `${this.baseUrl}/${params.iModelId}`;\r\n    }\r\n    getIModelListUrl(params) {\r\n        return `${this.baseUrl}${this.formQueryString({ ...params.urlParams })}`;\r\n    }\r\n    getSingleBriefcaseUrl(params) {\r\n        return `${this.baseUrl}/${params.iModelId}/briefcases/${params.briefcaseId}`;\r\n    }\r\n    getBriefcaseListUrl(params) {\r\n        return `${this.baseUrl}/${params.iModelId}/briefcases${this.formQueryString({ ...params.urlParams })}`;\r\n    }\r\n    getSingleChangesetUrl(params) {\r\n        var _a;\r\n        return `${this.baseUrl}/${params.iModelId}/changesets/${(_a = params.changesetId) !== null && _a !== void 0 ? _a : params.changesetIndex}`;\r\n    }\r\n    getChangesetListUrl(params) {\r\n        return `${this.baseUrl}/${params.iModelId}/changesets${this.formQueryString({ ...params.urlParams })}`;\r\n    }\r\n    parseChangesetUrl(url) {\r\n        const matchedGroups = this._changesetUrlRegex.exec(url).groups;\r\n        return {\r\n            iModelId: matchedGroups[this._groupNames.iModelId],\r\n            ...this.parseChangesetIdOrIndex(matchedGroups[this._groupNames.changesetIdOrIndex])\r\n        };\r\n    }\r\n    getSingleNamedVersionUrl(params) {\r\n        return `${this.baseUrl}/${params.iModelId}/namedversions/${params.namedVersionId}`;\r\n    }\r\n    getNamedVersionListUrl(params) {\r\n        return `${this.baseUrl}/${params.iModelId}/namedversions${this.formQueryString({ ...params.urlParams })}`;\r\n    }\r\n    getCheckpointUrl(params) {\r\n        var _a;\r\n        const parentEntityUrlPath = params.namedVersionId\r\n            ? `namedversions/${params.namedVersionId}`\r\n            : `changesets/${(_a = params.changesetId) !== null && _a !== void 0 ? _a : params.changesetIndex}`;\r\n        return `${this.baseUrl}/${params.iModelId}/${parentEntityUrlPath}/checkpoint`;\r\n    }\r\n    getThumbnailUrl(params) {\r\n        return `${this.baseUrl}/${params.iModelId}/thumbnail${this.formQueryString({ ...params.urlParams })}`;\r\n    }\r\n    getUserListUrl(params) {\r\n        return `${this.baseUrl}/${params.iModelId}/users${this.formQueryString({ ...params.urlParams })}`;\r\n    }\r\n    getSingleUserUrl(params) {\r\n        return `${this.baseUrl}/${params.iModelId}/users/${params.userId}`;\r\n    }\r\n    getUserPermissionsUrl(params) {\r\n        return `${this.baseUrl}/${params.iModelId}/permissions`;\r\n    }\r\n    parseCheckpointUrl(url) {\r\n        const matchedGroups = this._checkpointUrlRegex.exec(url).groups;\r\n        return {\r\n            iModelId: matchedGroups[this._groupNames.iModelId],\r\n            ...this.parseChangesetIdOrIndex(matchedGroups[this._groupNames.changesetIdOrIndex])\r\n        };\r\n    }\r\n    parseNamedVersionUrl(url) {\r\n        const matchedGroups = this._namedVersionUrlRegex.exec(url).groups;\r\n        return {\r\n            iModelId: matchedGroups[this._groupNames.iModelId],\r\n            namedVersionId: matchedGroups[this._groupNames.namedVersionId]\r\n        };\r\n    }\r\n    parseUserUrl(url) {\r\n        const matchedGroups = this._userUrlRegex.exec(url).groups;\r\n        return {\r\n            iModelId: matchedGroups[this._groupNames.iModelId],\r\n            userId: matchedGroups[this._groupNames.userId]\r\n        };\r\n    }\r\n    formQueryString(urlParameters) {\r\n        let queryString = \"\";\r\n        for (const urlParameterKey in urlParameters) {\r\n            if (!Object.prototype.hasOwnProperty.call(urlParameters, urlParameterKey))\r\n                continue;\r\n            const urlParameterValue = urlParameters[urlParameterKey];\r\n            if (!this.shouldAppendToUrl(urlParameterValue))\r\n                continue;\r\n            queryString = this.appendToQueryString(queryString, urlParameterKey, urlParameterValue);\r\n        }\r\n        return queryString;\r\n    }\r\n    /**\r\n     * API could return Changeset urls that either contain id or index since both are valid identifiers\r\n     * so here we handle both scenarios. We assume if the value contains only digits and is shorter than 40\r\n     * symbols it is a numeric index, otherwise, it is a string id.\r\n     */\r\n    parseChangesetIdOrIndex(changesetIdOrIndex) {\r\n        const containsOnlyDigits = this._numericRegex.test(changesetIdOrIndex);\r\n        if (containsOnlyDigits && changesetIdOrIndex.length < 40)\r\n            return {\r\n                changesetIndex: parseInt(changesetIdOrIndex, 10)\r\n            };\r\n        return {\r\n            changesetId: changesetIdOrIndex\r\n        };\r\n    }\r\n    shouldAppendToUrl(urlParameterValue) {\r\n        if (urlParameterValue === null || urlParameterValue === undefined)\r\n            return false;\r\n        if (typeof urlParameterValue === \"string\" && !urlParameterValue.trim())\r\n            return false;\r\n        return true;\r\n    }\r\n    appendToQueryString(existingQueryString, parameterKey, parameterValue) {\r\n        const separator = existingQueryString.length === 0 ? \"?\" : \"&\";\r\n        return `${existingQueryString}${separator}${parameterKey}=${this.stringify(parameterValue)}`;\r\n    }\r\n    stringify(urlParameterValue) {\r\n        if (this.isOrderBy(urlParameterValue)) {\r\n            let result = urlParameterValue.property;\r\n            if (urlParameterValue.operator)\r\n                result += ` ${urlParameterValue.operator}`;\r\n            return result;\r\n        }\r\n        return urlParameterValue.toString();\r\n    }\r\n    isOrderBy(parameterValue) {\r\n        return parameterValue.property !== undefined;\r\n    }\r\n}\r\n//# sourceMappingURL=IModelsApiUrlFormatter.js.map",
      "start": 1693508125105,
      "end": 1693508125122,
      "sourcemaps": null
    }
  ]
}
