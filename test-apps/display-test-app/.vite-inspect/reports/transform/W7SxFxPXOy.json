{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/RenderTexture.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Rendering\n */\n/** Represents a texture image applied to a surface during rendering.\n * A RenderTexture is typically - but not always - associated with a [[RenderMaterial]].\n * @see [RenderSystem.createTextureFromImage]($frontend) to obtain a texture from an HTML image.\n * @see [RenderSystem.createTextureFromElement]($frontend) to obtain a texture from a [Texture]($backend) element.\n * @public\n */\nexport class RenderTexture {\n    get isTileSection() { return RenderTexture.Type.TileSection === this.type; }\n    get isGlyph() { return RenderTexture.Type.Glyph === this.type; }\n    get isSkyBox() { return RenderTexture.Type.SkyBox === this.type; }\n    constructor(type) {\n        this.type = type;\n    }\n}\n/** @public */\n(function (RenderTexture) {\n    /** The types of [[RenderTexture]]s that can be created by a [RenderSystem]($frontend). */\n    let Type;\n    (function (Type) {\n        /** An image applied to a surface, with support for mip-mapping and repetition. */\n        Type[Type[\"Normal\"] = 0] = \"Normal\";\n        /** An image containing any number of text glyphs, used for efficiently rendering readable small text. */\n        Type[Type[\"Glyph\"] = 1] = \"Glyph\";\n        /** A non-repeating image with no mip-maps, used for example for reality models. */\n        Type[Type[\"TileSection\"] = 2] = \"TileSection\";\n        /** A three-dimensional texture used for rendering a skybox. */\n        Type[Type[\"SkyBox\"] = 3] = \"SkyBox\";\n        /** A non-repeating image with mip-maps and and anisotropic filtering, used for map tiles when draped on terrain. */\n        Type[Type[\"FilteredTileSection\"] = 4] = \"FilteredTileSection\";\n        /** A gradient image used for thematic display. */\n        Type[Type[\"ThematicGradient\"] = 5] = \"ThematicGradient\";\n    })(Type = RenderTexture.Type || (RenderTexture.Type = {}));\n    /** Parameters used to construct a [[RenderTexture]].\n     * @deprecated in 3.x. use RenderSystem.createTexture and TextureCreateArgs.\n     * @public\n     */\n    class Params {\n        constructor(key, type = RenderTexture.Type.Normal, isOwned = false) {\n            this.key = key;\n            this.type = type;\n            this.isOwned = isOwned;\n        }\n        get isTileSection() { return RenderTexture.Type.TileSection === this.type; }\n        get isGlyph() { return RenderTexture.Type.Glyph === this.type; }\n        get isSkyBox() { return RenderTexture.Type.SkyBox === this.type; }\n    }\n    RenderTexture.Params = Params;\n})(RenderTexture || (RenderTexture = {}));\n//# sourceMappingURL=RenderTexture.js.map",
      "start": 1693508120944,
      "end": 1693508121008,
      "sourcemaps": null
    }
  ]
}
