{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/tile/TileStorage.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { getTileObjectReference, IModelTileRpcInterface } from \"@itwin/core-common\";\n/** @beta */\nexport class TileStorage {\n    constructor(storage) {\n        this.storage = storage;\n        this._transferConfigs = new Map();\n        this._pendingTransferConfigRequests = new Map();\n    }\n    async downloadTile(tokenProps, iModelId, changesetId, treeId, contentId, guid) {\n        const transferConfig = await this.getTransferConfig(tokenProps, iModelId);\n        if (transferConfig === undefined)\n            return undefined;\n        try {\n            const buffer = await this.storage.download({\n                reference: getTileObjectReference(iModelId, changesetId, treeId, contentId, guid),\n                transferConfig,\n                transferType: \"buffer\",\n            });\n            return new Uint8Array(buffer); // should always be Buffer because transferType === \"buffer\"\n        }\n        catch (_) {\n            // @itwin/object-storage re-throws internal implementation-specific errors, so let's treat them all as 404 for now.\n            return undefined;\n        }\n    }\n    async getTransferConfig(tokenProps, iModelId) {\n        if (this._transferConfigs.has(iModelId)) {\n            const transferConfig = this._transferConfigs.get(iModelId);\n            if (transferConfig === undefined)\n                return undefined;\n            if (transferConfig.expiration > new Date())\n                return transferConfig;\n            else // Refresh expired transferConfig\n                return this.sendTransferConfigRequest(tokenProps, iModelId);\n        }\n        return this.sendTransferConfigRequest(tokenProps, iModelId);\n    }\n    async sendTransferConfigRequest(tokenProps, iModelId) {\n        const pendingRequest = this._pendingTransferConfigRequests.get(iModelId);\n        if (pendingRequest !== undefined)\n            return pendingRequest;\n        const request = (async () => {\n            const config = await IModelTileRpcInterface.getClient().getTileCacheConfig(tokenProps);\n            this._transferConfigs.set(iModelId, config);\n            this._pendingTransferConfigRequests.delete(iModelId);\n            return config;\n        })();\n        this._pendingTransferConfigRequests.set(iModelId, request);\n        return request;\n    }\n}\n//# sourceMappingURL=TileStorage.js.map",
      "start": 1693508121649,
      "end": 1693508121788,
      "sourcemaps": null
    }
  ]
}
