{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/tile/map/TerrainMeshProvider.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tiles\n */\nimport { ApproximateTerrainHeights } from \"../../ApproximateTerrainHeights\";\n/** Provides 3d meshes representing terrain for display in a [[Viewport]].\n * Each mesh represents the terrain within a rectangular region of the Earth associated with a [[MapTile]].\n * The display system drapes background map imagery onto these meshes.\n * `TerrainMeshProvider`s are obtained from [[TerrainProvider]]s.\n * @note A terrain mesh provider is expected to produce terrain for all areas of the globe. If it lacks terrain data for an area of the globe,\n * it might choose to fall back to producing smooth terrain using an [[EllipsoidTerrainProvider]].\n * @see [[EllipsoidTerrainProvider]] for an example implementation that provides smooth terrain meshes.\n * @see [BingTerrainMeshProvider](https://github.com/iTwin/itwinjs-core/blob/master/test-apps/display-test-app/src/frontend/BingTerrainProvider.ts) for an example\n * implementation that produces 3d terrain meshes from elevations provided by [[BingElevationProvider]].\n * @public\n */\nexport class TerrainMeshProvider {\n    /** Add attribution logo cards for the terrain data supplied by this provider to the [[Viewport]]'s logo div.\n     * For example, a provider that produces meshes from [Bing Maps](https://docs.microsoft.com/en-us/bingmaps/rest-services/elevations/) would be required to\n     * disclose any copyrighted data used in the production of those meshes.\n     */\n    addLogoCards(_cards, _vp) { }\n    /** Return whether terrain data can be obtained for the [[MapTile]] specified by `quadId`. If it returns false, a terrain mesh will instead be produced for\n     * that tile by up-sampling the terrain mesh provided by its parent tile.\n     * The default implementation returns `true`.\n     */\n    isTileAvailable(_quadId) {\n        return true;\n    }\n    /** Returns the minimum and maximum elevation of the terrain within the specified region of the Earth.\n     * This range is used for culling terrain meshes that do not intersect the view frustum.\n     * The default implementation uses a fast approximation.\n     */\n    getChildHeightRange(quadId, rectangle, parent) {\n        return (quadId.level < ApproximateTerrainHeights.maxLevel) ? ApproximateTerrainHeights.instance.getMinimumMaximumHeights(rectangle) : parent.heightRange;\n    }\n    /** Returns true if the specified tile should always be loaded. Some tiles contain required metadata and hence should always be loaded.\n     * For example, a parent tile might contain information about the availability or height ranges of its child tiles that can be used to\n     * implement [[isTileAvailable]] or [[getChildHeightRange]], respectively.\n     */\n    forceTileLoad(_tile) { return false; }\n}\n//# sourceMappingURL=TerrainMeshProvider.js.map",
      "start": 1693508121989,
      "end": 1693508122078,
      "sourcemaps": null
    }
  ]
}
