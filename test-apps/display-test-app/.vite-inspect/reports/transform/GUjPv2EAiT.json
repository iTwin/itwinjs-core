{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend-devtools/lib/esm/tools/PlanProjectionTools.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tools\n */\nimport { PlanProjectionSettings, SubCategoryOverride } from \"@itwin/core-common\";\nimport { IModelApp, NotifyMessageDetails, OutputMessagePriority } from \"@itwin/core-frontend\";\nimport { copyStringToClipboard } from \"../ClipboardUtilities\";\nimport { DisplayStyleTool } from \"./DisplayStyleTools\";\nimport { parseArgs } from \"./parseArgs\";\n/** Dumps a JSON representation of the plan projection settings for the current viewport.\n * @beta\n */\nclass DumpPlanProjectionSettingsTool extends DisplayStyleTool {\n    constructor() {\n        super(...arguments);\n        this._copyToClipboard = false;\n    }\n    static get minArgs() { return 0; }\n    static get maxArgs() { return 1; }\n    get require3d() { return true; }\n    async parse(args) {\n        if (1 === args.length)\n            this._copyToClipboard = \"c\" === args[0].toLowerCase();\n        return true;\n    }\n    async execute(vp) {\n        const settings = vp.displayStyle.settings.planProjectionSettings;\n        if (undefined === settings) {\n            IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Info, \"No plan projection settings defined\"));\n            return false;\n        }\n        const props = [];\n        for (const [modelId, value] of settings)\n            props.push({ modelId, settings: value.toJSON() });\n        const json = JSON.stringify(props);\n        if (this._copyToClipboard)\n            copyStringToClipboard(json);\n        const messageDetails = new NotifyMessageDetails(OutputMessagePriority.Info, \"Dumped plan projection settings\", json);\n        IModelApp.notifications.outputMessage(messageDetails);\n        return false;\n    }\n}\nDumpPlanProjectionSettingsTool.toolId = \"DumpLayerSettings\";\nexport { DumpPlanProjectionSettingsTool };\n/** Changes subcategory display priority.\n * @beta\n */\nclass OverrideSubCategoryPriorityTool extends DisplayStyleTool {\n    constructor() {\n        super(...arguments);\n        this._subcatIds = new Set();\n    }\n    static get minArgs() { return 1; }\n    static get maxArgs() { return 2; }\n    async execute(vp) {\n        const style = vp.displayStyle;\n        for (const id of this._subcatIds) {\n            const ovr = style.getSubCategoryOverride(id);\n            if (undefined === ovr) {\n                if (undefined !== this._priority)\n                    style.overrideSubCategory(id, SubCategoryOverride.fromJSON({ priority: this._priority }));\n            }\n            else {\n                const props = ovr.toJSON();\n                props.priority = this._priority;\n                style.overrideSubCategory(id, SubCategoryOverride.fromJSON(props));\n            }\n        }\n        return true;\n    }\n    async parse(args) {\n        for (const id of args[0].split(\",\"))\n            this._subcatIds.add(id);\n        const priority = parseInt(args[1], 10);\n        if (!Number.isNaN(priority))\n            this._priority = priority;\n        return true;\n    }\n}\nOverrideSubCategoryPriorityTool.toolId = \"OverrideSubCategoryPriority\";\nexport { OverrideSubCategoryPriorityTool };\n/** Changes plan projection settings for one or more models.\n * @beta\n */\nclass ChangePlanProjectionSettingsTool extends DisplayStyleTool {\n    constructor() {\n        super(...arguments);\n        this._modelIds = new Set();\n    }\n    static get minArgs() { return 1; }\n    static get maxArgs() { return 5; }\n    get require3d() { return true; }\n    async execute(vp) {\n        const settings = vp.displayStyle.settings;\n        for (const modelId of this._modelIds)\n            settings.setPlanProjectionSettings(modelId, this._settings);\n        return true;\n    }\n    async parse(inputArgs) {\n        if (!this.parseModels(inputArgs[0]))\n            return false;\n        const args = parseArgs(inputArgs.slice(1));\n        const props = {};\n        props.transparency = args.getFloat(\"t\");\n        props.overlay = args.getBoolean(\"o\");\n        props.enforceDisplayPriority = args.getBoolean(\"p\");\n        props.elevation = args.getFloat(\"e\");\n        this._settings = PlanProjectionSettings.fromJSON(props);\n        return true;\n    }\n    parseModels(models) {\n        const vp = IModelApp.viewManager.selectedView; // already validated by super.parseAndRun\n        models = models.toLowerCase();\n        const isPlanProjection = (modelId) => {\n            const model = vp.iModel.models.getLoaded(modelId);\n            return undefined !== model && isPlanProjectionModel(model);\n        };\n        const isPlanProjectionModel = (model) => {\n            const model3d = model.asGeometricModel3d;\n            return undefined !== model3d && model3d.isPlanProjection;\n        };\n        switch (models[0]) {\n            case \"a\": // all models in selector\n                vp.view.forEachModel((model) => {\n                    if (isPlanProjectionModel(model))\n                        this._modelIds.add(model.id);\n                });\n                break;\n            case \"0\": // comma-separated list of Ids\n                for (const modelId of models.split(\",\"))\n                    if (isPlanProjection(modelId))\n                        this._modelIds.add(modelId);\n                break;\n        }\n        if (this._modelIds.size === 0) {\n            IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Error, \"No plan projection models\"));\n            return false;\n        }\n        return true;\n    }\n}\nChangePlanProjectionSettingsTool.toolId = \"ChangeLayerSettings\";\nexport { ChangePlanProjectionSettingsTool };\n//# sourceMappingURL=PlanProjectionTools.js.map",
      "start": 1693508122696,
      "end": 1693508122785,
      "sourcemaps": null
    }
  ]
}
