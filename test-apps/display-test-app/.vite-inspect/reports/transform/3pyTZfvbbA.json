{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend-devtools/lib/esm/tools/SelectionTools.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tools\n */\nimport { CompressedId64Set, OrderedId64Iterable } from \"@itwin/core-bentley\";\nimport { IModelApp, NotifyMessageDetails, OutputMessagePriority, Tool } from \"@itwin/core-frontend\";\nimport { copyStringToClipboard } from \"../ClipboardUtilities\";\nimport { parseArgs } from \"./parseArgs\";\n/** Replaces the contents of the selection set with the set of element Ids specified.\n * Element Ids are separated by whitespace.\n * @beta\n */\nclass SelectElementsByIdTool extends Tool {\n    static get minArgs() { return 1; }\n    static get maxArgs() { return undefined; }\n    async run(ids) {\n        const vp = IModelApp.viewManager.selectedView;\n        if (undefined !== vp && undefined !== ids)\n            vp.iModel.selectionSet.replace(ids);\n        return true;\n    }\n    async parseAndRun(...args) {\n        return this.run(args);\n    }\n}\nSelectElementsByIdTool.toolId = \"SelectElementsById\";\nexport { SelectElementsByIdTool };\n/** A tool that outputs the Ids of the elements in the [SelectionSet]($frontend) of the [IModelConnection]($frontend) associated with the selected [Viewport]($frontend).\n * @beta\n */\nclass DumpSelectionSetTool extends Tool {\n    constructor() {\n        super(...arguments);\n        this._format = \"list\";\n    }\n    static get minArgs() { return 0; }\n    static get maxArgs() { return 2; }\n    async run() {\n        const vp = IModelApp.viewManager.selectedView;\n        if (!vp)\n            return false;\n        const elems = Array.from(vp.iModel.selectionSet.elements);\n        OrderedId64Iterable.sortArray(elems);\n        let output;\n        switch (this._format) {\n            case \"compressed\":\n                output = CompressedId64Set.compressArray(elems);\n                break;\n            case \"json\":\n                output = JSON.stringify(elems);\n                break;\n            default:\n                output = elems.join(\" \");\n                break;\n        }\n        if (this._copy)\n            copyStringToClipboard(output);\n        const brief = `Selection set dumped${this._copy ? \" to clipboard\" : \"\"}.`;\n        const details = new NotifyMessageDetails(OutputMessagePriority.Info, brief, output);\n        IModelApp.notifications.outputMessage(details);\n        return true;\n    }\n    async parseAndRun(...input) {\n        const args = parseArgs(input);\n        this._copy = args.getBoolean(\"c\");\n        const formatArg = args.get(\"f\");\n        if (formatArg) {\n            switch (formatArg[0].toLowerCase()) {\n                case \"j\":\n                    this._format = \"json\";\n                    break;\n                case \"c\":\n                    this._format = \"compressed\";\n                    break;\n            }\n        }\n        return this.run();\n    }\n}\nDumpSelectionSetTool.toolId = \"DumpSelectionSet\";\nexport { DumpSelectionSetTool };\n//# sourceMappingURL=SelectionTools.js.map",
      "start": 1693508122720,
      "end": 1693508122829,
      "sourcemaps": null
    }
  ]
}
