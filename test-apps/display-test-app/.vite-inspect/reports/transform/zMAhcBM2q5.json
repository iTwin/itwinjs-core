{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/pointcloud/model/PointAttribute.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { ALong } from \"../../system/runtime/ALong\";\nimport { ASystem } from \"../../system/runtime/ASystem\";\nimport { Strings } from \"../../system/runtime/Strings\";\nimport { AttributeTypes } from \"./AttributeTypes\";\nimport { AttributeValue } from \"./AttributeValue\";\n/**\n * Class PointAttribute defines an attribute of a point.\n *\n * @version 1.0 August 2013\n */\n/** @internal */\nexport class PointAttribute {\n    /**\n     * Create a new point attribute.\n     * @param name the name of the attribute.\n     * @param description the description of the attribute.\n     * @param type the type of the attribute.\n     * @param default value the default value of the attribute (use null to create a default value).\n     */\n    constructor(name, description, type, defaultValue) {\n        if (defaultValue == null)\n            defaultValue = AttributeValue.createDefault(type);\n        ASystem.assert0(defaultValue.getType() == type, \"Default value \" + defaultValue + \" does not match attribute type \" + type);\n        this._name = name;\n        this._description = description;\n        this._type = type;\n        this._defaultValue = defaultValue;\n        this._minValue = null;\n        this._maxValue = null;\n        this._standardAttribute = false;\n    }\n    /**\n     * Get the name.\n     * @return the name.\n     */\n    getName() {\n        return this._name;\n    }\n    /**\n     * Set the name.\n     * @param name the new name.\n     */\n    setName(name) {\n        this._name = name;\n    }\n    /**\n     * Check the name.\n     * @param name the name to check.\n     * @return true if equal.\n     */\n    hasName(name) {\n        if (name == null)\n            return false;\n        if (Strings.equalsIgnoreCase(name, this._name))\n            return true;\n        return false;\n    }\n    /**\n     * Get the description.\n     * @return the description.\n     */\n    getDescription() {\n        return this._description;\n    }\n    /**\n     * Get the type.\n     * @return the type.\n     */\n    getType() {\n        return this._type;\n    }\n    /**\n     * Get the byte-size of the type.\n     * @return the byte-size of the type.\n     */\n    getTypeByteSize() {\n        return PointAttribute.getByteSize(this._type, 1);\n    }\n    /**\n     * Get the byte-size of a number of values.\n     * @param attributeCount the number of values.\n     * @return the byte-size.\n     */\n    getTypeByteSizeForCount(attributeCount) {\n        return PointAttribute.getByteSize(this._type, attributeCount);\n    }\n    /**\n     * Get the byte-size of a number of values.\n     * @param attributeCount the number of values.\n     * @return the byte-size.\n     */\n    getTypeByteSizeForLongCount(attributeCount) {\n        return PointAttribute.getByteSizeForCount(this._type, attributeCount);\n    }\n    /**\n     * Get the default value.\n     * @return the default value.\n     */\n    getDefaultValue() {\n        return this._defaultValue;\n    }\n    /**\n     * Get the optional minimum value.\n     * @return the optional minimum value.\n     */\n    getMinValue() {\n        return this._minValue;\n    }\n    /**\n     * Set the optional minimum value.\n     * @param value the optional minimum value.\n     */\n    setMinValue(value) {\n        this._minValue = value;\n    }\n    /**\n     * Get the optional maximum value.\n     * @return the optional maximum value.\n     */\n    getMaxValue() {\n        return this._maxValue;\n    }\n    /**\n     * Set the optional maximum value.\n     * @param value the optional maximum value.\n     */\n    setMaxValue(value) {\n        this._maxValue = value;\n    }\n    /**\n     * Set the description of a copy.\n     * @param description the new description.\n     * @return the copy.\n     */\n    setDescription(description) {\n        return new PointAttribute(this._name, description, this._type, this._defaultValue);\n    }\n    /**\n     * Is this a standard attribute (like color/intensity/weight)?\n     * @return true for a standard attribute.\n     */\n    isStandardAttribute() {\n        return this._standardAttribute;\n    }\n    /**\n     * Make this a standard attribute (like color/intensity/weight).\n     * @param standard true if this is a standard attribute.\n     * @return this attribute for convenience.\n     */\n    setStandardAttribute(standard) {\n        this._standardAttribute = standard;\n        return this;\n    }\n    /**\n     * The standard toString method.\n     * @see Object#toString\n     */\n    toString() {\n        return \"[PointAttribute:name='\" + this._name + \"',type=\" + PointAttribute.getTypeName(this._type) + \",default=\" + this._defaultValue + \"]\";\n    }\n    /**\n     * Get the name of a type.\n     * @param attributeType the type of attributes.\n     * @return the name.\n     */\n    static getTypeName(attributeType) {\n        if (attributeType <= 0)\n            return \"none\";\n        if (attributeType == AttributeTypes.TYPE_BOOLEAN)\n            return \"boolean\";\n        if (attributeType == AttributeTypes.TYPE_INT1)\n            return \"int1\";\n        if (attributeType == AttributeTypes.TYPE_INT2)\n            return \"int2\";\n        if (attributeType == AttributeTypes.TYPE_INT4)\n            return \"int4\";\n        if (attributeType == AttributeTypes.TYPE_INT8)\n            return \"int8\";\n        if (attributeType == AttributeTypes.TYPE_FLOAT4)\n            return \"float4\";\n        if (attributeType == AttributeTypes.TYPE_FLOAT8)\n            return \"float8\";\n        if (attributeType == AttributeTypes.TYPE_COLOR)\n            return \"color\";\n        return \"\" + attributeType;\n    }\n    /**\n     * Get the bit size for a type.\n     * @param attributeType the type of attributes.\n     * @return the number of bits.\n     */\n    static getBitSize(attributeType) {\n        if (attributeType == AttributeTypes.TYPE_BOOLEAN)\n            return 1;\n        if (attributeType == AttributeTypes.TYPE_INT1)\n            return 8;\n        if (attributeType == AttributeTypes.TYPE_INT2)\n            return 16;\n        if (attributeType == AttributeTypes.TYPE_INT4)\n            return 32;\n        if (attributeType == AttributeTypes.TYPE_INT8)\n            return 64;\n        if (attributeType == AttributeTypes.TYPE_FLOAT4)\n            return 32;\n        if (attributeType == AttributeTypes.TYPE_FLOAT8)\n            return 64;\n        if (attributeType == AttributeTypes.TYPE_COLOR)\n            return 24;\n        return 0;\n    }\n    /**\n     * Get the byte size for a number of attributes.\n     * @param attributeType the type of attributes.\n     * @param attributeCount the number of attributes.\n     */\n    static getByteSize(attributeType, attributeCount) {\n        if (attributeCount <= 0)\n            return 0;\n        if (attributeType == AttributeTypes.TYPE_BOOLEAN)\n            return ((attributeCount - 1) >> 3) + 1;\n        if (attributeType == AttributeTypes.TYPE_INT1)\n            return (attributeCount);\n        if (attributeType == AttributeTypes.TYPE_INT2)\n            return (attributeCount << 1);\n        if (attributeType == AttributeTypes.TYPE_INT4)\n            return (attributeCount << 2);\n        if (attributeType == AttributeTypes.TYPE_INT8)\n            return (attributeCount << 3);\n        if (attributeType == AttributeTypes.TYPE_FLOAT4)\n            return (attributeCount << 2);\n        if (attributeType == AttributeTypes.TYPE_FLOAT8)\n            return (attributeCount << 3);\n        if (attributeType == AttributeTypes.TYPE_COLOR)\n            return (attributeCount * 3);\n        return 0;\n    }\n    /**\n     * Get the byte size for a number of attributes.\n     * @param attributeType the type of attributes.\n     * @param attributeCount the number of attributes.\n     */\n    static getByteSizeForCount(attributeType, attributeCount) {\n        if (attributeCount.isPositive() == false)\n            return ALong.ZERO;\n        if (attributeType == AttributeTypes.TYPE_BOOLEAN)\n            return attributeCount.subInt(1).divInt(8).addInt(1);\n        if (attributeType == AttributeTypes.TYPE_INT1)\n            return attributeCount.mulInt(1);\n        if (attributeType == AttributeTypes.TYPE_INT2)\n            return attributeCount.mulInt(2);\n        if (attributeType == AttributeTypes.TYPE_INT4)\n            return attributeCount.mulInt(4);\n        if (attributeType == AttributeTypes.TYPE_INT8)\n            return attributeCount.mulInt(8);\n        if (attributeType == AttributeTypes.TYPE_FLOAT4)\n            return attributeCount.mulInt(4);\n        if (attributeType == AttributeTypes.TYPE_FLOAT8)\n            return attributeCount.mulInt(8);\n        if (attributeType == AttributeTypes.TYPE_COLOR)\n            return attributeCount.mulInt(3);\n        return ALong.ZERO;\n    }\n    /**\n     * Find the index of an attribute.\n     * @param attributes the list of attributes.\n     * @param attributeName the name of an attribute.\n     * @return the index (negative if not found).\n     */\n    static indexOfName(attributes, attributeName) {\n        if (attributes == null)\n            return -1;\n        if (attributeName == null)\n            return -1;\n        for (let i = 0; i < attributes.length; i++)\n            if (attributes[i].hasName(attributeName))\n                return i;\n        return -1;\n    }\n    /**\n     * Find the index of an attribute.\n     * @param attributes the list of attributes.\n     * @param attribute the definition of an attribute.\n     * @return the index (negative if not found).\n     */\n    static indexOf(attributes, attribute) {\n        if (attributes == null)\n            return -1;\n        if (attribute == null)\n            return -1;\n        for (let i = 0; i < attributes.length; i++)\n            if (attributes[i].hasName(attribute.getName()))\n                return i;\n        return -1;\n    }\n    /**\n     * Check if an attribute exists.\n     * @param attributes the list of attributes.\n     * @param attributeName the name of an attribute.\n     * @return true if found.\n     */\n    static hasAttributeName(attributes, attributeName) {\n        return (PointAttribute.indexOfName(attributes, attributeName) >= 0);\n    }\n    /**\n     * Check if an attribute exists.\n     * @param attributes the list of attributes.\n     * @param attribute the definition of an attribute.\n     * @return true if found.\n     */\n    static hasAttribute(attributes, attribute) {\n        return (PointAttribute.indexOf(attributes, attribute) >= 0);\n    }\n    /**\n     * Find the index of an attribute.\n     * @param attributes the list of attributes.\n     * @param attributeName the name of an attribute.\n     * @return the index (negative if not found).\n     */\n    static listIndexOfName(attributes, attributeName) {\n        if (attributes == null)\n            return -1;\n        if (attributeName == null)\n            return -1;\n        for (let i = 0; i < attributes.size(); i++)\n            if (attributes.get(i).hasName(attributeName))\n                return i;\n        return -1;\n    }\n    /**\n     * Find the index of an attribute.\n     * @param attributes the list of attributes.\n     * @param attribute the definition of an attribute.\n     * @return the index (negative if not found).\n     */\n    static listIndexOf(attributes, attribute) {\n        if (attributes == null)\n            return -1;\n        if (attribute == null)\n            return -1;\n        for (let i = 0; i < attributes.size(); i++)\n            if (attributes.get(i).hasName(attribute.getName()))\n                return i;\n        return -1;\n    }\n    /**\n     * Check if an attribute exists.\n     * @param attributes the list of attributes.\n     * @param attributeName the name of an attribute.\n     * @return true if found.\n     */\n    static listHasAttributeName(attributes, attributeName) {\n        return (PointAttribute.listIndexOfName(attributes, attributeName) >= 0);\n    }\n    /**\n     * Check if an attribute exists.\n     * @param attributes the list of attributes.\n     * @param attribute the definition of an attribute.\n     * @return true if found.\n     */\n    static listHasAttribute(attributes, attribute) {\n        return (PointAttribute.listIndexOf(attributes, attribute) >= 0);\n    }\n}\n//# sourceMappingURL=PointAttribute.js.map",
      "start": 1693508127189,
      "end": 1693508127241,
      "sourcemaps": null
    }
  ]
}
