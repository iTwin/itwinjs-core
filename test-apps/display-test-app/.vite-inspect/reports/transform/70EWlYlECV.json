{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/SavedViews.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { Id64Arg } from \"@itwin/core-bentley\";\r\nimport { createButton, createTextBox, deserializeViewState, serializeViewState } from \"@itwin/frontend-devtools\";\r\nimport { IModelConnection, Viewport, ViewState } from \"@itwin/core-frontend\";\r\nimport { DtaRpcInterface } from \"../common/DtaRpcInterface\";\r\nimport { Provider } from \"./FeatureOverrides\";\r\nimport { NamedViewStatePropsString, NamedVSPSList } from \"./NamedViews\";\r\nimport { ToolBarDropDown } from \"./ToolBar\";\r\n\r\nexport interface ApplySavedView {\r\n  applySavedView(view: ViewState): Promise<void>;\r\n}\r\n\r\nexport class SavedViewPicker extends ToolBarDropDown {\r\n  private readonly _vp: Viewport;\r\n  private readonly _element: HTMLElement;\r\n  private _imodel: IModelConnection;\r\n  private readonly _views = NamedVSPSList.create();\r\n  private _selectedView?: NamedViewStatePropsString;\r\n  private readonly _viewer: ApplySavedView;\r\n  private _onSelectedViewChanged?: () => void;\r\n  private _newViewName = \"\";\r\n\r\n  public set selectedView(view: NamedViewStatePropsString | undefined) {\r\n    this._selectedView = view;\r\n    if (undefined !== this._onSelectedViewChanged)\r\n      this._onSelectedViewChanged();\r\n  }\r\n\r\n  public constructor(vp: Viewport, parent: HTMLElement, viewer: ApplySavedView) {\r\n    super();\r\n\r\n    this._vp = vp;\r\n    this._imodel = vp.iModel;\r\n    this._viewer = viewer;\r\n\r\n    this._element = document.createElement(\"div\");\r\n    this._element.className = \"toolMenu\";\r\n    this._element.style.display = \"block\";\r\n    this._element.style.width = \"300px\";\r\n    this._element.style.overflowX = \"none\";\r\n\r\n    parent.appendChild(this._element);\r\n  }\r\n\r\n  public get isOpen() { return \"none\" !== this._element.style.display; }\r\n  protected _open() { this._element.style.display = \"block\"; }\r\n  protected _close() { this._element.style.display = \"none\"; }\r\n\r\n  public override get onViewChanged(): Promise<void> | undefined {\r\n    if (this._imodel !== this._vp.iModel) {\r\n      this._imodel = this._vp.iModel;\r\n      return this.populate();\r\n    } else {\r\n      return undefined;\r\n    }\r\n    // Make sure that any feature overrides are cleared.\r\n    // Note: this is only really necessary if FeatureOverridesPanel has not been opened yet and we have recalled a view that has saved feature overrides\r\n    // Provider.remove(this._vp);\r\n  }\r\n\r\n  public async populate(): Promise<void> {\r\n    if (!this._imodel.isOpen)\r\n      return;\r\n\r\n    const filename = this._imodel.key;\r\n    const esvString = await DtaRpcInterface.getClient().readExternalSavedViews(filename);\r\n    this._views.loadFromString(esvString);\r\n    this.populateFromViewList();\r\n  }\r\n\r\n  private populateFromViewList(): void {\r\n    this.selectedView = undefined;\r\n    this._onSelectedViewChanged = undefined;\r\n\r\n    while (this._element.hasChildNodes())\r\n      this._element.removeChild(this._element.firstChild!);\r\n\r\n    const textBox = createTextBox({\r\n      id: \"txt_viewName\",\r\n      parent: this._element,\r\n      tooltip: \"Name of new saved view to create\",\r\n      keypresshandler: async (_tb, ev): Promise<void> => {\r\n        ev.stopPropagation();\r\n        if (\"Enter\" === ev.key)\r\n          await this.saveView();\r\n      },\r\n    });\r\n\r\n    this._element.appendChild(document.createElement(\"hr\"));\r\n\r\n    const viewsDiv = document.createElement(\"div\");\r\n    viewsDiv.style.overflowY = \"auto\";\r\n    viewsDiv.style.overflowX = \"none\";\r\n    viewsDiv.style.width = \"100%\";\r\n    this._element.appendChild(viewsDiv);\r\n\r\n    const viewsList = document.createElement(\"select\");\r\n    // If only 1 entry in list, input becomes a combo box and can't select the view...\r\n    viewsList.size = 1 === this._views.length ? 2 : Math.min(15, this._views.length);\r\n    viewsList.style.width = \"100%\";\r\n    viewsList.style.display = 0 < this._views.length ? \"\" : \"none\";\r\n    viewsDiv.appendChild(viewsList);\r\n    viewsDiv.onchange = () => this.selectedView = viewsList.value ? this.findView(viewsList.value) : undefined;\r\n    viewsList.addEventListener(\"keyup\", async (ev) => {\r\n      if (ev.key === \"Delete\")\r\n        await this.deleteView();\r\n    });\r\n\r\n    for (const view of this._views) {\r\n      const option = document.createElement(\"option\");\r\n      option.value = option.innerHTML = view.name;\r\n      option.addEventListener(\"dblclick\", async () => this.recallView());\r\n      viewsList.appendChild(option);\r\n    }\r\n\r\n    const buttonDiv = document.createElement(\"div\");\r\n    buttonDiv.style.textAlign = \"center\";\r\n\r\n    const newButton = createButton({\r\n      parent: buttonDiv,\r\n      id: \"btn_createSavedView\",\r\n      value: \"Create\",\r\n      handler: () => this.saveView(), // eslint-disable-line @typescript-eslint/promise-function-async\r\n      tooltip: \"Create new saved view\",\r\n      inline: true,\r\n    }).button;\r\n\r\n    const recallButton = createButton({\r\n      parent: buttonDiv,\r\n      id: \"btn_recallSavedView\",\r\n      value: \"Recall\",\r\n      handler: () => this.recallView(), // eslint-disable-line @typescript-eslint/promise-function-async\r\n      tooltip: \"Recall selected view\",\r\n      inline: true,\r\n    }).button;\r\n\r\n    const updateButton = createButton({\r\n      parent: buttonDiv,\r\n      id: \"btn_updateSavedView\",\r\n      value: \"Update\",\r\n      handler: async () => this.updateView(),\r\n      tooltip: \"Update selected view\",\r\n      inline: true,\r\n    }).button;\r\n\r\n    const deleteButton = createButton({\r\n      parent: buttonDiv,\r\n      id: \"btn_deleteSavedView\",\r\n      value: \"Delete\",\r\n      handler: () => this.deleteView(), // eslint-disable-line @typescript-eslint/promise-function-async\r\n      tooltip: \"Delete selected view\",\r\n      inline: true,\r\n    }).button;\r\n\r\n    this._element.appendChild(buttonDiv);\r\n\r\n    this._onSelectedViewChanged = () => {\r\n      const disabled = undefined === this._selectedView;\r\n      recallButton.disabled = updateButton.disabled = deleteButton.disabled = disabled;\r\n    };\r\n\r\n    textBox.div.style.marginLeft = textBox.div.style.marginRight = \"3px\";\r\n    textBox.textbox.size = 36;\r\n    textBox.textbox.onkeyup = () => {\r\n      this._newViewName = textBox.textbox.value;\r\n      const viewExists = undefined !== this.findView(this._newViewName);\r\n      newButton.disabled = viewExists || 0 === this._newViewName.length;\r\n      textBox.textbox.style.color = viewExists ? \"red\" : \"\";\r\n    };\r\n\r\n    newButton.disabled = recallButton.disabled = updateButton.disabled = deleteButton.disabled = true;\r\n  }\r\n\r\n  private async recallView(): Promise<void> {\r\n    if (undefined === this._selectedView)\r\n      return;\r\n\r\n    const vsp = JSON.parse(this._selectedView.viewStatePropsString);\r\n    const viewState = await deserializeViewState(vsp, this._vp.iModel);\r\n    viewState.code.value = this._selectedView.name;\r\n    await this._viewer.applySavedView(viewState);\r\n\r\n    const overrideElementsString = this._selectedView.overrideElements;\r\n    if (undefined !== overrideElementsString) {\r\n      const overrideElements = JSON.parse(overrideElementsString) as any[];\r\n      const provider = Provider.getOrCreate(this._vp);\r\n      if (undefined !== provider && undefined !== overrideElements) {\r\n        provider.overrideElementsByArray(overrideElements);\r\n      }\r\n    }\r\n\r\n    const selectedElementsString = this._selectedView.selectedElements;\r\n    if (undefined !== selectedElementsString) {\r\n      const selectedElements = JSON.parse(selectedElementsString) as Id64Arg;\r\n      this._imodel.selectionSet.emptyAll();\r\n      this._imodel.selectionSet.add(selectedElements);\r\n      this._vp.renderFrame();\r\n    }\r\n  }\r\n\r\n  private async deleteView(): Promise<void> {\r\n    if (undefined !== this._selectedView)\r\n      return this.deleteViewByName(this._selectedView.name);\r\n  }\r\n\r\n  private async deleteViewByName(name: string): Promise<void> {\r\n    this._views.removeName(name);\r\n    this.populateFromViewList();\r\n    return this.saveNamedViews();\r\n  }\r\n\r\n  private async saveView(): Promise<void> {\r\n    return this.saveViewWithName(this._newViewName);\r\n  }\r\n\r\n  private async saveViewWithName(newName: string): Promise<void> {\r\n    if (0 === newName.length || undefined !== this.findView(newName))\r\n      return;\r\n\r\n    const props = serializeViewState(this._vp.view);\r\n    const json = JSON.stringify(props);\r\n\r\n    let selectedElementsString;\r\n    if (this._imodel.selectionSet.size > 0) {\r\n      const seList: string[] = [];\r\n      this._imodel.selectionSet.elements.forEach((id) => seList.push(id));\r\n      selectedElementsString = JSON.stringify(seList);\r\n    }\r\n    let overrideElementsString;\r\n    const provider = Provider.getOrCreate(this._vp);\r\n    if (undefined !== provider) {\r\n      const overrideElements = provider.toJSON();\r\n      overrideElementsString = JSON.stringify(overrideElements);\r\n    }\r\n    const nvsp = new NamedViewStatePropsString(newName, json, selectedElementsString, overrideElementsString);\r\n    this._views.insert(nvsp);\r\n    this.populateFromViewList();\r\n\r\n    await this.saveNamedViews();\r\n  }\r\n\r\n  private async updateView(): Promise<void> {\r\n    const name = this._selectedView?.name;\r\n    if (name) {\r\n      await this.deleteViewByName(name);\r\n      await this.saveViewWithName(name);\r\n    }\r\n  }\r\n\r\n  private async saveNamedViews(): Promise<void> {\r\n    const filename = this._vp.view.iModel.key;\r\n    if (undefined === filename)\r\n      return;\r\n\r\n    const namedViews = this._views.getPrintString();\r\n    await DtaRpcInterface.getClient().writeExternalSavedViews(filename, namedViews);\r\n  }\r\n\r\n  private findView(name: string): NamedViewStatePropsString | undefined {\r\n    const index = this._views.findName(name);\r\n    return -1 !== index ? this._views.get(index)! : undefined;\r\n  }\r\n}\r\n",
      "start": 1693508124565,
      "end": 1693508124709,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { createButton, createTextBox, deserializeViewState, serializeViewState } from \"@itwin/frontend-devtools\";\nimport { DtaRpcInterface } from \"../common/DtaRpcInterface\";\nimport { Provider } from \"./FeatureOverrides\";\nimport { NamedViewStatePropsString, NamedVSPSList } from \"./NamedViews\";\nimport { ToolBarDropDown } from \"./ToolBar\";\nexport class SavedViewPicker extends ToolBarDropDown {\n  constructor(vp, parent, viewer) {\n    super();\n    this._views = NamedVSPSList.create();\n    this._newViewName = \"\";\n    this._vp = vp;\n    this._imodel = vp.iModel;\n    this._viewer = viewer;\n    this._element = document.createElement(\"div\");\n    this._element.className = \"toolMenu\";\n    this._element.style.display = \"block\";\n    this._element.style.width = \"300px\";\n    this._element.style.overflowX = \"none\";\n    parent.appendChild(this._element);\n  }\n  set selectedView(view) {\n    this._selectedView = view;\n    if (void 0 !== this._onSelectedViewChanged)\n      this._onSelectedViewChanged();\n  }\n  get isOpen() {\n    return \"none\" !== this._element.style.display;\n  }\n  _open() {\n    this._element.style.display = \"block\";\n  }\n  _close() {\n    this._element.style.display = \"none\";\n  }\n  get onViewChanged() {\n    if (this._imodel !== this._vp.iModel) {\n      this._imodel = this._vp.iModel;\n      return this.populate();\n    } else {\n      return void 0;\n    }\n  }\n  async populate() {\n    if (!this._imodel.isOpen)\n      return;\n    const filename = this._imodel.key;\n    const esvString = await DtaRpcInterface.getClient().readExternalSavedViews(filename);\n    this._views.loadFromString(esvString);\n    this.populateFromViewList();\n  }\n  populateFromViewList() {\n    this.selectedView = void 0;\n    this._onSelectedViewChanged = void 0;\n    while (this._element.hasChildNodes())\n      this._element.removeChild(this._element.firstChild);\n    const textBox = createTextBox({\n      id: \"txt_viewName\",\n      parent: this._element,\n      tooltip: \"Name of new saved view to create\",\n      keypresshandler: async (_tb, ev) => {\n        ev.stopPropagation();\n        if (\"Enter\" === ev.key)\n          await this.saveView();\n      }\n    });\n    this._element.appendChild(document.createElement(\"hr\"));\n    const viewsDiv = document.createElement(\"div\");\n    viewsDiv.style.overflowY = \"auto\";\n    viewsDiv.style.overflowX = \"none\";\n    viewsDiv.style.width = \"100%\";\n    this._element.appendChild(viewsDiv);\n    const viewsList = document.createElement(\"select\");\n    viewsList.size = 1 === this._views.length ? 2 : Math.min(15, this._views.length);\n    viewsList.style.width = \"100%\";\n    viewsList.style.display = 0 < this._views.length ? \"\" : \"none\";\n    viewsDiv.appendChild(viewsList);\n    viewsDiv.onchange = () => this.selectedView = viewsList.value ? this.findView(viewsList.value) : void 0;\n    viewsList.addEventListener(\"keyup\", async (ev) => {\n      if (ev.key === \"Delete\")\n        await this.deleteView();\n    });\n    for (const view of this._views) {\n      const option = document.createElement(\"option\");\n      option.value = option.innerHTML = view.name;\n      option.addEventListener(\"dblclick\", async () => this.recallView());\n      viewsList.appendChild(option);\n    }\n    const buttonDiv = document.createElement(\"div\");\n    buttonDiv.style.textAlign = \"center\";\n    const newButton = createButton({\n      parent: buttonDiv,\n      id: \"btn_createSavedView\",\n      value: \"Create\",\n      handler: () => this.saveView(),\n      // eslint-disable-line @typescript-eslint/promise-function-async\n      tooltip: \"Create new saved view\",\n      inline: true\n    }).button;\n    const recallButton = createButton({\n      parent: buttonDiv,\n      id: \"btn_recallSavedView\",\n      value: \"Recall\",\n      handler: () => this.recallView(),\n      // eslint-disable-line @typescript-eslint/promise-function-async\n      tooltip: \"Recall selected view\",\n      inline: true\n    }).button;\n    const updateButton = createButton({\n      parent: buttonDiv,\n      id: \"btn_updateSavedView\",\n      value: \"Update\",\n      handler: async () => this.updateView(),\n      tooltip: \"Update selected view\",\n      inline: true\n    }).button;\n    const deleteButton = createButton({\n      parent: buttonDiv,\n      id: \"btn_deleteSavedView\",\n      value: \"Delete\",\n      handler: () => this.deleteView(),\n      // eslint-disable-line @typescript-eslint/promise-function-async\n      tooltip: \"Delete selected view\",\n      inline: true\n    }).button;\n    this._element.appendChild(buttonDiv);\n    this._onSelectedViewChanged = () => {\n      const disabled = void 0 === this._selectedView;\n      recallButton.disabled = updateButton.disabled = deleteButton.disabled = disabled;\n    };\n    textBox.div.style.marginLeft = textBox.div.style.marginRight = \"3px\";\n    textBox.textbox.size = 36;\n    textBox.textbox.onkeyup = () => {\n      this._newViewName = textBox.textbox.value;\n      const viewExists = void 0 !== this.findView(this._newViewName);\n      newButton.disabled = viewExists || 0 === this._newViewName.length;\n      textBox.textbox.style.color = viewExists ? \"red\" : \"\";\n    };\n    newButton.disabled = recallButton.disabled = updateButton.disabled = deleteButton.disabled = true;\n  }\n  async recallView() {\n    if (void 0 === this._selectedView)\n      return;\n    const vsp = JSON.parse(this._selectedView.viewStatePropsString);\n    const viewState = await deserializeViewState(vsp, this._vp.iModel);\n    viewState.code.value = this._selectedView.name;\n    await this._viewer.applySavedView(viewState);\n    const overrideElementsString = this._selectedView.overrideElements;\n    if (void 0 !== overrideElementsString) {\n      const overrideElements = JSON.parse(overrideElementsString);\n      const provider = Provider.getOrCreate(this._vp);\n      if (void 0 !== provider && void 0 !== overrideElements) {\n        provider.overrideElementsByArray(overrideElements);\n      }\n    }\n    const selectedElementsString = this._selectedView.selectedElements;\n    if (void 0 !== selectedElementsString) {\n      const selectedElements = JSON.parse(selectedElementsString);\n      this._imodel.selectionSet.emptyAll();\n      this._imodel.selectionSet.add(selectedElements);\n      this._vp.renderFrame();\n    }\n  }\n  async deleteView() {\n    if (void 0 !== this._selectedView)\n      return this.deleteViewByName(this._selectedView.name);\n  }\n  async deleteViewByName(name) {\n    this._views.removeName(name);\n    this.populateFromViewList();\n    return this.saveNamedViews();\n  }\n  async saveView() {\n    return this.saveViewWithName(this._newViewName);\n  }\n  async saveViewWithName(newName) {\n    if (0 === newName.length || void 0 !== this.findView(newName))\n      return;\n    const props = serializeViewState(this._vp.view);\n    const json = JSON.stringify(props);\n    let selectedElementsString;\n    if (this._imodel.selectionSet.size > 0) {\n      const seList = [];\n      this._imodel.selectionSet.elements.forEach((id) => seList.push(id));\n      selectedElementsString = JSON.stringify(seList);\n    }\n    let overrideElementsString;\n    const provider = Provider.getOrCreate(this._vp);\n    if (void 0 !== provider) {\n      const overrideElements = provider.toJSON();\n      overrideElementsString = JSON.stringify(overrideElements);\n    }\n    const nvsp = new NamedViewStatePropsString(newName, json, selectedElementsString, overrideElementsString);\n    this._views.insert(nvsp);\n    this.populateFromViewList();\n    await this.saveNamedViews();\n  }\n  async updateView() {\n    const name = this._selectedView?.name;\n    if (name) {\n      await this.deleteViewByName(name);\n      await this.saveViewWithName(name);\n    }\n  }\n  async saveNamedViews() {\n    const filename = this._vp.view.iModel.key;\n    if (void 0 === filename)\n      return;\n    const namedViews = this._views.getPrintString();\n    await DtaRpcInterface.getClient().writeExternalSavedViews(filename, namedViews);\n  }\n  findView(name) {\n    const index = this._views.findName(name);\n    return -1 !== index ? this._views.get(index) : void 0;\n  }\n}\n",
      "start": 1693508124709,
      "end": 1693508124781,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/SavedViews.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { Id64Arg } from \"@itwin/core-bentley\";\r\nimport { createButton, createTextBox, deserializeViewState, serializeViewState } from \"@itwin/frontend-devtools\";\r\nimport { IModelConnection, Viewport, ViewState } from \"@itwin/core-frontend\";\r\nimport { DtaRpcInterface } from \"../common/DtaRpcInterface\";\r\nimport { Provider } from \"./FeatureOverrides\";\r\nimport { NamedViewStatePropsString, NamedVSPSList } from \"./NamedViews\";\r\nimport { ToolBarDropDown } from \"./ToolBar\";\r\n\r\nexport interface ApplySavedView {\r\n  applySavedView(view: ViewState): Promise<void>;\r\n}\r\n\r\nexport class SavedViewPicker extends ToolBarDropDown {\r\n  private readonly _vp: Viewport;\r\n  private readonly _element: HTMLElement;\r\n  private _imodel: IModelConnection;\r\n  private readonly _views = NamedVSPSList.create();\r\n  private _selectedView?: NamedViewStatePropsString;\r\n  private readonly _viewer: ApplySavedView;\r\n  private _onSelectedViewChanged?: () => void;\r\n  private _newViewName = \"\";\r\n\r\n  public set selectedView(view: NamedViewStatePropsString | undefined) {\r\n    this._selectedView = view;\r\n    if (undefined !== this._onSelectedViewChanged)\r\n      this._onSelectedViewChanged();\r\n  }\r\n\r\n  public constructor(vp: Viewport, parent: HTMLElement, viewer: ApplySavedView) {\r\n    super();\r\n\r\n    this._vp = vp;\r\n    this._imodel = vp.iModel;\r\n    this._viewer = viewer;\r\n\r\n    this._element = document.createElement(\"div\");\r\n    this._element.className = \"toolMenu\";\r\n    this._element.style.display = \"block\";\r\n    this._element.style.width = \"300px\";\r\n    this._element.style.overflowX = \"none\";\r\n\r\n    parent.appendChild(this._element);\r\n  }\r\n\r\n  public get isOpen() { return \"none\" !== this._element.style.display; }\r\n  protected _open() { this._element.style.display = \"block\"; }\r\n  protected _close() { this._element.style.display = \"none\"; }\r\n\r\n  public override get onViewChanged(): Promise<void> | undefined {\r\n    if (this._imodel !== this._vp.iModel) {\r\n      this._imodel = this._vp.iModel;\r\n      return this.populate();\r\n    } else {\r\n      return undefined;\r\n    }\r\n    // Make sure that any feature overrides are cleared.\r\n    // Note: this is only really necessary if FeatureOverridesPanel has not been opened yet and we have recalled a view that has saved feature overrides\r\n    // Provider.remove(this._vp);\r\n  }\r\n\r\n  public async populate(): Promise<void> {\r\n    if (!this._imodel.isOpen)\r\n      return;\r\n\r\n    const filename = this._imodel.key;\r\n    const esvString = await DtaRpcInterface.getClient().readExternalSavedViews(filename);\r\n    this._views.loadFromString(esvString);\r\n    this.populateFromViewList();\r\n  }\r\n\r\n  private populateFromViewList(): void {\r\n    this.selectedView = undefined;\r\n    this._onSelectedViewChanged = undefined;\r\n\r\n    while (this._element.hasChildNodes())\r\n      this._element.removeChild(this._element.firstChild!);\r\n\r\n    const textBox = createTextBox({\r\n      id: \"txt_viewName\",\r\n      parent: this._element,\r\n      tooltip: \"Name of new saved view to create\",\r\n      keypresshandler: async (_tb, ev): Promise<void> => {\r\n        ev.stopPropagation();\r\n        if (\"Enter\" === ev.key)\r\n          await this.saveView();\r\n      },\r\n    });\r\n\r\n    this._element.appendChild(document.createElement(\"hr\"));\r\n\r\n    const viewsDiv = document.createElement(\"div\");\r\n    viewsDiv.style.overflowY = \"auto\";\r\n    viewsDiv.style.overflowX = \"none\";\r\n    viewsDiv.style.width = \"100%\";\r\n    this._element.appendChild(viewsDiv);\r\n\r\n    const viewsList = document.createElement(\"select\");\r\n    // If only 1 entry in list, input becomes a combo box and can't select the view...\r\n    viewsList.size = 1 === this._views.length ? 2 : Math.min(15, this._views.length);\r\n    viewsList.style.width = \"100%\";\r\n    viewsList.style.display = 0 < this._views.length ? \"\" : \"none\";\r\n    viewsDiv.appendChild(viewsList);\r\n    viewsDiv.onchange = () => this.selectedView = viewsList.value ? this.findView(viewsList.value) : undefined;\r\n    viewsList.addEventListener(\"keyup\", async (ev) => {\r\n      if (ev.key === \"Delete\")\r\n        await this.deleteView();\r\n    });\r\n\r\n    for (const view of this._views) {\r\n      const option = document.createElement(\"option\");\r\n      option.value = option.innerHTML = view.name;\r\n      option.addEventListener(\"dblclick\", async () => this.recallView());\r\n      viewsList.appendChild(option);\r\n    }\r\n\r\n    const buttonDiv = document.createElement(\"div\");\r\n    buttonDiv.style.textAlign = \"center\";\r\n\r\n    const newButton = createButton({\r\n      parent: buttonDiv,\r\n      id: \"btn_createSavedView\",\r\n      value: \"Create\",\r\n      handler: () => this.saveView(), // eslint-disable-line @typescript-eslint/promise-function-async\r\n      tooltip: \"Create new saved view\",\r\n      inline: true,\r\n    }).button;\r\n\r\n    const recallButton = createButton({\r\n      parent: buttonDiv,\r\n      id: \"btn_recallSavedView\",\r\n      value: \"Recall\",\r\n      handler: () => this.recallView(), // eslint-disable-line @typescript-eslint/promise-function-async\r\n      tooltip: \"Recall selected view\",\r\n      inline: true,\r\n    }).button;\r\n\r\n    const updateButton = createButton({\r\n      parent: buttonDiv,\r\n      id: \"btn_updateSavedView\",\r\n      value: \"Update\",\r\n      handler: async () => this.updateView(),\r\n      tooltip: \"Update selected view\",\r\n      inline: true,\r\n    }).button;\r\n\r\n    const deleteButton = createButton({\r\n      parent: buttonDiv,\r\n      id: \"btn_deleteSavedView\",\r\n      value: \"Delete\",\r\n      handler: () => this.deleteView(), // eslint-disable-line @typescript-eslint/promise-function-async\r\n      tooltip: \"Delete selected view\",\r\n      inline: true,\r\n    }).button;\r\n\r\n    this._element.appendChild(buttonDiv);\r\n\r\n    this._onSelectedViewChanged = () => {\r\n      const disabled = undefined === this._selectedView;\r\n      recallButton.disabled = updateButton.disabled = deleteButton.disabled = disabled;\r\n    };\r\n\r\n    textBox.div.style.marginLeft = textBox.div.style.marginRight = \"3px\";\r\n    textBox.textbox.size = 36;\r\n    textBox.textbox.onkeyup = () => {\r\n      this._newViewName = textBox.textbox.value;\r\n      const viewExists = undefined !== this.findView(this._newViewName);\r\n      newButton.disabled = viewExists || 0 === this._newViewName.length;\r\n      textBox.textbox.style.color = viewExists ? \"red\" : \"\";\r\n    };\r\n\r\n    newButton.disabled = recallButton.disabled = updateButton.disabled = deleteButton.disabled = true;\r\n  }\r\n\r\n  private async recallView(): Promise<void> {\r\n    if (undefined === this._selectedView)\r\n      return;\r\n\r\n    const vsp = JSON.parse(this._selectedView.viewStatePropsString);\r\n    const viewState = await deserializeViewState(vsp, this._vp.iModel);\r\n    viewState.code.value = this._selectedView.name;\r\n    await this._viewer.applySavedView(viewState);\r\n\r\n    const overrideElementsString = this._selectedView.overrideElements;\r\n    if (undefined !== overrideElementsString) {\r\n      const overrideElements = JSON.parse(overrideElementsString) as any[];\r\n      const provider = Provider.getOrCreate(this._vp);\r\n      if (undefined !== provider && undefined !== overrideElements) {\r\n        provider.overrideElementsByArray(overrideElements);\r\n      }\r\n    }\r\n\r\n    const selectedElementsString = this._selectedView.selectedElements;\r\n    if (undefined !== selectedElementsString) {\r\n      const selectedElements = JSON.parse(selectedElementsString) as Id64Arg;\r\n      this._imodel.selectionSet.emptyAll();\r\n      this._imodel.selectionSet.add(selectedElements);\r\n      this._vp.renderFrame();\r\n    }\r\n  }\r\n\r\n  private async deleteView(): Promise<void> {\r\n    if (undefined !== this._selectedView)\r\n      return this.deleteViewByName(this._selectedView.name);\r\n  }\r\n\r\n  private async deleteViewByName(name: string): Promise<void> {\r\n    this._views.removeName(name);\r\n    this.populateFromViewList();\r\n    return this.saveNamedViews();\r\n  }\r\n\r\n  private async saveView(): Promise<void> {\r\n    return this.saveViewWithName(this._newViewName);\r\n  }\r\n\r\n  private async saveViewWithName(newName: string): Promise<void> {\r\n    if (0 === newName.length || undefined !== this.findView(newName))\r\n      return;\r\n\r\n    const props = serializeViewState(this._vp.view);\r\n    const json = JSON.stringify(props);\r\n\r\n    let selectedElementsString;\r\n    if (this._imodel.selectionSet.size > 0) {\r\n      const seList: string[] = [];\r\n      this._imodel.selectionSet.elements.forEach((id) => seList.push(id));\r\n      selectedElementsString = JSON.stringify(seList);\r\n    }\r\n    let overrideElementsString;\r\n    const provider = Provider.getOrCreate(this._vp);\r\n    if (undefined !== provider) {\r\n      const overrideElements = provider.toJSON();\r\n      overrideElementsString = JSON.stringify(overrideElements);\r\n    }\r\n    const nvsp = new NamedViewStatePropsString(newName, json, selectedElementsString, overrideElementsString);\r\n    this._views.insert(nvsp);\r\n    this.populateFromViewList();\r\n\r\n    await this.saveNamedViews();\r\n  }\r\n\r\n  private async updateView(): Promise<void> {\r\n    const name = this._selectedView?.name;\r\n    if (name) {\r\n      await this.deleteViewByName(name);\r\n      await this.saveViewWithName(name);\r\n    }\r\n  }\r\n\r\n  private async saveNamedViews(): Promise<void> {\r\n    const filename = this._vp.view.iModel.key;\r\n    if (undefined === filename)\r\n      return;\r\n\r\n    const namedViews = this._views.getPrintString();\r\n    await DtaRpcInterface.getClient().writeExternalSavedViews(filename, namedViews);\r\n  }\r\n\r\n  private findView(name: string): NamedViewStatePropsString | undefined {\r\n    const index = this._views.findName(name);\r\n    return -1 !== index ? this._views.get(index)! : undefined;\r\n  }\r\n}\r\n"
        ],
        "mappings": "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",
        "names": []
      }
    }
  ]
}
