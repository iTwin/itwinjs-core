{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/CategorySelectorState.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Views\n */\nimport { Id64, ObservableSet } from \"@itwin/core-bentley\";\nimport { ElementState } from \"./EntityState\";\n/** A set of Categories to be displayed in a [[ViewState]].\n * Elements belonging to categories not specified in the category selector will not be drawn in the view.\n * By default, geometry belonging to any [[SubCategory]] of a visible Category is also visible in the view,\n * unless the [[SubCategoryAppearance]] or [[SubCategoryOverride]] specifies that it should be invisible.\n * @note To change the set of categories visible in a [[ViewState]] currently associated with a [[Viewport]],\n * use [[ViewState.changeCategoryDisplay]] to ensure the view updates appropriately on screen.\n * @see [[Category]]\n * @public\n * @extensions\n */\nexport class CategorySelectorState extends ElementState {\n    static get className() { return \"CategorySelector\"; }\n    constructor(props, iModel) {\n        super(props, iModel);\n        this._categories = new ObservableSet();\n        if (props.categories)\n            props.categories.forEach((cat) => this.categories.add(cat));\n    }\n    get categories() {\n        return this._categories;\n    }\n    set categories(categories) {\n        this._categories.clear();\n        for (const category of categories)\n            this._categories.add(category);\n    }\n    /** @internal */\n    get observableCategories() {\n        return this._categories;\n    }\n    toJSON() {\n        const val = super.toJSON();\n        val.categories = [];\n        this.categories.forEach((cat) => val.categories.push(cat));\n        return val;\n    }\n    /** Returns true if this category selector is logically equivalent to the specified category selector.\n     * Two category selectors are logically equivalent if they have the same name and Id and contain the same set of category Ids.\n     */\n    equalState(other) {\n        if (this.categories.size !== other.categories.size || this.name !== other.name || this.id !== other.id)\n            return false;\n        for (const cat of this.categories)\n            if (!other.categories.has(cat))\n                return false;\n        return true;\n    }\n    /** The name of this CategorySelector */\n    get name() { return this.code.value; }\n    /** Determine whether this CategorySelector includes the specified categoryId string */\n    has(id) { return this.categories.has(id); }\n    /** Determine whether this CategorySelector includes the specified category */\n    isCategoryViewed(categoryId) { return this.has(categoryId); }\n    /** Add one or more categories to this CategorySelector */\n    addCategories(arg) {\n        for (const id of Id64.iterable(arg))\n            this.categories.add(id);\n    }\n    /** Remove one or more categories from this CategorySelector */\n    dropCategories(arg) {\n        for (const id of Id64.iterable(arg))\n            this.categories.delete(id);\n    }\n    /** Add or remove categories from this CategorySelector.\n     * @param arg The categories to add or remove\n     * @param add If true, categories will be added; otherwise they will be removed.\n     */\n    changeCategoryDisplay(arg, add) {\n        if (add)\n            this.addCategories(arg);\n        else\n            this.dropCategories(arg);\n    }\n}\n//# sourceMappingURL=CategorySelectorState.js.map",
      "start": 1693508118460,
      "end": 1693508119071,
      "sourcemaps": null
    }
  ]
}
