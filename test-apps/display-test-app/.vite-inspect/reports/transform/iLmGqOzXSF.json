{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/spatial/ecrs/projection/KrovakObliqueConformalConicEN.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { OperationMethod } from \"../OperationMethod\";\nimport { KrovakObliqueConformalConic } from \"./KrovakObliqueConformalConic\";\n/**\n * Class KrovakObliqueConformalConicEN defines the \"East-North\" variant of the Krovak Oblique Conformal Conic projection.\n *\n * In the standard projection X runs from north to south and Y runs from east to west.\n * This seems awkward to most users. They prefer X from west to east and Y from south to north.\n * Therefore an alternative is provided in which both axes are inversed and swapped.\n * This leads to a more traditional map.\n *\n * @version 1.0 October 2009\n */\n/** @internal */\nclass KrovakObliqueConformalConicEN extends OperationMethod {\n    /**\n       * Create a new projection.\n       * @param parameters the values of the parameters.\n       */\n    constructor(parameters) {\n        super(KrovakObliqueConformalConicEN.METHOD_CODE, \"Krovak Oblique Conic Conformal East-North\", parameters);\n        /* Create the projection */\n        this.projection = new KrovakObliqueConformalConic(parameters);\n    }\n    /**\n       * OperationMethod method.\n       * @see OperationMethod#initialize\n       */\n    initialize(operation) {\n        /* Prepare the projection */\n        this.projection.initialize(operation);\n    }\n    /**\n       * OperationMethod interface method.\n       * @see OperationMethod#forward\n       */\n    forward(sourceCRS, source, targetCRS, target) {\n        /* Do the forward projection */\n        this.projection.forward(sourceCRS, source, targetCRS, target);\n        /* Get the original position */\n        const E = target.getX();\n        const N = target.getY();\n        /* Swap */\n        target.setX(-N);\n        target.setY(-E);\n    }\n    /**\n       * OperationMethod interface method.\n       * @see OperationMethod#reverse\n       */\n    reverse(sourceCRS, source, targetCRS, target) {\n        /* Get the swapped position */\n        const N = -target.getX();\n        const E = -target.getY();\n        /* Swap (leave the target coordinate untouched) */\n        source.setX(E);\n        source.setY(N);\n        /* Do the reverse projection */\n        this.projection.reverse(sourceCRS, source, targetCRS, source /* target*/);\n    }\n}\n/** The code of this method */\nKrovakObliqueConformalConicEN.METHOD_CODE = 1041;\nexport { KrovakObliqueConformalConicEN };\n//# sourceMappingURL=KrovakObliqueConformalConicEN.js.map",
      "start": 1693508127370,
      "end": 1693508127415,
      "sourcemaps": null
    }
  ]
}
