{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/NamedViews.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { compareStrings, SortedArray } from \"@itwin/core-bentley\";\r\n\r\n// cspell:ignore vsps nvsp\r\n\r\nexport class NamedViewStatePropsString {\r\n  private _name: string;\r\n  private _viewStatePropsString: string;\r\n  private _selectedElements?: string;\r\n  private _overrideElements?: string;\r\n\r\n  public constructor(name: string, viewState: string, selectedElements?: string, overrideElements?: string) {\r\n    this._name = name;\r\n    this._viewStatePropsString = viewState;\r\n    this._selectedElements = selectedElements;\r\n    this._overrideElements = overrideElements;\r\n  }\r\n\r\n  public get name(): string { return this._name; }\r\n  public get viewStatePropsString(): string { return this._viewStatePropsString; }\r\n  public get selectedElements(): string | undefined { return this._selectedElements; }\r\n  public get overrideElements(): string | undefined { return this._overrideElements; }\r\n}\r\n\r\nexport class NamedVSPSList extends SortedArray<NamedViewStatePropsString> {\r\n\r\n  private constructor() {\r\n    super((lhs, rhs) => compareStrings(lhs.name, rhs.name));\r\n  }\r\n\r\n  public static create(viewNames?: NamedViewStatePropsString[]): NamedVSPSList {\r\n    const viewList = new NamedVSPSList();\r\n    viewList.populate(viewNames);\r\n    return viewList;\r\n  }\r\n\r\n  public override clear(): void {\r\n    super.clear();\r\n  }\r\n\r\n  public populate(viewStateStrings?: NamedViewStatePropsString[]): void {\r\n    this.clear();\r\n\r\n    if (undefined === viewStateStrings)\r\n      return;\r\n    if (0 === viewStateStrings.length)\r\n      return;\r\n\r\n    for (const vss of viewStateStrings)\r\n      this.insert(vss);\r\n  }\r\n\r\n  public findName(name: string): number {\r\n    for (let i = 0; i < this.length; ++i) {\r\n      const nvsp = this.get(i);\r\n      if (nvsp!.name === name) {\r\n        return i;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  public removeName(name: string): void {\r\n    const ndx = this.findName(name);\r\n    if (ndx >= 0) {\r\n      const nvsp = this.get(ndx);\r\n      if (undefined !== nvsp) {\r\n        this.remove(nvsp);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getPrintString(): string {\r\n    // We don't really want all of the other stuff from the SortedArray class in here, just the actual name/propertyString pairs.\r\n    return JSON.stringify(this._array, null, \"  \");\r\n  }\r\n\r\n  public loadFromString(esvString: string): void {\r\n    this.clear();\r\n    if (undefined !== esvString && \"\" !== esvString) {\r\n      const namedVSPs = JSON.parse(esvString) as any[];\r\n      for (const obj of namedVSPs) {\r\n        const esvProps: NamedViewStatePropsString = new NamedViewStatePropsString(obj._name, obj._viewStatePropsString, obj._selectedElements, obj._overrideElements);\r\n        this.insert(esvProps);\r\n      }\r\n    }\r\n  }\r\n}\r\n",
      "start": 1693508126095,
      "end": 1693508126250,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { compareStrings, SortedArray } from \"@itwin/core-bentley\";\nexport class NamedViewStatePropsString {\n  constructor(name, viewState, selectedElements, overrideElements) {\n    this._name = name;\n    this._viewStatePropsString = viewState;\n    this._selectedElements = selectedElements;\n    this._overrideElements = overrideElements;\n  }\n  get name() {\n    return this._name;\n  }\n  get viewStatePropsString() {\n    return this._viewStatePropsString;\n  }\n  get selectedElements() {\n    return this._selectedElements;\n  }\n  get overrideElements() {\n    return this._overrideElements;\n  }\n}\nexport class NamedVSPSList extends SortedArray {\n  constructor() {\n    super((lhs, rhs) => compareStrings(lhs.name, rhs.name));\n  }\n  static create(viewNames) {\n    const viewList = new NamedVSPSList();\n    viewList.populate(viewNames);\n    return viewList;\n  }\n  clear() {\n    super.clear();\n  }\n  populate(viewStateStrings) {\n    this.clear();\n    if (void 0 === viewStateStrings)\n      return;\n    if (0 === viewStateStrings.length)\n      return;\n    for (const vss of viewStateStrings)\n      this.insert(vss);\n  }\n  findName(name) {\n    for (let i = 0; i < this.length; ++i) {\n      const nvsp = this.get(i);\n      if (nvsp.name === name) {\n        return i;\n      }\n    }\n    return -1;\n  }\n  removeName(name) {\n    const ndx = this.findName(name);\n    if (ndx >= 0) {\n      const nvsp = this.get(ndx);\n      if (void 0 !== nvsp) {\n        this.remove(nvsp);\n        return;\n      }\n    }\n  }\n  getPrintString() {\n    return JSON.stringify(this._array, null, \"  \");\n  }\n  loadFromString(esvString) {\n    this.clear();\n    if (void 0 !== esvString && \"\" !== esvString) {\n      const namedVSPs = JSON.parse(esvString);\n      for (const obj of namedVSPs) {\n        const esvProps = new NamedViewStatePropsString(obj._name, obj._viewStatePropsString, obj._selectedElements, obj._overrideElements);\n        this.insert(esvProps);\n      }\n    }\n  }\n}\n",
      "start": 1693508126250,
      "end": 1693508126316,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/NamedViews.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { compareStrings, SortedArray } from \"@itwin/core-bentley\";\r\n\r\n// cspell:ignore vsps nvsp\r\n\r\nexport class NamedViewStatePropsString {\r\n  private _name: string;\r\n  private _viewStatePropsString: string;\r\n  private _selectedElements?: string;\r\n  private _overrideElements?: string;\r\n\r\n  public constructor(name: string, viewState: string, selectedElements?: string, overrideElements?: string) {\r\n    this._name = name;\r\n    this._viewStatePropsString = viewState;\r\n    this._selectedElements = selectedElements;\r\n    this._overrideElements = overrideElements;\r\n  }\r\n\r\n  public get name(): string { return this._name; }\r\n  public get viewStatePropsString(): string { return this._viewStatePropsString; }\r\n  public get selectedElements(): string | undefined { return this._selectedElements; }\r\n  public get overrideElements(): string | undefined { return this._overrideElements; }\r\n}\r\n\r\nexport class NamedVSPSList extends SortedArray<NamedViewStatePropsString> {\r\n\r\n  private constructor() {\r\n    super((lhs, rhs) => compareStrings(lhs.name, rhs.name));\r\n  }\r\n\r\n  public static create(viewNames?: NamedViewStatePropsString[]): NamedVSPSList {\r\n    const viewList = new NamedVSPSList();\r\n    viewList.populate(viewNames);\r\n    return viewList;\r\n  }\r\n\r\n  public override clear(): void {\r\n    super.clear();\r\n  }\r\n\r\n  public populate(viewStateStrings?: NamedViewStatePropsString[]): void {\r\n    this.clear();\r\n\r\n    if (undefined === viewStateStrings)\r\n      return;\r\n    if (0 === viewStateStrings.length)\r\n      return;\r\n\r\n    for (const vss of viewStateStrings)\r\n      this.insert(vss);\r\n  }\r\n\r\n  public findName(name: string): number {\r\n    for (let i = 0; i < this.length; ++i) {\r\n      const nvsp = this.get(i);\r\n      if (nvsp!.name === name) {\r\n        return i;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  public removeName(name: string): void {\r\n    const ndx = this.findName(name);\r\n    if (ndx >= 0) {\r\n      const nvsp = this.get(ndx);\r\n      if (undefined !== nvsp) {\r\n        this.remove(nvsp);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getPrintString(): string {\r\n    // We don't really want all of the other stuff from the SortedArray class in here, just the actual name/propertyString pairs.\r\n    return JSON.stringify(this._array, null, \"  \");\r\n  }\r\n\r\n  public loadFromString(esvString: string): void {\r\n    this.clear();\r\n    if (undefined !== esvString && \"\" !== esvString) {\r\n      const namedVSPs = JSON.parse(esvString) as any[];\r\n      for (const obj of namedVSPs) {\r\n        const esvProps: NamedViewStatePropsString = new NamedViewStatePropsString(obj._name, obj._viewStatePropsString, obj._selectedElements, obj._overrideElements);\r\n        this.insert(esvProps);\r\n      }\r\n    }\r\n  }\r\n}\r\n"
        ],
        "mappings": ";AAIA,SAAS,gBAAgB,mBAAmB;AAIrC,aAAM,0BAA0B;AAAA,EAM9B,YAAY,MAAc,WAAmB,kBAA2B,kBAA2B;AACxG,SAAK,QAAQ;AACb,SAAK,wBAAwB;AAC7B,SAAK,oBAAoB;AACzB,SAAK,oBAAoB;AAAA,EAC3B;AAAA,EAEA,IAAW,OAAe;AAAE,WAAO,KAAK;AAAA,EAAO;AAAA,EAC/C,IAAW,uBAA+B;AAAE,WAAO,KAAK;AAAA,EAAuB;AAAA,EAC/E,IAAW,mBAAuC;AAAE,WAAO,KAAK;AAAA,EAAmB;AAAA,EACnF,IAAW,mBAAuC;AAAE,WAAO,KAAK;AAAA,EAAmB;AACrF;AAEO,aAAM,sBAAsB,YAAuC;AAAA,EAEhE,cAAc;AACpB,UAAM,CAAC,KAAK,QAAQ,eAAe,IAAI,MAAM,IAAI,IAAI,CAAC;AAAA,EACxD;AAAA,EAEA,OAAc,OAAO,WAAwD;AAC3E,UAAM,WAAW,IAAI,cAAc;AACnC,aAAS,SAAS,SAAS;AAC3B,WAAO;AAAA,EACT;AAAA,EAEgB,QAAc;AAC5B,UAAM,MAAM;AAAA,EACd;AAAA,EAEO,SAAS,kBAAsD;AACpE,SAAK,MAAM;AAEX,QAAI,WAAc;AAChB;AACF,QAAI,MAAM,iBAAiB;AACzB;AAEF,eAAW,OAAO;AAChB,WAAK,OAAO,GAAG;AAAA,EACnB;AAAA,EAEO,SAAS,MAAsB;AACpC,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AACpC,YAAM,OAAO,KAAK,IAAI,CAAC;AACvB,UAAI,KAAM,SAAS,MAAM;AACvB,eAAO;AAAA,MACT;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EAEO,WAAW,MAAoB;AACpC,UAAM,MAAM,KAAK,SAAS,IAAI;AAC9B,QAAI,OAAO,GAAG;AACZ,YAAM,OAAO,KAAK,IAAI,GAAG;AACzB,UAAI,WAAc,MAAM;AACtB,aAAK,OAAO,IAAI;AAChB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEO,iBAAyB;AAE9B,WAAO,KAAK,UAAU,KAAK,QAAQ,MAAM,IAAI;AAAA,EAC/C;AAAA,EAEO,eAAe,WAAyB;AAC7C,SAAK,MAAM;AACX,QAAI,WAAc,aAAa,OAAO,WAAW;AAC/C,YAAM,YAAY,KAAK,MAAM,SAAS;AACtC,iBAAW,OAAO,WAAW;AAC3B,cAAM,WAAsC,IAAI,0BAA0B,IAAI,OAAO,IAAI,uBAAuB,IAAI,mBAAmB,IAAI,iBAAiB;AAC5J,aAAK,OAAO,QAAQ;AAAA,MACtB;AAAA,IACF;AAAA,EACF;AACF;",
        "names": []
      }
    }
  ]
}
