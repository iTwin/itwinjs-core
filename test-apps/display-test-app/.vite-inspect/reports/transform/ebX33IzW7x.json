{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/geometry/lib/esm/curve/OffsetOptions.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Curve\n */\nimport { Geometry } from \"../Geometry\";\nimport { StrokeOptions } from \"./StrokeOptions\";\n/**\n * Control parameters for joint construction, used in offset construction methods such as [[RegionOps.constructPolygonWireXYOffset]] and [[Region.Ops.constructCurveXYOffset]].\n *   * Define a \"joint\" as the common point between adjacent segments of the input curve.\n *   * Define the \"turn angle\" at a joint to be the angle in [0,pi] between the first derivatives (tangents) of\n * the segments at the joint.\n *   * When creating offsets, if an offset needs to do an \"outside\" turn, the first applicable construction is applied:\n *   * If the turn angle is larger than `options.minArcDegrees`, a circular arc is constructed to offset the joint.\n *   * If the turn angle is less than or equal to `options.maxChamferTurnDegrees`, extend curves along tangent to\n * single intersection point (to create a sharp corner).\n *   * If the turn angle is larger than `options.maxChamferDegrees`, the joint is offset with a line string whose edges:\n *      * lie outside the arc that would have been created by the first construction\n *      * have uniform turn angle less than `options.maxChamferDegrees`\n *      * touch the arc at their midpoint (except first and last edge).\n * @public\n */\nexport class JointOptions {\n    /**\n     * Construct JointOptions.\n     * * leftOffsetDistance is required\n     * * minArcDegrees and maxChamferDegrees are optional.\n     */\n    constructor(leftOffsetDistance, minArcDegrees = 180, maxChamferDegrees = 90, preserveEllipticalArcs = false, allowSharpestCorners = false) {\n        /**\n         * Smallest arc to construct.\n         * * If this control angle is 180 degrees or more, arcs are never created.\n         */\n        this.minArcDegrees = 180.0;\n        /** Largest turn angle at which to construct a sharp corner, or largest turn angle in a multi-segment chamfer. */\n        this.maxChamferTurnDegrees = 90;\n        /**\n         * Whether to remove the internal turn angle upper bound for sharp corner construction.\n         * * By default, a sharp corner is not created at a joint when the turn angle is too large, so as to avoid offsets whose\n         *  ranges blow up. Internally, this is implemented by applying an upper bound of 120 degrees to `maxChamferTurnDegrees`.\n         * * When `allowSharpestCorners` is true, this internal upper bound is removed, allowing sharp corners for turn angles\n         * up to `maxChamferTurnDegrees`.\n         * * Thus, if you know your input turn angles are no greater than `maxChamferTurnDegrees`, you can create an offset with\n         * sharp corners at each joint by setting `maxChamferTurnDegrees < minArcDegrees` and `allowSharpestCorners` to true.\n         */\n        this.allowSharpestCorners = false;\n        /** Offset distance, positive to left of base curve. */\n        this.leftOffsetDistance = 0;\n        /** Whether to offset elliptical arcs as elliptical arcs (true) or as B-spline curves (false, default). */\n        this.preserveEllipticalArcs = false;\n        this.leftOffsetDistance = leftOffsetDistance;\n        this.minArcDegrees = minArcDegrees;\n        this.maxChamferTurnDegrees = maxChamferDegrees;\n        this.preserveEllipticalArcs = preserveEllipticalArcs;\n        this.allowSharpestCorners = allowSharpestCorners;\n    }\n    /** Return a deep clone. */\n    clone() {\n        return new JointOptions(this.leftOffsetDistance, this.minArcDegrees, this.maxChamferTurnDegrees, this.preserveEllipticalArcs, this.allowSharpestCorners);\n    }\n    /** Copy values of input options */\n    setFrom(other) {\n        this.leftOffsetDistance = other.leftOffsetDistance;\n        this.minArcDegrees = other.minArcDegrees;\n        this.maxChamferTurnDegrees = other.maxChamferTurnDegrees;\n        this.preserveEllipticalArcs = other.preserveEllipticalArcs;\n        this.allowSharpestCorners = other.allowSharpestCorners;\n    }\n    /**\n     * Parse a number or JointOptions up to JointOptions:\n     * * If leftOffsetDistanceOptions is a number, create a JointOptions with other options set to default values.\n     * * If leftOffsetDistanceOrOptions is a JointOptions, return it unchanged.\n     * @param leftOffsetDistanceOrOptions\n     */\n    static create(leftOffsetDistanceOrOptions) {\n        if (leftOffsetDistanceOrOptions instanceof JointOptions)\n            return leftOffsetDistanceOrOptions;\n        return new JointOptions(leftOffsetDistanceOrOptions);\n    }\n    /** Return true if the options indicate this amount of turn should be handled with an arc. */\n    needArc(theta) {\n        return Math.abs(theta.degrees) >= this.minArcDegrees;\n    }\n    /** Return the number of corners needed to chamfer the given turn angle. */\n    numChamferPoints(theta) {\n        const degrees = Math.abs(theta.degrees);\n        const minStepDegreesClamp = 10;\n        let maxStepDegreesClamp = 120;\n        if (this.allowSharpestCorners) {\n            maxStepDegreesClamp = this.maxChamferTurnDegrees;\n        }\n        const stepDegrees = Geometry.clamp(this.maxChamferTurnDegrees, minStepDegreesClamp, maxStepDegreesClamp);\n        if (degrees <= stepDegrees)\n            return 1;\n        return Math.ceil(degrees / stepDegrees);\n    }\n}\n/**\n * Options for offsetting a curve, used in offset construction methods such as [[CurvePrimitive.constructOffsetXY]], [[RegionOps.constructPolygonWireXYOffset]] and [[Region.Ops.constructCurveXYOffset]].\n * @public\n */\nexport class OffsetOptions {\n    /** Options that are provided are captured. */\n    constructor(offsetDistanceOrOptions, strokeOptions) {\n        this.jointOptions = JointOptions.create(offsetDistanceOrOptions);\n        this.strokeOptions = (strokeOptions !== undefined) ? strokeOptions : StrokeOptions.createForCurves();\n    }\n    get minArcDegrees() {\n        return this.jointOptions.minArcDegrees;\n    }\n    set minArcDegrees(value) {\n        this.jointOptions.minArcDegrees = value;\n    }\n    get maxChamferTurnDegrees() {\n        return this.jointOptions.maxChamferTurnDegrees;\n    }\n    set maxChamferTurnDegrees(value) {\n        this.jointOptions.maxChamferTurnDegrees = value;\n    }\n    get allowSharpestCorners() {\n        return this.jointOptions.allowSharpestCorners;\n    }\n    set allowSharpestCorners(value) {\n        this.jointOptions.allowSharpestCorners = value;\n    }\n    get leftOffsetDistance() {\n        return this.jointOptions.leftOffsetDistance;\n    }\n    set leftOffsetDistance(value) {\n        this.jointOptions.leftOffsetDistance = value;\n    }\n    get preserveEllipticalArcs() {\n        return this.jointOptions.preserveEllipticalArcs;\n    }\n    set preserveEllipticalArcs(value) {\n        this.jointOptions.preserveEllipticalArcs = value;\n    }\n    /**\n     * Convert variant input into OffsetOptions.\n     * * If a JointOptions is provided, it is captured.\n     * * If an OffsetOptions is provided, a reference to it is returned.\n     */\n    static create(offsetDistanceOrOptions) {\n        if (offsetDistanceOrOptions instanceof OffsetOptions)\n            return offsetDistanceOrOptions;\n        return new OffsetOptions(offsetDistanceOrOptions);\n    }\n    /** Convert variant input into offset distance */\n    static getOffsetDistance(offsetDistanceOrOptions) {\n        if (typeof offsetDistanceOrOptions === \"number\")\n            return offsetDistanceOrOptions;\n        return offsetDistanceOrOptions.leftOffsetDistance;\n    }\n    /** Return a deep clone. */\n    clone() {\n        return new OffsetOptions(this.jointOptions.clone(), this.strokeOptions.clone());\n    }\n}\n//# sourceMappingURL=OffsetOptions.js.map",
      "start": 1693508123664,
      "end": 1693508123815,
      "sourcemaps": null
    }
  ]
}
