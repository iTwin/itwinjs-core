{
  "resolvedId": "D:/hub2023A/itwinjs-core/common/temp/node_modules/.pnpm/@itwin+browser-authorization@1.0.1_67wltvhdskk2oee2c3z2o4tfly/node_modules/@itwin/browser-authorization/lib/esm/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nexport * from \"./Client\";\r\nexport * from \"./LoggerCategory\";\r\nexport * from \"./types\";\r\n/** @docs-package-description\r\n * Provides auth functionality for browser environments using OIDC code flow with PKCE.\r\n *\r\n## Usage\r\n\r\nCreate a new instance of `BrowserAuthorizationClient`, passing in needed credentials:\r\n\r\n```typescript\r\nconst client = new BrowserAuthorizationClient({\r\n  clientId: // find at developer.bentley.com\r\n  redirectUri: // find/set at developer.bentley.com\r\n  scope: // find/set at developer.bentley.com\r\n  authority: // ims.bentley.com\r\n  postSignoutRedirectUri: // find/set at developer.bentley.com\r\n  responseType: \"code\",\r\n  silentRedirectUri: // find/set at developer.bentley.com\r\n});\r\n```\r\n\r\nThe most common way to use an instance of `BrowserAuthorizationClient` will depend on your specific application and workflow. Here's one common way:\r\n\r\n```typescript\r\n// will attempt to sign in silently,\r\n// and then via redirect if not possible.\r\nawait client.signInRedirect();\r\n```\r\n\r\nInstead of a redirect, you may want to trigger a pop up to handle the sign in process:\r\n\r\n```typescript\r\nawait client.signinPopup();\r\n```\r\n\r\nAfter the user signs in, they will be redirected to the redirect url specified in your oidc configuration (developer.bentley.com)\r\nOnce on that page, you must call:\r\n\r\n```typescript\r\nawait client.handleSigninCallback();\r\n```\r\n\r\nto complete the process. Once back on your initial page, the call to `client.signInSilent` will succeed and you should be authorized.\r\n\r\nIf the callback occurs on a page where the configured `client` is not available, you can use the static method to complete the process:\r\n\r\n```typescript\r\nawait BrowserAuthorizationClient.handleSigninCallback()\r\n\r\n// This library defaults to localStorage for storing state.\r\n// To use sessionStorage (or another Storage object), you can pass it as an argument.\r\n// If overriding the default localStorage, also set the stateStore via client.setAdvancedSettings({stateStore: yourStore})\r\nawait BrowserAuthorizationClient.handleSigninCallback(window.sessionStorage)\r\n```\r\n\r\nThis will pull the client configuration from localStorage, using the state nonce provided by OIDC to select the proper configuration.\r\n\r\nOther notable methods:\r\n`client.signOutRedirect()` - starts the signout flow via redirect\r\n`client.signOutPopup()` - starts the signout flow via popup.\r\n`client.setAdvancedSettings(userManagerSettings)` - Allows for advanced options to be supplied to the underlying UserManager.\r\n\r\n */\r\n/**\r\n * @docs-group-description Authorization\r\n * For signing a user in and out of an auth service.\r\n */\r\n/**\r\n * @docs-group-description Logging\r\n * Logger categories used by this package.\r\n */\r\n//# sourceMappingURL=index.js.map",
      "start": 1693508121130,
      "end": 1693508121201,
      "sourcemaps": null
    }
  ]
}
