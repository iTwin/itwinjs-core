{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/FeatureOverrides.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { dispose, Id64String, IDisposable } from \"@itwin/core-bentley\";\r\nimport {\r\n  ColorInputProps, ComboBox, ComboBoxHandler, convertHexToRgb, createButton, createCheckBox, createColorInput, createComboBox, createNumericInput,\r\n} from \"@itwin/frontend-devtools\";\r\nimport { FeatureAppearance, FeatureAppearanceProps, LinePixels, RgbColor } from \"@itwin/core-common\";\r\nimport { FeatureOverrideProvider, FeatureSymbology, Viewport } from \"@itwin/core-frontend\";\r\nimport { ToolBarDropDown } from \"./ToolBar\";\r\n\r\nexport class Provider implements FeatureOverrideProvider {\r\n  private readonly _elementOvrs = new Map<Id64String, FeatureAppearance>();\r\n  private _defaultOvrs: FeatureAppearance | undefined;\r\n  private readonly _vp: Viewport;\r\n\r\n  private constructor(vp: Viewport) { this._vp = vp; }\r\n\r\n  public addFeatureOverrides(ovrs: FeatureSymbology.Overrides, _vp: Viewport): void {\r\n    this._elementOvrs.forEach((appearance, elementId) => ovrs.override({ elementId, appearance }));\r\n    if (undefined !== this._defaultOvrs)\r\n      ovrs.setDefaultOverrides(this._defaultOvrs);\r\n  }\r\n\r\n  public overrideElements(app: FeatureAppearance): void {\r\n    for (const id of this._vp.iModel.selectionSet.elements)\r\n      this._elementOvrs.set(id, app);\r\n\r\n    this.sync();\r\n  }\r\n\r\n  public overrideElementsByArray(elementOvrs: any[]): void {\r\n    elementOvrs.forEach((eo) => {\r\n      const fsa = FeatureAppearance.fromJSON(JSON.parse(eo.fsa) as FeatureAppearanceProps);\r\n      if (eo.id === \"-default-\")\r\n        this.defaults = fsa;\r\n      else\r\n        this._elementOvrs.set(eo.id, fsa);\r\n    });\r\n\r\n    this.sync();\r\n  }\r\n\r\n  public toJSON(): any[] | undefined {\r\n    if (0 === this._elementOvrs.size && undefined === this._defaultOvrs)\r\n      return undefined;\r\n\r\n    const elementOvrs: any[] = [];\r\n    this._elementOvrs.forEach((value, key) => {\r\n      const elem = { id: key, fsa: JSON.stringify(value.toJSON()) };\r\n      elementOvrs.push(elem);\r\n    });\r\n\r\n    // Put the default override into the array as well, at the end with a special ID that we can find later.\r\n    if (undefined !== this._defaultOvrs) {\r\n      const elem = { id: \"-default-\", fsa: JSON.stringify(this._defaultOvrs.toJSON()) };\r\n      elementOvrs.push(elem);\r\n    }\r\n\r\n    return elementOvrs;\r\n  }\r\n\r\n  public clear(): void {\r\n    this._elementOvrs.clear();\r\n    this._defaultOvrs = undefined;\r\n    this.sync();\r\n  }\r\n\r\n  public set defaults(value: FeatureAppearance | undefined) {\r\n    this._defaultOvrs = value;\r\n    this.sync();\r\n  }\r\n\r\n  private sync(): void { this._vp.setFeatureOverrideProviderChanged(); }\r\n\r\n  public static get(vp: Viewport): Provider | undefined {\r\n    return vp.findFeatureOverrideProvider((x) => x instanceof Provider) as Provider | undefined;\r\n  }\r\n\r\n  public static remove(vp: Viewport): void {\r\n    const provider = this.get(vp);\r\n    if (provider)\r\n      vp.dropFeatureOverrideProvider(provider);\r\n  }\r\n\r\n  public static getOrCreate(vp: Viewport): Provider {\r\n    let provider = this.get(vp);\r\n    if (undefined === provider) {\r\n      provider = new Provider(vp);\r\n      vp.addFeatureOverrideProvider(provider);\r\n    }\r\n\r\n    return provider;\r\n  }\r\n}\r\n\r\nexport class Settings implements IDisposable {\r\n  private _appearance = FeatureAppearance.defaults;\r\n  private readonly _vp: Viewport;\r\n  private readonly _parent: HTMLElement;\r\n  private readonly _element: HTMLElement;\r\n\r\n  public constructor(vp: Viewport, parent: HTMLElement) {\r\n    this._vp = vp;\r\n    this._parent = parent;\r\n\r\n    this._element = document.createElement(\"div\");\r\n    this._element.className = \"toolMenu\";\r\n    this._element.style.cssFloat = \"left\";\r\n    this._element.style.display = \"block\";\r\n\r\n    this.addColor(this._element);\r\n    this.addTransparency(this._element);\r\n    this.addWeight(this._element);\r\n    Settings.addStyle(this._element, LinePixels.Invalid, (select: HTMLSelectElement) => this.updateStyle(parseInt(select.value, 10)));\r\n\r\n    createCheckBox({\r\n      parent: this._element,\r\n      name: \"Ignore Material\",\r\n      id: \"ovr_ignoreMaterial\",\r\n      handler: (cb) => this.updateIgnoreMaterial(cb.checked ? true : undefined),\r\n    });\r\n\r\n    createCheckBox({\r\n      parent: this._element,\r\n      name: \"Non-locatable\",\r\n      id: \"ovr_nonLocatable\",\r\n      handler: (cb) => this.updateNonLocatable(cb.checked ? true : undefined),\r\n    });\r\n\r\n    createCheckBox({\r\n      parent: this._element,\r\n      name: \"Emphasized\",\r\n      id: \"ovr_emphasized\",\r\n      handler: (cb) => this.updateAppearance(\"emphasized\", cb.checked ? true : undefined),\r\n    });\r\n\r\n    createCheckBox({\r\n      parent: this._element,\r\n      name: \"View-dependent transparency\",\r\n      id: \"ovr_viewDep\",\r\n      handler: (cb) => this.updateAppearance(\"viewDependentTransparency\", cb.checked ? true : undefined),\r\n    });\r\n\r\n    const buttonDiv = document.createElement(\"div\");\r\n    buttonDiv.style.textAlign = \"center\";\r\n    createButton({\r\n      value: \"Apply\",\r\n      handler: () => this._provider.overrideElements(this._appearance),\r\n      parent: buttonDiv,\r\n      inline: true,\r\n      tooltip: \"Apply overrides to selection set\",\r\n    });\r\n    createButton({\r\n      value: \"Default\",\r\n      handler: () => this._provider.defaults = this._appearance,\r\n      parent: buttonDiv,\r\n      inline: true,\r\n      tooltip: \"Set as default overrides\",\r\n    });\r\n    createButton({\r\n      value: \"Clear\",\r\n      handler: () => this._provider.clear(),\r\n      parent: buttonDiv,\r\n      inline: true,\r\n      tooltip: \"Remove all overrides\",\r\n    });\r\n\r\n    this._element.appendChild(document.createElement(\"hr\"));\r\n    this._element.appendChild(buttonDiv);\r\n\r\n    parent.appendChild(this._element);\r\n  }\r\n\r\n  public dispose(): void {\r\n    this._parent.removeChild(this._element);\r\n  }\r\n\r\n  private get _provider() { return Provider.getOrCreate(this._vp); }\r\n\r\n  // private reset() { this._appearance = FeatureSymbology.Appearance.defaults; }\r\n\r\n  private updateAppearance(field: \"rgb\" | \"transparency\" | \"linePixels\" | \"weight\" | \"ignoresMaterial\" | \"nonLocatable\" | \"emphasized\" | \"viewDependentTransparency\", value: any): void {\r\n    const props = this._appearance.toJSON();\r\n    props[field] = value;\r\n    this._appearance = FeatureAppearance.fromJSON(props);\r\n  }\r\n\r\n  private updateColor(rgb: RgbColor | undefined): void { this.updateAppearance(\"rgb\", rgb); }\r\n  private updateTransparency(transparency: number | undefined): void { this.updateAppearance(\"transparency\", transparency); }\r\n  private updateWeight(weight: number | undefined): void { this.updateAppearance(\"weight\", weight); }\r\n  private updateIgnoreMaterial(ignoresMaterial: true | undefined): void { this.updateAppearance(\"ignoresMaterial\", ignoresMaterial); }\r\n  private updateNonLocatable(nonLocatable: true | undefined): void { this.updateAppearance(\"nonLocatable\", nonLocatable); }\r\n  private updateStyle(style: LinePixels): void {\r\n    const linePixels = LinePixels.Invalid !== style ? style : undefined;\r\n    this.updateAppearance(\"linePixels\", linePixels);\r\n  }\r\n\r\n  private addTransparency(parent: HTMLElement): void {\r\n    const div = document.createElement(\"div\");\r\n\r\n    const cb = document.createElement(\"input\");\r\n    cb.type = \"checkbox\";\r\n    cb.id = \"cb_ovrTrans\";\r\n    div.appendChild(cb);\r\n\r\n    const label = document.createElement(\"label\");\r\n    label.htmlFor = \"cb_ovrTrans\";\r\n    label.innerText = \"Transparency \";\r\n    div.appendChild(label);\r\n\r\n    const num = createNumericInput({\r\n      parent: div,\r\n      value: 0,\r\n      disabled: true,\r\n      min: 0,\r\n      max: 255,\r\n      step: 1,\r\n      handler: (value) => this.updateTransparency(value / 255),\r\n    });\r\n    div.appendChild(num);\r\n\r\n    cb.addEventListener(\"click\", () => {\r\n      num.disabled = !cb.checked;\r\n      this.updateTransparency(cb.checked ? parseInt(num.value, 10) / 255 : undefined);\r\n    });\r\n\r\n    parent.appendChild(div);\r\n  }\r\n\r\n  private addWeight(parent: HTMLElement): void {\r\n    const div = document.createElement(\"div\");\r\n\r\n    const cb = document.createElement(\"input\");\r\n    cb.type = \"checkbox\";\r\n    cb.id = \"cb_ovrWeight\";\r\n    div.appendChild(cb);\r\n\r\n    const label = document.createElement(\"label\");\r\n    label.htmlFor = \"cb_ovrWeight\";\r\n    label.innerText = \"Weight \";\r\n    div.appendChild(label);\r\n\r\n    const num = createNumericInput({\r\n      parent: div,\r\n      value: 1,\r\n      disabled: true,\r\n      min: 1,\r\n      max: 31,\r\n      step: 1,\r\n      handler: (value) => this.updateWeight(value),\r\n    });\r\n    div.appendChild(num);\r\n\r\n    cb.addEventListener(\"click\", () => {\r\n      num.disabled = !cb.checked;\r\n      this.updateWeight(cb.checked ? parseInt(num.value, 10) : undefined);\r\n    });\r\n\r\n    parent.appendChild(div);\r\n  }\r\n\r\n  public static addStyle(parent: HTMLElement, value: LinePixels, handler: ComboBoxHandler): ComboBox {\r\n    const entries = [\r\n      { name: \"Not overridden\", value: LinePixels.Invalid },\r\n      { name: \"Solid\", value: LinePixels.Solid },\r\n      { name: \"Hidden Line\", value: LinePixels.HiddenLine },\r\n      { name: \"Invisible\", value: LinePixels.Invisible },\r\n      { name: \"Code1\", value: LinePixels.Code1 },\r\n      { name: \"Code2\", value: LinePixels.Code2 },\r\n      { name: \"Code3\", value: LinePixels.Code3 },\r\n      { name: \"Code4\", value: LinePixels.Code4 },\r\n      { name: \"Code5\", value: LinePixels.Code5 },\r\n      { name: \"Code6\", value: LinePixels.Code6 },\r\n      { name: \"Code7\", value: LinePixels.Code7 },\r\n    ];\r\n\r\n    return createComboBox({\r\n      parent,\r\n      entries,\r\n      id: \"ovr_Style\",\r\n      name: \"Style \",\r\n      value,\r\n      handler,\r\n    });\r\n  }\r\n\r\n  private addColor(parent: HTMLElement): void {\r\n    const div = document.createElement(\"div\");\r\n\r\n    const cb = document.createElement(\"input\");\r\n    cb.type = \"checkbox\";\r\n    cb.id = \"cb_ovrColor\";\r\n    div.appendChild(cb);\r\n\r\n    const update = () => this.updateColor(convertHexToRgb(input.value));\r\n    const props: ColorInputProps = {\r\n      parent: div,\r\n      id: \"color_ovrColor\",\r\n      label: \"Color\",\r\n      value: \"#ffffff\",\r\n      display: \"inline\",\r\n      disabled: true,\r\n      handler: update,\r\n    };\r\n    const input: HTMLInputElement = createColorInput(props).input;\r\n\r\n    cb.addEventListener(\"click\", () => {\r\n      input.disabled = !cb.checked;\r\n\r\n      if (cb.checked)\r\n        update();\r\n      else\r\n        this.updateColor(undefined);\r\n    });\r\n    parent.appendChild(div);\r\n  }\r\n}\r\n\r\nexport class FeatureOverridesPanel extends ToolBarDropDown {\r\n  private readonly _vp: Viewport;\r\n  private readonly _parent: HTMLElement;\r\n  private _settings?: Settings;\r\n\r\n  public constructor(vp: Viewport, parent: HTMLElement) {\r\n    super();\r\n    this._vp = vp;\r\n    this._parent = parent;\r\n    this.open();\r\n  }\r\n\r\n  public override get onViewChanged(): Promise<void> {\r\n    Provider.remove(this._vp);\r\n    return Promise.resolve();\r\n  }\r\n\r\n  protected _open(): void { this._settings = new Settings(this._vp, this._parent); }\r\n  protected _close(): void { this._settings = dispose(this._settings); }\r\n  public get isOpen(): boolean { return undefined !== this._settings; }\r\n}\r\n",
      "start": 1693508124562,
      "end": 1693508124708,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { dispose } from \"@itwin/core-bentley\";\nimport {\n  convertHexToRgb,\n  createButton,\n  createCheckBox,\n  createColorInput,\n  createComboBox,\n  createNumericInput\n} from \"@itwin/frontend-devtools\";\nimport { FeatureAppearance, LinePixels } from \"@itwin/core-common\";\nimport { ToolBarDropDown } from \"./ToolBar\";\nexport class Provider {\n  constructor(vp) {\n    this._elementOvrs = /* @__PURE__ */ new Map();\n    this._vp = vp;\n  }\n  addFeatureOverrides(ovrs, _vp) {\n    this._elementOvrs.forEach((appearance, elementId) => ovrs.override({ elementId, appearance }));\n    if (void 0 !== this._defaultOvrs)\n      ovrs.setDefaultOverrides(this._defaultOvrs);\n  }\n  overrideElements(app) {\n    for (const id of this._vp.iModel.selectionSet.elements)\n      this._elementOvrs.set(id, app);\n    this.sync();\n  }\n  overrideElementsByArray(elementOvrs) {\n    elementOvrs.forEach((eo) => {\n      const fsa = FeatureAppearance.fromJSON(JSON.parse(eo.fsa));\n      if (eo.id === \"-default-\")\n        this.defaults = fsa;\n      else\n        this._elementOvrs.set(eo.id, fsa);\n    });\n    this.sync();\n  }\n  toJSON() {\n    if (0 === this._elementOvrs.size && void 0 === this._defaultOvrs)\n      return void 0;\n    const elementOvrs = [];\n    this._elementOvrs.forEach((value, key) => {\n      const elem = { id: key, fsa: JSON.stringify(value.toJSON()) };\n      elementOvrs.push(elem);\n    });\n    if (void 0 !== this._defaultOvrs) {\n      const elem = { id: \"-default-\", fsa: JSON.stringify(this._defaultOvrs.toJSON()) };\n      elementOvrs.push(elem);\n    }\n    return elementOvrs;\n  }\n  clear() {\n    this._elementOvrs.clear();\n    this._defaultOvrs = void 0;\n    this.sync();\n  }\n  set defaults(value) {\n    this._defaultOvrs = value;\n    this.sync();\n  }\n  sync() {\n    this._vp.setFeatureOverrideProviderChanged();\n  }\n  static get(vp) {\n    return vp.findFeatureOverrideProvider((x) => x instanceof Provider);\n  }\n  static remove(vp) {\n    const provider = this.get(vp);\n    if (provider)\n      vp.dropFeatureOverrideProvider(provider);\n  }\n  static getOrCreate(vp) {\n    let provider = this.get(vp);\n    if (void 0 === provider) {\n      provider = new Provider(vp);\n      vp.addFeatureOverrideProvider(provider);\n    }\n    return provider;\n  }\n}\nexport class Settings {\n  constructor(vp, parent) {\n    this._appearance = FeatureAppearance.defaults;\n    this._vp = vp;\n    this._parent = parent;\n    this._element = document.createElement(\"div\");\n    this._element.className = \"toolMenu\";\n    this._element.style.cssFloat = \"left\";\n    this._element.style.display = \"block\";\n    this.addColor(this._element);\n    this.addTransparency(this._element);\n    this.addWeight(this._element);\n    Settings.addStyle(this._element, LinePixels.Invalid, (select) => this.updateStyle(parseInt(select.value, 10)));\n    createCheckBox({\n      parent: this._element,\n      name: \"Ignore Material\",\n      id: \"ovr_ignoreMaterial\",\n      handler: (cb) => this.updateIgnoreMaterial(cb.checked ? true : void 0)\n    });\n    createCheckBox({\n      parent: this._element,\n      name: \"Non-locatable\",\n      id: \"ovr_nonLocatable\",\n      handler: (cb) => this.updateNonLocatable(cb.checked ? true : void 0)\n    });\n    createCheckBox({\n      parent: this._element,\n      name: \"Emphasized\",\n      id: \"ovr_emphasized\",\n      handler: (cb) => this.updateAppearance(\"emphasized\", cb.checked ? true : void 0)\n    });\n    createCheckBox({\n      parent: this._element,\n      name: \"View-dependent transparency\",\n      id: \"ovr_viewDep\",\n      handler: (cb) => this.updateAppearance(\"viewDependentTransparency\", cb.checked ? true : void 0)\n    });\n    const buttonDiv = document.createElement(\"div\");\n    buttonDiv.style.textAlign = \"center\";\n    createButton({\n      value: \"Apply\",\n      handler: () => this._provider.overrideElements(this._appearance),\n      parent: buttonDiv,\n      inline: true,\n      tooltip: \"Apply overrides to selection set\"\n    });\n    createButton({\n      value: \"Default\",\n      handler: () => this._provider.defaults = this._appearance,\n      parent: buttonDiv,\n      inline: true,\n      tooltip: \"Set as default overrides\"\n    });\n    createButton({\n      value: \"Clear\",\n      handler: () => this._provider.clear(),\n      parent: buttonDiv,\n      inline: true,\n      tooltip: \"Remove all overrides\"\n    });\n    this._element.appendChild(document.createElement(\"hr\"));\n    this._element.appendChild(buttonDiv);\n    parent.appendChild(this._element);\n  }\n  dispose() {\n    this._parent.removeChild(this._element);\n  }\n  get _provider() {\n    return Provider.getOrCreate(this._vp);\n  }\n  // private reset() { this._appearance = FeatureSymbology.Appearance.defaults; }\n  updateAppearance(field, value) {\n    const props = this._appearance.toJSON();\n    props[field] = value;\n    this._appearance = FeatureAppearance.fromJSON(props);\n  }\n  updateColor(rgb) {\n    this.updateAppearance(\"rgb\", rgb);\n  }\n  updateTransparency(transparency) {\n    this.updateAppearance(\"transparency\", transparency);\n  }\n  updateWeight(weight) {\n    this.updateAppearance(\"weight\", weight);\n  }\n  updateIgnoreMaterial(ignoresMaterial) {\n    this.updateAppearance(\"ignoresMaterial\", ignoresMaterial);\n  }\n  updateNonLocatable(nonLocatable) {\n    this.updateAppearance(\"nonLocatable\", nonLocatable);\n  }\n  updateStyle(style) {\n    const linePixels = LinePixels.Invalid !== style ? style : void 0;\n    this.updateAppearance(\"linePixels\", linePixels);\n  }\n  addTransparency(parent) {\n    const div = document.createElement(\"div\");\n    const cb = document.createElement(\"input\");\n    cb.type = \"checkbox\";\n    cb.id = \"cb_ovrTrans\";\n    div.appendChild(cb);\n    const label = document.createElement(\"label\");\n    label.htmlFor = \"cb_ovrTrans\";\n    label.innerText = \"Transparency \";\n    div.appendChild(label);\n    const num = createNumericInput({\n      parent: div,\n      value: 0,\n      disabled: true,\n      min: 0,\n      max: 255,\n      step: 1,\n      handler: (value) => this.updateTransparency(value / 255)\n    });\n    div.appendChild(num);\n    cb.addEventListener(\"click\", () => {\n      num.disabled = !cb.checked;\n      this.updateTransparency(cb.checked ? parseInt(num.value, 10) / 255 : void 0);\n    });\n    parent.appendChild(div);\n  }\n  addWeight(parent) {\n    const div = document.createElement(\"div\");\n    const cb = document.createElement(\"input\");\n    cb.type = \"checkbox\";\n    cb.id = \"cb_ovrWeight\";\n    div.appendChild(cb);\n    const label = document.createElement(\"label\");\n    label.htmlFor = \"cb_ovrWeight\";\n    label.innerText = \"Weight \";\n    div.appendChild(label);\n    const num = createNumericInput({\n      parent: div,\n      value: 1,\n      disabled: true,\n      min: 1,\n      max: 31,\n      step: 1,\n      handler: (value) => this.updateWeight(value)\n    });\n    div.appendChild(num);\n    cb.addEventListener(\"click\", () => {\n      num.disabled = !cb.checked;\n      this.updateWeight(cb.checked ? parseInt(num.value, 10) : void 0);\n    });\n    parent.appendChild(div);\n  }\n  static addStyle(parent, value, handler) {\n    const entries = [\n      { name: \"Not overridden\", value: LinePixels.Invalid },\n      { name: \"Solid\", value: LinePixels.Solid },\n      { name: \"Hidden Line\", value: LinePixels.HiddenLine },\n      { name: \"Invisible\", value: LinePixels.Invisible },\n      { name: \"Code1\", value: LinePixels.Code1 },\n      { name: \"Code2\", value: LinePixels.Code2 },\n      { name: \"Code3\", value: LinePixels.Code3 },\n      { name: \"Code4\", value: LinePixels.Code4 },\n      { name: \"Code5\", value: LinePixels.Code5 },\n      { name: \"Code6\", value: LinePixels.Code6 },\n      { name: \"Code7\", value: LinePixels.Code7 }\n    ];\n    return createComboBox({\n      parent,\n      entries,\n      id: \"ovr_Style\",\n      name: \"Style \",\n      value,\n      handler\n    });\n  }\n  addColor(parent) {\n    const div = document.createElement(\"div\");\n    const cb = document.createElement(\"input\");\n    cb.type = \"checkbox\";\n    cb.id = \"cb_ovrColor\";\n    div.appendChild(cb);\n    const update = () => this.updateColor(convertHexToRgb(input.value));\n    const props = {\n      parent: div,\n      id: \"color_ovrColor\",\n      label: \"Color\",\n      value: \"#ffffff\",\n      display: \"inline\",\n      disabled: true,\n      handler: update\n    };\n    const input = createColorInput(props).input;\n    cb.addEventListener(\"click\", () => {\n      input.disabled = !cb.checked;\n      if (cb.checked)\n        update();\n      else\n        this.updateColor(void 0);\n    });\n    parent.appendChild(div);\n  }\n}\nexport class FeatureOverridesPanel extends ToolBarDropDown {\n  constructor(vp, parent) {\n    super();\n    this._vp = vp;\n    this._parent = parent;\n    this.open();\n  }\n  get onViewChanged() {\n    Provider.remove(this._vp);\n    return Promise.resolve();\n  }\n  _open() {\n    this._settings = new Settings(this._vp, this._parent);\n  }\n  _close() {\n    this._settings = dispose(this._settings);\n  }\n  get isOpen() {\n    return void 0 !== this._settings;\n  }\n}\n",
      "start": 1693508124708,
      "end": 1693508124781,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/FeatureOverrides.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { dispose, Id64String, IDisposable } from \"@itwin/core-bentley\";\r\nimport {\r\n  ColorInputProps, ComboBox, ComboBoxHandler, convertHexToRgb, createButton, createCheckBox, createColorInput, createComboBox, createNumericInput,\r\n} from \"@itwin/frontend-devtools\";\r\nimport { FeatureAppearance, FeatureAppearanceProps, LinePixels, RgbColor } from \"@itwin/core-common\";\r\nimport { FeatureOverrideProvider, FeatureSymbology, Viewport } from \"@itwin/core-frontend\";\r\nimport { ToolBarDropDown } from \"./ToolBar\";\r\n\r\nexport class Provider implements FeatureOverrideProvider {\r\n  private readonly _elementOvrs = new Map<Id64String, FeatureAppearance>();\r\n  private _defaultOvrs: FeatureAppearance | undefined;\r\n  private readonly _vp: Viewport;\r\n\r\n  private constructor(vp: Viewport) { this._vp = vp; }\r\n\r\n  public addFeatureOverrides(ovrs: FeatureSymbology.Overrides, _vp: Viewport): void {\r\n    this._elementOvrs.forEach((appearance, elementId) => ovrs.override({ elementId, appearance }));\r\n    if (undefined !== this._defaultOvrs)\r\n      ovrs.setDefaultOverrides(this._defaultOvrs);\r\n  }\r\n\r\n  public overrideElements(app: FeatureAppearance): void {\r\n    for (const id of this._vp.iModel.selectionSet.elements)\r\n      this._elementOvrs.set(id, app);\r\n\r\n    this.sync();\r\n  }\r\n\r\n  public overrideElementsByArray(elementOvrs: any[]): void {\r\n    elementOvrs.forEach((eo) => {\r\n      const fsa = FeatureAppearance.fromJSON(JSON.parse(eo.fsa) as FeatureAppearanceProps);\r\n      if (eo.id === \"-default-\")\r\n        this.defaults = fsa;\r\n      else\r\n        this._elementOvrs.set(eo.id, fsa);\r\n    });\r\n\r\n    this.sync();\r\n  }\r\n\r\n  public toJSON(): any[] | undefined {\r\n    if (0 === this._elementOvrs.size && undefined === this._defaultOvrs)\r\n      return undefined;\r\n\r\n    const elementOvrs: any[] = [];\r\n    this._elementOvrs.forEach((value, key) => {\r\n      const elem = { id: key, fsa: JSON.stringify(value.toJSON()) };\r\n      elementOvrs.push(elem);\r\n    });\r\n\r\n    // Put the default override into the array as well, at the end with a special ID that we can find later.\r\n    if (undefined !== this._defaultOvrs) {\r\n      const elem = { id: \"-default-\", fsa: JSON.stringify(this._defaultOvrs.toJSON()) };\r\n      elementOvrs.push(elem);\r\n    }\r\n\r\n    return elementOvrs;\r\n  }\r\n\r\n  public clear(): void {\r\n    this._elementOvrs.clear();\r\n    this._defaultOvrs = undefined;\r\n    this.sync();\r\n  }\r\n\r\n  public set defaults(value: FeatureAppearance | undefined) {\r\n    this._defaultOvrs = value;\r\n    this.sync();\r\n  }\r\n\r\n  private sync(): void { this._vp.setFeatureOverrideProviderChanged(); }\r\n\r\n  public static get(vp: Viewport): Provider | undefined {\r\n    return vp.findFeatureOverrideProvider((x) => x instanceof Provider) as Provider | undefined;\r\n  }\r\n\r\n  public static remove(vp: Viewport): void {\r\n    const provider = this.get(vp);\r\n    if (provider)\r\n      vp.dropFeatureOverrideProvider(provider);\r\n  }\r\n\r\n  public static getOrCreate(vp: Viewport): Provider {\r\n    let provider = this.get(vp);\r\n    if (undefined === provider) {\r\n      provider = new Provider(vp);\r\n      vp.addFeatureOverrideProvider(provider);\r\n    }\r\n\r\n    return provider;\r\n  }\r\n}\r\n\r\nexport class Settings implements IDisposable {\r\n  private _appearance = FeatureAppearance.defaults;\r\n  private readonly _vp: Viewport;\r\n  private readonly _parent: HTMLElement;\r\n  private readonly _element: HTMLElement;\r\n\r\n  public constructor(vp: Viewport, parent: HTMLElement) {\r\n    this._vp = vp;\r\n    this._parent = parent;\r\n\r\n    this._element = document.createElement(\"div\");\r\n    this._element.className = \"toolMenu\";\r\n    this._element.style.cssFloat = \"left\";\r\n    this._element.style.display = \"block\";\r\n\r\n    this.addColor(this._element);\r\n    this.addTransparency(this._element);\r\n    this.addWeight(this._element);\r\n    Settings.addStyle(this._element, LinePixels.Invalid, (select: HTMLSelectElement) => this.updateStyle(parseInt(select.value, 10)));\r\n\r\n    createCheckBox({\r\n      parent: this._element,\r\n      name: \"Ignore Material\",\r\n      id: \"ovr_ignoreMaterial\",\r\n      handler: (cb) => this.updateIgnoreMaterial(cb.checked ? true : undefined),\r\n    });\r\n\r\n    createCheckBox({\r\n      parent: this._element,\r\n      name: \"Non-locatable\",\r\n      id: \"ovr_nonLocatable\",\r\n      handler: (cb) => this.updateNonLocatable(cb.checked ? true : undefined),\r\n    });\r\n\r\n    createCheckBox({\r\n      parent: this._element,\r\n      name: \"Emphasized\",\r\n      id: \"ovr_emphasized\",\r\n      handler: (cb) => this.updateAppearance(\"emphasized\", cb.checked ? true : undefined),\r\n    });\r\n\r\n    createCheckBox({\r\n      parent: this._element,\r\n      name: \"View-dependent transparency\",\r\n      id: \"ovr_viewDep\",\r\n      handler: (cb) => this.updateAppearance(\"viewDependentTransparency\", cb.checked ? true : undefined),\r\n    });\r\n\r\n    const buttonDiv = document.createElement(\"div\");\r\n    buttonDiv.style.textAlign = \"center\";\r\n    createButton({\r\n      value: \"Apply\",\r\n      handler: () => this._provider.overrideElements(this._appearance),\r\n      parent: buttonDiv,\r\n      inline: true,\r\n      tooltip: \"Apply overrides to selection set\",\r\n    });\r\n    createButton({\r\n      value: \"Default\",\r\n      handler: () => this._provider.defaults = this._appearance,\r\n      parent: buttonDiv,\r\n      inline: true,\r\n      tooltip: \"Set as default overrides\",\r\n    });\r\n    createButton({\r\n      value: \"Clear\",\r\n      handler: () => this._provider.clear(),\r\n      parent: buttonDiv,\r\n      inline: true,\r\n      tooltip: \"Remove all overrides\",\r\n    });\r\n\r\n    this._element.appendChild(document.createElement(\"hr\"));\r\n    this._element.appendChild(buttonDiv);\r\n\r\n    parent.appendChild(this._element);\r\n  }\r\n\r\n  public dispose(): void {\r\n    this._parent.removeChild(this._element);\r\n  }\r\n\r\n  private get _provider() { return Provider.getOrCreate(this._vp); }\r\n\r\n  // private reset() { this._appearance = FeatureSymbology.Appearance.defaults; }\r\n\r\n  private updateAppearance(field: \"rgb\" | \"transparency\" | \"linePixels\" | \"weight\" | \"ignoresMaterial\" | \"nonLocatable\" | \"emphasized\" | \"viewDependentTransparency\", value: any): void {\r\n    const props = this._appearance.toJSON();\r\n    props[field] = value;\r\n    this._appearance = FeatureAppearance.fromJSON(props);\r\n  }\r\n\r\n  private updateColor(rgb: RgbColor | undefined): void { this.updateAppearance(\"rgb\", rgb); }\r\n  private updateTransparency(transparency: number | undefined): void { this.updateAppearance(\"transparency\", transparency); }\r\n  private updateWeight(weight: number | undefined): void { this.updateAppearance(\"weight\", weight); }\r\n  private updateIgnoreMaterial(ignoresMaterial: true | undefined): void { this.updateAppearance(\"ignoresMaterial\", ignoresMaterial); }\r\n  private updateNonLocatable(nonLocatable: true | undefined): void { this.updateAppearance(\"nonLocatable\", nonLocatable); }\r\n  private updateStyle(style: LinePixels): void {\r\n    const linePixels = LinePixels.Invalid !== style ? style : undefined;\r\n    this.updateAppearance(\"linePixels\", linePixels);\r\n  }\r\n\r\n  private addTransparency(parent: HTMLElement): void {\r\n    const div = document.createElement(\"div\");\r\n\r\n    const cb = document.createElement(\"input\");\r\n    cb.type = \"checkbox\";\r\n    cb.id = \"cb_ovrTrans\";\r\n    div.appendChild(cb);\r\n\r\n    const label = document.createElement(\"label\");\r\n    label.htmlFor = \"cb_ovrTrans\";\r\n    label.innerText = \"Transparency \";\r\n    div.appendChild(label);\r\n\r\n    const num = createNumericInput({\r\n      parent: div,\r\n      value: 0,\r\n      disabled: true,\r\n      min: 0,\r\n      max: 255,\r\n      step: 1,\r\n      handler: (value) => this.updateTransparency(value / 255),\r\n    });\r\n    div.appendChild(num);\r\n\r\n    cb.addEventListener(\"click\", () => {\r\n      num.disabled = !cb.checked;\r\n      this.updateTransparency(cb.checked ? parseInt(num.value, 10) / 255 : undefined);\r\n    });\r\n\r\n    parent.appendChild(div);\r\n  }\r\n\r\n  private addWeight(parent: HTMLElement): void {\r\n    const div = document.createElement(\"div\");\r\n\r\n    const cb = document.createElement(\"input\");\r\n    cb.type = \"checkbox\";\r\n    cb.id = \"cb_ovrWeight\";\r\n    div.appendChild(cb);\r\n\r\n    const label = document.createElement(\"label\");\r\n    label.htmlFor = \"cb_ovrWeight\";\r\n    label.innerText = \"Weight \";\r\n    div.appendChild(label);\r\n\r\n    const num = createNumericInput({\r\n      parent: div,\r\n      value: 1,\r\n      disabled: true,\r\n      min: 1,\r\n      max: 31,\r\n      step: 1,\r\n      handler: (value) => this.updateWeight(value),\r\n    });\r\n    div.appendChild(num);\r\n\r\n    cb.addEventListener(\"click\", () => {\r\n      num.disabled = !cb.checked;\r\n      this.updateWeight(cb.checked ? parseInt(num.value, 10) : undefined);\r\n    });\r\n\r\n    parent.appendChild(div);\r\n  }\r\n\r\n  public static addStyle(parent: HTMLElement, value: LinePixels, handler: ComboBoxHandler): ComboBox {\r\n    const entries = [\r\n      { name: \"Not overridden\", value: LinePixels.Invalid },\r\n      { name: \"Solid\", value: LinePixels.Solid },\r\n      { name: \"Hidden Line\", value: LinePixels.HiddenLine },\r\n      { name: \"Invisible\", value: LinePixels.Invisible },\r\n      { name: \"Code1\", value: LinePixels.Code1 },\r\n      { name: \"Code2\", value: LinePixels.Code2 },\r\n      { name: \"Code3\", value: LinePixels.Code3 },\r\n      { name: \"Code4\", value: LinePixels.Code4 },\r\n      { name: \"Code5\", value: LinePixels.Code5 },\r\n      { name: \"Code6\", value: LinePixels.Code6 },\r\n      { name: \"Code7\", value: LinePixels.Code7 },\r\n    ];\r\n\r\n    return createComboBox({\r\n      parent,\r\n      entries,\r\n      id: \"ovr_Style\",\r\n      name: \"Style \",\r\n      value,\r\n      handler,\r\n    });\r\n  }\r\n\r\n  private addColor(parent: HTMLElement): void {\r\n    const div = document.createElement(\"div\");\r\n\r\n    const cb = document.createElement(\"input\");\r\n    cb.type = \"checkbox\";\r\n    cb.id = \"cb_ovrColor\";\r\n    div.appendChild(cb);\r\n\r\n    const update = () => this.updateColor(convertHexToRgb(input.value));\r\n    const props: ColorInputProps = {\r\n      parent: div,\r\n      id: \"color_ovrColor\",\r\n      label: \"Color\",\r\n      value: \"#ffffff\",\r\n      display: \"inline\",\r\n      disabled: true,\r\n      handler: update,\r\n    };\r\n    const input: HTMLInputElement = createColorInput(props).input;\r\n\r\n    cb.addEventListener(\"click\", () => {\r\n      input.disabled = !cb.checked;\r\n\r\n      if (cb.checked)\r\n        update();\r\n      else\r\n        this.updateColor(undefined);\r\n    });\r\n    parent.appendChild(div);\r\n  }\r\n}\r\n\r\nexport class FeatureOverridesPanel extends ToolBarDropDown {\r\n  private readonly _vp: Viewport;\r\n  private readonly _parent: HTMLElement;\r\n  private _settings?: Settings;\r\n\r\n  public constructor(vp: Viewport, parent: HTMLElement) {\r\n    super();\r\n    this._vp = vp;\r\n    this._parent = parent;\r\n    this.open();\r\n  }\r\n\r\n  public override get onViewChanged(): Promise<void> {\r\n    Provider.remove(this._vp);\r\n    return Promise.resolve();\r\n  }\r\n\r\n  protected _open(): void { this._settings = new Settings(this._vp, this._parent); }\r\n  protected _close(): void { this._settings = dispose(this._settings); }\r\n  public get isOpen(): boolean { return undefined !== this._settings; }\r\n}\r\n"
        ],
        "mappings": "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",
        "names": []
      }
    }
  ]
}
