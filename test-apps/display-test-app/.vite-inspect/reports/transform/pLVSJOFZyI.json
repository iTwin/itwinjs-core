{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/webgl/glsl/Instancing.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module WebGL\n */\nimport { assert } from \"@itwin/core-bentley\";\nimport { addExtractNthBit } from \"./Common\";\nimport { addOvrFlagConstants } from \"./FeatureSymbology\";\nconst extractInstanceBit = `\r\nfloat extractInstanceBit(uint flag) { return extractNthBit(a_instanceOverrides.r, flag); }\r\n`;\nconst computeInstancedModelMatrixRTC = `\r\n  if (g_isAreaPattern) {\r\n    vec2 spacing = u_patternParams.yz;\r\n    float scale = u_patternParams.w;\r\n\r\n    float x = u_patternOrigin.x + a_patternX * spacing.x;\r\n    float y = u_patternOrigin.y + a_patternY * spacing.y;\r\n    vec4 translation = vec4(x / scale, y / scale, 0.0, 1.0);\r\n    mat4 symbolTrans = u_patOrg;\r\n    symbolTrans[3] = symbolTrans * translation;\r\n\r\n    g_modelMatrixRTC = u_patLocalToModel * symbolTrans * u_patSymbolToLocal;\r\n  } else {\r\n    g_modelMatrixRTC = mat4(\r\n      a_instanceMatrixRow0.x, a_instanceMatrixRow1.x, a_instanceMatrixRow2.x, 0.0,\r\n      a_instanceMatrixRow0.y, a_instanceMatrixRow1.y, a_instanceMatrixRow2.y, 0.0,\r\n      a_instanceMatrixRow0.z, a_instanceMatrixRow1.z, a_instanceMatrixRow2.z, 0.0,\r\n      a_instanceMatrixRow0.w, a_instanceMatrixRow1.w, a_instanceMatrixRow2.w, 1.0);\r\n  }\r\n`;\nfunction setMatrix(uniform, matrix) {\n    if (matrix)\n        uniform.setMatrix4(matrix);\n}\nfunction addPatternTransforms(vert) {\n    vert.addUniform(\"u_patOrg\", 7 /* VariableType.Mat4 */, (prog) => prog.addGraphicUniform(\"u_patOrg\", (uniform, params) => setMatrix(uniform, params.geometry.asInstanced?.patternTransforms?.orgTransform)));\n    vert.addUniform(\"u_patLocalToModel\", 7 /* VariableType.Mat4 */, (prog) => prog.addGraphicUniform(\"u_patLocalToModel\", (uniform, params) => setMatrix(uniform, params.geometry.asInstanced?.patternTransforms?.localToModel)));\n    vert.addUniform(\"u_patSymbolToLocal\", 7 /* VariableType.Mat4 */, (prog) => prog.addGraphicUniform(\"u_patSymbolToLocal\", (uniform, params) => setMatrix(uniform, params.geometry.asInstanced?.patternTransforms?.symbolToLocal)));\n    vert.addUniform(\"u_patternOrigin\", 3 /* VariableType.Vec2 */, (prog) => {\n        prog.addGraphicUniform(\"u_patternOrigin\", (uniform, params) => {\n            const origin = params.geometry.asInstanced?.patternTransforms?.origin;\n            if (origin)\n                uniform.setUniform2fv(origin);\n        });\n    });\n}\n/** @internal */\nexport function addInstancedModelMatrixRTC(vert) {\n    assert(vert.usesInstancedGeometry);\n    vert.addUniform(\"u_patternParams\", 5 /* VariableType.Vec4 */, (prog) => {\n        prog.addGraphicUniform(\"u_patternParams\", (uniform, params) => {\n            const inst = params.geometry.asInstanced;\n            assert(undefined !== inst);\n            if (inst)\n                uniform.setUniform4fv(inst.patternParams);\n        });\n    });\n    addPatternTransforms(vert);\n    vert.addGlobal(\"g_isAreaPattern\", 0 /* VariableType.Boolean */);\n    vert.addInitializer(\"g_isAreaPattern = 0.0 != u_patternParams.x;\");\n    vert.addGlobal(\"g_modelMatrixRTC\", 7 /* VariableType.Mat4 */);\n    vert.addInitializer(computeInstancedModelMatrixRTC);\n}\n/** @internal */\nexport function addInstanceOverrides(vert) {\n    if (undefined !== vert.find(\"a_instanceOverrides\"))\n        return;\n    addOvrFlagConstants(vert);\n    addExtractNthBit(vert);\n    vert.addFunction(extractInstanceBit);\n}\n/** @internal */\nexport function addInstanceColor(vert) {\n    addInstanceOverrides(vert);\n    vert.addUniform(\"u_applyInstanceColor\", 2 /* VariableType.Float */, (prog) => {\n        prog.addGraphicUniform(\"u_applyInstanceColor\", (uniform, params) => {\n            let val = 1.0;\n            if (params.geometry.isEdge && undefined !== params.target.currentEdgeSettings.getColor(params.target.currentViewFlags))\n                val = 0.0;\n            uniform.setUniform1f(val);\n        });\n    });\n}\n//# sourceMappingURL=Instancing.js.map",
      "start": 1693508126529,
      "end": 1693508126618,
      "sourcemaps": null
    }
  ]
}
