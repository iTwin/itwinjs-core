{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/ModelGeometryChanges.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Geometry\n */\nimport { assert, CompressedId64Set, DbOpcode } from \"@itwin/core-bentley\";\nimport { Range3d } from \"@itwin/core-geometry\";\n/** Represents a change to the geometry of a [GeometricElement]($backend), as exposed by [[ModelGeometryChanges.elements]].\n * @public\n */\nexport var ElementGeometryChange;\n(function (ElementGeometryChange) {\n    function* extantIterator(props, type) {\n        let index = 0;\n        const ids = CompressedId64Set.iterable(props.ids);\n        for (const id of ids) {\n            assert(undefined !== props.ranges[index]);\n            const range = Range3d.fromJSON(props.ranges[index]);\n            index++;\n            yield { type, id, range };\n        }\n    }\n    function extantIterable(props, type) {\n        return { [Symbol.iterator]: () => extantIterator(props, type) };\n    }\n    /** Obtain an iterator over the geometry changes for a single [GeometricModel]($backend). A given element will appear at most once. */\n    function* iterator(modelChanges) {\n        if (modelChanges.inserted)\n            yield* extantIterable(modelChanges.inserted, DbOpcode.Insert);\n        if (modelChanges.updated)\n            yield* extantIterable(modelChanges.updated, DbOpcode.Update);\n        if (modelChanges.deleted)\n            for (const id of CompressedId64Set.iterable(modelChanges.deleted))\n                yield { type: DbOpcode.Delete, id };\n    }\n    ElementGeometryChange.iterator = iterator;\n    /** Obtain an iterable over the geometry changes for a single [GeometricModel]($backend). A given element will appear at most once. */\n    function iterable(modelChanges) {\n        return { [Symbol.iterator]: () => iterator(modelChanges) };\n    }\n    ElementGeometryChange.iterable = iterable;\n})(ElementGeometryChange || (ElementGeometryChange = {}));\n/** Represents geometric changes to a set of [GeometricElement]($backend)s belonging to a single [GeometricModel]($backend).\n * @see [GraphicalEditingScope]($frontend) to monitor these changes.\n * @public\n */\nexport var ModelGeometryChanges;\n(function (ModelGeometryChanges) {\n    /** Obtain an iterator over the geometry changes for a set of models. A given model will appear at most once. */\n    function* iterator(modelChanges) {\n        for (const props of modelChanges)\n            yield fromJSON(props);\n    }\n    ModelGeometryChanges.iterator = iterator;\n    /** Obtain an iterable over the geometry changes for a set of models. A given model will appear at most once. */\n    function iterable(modelChanges) {\n        return { [Symbol.iterator]: () => iterator(modelChanges) };\n    }\n    ModelGeometryChanges.iterable = iterable;\n    /** Instantiate from wire format. */\n    function fromJSON(props) {\n        return {\n            id: props.id,\n            geometryGuid: props.guid,\n            range: Range3d.fromJSON(props.range),\n            elements: ElementGeometryChange.iterable(props),\n        };\n    }\n    ModelGeometryChanges.fromJSON = fromJSON;\n    /** Obtain the ModelGeometryChanges for the specified model Id. */\n    function findByModelId(changes, modelId) {\n        for (const change of changes)\n            if (change.id === modelId)\n                return change;\n        return undefined;\n    }\n    ModelGeometryChanges.findByModelId = findByModelId;\n})(ModelGeometryChanges || (ModelGeometryChanges = {}));\n//# sourceMappingURL=ModelGeometryChanges.js.map",
      "start": 1693508120929,
      "end": 1693508120975,
      "sourcemaps": null
    }
  ]
}
