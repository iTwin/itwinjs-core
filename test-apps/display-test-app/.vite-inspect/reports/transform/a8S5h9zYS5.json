{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/webgl/RenderBuffer.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module WebGL\n */\nimport { assert } from \"@itwin/core-bentley\";\nimport { GL } from \"./GL\";\nimport { System } from \"./System\";\nfunction computeBytesUsed(width, height, format, numSamples) {\n    const bytesPerPixel = (GL.RenderBuffer.Format.DepthComponent16 === format ? 2 : 4);\n    return width * height * bytesPerPixel * numSamples;\n}\n/** @internal */\nexport class RenderBuffer {\n    get bytesUsed() { return this._bytesUsed; }\n    get width() { return this._width; }\n    get height() { return this._height; }\n    getHandle() { return this._glBuffer; }\n    static create(width, height, format = GL.RenderBuffer.Format.DepthComponent16) {\n        const gl = System.instance.context;\n        const glBuffer = gl.createRenderbuffer();\n        if (null === glBuffer) {\n            return undefined;\n        }\n        assert(0 < width && 0 < height);\n        RenderBuffer.bindBuffer(glBuffer);\n        gl.renderbufferStorage(GL.RenderBuffer.TARGET, format, width, height);\n        RenderBuffer.unbind();\n        return new RenderBuffer(glBuffer, width, height, computeBytesUsed(width, height, format, 1));\n    }\n    get isDisposed() { return this._glBuffer === undefined || this._glBuffer === null; }\n    dispose() {\n        if (!this.isDisposed) {\n            System.instance.context.deleteRenderbuffer(this._glBuffer);\n            this._glBuffer = undefined;\n            this._bytesUsed = 0;\n        }\n    }\n    bind() {\n        assert(undefined !== this._glBuffer);\n        if (undefined !== this._glBuffer) {\n            RenderBuffer.bindBuffer(this._glBuffer);\n        }\n    }\n    constructor(glBuffer, width, height, bytesUsed) {\n        this._bytesUsed = 0;\n        this._glBuffer = glBuffer;\n        this._bytesUsed = bytesUsed;\n        this._width = width;\n        this._height = height;\n    }\n    static bindBuffer(glBuffer) { System.instance.context.bindRenderbuffer(GL.RenderBuffer.TARGET, glBuffer); }\n    static unbind() { this.bindBuffer(null); }\n}\n/**\n * A RenderBuffer for doing antialiasing (multisampling).\n * @internal\n */\nexport class RenderBufferMultiSample {\n    get bytesUsed() { return this._bytesUsed; }\n    get width() { return this._width; }\n    get height() { return this._height; }\n    get isDirty() { return this._isDirty; }\n    markBufferDirty(dirty) {\n        this._isDirty = dirty;\n    }\n    getHandle() { return this._glBuffer; }\n    static create(width, height, format, numSamples) {\n        const gl = System.instance.context;\n        const glBuffer = gl.createRenderbuffer();\n        if (null === glBuffer)\n            return undefined;\n        assert(0 < width && 0 < height);\n        RenderBufferMultiSample.bindBuffer(glBuffer);\n        gl.renderbufferStorageMultisample(GL.RenderBuffer.TARGET, numSamples, format, width, height);\n        RenderBufferMultiSample.unbind();\n        return new RenderBufferMultiSample(glBuffer, width, height, computeBytesUsed(width, height, format, numSamples));\n    }\n    get isDisposed() { return this._glBuffer === undefined || this._glBuffer === null; }\n    dispose() {\n        if (!this.isDisposed) {\n            System.instance.context.deleteRenderbuffer(this._glBuffer);\n            this._glBuffer = undefined;\n        }\n    }\n    bind() {\n        assert(undefined !== this._glBuffer);\n        if (undefined !== this._glBuffer) {\n            RenderBufferMultiSample.bindBuffer(this._glBuffer);\n        }\n    }\n    constructor(glBuffer, width, height, bytesUsed) {\n        this._bytesUsed = 0;\n        this._isDirty = false;\n        this._glBuffer = glBuffer;\n        this._bytesUsed = bytesUsed;\n        this._width = width;\n        this._height = height;\n    }\n    static bindBuffer(glBuffer) { System.instance.context.bindRenderbuffer(GL.RenderBuffer.TARGET, glBuffer); }\n    static unbind() { this.bindBuffer(null); }\n}\n//# sourceMappingURL=RenderBuffer.js.map",
      "start": 1693508124533,
      "end": 1693508124623,
      "sourcemaps": null
    }
  ]
}
