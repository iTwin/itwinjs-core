{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/UiManager.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport {\r\n  XAndY,\r\n} from \"@itwin/core-geometry\";\r\nimport {\r\n  AbstractToolbarProps,\r\n  ActionButton,\r\n  CommonToolbarItem,\r\n  OnCancelFunc,\r\n  OnItemExecutedFunc,\r\n  RelativePosition,\r\n  UiAdmin,\r\n} from \"@itwin/appui-abstract\";\r\nimport {\r\n  IModelApp,\r\n} from \"@itwin/core-frontend\";\r\nimport {\r\n  Window,\r\n  WindowProps,\r\n} from \"./Window\";\r\nimport { Surface } from \"./Surface\";\r\n\r\ninterface ToolbarWindowProps extends WindowProps {\r\n  items: CommonToolbarItem[];\r\n  onItemExecuted: OnItemExecutedFunc;\r\n}\r\n\r\nclass ToolbarWindow extends Window {\r\n  public override get isCloseable() { return false; }\r\n  public get windowId() { return \"toolbar\"; }\r\n\r\n  public constructor(surface: Surface, props: ToolbarWindowProps) {\r\n    super(surface, props);\r\n    surface.element.appendChild(this.container);\r\n    this.setHeaderVisible(false);\r\n\r\n    const content = IModelApp.makeHTMLElement(\"div\", { className: \"popup-toolbar\" });\r\n    const items = [...props.items];\r\n    items.sort((a, b) => a.itemPriority - b.itemPriority);\r\n\r\n    for (const item of items) {\r\n      const button = item as ActionButton;\r\n      if (undefined === button.execute || true === item.isHidden)\r\n        continue; // GroupButton, CustomButtonDefinition...\r\n\r\n      const span = IModelApp.makeHTMLElement(\"span\", { className: \"icon\" });\r\n      span.style.fontSize = \"35px\";\r\n      if (typeof item.icon === \"string\")\r\n        span.classList.add(item.icon);\r\n\r\n      const div = IModelApp.makeHTMLElement(\"div\", { className: \"popup-toolbar-button\" });\r\n      if (typeof item.label === \"string\")\r\n        div.title = item.label;\r\n\r\n      if (true === item.isDisabled)\r\n        div.style.opacity = \"50%\";\r\n\r\n      div.addEventListener(\"click\", (_) => {\r\n        button.execute();\r\n        props.onItemExecuted(item);\r\n      });\r\n\r\n      div.appendChild(span);\r\n      content.appendChild(div);\r\n    }\r\n\r\n    this.contentDiv.appendChild(content);\r\n\r\n    const w = content.clientWidth + 2;\r\n    const h = content.clientHeight;\r\n    this._header.resizeContent(w, h);\r\n  }\r\n}\r\n\r\nexport class UiManager extends UiAdmin {\r\n  public override get cursorPosition(): XAndY {\r\n    return super.cursorPosition;\r\n  }\r\n\r\n  public override showToolbar(tbProps: AbstractToolbarProps, location: XAndY, offset: XAndY, onItemExecuted: OnItemExecutedFunc, _onCancel: OnCancelFunc, _relPos?: RelativePosition, _elem?: HTMLElement): boolean {\r\n    const surface = Surface.instance;\r\n    if (undefined !== surface.findWindowById(\"toolbar\"))\r\n      return false;\r\n\r\n    const props = {\r\n      onItemExecuted,\r\n      items: tbProps.items,\r\n      title: \"Toolbar\",\r\n      top: location.y + offset.y,\r\n      left: location.x + offset.x,\r\n      width: 456,\r\n      height: 123,\r\n    };\r\n\r\n    const win = new ToolbarWindow(surface, props);\r\n    surface.addWindow(win);\r\n    surface.togglePin(win);\r\n    return true;\r\n  }\r\n\r\n  public override hideToolbar(): boolean {\r\n    const window = Surface.instance.findWindowById(\"toolbar\");\r\n    if (undefined === window)\r\n      return false;\r\n\r\n    Surface.instance.forceClose(window);\r\n    return true;\r\n  }\r\n}\r\n",
      "start": 1693508121253,
      "end": 1693508121315,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport {\n  UiAdmin\n} from \"@itwin/appui-abstract\";\nimport {\n  IModelApp\n} from \"@itwin/core-frontend\";\nimport {\n  Window\n} from \"./Window\";\nimport { Surface } from \"./Surface\";\nclass ToolbarWindow extends Window {\n  get isCloseable() {\n    return false;\n  }\n  get windowId() {\n    return \"toolbar\";\n  }\n  constructor(surface, props) {\n    super(surface, props);\n    surface.element.appendChild(this.container);\n    this.setHeaderVisible(false);\n    const content = IModelApp.makeHTMLElement(\"div\", { className: \"popup-toolbar\" });\n    const items = [...props.items];\n    items.sort((a, b) => a.itemPriority - b.itemPriority);\n    for (const item of items) {\n      const button = item;\n      if (void 0 === button.execute || true === item.isHidden)\n        continue;\n      const span = IModelApp.makeHTMLElement(\"span\", { className: \"icon\" });\n      span.style.fontSize = \"35px\";\n      if (typeof item.icon === \"string\")\n        span.classList.add(item.icon);\n      const div = IModelApp.makeHTMLElement(\"div\", { className: \"popup-toolbar-button\" });\n      if (typeof item.label === \"string\")\n        div.title = item.label;\n      if (true === item.isDisabled)\n        div.style.opacity = \"50%\";\n      div.addEventListener(\"click\", (_) => {\n        button.execute();\n        props.onItemExecuted(item);\n      });\n      div.appendChild(span);\n      content.appendChild(div);\n    }\n    this.contentDiv.appendChild(content);\n    const w = content.clientWidth + 2;\n    const h = content.clientHeight;\n    this._header.resizeContent(w, h);\n  }\n}\nexport class UiManager extends UiAdmin {\n  get cursorPosition() {\n    return super.cursorPosition;\n  }\n  showToolbar(tbProps, location, offset, onItemExecuted, _onCancel, _relPos, _elem) {\n    const surface = Surface.instance;\n    if (void 0 !== surface.findWindowById(\"toolbar\"))\n      return false;\n    const props = {\n      onItemExecuted,\n      items: tbProps.items,\n      title: \"Toolbar\",\n      top: location.y + offset.y,\n      left: location.x + offset.x,\n      width: 456,\n      height: 123\n    };\n    const win = new ToolbarWindow(surface, props);\n    surface.addWindow(win);\n    surface.togglePin(win);\n    return true;\n  }\n  hideToolbar() {\n    const window = Surface.instance.findWindowById(\"toolbar\");\n    if (void 0 === window)\n      return false;\n    Surface.instance.forceClose(window);\n    return true;\n  }\n}\n",
      "start": 1693508121315,
      "end": 1693508121469,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/UiManager.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport {\r\n  XAndY,\r\n} from \"@itwin/core-geometry\";\r\nimport {\r\n  AbstractToolbarProps,\r\n  ActionButton,\r\n  CommonToolbarItem,\r\n  OnCancelFunc,\r\n  OnItemExecutedFunc,\r\n  RelativePosition,\r\n  UiAdmin,\r\n} from \"@itwin/appui-abstract\";\r\nimport {\r\n  IModelApp,\r\n} from \"@itwin/core-frontend\";\r\nimport {\r\n  Window,\r\n  WindowProps,\r\n} from \"./Window\";\r\nimport { Surface } from \"./Surface\";\r\n\r\ninterface ToolbarWindowProps extends WindowProps {\r\n  items: CommonToolbarItem[];\r\n  onItemExecuted: OnItemExecutedFunc;\r\n}\r\n\r\nclass ToolbarWindow extends Window {\r\n  public override get isCloseable() { return false; }\r\n  public get windowId() { return \"toolbar\"; }\r\n\r\n  public constructor(surface: Surface, props: ToolbarWindowProps) {\r\n    super(surface, props);\r\n    surface.element.appendChild(this.container);\r\n    this.setHeaderVisible(false);\r\n\r\n    const content = IModelApp.makeHTMLElement(\"div\", { className: \"popup-toolbar\" });\r\n    const items = [...props.items];\r\n    items.sort((a, b) => a.itemPriority - b.itemPriority);\r\n\r\n    for (const item of items) {\r\n      const button = item as ActionButton;\r\n      if (undefined === button.execute || true === item.isHidden)\r\n        continue; // GroupButton, CustomButtonDefinition...\r\n\r\n      const span = IModelApp.makeHTMLElement(\"span\", { className: \"icon\" });\r\n      span.style.fontSize = \"35px\";\r\n      if (typeof item.icon === \"string\")\r\n        span.classList.add(item.icon);\r\n\r\n      const div = IModelApp.makeHTMLElement(\"div\", { className: \"popup-toolbar-button\" });\r\n      if (typeof item.label === \"string\")\r\n        div.title = item.label;\r\n\r\n      if (true === item.isDisabled)\r\n        div.style.opacity = \"50%\";\r\n\r\n      div.addEventListener(\"click\", (_) => {\r\n        button.execute();\r\n        props.onItemExecuted(item);\r\n      });\r\n\r\n      div.appendChild(span);\r\n      content.appendChild(div);\r\n    }\r\n\r\n    this.contentDiv.appendChild(content);\r\n\r\n    const w = content.clientWidth + 2;\r\n    const h = content.clientHeight;\r\n    this._header.resizeContent(w, h);\r\n  }\r\n}\r\n\r\nexport class UiManager extends UiAdmin {\r\n  public override get cursorPosition(): XAndY {\r\n    return super.cursorPosition;\r\n  }\r\n\r\n  public override showToolbar(tbProps: AbstractToolbarProps, location: XAndY, offset: XAndY, onItemExecuted: OnItemExecutedFunc, _onCancel: OnCancelFunc, _relPos?: RelativePosition, _elem?: HTMLElement): boolean {\r\n    const surface = Surface.instance;\r\n    if (undefined !== surface.findWindowById(\"toolbar\"))\r\n      return false;\r\n\r\n    const props = {\r\n      onItemExecuted,\r\n      items: tbProps.items,\r\n      title: \"Toolbar\",\r\n      top: location.y + offset.y,\r\n      left: location.x + offset.x,\r\n      width: 456,\r\n      height: 123,\r\n    };\r\n\r\n    const win = new ToolbarWindow(surface, props);\r\n    surface.addWindow(win);\r\n    surface.togglePin(win);\r\n    return true;\r\n  }\r\n\r\n  public override hideToolbar(): boolean {\r\n    const window = Surface.instance.findWindowById(\"toolbar\");\r\n    if (undefined === window)\r\n      return false;\r\n\r\n    Surface.instance.forceClose(window);\r\n    return true;\r\n  }\r\n}\r\n"
        ],
        "mappings": ";AAQA;AAAA,EAOE;AAAA,OACK;AACP;AAAA,EACE;AAAA,OACK;AACP;AAAA,EACE;AAAA,OAEK;AACP,SAAS,eAAe;AAOxB,MAAM,sBAAsB,OAAO;AAAA,EACjC,IAAoB,cAAc;AAAE,WAAO;AAAA,EAAO;AAAA,EAClD,IAAW,WAAW;AAAE,WAAO;AAAA,EAAW;AAAA,EAEnC,YAAY,SAAkB,OAA2B;AAC9D,UAAM,SAAS,KAAK;AACpB,YAAQ,QAAQ,YAAY,KAAK,SAAS;AAC1C,SAAK,iBAAiB,KAAK;AAE3B,UAAM,UAAU,UAAU,gBAAgB,OAAO,EAAE,WAAW,gBAAgB,CAAC;AAC/E,UAAM,QAAQ,CAAC,GAAG,MAAM,KAAK;AAC7B,UAAM,KAAK,CAAC,GAAG,MAAM,EAAE,eAAe,EAAE,YAAY;AAEpD,eAAW,QAAQ,OAAO;AACxB,YAAM,SAAS;AACf,UAAI,WAAc,OAAO,WAAW,SAAS,KAAK;AAChD;AAEF,YAAM,OAAO,UAAU,gBAAgB,QAAQ,EAAE,WAAW,OAAO,CAAC;AACpE,WAAK,MAAM,WAAW;AACtB,UAAI,OAAO,KAAK,SAAS;AACvB,aAAK,UAAU,IAAI,KAAK,IAAI;AAE9B,YAAM,MAAM,UAAU,gBAAgB,OAAO,EAAE,WAAW,uBAAuB,CAAC;AAClF,UAAI,OAAO,KAAK,UAAU;AACxB,YAAI,QAAQ,KAAK;AAEnB,UAAI,SAAS,KAAK;AAChB,YAAI,MAAM,UAAU;AAEtB,UAAI,iBAAiB,SAAS,CAAC,MAAM;AACnC,eAAO,QAAQ;AACf,cAAM,eAAe,IAAI;AAAA,MAC3B,CAAC;AAED,UAAI,YAAY,IAAI;AACpB,cAAQ,YAAY,GAAG;AAAA,IACzB;AAEA,SAAK,WAAW,YAAY,OAAO;AAEnC,UAAM,IAAI,QAAQ,cAAc;AAChC,UAAM,IAAI,QAAQ;AAClB,SAAK,QAAQ,cAAc,GAAG,CAAC;AAAA,EACjC;AACF;AAEO,aAAM,kBAAkB,QAAQ;AAAA,EACrC,IAAoB,iBAAwB;AAC1C,WAAO,MAAM;AAAA,EACf;AAAA,EAEgB,YAAY,SAA+B,UAAiB,QAAe,gBAAoC,WAAyB,SAA4B,OAA8B;AAChN,UAAM,UAAU,QAAQ;AACxB,QAAI,WAAc,QAAQ,eAAe,SAAS;AAChD,aAAO;AAET,UAAM,QAAQ;AAAA,MACZ;AAAA,MACA,OAAO,QAAQ;AAAA,MACf,OAAO;AAAA,MACP,KAAK,SAAS,IAAI,OAAO;AAAA,MACzB,MAAM,SAAS,IAAI,OAAO;AAAA,MAC1B,OAAO;AAAA,MACP,QAAQ;AAAA,IACV;AAEA,UAAM,MAAM,IAAI,cAAc,SAAS,KAAK;AAC5C,YAAQ,UAAU,GAAG;AACrB,YAAQ,UAAU,GAAG;AACrB,WAAO;AAAA,EACT;AAAA,EAEgB,cAAuB;AACrC,UAAM,SAAS,QAAQ,SAAS,eAAe,SAAS;AACxD,QAAI,WAAc;AAChB,aAAO;AAET,YAAQ,SAAS,WAAW,MAAM;AAClC,WAAO;AAAA,EACT;AACF;",
        "names": []
      }
    }
  ]
}
