{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/FileOpen.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { ProcessDetector } from \"@itwin/core-bentley\";\r\nimport { ElectronApp } from \"@itwin/core-electron/lib/cjs/ElectronFrontend\";\r\nimport { OpenDialogOptions } from \"electron\";\r\n\r\nexport interface BrowserFileSelector {\r\n  input: HTMLInputElement;\r\n  directory: string;\r\n}\r\n\r\nexport class MobileMessenger {\r\n  private static _anyWindow: any = window;\r\n\r\n  public static getHandler(handlerName: string): ((data: string) => any) | undefined {\r\n    const messageHandlers = ProcessDetector.isIOSAppFrontend ? this._anyWindow.webkit?.messageHandlers : this._anyWindow.DTA_Android;\r\n    if (!messageHandlers) {\r\n      console.log(\"No message handler found for this platform!\"); // eslint-disable-line no-console\r\n      return undefined;\r\n    }\r\n\r\n    const handler = messageHandlers[handlerName];\r\n    if (!handler) {\r\n      console.log(`No message handler found with name: ${handlerName}!`); // eslint-disable-line no-console\r\n      return undefined;\r\n    }\r\n\r\n    if (ProcessDetector.isIOSAppFrontend) {\r\n      return (data: string) => {\r\n        handler.postMessage(data);\r\n      };\r\n    } else {\r\n      return (data: string) => {\r\n        // Calling handler(data) here doesn't work for some reason, gives this error: \"Java bridge method can't be invoked on a non-injected object\"\r\n        this._anyWindow.DTA_Android[handlerName](data);\r\n      };\r\n    }\r\n  }\r\n\r\n  public static postMessage(handlerName: string, data: string): boolean {\r\n    const handler = this.getHandler(handlerName);\r\n    if (!handler)\r\n      return false;\r\n    handler(data);\r\n    return true;\r\n  }\r\n\r\n  public static async sendMessage(handlerName: string): Promise<string | undefined> {\r\n    const handler = this.getHandler(handlerName);\r\n    if (!handler)\r\n      return undefined;\r\n\r\n    // formulate unique name for the promise resolver and pass it to the native code as a parameter\r\n    const resolverName = `DTA_${handlerName}Resolver`;\r\n\r\n    // create a promise that will be resolved by native code (via js injection)\r\n    const messageResponse = new Promise<string | undefined>((resolve) => {\r\n      this._anyWindow[resolverName] = resolve;\r\n    });\r\n\r\n    handler(resolverName);\r\n    const result = await messageResponse;\r\n    delete this._anyWindow[resolverName];\r\n    return null !== result ? result : undefined;\r\n  }\r\n}\r\n\r\nexport async function selectFileName(selector: BrowserFileSelector | undefined): Promise<string | undefined> {\r\n  if (ProcessDetector.isElectronAppFrontend) {\r\n    const opts: OpenDialogOptions = {\r\n      properties: [\"openFile\"],\r\n      title: \"Open iModel\",\r\n      filters: [{ name: \"iModels\", extensions: [\"ibim\", \"bim\"] }],\r\n\r\n    };\r\n    const val = await ElectronApp.dialogIpc.showOpenDialog(opts);\r\n    return val.canceled ? undefined : val.filePaths[0];\r\n  }\r\n\r\n  if (ProcessDetector.isMobileAppFrontend) {\r\n    // send message to native code to open a model\r\n    const filename = await MobileMessenger.sendMessage(\"openModel\");\r\n    return filename;\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/unbound-method\r\n  if (undefined === selector || !document.createEvent) {\r\n    const filename = prompt(\"Enter absolute filename:\");\r\n    return null !== filename ? filename : undefined;\r\n  }\r\n\r\n  const evt = new MouseEvent(\"click\", { bubbles: true, cancelable: false });\r\n  selector.input.dispatchEvent(evt);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const handler = async () => {\r\n      selector.input.removeEventListener(\"change\", handler);\r\n      try {\r\n        const files = selector.input.files;\r\n        if (files && files.length > 0)\r\n          resolve(`${selector.directory}/${files[0].name}`);\r\n        else\r\n          resolve(undefined);\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    };\r\n\r\n    selector.input.addEventListener(\"change\", handler);\r\n  });\r\n}\r\n",
      "start": 1693508118379,
      "end": 1693508118556,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { ProcessDetector } from \"@itwin/core-bentley\";\nimport { ElectronApp } from \"@itwin/core-electron/lib/cjs/ElectronFrontend\";\nexport class MobileMessenger {\n  static getHandler(handlerName) {\n    const messageHandlers = ProcessDetector.isIOSAppFrontend ? this._anyWindow.webkit?.messageHandlers : this._anyWindow.DTA_Android;\n    if (!messageHandlers) {\n      console.log(\"No message handler found for this platform!\");\n      return void 0;\n    }\n    const handler = messageHandlers[handlerName];\n    if (!handler) {\n      console.log(`No message handler found with name: ${handlerName}!`);\n      return void 0;\n    }\n    if (ProcessDetector.isIOSAppFrontend) {\n      return (data) => {\n        handler.postMessage(data);\n      };\n    } else {\n      return (data) => {\n        this._anyWindow.DTA_Android[handlerName](data);\n      };\n    }\n  }\n  static postMessage(handlerName, data) {\n    const handler = this.getHandler(handlerName);\n    if (!handler)\n      return false;\n    handler(data);\n    return true;\n  }\n  static async sendMessage(handlerName) {\n    const handler = this.getHandler(handlerName);\n    if (!handler)\n      return void 0;\n    const resolverName = `DTA_${handlerName}Resolver`;\n    const messageResponse = new Promise((resolve) => {\n      this._anyWindow[resolverName] = resolve;\n    });\n    handler(resolverName);\n    const result = await messageResponse;\n    delete this._anyWindow[resolverName];\n    return null !== result ? result : void 0;\n  }\n}\nMobileMessenger._anyWindow = window;\nexport async function selectFileName(selector) {\n  if (ProcessDetector.isElectronAppFrontend) {\n    const opts = {\n      properties: [\"openFile\"],\n      title: \"Open iModel\",\n      filters: [{ name: \"iModels\", extensions: [\"ibim\", \"bim\"] }]\n    };\n    const val = await ElectronApp.dialogIpc.showOpenDialog(opts);\n    return val.canceled ? void 0 : val.filePaths[0];\n  }\n  if (ProcessDetector.isMobileAppFrontend) {\n    const filename = await MobileMessenger.sendMessage(\"openModel\");\n    return filename;\n  }\n  if (void 0 === selector || !document.createEvent) {\n    const filename = prompt(\"Enter absolute filename:\");\n    return null !== filename ? filename : void 0;\n  }\n  const evt = new MouseEvent(\"click\", { bubbles: true, cancelable: false });\n  selector.input.dispatchEvent(evt);\n  return new Promise((resolve, reject) => {\n    const handler = async () => {\n      selector.input.removeEventListener(\"change\", handler);\n      try {\n        const files = selector.input.files;\n        if (files && files.length > 0)\n          resolve(`${selector.directory}/${files[0].name}`);\n        else\n          resolve(void 0);\n      } catch (e) {\n        reject(e);\n      }\n    };\n    selector.input.addEventListener(\"change\", handler);\n  });\n}\n",
      "start": 1693508118556,
      "end": 1693508118676,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/FileOpen.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { ProcessDetector } from \"@itwin/core-bentley\";\r\nimport { ElectronApp } from \"@itwin/core-electron/lib/cjs/ElectronFrontend\";\r\nimport { OpenDialogOptions } from \"electron\";\r\n\r\nexport interface BrowserFileSelector {\r\n  input: HTMLInputElement;\r\n  directory: string;\r\n}\r\n\r\nexport class MobileMessenger {\r\n  private static _anyWindow: any = window;\r\n\r\n  public static getHandler(handlerName: string): ((data: string) => any) | undefined {\r\n    const messageHandlers = ProcessDetector.isIOSAppFrontend ? this._anyWindow.webkit?.messageHandlers : this._anyWindow.DTA_Android;\r\n    if (!messageHandlers) {\r\n      console.log(\"No message handler found for this platform!\"); // eslint-disable-line no-console\r\n      return undefined;\r\n    }\r\n\r\n    const handler = messageHandlers[handlerName];\r\n    if (!handler) {\r\n      console.log(`No message handler found with name: ${handlerName}!`); // eslint-disable-line no-console\r\n      return undefined;\r\n    }\r\n\r\n    if (ProcessDetector.isIOSAppFrontend) {\r\n      return (data: string) => {\r\n        handler.postMessage(data);\r\n      };\r\n    } else {\r\n      return (data: string) => {\r\n        // Calling handler(data) here doesn't work for some reason, gives this error: \"Java bridge method can't be invoked on a non-injected object\"\r\n        this._anyWindow.DTA_Android[handlerName](data);\r\n      };\r\n    }\r\n  }\r\n\r\n  public static postMessage(handlerName: string, data: string): boolean {\r\n    const handler = this.getHandler(handlerName);\r\n    if (!handler)\r\n      return false;\r\n    handler(data);\r\n    return true;\r\n  }\r\n\r\n  public static async sendMessage(handlerName: string): Promise<string | undefined> {\r\n    const handler = this.getHandler(handlerName);\r\n    if (!handler)\r\n      return undefined;\r\n\r\n    // formulate unique name for the promise resolver and pass it to the native code as a parameter\r\n    const resolverName = `DTA_${handlerName}Resolver`;\r\n\r\n    // create a promise that will be resolved by native code (via js injection)\r\n    const messageResponse = new Promise<string | undefined>((resolve) => {\r\n      this._anyWindow[resolverName] = resolve;\r\n    });\r\n\r\n    handler(resolverName);\r\n    const result = await messageResponse;\r\n    delete this._anyWindow[resolverName];\r\n    return null !== result ? result : undefined;\r\n  }\r\n}\r\n\r\nexport async function selectFileName(selector: BrowserFileSelector | undefined): Promise<string | undefined> {\r\n  if (ProcessDetector.isElectronAppFrontend) {\r\n    const opts: OpenDialogOptions = {\r\n      properties: [\"openFile\"],\r\n      title: \"Open iModel\",\r\n      filters: [{ name: \"iModels\", extensions: [\"ibim\", \"bim\"] }],\r\n\r\n    };\r\n    const val = await ElectronApp.dialogIpc.showOpenDialog(opts);\r\n    return val.canceled ? undefined : val.filePaths[0];\r\n  }\r\n\r\n  if (ProcessDetector.isMobileAppFrontend) {\r\n    // send message to native code to open a model\r\n    const filename = await MobileMessenger.sendMessage(\"openModel\");\r\n    return filename;\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/unbound-method\r\n  if (undefined === selector || !document.createEvent) {\r\n    const filename = prompt(\"Enter absolute filename:\");\r\n    return null !== filename ? filename : undefined;\r\n  }\r\n\r\n  const evt = new MouseEvent(\"click\", { bubbles: true, cancelable: false });\r\n  selector.input.dispatchEvent(evt);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const handler = async () => {\r\n      selector.input.removeEventListener(\"change\", handler);\r\n      try {\r\n        const files = selector.input.files;\r\n        if (files && files.length > 0)\r\n          resolve(`${selector.directory}/${files[0].name}`);\r\n        else\r\n          resolve(undefined);\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    };\r\n\r\n    selector.input.addEventListener(\"change\", handler);\r\n  });\r\n}\r\n"
        ],
        "mappings": ";AAKA,SAAS,uBAAuB;AAChC,SAAS,mBAAmB;AAQrB,aAAM,gBAAgB;AAAA,EAG3B,OAAc,WAAW,aAA0D;AACjF,UAAM,kBAAkB,gBAAgB,mBAAmB,KAAK,WAAW,QAAQ,kBAAkB,KAAK,WAAW;AACrH,QAAI,CAAC,iBAAiB;AACpB,cAAQ,IAAI,6CAA6C;AACzD,aAAO;AAAA,IACT;AAEA,UAAM,UAAU,gBAAgB,WAAW;AAC3C,QAAI,CAAC,SAAS;AACZ,cAAQ,IAAI,uCAAuC,WAAW,GAAG;AACjE,aAAO;AAAA,IACT;AAEA,QAAI,gBAAgB,kBAAkB;AACpC,aAAO,CAAC,SAAiB;AACvB,gBAAQ,YAAY,IAAI;AAAA,MAC1B;AAAA,IACF,OAAO;AACL,aAAO,CAAC,SAAiB;AAEvB,aAAK,WAAW,YAAY,WAAW,EAAE,IAAI;AAAA,MAC/C;AAAA,IACF;AAAA,EACF;AAAA,EAEA,OAAc,YAAY,aAAqB,MAAuB;AACpE,UAAM,UAAU,KAAK,WAAW,WAAW;AAC3C,QAAI,CAAC;AACH,aAAO;AACT,YAAQ,IAAI;AACZ,WAAO;AAAA,EACT;AAAA,EAEA,aAAoB,YAAY,aAAkD;AAChF,UAAM,UAAU,KAAK,WAAW,WAAW;AAC3C,QAAI,CAAC;AACH,aAAO;AAGT,UAAM,eAAe,OAAO,WAAW;AAGvC,UAAM,kBAAkB,IAAI,QAA4B,CAAC,YAAY;AACnE,WAAK,WAAW,YAAY,IAAI;AAAA,IAClC,CAAC;AAED,YAAQ,YAAY;AACpB,UAAM,SAAS,MAAM;AACrB,WAAO,KAAK,WAAW,YAAY;AACnC,WAAO,SAAS,SAAS,SAAS;AAAA,EACpC;AACF;AAtDa,gBACI,aAAkB;AAuDnC,sBAAsB,eAAe,UAAwE;AAC3G,MAAI,gBAAgB,uBAAuB;AACzC,UAAM,OAA0B;AAAA,MAC9B,YAAY,CAAC,UAAU;AAAA,MACvB,OAAO;AAAA,MACP,SAAS,CAAC,EAAE,MAAM,WAAW,YAAY,CAAC,QAAQ,KAAK,EAAE,CAAC;AAAA,IAE5D;AACA,UAAM,MAAM,MAAM,YAAY,UAAU,eAAe,IAAI;AAC3D,WAAO,IAAI,WAAW,SAAY,IAAI,UAAU,CAAC;AAAA,EACnD;AAEA,MAAI,gBAAgB,qBAAqB;AAEvC,UAAM,WAAW,MAAM,gBAAgB,YAAY,WAAW;AAC9D,WAAO;AAAA,EACT;AAGA,MAAI,WAAc,YAAY,CAAC,SAAS,aAAa;AACnD,UAAM,WAAW,OAAO,0BAA0B;AAClD,WAAO,SAAS,WAAW,WAAW;AAAA,EACxC;AAEA,QAAM,MAAM,IAAI,WAAW,SAAS,EAAE,SAAS,MAAM,YAAY,MAAM,CAAC;AACxE,WAAS,MAAM,cAAc,GAAG;AAEhC,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,UAAM,UAAU,YAAY;AAC1B,eAAS,MAAM,oBAAoB,UAAU,OAAO;AACpD,UAAI;AACF,cAAM,QAAQ,SAAS,MAAM;AAC7B,YAAI,SAAS,MAAM,SAAS;AAC1B,kBAAQ,GAAG,SAAS,SAAS,IAAI,MAAM,CAAC,EAAE,IAAI,EAAE;AAAA;AAEhD,kBAAQ,MAAS;AAAA,MACrB,SAAS,GAAG;AACV,eAAO,CAAC;AAAA,MACV;AAAA,IACF;AAEA,aAAS,MAAM,iBAAiB,UAAU,OAAO;AAAA,EACnD,CAAC;AACH;",
        "names": []
      }
    }
  ]
}
