{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend-devtools/lib/esm/effects/Vignette.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Effects\n */\nimport { Tool, UniformType, VaryingType } from \"@itwin/core-frontend\";\nimport { parseArgs } from \"../tools/parseArgs\";\nimport { AddEffectTool, refreshViewportsForEffect } from \"./EffectTools\";\n/** Applies a [vignette](https://en.wikipedia.org/wiki/Vignetting) effect to the viewport.\n * From https://github.com/TyLindberg/glsl-vignette/blob/master/advanced.glsl.\n * @beta\n */\nclass VignetteEffect extends AddEffectTool {\n    get effectName() { return \"Vignette\"; }\n    get textureCoordFromPosition() { return true; }\n    get source() {\n        return {\n            vertex: `\r\n        void effectMain(vec4 pos) {\r\n          v_texCoord = textureCoordFromPosition(pos);\r\n        }\r\n      `,\n            fragment: `\r\n        float sdSquare(vec2 point, float width) {\r\n          vec2 d = abs(point) - width;\r\n          return min(max(d.x,d.y),0.0) + length(max(d,0.0));\r\n        }\r\n\r\n        float vignette(vec2 uv, vec2 size, float roundness, float smoothness) {\r\n          // Center UVs\r\n          uv -= 0.5;\r\n\r\n          // Shift UVs based on the larger of width or height\r\n          float minWidth = min(size.x, size.y);\r\n          uv.x = sign(uv.x) * clamp(abs(uv.x) - abs(minWidth - size.x), 0.0, 1.0);\r\n          uv.y = sign(uv.y) * clamp(abs(uv.y) - abs(minWidth - size.y), 0.0, 1.0);\r\n\r\n          // Signed distance calculation\r\n          float boxSize = minWidth * (1.0 - roundness);\r\n          float dist = sdSquare(uv, boxSize) - (minWidth * roundness);\r\n\r\n          return 1.0 - smoothstep(0.0, smoothness, dist);\r\n        }\r\n\r\n        vec4 effectMain() {\r\n          return TEXTURE(u_diffuse, v_texCoord) * vignette(v_texCoord, u_size, u_roundness, u_smoothness);\r\n        }\r\n      `,\n        };\n    }\n    defineEffect(builder) {\n        builder.addVarying(\"v_texCoord\", VaryingType.Vec2);\n        builder.addUniform({\n            name: \"u_size\",\n            type: UniformType.Vec2,\n            bind: (uniform) => uniform.setUniform2fv(VignetteConfig.size),\n        });\n        builder.addUniform({\n            name: \"u_roundness\",\n            type: UniformType.Float,\n            bind: (uniform) => uniform.setUniform1f(VignetteConfig.roundness),\n        });\n        builder.addUniform({\n            name: \"u_smoothness\",\n            type: UniformType.Float,\n            bind: (uniform) => uniform.setUniform1f(VignetteConfig.smoothness),\n        });\n    }\n}\nVignetteEffect.toolId = \"VignetteEffect\";\nexport { VignetteEffect };\n/** Configures the [[VignetteEffect]].\n * @beta\n */\nclass VignetteConfig extends Tool {\n    static get minArgs() { return 0; }\n    static get maxArgs() { return 4; }\n    async run(width, height, roundness, smoothness) {\n        const config = VignetteConfig;\n        config.size[0] = width ?? config.size[0];\n        config.size[1] = height ?? config.size[1];\n        config.roundness = roundness ?? config.roundness;\n        config.smoothness = smoothness ?? config.smoothness;\n        refreshViewportsForEffect(\"fdt Vignette\");\n        return true;\n    }\n    async parseAndRun(...input) {\n        const args = parseArgs(input);\n        return this.run(args.getFloat(\"w\"), args.getFloat(\"h\"), args.getFloat(\"r\"), args.getFloat(\"s\"));\n    }\n}\nVignetteConfig.toolId = \"VignetteConfig\";\n/** Size of the vignette in the form (width/2, height/2). e.g., to make the vignette start fading in halfway between the center and edges of\n * UV space, use (0.25, 0.25).\n */\nVignetteConfig.size = new Float32Array([0.25, 0.25]);\n/** How round the vignette will be, from 0.0 (perfectly rectangular) to 1.0 (perfectly round). */\nVignetteConfig.roundness = 1.0;\n/** How quickly the vignette fades in. The vignette starts fading in at the edge of the values provided by `size` and will be\n * fully faded in at (size.x + smoothness, size.y * smoothness). A value of 0.0 produces a hard edge.\n */\nVignetteConfig.smoothness = 0.5;\nexport { VignetteConfig };\n//# sourceMappingURL=Vignette.js.map",
      "start": 1693508122610,
      "end": 1693508122712,
      "sourcemaps": null
    }
  ]
}
