{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/SectionTools.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { BeEvent } from \"@itwin/core-bentley\";\r\nimport { createButton, createComboBox } from \"@itwin/frontend-devtools\";\r\nimport { ClipPlane, ClipPrimitive, ClipVector, ConvexClipPlaneSet, Point3d, Vector3d } from \"@itwin/core-geometry\";\r\nimport { ModelClipGroup, ModelClipGroups } from \"@itwin/core-common\";\r\nimport { AccuDrawHintBuilder, IModelApp, ScreenViewport, ViewClipDecorationProvider, Viewport } from \"@itwin/core-frontend\";\r\nimport { ToolBarDropDown } from \"./ToolBar\";\r\nimport { ViewClipByElementGeometryTool } from \"./ViewClipByElementGeometryTool\";\r\n\r\nfunction setFocusToHome(): void {\r\n  const element = document.activeElement as HTMLElement;\r\n  if (element && element !== document.body) {\r\n    element.blur();\r\n    document.body.focus();\r\n  }\r\n}\r\n\r\nexport class SectionsPanel extends ToolBarDropDown {\r\n  private readonly _vp: ScreenViewport;\r\n  private readonly _element: HTMLElement;\r\n  private _toolName = \"ViewClip.ByPlane\";\r\n\r\n  public constructor(vp: ScreenViewport, parent: HTMLElement) {\r\n    super();\r\n    this._vp = vp;\r\n    this._element = IModelApp.makeHTMLElement(\"div\", { className: \"toolMenu\", parent });\r\n    this._element.style.cssFloat = \"left\";\r\n    this._element.style.display = \"block\";\r\n\r\n    createComboBox({\r\n      parent: this._element,\r\n      id: \"section_Type\",\r\n      name: \"Clip type: \",\r\n      value: this._toolName,\r\n      handler: (select: HTMLSelectElement) => this._toolName = select.value,\r\n      entries: [\r\n        { name: \"Plane\", value: \"ViewClip.ByPlane\" },\r\n        { name: \"Range\", value: \"ViewClip.ByRange\" },\r\n        { name: \"Element\", value: \"ViewClip.ByElement\" },\r\n        { name: \"Shape\", value: \"ViewClip.ByShape\" },\r\n        { name: \"Geometry\", value: ViewClipByElementGeometryTool.toolId },\r\n      ],\r\n    });\r\n\r\n    const div = IModelApp.makeHTMLElement(\"div\", { parent: this._element });\r\n    div.style.textAlign = \"center\";\r\n    createButton({\r\n      value: \"Define\",\r\n      handler: async () => {\r\n        await IModelApp.tools.run(this._toolName, ViewClipDecorationProvider.create());\r\n        setFocusToHome();\r\n      },\r\n      parent: div,\r\n      inline: true,\r\n      tooltip: \"Define clip\",\r\n    });\r\n    createButton({\r\n      value: \"Edit\",\r\n      handler: async () => ViewClipDecorationProvider.create().toggleDecoration(this._vp),\r\n      parent: div,\r\n      inline: true,\r\n      tooltip: \"Show clip edit handles\",\r\n    });\r\n    createButton({\r\n      value: \"Clear\",\r\n      handler: async () => IModelApp.tools.run(\"ViewClip.Clear\", ViewClipDecorationProvider.create()),\r\n      parent: div,\r\n      inline: true,\r\n      tooltip: \"Clear clips\",\r\n    });\r\n\r\n    let negate = false;\r\n    createButton({\r\n      value: \"Add Panel\",\r\n      handler: () => {\r\n        // Add Clip Model Group UI\r\n        const props: DividingLineProps = {\r\n          sideL: vp.getClientRect().width / 2,\r\n          bounds: vp.getClientRect(),\r\n          buffer: 10,\r\n          parent: vp.canvas.parentElement!,\r\n          onDragged: (left, _right) => ModelClipTool.applyModelClipping(vp, new Point3d(left, (vp.getClientRect().height / 2), 0), negate),\r\n        };\r\n        const divider = new TwoPanelDivider(props);\r\n        divider.dividerElem.style.zIndex = \"10\";\r\n      },\r\n      parent: div,\r\n      inline: false,\r\n      tooltip: \"Add Panels\",\r\n    });\r\n    createButton({\r\n      value: \"Negate Plane\",\r\n      handler: () => { negate = !negate; },\r\n      parent: div,\r\n      inline: true,\r\n      tooltip: \"Negate Plane\",\r\n    });\r\n  }\r\n\r\n  protected _open(): void { this._element.style.display = \"block\"; }\r\n  protected _close(): void { this._element.style.display = \"none\"; }\r\n  public get isOpen(): boolean { return \"block\" === this._element.style.display; }\r\n}\r\n\r\nclass ModelClipTool {\r\n  private static _leftModels: string[] = [];\r\n  private static _rightModels: string[] = [];\r\n  public static applyModelClipping(vp: Viewport, clipPoint: Point3d, negate: boolean): void {\r\n    const view = vp.view;\r\n    if (!view || !view.isSpatialView())\r\n      return;\r\n    const createClip = (vector: Vector3d, p: Point3d) => {\r\n      const plane = ClipPlane.createNormalAndPoint(vector, p)!;\r\n      const planes = ConvexClipPlaneSet.createPlanes([plane]);\r\n      const primitive = ClipPrimitive.createCapture(planes);\r\n      return ClipVector.createCapture([primitive]);\r\n    };\r\n\r\n    let point = clipPoint.clone();\r\n    point = vp.viewToWorld(point);\r\n\r\n    const boresite = AccuDrawHintBuilder.getBoresite(point, vp);\r\n    const viewY = vp.rotation.rowY();\r\n    let normal = viewY.crossProduct(boresite.direction);\r\n\r\n    let left = true;\r\n    if (this._leftModels.length === 0 && this._rightModels.length === 0)\r\n      view.modelSelector.models.forEach((id) => {\r\n        (left ? this._leftModels : this._rightModels).push(id);\r\n        left = !left;\r\n      });\r\n    if (negate)\r\n      normal = normal.negate();\r\n\r\n    view.details.modelClipGroups = new ModelClipGroups([\r\n      ModelClipGroup.create(createClip(normal, point), this._rightModels),\r\n      ModelClipGroup.create(createClip(normal.negate(), point), this._leftModels),\r\n    ]);\r\n\r\n    vp.invalidateScene();\r\n  }\r\n}\r\n\r\nexport interface DividingLineProps {\r\n  bounds: DOMRect;\r\n  onDragged?: (leftPanelWidth: number, rightPanelWidth: number) => void;\r\n  buffer?: number;\r\n  sideL?: number;\r\n  sideR?: number;\r\n  parent?: HTMLElement;\r\n  id?: string;\r\n}\r\n\r\nexport class TwoPanelDivider {\r\n  private limitToBounds(n: number): number {\r\n    n = Math.min(n, this._bounds.right - (this.dividerElem.clientWidth + this._buffer));\r\n    n = Math.max(n, this._bounds.left + this._buffer);\r\n    return n;\r\n  }\r\n\r\n  private _buffer: number;\r\n  private _bounds: DOMRect;\r\n  private _oldPosition: number = 0;\r\n\r\n  public dividerElem: HTMLElement;\r\n  public onDraggedEvent: BeEvent<(leftPanelWidth: number, rightPanelWidth: number) => void>;\r\n\r\n  public setDivider(left: number): void {\r\n    this.dividerElem.style.left = `${left}px`;\r\n  }\r\n\r\n  public updateBounds(rect: DOMRect): void {\r\n    this.dividerElem.style.top = `${rect.top}px`;\r\n    this.dividerElem.style.height = `${rect.height}px`;\r\n  }\r\n\r\n  constructor(props: DividingLineProps) {\r\n    this._bounds = props.bounds;\r\n    this._buffer = undefined === props.buffer ? 0 : props.buffer;\r\n    this.onDraggedEvent = new BeEvent<(leftPanelWidth: number, rightPanelWidth: number) => void>();\r\n\r\n    let left: number;\r\n    if (undefined !== props.sideL)\r\n      left = props.sideL;\r\n    else if (undefined !== props.sideR)\r\n      left = props.bounds.width - props.sideR;\r\n    else\r\n      left = props.bounds.width / 2;\r\n\r\n    this.dividerElem = IModelApp.makeHTMLElement(\"div\");\r\n    this.dividerElem.setAttribute(\"style\", \"width: 4px; position: fixed; display: flex; background-color: #f1f1f1; border: 1px solid #d3d3d3; /*dde0e3*/ pointer-events: visible;\");\r\n\r\n    if (props.id !== undefined)\r\n      this.dividerElem.id = props.id;\r\n\r\n    this.updateBounds(this._bounds);\r\n    this.setDivider(left);\r\n    this.dividerElem.onmousedown = this._mouseDownDraggable;\r\n    if (props.parent)\r\n      props.parent.appendChild(this.dividerElem);\r\n\r\n    const handle = IModelApp.makeHTMLElement(\"div\");\r\n    handle.setAttribute(\"style\", \"position: relative;  box-shadow: 0px 1px 5px 0px rgba(0, 0, 0, 0.25);  left: -10px;  padding: 12px;  height: 32px;  border-radius: 1.5px;  cursor: col-resize;  align-self: center;  background-color: #69ade3; /* dde0e3 */  /* dots c8ccd0*/  color: #fff;\");\r\n    this.dividerElem.appendChild(handle);\r\n\r\n    if (props.onDragged)\r\n      this.onDraggedEvent.addListener(props.onDragged);\r\n  }\r\n\r\n  private _mouseDownDraggable = (e: MouseEvent) => {\r\n    e.preventDefault();\r\n    document.addEventListener(\"mousemove\", this._mouseMoveDraggable);\r\n    document.addEventListener(\"mouseup\", this._mouseUpDraggable);\r\n    this._oldPosition = e.clientX;\r\n  };\r\n\r\n  private _mouseMoveDraggable = (e: MouseEvent) => {\r\n    e.preventDefault();\r\n    if (undefined === this.dividerElem)\r\n      return;\r\n\r\n    const newPosition = this.limitToBounds(this.dividerElem.offsetLeft - (this._oldPosition - e.clientX));\r\n    this._oldPosition = this.limitToBounds(e.clientX);\r\n\r\n    this.setDivider(newPosition);\r\n\r\n    const left = newPosition - this._bounds.left;\r\n    const right = this._bounds.right - left - this.dividerElem.clientWidth;\r\n    this.onDraggedEvent.raiseEvent(left, right);\r\n  };\r\n\r\n  private _mouseUpDraggable = (_e: MouseEvent) => {\r\n    document.removeEventListener(\"mousemove\", this._mouseMoveDraggable);\r\n    document.removeEventListener(\"mouseup\", this._mouseUpDraggable);\r\n  };\r\n}\r\n",
      "start": 1693508124580,
      "end": 1693508124719,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { BeEvent } from \"@itwin/core-bentley\";\nimport { createButton, createComboBox } from \"@itwin/frontend-devtools\";\nimport { ClipPlane, ClipPrimitive, ClipVector, ConvexClipPlaneSet, Point3d } from \"@itwin/core-geometry\";\nimport { ModelClipGroup, ModelClipGroups } from \"@itwin/core-common\";\nimport { AccuDrawHintBuilder, IModelApp, ViewClipDecorationProvider } from \"@itwin/core-frontend\";\nimport { ToolBarDropDown } from \"./ToolBar\";\nimport { ViewClipByElementGeometryTool } from \"./ViewClipByElementGeometryTool\";\nfunction setFocusToHome() {\n  const element = document.activeElement;\n  if (element && element !== document.body) {\n    element.blur();\n    document.body.focus();\n  }\n}\nexport class SectionsPanel extends ToolBarDropDown {\n  constructor(vp, parent) {\n    super();\n    this._toolName = \"ViewClip.ByPlane\";\n    this._vp = vp;\n    this._element = IModelApp.makeHTMLElement(\"div\", { className: \"toolMenu\", parent });\n    this._element.style.cssFloat = \"left\";\n    this._element.style.display = \"block\";\n    createComboBox({\n      parent: this._element,\n      id: \"section_Type\",\n      name: \"Clip type: \",\n      value: this._toolName,\n      handler: (select) => this._toolName = select.value,\n      entries: [\n        { name: \"Plane\", value: \"ViewClip.ByPlane\" },\n        { name: \"Range\", value: \"ViewClip.ByRange\" },\n        { name: \"Element\", value: \"ViewClip.ByElement\" },\n        { name: \"Shape\", value: \"ViewClip.ByShape\" },\n        { name: \"Geometry\", value: ViewClipByElementGeometryTool.toolId }\n      ]\n    });\n    const div = IModelApp.makeHTMLElement(\"div\", { parent: this._element });\n    div.style.textAlign = \"center\";\n    createButton({\n      value: \"Define\",\n      handler: async () => {\n        await IModelApp.tools.run(this._toolName, ViewClipDecorationProvider.create());\n        setFocusToHome();\n      },\n      parent: div,\n      inline: true,\n      tooltip: \"Define clip\"\n    });\n    createButton({\n      value: \"Edit\",\n      handler: async () => ViewClipDecorationProvider.create().toggleDecoration(this._vp),\n      parent: div,\n      inline: true,\n      tooltip: \"Show clip edit handles\"\n    });\n    createButton({\n      value: \"Clear\",\n      handler: async () => IModelApp.tools.run(\"ViewClip.Clear\", ViewClipDecorationProvider.create()),\n      parent: div,\n      inline: true,\n      tooltip: \"Clear clips\"\n    });\n    let negate = false;\n    createButton({\n      value: \"Add Panel\",\n      handler: () => {\n        const props = {\n          sideL: vp.getClientRect().width / 2,\n          bounds: vp.getClientRect(),\n          buffer: 10,\n          parent: vp.canvas.parentElement,\n          onDragged: (left, _right) => ModelClipTool.applyModelClipping(vp, new Point3d(left, vp.getClientRect().height / 2, 0), negate)\n        };\n        const divider = new TwoPanelDivider(props);\n        divider.dividerElem.style.zIndex = \"10\";\n      },\n      parent: div,\n      inline: false,\n      tooltip: \"Add Panels\"\n    });\n    createButton({\n      value: \"Negate Plane\",\n      handler: () => {\n        negate = !negate;\n      },\n      parent: div,\n      inline: true,\n      tooltip: \"Negate Plane\"\n    });\n  }\n  _open() {\n    this._element.style.display = \"block\";\n  }\n  _close() {\n    this._element.style.display = \"none\";\n  }\n  get isOpen() {\n    return \"block\" === this._element.style.display;\n  }\n}\nclass ModelClipTool {\n  static applyModelClipping(vp, clipPoint, negate) {\n    const view = vp.view;\n    if (!view || !view.isSpatialView())\n      return;\n    const createClip = (vector, p) => {\n      const plane = ClipPlane.createNormalAndPoint(vector, p);\n      const planes = ConvexClipPlaneSet.createPlanes([plane]);\n      const primitive = ClipPrimitive.createCapture(planes);\n      return ClipVector.createCapture([primitive]);\n    };\n    let point = clipPoint.clone();\n    point = vp.viewToWorld(point);\n    const boresite = AccuDrawHintBuilder.getBoresite(point, vp);\n    const viewY = vp.rotation.rowY();\n    let normal = viewY.crossProduct(boresite.direction);\n    let left = true;\n    if (this._leftModels.length === 0 && this._rightModels.length === 0)\n      view.modelSelector.models.forEach((id) => {\n        (left ? this._leftModels : this._rightModels).push(id);\n        left = !left;\n      });\n    if (negate)\n      normal = normal.negate();\n    view.details.modelClipGroups = new ModelClipGroups([\n      ModelClipGroup.create(createClip(normal, point), this._rightModels),\n      ModelClipGroup.create(createClip(normal.negate(), point), this._leftModels)\n    ]);\n    vp.invalidateScene();\n  }\n}\nModelClipTool._leftModels = [];\nModelClipTool._rightModels = [];\nexport class TwoPanelDivider {\n  constructor(props) {\n    this._oldPosition = 0;\n    this._mouseDownDraggable = (e) => {\n      e.preventDefault();\n      document.addEventListener(\"mousemove\", this._mouseMoveDraggable);\n      document.addEventListener(\"mouseup\", this._mouseUpDraggable);\n      this._oldPosition = e.clientX;\n    };\n    this._mouseMoveDraggable = (e) => {\n      e.preventDefault();\n      if (void 0 === this.dividerElem)\n        return;\n      const newPosition = this.limitToBounds(this.dividerElem.offsetLeft - (this._oldPosition - e.clientX));\n      this._oldPosition = this.limitToBounds(e.clientX);\n      this.setDivider(newPosition);\n      const left = newPosition - this._bounds.left;\n      const right = this._bounds.right - left - this.dividerElem.clientWidth;\n      this.onDraggedEvent.raiseEvent(left, right);\n    };\n    this._mouseUpDraggable = (_e) => {\n      document.removeEventListener(\"mousemove\", this._mouseMoveDraggable);\n      document.removeEventListener(\"mouseup\", this._mouseUpDraggable);\n    };\n    this._bounds = props.bounds;\n    this._buffer = void 0 === props.buffer ? 0 : props.buffer;\n    this.onDraggedEvent = new BeEvent();\n    let left;\n    if (void 0 !== props.sideL)\n      left = props.sideL;\n    else if (void 0 !== props.sideR)\n      left = props.bounds.width - props.sideR;\n    else\n      left = props.bounds.width / 2;\n    this.dividerElem = IModelApp.makeHTMLElement(\"div\");\n    this.dividerElem.setAttribute(\"style\", \"width: 4px; position: fixed; display: flex; background-color: #f1f1f1; border: 1px solid #d3d3d3; /*dde0e3*/ pointer-events: visible;\");\n    if (props.id !== void 0)\n      this.dividerElem.id = props.id;\n    this.updateBounds(this._bounds);\n    this.setDivider(left);\n    this.dividerElem.onmousedown = this._mouseDownDraggable;\n    if (props.parent)\n      props.parent.appendChild(this.dividerElem);\n    const handle = IModelApp.makeHTMLElement(\"div\");\n    handle.setAttribute(\"style\", \"position: relative;  box-shadow: 0px 1px 5px 0px rgba(0, 0, 0, 0.25);  left: -10px;  padding: 12px;  height: 32px;  border-radius: 1.5px;  cursor: col-resize;  align-self: center;  background-color: #69ade3; /* dde0e3 */  /* dots c8ccd0*/  color: #fff;\");\n    this.dividerElem.appendChild(handle);\n    if (props.onDragged)\n      this.onDraggedEvent.addListener(props.onDragged);\n  }\n  limitToBounds(n) {\n    n = Math.min(n, this._bounds.right - (this.dividerElem.clientWidth + this._buffer));\n    n = Math.max(n, this._bounds.left + this._buffer);\n    return n;\n  }\n  setDivider(left) {\n    this.dividerElem.style.left = `${left}px`;\n  }\n  updateBounds(rect) {\n    this.dividerElem.style.top = `${rect.top}px`;\n    this.dividerElem.style.height = `${rect.height}px`;\n  }\n}\n",
      "start": 1693508124719,
      "end": 1693508124833,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/SectionTools.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { BeEvent } from \"@itwin/core-bentley\";\r\nimport { createButton, createComboBox } from \"@itwin/frontend-devtools\";\r\nimport { ClipPlane, ClipPrimitive, ClipVector, ConvexClipPlaneSet, Point3d, Vector3d } from \"@itwin/core-geometry\";\r\nimport { ModelClipGroup, ModelClipGroups } from \"@itwin/core-common\";\r\nimport { AccuDrawHintBuilder, IModelApp, ScreenViewport, ViewClipDecorationProvider, Viewport } from \"@itwin/core-frontend\";\r\nimport { ToolBarDropDown } from \"./ToolBar\";\r\nimport { ViewClipByElementGeometryTool } from \"./ViewClipByElementGeometryTool\";\r\n\r\nfunction setFocusToHome(): void {\r\n  const element = document.activeElement as HTMLElement;\r\n  if (element && element !== document.body) {\r\n    element.blur();\r\n    document.body.focus();\r\n  }\r\n}\r\n\r\nexport class SectionsPanel extends ToolBarDropDown {\r\n  private readonly _vp: ScreenViewport;\r\n  private readonly _element: HTMLElement;\r\n  private _toolName = \"ViewClip.ByPlane\";\r\n\r\n  public constructor(vp: ScreenViewport, parent: HTMLElement) {\r\n    super();\r\n    this._vp = vp;\r\n    this._element = IModelApp.makeHTMLElement(\"div\", { className: \"toolMenu\", parent });\r\n    this._element.style.cssFloat = \"left\";\r\n    this._element.style.display = \"block\";\r\n\r\n    createComboBox({\r\n      parent: this._element,\r\n      id: \"section_Type\",\r\n      name: \"Clip type: \",\r\n      value: this._toolName,\r\n      handler: (select: HTMLSelectElement) => this._toolName = select.value,\r\n      entries: [\r\n        { name: \"Plane\", value: \"ViewClip.ByPlane\" },\r\n        { name: \"Range\", value: \"ViewClip.ByRange\" },\r\n        { name: \"Element\", value: \"ViewClip.ByElement\" },\r\n        { name: \"Shape\", value: \"ViewClip.ByShape\" },\r\n        { name: \"Geometry\", value: ViewClipByElementGeometryTool.toolId },\r\n      ],\r\n    });\r\n\r\n    const div = IModelApp.makeHTMLElement(\"div\", { parent: this._element });\r\n    div.style.textAlign = \"center\";\r\n    createButton({\r\n      value: \"Define\",\r\n      handler: async () => {\r\n        await IModelApp.tools.run(this._toolName, ViewClipDecorationProvider.create());\r\n        setFocusToHome();\r\n      },\r\n      parent: div,\r\n      inline: true,\r\n      tooltip: \"Define clip\",\r\n    });\r\n    createButton({\r\n      value: \"Edit\",\r\n      handler: async () => ViewClipDecorationProvider.create().toggleDecoration(this._vp),\r\n      parent: div,\r\n      inline: true,\r\n      tooltip: \"Show clip edit handles\",\r\n    });\r\n    createButton({\r\n      value: \"Clear\",\r\n      handler: async () => IModelApp.tools.run(\"ViewClip.Clear\", ViewClipDecorationProvider.create()),\r\n      parent: div,\r\n      inline: true,\r\n      tooltip: \"Clear clips\",\r\n    });\r\n\r\n    let negate = false;\r\n    createButton({\r\n      value: \"Add Panel\",\r\n      handler: () => {\r\n        // Add Clip Model Group UI\r\n        const props: DividingLineProps = {\r\n          sideL: vp.getClientRect().width / 2,\r\n          bounds: vp.getClientRect(),\r\n          buffer: 10,\r\n          parent: vp.canvas.parentElement!,\r\n          onDragged: (left, _right) => ModelClipTool.applyModelClipping(vp, new Point3d(left, (vp.getClientRect().height / 2), 0), negate),\r\n        };\r\n        const divider = new TwoPanelDivider(props);\r\n        divider.dividerElem.style.zIndex = \"10\";\r\n      },\r\n      parent: div,\r\n      inline: false,\r\n      tooltip: \"Add Panels\",\r\n    });\r\n    createButton({\r\n      value: \"Negate Plane\",\r\n      handler: () => { negate = !negate; },\r\n      parent: div,\r\n      inline: true,\r\n      tooltip: \"Negate Plane\",\r\n    });\r\n  }\r\n\r\n  protected _open(): void { this._element.style.display = \"block\"; }\r\n  protected _close(): void { this._element.style.display = \"none\"; }\r\n  public get isOpen(): boolean { return \"block\" === this._element.style.display; }\r\n}\r\n\r\nclass ModelClipTool {\r\n  private static _leftModels: string[] = [];\r\n  private static _rightModels: string[] = [];\r\n  public static applyModelClipping(vp: Viewport, clipPoint: Point3d, negate: boolean): void {\r\n    const view = vp.view;\r\n    if (!view || !view.isSpatialView())\r\n      return;\r\n    const createClip = (vector: Vector3d, p: Point3d) => {\r\n      const plane = ClipPlane.createNormalAndPoint(vector, p)!;\r\n      const planes = ConvexClipPlaneSet.createPlanes([plane]);\r\n      const primitive = ClipPrimitive.createCapture(planes);\r\n      return ClipVector.createCapture([primitive]);\r\n    };\r\n\r\n    let point = clipPoint.clone();\r\n    point = vp.viewToWorld(point);\r\n\r\n    const boresite = AccuDrawHintBuilder.getBoresite(point, vp);\r\n    const viewY = vp.rotation.rowY();\r\n    let normal = viewY.crossProduct(boresite.direction);\r\n\r\n    let left = true;\r\n    if (this._leftModels.length === 0 && this._rightModels.length === 0)\r\n      view.modelSelector.models.forEach((id) => {\r\n        (left ? this._leftModels : this._rightModels).push(id);\r\n        left = !left;\r\n      });\r\n    if (negate)\r\n      normal = normal.negate();\r\n\r\n    view.details.modelClipGroups = new ModelClipGroups([\r\n      ModelClipGroup.create(createClip(normal, point), this._rightModels),\r\n      ModelClipGroup.create(createClip(normal.negate(), point), this._leftModels),\r\n    ]);\r\n\r\n    vp.invalidateScene();\r\n  }\r\n}\r\n\r\nexport interface DividingLineProps {\r\n  bounds: DOMRect;\r\n  onDragged?: (leftPanelWidth: number, rightPanelWidth: number) => void;\r\n  buffer?: number;\r\n  sideL?: number;\r\n  sideR?: number;\r\n  parent?: HTMLElement;\r\n  id?: string;\r\n}\r\n\r\nexport class TwoPanelDivider {\r\n  private limitToBounds(n: number): number {\r\n    n = Math.min(n, this._bounds.right - (this.dividerElem.clientWidth + this._buffer));\r\n    n = Math.max(n, this._bounds.left + this._buffer);\r\n    return n;\r\n  }\r\n\r\n  private _buffer: number;\r\n  private _bounds: DOMRect;\r\n  private _oldPosition: number = 0;\r\n\r\n  public dividerElem: HTMLElement;\r\n  public onDraggedEvent: BeEvent<(leftPanelWidth: number, rightPanelWidth: number) => void>;\r\n\r\n  public setDivider(left: number): void {\r\n    this.dividerElem.style.left = `${left}px`;\r\n  }\r\n\r\n  public updateBounds(rect: DOMRect): void {\r\n    this.dividerElem.style.top = `${rect.top}px`;\r\n    this.dividerElem.style.height = `${rect.height}px`;\r\n  }\r\n\r\n  constructor(props: DividingLineProps) {\r\n    this._bounds = props.bounds;\r\n    this._buffer = undefined === props.buffer ? 0 : props.buffer;\r\n    this.onDraggedEvent = new BeEvent<(leftPanelWidth: number, rightPanelWidth: number) => void>();\r\n\r\n    let left: number;\r\n    if (undefined !== props.sideL)\r\n      left = props.sideL;\r\n    else if (undefined !== props.sideR)\r\n      left = props.bounds.width - props.sideR;\r\n    else\r\n      left = props.bounds.width / 2;\r\n\r\n    this.dividerElem = IModelApp.makeHTMLElement(\"div\");\r\n    this.dividerElem.setAttribute(\"style\", \"width: 4px; position: fixed; display: flex; background-color: #f1f1f1; border: 1px solid #d3d3d3; /*dde0e3*/ pointer-events: visible;\");\r\n\r\n    if (props.id !== undefined)\r\n      this.dividerElem.id = props.id;\r\n\r\n    this.updateBounds(this._bounds);\r\n    this.setDivider(left);\r\n    this.dividerElem.onmousedown = this._mouseDownDraggable;\r\n    if (props.parent)\r\n      props.parent.appendChild(this.dividerElem);\r\n\r\n    const handle = IModelApp.makeHTMLElement(\"div\");\r\n    handle.setAttribute(\"style\", \"position: relative;  box-shadow: 0px 1px 5px 0px rgba(0, 0, 0, 0.25);  left: -10px;  padding: 12px;  height: 32px;  border-radius: 1.5px;  cursor: col-resize;  align-self: center;  background-color: #69ade3; /* dde0e3 */  /* dots c8ccd0*/  color: #fff;\");\r\n    this.dividerElem.appendChild(handle);\r\n\r\n    if (props.onDragged)\r\n      this.onDraggedEvent.addListener(props.onDragged);\r\n  }\r\n\r\n  private _mouseDownDraggable = (e: MouseEvent) => {\r\n    e.preventDefault();\r\n    document.addEventListener(\"mousemove\", this._mouseMoveDraggable);\r\n    document.addEventListener(\"mouseup\", this._mouseUpDraggable);\r\n    this._oldPosition = e.clientX;\r\n  };\r\n\r\n  private _mouseMoveDraggable = (e: MouseEvent) => {\r\n    e.preventDefault();\r\n    if (undefined === this.dividerElem)\r\n      return;\r\n\r\n    const newPosition = this.limitToBounds(this.dividerElem.offsetLeft - (this._oldPosition - e.clientX));\r\n    this._oldPosition = this.limitToBounds(e.clientX);\r\n\r\n    this.setDivider(newPosition);\r\n\r\n    const left = newPosition - this._bounds.left;\r\n    const right = this._bounds.right - left - this.dividerElem.clientWidth;\r\n    this.onDraggedEvent.raiseEvent(left, right);\r\n  };\r\n\r\n  private _mouseUpDraggable = (_e: MouseEvent) => {\r\n    document.removeEventListener(\"mousemove\", this._mouseMoveDraggable);\r\n    document.removeEventListener(\"mouseup\", this._mouseUpDraggable);\r\n  };\r\n}\r\n"
        ],
        "mappings": "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",
        "names": []
      }
    }
  ]
}
