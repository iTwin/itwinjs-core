{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/RealityModelDisplaySettings.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module DisplayStyles\n */\n/** Settings that control how a point cloud reality model is displayed within a [Viewport]($frontend).\n * @note This is an immutable type - to modify its properties, use [[clone]].\n * Eye-Dome Lighting (EDL) is a non-photorealistic, image-based shading technique that was designed to improve depth\n * perception in scientific visualization. It is particularly useful for visualizing monochrome point cloud data, but\n * also can be useful for point clouds with color information.\n * @note EDL mode is ignored (off) if the view is not perspective (camera is off)\n * @see [[RealityModelDisplaySettings.pointCloud]].\n * @beta\n */\nclass PointCloudDisplaySettings {\n    constructor(props) {\n        this.shape = props?.shape ?? \"round\";\n        this.sizeMode = props?.sizeMode ?? \"voxel\";\n        // No sanity checks here - e.g., min < max, pixelSize and voxelScale > 0, etc.\n        this.pixelSize = props?.pixelSize ?? 1;\n        this.voxelScale = props?.voxelScale ?? 1;\n        this.minPixelsPerVoxel = props?.minPixelsPerVoxel ?? 2;\n        this.maxPixelsPerVoxel = props?.maxPixelsPerVoxel ?? 20;\n        this.edlMode = props?.edlMode ?? \"off\";\n        this.edlStrength = props?.edlStrength ?? 5;\n        this.edlRadius = props?.edlRadius ?? 2;\n        this.edlFilter = props?.edlFilter ?? 1;\n        this.edlMixWts1 = props?.edlMixWts1 ?? 1.0;\n        this.edlMixWts2 = props?.edlMixWts2 ?? 0.5;\n        this.edlMixWts4 = props?.edlMixWts4 ?? 0.25;\n    }\n    /** Create display settings from their JSON representation. If `props` is `undefined`, the default settings are returned. */\n    static fromJSON(props) {\n        return props ? new PointCloudDisplaySettings(props) : this.defaults;\n    }\n    /** Convert these settings to their JSON representation. */\n    toJSON() {\n        const defs = PointCloudDisplaySettings.defaults;\n        if (this.equals(defs))\n            return undefined;\n        const props = {};\n        if (this.shape !== defs.shape)\n            props.shape = this.shape;\n        if (this.sizeMode !== defs.sizeMode)\n            props.sizeMode = this.sizeMode;\n        if (this.pixelSize !== defs.pixelSize)\n            props.pixelSize = this.pixelSize;\n        if (this.voxelScale !== defs.voxelScale)\n            props.voxelScale = this.voxelScale;\n        if (this.minPixelsPerVoxel !== defs.minPixelsPerVoxel)\n            props.minPixelsPerVoxel = this.minPixelsPerVoxel;\n        if (this.maxPixelsPerVoxel !== defs.maxPixelsPerVoxel)\n            props.maxPixelsPerVoxel = this.maxPixelsPerVoxel;\n        if (this.edlMode !== defs.edlMode)\n            props.edlMode = this.edlMode;\n        if (this.edlStrength !== defs.edlStrength)\n            props.edlStrength = this.edlStrength;\n        if (this.edlRadius !== defs.edlRadius)\n            props.edlRadius = this.edlRadius;\n        if (this.edlFilter !== defs.edlFilter)\n            props.edlFilter = this.edlFilter;\n        if (this.edlMixWts1 !== defs.edlMixWts1)\n            props.edlMixWts1 = this.edlMixWts1;\n        if (this.edlMixWts2 !== defs.edlMixWts2)\n            props.edlMixWts2 = this.edlMixWts2;\n        if (this.edlMixWts4 !== defs.edlMixWts4)\n            props.edlMixWts4 = this.edlMixWts4;\n        return props;\n    }\n    /** Create a copy of these settings, identical except for any properties explicitly specified by `changedProps`. */\n    clone(changedProps) {\n        return PointCloudDisplaySettings.fromJSON({\n            ...this.toJSON(),\n            ...changedProps,\n        });\n    }\n    /** Returns true if these settings are identical to `other`. */\n    equals(other) {\n        if (this === other)\n            return true;\n        return this.shape === other.shape && this.sizeMode === other.sizeMode && this.pixelSize === other.pixelSize\n            && this.voxelScale === other.voxelScale && this.minPixelsPerVoxel === other.minPixelsPerVoxel && this.maxPixelsPerVoxel === other.maxPixelsPerVoxel\n            && this.edlMode === other.edlMode && this.edlStrength === other.edlStrength && this.edlRadius === other.edlRadius\n            && this.edlFilter === other.edlFilter\n            && this.edlMixWts1 === other.edlMixWts1 && this.edlMixWts2 === other.edlMixWts2 && this.edlMixWts4 === other.edlMixWts4;\n    }\n}\n/** Settings with all properties initialized to their default values. */\nPointCloudDisplaySettings.defaults = new PointCloudDisplaySettings();\nexport { PointCloudDisplaySettings };\n/** Settings that control how a reality model - whether a [[ContextRealityModel]] or a persistent reality [Model]($backend) - is displayed within a [Viewport]($frontend).\n * @see [[ContextRealityModel.displaySettings]] to apply these settings to a context reality model.\n * @see [[DisplayStyleSettings.setRealityModelDisplaySettings]] to apply these settings to a persistent reality model.\n * @note This is an immutable type - to modify its properties, use [[clone]].\n * @beta\n */\nclass RealityModelDisplaySettings {\n    constructor(overrideColorRatio, pointCloud) {\n        this.overrideColorRatio = overrideColorRatio ?? 0.5;\n        this.pointCloud = pointCloud;\n    }\n    /** Create display settings from their JSON representation. If `props` is `undefined`, the default settings are returned. */\n    static fromJSON(props) {\n        if (!props)\n            return this.defaults;\n        return new RealityModelDisplaySettings(props.overrideColorRatio, PointCloudDisplaySettings.fromJSON(props.pointCloud));\n    }\n    /** Convert these settings to their JSON representation, which is `undefined` if all of their properties match the default settings. */\n    toJSON() {\n        const pointCloud = this.pointCloud.toJSON();\n        const overrideColorRatio = this.overrideColorRatio === RealityModelDisplaySettings.defaults.overrideColorRatio ? undefined : this.overrideColorRatio;\n        if (undefined === pointCloud && undefined === overrideColorRatio)\n            return undefined;\n        const props = {};\n        if (undefined !== pointCloud)\n            props.pointCloud = pointCloud;\n        if (undefined !== overrideColorRatio)\n            props.overrideColorRatio = overrideColorRatio;\n        return props;\n    }\n    /** Returns true if these settings are identical to `other`. */\n    equals(other) {\n        if (this === other)\n            return true;\n        return this.overrideColorRatio === other.overrideColorRatio && this.pointCloud.equals(other.pointCloud);\n    }\n    /** Create a copy of these settings, identical except for any properties explicitly specified by `changedProps`. */\n    clone(changedProps) {\n        const pointCloud = changedProps.pointCloud ? this.pointCloud.clone(changedProps.pointCloud) : this.pointCloud;\n        const colorRatio = changedProps.hasOwnProperty(\"overrideColorRatio\") ? changedProps.overrideColorRatio : this.overrideColorRatio;\n        return new RealityModelDisplaySettings(colorRatio, pointCloud);\n    }\n}\n/** Settings with all properties initialized to their default values. */\nRealityModelDisplaySettings.defaults = new RealityModelDisplaySettings(undefined, PointCloudDisplaySettings.defaults);\nexport { RealityModelDisplaySettings };\n//# sourceMappingURL=RealityModelDisplaySettings.js.map",
      "start": 1693508120936,
      "end": 1693508120986,
      "sourcemaps": null
    }
  ]
}
