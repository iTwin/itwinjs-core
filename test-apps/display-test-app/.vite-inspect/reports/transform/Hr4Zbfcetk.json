{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/spatial/ecrs/Registry.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { AList } from \"../../system/collection/AList\";\nimport { StringMap } from \"../../system/collection/StringMap\";\nimport { ASystem } from \"../../system/runtime/ASystem\";\nimport { Numbers } from \"../../system/runtime/Numbers\";\nimport { Strings } from \"../../system/runtime/Strings\";\nimport { DataFileUnit } from \"./DataFileUnit\";\nimport { Unit } from \"./Unit\";\n/**\n * Class Registry defines the EPSG registry of coordinate reference systems (CRS).\n *\n * @version 1.0 December 2019\n */\n/** @internal */\nclass Registry {\n    /**\n     * No instances.\n     */\n    constructor() { }\n    /**\n     * Get the UTM CRS code at a certain location.\n     * @param lon the WGS84 (CRS 4326) longitude (degrees).\n     * @param lat the WGS84 (CRS 4326) latitude (degrees).\n     * @return the CRS code.\n     */\n    static getUTMCRSCodeAt(lon, lat) {\n        /* Normalize longitude */\n        while (lon < -180.0)\n            lon += 360.0;\n        while (lon > 180.0)\n            lon -= 360.0;\n        /* Get the zone identifier */\n        let zoneId = Math.round((lon + 183.0) / 6.0);\n        if (zoneId < 1)\n            zoneId = 1;\n        if (zoneId > 60)\n            zoneId = 60;\n        /* Get the CRS code */\n        return (lat >= 0.0) ? (32600 + zoneId) : (32700 + zoneId);\n    }\n    /**\n     * Get a preferred transformation (to WGS84).\n     * @param crs the crs.\n     * @return the preferred transformation (can be null).\n     */\n    static getPreferredTransformation(crs) {\n        return Registry._PREFERRED_TRANSFORMATIONS.get(crs);\n    }\n    /**\n     * Set a preferred transformation (to WGS84).\n     * @param crs the crs.\n     * @param transformation the preferred transformation (can be null).\n     */\n    static setPreferredTransformation(crs, transformation) {\n        Registry._PREFERRED_TRANSFORMATIONS.put(crs, transformation);\n    }\n    /**\n     * Open a table.\n     * @param tableName the name of the table.\n     * @return the table.\n     */\n    static openTable(tableName) {\n        if (Strings.equals(tableName, Registry._TABLE_UNIT))\n            return DataFileUnit.getDataLines();\n        return new AList();\n    }\n    /**\n     * Read all units.\n     * @return all units.\n     */\n    static readAllUnits() {\n        /* Make the list */\n        let units = new AList();\n        /* Open the table */\n        let tableReader = Registry.openTable(Registry._TABLE_UNIT);\n        let headerLine = tableReader.get(0);\n        /* Process the table */\n        for (let i = 1; i < tableReader.size(); i++) {\n            /* Read the next line */\n            let line = tableReader.get(i);\n            /* Get the columns */\n            let parts = Strings.splitAsList(line, Strings.TAB);\n            if (parts.size() != Registry._COL_COUNT_UNIT)\n                continue;\n            /* Get the parameters */\n            let code = Numbers.getInteger(parts.get(Registry._COL_UNIT_CODE), 0);\n            let name = parts.get(Registry._COL_UNIT_NAME);\n            let type = parts.get(Registry._COL_UNIT_TYPE);\n            let targetUnitCode = Numbers.getInteger(parts.get(Registry._COL_UNIT_TARGET_CODE), 0);\n            let b = Numbers.getDouble(parts.get(Registry._COL_UNIT_FACTOR_B), 0.0);\n            let c = Numbers.getDouble(parts.get(Registry._COL_UNIT_FACTOR_C), 0.0);\n            let abbreviation = parts.get(Registry._COL_UNIT_ABBREVIATION);\n            /* Add a new unit */\n            let unit = new Unit(code, name, abbreviation, type, targetUnitCode, b, c);\n            units.add(unit);\n        }\n        /* Return the units */\n        return units;\n    }\n    /**\n     * List all units.\n     * @return all units.\n     */\n    static listUnits() {\n        if (Registry._UNIT_LIST == null)\n            Registry._UNIT_LIST = Registry.readAllUnits();\n        return Registry._UNIT_LIST;\n    }\n    /**\n     * Find a unit.\n     * @param unitCode the identification code of the unit.\n     * @return a unit (null if not found).\n     */\n    static findUnit(unitCode) {\n        let unitList = Registry.listUnits();\n        for (let unit of unitList)\n            if (unit.getCode() == unitCode)\n                return unit;\n        return null;\n    }\n    /**\n     * Get a unit.\n     * @param unitCode the identification code of the unit.\n     * @return a unit (not null).\n     */\n    static getUnit(unitCode) {\n        let unit = Registry.findUnit(unitCode);\n        ASystem.assertNot(unit == null, \"Unit '\" + unitCode + \"' not found\");\n        return unit;\n    }\n    /**\n     * Find a unit by name.\n     * @param unitName the name (or abbreviation or code) of the unit.\n     * @return a unit (null if not found).\n     */\n    static findUnitName(unitName) {\n        if (unitName == null)\n            return null;\n        let unitList = Registry.listUnits();\n        for (let unit of unitList)\n            if (Strings.equalsIgnoreCase(unitName, unit.getName()))\n                return unit;\n        for (let unit of unitList)\n            if (Strings.equalsIgnoreCase(unitName, unit.getAbbreviation()))\n                return unit;\n        for (let unit of unitList)\n            if (Strings.equals(unitName, \"\" + unit.getCode()))\n                return unit;\n        return null;\n    }\n    /**\n     * Get a CRS.\n     * @param crsCode the identification code of the CRS.\n     * @return the CRS (null if not found).\n     */\n    static getCRS(crsCode) {\n        return Registry._CRS_MAP.get(\"\" + crsCode);\n    }\n    /**\n     * Get a CRS.\n     * @param crsCode the identification code of the CRS.\n     * @return the CRS (null if not found).\n     */\n    static getCRS2(crsCode) {\n        return Registry._CRS_MAP.get(crsCode);\n    }\n    /**\n     * Set a CRS.\n     * @param crsCode the identification code of the CRS.\n     * @param the CRS.\n     */\n    static setCRS(crsCode, crs) {\n        /* Register the CRS */\n        Registry._CRS_MAP.set(\"\" + crsCode, crs);\n        /* Register the base CRS as well */\n        let baseCRS = crs.getBaseCRS();\n        if (baseCRS != null)\n            Registry.setCRS(baseCRS.getCode(), baseCRS);\n    }\n}\n/** The name of the unit table */\nRegistry._TABLE_UNIT = \"unit\";\n// Unit columns: UOM_CODE\tUNIT_OF_MEAS_NAME\tUNIT_OF_MEAS_TYPE\tTARGET_UOM_CODE\tFACTOR_B\tFACTOR_C\tABBREVIATION\nRegistry._COL_COUNT_UNIT = 7;\nRegistry._COL_UNIT_CODE = 0;\nRegistry._COL_UNIT_NAME = 1;\nRegistry._COL_UNIT_TYPE = 2;\nRegistry._COL_UNIT_TARGET_CODE = 3;\nRegistry._COL_UNIT_FACTOR_B = 4;\nRegistry._COL_UNIT_FACTOR_C = 5;\nRegistry._COL_UNIT_ABBREVIATION = 6;\n/** The map for preferred transformation between CRSs */\nRegistry._PREFERRED_TRANSFORMATIONS = new StringMap();\n/** Define the list of all units */\nRegistry._UNIT_LIST = null;\n/** Define the map of CRS instances that have been read */\nRegistry._CRS_MAP = new StringMap();\nexport { Registry };\n//# sourceMappingURL=Registry.js.map",
      "start": 1693508126617,
      "end": 1693508126669,
      "sourcemaps": null
    }
  ]
}
