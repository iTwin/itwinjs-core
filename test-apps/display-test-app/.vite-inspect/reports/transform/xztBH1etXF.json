{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/pointcloud/format/opc/DirectoryRecord.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { LittleEndian } from \"../../../system/buffer/LittleEndian\";\n/**\n * Class DirectoryRecord defines a directory record.\n *\n * @version 1.0 January 2014\n */\n/** @internal */\nexport class DirectoryRecord {\n    /**\n     * Create a new record.\n     */\n    constructor(pointCount, tileCount, blockCount) {\n        this._pointCount = pointCount;\n        this._tileCount = tileCount;\n        this._blockCount = blockCount;\n    }\n    /**\n     * Get the number of points.\n     * @return the number.\n     */\n    getPointCount() {\n        return this._pointCount;\n    }\n    /**\n     * Get the number of tiles.\n     * @return the number.\n     */\n    getTileCount() {\n        return this._tileCount;\n    }\n    /**\n     * Get the number of blocks.\n     * @return the number.\n     */\n    getBlockCount() {\n        return this._blockCount;\n    }\n    /**\n     * Read a record.\n     * @param data the record data.\n     * @return the record.\n     */\n    static readFromBuffer(data) {\n        /* Get the record fields */\n        let pointCount = LittleEndian.readBufferLong(data, 0);\n        let tileCount = LittleEndian.readBufferInt(data, 8);\n        let blockCount = LittleEndian.readBufferInt(data, 12);\n        /* Return the record */\n        return new DirectoryRecord(pointCount, tileCount, blockCount);\n    }\n    /**\n     * Read a record.\n     * @param offset the file offset to the record.\n     * @param size the file size to the record.\n     * @return the record.\n     */\n    static readNew(offset, size, contentLoader) {\n        /* Request the data? */\n        if (contentLoader.isLoaded() == false) {\n            /* Add the range */\n            contentLoader.requestFilePart(offset, size.toInt());\n            return null;\n        }\n        /* Get the data */\n        let data = contentLoader.getFilePart(offset, size.toInt());\n        /* Parse the record */\n        return DirectoryRecord.readFromBuffer(data);\n    }\n    /**\n     * Write the record.\n     * @param output the output stream.\n     */\n    write(output) {\n        LittleEndian.writeStreamLong(output, this._pointCount);\n        LittleEndian.writeStreamInt(output, this._tileCount);\n        LittleEndian.writeStreamInt(output, this._blockCount);\n    }\n}\n//# sourceMappingURL=DirectoryRecord.js.map",
      "start": 1693508127334,
      "end": 1693508127384,
      "sourcemaps": null
    }
  ]
}
