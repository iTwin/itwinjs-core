{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/webgl/BackgroundMapDrape.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module WebGL\n */\nimport { assert, dispose } from \"@itwin/core-bentley\";\nimport { Matrix4d, Plane3dByOriginAndUnitNormal, Point3d, Vector3d } from \"@itwin/core-geometry\";\nimport { ColorDef, FrustumPlanes, RenderTexture, TextureTransparency } from \"@itwin/core-common\";\nimport { GraphicsCollectorDrawArgs } from \"../../tile/internal\";\nimport { FeatureSymbology } from \"../FeatureSymbology\";\nimport { BatchState } from \"./BatchState\";\nimport { BranchStack } from \"./BranchStack\";\nimport { FrameBuffer } from \"./FrameBuffer\";\nimport { GL } from \"./GL\";\nimport { PlanarTextureProjection } from \"./PlanarTextureProjection\";\nimport { RenderCommands } from \"./RenderCommands\";\nimport { System } from \"./System\";\nimport { Texture, TextureHandle } from \"./Texture\";\nimport { TextureDrape } from \"./TextureDrape\";\n/** @internal */\nclass BackgroundMapDrape extends TextureDrape {\n    constructor(drapedTree, mapTree) {\n        super();\n        this._graphics = [];\n        this._width = 0;\n        this._height = 0;\n        this._debugFrustumGraphic = undefined;\n        this._symbologyOverrides = new FeatureSymbology.Overrides();\n        this._bgColor = ColorDef.from(0, 0, 0, 255);\n        this._plane = Plane3dByOriginAndUnitNormal.create(Point3d.createZero(), Vector3d.create(0, 0, 1));\n        this._drapedTree = drapedTree;\n        this._mapTree = mapTree;\n    }\n    get isDisposed() { return super.isDisposed && undefined === this._fbo; }\n    dispose() {\n        super.dispose();\n        this._fbo = dispose(this._fbo);\n    }\n    addGraphic(graphic) {\n        this._graphics.push(graphic);\n    }\n    static create(draped, map) {\n        return new BackgroundMapDrape(draped, map);\n    }\n    collectGraphics(context) {\n        this._graphics.length = 0;\n        if (undefined === context.viewingSpace)\n            return;\n        const viewState = context.viewingSpace.view;\n        if (undefined === viewState)\n            return;\n        const tileTree = this._mapTree.treeOwner.load();\n        if (undefined === tileTree || !this._mapTree.initializeLayers(context))\n            return;\n        const requiredWidth = 2 * Math.max(context.target.viewRect.width, context.target.viewRect.height); // TBD - Size to textured area.\n        const requiredHeight = requiredWidth;\n        if (requiredWidth !== this._width || requiredHeight !== this._height)\n            this.dispose();\n        this._width = requiredWidth;\n        this._height = requiredHeight;\n        const targetTree = this._drapedTree.treeOwner.tileTree;\n        const args = this._drapedTree.createDrawArgs(context);\n        if (!targetTree || !args)\n            return;\n        const targetTiles = targetTree.selectTiles(args);\n        const projection = PlanarTextureProjection.computePlanarTextureProjection(this._plane, context, { tiles: targetTiles, location: args.location }, [this._mapTree], viewState, this._width, this._height);\n        if (!projection.textureFrustum || !projection.projectionMatrix || !projection.worldToViewMap)\n            return;\n        this._frustum = projection.textureFrustum;\n        this._debugFrustum = projection.debugFrustum;\n        this._projectionMatrix = projection.projectionMatrix;\n        const drawArgs = GraphicsCollectorDrawArgs.create(context, this, this._mapTree, FrustumPlanes.fromFrustum(this._frustum), projection.worldToViewMap);\n        if (undefined !== drawArgs)\n            tileTree.draw(drawArgs);\n        if (context.target.debugControl && context.target.debugControl.displayDrapeFrustum) {\n            this._debugFrustumGraphic = dispose(this._debugFrustumGraphic);\n            const builder = context.createSceneGraphicBuilder();\n            builder.setSymbology(ColorDef.green, ColorDef.green, 1);\n            builder.addFrustum(context.viewingSpace.getFrustum());\n            builder.setSymbology(ColorDef.red, ColorDef.red, 1);\n            builder.addFrustum(this._debugFrustum);\n            builder.setSymbology(ColorDef.white, ColorDef.white, 1);\n            builder.addFrustum(this._frustum);\n            this._debugFrustumGraphic = builder.finish();\n        }\n    }\n    draw(target) {\n        if (undefined !== this._debugFrustumGraphic)\n            target.graphics.foreground.push(this._debugFrustumGraphic);\n        if (undefined === this._frustum || this._graphics.length === 0)\n            return;\n        if (undefined === this._fbo) {\n            const colorTextureHandle = TextureHandle.createForAttachment(this._width, this._height, GL.Texture.Format.Rgba, GL.Texture.DataType.UnsignedByte);\n            if (undefined === colorTextureHandle) {\n                assert(false, \"Failed to create planar texture\");\n                return;\n            }\n            this._texture = new Texture({ ownership: \"external\", type: RenderTexture.Type.TileSection, handle: colorTextureHandle, transparency: TextureTransparency.Opaque });\n            this._fbo = FrameBuffer.create([colorTextureHandle]);\n        }\n        if (undefined === this._fbo) {\n            assert(false, \"unable to create frame buffer object\");\n            return;\n        }\n        System.instance.glTimer.beginOperation(\"Terrain Projection\");\n        const prevState = System.instance.currentRenderState.clone();\n        System.instance.context.viewport(0, 0, this._width, this._height);\n        const prevPlan = target.plan;\n        const drawingParams = PlanarTextureProjection.getTextureDrawingParams(target);\n        const stack = new BranchStack();\n        stack.changeRenderPlan(drawingParams.viewFlags, prevPlan.is3d, prevPlan.hline);\n        stack.setSymbologyOverrides(this._symbologyOverrides);\n        const batchState = new BatchState(stack);\n        System.instance.applyRenderState(drawingParams.state);\n        target.uniforms.style.changeBackgroundColor(this._bgColor); // Avoid white on white reversal. Will be reset below in changeRenderPlan().\n        target.changeFrustum(this._frustum, this._frustum.getFraction(), true);\n        const prevProjMatrix = target.uniforms.frustum.projectionMatrix;\n        target.uniforms.frustum.changeProjectionMatrix(BackgroundMapDrape._postProjectionMatrix.multiplyMatrixMatrix(prevProjMatrix));\n        target.uniforms.branch.pushState(stack.top);\n        const renderCommands = new RenderCommands(target, stack, batchState);\n        renderCommands.addGraphics(this._graphics, 5 /* RenderPass.OpaqueGeneral */);\n        const system = System.instance;\n        const gl = system.context;\n        system.frameBufferStack.execute(this._fbo, true, false, () => {\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(GL.BufferBit.Color);\n            target.techniques.execute(target, renderCommands.getCommands(5 /* RenderPass.OpaqueGeneral */), 19 /* RenderPass.PlanarClassification */); // Draw these with RenderPass.PlanarClassification (rather than Opaque...) so that the pick ordering is avoided.\n        });\n        target.uniforms.branch.pop();\n        batchState.reset(); // Reset the batch Ids...\n        target.changeRenderPlan(prevPlan);\n        system.applyRenderState(prevState);\n        gl.viewport(0, 0, target.viewRect.width, target.viewRect.height); // Restore viewport\n        system.glTimer.endOperation();\n    }\n}\nBackgroundMapDrape._postProjectionMatrix = Matrix4d.createRowValues(0, 1, 0, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 0, 0, 1);\nexport { BackgroundMapDrape };\n//# sourceMappingURL=BackgroundMapDrape.js.map",
      "start": 1693508124510,
      "end": 1693508124548,
      "sourcemaps": null
    }
  ]
}
