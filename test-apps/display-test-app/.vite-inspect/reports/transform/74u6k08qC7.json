{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/geometry/lib/esm/curve/spiral/NormalizedTransition.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Curve\n */\n/**\n * NormalizedTransition is the (abstract) base class for clothoid, bloss, biquadratic, sine, and cosine transition functions.\n * * Each function maps fractional progress to a curvature value.\n *   * f(0) === 0\n *   * f(1) === 1\n *   * f(u) === 1 - f (1-u)\n * * Each implementation provides:\n *   * fractionToCurvature -- the f(u) function described above\n *   * fractionToCurvatureDerivative -- df(u)/du\n *   * fractionToArea -- integral of the area under f(u) from 0 to u.\n * * the symmetry condition ensures that the integral from 0 to 1 is 1/2\n * @internal\n */\nexport class NormalizedTransition {\n    /** Constructor initializes with 0..1 values .. call \"setBearingCurvatureLengthCurvature\" to apply real values */\n    constructor() { }\n    /**\n     * Return a standard evaluator identified by string as:\n     * * clothoid\n     * * bloss\n     * * biquadratic\n     * * sine\n     * * cosine\n     * Each of these types\n     * * is instantiated (only once) as a single static object within the NormalizedTransition class.\n     * * has no instance data or mutator methods.\n     * @param name string name of the transition.\n     */\n    static findEvaluator(name) {\n        if (name === \"clothoid\")\n            return this._clothoidEvaluator ? this._clothoidEvaluator : (this._clothoidEvaluator = new NormalizedClothoidTransition());\n        if (name === \"bloss\")\n            return this._blossEvaluator ? this._blossEvaluator : (this._blossEvaluator = new NormalizedBlossTransition());\n        if (name === \"biquadratic\")\n            return this._biquadraticEvaluator ? this._biquadraticEvaluator : (this._biquadraticEvaluator = new NormalizedBiQuadraticTransition());\n        if (name === \"sine\")\n            return this._sineEvaluator ? this._sineEvaluator : (this._sineEvaluator = new NormalizedSineTransition());\n        if (name === \"cosine\")\n            return this._cosineEvaluator ? this._cosineEvaluator : (this._cosineEvaluator = new NormalizedCosineTransition());\n        return undefined;\n    }\n}\n/**\n * Transition functions for clothoid spiral.\n * * curvature variation is linear from (0,0) to (1,1)\n * @internal\n */\nexport class NormalizedClothoidTransition extends NormalizedTransition {\n    constructor() { super(); }\n    /** At fractional position on the x axis, return the (normalized) curvature fraction. */\n    fractionToCurvatureFraction(fractionX) { return fractionX; }\n    /** Return the derivative of the (normalized) curvature fraction */\n    fractionToCurvatureFractionDerivative(_u) { return 1.0; }\n    /** Return the integrated area under the curve.\n     * * This fraction is the angular change fraction.\n     */\n    fractionToArea(fractionX) {\n        return fractionX * fractionX * 0.5;\n    }\n}\n/**\n * Transition functions for bloss spiral.\n * * curvature variation is cubic from (0,0) with slope 0 to (1,1) with slope 1\n * @internal\n */\nexport class NormalizedBlossTransition extends NormalizedTransition {\n    // bloss curve is (3 - 2x) x ^2 = 3 x^2 - 2 x^3\n    //    derivative    6x (1-x)\n    //   2nd derivative 6 - 12 x\n    //     derivatives zero at 0,1\n    //     inflection zero at 0.5\n    //   integral is   x^3 - x^4 / 2 = x^3 ( 1-x/2)\n    constructor() { super(); }\n    /** At fractional position on the x axis, return the (normalized) curvature fraction. */\n    fractionToCurvatureFraction(u) { return u * u * (3 - 2 * u); }\n    /** Return the derivative of the (normalized) curvature fraction */\n    fractionToCurvatureFractionDerivative(u) {\n        return 6.0 * u * (1.0 - u);\n    }\n    /** Return the integrated area under the curve.\n     * * This fraction is the angular change fraction.\n     */\n    fractionToArea(u) {\n        return u * u * u * (1 - 0.5 * u);\n    }\n}\n/**\n * Transition functions for biquadratic transition\n * * Curvature is a pair of joining quadratics.\n * * In lower half of the interval, the quadratic is from (0,0) to (0.5, 0.5) with zero slope at origin\n * * In upper half of the interval, the quadratic is from (0.5,0.5) to (1,1) with zero slope at 1\n * @internal\n */\nexport class NormalizedBiQuadraticTransition extends NormalizedTransition {\n    constructor() { super(); }\n    integratedBasis(u) { return u * u * u * (2.0 / 3.0); }\n    basis(u) { return 2 * u * u; }\n    basisDerivative(u) { return 4 * u; }\n    /** At fractional position on the x axis, return the (normalized) curvature fraction.\n     *  * * For [u <= 0.5, u >= 0.5]\n     *   * f(u) = [2 u^2, 1 - 2 (1-u)^2]\n     *   * f'(u) = [4 u, 4 (1-u)]\n     *   * If(u) = [2 u^3 / 3, 0.5 (1 -u )^3/3]\n     */\n    fractionToCurvatureFraction(u) {\n        return u <= 0.5 ? this.basis(u) : 1.0 - this.basis(1.0 - u);\n    }\n    /** Return the derivative of the (normalized) curvature fraction */\n    fractionToCurvatureFractionDerivative(u) {\n        return u < 0.5 ? this.basisDerivative(u) : this.basisDerivative(1 - u);\n    }\n    /** Return the integrated area under the curve.\n     * * This fraction is the angular change fraction.\n     */\n    fractionToArea(u) {\n        if (u <= 0.5)\n            return this.integratedBasis(u);\n        const v = 1 - u;\n        return 0.5 - v + this.integratedBasis(v);\n    }\n}\n/**\n * Transition functions for sine transition\n * * curvature variation is the sum of\n *   * straight line from (0,0) to (1,1), like clothoid\n *   * additional full period of a sine wave, producing 0 slope at both ends\n * @internal\n */\nexport class NormalizedSineTransition extends NormalizedTransition {\n    constructor() { super(); }\n    /** At fractional position on the x axis, return the (normalized) curvature fraction. */\n    fractionToCurvatureFraction(u) {\n        const a = 2.0 * Math.PI;\n        return u - Math.sin(u * a) / a;\n    }\n    /** Return the derivative of the (normalized) curvature fraction */\n    fractionToCurvatureFractionDerivative(u) {\n        const a = 2.0 * Math.PI;\n        return 1 - Math.cos(u * a);\n    }\n    /** Return the integrated area under the curve.\n     * * This fraction is the angular change fraction.\n     */\n    fractionToArea(u) {\n        const a = 2.0 * Math.PI;\n        return 0.5 * u * u + (Math.cos(u * a) - 1.0) / (a * a);\n    }\n}\n/**\n * Transition functions for cosine\n * * curvature variation is a half period of a cosine\n * @internal\n */\nexport class NormalizedCosineTransition extends NormalizedTransition {\n    constructor() { super(); }\n    /** At fractional position on the x axis, return the (normalized) curvature fraction. */\n    fractionToCurvatureFraction(u) {\n        const a = Math.PI;\n        return 0.5 * (1 - Math.cos(u * a));\n    }\n    /** Return the derivative of the (normalized) curvature fraction */\n    fractionToCurvatureFractionDerivative(u) {\n        const a = Math.PI;\n        return 0.5 * a * Math.sin(u * a);\n    }\n    /** Return the integrated area under the curve.\n     * * This fraction is the angular change fraction.\n     */\n    fractionToArea(u) {\n        const a = Math.PI;\n        return 0.5 * u - 0.5 * Math.sin(u * a) / a;\n    }\n}\n//# sourceMappingURL=NormalizedTransition.js.map",
      "start": 1693508125419,
      "end": 1693508125543,
      "sourcemaps": null
    }
  ]
}
