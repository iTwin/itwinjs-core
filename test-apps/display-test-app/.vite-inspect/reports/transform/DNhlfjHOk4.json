{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/EntityState.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module ElementState\n */\nimport { Id64 } from \"@itwin/core-bentley\";\nimport { Code, RelatedElement } from \"@itwin/core-common\";\n/** The \"state\" of an Entity as represented in a web browser. Every subclass of EntityState handles one BIS class.\n * @public\n * @extensions\n */\nexport class EntityState {\n    /** The name of the BIS schema for this class.\n     * @note Subclasses from other than the BisCore domain must override the static member \"schemaName\" with their schema name.\n     */\n    static get schemaName() { return \"BisCore\"; }\n    get _ctor() { return this.constructor; }\n    /** The name of the BIS class associated with this class.\n     * @note Every subclass of EntityState **MUST** override this method to identify its BIS class.\n     * Failure to do so will ordinarily result in an error when the class is registered, since there may only\n     * be one JavaScript class for a given BIS class (usually the errant class will collide with its superclass.)\n     */\n    static get className() { return \"Entity\"; }\n    /** The name of the BIS class associated with this class. */\n    get className() { return this._ctor.className; }\n    /** Constructor for EntityState\n     * @param props the properties of the Entity for this EntityState\n     * @param iModel the iModel from which this EntityState is to be constructed\n     * @param _state source EntityState for clone\n     */\n    constructor(props, iModel, _state) {\n        this.classFullName = props.classFullName ? props.classFullName : this._ctor.classFullName;\n        this.iModel = iModel;\n        this.id = Id64.fromJSON(props.id);\n        this.jsonProperties = props.jsonProperties ? JSON.parse(JSON.stringify(props.jsonProperties)) : {}; // make sure we have our own copy\n    }\n    /** @internal */\n    toJSON() {\n        const val = {};\n        val.classFullName = this.classFullName;\n        if (Id64.isValid(this.id))\n            val.id = this.id;\n        if (this.jsonProperties && Object.keys(this.jsonProperties).length > 0)\n            val.jsonProperties = this.jsonProperties;\n        return val;\n    }\n    /** Return true if this EntityState is equal to another one. */\n    equals(other) { return JSON.stringify(this.toJSON()) === JSON.stringify(other.toJSON()); }\n    /** Make an independent copy of this EntityState */\n    clone(iModel) { return new this._ctor(this.toJSON(), iModel ? iModel : this.iModel, this); }\n    /** Get full BIS class name of this Entity in the form \"SchemaName:ClassName\".  */\n    static get classFullName() { return `${this.schemaName}:${this.className}`; }\n}\n/** The \"state\" of an Element as represented in a web browser.\n * @public\n * @extensions\n */\nexport class ElementState extends EntityState {\n    static get className() { return \"Element\"; }\n    constructor(props, iModel) {\n        super(props, iModel);\n        this.code = Code.fromJSON(props.code);\n        this.model = RelatedElement.idFromJson(props.model);\n        this.parent = RelatedElement.fromJSON(props.parent);\n        if (undefined !== props.federationGuid)\n            this.federationGuid = props.federationGuid;\n        if (undefined !== props.userLabel)\n            this.userLabel = props.userLabel;\n    }\n    /** Obtain this element's JSON representation. Subclasses of ElementState typically override this method with a more\n     * specific return type.\n     */\n    toJSON() {\n        const val = super.toJSON();\n        if (Id64.isValid(this.code.spec))\n            val.code = this.code;\n        val.model = this.model;\n        val.parent = this.parent;\n        val.federationGuid = this.federationGuid;\n        val.userLabel = this.userLabel;\n        return val;\n    }\n}\n//# sourceMappingURL=EntityState.js.map",
      "start": 1693508119272,
      "end": 1693508119413,
      "sourcemaps": null
    }
  ]
}
