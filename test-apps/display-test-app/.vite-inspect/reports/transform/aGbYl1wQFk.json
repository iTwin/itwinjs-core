{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/common/render/primitives/VertexIndices.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Rendering\n */\nimport { assert } from \"@itwin/core-bentley\";\n/**\n * Holds an array of indices into a VertexTable. Each index is a 24-bit unsigned integer.\n * The order of the indices specifies the order in which vertices are drawn.\n * @internal\n */\nexport class VertexIndices {\n    /**\n     * Directly construct from an array of bytes in which each index occupies 3 contiguous bytes.\n     * The length of the array must be a multiple of 3. This object takes ownership of the array.\n     */\n    constructor(data) {\n        this.data = data;\n        assert(0 === this.data.length % 3);\n    }\n    /** Get the number of 24-bit indices. */\n    get length() { return this.data.length / 3; }\n    /** Convert an array of 24-bit unsigned integer values into a VertexIndices object. */\n    static fromArray(indices) {\n        const bytes = new Uint8Array(indices.length * 3);\n        for (let i = 0; i < indices.length; i++)\n            this.encodeIndex(indices[i], bytes, i * 3);\n        return new VertexIndices(bytes);\n    }\n    static encodeIndex(index, bytes, byteIndex) {\n        assert(byteIndex + 2 < bytes.length);\n        bytes[byteIndex + 0] = index & 0x000000ff;\n        bytes[byteIndex + 1] = (index & 0x0000ff00) >> 8;\n        bytes[byteIndex + 2] = (index & 0x00ff0000) >> 16;\n    }\n    setNthIndex(n, value) {\n        VertexIndices.encodeIndex(value, this.data, n * 3);\n    }\n    decodeIndex(index) {\n        assert(index < this.length);\n        const byteIndex = index * 3;\n        return this.data[byteIndex] | (this.data[byteIndex + 1] << 8) | (this.data[byteIndex + 2] << 16);\n    }\n    decodeIndices() {\n        const indices = [];\n        for (let i = 0; i < this.length; i++)\n            indices.push(this.decodeIndex(i));\n        return indices;\n    }\n    [Symbol.iterator]() {\n        function* iterator(indices) {\n            for (let i = 0; i < indices.length; i++)\n                yield indices.decodeIndex(i);\n        }\n        return iterator(this);\n    }\n}\n//# sourceMappingURL=VertexIndices.js.map",
      "start": 1693508119078,
      "end": 1693508119281,
      "sourcemaps": null
    }
  ]
}
