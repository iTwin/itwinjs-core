{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/system/buffer/LittleEndian.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { ALong } from \"../runtime/ALong\";\nimport { Numbers } from \"../runtime/Numbers\";\nimport { Strings } from \"../runtime/Strings\";\n/**\n * Helper class for reading multi-byte numbers.\n */\n/** @internal */\nexport class LittleEndian {\n    /**\n     * This class has static methods only.\n     */\n    constructor() {\n    }\n    /**\n     * Read an unsigned 8-bit integer.\n     */\n    static readBufferByte(buffer, offset) {\n        let b0 = buffer.get(offset);\n        return (b0);\n    }\n    /**\n     * Read an unsigned 8-bit integer.\n     */\n    static readStreamByte(stream) {\n        let b0 = stream.read();\n        return (b0);\n    }\n    /**\n     * Write an unsigned 8-bit integer.\n     */\n    static writeBufferByte(buffer, offset, value) {\n        buffer.set(offset, value);\n    }\n    /**\n     * Write an unsigned 8-bit integer.\n     */\n    static writeStreamByte(stream, value) {\n        stream.write(value);\n    }\n    /**\n     * Read an unsigned 16-bit integer.\n     */\n    static readBufferShort(buffer, offset) {\n        let b0 = buffer.get(offset++);\n        let b1 = buffer.get(offset++);\n        return (b1 << 8) | (b0);\n    }\n    /**\n     * Read an unsigned 16-bit integer.\n     */\n    static readStreamShort(stream) {\n        let b0 = stream.read();\n        let b1 = stream.read();\n        return (b1 << 8) | (b0);\n    }\n    /**\n     * Write an unsigned 16-bit integer.\n     */\n    static writeBufferShort(buffer, offset, value) {\n        buffer.set(offset++, (value >> 0));\n        buffer.set(offset++, (value >> 8));\n    }\n    /**\n     * Write an unsigned 16-bit integer.\n     */\n    static writeStreamShort(stream, value) {\n        stream.write(value >> 0);\n        stream.write(value >> 8);\n    }\n    /**\n     * Read an unsigned 24-bit integer.\n     */\n    static readBufferInt3(buffer, offset) {\n        let b0 = buffer.get(offset++);\n        let b1 = buffer.get(offset++);\n        let b2 = buffer.get(offset++);\n        return (b2 << 16) | (b1 << 8) | (b0);\n    }\n    /**\n     * Read an unsigned 24-bit integer.\n     */\n    static readStreamInt3(stream) {\n        let b0 = stream.read();\n        let b1 = stream.read();\n        let b2 = stream.read();\n        return (b2 << 16) | (b1 << 8) | (b0);\n    }\n    /**\n     * Write an unsigned 24-bit integer.\n     */\n    static writeBufferInt3(buffer, offset, value) {\n        buffer.set(offset++, (value >> 0));\n        buffer.set(offset++, (value >> 8));\n        buffer.set(offset++, (value >> 16));\n    }\n    /**\n     * Write an unsigned 24-bit integer.\n     */\n    static writeStreamInt3(stream, value) {\n        stream.write(value >> 0);\n        stream.write(value >> 8);\n        stream.write(value >> 16);\n    }\n    /**\n     * Read a signed 32-bit integer.\n     */\n    static readBufferInt(buffer, offset) {\n        let b0 = buffer.get(offset++);\n        let b1 = buffer.get(offset++);\n        let b2 = buffer.get(offset++);\n        let b3 = buffer.get(offset++);\n        return (b3 << 24) | (b2 << 16) | (b1 << 8) | (b0);\n    }\n    /**\n     * Read a signed 32-bit integer.\n     */\n    static readStreamInt(stream) {\n        let b0 = stream.read();\n        let b1 = stream.read();\n        let b2 = stream.read();\n        let b3 = stream.read();\n        return (b3 << 24) | (b2 << 16) | (b1 << 8) | (b0);\n    }\n    /**\n     * Write a signed 32-bit integer.\n     */\n    static writeBufferInt(buffer, offset, value) {\n        buffer.set(offset++, (value >> 0));\n        buffer.set(offset++, (value >> 8));\n        buffer.set(offset++, (value >> 16));\n        buffer.set(offset++, (value >> 24));\n    }\n    /**\n     * Write a signed 32-bit integer.\n     */\n    static writeStreamInt(stream, value) {\n        stream.write(value >> 0);\n        stream.write(value >> 8);\n        stream.write(value >> 16);\n        stream.write(value >> 24);\n    }\n    /**\n     * Read a signed 64-bit integer.\n     */\n    static readBufferLong(buffer, offset) {\n        let b0 = buffer.get(offset++);\n        let b1 = buffer.get(offset++);\n        let b2 = buffer.get(offset++);\n        let b3 = buffer.get(offset++);\n        let b4 = buffer.get(offset++);\n        let b5 = buffer.get(offset++);\n        let b6 = buffer.get(offset++);\n        let b7 = buffer.get(offset++);\n        return ALong.fromBytes(b7, b6, b5, b4, b3, b2, b1, b0);\n    }\n    /**\n     * Read a signed 64-bit integer.\n     */\n    static readStreamLong(stream) {\n        let b0 = stream.read();\n        let b1 = stream.read();\n        let b2 = stream.read();\n        let b3 = stream.read();\n        let b4 = stream.read();\n        let b5 = stream.read();\n        let b6 = stream.read();\n        let b7 = stream.read();\n        return ALong.fromBytes(b7, b6, b5, b4, b3, b2, b1, b0);\n    }\n    /**\n     * Write a signed 64-bit integer.\n     */\n    static writeBufferLong(buffer, offset, value) {\n        buffer.set(offset++, value.getByte(0));\n        buffer.set(offset++, value.getByte(1));\n        buffer.set(offset++, value.getByte(2));\n        buffer.set(offset++, value.getByte(3));\n        buffer.set(offset++, value.getByte(4));\n        buffer.set(offset++, value.getByte(5));\n        buffer.set(offset++, value.getByte(6));\n        buffer.set(offset++, value.getByte(7));\n    }\n    /**\n     * Write a signed 64-bit integer.\n     */\n    static writeStreamLong(stream, value) {\n        stream.write(value.getByte(0));\n        stream.write(value.getByte(1));\n        stream.write(value.getByte(2));\n        stream.write(value.getByte(3));\n        stream.write(value.getByte(4));\n        stream.write(value.getByte(5));\n        stream.write(value.getByte(6));\n        stream.write(value.getByte(7));\n    }\n    /**\n     * Read a signed 32-bit float.\n     */\n    static readBufferFloat(buffer, offset) {\n        return Numbers.intBitsToFloat(LittleEndian.readBufferInt(buffer, offset));\n    }\n    /**\n     * Read a signed 32-bit float.\n     */\n    static readStreamFloat(stream) {\n        return Numbers.intBitsToFloat(LittleEndian.readStreamInt(stream));\n    }\n    /**\n     * Write a signed 32-bit float.\n     */\n    static writeBufferFloat(buffer, offset, value) {\n        LittleEndian.writeBufferInt(buffer, offset, Numbers.floatToIntBits(value));\n    }\n    /**\n     * Write a signed 32-bit float.\n     */\n    static writeStreamFloat(stream, value) {\n        LittleEndian.writeStreamInt(stream, Numbers.floatToIntBits(value));\n    }\n    /**\n     * Read a signed 64-bit float.\n     */\n    static readBufferDouble(buffer, offset) {\n        return Numbers.longBitsToDouble(LittleEndian.readBufferLong(buffer, offset));\n    }\n    /**\n     * Read a signed 64-bit float.\n     */\n    static readStreamDouble(stream) {\n        return Numbers.longBitsToDouble(LittleEndian.readStreamLong(stream));\n    }\n    /**\n     * Write a signed 64-bit float.\n     */\n    static writeBufferDouble(buffer, offset, value) {\n        LittleEndian.writeBufferLong(buffer, offset, Numbers.doubleToLongBits(value));\n    }\n    /**\n     * Write a signed 64-bit float.\n     */\n    static writeStreamDouble(stream, value) {\n        LittleEndian.writeStreamLong(stream, Numbers.doubleToLongBits(value));\n    }\n    /**\n     * Read a string.\n     */\n    static readBufferString(buffer, offset) {\n        let valueLength = LittleEndian.readBufferInt(buffer, offset);\n        if (valueLength < 0)\n            return null;\n        offset += 4;\n        let value = \"\";\n        for (let i = 0; i < valueLength; i++)\n            value = Strings.appendChar(value, LittleEndian.readBufferShort(buffer, offset + 2 * i));\n        return value;\n    }\n    /**\n     * Read a string.\n     */\n    static readStreamString(stream) {\n        let valueLength = LittleEndian.readStreamInt(stream);\n        if (valueLength < 0)\n            return null;\n        let value = \"\";\n        for (let i = 0; i < valueLength; i++)\n            value = Strings.appendChar(value, LittleEndian.readStreamShort(stream));\n        return value;\n    }\n    /**\n     * Write a string.\n     */\n    static writeStreamString(stream, value) {\n        if (value == null) {\n            LittleEndian.writeStreamInt(stream, -1);\n        }\n        else {\n            let valueLength = Strings.getLength(value);\n            LittleEndian.writeStreamInt(stream, valueLength);\n            for (let i = 0; i < valueLength; i++)\n                LittleEndian.writeStreamShort(stream, Strings.getCharAt(value, i));\n        }\n    }\n    /**\n     * Get the number of bytes in a string.\n     */\n    static getStringByteCount(value) {\n        if (value == null)\n            return 4;\n        else\n            return 4 + 2 * Strings.getLength(value);\n    }\n}\n//# sourceMappingURL=LittleEndian.js.map",
      "start": 1693508127183,
      "end": 1693508127231,
      "sourcemaps": null
    }
  ]
}
