{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/ModelSelectorState.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Views\n */\nimport { Id64, ObservableSet } from \"@itwin/core-bentley\";\nimport { ElementState } from \"./EntityState\";\n/** The state of a [ModelSelector]($backend). It holds a set of ids of GeometricModels for a [[SpatialViewState]].\n * It defines the set of [[ModelState]]s drawn within the view as a set of IDs.\n * @public\n * @extensions\n */\nexport class ModelSelectorState extends ElementState {\n    static get className() { return \"ModelSelector\"; }\n    /** The set of ModelIds of this ModelSelectorState */\n    get models() {\n        return this._models;\n    }\n    set models(models) {\n        this.models.clear();\n        for (const model of models)\n            this.models.add(model);\n    }\n    /** @internal */\n    get observableModels() {\n        return this._models;\n    }\n    constructor(props, iModel) {\n        super(props, iModel);\n        this._models = new ObservableSet();\n        if (props.models)\n            props.models.forEach((model) => this.models.add(model));\n    }\n    /** The name of this ModelSelector */\n    get name() { return this.code.value; }\n    toJSON() {\n        const val = super.toJSON();\n        val.models = [];\n        this.models.forEach((model) => val.models.push(model));\n        return val;\n    }\n    /** Determine if this model selector is logically equivalent to the specified model selector. Two model selectors are logically equivalent is\n     * they have the same name and Id and contain the same set of models.\n     * @param other The model selector to which to compare.\n     * @returns true if the model selectors are logically equivalent.\n     * @public\n     */\n    equalState(other) {\n        if (this.models.size !== other.models.size || this.id !== other.id || this.name !== other.name)\n            return false;\n        for (const model of this.models)\n            if (!other.models.has(model))\n                return false;\n        return true;\n    }\n    /** Add one or more models to this ModelSelectorState */\n    addModels(arg) {\n        for (const id of Id64.iterable(arg))\n            this.models.add(id);\n    }\n    /** Drop one or more models from this ModelSelectorState */\n    dropModels(arg) {\n        for (const id of Id64.iterable(arg))\n            this.models.delete(id);\n    }\n    /** Determine whether this ModelSelectorState includes the specified modelId value */\n    has(id) { return this.models.has(id); }\n    /** Determine whether this ModelSelectorState includes the specified modelId */\n    containsModel(modelId) { return this.has(modelId.toString()); }\n    /** Make sure all models referenced by this ModelSelectorState are loaded. */\n    async load() {\n        return this.iModel.models.load(this.models);\n    }\n}\n//# sourceMappingURL=ModelSelectorState.js.map",
      "start": 1693508119405,
      "end": 1693508119568,
      "sourcemaps": null
    }
  ]
}
