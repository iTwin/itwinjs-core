{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/TerrainSettings.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module DisplayStyles\n */\n/** Correction modes for terrain height\n * @see [[TerrainProps]]\n * @public\n * @extensions\n */\nexport var TerrainHeightOriginMode;\n(function (TerrainHeightOriginMode) {\n    /** Height value indicates the geodetic height of the IModel origin (also referred to as ellipsoidal or GPS height) */\n    TerrainHeightOriginMode[TerrainHeightOriginMode[\"Geodetic\"] = 0] = \"Geodetic\";\n    /** Height value indicates the geoidal height of the IModel origin (commonly referred to as sea level). */\n    TerrainHeightOriginMode[TerrainHeightOriginMode[\"Geoid\"] = 1] = \"Geoid\";\n    /** Height value indicates the height of the IModel origin relative to ground level at project center. */\n    TerrainHeightOriginMode[TerrainHeightOriginMode[\"Ground\"] = 2] = \"Ground\";\n})(TerrainHeightOriginMode || (TerrainHeightOriginMode = {}));\n/** Normalized version of [[TerrainProps]] for which provider has been validated and default values of all members are used.\n * @public\n */\nexport class TerrainSettings {\n    /** Optionally overrides [[BackgroundMapSettings.locatable]]. For backwards compatibility only.\n     * @see [[TerrainProps.nonLocatable]].\n     * @internal\n     */\n    get nonLocatable() {\n        return this._nonLocatable;\n    }\n    constructor(providerName = \"CesiumWorldTerrain\", exaggeration = 1.0, applyLighting = false, heightOrigin = 0.0, heightOriginMode = TerrainHeightOriginMode.Geodetic) {\n        this.providerName = providerName;\n        this.exaggeration = Math.min(100, Math.max(0.1, exaggeration));\n        this.applyLighting = applyLighting;\n        this.heightOrigin = heightOrigin;\n        switch (heightOriginMode) {\n            case TerrainHeightOriginMode.Ground:\n            case TerrainHeightOriginMode.Geoid:\n                this.heightOriginMode = heightOriginMode;\n                break;\n            default:\n                this.heightOriginMode = TerrainHeightOriginMode.Geodetic;\n                break;\n        }\n    }\n    static fromJSON(json) {\n        if (undefined === json)\n            return new TerrainSettings();\n        const providerName = json?.providerName ?? \"CesiumWorldTerrain\";\n        const settings = new TerrainSettings(providerName, json.exaggeration, json.applyLighting, json.heightOrigin, json.heightOriginMode);\n        if (true === json.nonLocatable)\n            settings._nonLocatable = true;\n        return settings;\n    }\n    toJSON() {\n        const props = { heightOriginMode: this.heightOriginMode };\n        if (\"CesiumWorldTerrain\" !== this.providerName)\n            props.providerName = this.providerName;\n        if (1 !== this.exaggeration)\n            props.exaggeration = this.exaggeration;\n        if (this.nonLocatable)\n            props.nonLocatable = true;\n        if (this.applyLighting)\n            props.applyLighting = true;\n        if (0 !== this.heightOrigin)\n            props.heightOrigin = this.heightOrigin;\n        return props;\n    }\n    equals(other) {\n        return this.providerName === other.providerName && this.exaggeration === other.exaggeration && this.applyLighting === other.applyLighting\n            && this.heightOrigin === other.heightOrigin && this.heightOriginMode === other.heightOriginMode && this.nonLocatable === other.nonLocatable;\n    }\n    /** Returns true if these settings are equivalent to the supplied JSON settings. */\n    equalsJSON(json) {\n        return this.equals(TerrainSettings.fromJSON(json));\n    }\n    /** Create a copy of this TerrainSettings, optionally modifying some of its properties.\n     * @param changedProps JSON representation of the properties to change.\n     * @returns A TerrainSettings with all of its properties set to match those of`this`, except those explicitly defined in `changedProps`.\n     */\n    clone(changedProps) {\n        if (undefined === changedProps)\n            return this;\n        const props = {\n            providerName: changedProps.providerName ?? this.providerName,\n            exaggeration: changedProps.exaggeration ?? this.exaggeration,\n            nonLocatable: changedProps.nonLocatable ?? this.nonLocatable,\n            applyLighting: changedProps.applyLighting ?? this.applyLighting,\n            heightOrigin: changedProps.heightOrigin ?? this.heightOrigin,\n            heightOriginMode: changedProps.heightOriginMode ?? this.heightOriginMode,\n        };\n        return TerrainSettings.fromJSON(props);\n    }\n}\n//# sourceMappingURL=TerrainSettings.js.map",
      "start": 1693508120976,
      "end": 1693508121030,
      "sourcemaps": null
    }
  ]
}
