{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend-devtools/lib/esm/widgets/RenderCommandBreakdown.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Widgets\n */\nimport { IModelApp } from \"@itwin/core-frontend\";\nimport { createCheckBox } from \"../ui/CheckBox\";\nexport class RenderCommandBreakdown {\n    constructor(parent) {\n        this._cells = new Map();\n        createCheckBox({\n            parent,\n            name: \"Render Commands\",\n            id: \"renderCommandBreakdown\",\n            handler: () => this.toggle(),\n        });\n        parent.appendChild(this._div = document.createElement(\"div\"));\n        this._div.style.display = \"none\";\n        this._div.style.textAlign = \"right\";\n        this._div.appendChild(this._cellDiv = document.createElement(\"div\"));\n        this._div.appendChild(this._total = document.createElement(\"div\"));\n        this._total.innerText = \"Total: 0\";\n    }\n    dispose() {\n        this.clearInterval();\n    }\n    toggle() {\n        if (undefined !== this._curIntervalId) {\n            this._div.style.display = \"none\";\n            this.clearInterval();\n        }\n        else {\n            this._div.style.display = \"block\";\n            this.update();\n            this._curIntervalId = setInterval(() => this.update(), 500);\n        }\n    }\n    clearInterval() {\n        if (undefined !== this._curIntervalId) {\n            clearInterval(this._curIntervalId);\n            this._curIntervalId = undefined;\n        }\n    }\n    update() {\n        const ctrl = IModelApp.viewManager.selectedView?.target.debugControl;\n        if (!ctrl)\n            return;\n        const cmds = ctrl.getRenderCommands();\n        let total = 0;\n        for (const cmd of cmds) {\n            let cell = this._cells.get(cmd.name);\n            if (!cell) {\n                this._cellDiv.appendChild(cell = document.createElement(\"div\"));\n                this._cells.set(cmd.name, cell);\n            }\n            total += cmd.count;\n            cell.innerText = `${cmd.name}: ${cmd.count}`;\n        }\n        this._total.innerText = `Total: ${total}`;\n    }\n}\n//# sourceMappingURL=RenderCommandBreakdown.js.map",
      "start": 1693508125115,
      "end": 1693508125169,
      "sourcemaps": null
    }
  ]
}
