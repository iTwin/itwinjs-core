{
  "resolvedId": "D:/hub2023A/itwinjs-core/ui/appui-abstract/lib/esm/appui-abstract/UiAdmin.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module UiAdmin\n */\nimport { BeUiEvent } from \"@itwin/core-bentley\";\nimport { loggerCategory } from \"./utils/misc\";\nimport { UiError } from \"./utils/UiError\";\n/** The GenericUiEvent is the base event class for UI events that target a specific component, as identified in uiComponentId.\n * @public\n */\nexport class GenericUiEvent extends BeUiEvent {\n}\n/** The UiAdmin controls various UI components and is callable from IModelApp.uiAdmin in the core-frontend package.\n * @public\n */\nclass UiAdmin {\n    constructor() {\n        this._featureFlags = {};\n    }\n    /** The MessagePresenter used to display messages. */\n    static get messagePresenter() {\n        if (!UiAdmin._messagePresenter)\n            throw new UiError(loggerCategory(this), \"UiAdmin.messagePresenter not set\");\n        return UiAdmin._messagePresenter;\n    }\n    static set messagePresenter(mp) {\n        UiAdmin._messagePresenter = mp;\n    }\n    get featureFlags() {\n        return { ...this._featureFlags }; // return copy so no direct access to modify value\n    }\n    updateFeatureFlags(uiFlags) {\n        this._featureFlags = { ...this._featureFlags, ...uiFlags };\n    }\n    /** @internal */\n    onInitialized() { }\n    /** Get the cursor X and Y position. */\n    get cursorPosition() { return { x: 0, y: 0 }; }\n    /** Create a PointProps object. */\n    createXAndY(x, y) { return { x, y }; }\n    /** Determines if focus is set to Home */\n    get isFocusOnHome() { return false; }\n    /** Sets focus to Home */\n    setFocusToHome() { }\n    /** Show a context menu at a particular location.\n     * @param _menuItemsProps Properties of the menu items to display.\n     * @param _location Location of the context menu, relative to the origin of htmlElement or the window.\n     * @param _htmlElement The HTMLElement that anchors the context menu. If undefined, the location is relative to the overall window.\n     * @return true if the menu was displayed, false if the menu could not be displayed.\n     */\n    showContextMenu(_menuItemsProps, _location, _htmlElement) {\n        return false;\n    }\n    /** Show a Toolbar at a particular location.\n     * @param _toolbarProps Properties of the Toolbar to display.\n     * @param _location Location of the Toolbar, relative to the origin of htmlElement or the window.\n     * @param _offset Offset of the Toolbar from the location.\n     * @param _onItemExecuted Function invoked after a Toolbar item is executed\n     * @param _onCancel Function invoked when the Escape key is pressed or a click occurs outside the Toolbar\n     * @param _relativePosition Position relative to the given location. Defaults to TopRight.\n     * @param _htmlElement The HTMLElement that anchors the Toolbar. If undefined, the location is relative to the overall window.\n     * @return true if the Toolbar was displayed, false if the Toolbar could not be displayed.\n     */\n    showToolbar(_toolbarProps, _location, _offset, _onItemExecuted, _onCancel, _relativePosition, _htmlElement) {\n        return false;\n    }\n    /** Hides the toolbar. */\n    hideToolbar() { return false; }\n    /** Show a menu button at a particular location. A menu button opens a context menu.\n     * @param _id Id of the menu button. Multiple menu buttons may be displayed.\n     * @param _menuItemsProps Properties of the menu items to display.\n     * @param _location Location of the context menu, relative to the origin of htmlElement or the window.\n     * @param _htmlElement The HTMLElement that anchors the context menu. If undefined, the location is relative to the overall window.\n     * @return true if the button was displayed, false if the button could not be displayed.\n     */\n    showMenuButton(_id, _menuItemsProps, _location, _htmlElement) {\n        return false;\n    }\n    /** Hides a menu button.\n     * @param _id Id of the menu button. Multiple menu buttons may be displayed.\n     * @return true if the menu was hidden, false if the menu could not be hidden.\n     */\n    hideMenuButton(_id) { return false; }\n    /** Show a calculator at a particular location.\n     * @param _initialValue Value initially displayed in the calculator.\n     * @param _resultIcon Icon displayed to the left of the value.\n     * @param _location Location of the calculator, relative to the origin of htmlElement or the window.\n     * @param _onCommit Function called when the OK button or the Enter key is pressed.\n     * @param _onCancel Function called when the Cancel button or the Escape key  is pressed.\n     * @param _htmlElement The HTMLElement that anchors the context menu. If undefined, the location is relative to the overall window.\n     * @return true if the calculator was displayed, false if the calculator could not be displayed.\n     */\n    showCalculator(_initialValue, _resultIcon, _location, _onCommit, _onCancel, _htmlElement) {\n        return false;\n    }\n    /** Hides the calculator. */\n    hideCalculator() { return false; }\n    /** Show an input editor for an angle value at a particular location.\n     * @param _initialValue Value initially displayed in the editor.\n     * @param _location Location of the editor, relative to the origin of htmlElement or the window.\n     * @param _onCommit Function called when the OK button or the Enter key is pressed.\n     * @param _onCancel Function called when the Cancel button or the Escape key  is pressed.\n     * @param _htmlElement The HTMLElement that anchors the context menu. If undefined, the location is relative to the overall window.\n     * @return true if the editor was displayed, false if the editor could not be displayed.\n     */\n    showAngleEditor(_initialValue, _location, _onCommit, _onCancel, _htmlElement) {\n        return false;\n    }\n    /** Show an input editor for a length value at a particular location.\n     * @param _initialValue Value initially displayed in the editor.\n     * @param _location Location of the editor, relative to the origin of htmlElement or the window.\n     * @param _onCommit Function called when the OK button or the Enter key is pressed.\n     * @param _onCancel Function called when the Cancel button or the Escape key  is pressed.\n     * @param _htmlElement The HTMLElement that anchors the context menu. If undefined, the location is relative to the overall window.\n     * @return true if the editor was displayed, false if the editor could not be displayed.\n     */\n    showLengthEditor(_initialValue, _location, _onCommit, _onCancel, _htmlElement) {\n        return false;\n    }\n    /** Show an input editor for a height value at a particular location.\n     * @param _initialValue Value initially displayed in the editor.\n     * @param _location Location of the editor, relative to the origin of htmlElement or the window.\n     * @param _onCommit Function called when the OK button or the Enter key is pressed.\n     * @param _onCancel Function called when the Cancel button or the Escape key  is pressed.\n     * @param _htmlElement The HTMLElement that anchors the context menu. If undefined, the location is relative to the overall window.\n     * @return true if the editor was displayed, false if the editor could not be displayed.\n     */\n    showHeightEditor(_initialValue, _location, _onCommit, _onCancel, _htmlElement) {\n        return false;\n    }\n    /** Show an input editor for a primitive value at a particular location.\n     * @param _initialValue Value initially displayed in the editor.\n     * @param _propertyDescription Description of the primitive value property.\n     * @param _location Location of the editor, relative to the origin of htmlElement or the window.\n     * @param _onCommit Function called when the OK button or the Enter key is pressed.\n     * @param _onCancel Function called when the Cancel button or the Escape key  is pressed.\n     * @param _htmlElement The HTMLElement that anchors the context menu. If undefined, the location is relative to the overall window.\n     * @return true if the editor was displayed, false if the editor could not be displayed.\n     */\n    showInputEditor(_initialValue, _propertyDescription, _location, _onCommit, _onCancel, _htmlElement) {\n        return false;\n    }\n    /** Hides the input editor. */\n    hideInputEditor() { return false; }\n    /** Show an HTML element at a particular location.\n     * @param _displayElement The HTMLElement to display\n     * @param _location Location of the tool settings, relative to the origin of anchorElement or the window\n     * @param _offset Offset of the display element from the location\n     * @param _onCancel Function invoked when the Escape key is pressed or a click occurs outside the display element\n     * @param _relativePosition Position relative to the given location. Defaults to TopRight.\n     * @param _anchorElement The HTMLElement that anchors the display element. If undefined, the location is relative to the overall window.\n     * @return true if the display element was displayed, false if the display element could not be displayed.\n     */\n    showHTMLElement(_displayElement, _location, _offset, _onCancel, _relativePosition, _anchorElement) {\n        return false;\n    }\n    /** Hides the HTML Element. */\n    hideHTMLElement() { return false; }\n    /** Show a Card containing content, a title and a toolbar at a particular location.\n     * @param _content The HTMLElement of the content to display\n     * @param _title Title to display at the top of the card.\n     * @param _toolbarProps Properties of the Toolbar to display.\n     * @param _location Location of the Card, relative to the origin of anchorElement or the window.\n     * @param _offset Offset of the Card from the location.\n     * @param _onItemExecuted Function invoked after a Toolbar item is executed\n     * @param _onCancel Function invoked when the Escape key is pressed or a click occurs outside the Card\n     * @param _relativePosition Position relative to the given location. Defaults to TopRight.\n     * @param _anchorElement The HTMLElement that anchors the Card. If undefined, the location is relative to the overall window.\n     * @return true if the Card was displayed, false if the Card could not be displayed.\n     */\n    showCard(_content, _title, _toolbarProps, _location, _offset, _onItemExecuted, _onCancel, _relativePosition, _anchorElement) {\n        return false;\n    }\n    /** Hides the Card. */\n    hideCard() { return false; }\n    /** Opens a Tool Settings Ui popup at a particular location.\n     * @param _dataProvider The UiDataProvider for the tool settings\n     * @param _location Location of the tool settings, relative to the origin of anchorElement or the window\n     * @param _offset Offset of the tool settings from the location\n     * @param _onCancel Function invoked when the Escape key is pressed or a click occurs outside the tool settings\n     * @param _relativePosition Position relative to the given location. Defaults to TopRight.\n     * @param _anchorElement The HTMLElement that anchors the tool settings. If undefined, the location is relative to the overall window.\n     * @return true if the tool settings were displayed, false if the tool settings could not be displayed.\n     */\n    openToolSettingsPopup(_dataProvider, _location, _offset, _onCancel, _relativePosition, _anchorElement) {\n        return false;\n    }\n    /** Closes the Tool Settings Ui popup. */\n    closeToolSettingsPopup() { return false; }\n    /** Show the Keyin Palette to display all support Tool key-ins.\n     * @param _htmlElement The HTMLElement that anchors the Keyin Palette. If undefined, the location is relative to the overall window.\n     * @return true if the Keyin Palette was displayed, false if it could not be displayed.\n     */\n    showKeyinPalette(_htmlElement) { return false; }\n    /** Hides the Keyin Palette. */\n    hideKeyinPalette() { return false; }\n    /** Send a UI event */\n    static sendUiEvent(args) {\n        UiAdmin.onGenericUiEvent.emit(args);\n    }\n    /** Opens a Dialog and automatically populates it using the properties defined by the UiDataProvider.\n     * @param _uiDataProvider The DialogLayoutDataProvider for the dialog\n     * @param _title Specify title for dialog.\n     * @param _isModal Specify if the dialog is opened as a modal or modeless.\n     * @param _id Id of the dialog that is used to close it.\n     * @param _optionalProps Optional props for Dialog construction.\n     * @return true if the tool settings were displayed, false if the tool settings could not be displayed.\n     */\n    openDialog(_uiDataProvider, _title, _isModal, _id, _optionalProps) {\n        return false;\n    }\n    /** Closes the Dialog with a given Id. */\n    closeDialog(_dialogId) { return false; }\n}\n/** GenericUiEvent  */\nUiAdmin.onGenericUiEvent = new GenericUiEvent();\nexport { UiAdmin };\n//# sourceMappingURL=UiAdmin.js.map",
      "start": 1693508124371,
      "end": 1693508124438,
      "sourcemaps": null
    }
  ]
}
