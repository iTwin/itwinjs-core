{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/webgl/BranchStack.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module WebGL\n */\nimport { assert } from \"@itwin/core-bentley\";\nimport { Transform } from \"@itwin/core-geometry\";\nimport { ViewFlags } from \"@itwin/core-common\";\nimport { FeatureSymbology } from \"../FeatureSymbology\";\nimport { BranchState } from \"./BranchState\";\nimport { EdgeSettings } from \"./EdgeSettings\";\n/**\n * Represents the current state of the scene graph. As the scene graph is traversed,\n * branch states are pushed and popped. Pushing a branch state replaces the current view flags\n * and multiplies the current transform with the branch's transform. Popping it inverts this\n * operation. The state at the top of the stack applies to the rendering of all primitives.\n * The stack does not store the scene graph itself.\n * @internal\n */\nexport class BranchStack {\n    constructor() {\n        this._stack = [];\n        const state = new BranchState({\n            viewFlags: new ViewFlags(),\n            transform: Transform.createIdentity(),\n            edgeSettings: EdgeSettings.create(undefined),\n            is3d: true,\n            symbologyOverrides: new FeatureSymbology.Overrides(),\n        });\n        this.pushState(state);\n    }\n    get top() {\n        assert(!this.empty);\n        return this._stack[this._stack.length - 1];\n    }\n    get bottom() {\n        assert(!this.empty);\n        return this._stack[0];\n    }\n    get length() { return this._stack.length; }\n    get empty() { return 0 === this.length; }\n    pushBranch(branch) {\n        assert(this.length > 0);\n        this.pushState(BranchState.fromBranch(this.top, branch));\n    }\n    pushState(state) {\n        this._stack.push(state);\n    }\n    pop() {\n        assert(!this.empty);\n        if (!this.empty) {\n            this._stack.pop();\n        }\n    }\n    changeRenderPlan(vf, is3d, hline) {\n        assert(1 === this.length);\n        this.top.changeRenderPlan(vf, is3d, hline);\n    }\n    setSymbologyOverrides(ovrs) {\n        assert(1 === this.length);\n        this.top.symbologyOverrides = ovrs;\n    }\n}\n//# sourceMappingURL=BranchStack.js.map",
      "start": 1693508124719,
      "end": 1693508124884,
      "sourcemaps": null
    }
  ]
}
