{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/SnapModes.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { createComboBox } from \"@itwin/frontend-devtools\";\r\nimport { SnapMode } from \"@itwin/core-frontend\";\r\nimport { DisplayTestApp } from \"./App\";\r\n\r\nconst multiSnapModes = [\r\n  SnapMode.NearestKeypoint,\r\n  SnapMode.Nearest,\r\n  SnapMode.Intersection,\r\n  SnapMode.MidPoint,\r\n  SnapMode.Origin,\r\n  SnapMode.Center,\r\n  SnapMode.Bisector,\r\n];\r\n\r\nconst multiSnapMode = -1;\r\n\r\nfunction changeSnapModes(value: SnapMode): void {\r\n  if (multiSnapMode !== (value as number)) {\r\n    DisplayTestApp.setActiveSnapMode(value);\r\n  } else {\r\n    DisplayTestApp.setActiveSnapModes(multiSnapModes);\r\n  }\r\n}\r\n\r\nexport function addSnapModes(container: HTMLElement): HTMLElement {\r\n  const cb = createComboBox({\r\n    name: \"Snap Mode: \",\r\n    id: \"snapModes\",\r\n    parent: container,\r\n    value: SnapMode.NearestKeypoint,\r\n    handler: (select: HTMLSelectElement) => changeSnapModes(Number.parseInt(select.value, 10)),\r\n    entries: [\r\n      { name: \"Keypoint\", value: SnapMode.NearestKeypoint },\r\n      { name: \"Nearest\", value: SnapMode.Nearest },\r\n      { name: \"Center\", value: SnapMode.Center },\r\n      { name: \"Origin\", value: SnapMode.Origin },\r\n      { name: \"Intersection\", value: SnapMode.Intersection },\r\n      { name: \"Multi-snap\", value: multiSnapMode },\r\n    ],\r\n  });\r\n\r\n  return cb.div;\r\n}\r\n",
      "start": 1693508121256,
      "end": 1693508121433,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { createComboBox } from \"@itwin/frontend-devtools\";\nimport { SnapMode } from \"@itwin/core-frontend\";\nimport { DisplayTestApp } from \"./App\";\nconst multiSnapModes = [\n  SnapMode.NearestKeypoint,\n  SnapMode.Nearest,\n  SnapMode.Intersection,\n  SnapMode.MidPoint,\n  SnapMode.Origin,\n  SnapMode.Center,\n  SnapMode.Bisector\n];\nconst multiSnapMode = -1;\nfunction changeSnapModes(value) {\n  if (multiSnapMode !== value) {\n    DisplayTestApp.setActiveSnapMode(value);\n  } else {\n    DisplayTestApp.setActiveSnapModes(multiSnapModes);\n  }\n}\nexport function addSnapModes(container) {\n  const cb = createComboBox({\n    name: \"Snap Mode: \",\n    id: \"snapModes\",\n    parent: container,\n    value: SnapMode.NearestKeypoint,\n    handler: (select) => changeSnapModes(Number.parseInt(select.value, 10)),\n    entries: [\n      { name: \"Keypoint\", value: SnapMode.NearestKeypoint },\n      { name: \"Nearest\", value: SnapMode.Nearest },\n      { name: \"Center\", value: SnapMode.Center },\n      { name: \"Origin\", value: SnapMode.Origin },\n      { name: \"Intersection\", value: SnapMode.Intersection },\n      { name: \"Multi-snap\", value: multiSnapMode }\n    ]\n  });\n  return cb.div;\n}\n",
      "start": 1693508121433,
      "end": 1693508121720,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/SnapModes.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { createComboBox } from \"@itwin/frontend-devtools\";\r\nimport { SnapMode } from \"@itwin/core-frontend\";\r\nimport { DisplayTestApp } from \"./App\";\r\n\r\nconst multiSnapModes = [\r\n  SnapMode.NearestKeypoint,\r\n  SnapMode.Nearest,\r\n  SnapMode.Intersection,\r\n  SnapMode.MidPoint,\r\n  SnapMode.Origin,\r\n  SnapMode.Center,\r\n  SnapMode.Bisector,\r\n];\r\n\r\nconst multiSnapMode = -1;\r\n\r\nfunction changeSnapModes(value: SnapMode): void {\r\n  if (multiSnapMode !== (value as number)) {\r\n    DisplayTestApp.setActiveSnapMode(value);\r\n  } else {\r\n    DisplayTestApp.setActiveSnapModes(multiSnapModes);\r\n  }\r\n}\r\n\r\nexport function addSnapModes(container: HTMLElement): HTMLElement {\r\n  const cb = createComboBox({\r\n    name: \"Snap Mode: \",\r\n    id: \"snapModes\",\r\n    parent: container,\r\n    value: SnapMode.NearestKeypoint,\r\n    handler: (select: HTMLSelectElement) => changeSnapModes(Number.parseInt(select.value, 10)),\r\n    entries: [\r\n      { name: \"Keypoint\", value: SnapMode.NearestKeypoint },\r\n      { name: \"Nearest\", value: SnapMode.Nearest },\r\n      { name: \"Center\", value: SnapMode.Center },\r\n      { name: \"Origin\", value: SnapMode.Origin },\r\n      { name: \"Intersection\", value: SnapMode.Intersection },\r\n      { name: \"Multi-snap\", value: multiSnapMode },\r\n    ],\r\n  });\r\n\r\n  return cb.div;\r\n}\r\n"
        ],
        "mappings": ";AAKA,SAAS,sBAAsB;AAC/B,SAAS,gBAAgB;AACzB,SAAS,sBAAsB;AAE/B,MAAM,iBAAiB;AAAA,EACrB,SAAS;AAAA,EACT,SAAS;AAAA,EACT,SAAS;AAAA,EACT,SAAS;AAAA,EACT,SAAS;AAAA,EACT,SAAS;AAAA,EACT,SAAS;AACX;AAEA,MAAM,gBAAgB;AAEtB,SAAS,gBAAgB,OAAuB;AAC9C,MAAI,kBAAmB,OAAkB;AACvC,mBAAe,kBAAkB,KAAK;AAAA,EACxC,OAAO;AACL,mBAAe,mBAAmB,cAAc;AAAA,EAClD;AACF;AAEO,gBAAS,aAAa,WAAqC;AAChE,QAAM,KAAK,eAAe;AAAA,IACxB,MAAM;AAAA,IACN,IAAI;AAAA,IACJ,QAAQ;AAAA,IACR,OAAO,SAAS;AAAA,IAChB,SAAS,CAAC,WAA8B,gBAAgB,OAAO,SAAS,OAAO,OAAO,EAAE,CAAC;AAAA,IACzF,SAAS;AAAA,MACP,EAAE,MAAM,YAAY,OAAO,SAAS,gBAAgB;AAAA,MACpD,EAAE,MAAM,WAAW,OAAO,SAAS,QAAQ;AAAA,MAC3C,EAAE,MAAM,UAAU,OAAO,SAAS,OAAO;AAAA,MACzC,EAAE,MAAM,UAAU,OAAO,SAAS,OAAO;AAAA,MACzC,EAAE,MAAM,gBAAgB,OAAO,SAAS,aAAa;AAAA,MACrD,EAAE,MAAM,cAAc,OAAO,cAAc;AAAA,IAC7C;AAAA,EACF,CAAC;AAED,SAAO,GAAG;AACZ;",
        "names": []
      }
    }
  ]
}
