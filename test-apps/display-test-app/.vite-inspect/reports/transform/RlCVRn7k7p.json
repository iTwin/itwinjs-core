{
  "resolvedId": "D:/hub2023A/itwinjs-core/common/temp/node_modules/.pnpm/@itwin+imodels-client-management@3.1.0/node_modules/@itwin/imodels-client-management/lib/esm/base/internal/OperationsBase.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n * Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n * See LICENSE.md in the project root for license terms and full copyright notice.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Constants } from \"../../Constants\";\r\nimport { ContentType } from \"../types\";\r\nexport class OperationsBase {\r\n    constructor(_options) {\r\n        this._options = _options;\r\n    }\r\n    async sendGetRequest(params) {\r\n        var _a;\r\n        const urlAndHeaders = {\r\n            url: params.url,\r\n            headers: await this.formHeaders(params)\r\n        };\r\n        if (params.responseType === ContentType.Png)\r\n            return this._options.restClient.sendGetRequest({\r\n                responseType: ContentType.Png,\r\n                ...urlAndHeaders\r\n            });\r\n        return this._options.restClient.sendGetRequest({\r\n            responseType: (_a = params.responseType) !== null && _a !== void 0 ? _a : ContentType.Json,\r\n            ...urlAndHeaders\r\n        });\r\n    }\r\n    async sendPostRequest(params) {\r\n        return this._options.restClient.sendPostRequest({\r\n            url: params.url,\r\n            body: {\r\n                contentType: ContentType.Json,\r\n                content: params.body\r\n            },\r\n            headers: await this.formHeaders({ ...params, contentType: ContentType.Json })\r\n        });\r\n    }\r\n    async sendPutRequest(params) {\r\n        return this._options.restClient.sendPutRequest({\r\n            url: params.url,\r\n            body: {\r\n                contentType: params.contentType,\r\n                content: params.body\r\n            },\r\n            headers: await this.formHeaders({ ...params, contentType: params.contentType })\r\n        });\r\n    }\r\n    async sendPatchRequest(params) {\r\n        return this._options.restClient.sendPatchRequest({\r\n            url: params.url,\r\n            body: {\r\n                contentType: ContentType.Json,\r\n                content: params.body\r\n            },\r\n            headers: await this.formHeaders({ ...params, contentType: ContentType.Json })\r\n        });\r\n    }\r\n    async sendDeleteRequest(params) {\r\n        return this._options.restClient.sendDeleteRequest({\r\n            url: params.url,\r\n            headers: await this.formHeaders(params)\r\n        });\r\n    }\r\n    async getEntityCollectionPage(params) {\r\n        const response = await this.sendGetRequest(params);\r\n        return {\r\n            entities: params.entityCollectionAccessor(response),\r\n            next: response._links.next\r\n                ? async () => this.getEntityCollectionPage({ ...params, url: response._links.next.href })\r\n                : undefined\r\n        };\r\n    }\r\n    async formHeaders(params) {\r\n        const headers = {};\r\n        const authorizationInfo = await params.authorization();\r\n        headers[Constants.headers.authorization] = `${authorizationInfo.scheme} ${authorizationInfo.token}`;\r\n        headers[Constants.headers.accept] = `application/vnd.bentley.${this._options.api.version}+json`;\r\n        if (params.preferReturn)\r\n            headers[Constants.headers.prefer] = `return=${params.preferReturn}`;\r\n        if (params.contentType)\r\n            headers[Constants.headers.contentType] = params.contentType;\r\n        return headers;\r\n    }\r\n}\r\n//# sourceMappingURL=OperationsBase.js.map",
      "start": 1693508126251,
      "end": 1693508126353,
      "sourcemaps": null
    }
  ]
}
