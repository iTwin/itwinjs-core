{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/webgl/FloatRGBA.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module WebGL\n */\nimport { ColorDef } from \"@itwin/core-common\";\nfunction clamp(norm) {\n    return Math.max(0, Math.min(1, norm));\n}\nfunction scale(norm) {\n    return Math.floor(norm * 255 + 0.5);\n}\nexport class FloatColor {\n    constructor(numComponents) {\n        this._components = new Float32Array(numComponents);\n        this._tbgr = 0;\n    }\n    get red() { return this._components[0]; }\n    get green() { return this._components[1]; }\n    get blue() { return this._components[2]; }\n    get tbgr() { return this._tbgr; }\n    get isWhite() { return 1.0 === this.red && 1.0 === this.green && 1.0 === this.blue; }\n    setColorDef(def) {\n        this.setTbgr(def.tbgr);\n    }\n    setRgbColor(rgb) {\n        this.setTbgr((rgb.r | (rgb.g << 8) | (rgb.b << 16)) >>> 0);\n    }\n    setTbgr(tbgr) {\n        tbgr = this.maskTbgr(tbgr);\n        if (tbgr === this.tbgr)\n            return;\n        const c = ColorDef.getColors(tbgr);\n        this.setComponents(c.r / 255, c.g / 255, c.b / 255, 1.0 - c.t / 255);\n        this._tbgr = tbgr;\n    }\n    setRgbComponents(r, g, b) {\n        this._components[0] = r;\n        this._components[1] = g;\n        this._components[2] = b;\n    }\n    setRgbaComponents(r, g, b, a) {\n        r = clamp(r);\n        g = clamp(g);\n        b = clamp(b);\n        a = clamp(a);\n        const tbgr = (scale(r) | (scale(g) << 8) | (scale(b) << 16) | (scale(1 - a) << 24)) >>> 0;\n        this._tbgr = this.maskTbgr(tbgr);\n        this.setComponents(r, g, b, a);\n    }\n}\nexport class FloatRgb extends FloatColor {\n    constructor() {\n        super(3);\n    }\n    maskTbgr(tbgr) {\n        return (tbgr & 0x00ffffff) >>> 0;\n    }\n    setComponents(r, g, b, _a) {\n        this.setRgbComponents(r, g, b);\n    }\n    set(r, g, b) {\n        this.setRgbaComponents(r, g, b, 1);\n    }\n    bind(uniform) {\n        uniform.setUniform3fv(this._components);\n    }\n    static fromColorDef(def) {\n        return FloatRgb.fromTbgr(def.tbgr);\n    }\n    static fromRgbColor(rgb) {\n        return FloatRgb.from(rgb.r / 255, rgb.g / 255, rgb.b / 255);\n    }\n    static from(r, g, b) {\n        const rgb = new FloatRgb();\n        rgb.set(r, g, b);\n        return rgb;\n    }\n    static fromTbgr(tbgr) {\n        const rgb = new FloatRgb();\n        rgb.setTbgr(tbgr);\n        return rgb;\n    }\n}\nexport class FloatRgba extends FloatColor {\n    constructor() {\n        super(4);\n        this._components[3] = 1.0;\n    }\n    maskTbgr(tbgr) {\n        return tbgr;\n    }\n    setComponents(r, g, b, a) {\n        this.setRgbComponents(r, g, b);\n        this._components[3] = a;\n    }\n    set(r, g, b, a) {\n        this.setRgbaComponents(r, g, b, a);\n    }\n    get alpha() { return this._components[3]; }\n    set alpha(alpha) { this._components[3] = alpha; }\n    get hasTranslucency() { return 1.0 !== this.alpha; }\n    bind(uniform) {\n        uniform.setUniform4fv(this._components);\n    }\n    static fromColorDef(def) {\n        return FloatRgba.fromTbgr(def.tbgr);\n    }\n    static fromTbgr(tbgr) {\n        const rgba = new FloatRgba();\n        rgba.setTbgr(tbgr);\n        return rgba;\n    }\n    static from(r, g, b, a) {\n        const rgba = new FloatRgba();\n        rgba.set(r, g, b, a);\n        return rgba;\n    }\n    clone(out) {\n        if (undefined === out)\n            return FloatRgba.from(this.red, this.green, this.blue, this.alpha);\n        out.set(this.red, this.green, this.blue, this.alpha);\n        return out;\n    }\n}\n//# sourceMappingURL=FloatRGBA.js.map",
      "start": 1693508124658,
      "end": 1693508124752,
      "sourcemaps": null
    }
  ]
}
