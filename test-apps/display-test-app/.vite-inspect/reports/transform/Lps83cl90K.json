{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/common/imdl/CompactEdges.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tiles\n */\nimport { assert } from \"@itwin/core-bentley\";\nimport { ImdlEdgeVisibility } from \"./ImdlSchema\";\nimport { calculateEdgeTableParams } from \"../render/primitives/EdgeParams\";\nimport { VertexIndices } from \"../render/primitives/VertexIndices\";\n/** Iterate over the compact edges.\n * @note The same object is returned on each iteration, mutated in place.\n */\nfunction* compactEdgeIterator(visibilityFlags, vertexIndices, normalPairs) {\n    let bitIndex = 0;\n    let flagsIndex = 0;\n    let normalIndex = 0;\n    const output = { index0: 0, index1: 1 };\n    for (let i = 0; i < vertexIndices.length; i++) {\n        const visibility = (visibilityFlags[flagsIndex] >> bitIndex) & 3;\n        bitIndex += 2;\n        if (bitIndex === 8) {\n            bitIndex = 0;\n            flagsIndex++;\n        }\n        if (ImdlEdgeVisibility.Hidden === visibility)\n            continue;\n        output.index0 = vertexIndices.decodeIndex(i);\n        output.index1 = vertexIndices.decodeIndex(i % 3 === 2 ? i - 2 : i + 1);\n        if (ImdlEdgeVisibility.Silhouette === visibility) {\n            assert(undefined !== normalPairs);\n            output.normals = normalPairs[normalIndex++];\n        }\n        else {\n            output.normals = undefined;\n        }\n        yield output;\n    }\n}\nfunction setUint24(edgeTable, byteIndex, value) {\n    edgeTable[byteIndex + 0] = value & 0x0000ff;\n    edgeTable[byteIndex + 1] = (value & 0x00ff00) >>> 8;\n    edgeTable[byteIndex + 2] = (value & 0xff0000) >>> 16;\n}\n/** Convert an [[ImdlCompactEdges]] to an [[IndexedEdgeParams]].\n * @internal\n */\nexport function indexedEdgeParamsFromCompactEdges(compact) {\n    const numSilhouettes = compact.normalPairs?.length ?? 0;\n    const numTotalEdges = compact.numVisibleEdges + numSilhouettes;\n    if (numTotalEdges <= 0)\n        return undefined;\n    // Each edge is a quad consisting of six vertices. Each vertex is an identical 24-bit index into the lookup table.\n    const indices = new VertexIndices(new Uint8Array(numTotalEdges * 6 * 3));\n    for (let i = 0; i < numTotalEdges; i++)\n        for (let j = 0; j < 6; j++)\n            indices.setNthIndex(i * 6 + j, i);\n    const { width, height, silhouettePadding, silhouetteStartByteIndex } = calculateEdgeTableParams(compact.numVisibleEdges, numSilhouettes, compact.maxEdgeTableDimension);\n    const edgeTable = new Uint8Array(width * height * 4);\n    let curVisibleIndex = 0;\n    let curSilhouetteIndex = 0;\n    for (const edge of compactEdgeIterator(compact.visibility, compact.vertexIndices, compact.normalPairs)) {\n        if (undefined === edge.normals) {\n            const index = curVisibleIndex++;\n            const byteIndex = index * 6;\n            setUint24(edgeTable, byteIndex, edge.index0);\n            setUint24(edgeTable, byteIndex + 3, edge.index1);\n        }\n        else {\n            const index = curSilhouetteIndex++;\n            const byteIndex = silhouetteStartByteIndex + silhouettePadding + index * 10;\n            setUint24(edgeTable, byteIndex, edge.index0);\n            setUint24(edgeTable, byteIndex + 3, edge.index1);\n            edgeTable[byteIndex + 6] = edge.normals & 0xff;\n            edgeTable[byteIndex + 7] = (edge.normals & 0xff00) >>> 8;\n            edgeTable[byteIndex + 8] = (edge.normals & 0xff0000) >>> 16;\n            edgeTable[byteIndex + 9] = (edge.normals & 0xff000000) >>> 24;\n        }\n    }\n    return {\n        indices: indices.data,\n        edges: {\n            data: edgeTable,\n            width,\n            height,\n            numSegments: compact.numVisibleEdges,\n            silhouettePadding,\n        },\n    };\n}\n//# sourceMappingURL=CompactEdges.js.map",
      "start": 1693508121316,
      "end": 1693508121500,
      "sourcemaps": null
    }
  ]
}
