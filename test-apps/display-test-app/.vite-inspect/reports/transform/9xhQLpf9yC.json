{
  "resolvedId": "D:/hub2023A/itwinjs-core/common/temp/node_modules/.pnpm/@svgdotjs+svg.js@3.0.13/node_modules/@svgdotjs/svg.js/src/types/PathArray.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import {\r\n  delimiter,\r\n  dots,\r\n  hyphen,\r\n  isPathLetter,\r\n  numbersWithDots,\r\n  pathLetters\r\n} from '../modules/core/regex.js'\r\nimport { extend } from '../utils/adopter.js'\r\nimport { subClassArray } from './ArrayPolyfill.js'\r\nimport Point from './Point.js'\r\nimport SVGArray from './SVGArray.js'\r\nimport parser from '../modules/core/parser.js'\r\n\r\nconst PathArray = subClassArray('PathArray', SVGArray)\r\n\r\nexport default PathArray\r\n\r\nexport function pathRegReplace (a, b, c, d) {\r\n  return c + d.replace(dots, ' .')\r\n}\r\n\r\nfunction arrayToString (a) {\r\n  for (var i = 0, il = a.length, s = ''; i < il; i++) {\r\n    s += a[i][0]\r\n\r\n    if (a[i][1] != null) {\r\n      s += a[i][1]\r\n\r\n      if (a[i][2] != null) {\r\n        s += ' '\r\n        s += a[i][2]\r\n\r\n        if (a[i][3] != null) {\r\n          s += ' '\r\n          s += a[i][3]\r\n          s += ' '\r\n          s += a[i][4]\r\n\r\n          if (a[i][5] != null) {\r\n            s += ' '\r\n            s += a[i][5]\r\n            s += ' '\r\n            s += a[i][6]\r\n\r\n            if (a[i][7] != null) {\r\n              s += ' '\r\n              s += a[i][7]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return s + ' '\r\n}\r\n\r\nconst pathHandlers = {\r\n  M: function (c, p, p0) {\r\n    p.x = p0.x = c[0]\r\n    p.y = p0.y = c[1]\r\n\r\n    return [ 'M', p.x, p.y ]\r\n  },\r\n  L: function (c, p) {\r\n    p.x = c[0]\r\n    p.y = c[1]\r\n    return [ 'L', c[0], c[1] ]\r\n  },\r\n  H: function (c, p) {\r\n    p.x = c[0]\r\n    return [ 'H', c[0] ]\r\n  },\r\n  V: function (c, p) {\r\n    p.y = c[0]\r\n    return [ 'V', c[0] ]\r\n  },\r\n  C: function (c, p) {\r\n    p.x = c[4]\r\n    p.y = c[5]\r\n    return [ 'C', c[0], c[1], c[2], c[3], c[4], c[5] ]\r\n  },\r\n  S: function (c, p) {\r\n    p.x = c[2]\r\n    p.y = c[3]\r\n    return [ 'S', c[0], c[1], c[2], c[3] ]\r\n  },\r\n  Q: function (c, p) {\r\n    p.x = c[2]\r\n    p.y = c[3]\r\n    return [ 'Q', c[0], c[1], c[2], c[3] ]\r\n  },\r\n  T: function (c, p) {\r\n    p.x = c[0]\r\n    p.y = c[1]\r\n    return [ 'T', c[0], c[1] ]\r\n  },\r\n  Z: function (c, p, p0) {\r\n    p.x = p0.x\r\n    p.y = p0.y\r\n    return [ 'Z' ]\r\n  },\r\n  A: function (c, p) {\r\n    p.x = c[5]\r\n    p.y = c[6]\r\n    return [ 'A', c[0], c[1], c[2], c[3], c[4], c[5], c[6] ]\r\n  }\r\n}\r\n\r\nlet mlhvqtcsaz = 'mlhvqtcsaz'.split('')\r\n\r\nfor (var i = 0, il = mlhvqtcsaz.length; i < il; ++i) {\r\n  pathHandlers[mlhvqtcsaz[i]] = (function (i) {\r\n    return function (c, p, p0) {\r\n      if (i === 'H') c[0] = c[0] + p.x\r\n      else if (i === 'V') c[0] = c[0] + p.y\r\n      else if (i === 'A') {\r\n        c[5] = c[5] + p.x\r\n        c[6] = c[6] + p.y\r\n      } else {\r\n        for (var j = 0, jl = c.length; j < jl; ++j) {\r\n          c[j] = c[j] + (j % 2 ? p.y : p.x)\r\n        }\r\n      }\r\n\r\n      return pathHandlers[i](c, p, p0)\r\n    }\r\n  })(mlhvqtcsaz[i].toUpperCase())\r\n}\r\n\r\nextend(PathArray, {\r\n  // Convert array to string\r\n  toString () {\r\n    return arrayToString(this)\r\n  },\r\n\r\n  // Move path string\r\n  move (x, y) {\r\n    // get bounding box of current situation\r\n    var box = this.bbox()\r\n\r\n    // get relative offset\r\n    x -= box.x\r\n    y -= box.y\r\n\r\n    if (!isNaN(x) && !isNaN(y)) {\r\n      // move every point\r\n      for (var l, i = this.length - 1; i >= 0; i--) {\r\n        l = this[i][0]\r\n\r\n        if (l === 'M' || l === 'L' || l === 'T') {\r\n          this[i][1] += x\r\n          this[i][2] += y\r\n        } else if (l === 'H') {\r\n          this[i][1] += x\r\n        } else if (l === 'V') {\r\n          this[i][1] += y\r\n        } else if (l === 'C' || l === 'S' || l === 'Q') {\r\n          this[i][1] += x\r\n          this[i][2] += y\r\n          this[i][3] += x\r\n          this[i][4] += y\r\n\r\n          if (l === 'C') {\r\n            this[i][5] += x\r\n            this[i][6] += y\r\n          }\r\n        } else if (l === 'A') {\r\n          this[i][6] += x\r\n          this[i][7] += y\r\n        }\r\n      }\r\n    }\r\n\r\n    return this\r\n  },\r\n\r\n  // Resize path string\r\n  size (width, height) {\r\n    // get bounding box of current situation\r\n    var box = this.bbox()\r\n    var i, l\r\n\r\n    // If the box width or height is 0 then we ignore\r\n    // transformations on the respective axis\r\n    box.width = box.width === 0 ? 1 : box.width\r\n    box.height = box.height === 0 ? 1 : box.height\r\n\r\n    // recalculate position of all points according to new size\r\n    for (i = this.length - 1; i >= 0; i--) {\r\n      l = this[i][0]\r\n\r\n      if (l === 'M' || l === 'L' || l === 'T') {\r\n        this[i][1] = ((this[i][1] - box.x) * width) / box.width + box.x\r\n        this[i][2] = ((this[i][2] - box.y) * height) / box.height + box.y\r\n      } else if (l === 'H') {\r\n        this[i][1] = ((this[i][1] - box.x) * width) / box.width + box.x\r\n      } else if (l === 'V') {\r\n        this[i][1] = ((this[i][1] - box.y) * height) / box.height + box.y\r\n      } else if (l === 'C' || l === 'S' || l === 'Q') {\r\n        this[i][1] = ((this[i][1] - box.x) * width) / box.width + box.x\r\n        this[i][2] = ((this[i][2] - box.y) * height) / box.height + box.y\r\n        this[i][3] = ((this[i][3] - box.x) * width) / box.width + box.x\r\n        this[i][4] = ((this[i][4] - box.y) * height) / box.height + box.y\r\n\r\n        if (l === 'C') {\r\n          this[i][5] = ((this[i][5] - box.x) * width) / box.width + box.x\r\n          this[i][6] = ((this[i][6] - box.y) * height) / box.height + box.y\r\n        }\r\n      } else if (l === 'A') {\r\n        // resize radii\r\n        this[i][1] = (this[i][1] * width) / box.width\r\n        this[i][2] = (this[i][2] * height) / box.height\r\n\r\n        // move position values\r\n        this[i][6] = ((this[i][6] - box.x) * width) / box.width + box.x\r\n        this[i][7] = ((this[i][7] - box.y) * height) / box.height + box.y\r\n      }\r\n    }\r\n\r\n    return this\r\n  },\r\n\r\n  // Test if the passed path array use the same path data commands as this path array\r\n  equalCommands (pathArray) {\r\n    var i, il, equalCommands\r\n\r\n    pathArray = new PathArray(pathArray)\r\n\r\n    equalCommands = this.length === pathArray.length\r\n    for (i = 0, il = this.length; equalCommands && i < il; i++) {\r\n      equalCommands = this[i][0] === pathArray[i][0]\r\n    }\r\n\r\n    return equalCommands\r\n  },\r\n\r\n  // Make path array morphable\r\n  morph (pathArray) {\r\n    pathArray = new PathArray(pathArray)\r\n\r\n    if (this.equalCommands(pathArray)) {\r\n      this.destination = pathArray\r\n    } else {\r\n      this.destination = null\r\n    }\r\n\r\n    return this\r\n  },\r\n\r\n  // Get morphed path array at given position\r\n  at (pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    var sourceArray = this\r\n    var destinationArray = this.destination.value\r\n    var array = []\r\n    var pathArray = new PathArray()\r\n    var i, il, j, jl\r\n\r\n    // Animate has specified in the SVG spec\r\n    // See: https://www.w3.org/TR/SVG11/paths.html#PathElement\r\n    for (i = 0, il = sourceArray.length; i < il; i++) {\r\n      array[i] = [ sourceArray[i][0] ]\r\n      for (j = 1, jl = sourceArray[i].length; j < jl; j++) {\r\n        array[i][j] = sourceArray[i][j] + (destinationArray[i][j] - sourceArray[i][j]) * pos\r\n      }\r\n      // For the two flags of the elliptical arc command, the SVG spec say:\r\n      // Flags and booleans are interpolated as fractions between zero and one, with any non-zero value considered to be a value of one/true\r\n      // Elliptical arc command as an array followed by corresponding indexes:\r\n      // ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\r\n      //   0    1   2        3                 4             5      6  7\r\n      if (array[i][0] === 'A') {\r\n        array[i][4] = +(array[i][4] !== 0)\r\n        array[i][5] = +(array[i][5] !== 0)\r\n      }\r\n    }\r\n\r\n    // Directly modify the value of a path array, this is done this way for performance\r\n    pathArray.value = array\r\n    return pathArray\r\n  },\r\n\r\n  // Absolutize and parse path to array\r\n  parse (array = [ [ 'M', 0, 0 ] ]) {\r\n    // if it's already a patharray, no need to parse it\r\n    if (array instanceof PathArray) return array\r\n\r\n    // prepare for parsing\r\n    var s\r\n    var paramCnt = { 'M': 2, 'L': 2, 'H': 1, 'V': 1, 'C': 6, 'S': 4, 'Q': 4, 'T': 2, 'A': 7, 'Z': 0 }\r\n\r\n    if (typeof array === 'string') {\r\n      array = array\r\n        .replace(numbersWithDots, pathRegReplace) // convert 45.123.123 to 45.123 .123\r\n        .replace(pathLetters, ' $& ') // put some room between letters and numbers\r\n        .replace(hyphen, '$1 -') // add space before hyphen\r\n        .trim() // trim\r\n        .split(delimiter) // split into array\r\n    } else {\r\n      array = array.reduce(function (prev, curr) {\r\n        return [].concat.call(prev, curr)\r\n      }, [])\r\n    }\r\n\r\n    // array now is an array containing all parts of a path e.g. ['M', '0', '0', 'L', '30', '30' ...]\r\n    var result = []\r\n    var p = new Point()\r\n    var p0 = new Point()\r\n    var index = 0\r\n    var len = array.length\r\n\r\n    do {\r\n      // Test if we have a path letter\r\n      if (isPathLetter.test(array[index])) {\r\n        s = array[index]\r\n        ++index\r\n        // If last letter was a move command and we got no new, it defaults to [L]ine\r\n      } else if (s === 'M') {\r\n        s = 'L'\r\n      } else if (s === 'm') {\r\n        s = 'l'\r\n      }\r\n\r\n      result.push(pathHandlers[s].call(null,\r\n        array.slice(index, (index = index + paramCnt[s.toUpperCase()])).map(parseFloat),\r\n        p, p0\r\n      )\r\n      )\r\n    } while (len > index)\r\n\r\n    return result\r\n  },\r\n\r\n  // Get bounding box of path\r\n  bbox () {\r\n    parser().path.setAttribute('d', this.toString())\r\n    return parser.nodes.path.getBBox()\r\n  }\r\n})\r\n",
      "start": 1693508127027,
      "end": 1693508127106,
      "sourcemaps": null
    }
  ]
}
