{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/geometry/GeodeticEllipsoid.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Geometry\n */\nimport { Geometry } from \"@itwin/core-geometry\";\n/** This class defines the mathematical model of the Earth shape in the form of an ellipsoid.\n *  There are various ways to define an ellipsoid but we have retained the definition based on the polar and equatorial radiuses.\n *  The other ellipsoid properties, such as flattening and inverse flattening, can be obtained using\n *  the simple equations that are defined at:\n *  https://en.wikipedia.org/wiki/Flattening and https://en.wikipedia.org/wiki/Earth_ellipsoid.\n *  The present class only implements the definition of the ellipsoid. No processing is performed here. If ellipsoid based computation\n *  are required refer to [[Ellipsoid]] in core/geometry package.\n *  The class only serves to describe a geodetic ellipsoid and can be partially or fully defined.\n *  For a lot of purposes simply setting the id property is sufficient to describe the ellipsoid in most cases\n *  as the mathematical properties (equatorial and polar radiuses) will be often extracted from the dictionary\n *  of commonly known ellipsoids by the reprojection engine used.\n *  @public\n */\nexport class GeodeticEllipsoid {\n    constructor(data) {\n        this.deprecated = false;\n        if (data) {\n            this.id = data.id;\n            this.description = data.description;\n            this.deprecated = data.deprecated ?? false;\n            this.source = data.source;\n            this.epsg = data.epsg;\n            this.equatorialRadius = data.equatorialRadius;\n            this.polarRadius = data.polarRadius;\n        }\n    }\n    /** Creates a Geodetic Ellipsoid from JSON representation.\n     * @public */\n    static fromJSON(data) {\n        return new GeodeticEllipsoid(data);\n    }\n    /** Creates a JSON from the Geodetic Ellipsoid definition\n     * @public */\n    toJSON() {\n        const data = { equatorialRadius: this.equatorialRadius, polarRadius: this.polarRadius };\n        data.id = this.id;\n        data.description = this.description;\n        /* We prefer to use the default undef instead of false value for deprecated in Json */\n        data.deprecated = (this.deprecated === false ? undefined : true);\n        data.source = this.source;\n        data.epsg = this.epsg;\n        data.equatorialRadius = this.equatorialRadius;\n        data.polarRadius = this.polarRadius;\n        return data;\n    }\n    /** Compares two Geodetic Ellipsoid. It is a strict compare operation not an equivalence test\n     * but it applies a minuscule tolerance for floating point compares.\n     * It takes into account descriptive properties not only mathematical definition properties.\n     *  @public */\n    equals(other) {\n        return this.id === other.id &&\n            this.description === other.description &&\n            this.deprecated === other.deprecated &&\n            this.source === other.source &&\n            this.epsg === other.epsg &&\n            Geometry.isAlmostEqualOptional(this.equatorialRadius, other.equatorialRadius, Geometry.smallMetricDistance) &&\n            Geometry.isAlmostEqualOptional(this.polarRadius, other.polarRadius, Geometry.smallMetricDistance);\n    }\n}\n//# sourceMappingURL=GeodeticEllipsoid.js.map",
      "start": 1693508120775,
      "end": 1693508120873,
      "sourcemaps": null
    }
  ]
}
