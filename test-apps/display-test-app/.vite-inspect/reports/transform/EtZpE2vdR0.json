{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/spatial/ecrs/Unit.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { ASystem } from \"../../system/runtime/ASystem\";\nimport { Numbers } from \"../../system/runtime/Numbers\";\nimport { Registry } from \"./Registry\";\n/**\n * Class Unit defines a unit of measure.\n *\n * @version 1.0 July 2005\n */\n/** @internal */\nclass Unit {\n    /**\n     * Create a new unit.\n     * @param code the code.\n     * @param name the name.\n     * @param abbreviation the abbreviation.\n     * @param type the type (LENGTH, ANGLE or SCALE).\n     * @param targetUnitCode the target unit code.\n     * @param b the B factor.\n     * @param c the C factor.\n     */\n    constructor(code, name, abbreviation, type, targetUnitCode, b, c) {\n        /* Store the parameters */\n        this._code = code;\n        this._name = name;\n        this._abbreviation = abbreviation;\n        this._type = type;\n        this._targetUnitCode = targetUnitCode;\n        this._b = b;\n        this._c = c;\n        /* Clear */\n        this._target = null;\n    }\n    /**\n     * Get the code.\n     * @return the code.\n     */\n    getCode() {\n        return this._code;\n    }\n    /**\n     * Get the name.\n     * @return the name.\n     */\n    getName() {\n        return this._name;\n    }\n    /**\n     * Get the abbreviation.\n     * @return the abbreviation.\n     */\n    getAbbreviation() {\n        return this._abbreviation;\n    }\n    /**\n     * Get the type (LENGTH, ANGLE or SCALE).\n     * @return the type.\n     */\n    getType() {\n        return this._type;\n    }\n    /**\n     * Check is this is an angle type.\n     * @return true for an angle type.\n     */\n    isTypeAngle() {\n        return (this._type === Unit._TYPE_ANGLE);\n    }\n    /**\n     * Check is this is a length type.\n     * @return true for a length type.\n     */\n    isTypeLength() {\n        return (this._type === Unit._TYPE_LENGTH);\n    }\n    /**\n     * Get the target unit code.\n     * @return the target unit code.\n     */\n    getTargetUnitCode() {\n        return this._targetUnitCode;\n    }\n    /**\n     * Get the B factor.\n     * @return the B factor.\n     */\n    getB() {\n        return this._b;\n    }\n    /**\n     * Get the C factor.\n     * @return the C factor.\n     */\n    getC() {\n        return this._c;\n    }\n    /**\n     * Check if another unit is compatible with this one.\n     * @param other the other unit.\n     * @return true if compatible.\n     */\n    isCompatible(other) {\n        if (other._code == this._code)\n            return true;\n        if (other._targetUnitCode != this._targetUnitCode)\n            return false;\n        if (other._b != this._b)\n            return false;\n        if (other._c != this._c)\n            return false;\n        return true;\n    }\n    /**\n     * Convert to the standard unit.\n     * @param value the value.\n     * @return the standard value.\n     */\n    toStandard(value) {\n        /* Get the target unit */\n        if (this._target == null)\n            this._target = Registry.getUnit(this._targetUnitCode);\n        /* Already standard ? */\n        if (this._code == this._targetUnitCode)\n            return value;\n        /* Check for a custom unit */\n        else if (this._code == Unit._UNIT_DMS)\n            return this._target.toStandard(Unit.dmsToDeg(value));\n        else if (this._code == Unit._UNIT_DM)\n            return this._target.toStandard(Unit.dmToDeg(value));\n        /* Default to scale */\n        else\n            return this._target.toStandard(value * this._b / this._c);\n    }\n    /**\n     * Convert to the standard unit.\n     * @param value the value.\n     * @return the standard value.\n     */\n    to(value) {\n        return this.toStandard(value);\n    }\n    /**\n     * Convert from the standard unit.\n     * @param value the standard value.\n     * @return the value.\n     */\n    fromStandard(value) {\n        /* Get the target unit */\n        if (this._target == null)\n            this._target = Registry.getUnit(this._targetUnitCode);\n        /* Already standard ? */\n        if (this._code == this._targetUnitCode)\n            return value;\n        /* Check for a custom unit */\n        else if (this._code == Unit._UNIT_DMS)\n            return Unit.degToDms(this._target.fromStandard(value));\n        else if (this._code == Unit._UNIT_DM)\n            return Unit.degToDm(this._target.fromStandard(value));\n        /* Default to scale */\n        else\n            return this._target.fromStandard(value) * this._c / this._b;\n    }\n    /**\n     * Convert from the standard unit.\n     * @param value the standard value.\n     * @return the value.\n     */\n    from(value) {\n        return this.fromStandard(value);\n    }\n    /**\n     * Convert a sexagesimal DMS value to fractional degrees.\n     * @param dms the sexagesimal DMS value.\n     * @return the fractional degrees.\n     */\n    static dmsToDeg(dms) {\n        /* Make sure we have an non-negative number */\n        let neg = (dms < 0.0);\n        if (neg)\n            dms *= -1.0;\n        /* Get the seconds */\n        let seconds = (10000.0 * dms);\n        let iseconds = Math.floor(seconds);\n        let fraction = (seconds - iseconds);\n        /* Catch rounding errors (like 6.1000 to 6.099999999999999) */\n        if (Math.abs(fraction - 1.0) < 1.0e-4) {\n            iseconds++;\n            fraction = 0.0;\n        }\n        /* Get the degrees */\n        let deg = Numbers.divInt(iseconds, 10000);\n        ASystem.assertNot((deg < -360) || (deg > 360), \"Invalid deg (\" + deg + \") in DMS \" + dms);\n        iseconds -= (deg * 10000);\n        /* Get the minutes */\n        let min = Numbers.divInt(iseconds, 100);\n        ASystem.assertNot((min < 0) || (min > 59), \"Invalid min (\" + min + \") in DMS \" + dms);\n        iseconds -= (min * 100);\n        /* Get the seconds */\n        let sec = (iseconds);\n        ASystem.assertNot((sec < 0) || (sec > 59), \"Invalid sec (\" + sec + \") in DMS \" + dms);\n        /* Check the fraction */\n        ASystem.assertNot((fraction < 0.0) || (fraction >= 1.0), \"Invalid fraction (\" + fraction + \") in DMS \" + dms);\n        /* Convert to fractional degrees */\n        let fdeg = deg + (min / 60.0) + (sec / 3600.0) + (fraction / 3600.0);\n        if (neg)\n            fdeg *= -1.0;\n        /* Return the degrees */\n        return fdeg;\n    }\n    /**\n     * Convert a sexagesimal DMS value to fractional radians.\n     * @param dms the sexagesimal DMS value.\n     * @return the fractional radians.\n     */\n    static dmsToRad(dms) {\n        return Unit.dmsToDeg(dms) * Math.PI / 180.0;\n    }\n    /**\n     * Convert fractional degrees to a sexagesimal DMS value.\n     * @param deg the fractional degrees.\n     * @return the sexagesimal DMS value.\n     */\n    static degToDms(deg) {\n        /* Make sure we have an non-negative number */\n        let neg = (deg < 0.0);\n        if (neg)\n            deg *= -1.0;\n        /* Get the integer degrees */\n        let ideg = Math.floor(deg);\n        deg -= ideg;\n        /* Get the minutes */\n        deg *= 60.0;\n        let min = Math.floor(deg);\n        deg -= min;\n        /* Get the seconds */\n        deg *= 60.0;\n        let sec = deg;\n        /* Convert to DMS */\n        let dms = ideg + (min / 100.0) + (sec / 10000.0);\n        if (neg)\n            dms *= -1.0;\n        /* Return the DMS */\n        return dms;\n    }\n    /**\n     * Convert a sexagesimal DM value to fractional degrees.\n     * @param dm the sexagesimal DM value.\n     * @return the fractional degrees.\n     */\n    static dmToDeg(dm) {\n        /* Make sure we have an non-negative number */\n        let neg = (dm < 0.0);\n        if (neg)\n            dm *= -1.0;\n        /* Get the seconds */\n        let minutes = (100.0 * dm);\n        let iminutes = Math.floor(minutes);\n        let fraction = (minutes - iminutes);\n        /* Catch rounding errors (like 6.1000 to 6.099999999999999) */\n        if (Math.abs(fraction - 1.0) < 1.0e-4) {\n            iminutes++;\n            fraction = 0.0;\n        }\n        /* Get the degrees */\n        let deg = Numbers.divInt(iminutes, 100);\n        ASystem.assertNot((deg < -180) || (deg > 180), \"Invalid deg (\" + deg + \") in DM \" + dm);\n        /* Get the minutes */\n        let min = (iminutes) % 100;\n        ASystem.assertNot((min < 0) || (min > 59), \"Invalid min (\" + min + \") in DM \" + dm);\n        /* Check the fraction */\n        ASystem.assertNot((fraction < 0.0) || (fraction >= 1.0), \"Invalid fraction (\" + fraction + \") in DM \" + dm);\n        /* Convert to fractional degrees */\n        let fdeg = deg + (min / 60.0) + (fraction / 60.0);\n        if (neg)\n            fdeg *= -1.0;\n        /* Return the degrees */\n        return fdeg;\n    }\n    /**\n     * Convert fractional degrees to a sexagesimal DM value.\n     * @param deg the fractional degrees.\n     * @return the sexagesimal DM value.\n     */\n    static degToDm(deg) {\n        /* Make sure we have an non-negative number */\n        let neg = (deg < 0.0);\n        if (neg)\n            deg *= -1.0;\n        /* Get the integer degrees */\n        let ideg = Math.floor(deg);\n        deg -= ideg;\n        /* Get the minutes */\n        deg *= 60.0;\n        let min = deg;\n        /* Convert to DMS */\n        let dms = ideg + (min / 100.0);\n        if (neg)\n            dms *= -1.0;\n        /* Return the DMS */\n        return dms;\n    }\n}\n/** The \"meter\" unit code (length) */\nUnit.METER = 9001;\n/** The \"foot\" unit code (length) */\nUnit.FOOT = 9002;\n/** The \"footUS\" unit code (length) */\nUnit.FOOT_US = 9003;\n/** The \"radian\" unit code (angle) */\nUnit.RADIAN = 9101;\n/** The \"degree\" unit code (angle) */\nUnit.DEGREE = 9102;\n/** The \"unity\" unit code (scale) */\nUnit.UNITY = 9201;\n/** Define the custom unit 'sexagesimal DMS' (9110) */\nUnit._UNIT_DMS = 9110;\n/** Define the custom unit 'sexagesimal DM' (9111) */\nUnit._UNIT_DM = 9111;\n/** The type of units for angles */\nUnit._TYPE_ANGLE = \"angle\";\n/** The type of units for length */\nUnit._TYPE_LENGTH = \"length\";\n/** The type of units for time */\nUnit._TYPE_TIME = \"time\";\n/** The type of units for scale */\nUnit._TYPE_SCALE = \"scale\";\nexport { Unit };\n//# sourceMappingURL=Unit.js.map",
      "start": 1693508127209,
      "end": 1693508127291,
      "sourcemaps": null
    }
  ]
}
