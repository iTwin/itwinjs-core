{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/DecorationGeometryExample.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { assert } from \"@itwin/core-bentley\";\r\nimport { Box, Cone, Point3d, Range3d, Sphere, Transform } from \"@itwin/core-geometry\";\r\nimport { ColorDef, Feature, GeometryClass, GraphicParams, RenderMode, RenderTexture, SkyBox, TextureMapping, TextureTransparency } from \"@itwin/core-common\";\r\nimport { CreateRenderMaterialArgs, DecorateContext, GraphicBranch, GraphicBuilder, GraphicType, imageElementFromUrl, IModelApp, IModelConnection, MaterialTextureMappingProps, StandardViewId, Viewport } from \"@itwin/core-frontend\";\r\nimport { Viewer } from \"./Viewer\";\r\n\r\nclass GeometryDecorator {\r\n  public readonly useCachedDecorations = true;\r\n  private readonly _iModel: IModelConnection;\r\n  private readonly _decorators = new Map<string, (builder: GraphicBuilder) => void>();\r\n  private readonly _viewIndependentOrigin?: Point3d;\r\n  private _texture?: RenderTexture;\r\n  private _normalMap?: RenderTexture;\r\n  private _dispose?: VoidFunction;\r\n\r\n  public constructor(viewport: Viewport, texture: RenderTexture | undefined, normalMap: RenderTexture | undefined, viewIndependentOrigin?: Point3d) {\r\n    this._iModel = viewport.iModel;\r\n    this._viewIndependentOrigin = viewIndependentOrigin;\r\n\r\n    this.addSphere(0, 6);\r\n    this.addBox(3, 6);\r\n    this.addCone(6, 6);\r\n    this.addShape(9, 6);\r\n\r\n    this.addSphere(0, 3);\r\n    this.addBox(3, 3);\r\n    this.addCone(6, 3);\r\n    this.addShape(9, 3);\r\n\r\n    this.addSphere(0, 0);\r\n    this.addBox(3, 0);\r\n    this.addCone(6, 0);\r\n    this.addShape(9, 0);\r\n\r\n    this.addSphere(0, -3);\r\n    this.addBox(3, -3);\r\n    this.addCone(6, -3);\r\n    this.addShape(9, -3);\r\n\r\n    this.addMultiFeatureDecoration();\r\n\r\n    this._texture = texture;\r\n    this._normalMap = normalMap;\r\n\r\n    this._dispose = viewport.iModel.onClose.addListener(() => this.dispose());\r\n  }\r\n\r\n  public dispose(): void {\r\n    if (this._dispose) {\r\n      this._dispose();\r\n      this._dispose = undefined;\r\n    }\r\n\r\n    IModelApp.viewManager.dropDecorator(this);\r\n    this._texture?.dispose();\r\n    this._texture = undefined;\r\n    this._normalMap?.dispose();\r\n    this._normalMap = undefined;\r\n  }\r\n\r\n  public setTextures(texture: RenderTexture | undefined, normalMap: RenderTexture | undefined) {\r\n    this._texture = texture;\r\n    this._normalMap = normalMap;\r\n  }\r\n\r\n  public decorate(context: DecorateContext): void {\r\n    if (context.viewport.iModel !== this._iModel)\r\n      return;\r\n\r\n    let textureIndex = 0;\r\n    const textures = [undefined, undefined, this._texture, this._texture];\r\n    const nMaps = [undefined, this._normalMap, undefined, this._normalMap];\r\n    const transform = new TextureMapping.Trans2x3(2, 0, 0, 0, 2, 0);\r\n    const mode = TextureMapping.Mode.Planar;\r\n    const worldMapping = true;\r\n\r\n    const colors = [ColorDef.blue, ColorDef.red, ColorDef.green, ColorDef.fromString(\"yellow\")];\r\n    let colorIndex = 0;\r\n    const branch = new GraphicBranch();\r\n    for (const [key, value] of this._decorators) {\r\n      const builder = context.createGraphic({\r\n        type: GraphicType.Scene,\r\n        pickable: { id: key },\r\n        viewIndependentOrigin: this._viewIndependentOrigin,\r\n      });\r\n\r\n      const color = colors[colorIndex++];\r\n      if (colorIndex >= colors.length)\r\n        colorIndex = 0;\r\n\r\n      builder.setSymbology(color, color, 1);\r\n\r\n      const ndx = Math.floor(textureIndex++/4);\r\n      const tx = textures[ndx];\r\n      const nm = nMaps[ndx];\r\n      let textureMapping: MaterialTextureMappingProps | undefined;\r\n      if (undefined === nm) {\r\n        if (undefined !== tx)\r\n          textureMapping = { texture: tx, transform, mode, worldMapping };\r\n      } else {\r\n        if (undefined !== tx)\r\n          textureMapping = { texture:tx, transform, mode, worldMapping, normalMapParams: { normalMap: nm }};\r\n        else\r\n          textureMapping = { texture:nm, transform, mode, worldMapping, normalMapParams: {}};\r\n      }\r\n\r\n      const gp = GraphicParams.fromSymbology(color, color, 1);\r\n      if (undefined !== nm || undefined !== tx) {\r\n        const args: CreateRenderMaterialArgs = {\r\n          diffuse: {\r\n            color,\r\n          },\r\n          specular: {\r\n            color: ColorDef.white,\r\n          },\r\n          textureMapping,\r\n        };\r\n        gp.material = IModelApp.renderSystem.createRenderMaterial(args);\r\n      }\r\n      builder.activateGraphicParams(gp);\r\n\r\n      value(builder);\r\n      branch.add(builder.finish());\r\n    }\r\n\r\n    const graphic = context.createGraphicBranch(branch, Transform.createIdentity());\r\n    context.addDecoration(GraphicType.Scene, graphic);\r\n  }\r\n\r\n  private addShape(ox: number, oy: number = 0): void {\r\n    const points = [\r\n      new Point3d(ox, oy, 0), new Point3d(ox + 1, oy, 0), new Point3d(ox + 1, oy + 1, 1), new Point3d(ox, oy + 1, 1), new Point3d(ox, oy, 0),\r\n    ];\r\n    this._decorators.set(this._iModel.transientIds.getNext(), (builder) => builder.addShape(points));\r\n  }\r\n\r\n  private addDecorator(decorate: (builder: GraphicBuilder) => void): void {\r\n    this._decorators.set(this._iModel.transientIds.getNext(), decorate);\r\n  }\r\n\r\n  private addBox(cx: number, cy: number = 0): void {\r\n    const box = Box.createRange(new Range3d(cx, cy, 0, cx + 1, cy + 1, 1), true);\r\n    if (box)\r\n      this.addDecorator((builder) => builder.addSolidPrimitive(box));\r\n  }\r\n\r\n  private addSphere(cx: number, cy: number = 0): void {\r\n    const sphere = Sphere.createCenterRadius(new Point3d(cx + 0.5, cy + 0.5, 0.5), 0.5);\r\n    this.addDecorator((builder) => builder.addSolidPrimitive(sphere));\r\n  }\r\n\r\n  private addCone(cx: number, cy: number = 0): void {\r\n    const cone = Cone.createAxisPoints(new Point3d(cx + 0.5, cy + 0.5, 0), new Point3d(cx + 0.5, cy + 0.5, 1), 0.5, 0.25, true);\r\n    if (cone)\r\n      this.addDecorator((builder) => builder.addSolidPrimitive(cone));\r\n  }\r\n\r\n  private addMultiFeatureDecoration(): void {\r\n    const y = 9;\r\n    const boxId = this._iModel.transientIds.getNext(),\r\n      sphereId = this._iModel.transientIds.getNext(),\r\n      coneId = this._iModel.transientIds.getNext();\r\n\r\n    this._decorators.set(this._iModel.transientIds.getNext(), (builder) => {\r\n      builder.addShape([ new Point3d(0, y, 0), new Point3d(1, y, 0), new Point3d(1, y + 1, 1), new Point3d(0, y + 1, 1), new Point3d(0, y, 0) ]);\r\n\r\n      builder.activatePickableId(boxId);\r\n      const box = Box.createRange(new Range3d(3, y, 0, 4, y + 1, 1), true);\r\n      assert(undefined !== box);\r\n      builder.addSolidPrimitive(box);\r\n\r\n      builder.activateFeature(new Feature(sphereId, undefined, GeometryClass.Construction));\r\n      const sphere = Sphere.createCenterRadius(new Point3d(6.5, y + 0.5, 0.5), 0.5);\r\n      builder.addSolidPrimitive(sphere);\r\n\r\n      builder.activatePickableId(coneId);\r\n      const cone = Cone.createAxisPoints(new Point3d(9.5, y + 0.5, 0), new Point3d(9.5, y + 0.5, 1), 0.5, 0.25, true);\r\n      assert(undefined !== cone);\r\n      builder.addSolidPrimitive(cone);\r\n    });\r\n  }\r\n}\r\n\r\nexport async function openDecorationGeometryExample(viewer: Viewer) {\r\n  const viewIndependentOrigin = undefined; // new Point3d(4, 0, 0) -- uncomment for testing.\r\n  const gd = new GeometryDecorator(viewer.viewport, undefined, undefined, viewIndependentOrigin);\r\n  IModelApp.viewManager.addDecorator(gd);\r\n\r\n  assert(viewer.viewport.view.is3d());\r\n  viewer.viewport.setStandardRotation(StandardViewId.Iso);\r\n  viewer.viewport.turnCameraOn();\r\n  viewer.viewport.zoomToVolume(viewer.viewport.iModel.projectExtents);\r\n\r\n  viewer.viewport.viewFlags = viewer.viewport.viewFlags.copy({\r\n    renderMode: RenderMode.SmoothShade,\r\n    lighting: true,\r\n    visibleEdges: true,\r\n    whiteOnWhiteReversal: false,\r\n    backgroundMap: true,\r\n  });\r\n\r\n  const settings = viewer.viewport.view.getDisplayStyle3d().settings;\r\n  settings.environment = settings.environment.clone({\r\n    displaySky: true,\r\n    sky: SkyBox.fromJSON({ twoColor: true, nadirColor: 0xdfefff, zenithColor: 0xffefdf }),\r\n  });\r\n\r\n  const txrEl = await imageElementFromUrl(\"brick05baseColor.jpg\");\r\n  const texture = IModelApp.renderSystem.createTexture({ image: { source: txrEl, transparency: TextureTransparency.Opaque }, ownership: \"external\" });\r\n\r\n  const nMapEl = await imageElementFromUrl(\"brick05normal.jpg\");\r\n  const normalMap = IModelApp.renderSystem.createTexture({ image: { source: nMapEl, transparency: TextureTransparency.Opaque }, ownership: \"external\" });\r\n\r\n  gd.setTextures(texture, normalMap);\r\n}\r\n",
      "start": 1693508121314,
      "end": 1693508121600,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { assert } from \"@itwin/core-bentley\";\nimport { Box, Cone, Point3d, Range3d, Sphere, Transform } from \"@itwin/core-geometry\";\nimport { ColorDef, Feature, GeometryClass, GraphicParams, RenderMode, SkyBox, TextureMapping, TextureTransparency } from \"@itwin/core-common\";\nimport { GraphicBranch, GraphicType, imageElementFromUrl, IModelApp, StandardViewId } from \"@itwin/core-frontend\";\nclass GeometryDecorator {\n  constructor(viewport, texture, normalMap, viewIndependentOrigin) {\n    this.useCachedDecorations = true;\n    this._decorators = /* @__PURE__ */ new Map();\n    this._iModel = viewport.iModel;\n    this._viewIndependentOrigin = viewIndependentOrigin;\n    this.addSphere(0, 6);\n    this.addBox(3, 6);\n    this.addCone(6, 6);\n    this.addShape(9, 6);\n    this.addSphere(0, 3);\n    this.addBox(3, 3);\n    this.addCone(6, 3);\n    this.addShape(9, 3);\n    this.addSphere(0, 0);\n    this.addBox(3, 0);\n    this.addCone(6, 0);\n    this.addShape(9, 0);\n    this.addSphere(0, -3);\n    this.addBox(3, -3);\n    this.addCone(6, -3);\n    this.addShape(9, -3);\n    this.addMultiFeatureDecoration();\n    this._texture = texture;\n    this._normalMap = normalMap;\n    this._dispose = viewport.iModel.onClose.addListener(() => this.dispose());\n  }\n  dispose() {\n    if (this._dispose) {\n      this._dispose();\n      this._dispose = void 0;\n    }\n    IModelApp.viewManager.dropDecorator(this);\n    this._texture?.dispose();\n    this._texture = void 0;\n    this._normalMap?.dispose();\n    this._normalMap = void 0;\n  }\n  setTextures(texture, normalMap) {\n    this._texture = texture;\n    this._normalMap = normalMap;\n  }\n  decorate(context) {\n    if (context.viewport.iModel !== this._iModel)\n      return;\n    let textureIndex = 0;\n    const textures = [void 0, void 0, this._texture, this._texture];\n    const nMaps = [void 0, this._normalMap, void 0, this._normalMap];\n    const transform = new TextureMapping.Trans2x3(2, 0, 0, 0, 2, 0);\n    const mode = TextureMapping.Mode.Planar;\n    const worldMapping = true;\n    const colors = [ColorDef.blue, ColorDef.red, ColorDef.green, ColorDef.fromString(\"yellow\")];\n    let colorIndex = 0;\n    const branch = new GraphicBranch();\n    for (const [key, value] of this._decorators) {\n      const builder = context.createGraphic({\n        type: GraphicType.Scene,\n        pickable: { id: key },\n        viewIndependentOrigin: this._viewIndependentOrigin\n      });\n      const color = colors[colorIndex++];\n      if (colorIndex >= colors.length)\n        colorIndex = 0;\n      builder.setSymbology(color, color, 1);\n      const ndx = Math.floor(textureIndex++ / 4);\n      const tx = textures[ndx];\n      const nm = nMaps[ndx];\n      let textureMapping;\n      if (void 0 === nm) {\n        if (void 0 !== tx)\n          textureMapping = { texture: tx, transform, mode, worldMapping };\n      } else {\n        if (void 0 !== tx)\n          textureMapping = { texture: tx, transform, mode, worldMapping, normalMapParams: { normalMap: nm } };\n        else\n          textureMapping = { texture: nm, transform, mode, worldMapping, normalMapParams: {} };\n      }\n      const gp = GraphicParams.fromSymbology(color, color, 1);\n      if (void 0 !== nm || void 0 !== tx) {\n        const args = {\n          diffuse: {\n            color\n          },\n          specular: {\n            color: ColorDef.white\n          },\n          textureMapping\n        };\n        gp.material = IModelApp.renderSystem.createRenderMaterial(args);\n      }\n      builder.activateGraphicParams(gp);\n      value(builder);\n      branch.add(builder.finish());\n    }\n    const graphic = context.createGraphicBranch(branch, Transform.createIdentity());\n    context.addDecoration(GraphicType.Scene, graphic);\n  }\n  addShape(ox, oy = 0) {\n    const points = [\n      new Point3d(ox, oy, 0),\n      new Point3d(ox + 1, oy, 0),\n      new Point3d(ox + 1, oy + 1, 1),\n      new Point3d(ox, oy + 1, 1),\n      new Point3d(ox, oy, 0)\n    ];\n    this._decorators.set(this._iModel.transientIds.getNext(), (builder) => builder.addShape(points));\n  }\n  addDecorator(decorate) {\n    this._decorators.set(this._iModel.transientIds.getNext(), decorate);\n  }\n  addBox(cx, cy = 0) {\n    const box = Box.createRange(new Range3d(cx, cy, 0, cx + 1, cy + 1, 1), true);\n    if (box)\n      this.addDecorator((builder) => builder.addSolidPrimitive(box));\n  }\n  addSphere(cx, cy = 0) {\n    const sphere = Sphere.createCenterRadius(new Point3d(cx + 0.5, cy + 0.5, 0.5), 0.5);\n    this.addDecorator((builder) => builder.addSolidPrimitive(sphere));\n  }\n  addCone(cx, cy = 0) {\n    const cone = Cone.createAxisPoints(new Point3d(cx + 0.5, cy + 0.5, 0), new Point3d(cx + 0.5, cy + 0.5, 1), 0.5, 0.25, true);\n    if (cone)\n      this.addDecorator((builder) => builder.addSolidPrimitive(cone));\n  }\n  addMultiFeatureDecoration() {\n    const y = 9;\n    const boxId = this._iModel.transientIds.getNext(), sphereId = this._iModel.transientIds.getNext(), coneId = this._iModel.transientIds.getNext();\n    this._decorators.set(this._iModel.transientIds.getNext(), (builder) => {\n      builder.addShape([new Point3d(0, y, 0), new Point3d(1, y, 0), new Point3d(1, y + 1, 1), new Point3d(0, y + 1, 1), new Point3d(0, y, 0)]);\n      builder.activatePickableId(boxId);\n      const box = Box.createRange(new Range3d(3, y, 0, 4, y + 1, 1), true);\n      assert(void 0 !== box);\n      builder.addSolidPrimitive(box);\n      builder.activateFeature(new Feature(sphereId, void 0, GeometryClass.Construction));\n      const sphere = Sphere.createCenterRadius(new Point3d(6.5, y + 0.5, 0.5), 0.5);\n      builder.addSolidPrimitive(sphere);\n      builder.activatePickableId(coneId);\n      const cone = Cone.createAxisPoints(new Point3d(9.5, y + 0.5, 0), new Point3d(9.5, y + 0.5, 1), 0.5, 0.25, true);\n      assert(void 0 !== cone);\n      builder.addSolidPrimitive(cone);\n    });\n  }\n}\nexport async function openDecorationGeometryExample(viewer) {\n  const viewIndependentOrigin = void 0;\n  const gd = new GeometryDecorator(viewer.viewport, void 0, void 0, viewIndependentOrigin);\n  IModelApp.viewManager.addDecorator(gd);\n  assert(viewer.viewport.view.is3d());\n  viewer.viewport.setStandardRotation(StandardViewId.Iso);\n  viewer.viewport.turnCameraOn();\n  viewer.viewport.zoomToVolume(viewer.viewport.iModel.projectExtents);\n  viewer.viewport.viewFlags = viewer.viewport.viewFlags.copy({\n    renderMode: RenderMode.SmoothShade,\n    lighting: true,\n    visibleEdges: true,\n    whiteOnWhiteReversal: false,\n    backgroundMap: true\n  });\n  const settings = viewer.viewport.view.getDisplayStyle3d().settings;\n  settings.environment = settings.environment.clone({\n    displaySky: true,\n    sky: SkyBox.fromJSON({ twoColor: true, nadirColor: 14675967, zenithColor: 16773087 })\n  });\n  const txrEl = await imageElementFromUrl(\"brick05baseColor.jpg\");\n  const texture = IModelApp.renderSystem.createTexture({ image: { source: txrEl, transparency: TextureTransparency.Opaque }, ownership: \"external\" });\n  const nMapEl = await imageElementFromUrl(\"brick05normal.jpg\");\n  const normalMap = IModelApp.renderSystem.createTexture({ image: { source: nMapEl, transparency: TextureTransparency.Opaque }, ownership: \"external\" });\n  gd.setTextures(texture, normalMap);\n}\n",
      "start": 1693508121600,
      "end": 1693508121744,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/DecorationGeometryExample.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { assert } from \"@itwin/core-bentley\";\r\nimport { Box, Cone, Point3d, Range3d, Sphere, Transform } from \"@itwin/core-geometry\";\r\nimport { ColorDef, Feature, GeometryClass, GraphicParams, RenderMode, RenderTexture, SkyBox, TextureMapping, TextureTransparency } from \"@itwin/core-common\";\r\nimport { CreateRenderMaterialArgs, DecorateContext, GraphicBranch, GraphicBuilder, GraphicType, imageElementFromUrl, IModelApp, IModelConnection, MaterialTextureMappingProps, StandardViewId, Viewport } from \"@itwin/core-frontend\";\r\nimport { Viewer } from \"./Viewer\";\r\n\r\nclass GeometryDecorator {\r\n  public readonly useCachedDecorations = true;\r\n  private readonly _iModel: IModelConnection;\r\n  private readonly _decorators = new Map<string, (builder: GraphicBuilder) => void>();\r\n  private readonly _viewIndependentOrigin?: Point3d;\r\n  private _texture?: RenderTexture;\r\n  private _normalMap?: RenderTexture;\r\n  private _dispose?: VoidFunction;\r\n\r\n  public constructor(viewport: Viewport, texture: RenderTexture | undefined, normalMap: RenderTexture | undefined, viewIndependentOrigin?: Point3d) {\r\n    this._iModel = viewport.iModel;\r\n    this._viewIndependentOrigin = viewIndependentOrigin;\r\n\r\n    this.addSphere(0, 6);\r\n    this.addBox(3, 6);\r\n    this.addCone(6, 6);\r\n    this.addShape(9, 6);\r\n\r\n    this.addSphere(0, 3);\r\n    this.addBox(3, 3);\r\n    this.addCone(6, 3);\r\n    this.addShape(9, 3);\r\n\r\n    this.addSphere(0, 0);\r\n    this.addBox(3, 0);\r\n    this.addCone(6, 0);\r\n    this.addShape(9, 0);\r\n\r\n    this.addSphere(0, -3);\r\n    this.addBox(3, -3);\r\n    this.addCone(6, -3);\r\n    this.addShape(9, -3);\r\n\r\n    this.addMultiFeatureDecoration();\r\n\r\n    this._texture = texture;\r\n    this._normalMap = normalMap;\r\n\r\n    this._dispose = viewport.iModel.onClose.addListener(() => this.dispose());\r\n  }\r\n\r\n  public dispose(): void {\r\n    if (this._dispose) {\r\n      this._dispose();\r\n      this._dispose = undefined;\r\n    }\r\n\r\n    IModelApp.viewManager.dropDecorator(this);\r\n    this._texture?.dispose();\r\n    this._texture = undefined;\r\n    this._normalMap?.dispose();\r\n    this._normalMap = undefined;\r\n  }\r\n\r\n  public setTextures(texture: RenderTexture | undefined, normalMap: RenderTexture | undefined) {\r\n    this._texture = texture;\r\n    this._normalMap = normalMap;\r\n  }\r\n\r\n  public decorate(context: DecorateContext): void {\r\n    if (context.viewport.iModel !== this._iModel)\r\n      return;\r\n\r\n    let textureIndex = 0;\r\n    const textures = [undefined, undefined, this._texture, this._texture];\r\n    const nMaps = [undefined, this._normalMap, undefined, this._normalMap];\r\n    const transform = new TextureMapping.Trans2x3(2, 0, 0, 0, 2, 0);\r\n    const mode = TextureMapping.Mode.Planar;\r\n    const worldMapping = true;\r\n\r\n    const colors = [ColorDef.blue, ColorDef.red, ColorDef.green, ColorDef.fromString(\"yellow\")];\r\n    let colorIndex = 0;\r\n    const branch = new GraphicBranch();\r\n    for (const [key, value] of this._decorators) {\r\n      const builder = context.createGraphic({\r\n        type: GraphicType.Scene,\r\n        pickable: { id: key },\r\n        viewIndependentOrigin: this._viewIndependentOrigin,\r\n      });\r\n\r\n      const color = colors[colorIndex++];\r\n      if (colorIndex >= colors.length)\r\n        colorIndex = 0;\r\n\r\n      builder.setSymbology(color, color, 1);\r\n\r\n      const ndx = Math.floor(textureIndex++/4);\r\n      const tx = textures[ndx];\r\n      const nm = nMaps[ndx];\r\n      let textureMapping: MaterialTextureMappingProps | undefined;\r\n      if (undefined === nm) {\r\n        if (undefined !== tx)\r\n          textureMapping = { texture: tx, transform, mode, worldMapping };\r\n      } else {\r\n        if (undefined !== tx)\r\n          textureMapping = { texture:tx, transform, mode, worldMapping, normalMapParams: { normalMap: nm }};\r\n        else\r\n          textureMapping = { texture:nm, transform, mode, worldMapping, normalMapParams: {}};\r\n      }\r\n\r\n      const gp = GraphicParams.fromSymbology(color, color, 1);\r\n      if (undefined !== nm || undefined !== tx) {\r\n        const args: CreateRenderMaterialArgs = {\r\n          diffuse: {\r\n            color,\r\n          },\r\n          specular: {\r\n            color: ColorDef.white,\r\n          },\r\n          textureMapping,\r\n        };\r\n        gp.material = IModelApp.renderSystem.createRenderMaterial(args);\r\n      }\r\n      builder.activateGraphicParams(gp);\r\n\r\n      value(builder);\r\n      branch.add(builder.finish());\r\n    }\r\n\r\n    const graphic = context.createGraphicBranch(branch, Transform.createIdentity());\r\n    context.addDecoration(GraphicType.Scene, graphic);\r\n  }\r\n\r\n  private addShape(ox: number, oy: number = 0): void {\r\n    const points = [\r\n      new Point3d(ox, oy, 0), new Point3d(ox + 1, oy, 0), new Point3d(ox + 1, oy + 1, 1), new Point3d(ox, oy + 1, 1), new Point3d(ox, oy, 0),\r\n    ];\r\n    this._decorators.set(this._iModel.transientIds.getNext(), (builder) => builder.addShape(points));\r\n  }\r\n\r\n  private addDecorator(decorate: (builder: GraphicBuilder) => void): void {\r\n    this._decorators.set(this._iModel.transientIds.getNext(), decorate);\r\n  }\r\n\r\n  private addBox(cx: number, cy: number = 0): void {\r\n    const box = Box.createRange(new Range3d(cx, cy, 0, cx + 1, cy + 1, 1), true);\r\n    if (box)\r\n      this.addDecorator((builder) => builder.addSolidPrimitive(box));\r\n  }\r\n\r\n  private addSphere(cx: number, cy: number = 0): void {\r\n    const sphere = Sphere.createCenterRadius(new Point3d(cx + 0.5, cy + 0.5, 0.5), 0.5);\r\n    this.addDecorator((builder) => builder.addSolidPrimitive(sphere));\r\n  }\r\n\r\n  private addCone(cx: number, cy: number = 0): void {\r\n    const cone = Cone.createAxisPoints(new Point3d(cx + 0.5, cy + 0.5, 0), new Point3d(cx + 0.5, cy + 0.5, 1), 0.5, 0.25, true);\r\n    if (cone)\r\n      this.addDecorator((builder) => builder.addSolidPrimitive(cone));\r\n  }\r\n\r\n  private addMultiFeatureDecoration(): void {\r\n    const y = 9;\r\n    const boxId = this._iModel.transientIds.getNext(),\r\n      sphereId = this._iModel.transientIds.getNext(),\r\n      coneId = this._iModel.transientIds.getNext();\r\n\r\n    this._decorators.set(this._iModel.transientIds.getNext(), (builder) => {\r\n      builder.addShape([ new Point3d(0, y, 0), new Point3d(1, y, 0), new Point3d(1, y + 1, 1), new Point3d(0, y + 1, 1), new Point3d(0, y, 0) ]);\r\n\r\n      builder.activatePickableId(boxId);\r\n      const box = Box.createRange(new Range3d(3, y, 0, 4, y + 1, 1), true);\r\n      assert(undefined !== box);\r\n      builder.addSolidPrimitive(box);\r\n\r\n      builder.activateFeature(new Feature(sphereId, undefined, GeometryClass.Construction));\r\n      const sphere = Sphere.createCenterRadius(new Point3d(6.5, y + 0.5, 0.5), 0.5);\r\n      builder.addSolidPrimitive(sphere);\r\n\r\n      builder.activatePickableId(coneId);\r\n      const cone = Cone.createAxisPoints(new Point3d(9.5, y + 0.5, 0), new Point3d(9.5, y + 0.5, 1), 0.5, 0.25, true);\r\n      assert(undefined !== cone);\r\n      builder.addSolidPrimitive(cone);\r\n    });\r\n  }\r\n}\r\n\r\nexport async function openDecorationGeometryExample(viewer: Viewer) {\r\n  const viewIndependentOrigin = undefined; // new Point3d(4, 0, 0) -- uncomment for testing.\r\n  const gd = new GeometryDecorator(viewer.viewport, undefined, undefined, viewIndependentOrigin);\r\n  IModelApp.viewManager.addDecorator(gd);\r\n\r\n  assert(viewer.viewport.view.is3d());\r\n  viewer.viewport.setStandardRotation(StandardViewId.Iso);\r\n  viewer.viewport.turnCameraOn();\r\n  viewer.viewport.zoomToVolume(viewer.viewport.iModel.projectExtents);\r\n\r\n  viewer.viewport.viewFlags = viewer.viewport.viewFlags.copy({\r\n    renderMode: RenderMode.SmoothShade,\r\n    lighting: true,\r\n    visibleEdges: true,\r\n    whiteOnWhiteReversal: false,\r\n    backgroundMap: true,\r\n  });\r\n\r\n  const settings = viewer.viewport.view.getDisplayStyle3d().settings;\r\n  settings.environment = settings.environment.clone({\r\n    displaySky: true,\r\n    sky: SkyBox.fromJSON({ twoColor: true, nadirColor: 0xdfefff, zenithColor: 0xffefdf }),\r\n  });\r\n\r\n  const txrEl = await imageElementFromUrl(\"brick05baseColor.jpg\");\r\n  const texture = IModelApp.renderSystem.createTexture({ image: { source: txrEl, transparency: TextureTransparency.Opaque }, ownership: \"external\" });\r\n\r\n  const nMapEl = await imageElementFromUrl(\"brick05normal.jpg\");\r\n  const normalMap = IModelApp.renderSystem.createTexture({ image: { source: nMapEl, transparency: TextureTransparency.Opaque }, ownership: \"external\" });\r\n\r\n  gd.setTextures(texture, normalMap);\r\n}\r\n"
        ],
        "mappings": "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",
        "names": []
      }
    }
  ]
}
