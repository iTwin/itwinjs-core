{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/TimePointComparison.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport {\r\n  ClipPlane, ClipPrimitive, ClipVector, ConvexClipPlaneSet, Point3d, Transform, Vector3d,\r\n} from \"@itwin/core-geometry\";\r\nimport {\r\n  AccuDrawHintBuilder,\r\n  FeatureSymbology, GraphicBranch, IModelApp, RenderClipVolume, SceneContext, ScreenViewport, TileTreeReference, Tool,\r\n} from \"@itwin/core-frontend\";\r\n\r\n/** Prototype for SYNCHRO feature. Split the viewport down the middle. Left-hand side remains frozen at current time point. Right-hand side updates when time point changes. */\r\nclass TimePointComparison {\r\n  private readonly _clipVolume?: RenderClipVolume;\r\n  private readonly _timePoint: number;\r\n\r\n  private constructor(clip: ClipVector, timePoint: number) {\r\n    this._clipVolume = IModelApp.renderSystem.createClipVolume(clip);\r\n    this._timePoint = timePoint;\r\n  }\r\n\r\n  public forEachTileTreeRef(viewport: ScreenViewport, func: (ref: TileTreeReference) => void): void {\r\n    viewport.view.forEachTileTreeRef(func);\r\n  }\r\n\r\n  public addToScene(output: SceneContext): void {\r\n    const vp = output.viewport;\r\n    const clip = vp.view.getViewClip();\r\n    const timePoint = vp.timePoint;\r\n\r\n    vp.view.setViewClip(this._clipVolume?.clipVector);\r\n    vp.displayStyle.settings.timePoint = this._timePoint;\r\n\r\n    const context = vp.createSceneContext();\r\n    vp.createScene(context);\r\n\r\n    const gfx = context.graphics;\r\n    if (0 < gfx.length) {\r\n      const ovrs = new FeatureSymbology.Overrides(vp);\r\n\r\n      const branch = new GraphicBranch();\r\n      branch.symbologyOverrides = ovrs;\r\n      for (const gf of gfx)\r\n        branch.entries.push(gf);\r\n\r\n      output.outputGraphic(IModelApp.renderSystem.createGraphicBranch(branch, Transform.createIdentity(), { clipVolume: this._clipVolume }));\r\n    }\r\n\r\n    vp.view.setViewClip(clip);\r\n    vp.displayStyle.settings.timePoint = timePoint;\r\n  }\r\n\r\n  public static toggle(vp: ScreenViewport): void {\r\n    if (!vp.view.isSpatialView())\r\n      return;\r\n\r\n    let provider: TimePointComparison | undefined;\r\n    vp.forEachTiledGraphicsProvider((x) => {\r\n      if (x instanceof TimePointComparison)\r\n        provider = x;\r\n    });\r\n\r\n    if (!provider) {\r\n      const timePoint = vp.timePoint ?? vp.view.displayStyle.scheduleScript?.duration.low;\r\n      if (undefined === timePoint)\r\n        return;\r\n\r\n      const rect = vp.getClientRect();\r\n      let point = new Point3d(rect.width / 2, rect.height / 2, 0);\r\n      point = vp.viewToWorld(point);\r\n\r\n      const boresite = AccuDrawHintBuilder.getBoresite(point, vp);\r\n      const viewY = vp.rotation.rowY();\r\n      const normal = viewY.crossProduct(boresite.direction);\r\n\r\n      const createClip = (vec: Vector3d, pt: Point3d) => {\r\n        const plane = ClipPlane.createNormalAndPoint(vec, pt)!;\r\n        const planes = ConvexClipPlaneSet.createPlanes([plane]);\r\n        return ClipVector.createCapture([ClipPrimitive.createCapture(planes)]);\r\n      };\r\n\r\n      vp.addTiledGraphicsProvider(new TimePointComparison(createClip(normal, point), timePoint));\r\n      vp.view.setViewClip(createClip(normal.negate(), point));\r\n      vp.viewFlags = vp.viewFlags.with(\"clipVolume\", true);\r\n    } else {\r\n      vp.dropTiledGraphicsProvider(provider);\r\n      vp.view.setViewClip(undefined);\r\n    }\r\n\r\n    vp.invalidateScene();\r\n  }\r\n}\r\n\r\nexport class TimePointComparisonTool extends Tool {\r\n  public static override toolId = \"ToggleTimePointComparison\";\r\n\r\n  public override async run(): Promise<boolean> {\r\n    const vp = IModelApp.viewManager.selectedView;\r\n    if (vp)\r\n      TimePointComparison.toggle(vp);\r\n\r\n    return true;\r\n  }\r\n}\r\n",
      "start": 1693508121253,
      "end": 1693508121315,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport {\n  ClipPlane,\n  ClipPrimitive,\n  ClipVector,\n  ConvexClipPlaneSet,\n  Point3d,\n  Transform\n} from \"@itwin/core-geometry\";\nimport {\n  AccuDrawHintBuilder,\n  FeatureSymbology,\n  GraphicBranch,\n  IModelApp,\n  Tool\n} from \"@itwin/core-frontend\";\nclass TimePointComparison {\n  constructor(clip, timePoint) {\n    this._clipVolume = IModelApp.renderSystem.createClipVolume(clip);\n    this._timePoint = timePoint;\n  }\n  forEachTileTreeRef(viewport, func) {\n    viewport.view.forEachTileTreeRef(func);\n  }\n  addToScene(output) {\n    const vp = output.viewport;\n    const clip = vp.view.getViewClip();\n    const timePoint = vp.timePoint;\n    vp.view.setViewClip(this._clipVolume?.clipVector);\n    vp.displayStyle.settings.timePoint = this._timePoint;\n    const context = vp.createSceneContext();\n    vp.createScene(context);\n    const gfx = context.graphics;\n    if (0 < gfx.length) {\n      const ovrs = new FeatureSymbology.Overrides(vp);\n      const branch = new GraphicBranch();\n      branch.symbologyOverrides = ovrs;\n      for (const gf of gfx)\n        branch.entries.push(gf);\n      output.outputGraphic(IModelApp.renderSystem.createGraphicBranch(branch, Transform.createIdentity(), { clipVolume: this._clipVolume }));\n    }\n    vp.view.setViewClip(clip);\n    vp.displayStyle.settings.timePoint = timePoint;\n  }\n  static toggle(vp) {\n    if (!vp.view.isSpatialView())\n      return;\n    let provider;\n    vp.forEachTiledGraphicsProvider((x) => {\n      if (x instanceof TimePointComparison)\n        provider = x;\n    });\n    if (!provider) {\n      const timePoint = vp.timePoint ?? vp.view.displayStyle.scheduleScript?.duration.low;\n      if (void 0 === timePoint)\n        return;\n      const rect = vp.getClientRect();\n      let point = new Point3d(rect.width / 2, rect.height / 2, 0);\n      point = vp.viewToWorld(point);\n      const boresite = AccuDrawHintBuilder.getBoresite(point, vp);\n      const viewY = vp.rotation.rowY();\n      const normal = viewY.crossProduct(boresite.direction);\n      const createClip = (vec, pt) => {\n        const plane = ClipPlane.createNormalAndPoint(vec, pt);\n        const planes = ConvexClipPlaneSet.createPlanes([plane]);\n        return ClipVector.createCapture([ClipPrimitive.createCapture(planes)]);\n      };\n      vp.addTiledGraphicsProvider(new TimePointComparison(createClip(normal, point), timePoint));\n      vp.view.setViewClip(createClip(normal.negate(), point));\n      vp.viewFlags = vp.viewFlags.with(\"clipVolume\", true);\n    } else {\n      vp.dropTiledGraphicsProvider(provider);\n      vp.view.setViewClip(void 0);\n    }\n    vp.invalidateScene();\n  }\n}\nexport class TimePointComparisonTool extends Tool {\n  async run() {\n    const vp = IModelApp.viewManager.selectedView;\n    if (vp)\n      TimePointComparison.toggle(vp);\n    return true;\n  }\n}\nTimePointComparisonTool.toolId = \"ToggleTimePointComparison\";\n",
      "start": 1693508121315,
      "end": 1693508121469,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/TimePointComparison.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport {\r\n  ClipPlane, ClipPrimitive, ClipVector, ConvexClipPlaneSet, Point3d, Transform, Vector3d,\r\n} from \"@itwin/core-geometry\";\r\nimport {\r\n  AccuDrawHintBuilder,\r\n  FeatureSymbology, GraphicBranch, IModelApp, RenderClipVolume, SceneContext, ScreenViewport, TileTreeReference, Tool,\r\n} from \"@itwin/core-frontend\";\r\n\r\n/** Prototype for SYNCHRO feature. Split the viewport down the middle. Left-hand side remains frozen at current time point. Right-hand side updates when time point changes. */\r\nclass TimePointComparison {\r\n  private readonly _clipVolume?: RenderClipVolume;\r\n  private readonly _timePoint: number;\r\n\r\n  private constructor(clip: ClipVector, timePoint: number) {\r\n    this._clipVolume = IModelApp.renderSystem.createClipVolume(clip);\r\n    this._timePoint = timePoint;\r\n  }\r\n\r\n  public forEachTileTreeRef(viewport: ScreenViewport, func: (ref: TileTreeReference) => void): void {\r\n    viewport.view.forEachTileTreeRef(func);\r\n  }\r\n\r\n  public addToScene(output: SceneContext): void {\r\n    const vp = output.viewport;\r\n    const clip = vp.view.getViewClip();\r\n    const timePoint = vp.timePoint;\r\n\r\n    vp.view.setViewClip(this._clipVolume?.clipVector);\r\n    vp.displayStyle.settings.timePoint = this._timePoint;\r\n\r\n    const context = vp.createSceneContext();\r\n    vp.createScene(context);\r\n\r\n    const gfx = context.graphics;\r\n    if (0 < gfx.length) {\r\n      const ovrs = new FeatureSymbology.Overrides(vp);\r\n\r\n      const branch = new GraphicBranch();\r\n      branch.symbologyOverrides = ovrs;\r\n      for (const gf of gfx)\r\n        branch.entries.push(gf);\r\n\r\n      output.outputGraphic(IModelApp.renderSystem.createGraphicBranch(branch, Transform.createIdentity(), { clipVolume: this._clipVolume }));\r\n    }\r\n\r\n    vp.view.setViewClip(clip);\r\n    vp.displayStyle.settings.timePoint = timePoint;\r\n  }\r\n\r\n  public static toggle(vp: ScreenViewport): void {\r\n    if (!vp.view.isSpatialView())\r\n      return;\r\n\r\n    let provider: TimePointComparison | undefined;\r\n    vp.forEachTiledGraphicsProvider((x) => {\r\n      if (x instanceof TimePointComparison)\r\n        provider = x;\r\n    });\r\n\r\n    if (!provider) {\r\n      const timePoint = vp.timePoint ?? vp.view.displayStyle.scheduleScript?.duration.low;\r\n      if (undefined === timePoint)\r\n        return;\r\n\r\n      const rect = vp.getClientRect();\r\n      let point = new Point3d(rect.width / 2, rect.height / 2, 0);\r\n      point = vp.viewToWorld(point);\r\n\r\n      const boresite = AccuDrawHintBuilder.getBoresite(point, vp);\r\n      const viewY = vp.rotation.rowY();\r\n      const normal = viewY.crossProduct(boresite.direction);\r\n\r\n      const createClip = (vec: Vector3d, pt: Point3d) => {\r\n        const plane = ClipPlane.createNormalAndPoint(vec, pt)!;\r\n        const planes = ConvexClipPlaneSet.createPlanes([plane]);\r\n        return ClipVector.createCapture([ClipPrimitive.createCapture(planes)]);\r\n      };\r\n\r\n      vp.addTiledGraphicsProvider(new TimePointComparison(createClip(normal, point), timePoint));\r\n      vp.view.setViewClip(createClip(normal.negate(), point));\r\n      vp.viewFlags = vp.viewFlags.with(\"clipVolume\", true);\r\n    } else {\r\n      vp.dropTiledGraphicsProvider(provider);\r\n      vp.view.setViewClip(undefined);\r\n    }\r\n\r\n    vp.invalidateScene();\r\n  }\r\n}\r\n\r\nexport class TimePointComparisonTool extends Tool {\r\n  public static override toolId = \"ToggleTimePointComparison\";\r\n\r\n  public override async run(): Promise<boolean> {\r\n    const vp = IModelApp.viewManager.selectedView;\r\n    if (vp)\r\n      TimePointComparison.toggle(vp);\r\n\r\n    return true;\r\n  }\r\n}\r\n"
        ],
        "mappings": ";AAKA;AAAA,EACE;AAAA,EAAW;AAAA,EAAe;AAAA,EAAY;AAAA,EAAoB;AAAA,EAAS;AAAA,OAC9D;AACP;AAAA,EACE;AAAA,EACA;AAAA,EAAkB;AAAA,EAAe;AAAA,EAA8E;AAAA,OAC1G;AAGP,MAAM,oBAAoB;AAAA,EAIhB,YAAY,MAAkB,WAAmB;AACvD,SAAK,cAAc,UAAU,aAAa,iBAAiB,IAAI;AAC/D,SAAK,aAAa;AAAA,EACpB;AAAA,EAEO,mBAAmB,UAA0B,MAA8C;AAChG,aAAS,KAAK,mBAAmB,IAAI;AAAA,EACvC;AAAA,EAEO,WAAW,QAA4B;AAC5C,UAAM,KAAK,OAAO;AAClB,UAAM,OAAO,GAAG,KAAK,YAAY;AACjC,UAAM,YAAY,GAAG;AAErB,OAAG,KAAK,YAAY,KAAK,aAAa,UAAU;AAChD,OAAG,aAAa,SAAS,YAAY,KAAK;AAE1C,UAAM,UAAU,GAAG,mBAAmB;AACtC,OAAG,YAAY,OAAO;AAEtB,UAAM,MAAM,QAAQ;AACpB,QAAI,IAAI,IAAI,QAAQ;AAClB,YAAM,OAAO,IAAI,iBAAiB,UAAU,EAAE;AAE9C,YAAM,SAAS,IAAI,cAAc;AACjC,aAAO,qBAAqB;AAC5B,iBAAW,MAAM;AACf,eAAO,QAAQ,KAAK,EAAE;AAExB,aAAO,cAAc,UAAU,aAAa,oBAAoB,QAAQ,UAAU,eAAe,GAAG,EAAE,YAAY,KAAK,YAAY,CAAC,CAAC;AAAA,IACvI;AAEA,OAAG,KAAK,YAAY,IAAI;AACxB,OAAG,aAAa,SAAS,YAAY;AAAA,EACvC;AAAA,EAEA,OAAc,OAAO,IAA0B;AAC7C,QAAI,CAAC,GAAG,KAAK,cAAc;AACzB;AAEF,QAAI;AACJ,OAAG,6BAA6B,CAAC,MAAM;AACrC,UAAI,aAAa;AACf,mBAAW;AAAA,IACf,CAAC;AAED,QAAI,CAAC,UAAU;AACb,YAAM,YAAY,GAAG,aAAa,GAAG,KAAK,aAAa,gBAAgB,SAAS;AAChF,UAAI,WAAc;AAChB;AAEF,YAAM,OAAO,GAAG,cAAc;AAC9B,UAAI,QAAQ,IAAI,QAAQ,KAAK,QAAQ,GAAG,KAAK,SAAS,GAAG,CAAC;AAC1D,cAAQ,GAAG,YAAY,KAAK;AAE5B,YAAM,WAAW,oBAAoB,YAAY,OAAO,EAAE;AAC1D,YAAM,QAAQ,GAAG,SAAS,KAAK;AAC/B,YAAM,SAAS,MAAM,aAAa,SAAS,SAAS;AAEpD,YAAM,aAAa,CAAC,KAAe,OAAgB;AACjD,cAAM,QAAQ,UAAU,qBAAqB,KAAK,EAAE;AACpD,cAAM,SAAS,mBAAmB,aAAa,CAAC,KAAK,CAAC;AACtD,eAAO,WAAW,cAAc,CAAC,cAAc,cAAc,MAAM,CAAC,CAAC;AAAA,MACvE;AAEA,SAAG,yBAAyB,IAAI,oBAAoB,WAAW,QAAQ,KAAK,GAAG,SAAS,CAAC;AACzF,SAAG,KAAK,YAAY,WAAW,OAAO,OAAO,GAAG,KAAK,CAAC;AACtD,SAAG,YAAY,GAAG,UAAU,KAAK,cAAc,IAAI;AAAA,IACrD,OAAO;AACL,SAAG,0BAA0B,QAAQ;AACrC,SAAG,KAAK,YAAY,MAAS;AAAA,IAC/B;AAEA,OAAG,gBAAgB;AAAA,EACrB;AACF;AAEO,aAAM,gCAAgC,KAAK;AAAA,EAGhD,MAAsB,MAAwB;AAC5C,UAAM,KAAK,UAAU,YAAY;AACjC,QAAI;AACF,0BAAoB,OAAO,EAAE;AAE/B,WAAO;AAAA,EACT;AACF;AAVa,wBACY,SAAS;",
        "names": []
      }
    }
  ]
}
