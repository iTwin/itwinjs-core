{
  "resolvedId": "D:/hub2023A/itwinjs-core/common/temp/node_modules/.pnpm/@itwin+imodels-client-management@3.1.0/node_modules/@itwin/imodels-client-management/lib/esm/operations/thumbnail/ThumbnailOperations.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n * Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n * See LICENSE.md in the project root for license terms and full copyright notice.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { OperationsBase } from \"../../base/internal\";\r\nimport { ContentType, ThumbnailSize } from \"../../base/types\";\r\nexport class ThumbnailOperations extends OperationsBase {\r\n    /**\r\n     * Downloads a thumbnail for a specific iModel. The Thumbnail returned is either a default one or a custom\r\n     * uploaded one. Wraps the\r\n     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-thumbnail/ Download iModel Thumbnail}\r\n     * operation from iModels API.\r\n     * @param {DownloadThumbnailParams} params parameters for this operation. See {@link DownloadThumbnailParams}.\r\n     * @returns {Promise<Thumbnail>} downloaded Thumbnail. See {@link Thumbnail}. The method returns the data in binary\r\n     * form which can then be consumed depending on the environment.\r\n     * @example\r\n     * Save data to local file (Node.js):\r\n     * ```\r\n     *  const thumbnail: Thumbnail = await iModelsClient.thumbnails.download({ ... });\r\n     *  await fs.promises.writeFile(\"thumbnail.png\", Buffer.from(thumbnail.data.buffer), \"binary\");\r\n     * ```\r\n     */\r\n    async download(params) {\r\n        var _a, _b;\r\n        // By default iModels API returns a small thumbnail. We specify the size explicitly to be able\r\n        // to return to user the information which thumbnail is this.\r\n        const urlParams = {\r\n            ...params.urlParams,\r\n            size: (_b = (_a = params.urlParams) === null || _a === void 0 ? void 0 : _a.size) !== null && _b !== void 0 ? _b : ThumbnailSize.Small\r\n        };\r\n        const url = this._options.urlFormatter.getThumbnailUrl({ iModelId: params.iModelId, urlParams });\r\n        const response = await this.sendGetRequest({\r\n            authorization: params.authorization,\r\n            url,\r\n            responseType: ContentType.Png\r\n        });\r\n        return {\r\n            size: urlParams.size,\r\n            imageType: ContentType.Png,\r\n            image: response\r\n        };\r\n    }\r\n    /**\r\n     * Uploads a custom iModel Thumbnail. Wraps the\r\n     * {@link https://developer.bentley.com/apis/imodels-v2/operations/upload-imodel-thumbnail/ Upload iModel Thumbnail}\r\n     * operation from iModels API.\r\n     * @param {UploadThumbnailParams} params parameters for this operation. See {@link UploadThumbnailParams}.\r\n     * @returns {Promise<void>} a promise that resolves after operation completes.\r\n     */\r\n    async upload(params) {\r\n        const url = this._options.urlFormatter.getThumbnailUrl({ iModelId: params.iModelId });\r\n        await this.sendPutRequest({\r\n            authorization: params.authorization,\r\n            url,\r\n            contentType: params.thumbnailProperties.imageType,\r\n            body: params.thumbnailProperties.image\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=ThumbnailOperations.js.map",
      "start": 1693508126650,
      "end": 1693508126713,
      "sourcemaps": null
    }
  ]
}
