{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/Atmosphere.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { assert } from \"@itwin/core-bentley\";\r\nimport { createButton, createCheckBox, createLabeledNumericInput, createNestedMenu, LabeledNumericInput } from \"@itwin/frontend-devtools\";\r\nimport { Atmosphere } from \"@itwin/core-common\";\r\nimport { Viewport, ViewState, ViewState3d } from \"@itwin/core-frontend\";\r\n\r\nexport class AtmosphereEditor {\r\n\r\n  private readonly _vp: Viewport;\r\n  private readonly _update: (view: ViewState) => void;\r\n\r\n  private static _expandAtmosphereEditor = false;\r\n\r\n  private readonly _atmosphereHeightAboveEarth: LabeledNumericInput;\r\n  private readonly _depthBelowEarthForMaxDensity: LabeledNumericInput;\r\n  private readonly _densityFalloff: LabeledNumericInput;\r\n  private readonly _scatteringStrength: LabeledNumericInput;\r\n  private readonly _wavelengthR: LabeledNumericInput;\r\n  private readonly _wavelengthG: LabeledNumericInput;\r\n  private readonly _wavelengthB: LabeledNumericInput;\r\n  private readonly _numViewRaySamples: LabeledNumericInput;\r\n  private readonly _numSunRaySamples: LabeledNumericInput;\r\n  private readonly _exposure: LabeledNumericInput;\r\n\r\n  public constructor(vp: Viewport, parent: HTMLElement) {\r\n    this._vp = vp;\r\n\r\n    const isAtmosphereSupported = (view: ViewState) => view.is3d();\r\n    const isAtmosphereEnabled = (view: ViewState) => view.is3d() ? view.getDisplayStyle3d().environment.displayAtmosphere : false;\r\n\r\n    const atmosphereMenu = createNestedMenu({\r\n      id: \"atmosphere_menu\",\r\n      label: \"Atmosphere\",\r\n      parent,\r\n      // We use a static so the expand/collapse state persists after closing and reopening the drop-down.\r\n      expand: AtmosphereEditor._expandAtmosphereEditor,\r\n      handler: (expanded) => {\r\n        AtmosphereEditor._expandAtmosphereEditor = expanded;\r\n        atmosphereMenu.label.style.fontWeight = expanded ? \"bold\" : \"500\";\r\n      },\r\n    });\r\n    (atmosphereMenu.div.firstElementChild!.lastElementChild! as HTMLElement).style.borderColor = \"grey\";\r\n    atmosphereMenu.label.style.fontWeight = AtmosphereEditor._expandAtmosphereEditor ? \"bold\" : \"500\";\r\n\r\n    const checkboxInterface = createCheckBox({\r\n      parent: atmosphereMenu.body,\r\n      handler: (cb) => enableAtmosphere(cb.checked),\r\n      name: \"Enable Atmosphere\",\r\n      id: \"cbx_Atmosphere\",\r\n    });\r\n    const checkbox = checkboxInterface.checkbox;\r\n    const checkboxLabel = checkboxInterface.label;\r\n\r\n    const atmosphereControlsDiv = document.createElement(\"div\")!;\r\n    const showHideControls = (show: boolean) => {\r\n      const display = show ? \"block\" : \"none\";\r\n      atmosphereControlsDiv.style.display = display;\r\n    };\r\n\r\n    const enableAtmosphere = (enabled: boolean) => {\r\n      const displaySettings = (this._vp.view as ViewState3d).getDisplayStyle3d().settings;\r\n      displaySettings.environment = displaySettings.environment.clone({ displayAtmosphere: enabled });\r\n      showHideControls(enabled);\r\n      this.sync();\r\n    };\r\n\r\n    const resetButton = createButton({\r\n      parent: atmosphereControlsDiv,\r\n      id: \"atmosphere_reset\",\r\n      value: \"Reset\",\r\n      handler: () => this.resetAtmosphere(),\r\n    });\r\n    resetButton.div.style.textAlign = \"center\";\r\n\r\n    const spanIntensity = document.createElement(\"span\");\r\n    spanIntensity.style.display = \"flex\";\r\n    atmosphereControlsDiv.appendChild(spanIntensity);\r\n    this._exposure = createLabeledNumericInput({\r\n      id: \"atmosphere_exposure\",\r\n      parent: spanIntensity,\r\n      value: 2.0,\r\n      handler: (value, _) => this.updateAtmosphere((view): Atmosphere.Props => {\r\n        const props = this.getAtmosphereSettingsProps(view);\r\n        props.exposure = value;\r\n        return props;\r\n      }),\r\n      min: 0.0,\r\n      max: 1000.0,\r\n      step: 0.1,\r\n      parseAsFloat: true,\r\n      name: \"Exposure: \",\r\n    });\r\n\r\n    const spanAtmosphereScale = document.createElement(\"span\");\r\n    spanAtmosphereScale.style.display = \"flex\";\r\n    atmosphereControlsDiv.appendChild(spanAtmosphereScale);\r\n    this._atmosphereHeightAboveEarth = createLabeledNumericInput({\r\n      id: \"atmosphere_atmosphereHeightAboveEarth\",\r\n      parent: spanAtmosphereScale,\r\n      value: 100000.0,\r\n      handler: (value, _) => this.updateAtmosphere((view): Atmosphere.Props => {\r\n        const props = this.getAtmosphereSettingsProps(view);\r\n        props.atmosphereHeightAboveEarth = value;\r\n        return props;\r\n      }),\r\n      min: 0.0,\r\n      max: 1000000.0,\r\n      step: 10000.0,\r\n      parseAsFloat: true,\r\n      name: \"Atmosphere Height Above Earth: \",\r\n    });\r\n    this._depthBelowEarthForMaxDensity = createLabeledNumericInput({\r\n      id: \"atmosphere_depthBelowEarthForMaxDensity\",\r\n      parent: spanAtmosphereScale,\r\n      value: 0.0,\r\n      handler: (value, _) => this.updateAtmosphere((view): Atmosphere.Props => {\r\n        const props = this.getAtmosphereSettingsProps(view);\r\n        props.depthBelowEarthForMaxDensity = value;\r\n        return props;\r\n      }),\r\n      min: 0.0,\r\n      max: 1000000.0,\r\n      step: 10000.0,\r\n      parseAsFloat: true,\r\n      name: \"Depth Below Earth For Max Density\",\r\n    });\r\n\r\n    const spanScattering = document.createElement(\"span\");\r\n    spanScattering.style.display = \"flex\";\r\n    atmosphereControlsDiv.appendChild(spanScattering);\r\n    this._scatteringStrength = createLabeledNumericInput({\r\n      id: \"atmosphere_scatteringStrength\",\r\n      parent: spanScattering,\r\n      value: 100.0,\r\n      handler: (value, _) => this.updateAtmosphere((view): Atmosphere.Props => {\r\n        const props = this.getAtmosphereSettingsProps(view);\r\n        props.scatteringStrength = value;\r\n        return props;\r\n      }),\r\n      min: 0.0,\r\n      max: 1000.0,\r\n      step: 1.0,\r\n      parseAsFloat: true,\r\n      name: \"Scattering Strength: \",\r\n    });\r\n\r\n    this._wavelengthR = createLabeledNumericInput({\r\n      id: \"atmosphere_wavelengthR\",\r\n      parent: spanScattering,\r\n      value: 700.0,\r\n      handler: (value, _) => this.updateAtmosphere((view): Atmosphere.Props => {\r\n        const props = this.getAtmosphereSettingsProps(view);\r\n        const wavelenghts = props.wavelengths!;\r\n        wavelenghts.r = value;\r\n        props.wavelengths = wavelenghts;\r\n        return props;\r\n      }),\r\n      min: 0.0,\r\n      max: 1000.0,\r\n      step: 10,\r\n      parseAsFloat: true,\r\n      name: \"Wavelength R: \",\r\n    });\r\n    this._wavelengthR.div.style.marginRight = \"0.5em\";\r\n\r\n    this._wavelengthG = createLabeledNumericInput({\r\n      id: \"atmosphere_wavelengthG\",\r\n      parent: spanScattering,\r\n      value: 530.0,\r\n      handler: (value, _) => this.updateAtmosphere((view): Atmosphere.Props => {\r\n        const props = this.getAtmosphereSettingsProps(view);\r\n        const wavelenghts = props.wavelengths!;\r\n        wavelenghts.g = value;\r\n        props.wavelengths = wavelenghts;\r\n        return props;\r\n      }),\r\n      min: 0.0,\r\n      max: 1000.0,\r\n      step: 10,\r\n      parseAsFloat: true,\r\n      name: \"G: \",\r\n    });\r\n    this._wavelengthG.div.style.marginRight = \"0.5em\";\r\n\r\n    this._wavelengthB = createLabeledNumericInput({\r\n      id: \"atmosphere_wavelengthB\",\r\n      parent: spanScattering,\r\n      value: 400.0,\r\n      handler: (value, _) => this.updateAtmosphere((view): Atmosphere.Props => {\r\n        const props = this.getAtmosphereSettingsProps(view);\r\n        const wavelenghts = props.wavelengths!;\r\n        wavelenghts.b = value;\r\n        props.wavelengths = wavelenghts;\r\n        return props;\r\n      }),\r\n      min: 0.0,\r\n      max: 1000.0,\r\n      step: 10,\r\n      parseAsFloat: true,\r\n      name: \"B: \",\r\n    });\r\n\r\n    this._densityFalloff = createLabeledNumericInput({\r\n      id: \"atmosphere_densityFalloff\",\r\n      parent: atmosphereControlsDiv,\r\n      value: 10.0,\r\n      handler: (value, _) => this.updateAtmosphere((view): Atmosphere.Props => {\r\n        const props = this.getAtmosphereSettingsProps(view);\r\n        props.densityFalloff = value;\r\n        return props;\r\n      }),\r\n      min: 0.0,\r\n      max: 1000.0,\r\n      step: 1.0,\r\n      parseAsFloat: true,\r\n      name: \"Density Falloff: \",\r\n    });\r\n\r\n    const spanSamplePoints = document.createElement(\"span\");\r\n    spanSamplePoints.style.display = \"flex\";\r\n    atmosphereControlsDiv.appendChild(spanSamplePoints);\r\n\r\n    this._numViewRaySamples = createLabeledNumericInput({\r\n      id: \"atmosphere_numViewRaySamples\",\r\n      parent: spanSamplePoints,\r\n      value: 10,\r\n      handler: (value, _) => this.updateAtmosphere((view): Atmosphere.Props => {\r\n        const props = this.getAtmosphereSettingsProps(view);\r\n        props.numViewRaySamples = value;\r\n        return props;\r\n      }),\r\n      min: 1,\r\n      max: 40,\r\n      step: 1,\r\n      name: \"# Samples per View Ray: \",\r\n    });\r\n\r\n    this._numSunRaySamples = createLabeledNumericInput({\r\n      id: \"atmosphere_numSunRaySamples\",\r\n      parent: spanSamplePoints,\r\n      value: 5,\r\n      handler: (value, _) => this.updateAtmosphere((view): Atmosphere.Props => {\r\n        const props = this.getAtmosphereSettingsProps(view);\r\n        props.numSunRaySamples = value;\r\n        return props;\r\n      }),\r\n      min: 1,\r\n      max: 40,\r\n      step: 1,\r\n      name: \"# Samples per Sun Ray: \",\r\n    });\r\n\r\n    this._update = (view) => {\r\n      const visible = isAtmosphereSupported(view);\r\n      atmosphereMenu.div.style.display = visible ? \"block\" : \"none\";\r\n      if (!visible)\r\n        return;\r\n\r\n      checkbox.checked = isAtmosphereEnabled(view);\r\n      checkboxLabel.style.fontWeight = checkbox.checked ? \"bold\" : \"500\";\r\n      showHideControls(checkbox.checked);\r\n\r\n      this.updateAtmosphereUI(view);\r\n    };\r\n\r\n    atmosphereMenu.body.appendChild(atmosphereControlsDiv);\r\n\r\n    const hr = document.createElement(\"hr\");\r\n    hr.style.borderColor = \"grey\";\r\n    atmosphereMenu.body.appendChild(hr);\r\n  }\r\n\r\n  public update(view: ViewState): void {\r\n    this._update(view);\r\n  }\r\n\r\n  private getAtmosphereSettings(view: ViewState): Atmosphere.Settings {\r\n    assert(view.is3d());\r\n    return view.displayStyle.settings.environment.atmosphere;\r\n  }\r\n\r\n  private getAtmosphereSettingsProps(view: ViewState): Atmosphere.Props {\r\n    return this.getAtmosphereSettings(view).toJSON();\r\n  }\r\n\r\n  private updateAtmosphereUI(view: ViewState) {\r\n    const settings = this.getAtmosphereSettings(view);\r\n\r\n    this._atmosphereHeightAboveEarth.input.value = settings.atmosphereHeightAboveEarth.toString();\r\n    this._depthBelowEarthForMaxDensity.input.value = settings.depthBelowEarthForMaxDensity.toString();\r\n    this._densityFalloff.input.value = settings.densityFalloff.toString();\r\n    this._scatteringStrength.input.value = settings.scatteringStrength.toString();\r\n    this._wavelengthR.input.value = settings.wavelengths.r.toString();\r\n    this._wavelengthG.input.value = settings.wavelengths.g.toString();\r\n    this._wavelengthB.input.value = settings.wavelengths.b.toString();\r\n    this._numViewRaySamples.input.value = settings.numViewRaySamples.toString();\r\n    this._numSunRaySamples.input.value = settings.numSunRaySamples.toString();\r\n    this._exposure.input.value = settings.exposure.toString();\r\n  }\r\n\r\n  private updateAtmosphere(updateFunction: (view: ViewState) => Atmosphere.Props) {\r\n    const props = updateFunction(this._vp.view);\r\n    assert(this._vp.view.is3d());\r\n    const settings = (this._vp.view).getDisplayStyle3d().settings;\r\n    settings.environment = settings.environment.clone({ atmosphere: Atmosphere.Settings.fromJSON(props) });\r\n    this.sync();\r\n    this.updateAtmosphereUI(this._vp.view);\r\n  }\r\n\r\n  private resetAtmosphere(): void {\r\n    this.updateAtmosphere(() => Atmosphere.Settings.defaults);\r\n  }\r\n\r\n  private sync(): void {\r\n    this._vp.synchWithView();\r\n  }\r\n}\r\n",
      "start": 1693508126662,
      "end": 1693508126732,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { assert } from \"@itwin/core-bentley\";\nimport { createButton, createCheckBox, createLabeledNumericInput, createNestedMenu } from \"@itwin/frontend-devtools\";\nimport { Atmosphere } from \"@itwin/core-common\";\nconst _AtmosphereEditor = class _AtmosphereEditor {\n  constructor(vp, parent) {\n    this._vp = vp;\n    const isAtmosphereSupported = (view) => view.is3d();\n    const isAtmosphereEnabled = (view) => view.is3d() ? view.getDisplayStyle3d().environment.displayAtmosphere : false;\n    const atmosphereMenu = createNestedMenu({\n      id: \"atmosphere_menu\",\n      label: \"Atmosphere\",\n      parent,\n      // We use a static so the expand/collapse state persists after closing and reopening the drop-down.\n      expand: _AtmosphereEditor._expandAtmosphereEditor,\n      handler: (expanded) => {\n        _AtmosphereEditor._expandAtmosphereEditor = expanded;\n        atmosphereMenu.label.style.fontWeight = expanded ? \"bold\" : \"500\";\n      }\n    });\n    atmosphereMenu.div.firstElementChild.lastElementChild.style.borderColor = \"grey\";\n    atmosphereMenu.label.style.fontWeight = _AtmosphereEditor._expandAtmosphereEditor ? \"bold\" : \"500\";\n    const checkboxInterface = createCheckBox({\n      parent: atmosphereMenu.body,\n      handler: (cb) => enableAtmosphere(cb.checked),\n      name: \"Enable Atmosphere\",\n      id: \"cbx_Atmosphere\"\n    });\n    const checkbox = checkboxInterface.checkbox;\n    const checkboxLabel = checkboxInterface.label;\n    const atmosphereControlsDiv = document.createElement(\"div\");\n    const showHideControls = (show) => {\n      const display = show ? \"block\" : \"none\";\n      atmosphereControlsDiv.style.display = display;\n    };\n    const enableAtmosphere = (enabled) => {\n      const displaySettings = this._vp.view.getDisplayStyle3d().settings;\n      displaySettings.environment = displaySettings.environment.clone({ displayAtmosphere: enabled });\n      showHideControls(enabled);\n      this.sync();\n    };\n    const resetButton = createButton({\n      parent: atmosphereControlsDiv,\n      id: \"atmosphere_reset\",\n      value: \"Reset\",\n      handler: () => this.resetAtmosphere()\n    });\n    resetButton.div.style.textAlign = \"center\";\n    const spanIntensity = document.createElement(\"span\");\n    spanIntensity.style.display = \"flex\";\n    atmosphereControlsDiv.appendChild(spanIntensity);\n    this._exposure = createLabeledNumericInput({\n      id: \"atmosphere_exposure\",\n      parent: spanIntensity,\n      value: 2,\n      handler: (value, _) => this.updateAtmosphere((view) => {\n        const props = this.getAtmosphereSettingsProps(view);\n        props.exposure = value;\n        return props;\n      }),\n      min: 0,\n      max: 1e3,\n      step: 0.1,\n      parseAsFloat: true,\n      name: \"Exposure: \"\n    });\n    const spanAtmosphereScale = document.createElement(\"span\");\n    spanAtmosphereScale.style.display = \"flex\";\n    atmosphereControlsDiv.appendChild(spanAtmosphereScale);\n    this._atmosphereHeightAboveEarth = createLabeledNumericInput({\n      id: \"atmosphere_atmosphereHeightAboveEarth\",\n      parent: spanAtmosphereScale,\n      value: 1e5,\n      handler: (value, _) => this.updateAtmosphere((view) => {\n        const props = this.getAtmosphereSettingsProps(view);\n        props.atmosphereHeightAboveEarth = value;\n        return props;\n      }),\n      min: 0,\n      max: 1e6,\n      step: 1e4,\n      parseAsFloat: true,\n      name: \"Atmosphere Height Above Earth: \"\n    });\n    this._depthBelowEarthForMaxDensity = createLabeledNumericInput({\n      id: \"atmosphere_depthBelowEarthForMaxDensity\",\n      parent: spanAtmosphereScale,\n      value: 0,\n      handler: (value, _) => this.updateAtmosphere((view) => {\n        const props = this.getAtmosphereSettingsProps(view);\n        props.depthBelowEarthForMaxDensity = value;\n        return props;\n      }),\n      min: 0,\n      max: 1e6,\n      step: 1e4,\n      parseAsFloat: true,\n      name: \"Depth Below Earth For Max Density\"\n    });\n    const spanScattering = document.createElement(\"span\");\n    spanScattering.style.display = \"flex\";\n    atmosphereControlsDiv.appendChild(spanScattering);\n    this._scatteringStrength = createLabeledNumericInput({\n      id: \"atmosphere_scatteringStrength\",\n      parent: spanScattering,\n      value: 100,\n      handler: (value, _) => this.updateAtmosphere((view) => {\n        const props = this.getAtmosphereSettingsProps(view);\n        props.scatteringStrength = value;\n        return props;\n      }),\n      min: 0,\n      max: 1e3,\n      step: 1,\n      parseAsFloat: true,\n      name: \"Scattering Strength: \"\n    });\n    this._wavelengthR = createLabeledNumericInput({\n      id: \"atmosphere_wavelengthR\",\n      parent: spanScattering,\n      value: 700,\n      handler: (value, _) => this.updateAtmosphere((view) => {\n        const props = this.getAtmosphereSettingsProps(view);\n        const wavelenghts = props.wavelengths;\n        wavelenghts.r = value;\n        props.wavelengths = wavelenghts;\n        return props;\n      }),\n      min: 0,\n      max: 1e3,\n      step: 10,\n      parseAsFloat: true,\n      name: \"Wavelength R: \"\n    });\n    this._wavelengthR.div.style.marginRight = \"0.5em\";\n    this._wavelengthG = createLabeledNumericInput({\n      id: \"atmosphere_wavelengthG\",\n      parent: spanScattering,\n      value: 530,\n      handler: (value, _) => this.updateAtmosphere((view) => {\n        const props = this.getAtmosphereSettingsProps(view);\n        const wavelenghts = props.wavelengths;\n        wavelenghts.g = value;\n        props.wavelengths = wavelenghts;\n        return props;\n      }),\n      min: 0,\n      max: 1e3,\n      step: 10,\n      parseAsFloat: true,\n      name: \"G: \"\n    });\n    this._wavelengthG.div.style.marginRight = \"0.5em\";\n    this._wavelengthB = createLabeledNumericInput({\n      id: \"atmosphere_wavelengthB\",\n      parent: spanScattering,\n      value: 400,\n      handler: (value, _) => this.updateAtmosphere((view) => {\n        const props = this.getAtmosphereSettingsProps(view);\n        const wavelenghts = props.wavelengths;\n        wavelenghts.b = value;\n        props.wavelengths = wavelenghts;\n        return props;\n      }),\n      min: 0,\n      max: 1e3,\n      step: 10,\n      parseAsFloat: true,\n      name: \"B: \"\n    });\n    this._densityFalloff = createLabeledNumericInput({\n      id: \"atmosphere_densityFalloff\",\n      parent: atmosphereControlsDiv,\n      value: 10,\n      handler: (value, _) => this.updateAtmosphere((view) => {\n        const props = this.getAtmosphereSettingsProps(view);\n        props.densityFalloff = value;\n        return props;\n      }),\n      min: 0,\n      max: 1e3,\n      step: 1,\n      parseAsFloat: true,\n      name: \"Density Falloff: \"\n    });\n    const spanSamplePoints = document.createElement(\"span\");\n    spanSamplePoints.style.display = \"flex\";\n    atmosphereControlsDiv.appendChild(spanSamplePoints);\n    this._numViewRaySamples = createLabeledNumericInput({\n      id: \"atmosphere_numViewRaySamples\",\n      parent: spanSamplePoints,\n      value: 10,\n      handler: (value, _) => this.updateAtmosphere((view) => {\n        const props = this.getAtmosphereSettingsProps(view);\n        props.numViewRaySamples = value;\n        return props;\n      }),\n      min: 1,\n      max: 40,\n      step: 1,\n      name: \"# Samples per View Ray: \"\n    });\n    this._numSunRaySamples = createLabeledNumericInput({\n      id: \"atmosphere_numSunRaySamples\",\n      parent: spanSamplePoints,\n      value: 5,\n      handler: (value, _) => this.updateAtmosphere((view) => {\n        const props = this.getAtmosphereSettingsProps(view);\n        props.numSunRaySamples = value;\n        return props;\n      }),\n      min: 1,\n      max: 40,\n      step: 1,\n      name: \"# Samples per Sun Ray: \"\n    });\n    this._update = (view) => {\n      const visible = isAtmosphereSupported(view);\n      atmosphereMenu.div.style.display = visible ? \"block\" : \"none\";\n      if (!visible)\n        return;\n      checkbox.checked = isAtmosphereEnabled(view);\n      checkboxLabel.style.fontWeight = checkbox.checked ? \"bold\" : \"500\";\n      showHideControls(checkbox.checked);\n      this.updateAtmosphereUI(view);\n    };\n    atmosphereMenu.body.appendChild(atmosphereControlsDiv);\n    const hr = document.createElement(\"hr\");\n    hr.style.borderColor = \"grey\";\n    atmosphereMenu.body.appendChild(hr);\n  }\n  update(view) {\n    this._update(view);\n  }\n  getAtmosphereSettings(view) {\n    assert(view.is3d());\n    return view.displayStyle.settings.environment.atmosphere;\n  }\n  getAtmosphereSettingsProps(view) {\n    return this.getAtmosphereSettings(view).toJSON();\n  }\n  updateAtmosphereUI(view) {\n    const settings = this.getAtmosphereSettings(view);\n    this._atmosphereHeightAboveEarth.input.value = settings.atmosphereHeightAboveEarth.toString();\n    this._depthBelowEarthForMaxDensity.input.value = settings.depthBelowEarthForMaxDensity.toString();\n    this._densityFalloff.input.value = settings.densityFalloff.toString();\n    this._scatteringStrength.input.value = settings.scatteringStrength.toString();\n    this._wavelengthR.input.value = settings.wavelengths.r.toString();\n    this._wavelengthG.input.value = settings.wavelengths.g.toString();\n    this._wavelengthB.input.value = settings.wavelengths.b.toString();\n    this._numViewRaySamples.input.value = settings.numViewRaySamples.toString();\n    this._numSunRaySamples.input.value = settings.numSunRaySamples.toString();\n    this._exposure.input.value = settings.exposure.toString();\n  }\n  updateAtmosphere(updateFunction) {\n    const props = updateFunction(this._vp.view);\n    assert(this._vp.view.is3d());\n    const settings = this._vp.view.getDisplayStyle3d().settings;\n    settings.environment = settings.environment.clone({ atmosphere: Atmosphere.Settings.fromJSON(props) });\n    this.sync();\n    this.updateAtmosphereUI(this._vp.view);\n  }\n  resetAtmosphere() {\n    this.updateAtmosphere(() => Atmosphere.Settings.defaults);\n  }\n  sync() {\n    this._vp.synchWithView();\n  }\n};\n_AtmosphereEditor._expandAtmosphereEditor = false;\nexport let AtmosphereEditor = _AtmosphereEditor;\n",
      "start": 1693508126732,
      "end": 1693508126743,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/Atmosphere.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { assert } from \"@itwin/core-bentley\";\r\nimport { createButton, createCheckBox, createLabeledNumericInput, createNestedMenu, LabeledNumericInput } from \"@itwin/frontend-devtools\";\r\nimport { Atmosphere } from \"@itwin/core-common\";\r\nimport { Viewport, ViewState, ViewState3d } from \"@itwin/core-frontend\";\r\n\r\nexport class AtmosphereEditor {\r\n\r\n  private readonly _vp: Viewport;\r\n  private readonly _update: (view: ViewState) => void;\r\n\r\n  private static _expandAtmosphereEditor = false;\r\n\r\n  private readonly _atmosphereHeightAboveEarth: LabeledNumericInput;\r\n  private readonly _depthBelowEarthForMaxDensity: LabeledNumericInput;\r\n  private readonly _densityFalloff: LabeledNumericInput;\r\n  private readonly _scatteringStrength: LabeledNumericInput;\r\n  private readonly _wavelengthR: LabeledNumericInput;\r\n  private readonly _wavelengthG: LabeledNumericInput;\r\n  private readonly _wavelengthB: LabeledNumericInput;\r\n  private readonly _numViewRaySamples: LabeledNumericInput;\r\n  private readonly _numSunRaySamples: LabeledNumericInput;\r\n  private readonly _exposure: LabeledNumericInput;\r\n\r\n  public constructor(vp: Viewport, parent: HTMLElement) {\r\n    this._vp = vp;\r\n\r\n    const isAtmosphereSupported = (view: ViewState) => view.is3d();\r\n    const isAtmosphereEnabled = (view: ViewState) => view.is3d() ? view.getDisplayStyle3d().environment.displayAtmosphere : false;\r\n\r\n    const atmosphereMenu = createNestedMenu({\r\n      id: \"atmosphere_menu\",\r\n      label: \"Atmosphere\",\r\n      parent,\r\n      // We use a static so the expand/collapse state persists after closing and reopening the drop-down.\r\n      expand: AtmosphereEditor._expandAtmosphereEditor,\r\n      handler: (expanded) => {\r\n        AtmosphereEditor._expandAtmosphereEditor = expanded;\r\n        atmosphereMenu.label.style.fontWeight = expanded ? \"bold\" : \"500\";\r\n      },\r\n    });\r\n    (atmosphereMenu.div.firstElementChild!.lastElementChild! as HTMLElement).style.borderColor = \"grey\";\r\n    atmosphereMenu.label.style.fontWeight = AtmosphereEditor._expandAtmosphereEditor ? \"bold\" : \"500\";\r\n\r\n    const checkboxInterface = createCheckBox({\r\n      parent: atmosphereMenu.body,\r\n      handler: (cb) => enableAtmosphere(cb.checked),\r\n      name: \"Enable Atmosphere\",\r\n      id: \"cbx_Atmosphere\",\r\n    });\r\n    const checkbox = checkboxInterface.checkbox;\r\n    const checkboxLabel = checkboxInterface.label;\r\n\r\n    const atmosphereControlsDiv = document.createElement(\"div\")!;\r\n    const showHideControls = (show: boolean) => {\r\n      const display = show ? \"block\" : \"none\";\r\n      atmosphereControlsDiv.style.display = display;\r\n    };\r\n\r\n    const enableAtmosphere = (enabled: boolean) => {\r\n      const displaySettings = (this._vp.view as ViewState3d).getDisplayStyle3d().settings;\r\n      displaySettings.environment = displaySettings.environment.clone({ displayAtmosphere: enabled });\r\n      showHideControls(enabled);\r\n      this.sync();\r\n    };\r\n\r\n    const resetButton = createButton({\r\n      parent: atmosphereControlsDiv,\r\n      id: \"atmosphere_reset\",\r\n      value: \"Reset\",\r\n      handler: () => this.resetAtmosphere(),\r\n    });\r\n    resetButton.div.style.textAlign = \"center\";\r\n\r\n    const spanIntensity = document.createElement(\"span\");\r\n    spanIntensity.style.display = \"flex\";\r\n    atmosphereControlsDiv.appendChild(spanIntensity);\r\n    this._exposure = createLabeledNumericInput({\r\n      id: \"atmosphere_exposure\",\r\n      parent: spanIntensity,\r\n      value: 2.0,\r\n      handler: (value, _) => this.updateAtmosphere((view): Atmosphere.Props => {\r\n        const props = this.getAtmosphereSettingsProps(view);\r\n        props.exposure = value;\r\n        return props;\r\n      }),\r\n      min: 0.0,\r\n      max: 1000.0,\r\n      step: 0.1,\r\n      parseAsFloat: true,\r\n      name: \"Exposure: \",\r\n    });\r\n\r\n    const spanAtmosphereScale = document.createElement(\"span\");\r\n    spanAtmosphereScale.style.display = \"flex\";\r\n    atmosphereControlsDiv.appendChild(spanAtmosphereScale);\r\n    this._atmosphereHeightAboveEarth = createLabeledNumericInput({\r\n      id: \"atmosphere_atmosphereHeightAboveEarth\",\r\n      parent: spanAtmosphereScale,\r\n      value: 100000.0,\r\n      handler: (value, _) => this.updateAtmosphere((view): Atmosphere.Props => {\r\n        const props = this.getAtmosphereSettingsProps(view);\r\n        props.atmosphereHeightAboveEarth = value;\r\n        return props;\r\n      }),\r\n      min: 0.0,\r\n      max: 1000000.0,\r\n      step: 10000.0,\r\n      parseAsFloat: true,\r\n      name: \"Atmosphere Height Above Earth: \",\r\n    });\r\n    this._depthBelowEarthForMaxDensity = createLabeledNumericInput({\r\n      id: \"atmosphere_depthBelowEarthForMaxDensity\",\r\n      parent: spanAtmosphereScale,\r\n      value: 0.0,\r\n      handler: (value, _) => this.updateAtmosphere((view): Atmosphere.Props => {\r\n        const props = this.getAtmosphereSettingsProps(view);\r\n        props.depthBelowEarthForMaxDensity = value;\r\n        return props;\r\n      }),\r\n      min: 0.0,\r\n      max: 1000000.0,\r\n      step: 10000.0,\r\n      parseAsFloat: true,\r\n      name: \"Depth Below Earth For Max Density\",\r\n    });\r\n\r\n    const spanScattering = document.createElement(\"span\");\r\n    spanScattering.style.display = \"flex\";\r\n    atmosphereControlsDiv.appendChild(spanScattering);\r\n    this._scatteringStrength = createLabeledNumericInput({\r\n      id: \"atmosphere_scatteringStrength\",\r\n      parent: spanScattering,\r\n      value: 100.0,\r\n      handler: (value, _) => this.updateAtmosphere((view): Atmosphere.Props => {\r\n        const props = this.getAtmosphereSettingsProps(view);\r\n        props.scatteringStrength = value;\r\n        return props;\r\n      }),\r\n      min: 0.0,\r\n      max: 1000.0,\r\n      step: 1.0,\r\n      parseAsFloat: true,\r\n      name: \"Scattering Strength: \",\r\n    });\r\n\r\n    this._wavelengthR = createLabeledNumericInput({\r\n      id: \"atmosphere_wavelengthR\",\r\n      parent: spanScattering,\r\n      value: 700.0,\r\n      handler: (value, _) => this.updateAtmosphere((view): Atmosphere.Props => {\r\n        const props = this.getAtmosphereSettingsProps(view);\r\n        const wavelenghts = props.wavelengths!;\r\n        wavelenghts.r = value;\r\n        props.wavelengths = wavelenghts;\r\n        return props;\r\n      }),\r\n      min: 0.0,\r\n      max: 1000.0,\r\n      step: 10,\r\n      parseAsFloat: true,\r\n      name: \"Wavelength R: \",\r\n    });\r\n    this._wavelengthR.div.style.marginRight = \"0.5em\";\r\n\r\n    this._wavelengthG = createLabeledNumericInput({\r\n      id: \"atmosphere_wavelengthG\",\r\n      parent: spanScattering,\r\n      value: 530.0,\r\n      handler: (value, _) => this.updateAtmosphere((view): Atmosphere.Props => {\r\n        const props = this.getAtmosphereSettingsProps(view);\r\n        const wavelenghts = props.wavelengths!;\r\n        wavelenghts.g = value;\r\n        props.wavelengths = wavelenghts;\r\n        return props;\r\n      }),\r\n      min: 0.0,\r\n      max: 1000.0,\r\n      step: 10,\r\n      parseAsFloat: true,\r\n      name: \"G: \",\r\n    });\r\n    this._wavelengthG.div.style.marginRight = \"0.5em\";\r\n\r\n    this._wavelengthB = createLabeledNumericInput({\r\n      id: \"atmosphere_wavelengthB\",\r\n      parent: spanScattering,\r\n      value: 400.0,\r\n      handler: (value, _) => this.updateAtmosphere((view): Atmosphere.Props => {\r\n        const props = this.getAtmosphereSettingsProps(view);\r\n        const wavelenghts = props.wavelengths!;\r\n        wavelenghts.b = value;\r\n        props.wavelengths = wavelenghts;\r\n        return props;\r\n      }),\r\n      min: 0.0,\r\n      max: 1000.0,\r\n      step: 10,\r\n      parseAsFloat: true,\r\n      name: \"B: \",\r\n    });\r\n\r\n    this._densityFalloff = createLabeledNumericInput({\r\n      id: \"atmosphere_densityFalloff\",\r\n      parent: atmosphereControlsDiv,\r\n      value: 10.0,\r\n      handler: (value, _) => this.updateAtmosphere((view): Atmosphere.Props => {\r\n        const props = this.getAtmosphereSettingsProps(view);\r\n        props.densityFalloff = value;\r\n        return props;\r\n      }),\r\n      min: 0.0,\r\n      max: 1000.0,\r\n      step: 1.0,\r\n      parseAsFloat: true,\r\n      name: \"Density Falloff: \",\r\n    });\r\n\r\n    const spanSamplePoints = document.createElement(\"span\");\r\n    spanSamplePoints.style.display = \"flex\";\r\n    atmosphereControlsDiv.appendChild(spanSamplePoints);\r\n\r\n    this._numViewRaySamples = createLabeledNumericInput({\r\n      id: \"atmosphere_numViewRaySamples\",\r\n      parent: spanSamplePoints,\r\n      value: 10,\r\n      handler: (value, _) => this.updateAtmosphere((view): Atmosphere.Props => {\r\n        const props = this.getAtmosphereSettingsProps(view);\r\n        props.numViewRaySamples = value;\r\n        return props;\r\n      }),\r\n      min: 1,\r\n      max: 40,\r\n      step: 1,\r\n      name: \"# Samples per View Ray: \",\r\n    });\r\n\r\n    this._numSunRaySamples = createLabeledNumericInput({\r\n      id: \"atmosphere_numSunRaySamples\",\r\n      parent: spanSamplePoints,\r\n      value: 5,\r\n      handler: (value, _) => this.updateAtmosphere((view): Atmosphere.Props => {\r\n        const props = this.getAtmosphereSettingsProps(view);\r\n        props.numSunRaySamples = value;\r\n        return props;\r\n      }),\r\n      min: 1,\r\n      max: 40,\r\n      step: 1,\r\n      name: \"# Samples per Sun Ray: \",\r\n    });\r\n\r\n    this._update = (view) => {\r\n      const visible = isAtmosphereSupported(view);\r\n      atmosphereMenu.div.style.display = visible ? \"block\" : \"none\";\r\n      if (!visible)\r\n        return;\r\n\r\n      checkbox.checked = isAtmosphereEnabled(view);\r\n      checkboxLabel.style.fontWeight = checkbox.checked ? \"bold\" : \"500\";\r\n      showHideControls(checkbox.checked);\r\n\r\n      this.updateAtmosphereUI(view);\r\n    };\r\n\r\n    atmosphereMenu.body.appendChild(atmosphereControlsDiv);\r\n\r\n    const hr = document.createElement(\"hr\");\r\n    hr.style.borderColor = \"grey\";\r\n    atmosphereMenu.body.appendChild(hr);\r\n  }\r\n\r\n  public update(view: ViewState): void {\r\n    this._update(view);\r\n  }\r\n\r\n  private getAtmosphereSettings(view: ViewState): Atmosphere.Settings {\r\n    assert(view.is3d());\r\n    return view.displayStyle.settings.environment.atmosphere;\r\n  }\r\n\r\n  private getAtmosphereSettingsProps(view: ViewState): Atmosphere.Props {\r\n    return this.getAtmosphereSettings(view).toJSON();\r\n  }\r\n\r\n  private updateAtmosphereUI(view: ViewState) {\r\n    const settings = this.getAtmosphereSettings(view);\r\n\r\n    this._atmosphereHeightAboveEarth.input.value = settings.atmosphereHeightAboveEarth.toString();\r\n    this._depthBelowEarthForMaxDensity.input.value = settings.depthBelowEarthForMaxDensity.toString();\r\n    this._densityFalloff.input.value = settings.densityFalloff.toString();\r\n    this._scatteringStrength.input.value = settings.scatteringStrength.toString();\r\n    this._wavelengthR.input.value = settings.wavelengths.r.toString();\r\n    this._wavelengthG.input.value = settings.wavelengths.g.toString();\r\n    this._wavelengthB.input.value = settings.wavelengths.b.toString();\r\n    this._numViewRaySamples.input.value = settings.numViewRaySamples.toString();\r\n    this._numSunRaySamples.input.value = settings.numSunRaySamples.toString();\r\n    this._exposure.input.value = settings.exposure.toString();\r\n  }\r\n\r\n  private updateAtmosphere(updateFunction: (view: ViewState) => Atmosphere.Props) {\r\n    const props = updateFunction(this._vp.view);\r\n    assert(this._vp.view.is3d());\r\n    const settings = (this._vp.view).getDisplayStyle3d().settings;\r\n    settings.environment = settings.environment.clone({ atmosphere: Atmosphere.Settings.fromJSON(props) });\r\n    this.sync();\r\n    this.updateAtmosphereUI(this._vp.view);\r\n  }\r\n\r\n  private resetAtmosphere(): void {\r\n    this.updateAtmosphere(() => Atmosphere.Settings.defaults);\r\n  }\r\n\r\n  private sync(): void {\r\n    this._vp.synchWithView();\r\n  }\r\n}\r\n"
        ],
        "mappings": ";AAKA,SAAS,cAAc;AACvB,SAAS,cAAc,gBAAgB,2BAA2B,wBAA6C;AAC/G,SAAS,kBAAkB;AAGpB,MAAM,oBAAN,MAAM,kBAAiB;AAAA,EAkBrB,YAAY,IAAc,QAAqB;AACpD,SAAK,MAAM;AAEX,UAAM,wBAAwB,CAAC,SAAoB,KAAK,KAAK;AAC7D,UAAM,sBAAsB,CAAC,SAAoB,KAAK,KAAK,IAAI,KAAK,kBAAkB,EAAE,YAAY,oBAAoB;AAExH,UAAM,iBAAiB,iBAAiB;AAAA,MACtC,IAAI;AAAA,MACJ,OAAO;AAAA,MACP;AAAA;AAAA,MAEA,QAAQ,kBAAiB;AAAA,MACzB,SAAS,CAAC,aAAa;AACrB,0BAAiB,0BAA0B;AAC3C,uBAAe,MAAM,MAAM,aAAa,WAAW,SAAS;AAAA,MAC9D;AAAA,IACF,CAAC;AACD,IAAC,eAAe,IAAI,kBAAmB,iBAAkC,MAAM,cAAc;AAC7F,mBAAe,MAAM,MAAM,aAAa,kBAAiB,0BAA0B,SAAS;AAE5F,UAAM,oBAAoB,eAAe;AAAA,MACvC,QAAQ,eAAe;AAAA,MACvB,SAAS,CAAC,OAAO,iBAAiB,GAAG,OAAO;AAAA,MAC5C,MAAM;AAAA,MACN,IAAI;AAAA,IACN,CAAC;AACD,UAAM,WAAW,kBAAkB;AACnC,UAAM,gBAAgB,kBAAkB;AAExC,UAAM,wBAAwB,SAAS,cAAc,KAAK;AAC1D,UAAM,mBAAmB,CAAC,SAAkB;AAC1C,YAAM,UAAU,OAAO,UAAU;AACjC,4BAAsB,MAAM,UAAU;AAAA,IACxC;AAEA,UAAM,mBAAmB,CAAC,YAAqB;AAC7C,YAAM,kBAAmB,KAAK,IAAI,KAAqB,kBAAkB,EAAE;AAC3E,sBAAgB,cAAc,gBAAgB,YAAY,MAAM,EAAE,mBAAmB,QAAQ,CAAC;AAC9F,uBAAiB,OAAO;AACxB,WAAK,KAAK;AAAA,IACZ;AAEA,UAAM,cAAc,aAAa;AAAA,MAC/B,QAAQ;AAAA,MACR,IAAI;AAAA,MACJ,OAAO;AAAA,MACP,SAAS,MAAM,KAAK,gBAAgB;AAAA,IACtC,CAAC;AACD,gBAAY,IAAI,MAAM,YAAY;AAElC,UAAM,gBAAgB,SAAS,cAAc,MAAM;AACnD,kBAAc,MAAM,UAAU;AAC9B,0BAAsB,YAAY,aAAa;AAC/C,SAAK,YAAY,0BAA0B;AAAA,MACzC,IAAI;AAAA,MACJ,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,SAAS,CAAC,OAAO,MAAM,KAAK,iBAAiB,CAAC,SAA2B;AACvE,cAAM,QAAQ,KAAK,2BAA2B,IAAI;AAClD,cAAM,WAAW;AACjB,eAAO;AAAA,MACT,CAAC;AAAA,MACD,KAAK;AAAA,MACL,KAAK;AAAA,MACL,MAAM;AAAA,MACN,cAAc;AAAA,MACd,MAAM;AAAA,IACR,CAAC;AAED,UAAM,sBAAsB,SAAS,cAAc,MAAM;AACzD,wBAAoB,MAAM,UAAU;AACpC,0BAAsB,YAAY,mBAAmB;AACrD,SAAK,8BAA8B,0BAA0B;AAAA,MAC3D,IAAI;AAAA,MACJ,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,SAAS,CAAC,OAAO,MAAM,KAAK,iBAAiB,CAAC,SAA2B;AACvE,cAAM,QAAQ,KAAK,2BAA2B,IAAI;AAClD,cAAM,6BAA6B;AACnC,eAAO;AAAA,MACT,CAAC;AAAA,MACD,KAAK;AAAA,MACL,KAAK;AAAA,MACL,MAAM;AAAA,MACN,cAAc;AAAA,MACd,MAAM;AAAA,IACR,CAAC;AACD,SAAK,gCAAgC,0BAA0B;AAAA,MAC7D,IAAI;AAAA,MACJ,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,SAAS,CAAC,OAAO,MAAM,KAAK,iBAAiB,CAAC,SAA2B;AACvE,cAAM,QAAQ,KAAK,2BAA2B,IAAI;AAClD,cAAM,+BAA+B;AACrC,eAAO;AAAA,MACT,CAAC;AAAA,MACD,KAAK;AAAA,MACL,KAAK;AAAA,MACL,MAAM;AAAA,MACN,cAAc;AAAA,MACd,MAAM;AAAA,IACR,CAAC;AAED,UAAM,iBAAiB,SAAS,cAAc,MAAM;AACpD,mBAAe,MAAM,UAAU;AAC/B,0BAAsB,YAAY,cAAc;AAChD,SAAK,sBAAsB,0BAA0B;AAAA,MACnD,IAAI;AAAA,MACJ,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,SAAS,CAAC,OAAO,MAAM,KAAK,iBAAiB,CAAC,SAA2B;AACvE,cAAM,QAAQ,KAAK,2BAA2B,IAAI;AAClD,cAAM,qBAAqB;AAC3B,eAAO;AAAA,MACT,CAAC;AAAA,MACD,KAAK;AAAA,MACL,KAAK;AAAA,MACL,MAAM;AAAA,MACN,cAAc;AAAA,MACd,MAAM;AAAA,IACR,CAAC;AAED,SAAK,eAAe,0BAA0B;AAAA,MAC5C,IAAI;AAAA,MACJ,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,SAAS,CAAC,OAAO,MAAM,KAAK,iBAAiB,CAAC,SAA2B;AACvE,cAAM,QAAQ,KAAK,2BAA2B,IAAI;AAClD,cAAM,cAAc,MAAM;AAC1B,oBAAY,IAAI;AAChB,cAAM,cAAc;AACpB,eAAO;AAAA,MACT,CAAC;AAAA,MACD,KAAK;AAAA,MACL,KAAK;AAAA,MACL,MAAM;AAAA,MACN,cAAc;AAAA,MACd,MAAM;AAAA,IACR,CAAC;AACD,SAAK,aAAa,IAAI,MAAM,cAAc;AAE1C,SAAK,eAAe,0BAA0B;AAAA,MAC5C,IAAI;AAAA,MACJ,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,SAAS,CAAC,OAAO,MAAM,KAAK,iBAAiB,CAAC,SAA2B;AACvE,cAAM,QAAQ,KAAK,2BAA2B,IAAI;AAClD,cAAM,cAAc,MAAM;AAC1B,oBAAY,IAAI;AAChB,cAAM,cAAc;AACpB,eAAO;AAAA,MACT,CAAC;AAAA,MACD,KAAK;AAAA,MACL,KAAK;AAAA,MACL,MAAM;AAAA,MACN,cAAc;AAAA,MACd,MAAM;AAAA,IACR,CAAC;AACD,SAAK,aAAa,IAAI,MAAM,cAAc;AAE1C,SAAK,eAAe,0BAA0B;AAAA,MAC5C,IAAI;AAAA,MACJ,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,SAAS,CAAC,OAAO,MAAM,KAAK,iBAAiB,CAAC,SAA2B;AACvE,cAAM,QAAQ,KAAK,2BAA2B,IAAI;AAClD,cAAM,cAAc,MAAM;AAC1B,oBAAY,IAAI;AAChB,cAAM,cAAc;AACpB,eAAO;AAAA,MACT,CAAC;AAAA,MACD,KAAK;AAAA,MACL,KAAK;AAAA,MACL,MAAM;AAAA,MACN,cAAc;AAAA,MACd,MAAM;AAAA,IACR,CAAC;AAED,SAAK,kBAAkB,0BAA0B;AAAA,MAC/C,IAAI;AAAA,MACJ,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,SAAS,CAAC,OAAO,MAAM,KAAK,iBAAiB,CAAC,SAA2B;AACvE,cAAM,QAAQ,KAAK,2BAA2B,IAAI;AAClD,cAAM,iBAAiB;AACvB,eAAO;AAAA,MACT,CAAC;AAAA,MACD,KAAK;AAAA,MACL,KAAK;AAAA,MACL,MAAM;AAAA,MACN,cAAc;AAAA,MACd,MAAM;AAAA,IACR,CAAC;AAED,UAAM,mBAAmB,SAAS,cAAc,MAAM;AACtD,qBAAiB,MAAM,UAAU;AACjC,0BAAsB,YAAY,gBAAgB;AAElD,SAAK,qBAAqB,0BAA0B;AAAA,MAClD,IAAI;AAAA,MACJ,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,SAAS,CAAC,OAAO,MAAM,KAAK,iBAAiB,CAAC,SAA2B;AACvE,cAAM,QAAQ,KAAK,2BAA2B,IAAI;AAClD,cAAM,oBAAoB;AAC1B,eAAO;AAAA,MACT,CAAC;AAAA,MACD,KAAK;AAAA,MACL,KAAK;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,IACR,CAAC;AAED,SAAK,oBAAoB,0BAA0B;AAAA,MACjD,IAAI;AAAA,MACJ,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,SAAS,CAAC,OAAO,MAAM,KAAK,iBAAiB,CAAC,SAA2B;AACvE,cAAM,QAAQ,KAAK,2BAA2B,IAAI;AAClD,cAAM,mBAAmB;AACzB,eAAO;AAAA,MACT,CAAC;AAAA,MACD,KAAK;AAAA,MACL,KAAK;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,IACR,CAAC;AAED,SAAK,UAAU,CAAC,SAAS;AACvB,YAAM,UAAU,sBAAsB,IAAI;AAC1C,qBAAe,IAAI,MAAM,UAAU,UAAU,UAAU;AACvD,UAAI,CAAC;AACH;AAEF,eAAS,UAAU,oBAAoB,IAAI;AAC3C,oBAAc,MAAM,aAAa,SAAS,UAAU,SAAS;AAC7D,uBAAiB,SAAS,OAAO;AAEjC,WAAK,mBAAmB,IAAI;AAAA,IAC9B;AAEA,mBAAe,KAAK,YAAY,qBAAqB;AAErD,UAAM,KAAK,SAAS,cAAc,IAAI;AACtC,OAAG,MAAM,cAAc;AACvB,mBAAe,KAAK,YAAY,EAAE;AAAA,EACpC;AAAA,EAEO,OAAO,MAAuB;AACnC,SAAK,QAAQ,IAAI;AAAA,EACnB;AAAA,EAEQ,sBAAsB,MAAsC;AAClE,WAAO,KAAK,KAAK,CAAC;AAClB,WAAO,KAAK,aAAa,SAAS,YAAY;AAAA,EAChD;AAAA,EAEQ,2BAA2B,MAAmC;AACpE,WAAO,KAAK,sBAAsB,IAAI,EAAE,OAAO;AAAA,EACjD;AAAA,EAEQ,mBAAmB,MAAiB;AAC1C,UAAM,WAAW,KAAK,sBAAsB,IAAI;AAEhD,SAAK,4BAA4B,MAAM,QAAQ,SAAS,2BAA2B,SAAS;AAC5F,SAAK,8BAA8B,MAAM,QAAQ,SAAS,6BAA6B,SAAS;AAChG,SAAK,gBAAgB,MAAM,QAAQ,SAAS,eAAe,SAAS;AACpE,SAAK,oBAAoB,MAAM,QAAQ,SAAS,mBAAmB,SAAS;AAC5E,SAAK,aAAa,MAAM,QAAQ,SAAS,YAAY,EAAE,SAAS;AAChE,SAAK,aAAa,MAAM,QAAQ,SAAS,YAAY,EAAE,SAAS;AAChE,SAAK,aAAa,MAAM,QAAQ,SAAS,YAAY,EAAE,SAAS;AAChE,SAAK,mBAAmB,MAAM,QAAQ,SAAS,kBAAkB,SAAS;AAC1E,SAAK,kBAAkB,MAAM,QAAQ,SAAS,iBAAiB,SAAS;AACxE,SAAK,UAAU,MAAM,QAAQ,SAAS,SAAS,SAAS;AAAA,EAC1D;AAAA,EAEQ,iBAAiB,gBAAuD;AAC9E,UAAM,QAAQ,eAAe,KAAK,IAAI,IAAI;AAC1C,WAAO,KAAK,IAAI,KAAK,KAAK,CAAC;AAC3B,UAAM,WAAY,KAAK,IAAI,KAAM,kBAAkB,EAAE;AACrD,aAAS,cAAc,SAAS,YAAY,MAAM,EAAE,YAAY,WAAW,SAAS,SAAS,KAAK,EAAE,CAAC;AACrG,SAAK,KAAK;AACV,SAAK,mBAAmB,KAAK,IAAI,IAAI;AAAA,EACvC;AAAA,EAEQ,kBAAwB;AAC9B,SAAK,iBAAiB,MAAM,WAAW,SAAS,QAAQ;AAAA,EAC1D;AAAA,EAEQ,OAAa;AACnB,SAAK,IAAI,cAAc;AAAA,EACzB;AACF;AAtTa,kBAKI,0BAA0B;AALpC,WAAM,mBAAN;",
        "names": []
      }
    }
  ]
}
