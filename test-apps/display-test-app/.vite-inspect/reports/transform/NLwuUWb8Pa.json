{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/bentley/lib/esm/StatusCategory.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Errors\n */\nimport { BentleyStatus, BriefcaseStatus, ChangeSetStatus, GeoServiceStatus, HttpStatus, IModelHubStatus, IModelStatus, RealityDataStatus, RepositoryStatus, RpcInterfaceStatus, } from \"./BentleyError\";\n/** A group of related statuses for aggregate reporting purposes.\n * @alpha\n */\nclass StatusCategory {\n    static for(error) {\n        for (const handler of this.handlers) {\n            const category = handler(error);\n            if (category) {\n                return category;\n            }\n        }\n        return lookupCategory(error);\n    }\n}\nStatusCategory.handlers = new Set();\nexport { StatusCategory };\n/***\n * A success status.\n * @alpha\n */\nexport class SuccessCategory extends StatusCategory {\n    constructor() {\n        super(...arguments);\n        this.error = false;\n    }\n}\n/**\n * An error status.\n * @alpha\n */\nexport class ErrorCategory extends StatusCategory {\n    constructor() {\n        super(...arguments);\n        this.error = true;\n    }\n}\nvar HTTP;\n(function (HTTP) {\n    class OK extends SuccessCategory {\n        constructor() {\n            super(...arguments);\n            this.name = \"OK\";\n            this.code = 200;\n        }\n    }\n    HTTP.OK = OK;\n    class Accepted extends SuccessCategory {\n        constructor() {\n            super(...arguments);\n            this.name = \"Accepted\";\n            this.code = 202;\n        }\n    }\n    HTTP.Accepted = Accepted;\n    class NoContent extends SuccessCategory {\n        constructor() {\n            super(...arguments);\n            this.name = \"NoContent\";\n            this.code = 204;\n        }\n    }\n    HTTP.NoContent = NoContent;\n    class BadRequest extends ErrorCategory {\n        constructor() {\n            super(...arguments);\n            this.name = \"BadRequest\";\n            this.code = 400;\n        }\n    }\n    HTTP.BadRequest = BadRequest;\n    class Unauthorized extends ErrorCategory {\n        constructor() {\n            super(...arguments);\n            this.name = \"Unauthorized\";\n            this.code = 401;\n        }\n    }\n    HTTP.Unauthorized = Unauthorized;\n    class Forbidden extends ErrorCategory {\n        constructor() {\n            super(...arguments);\n            this.name = \"Forbidden\";\n            this.code = 403;\n        }\n    }\n    HTTP.Forbidden = Forbidden;\n    class NotFound extends ErrorCategory {\n        constructor() {\n            super(...arguments);\n            this.name = \"NotFound\";\n            this.code = 404;\n        }\n    }\n    HTTP.NotFound = NotFound;\n    class RequestTimeout extends ErrorCategory {\n        constructor() {\n            super(...arguments);\n            this.name = \"RequestTimeout\";\n            this.code = 408;\n        }\n    }\n    HTTP.RequestTimeout = RequestTimeout;\n    class Conflict extends ErrorCategory {\n        constructor() {\n            super(...arguments);\n            this.name = \"Conflict\";\n            this.code = 409;\n        }\n    }\n    HTTP.Conflict = Conflict;\n    class Gone extends ErrorCategory {\n        constructor() {\n            super(...arguments);\n            this.name = \"Gone\";\n            this.code = 410;\n        }\n    }\n    HTTP.Gone = Gone;\n    class PreconditionFailed extends ErrorCategory {\n        constructor() {\n            super(...arguments);\n            this.name = \"PreconditionFailed\";\n            this.code = 412;\n        }\n    }\n    HTTP.PreconditionFailed = PreconditionFailed;\n    class ExpectationFailed extends ErrorCategory {\n        constructor() {\n            super(...arguments);\n            this.name = \"ExpectationFailed\";\n            this.code = 417;\n        }\n    }\n    HTTP.ExpectationFailed = ExpectationFailed;\n    class MisdirectedRequest extends ErrorCategory {\n        constructor() {\n            super(...arguments);\n            this.name = \"MisdirectedRequest\";\n            this.code = 421;\n        }\n    }\n    HTTP.MisdirectedRequest = MisdirectedRequest;\n    class UnprocessableEntity extends ErrorCategory {\n        constructor() {\n            super(...arguments);\n            this.name = \"UnprocessableEntity\";\n            this.code = 422;\n        }\n    }\n    HTTP.UnprocessableEntity = UnprocessableEntity;\n    class UpgradeRequired extends ErrorCategory {\n        constructor() {\n            super(...arguments);\n            this.name = \"UpgradeRequired\";\n            this.code = 426;\n        }\n    }\n    HTTP.UpgradeRequired = UpgradeRequired;\n    class PreconditionRequired extends ErrorCategory {\n        constructor() {\n            super(...arguments);\n            this.name = \"PreconditionRequired\";\n            this.code = 428;\n        }\n    }\n    HTTP.PreconditionRequired = PreconditionRequired;\n    class TooManyRequests extends ErrorCategory {\n        constructor() {\n            super(...arguments);\n            this.name = \"TooManyRequests\";\n            this.code = 429;\n        }\n    }\n    HTTP.TooManyRequests = TooManyRequests;\n    class InternalServerError extends ErrorCategory {\n        constructor() {\n            super(...arguments);\n            this.name = \"InternalServerError\";\n            this.code = 500;\n        }\n    }\n    HTTP.InternalServerError = InternalServerError;\n    class NotImplemented extends ErrorCategory {\n        constructor() {\n            super(...arguments);\n            this.name = \"NotImplemented\";\n            this.code = 501;\n        }\n    }\n    HTTP.NotImplemented = NotImplemented;\n})(HTTP || (HTTP = {}));\nclass Success extends HTTP.OK {\n}\nclass Pending extends HTTP.Accepted {\n}\nclass NoContent extends HTTP.NoContent {\n}\nclass NothingToDo extends HTTP.NoContent {\n}\nclass BadRequest extends HTTP.BadRequest {\n}\nclass Forbidden extends HTTP.Forbidden {\n}\nclass PermissionsViolation extends HTTP.Forbidden {\n}\nclass ReadOnly extends HTTP.Forbidden {\n}\nclass NotFound extends HTTP.NotFound {\n}\nclass NotEnabled extends HTTP.UnprocessableEntity {\n}\nclass NotSupported extends HTTP.UnprocessableEntity {\n}\nclass ValidationError extends HTTP.BadRequest {\n}\nclass Timeout extends HTTP.RequestTimeout {\n}\nclass Conflict extends HTTP.Conflict {\n}\nclass Cancelled extends HTTP.Gone {\n}\nclass ConstraintViolation extends HTTP.Forbidden {\n}\nclass VersioningViolation extends HTTP.Forbidden {\n}\nclass Corruption extends HTTP.InternalServerError {\n}\nclass InvalidData extends HTTP.InternalServerError {\n}\nclass OperationFailed extends HTTP.InternalServerError {\n}\nclass StateViolation extends HTTP.InternalServerError {\n}\nclass Locked extends HTTP.Conflict {\n}\nclass NetworkError extends HTTP.InternalServerError {\n}\nclass Throttled extends HTTP.TooManyRequests {\n}\nclass FileSystemError extends HTTP.InternalServerError {\n}\nclass InternalError extends HTTP.InternalServerError {\n}\nclass UnknownError extends HTTP.InternalServerError {\n}\nclass NotImplemented extends HTTP.NotImplemented {\n}\nfunction lookupCategory(error) {\n    switch (error.errorNumber) {\n        case BentleyStatus.SUCCESS: return new Success();\n        case BentleyStatus.ERROR: return new UnknownError();\n        case IModelStatus.Success: return new Success();\n        case IModelStatus.AlreadyLoaded: return new StateViolation();\n        case IModelStatus.AlreadyOpen: return new StateViolation();\n        case IModelStatus.BadArg: return new ValidationError();\n        case IModelStatus.BadElement: return new ValidationError();\n        case IModelStatus.BadModel: return new ValidationError();\n        case IModelStatus.BadRequest: return new BadRequest();\n        case IModelStatus.BadSchema: return new ValidationError();\n        case IModelStatus.CannotUndo: return new OperationFailed();\n        case IModelStatus.CodeNotReserved: return new StateViolation();\n        case IModelStatus.DeletionProhibited: return new Forbidden();\n        case IModelStatus.DuplicateCode: return new Conflict();\n        case IModelStatus.DuplicateName: return new Conflict();\n        case IModelStatus.ElementBlockedChange: return new ConstraintViolation();\n        case IModelStatus.FileAlreadyExists: return new Conflict();\n        case IModelStatus.FileNotFound: return new NotFound();\n        case IModelStatus.FileNotLoaded: return new FileSystemError();\n        case IModelStatus.ForeignKeyConstraint: return new ConstraintViolation();\n        case IModelStatus.IdExists: return new Conflict();\n        case IModelStatus.InDynamicTransaction: return new StateViolation();\n        case IModelStatus.InvalidCategory: return new ValidationError();\n        case IModelStatus.InvalidCode: return new ValidationError();\n        case IModelStatus.InvalidCodeSpec: return new ValidationError();\n        case IModelStatus.InvalidId: return new ValidationError();\n        case IModelStatus.InvalidName: return new ValidationError();\n        case IModelStatus.InvalidParent: return new Conflict();\n        case IModelStatus.InvalidProfileVersion: return new InvalidData();\n        case IModelStatus.IsCreatingChangeSet: return new StateViolation();\n        case IModelStatus.LockNotHeld: return new Forbidden();\n        case IModelStatus.Mismatch2d3d: return new ValidationError();\n        case IModelStatus.MismatchGcs: return new ValidationError();\n        case IModelStatus.MissingDomain: return new ValidationError();\n        case IModelStatus.MissingHandler: return new ValidationError();\n        case IModelStatus.MissingId: return new ValidationError();\n        case IModelStatus.NoGeometry: return new NoContent();\n        case IModelStatus.NoMultiTxnOperation: return new StateViolation();\n        case IModelStatus.NotEnabled: return new NotEnabled();\n        case IModelStatus.NotFound: return new NotFound();\n        case IModelStatus.NotOpen: return new StateViolation();\n        case IModelStatus.NotOpenForWrite: return new Forbidden();\n        case IModelStatus.NotSameUnitBase: return new ValidationError();\n        case IModelStatus.NothingToRedo: return new NothingToDo();\n        case IModelStatus.NothingToUndo: return new NothingToDo();\n        case IModelStatus.ParentBlockedChange: return new Forbidden();\n        case IModelStatus.ReadError: return new FileSystemError();\n        case IModelStatus.ReadOnly: return new ReadOnly();\n        case IModelStatus.ReadOnlyDomain: return new ReadOnly();\n        case IModelStatus.RepositoryManagerError: return new NetworkError();\n        case IModelStatus.SQLiteError: return new InternalError();\n        case IModelStatus.TransactionActive: return new StateViolation();\n        case IModelStatus.UnitsMissing: return new ValidationError();\n        case IModelStatus.UnknownFormat: return new InvalidData();\n        case IModelStatus.UpgradeFailed: return new OperationFailed();\n        case IModelStatus.ValidationFailed: return new ValidationError();\n        case IModelStatus.VersionTooNew: return new VersioningViolation();\n        case IModelStatus.VersionTooOld: return new VersioningViolation();\n        case IModelStatus.ViewNotFound: return new NotFound();\n        case IModelStatus.WriteError: return new FileSystemError();\n        case IModelStatus.WrongClass: return new ValidationError();\n        case IModelStatus.WrongIModel: return new ValidationError();\n        case IModelStatus.WrongDomain: return new ValidationError();\n        case IModelStatus.WrongElement: return new ValidationError();\n        case IModelStatus.WrongHandler: return new ValidationError();\n        case IModelStatus.WrongModel: return new ValidationError();\n        case IModelStatus.ConstraintNotUnique: return new ConstraintViolation();\n        case IModelStatus.NoGeoLocation: return new ValidationError();\n        case IModelStatus.ServerTimeout: return new Timeout();\n        case IModelStatus.NoContent: return new NoContent();\n        case IModelStatus.NotRegistered: return new NotImplemented();\n        case IModelStatus.FunctionNotFound: return new NotImplemented();\n        case IModelStatus.NoActiveCommand: return new StateViolation();\n        case BriefcaseStatus.CannotAcquire: return new OperationFailed();\n        case BriefcaseStatus.CannotDownload: return new OperationFailed();\n        case BriefcaseStatus.CannotUpload: return new OperationFailed();\n        case BriefcaseStatus.CannotCopy: return new OperationFailed();\n        case BriefcaseStatus.CannotDelete: return new OperationFailed();\n        case BriefcaseStatus.VersionNotFound: return new NotFound();\n        case BriefcaseStatus.CannotApplyChanges: return new OperationFailed();\n        case BriefcaseStatus.DownloadCancelled: return new Cancelled();\n        case BriefcaseStatus.ContainsDeletedChangeSets: return new ValidationError();\n        case RpcInterfaceStatus.Success: return new Success();\n        case RpcInterfaceStatus.IncompatibleVersion: return new VersioningViolation();\n        case ChangeSetStatus.Success: return new Success();\n        case ChangeSetStatus.ApplyError: return new OperationFailed();\n        case ChangeSetStatus.ChangeTrackingNotEnabled: return new NotEnabled();\n        case ChangeSetStatus.CorruptedChangeStream: return new Corruption();\n        case ChangeSetStatus.FileNotFound: return new NotFound();\n        case ChangeSetStatus.FileWriteError: return new FileSystemError();\n        case ChangeSetStatus.HasLocalChanges: return new StateViolation();\n        case ChangeSetStatus.HasUncommittedChanges: return new StateViolation();\n        case ChangeSetStatus.InvalidId: return new Corruption();\n        case ChangeSetStatus.InvalidVersion: return new Corruption();\n        case ChangeSetStatus.InDynamicTransaction: return new StateViolation();\n        case ChangeSetStatus.IsCreatingChangeSet: return new StateViolation();\n        case ChangeSetStatus.IsNotCreatingChangeSet: return new StateViolation();\n        case ChangeSetStatus.MergePropagationError: return new OperationFailed();\n        case ChangeSetStatus.NothingToMerge: return new NothingToDo();\n        case ChangeSetStatus.NoTransactions: return new OperationFailed();\n        case ChangeSetStatus.ParentMismatch: return new ValidationError();\n        case ChangeSetStatus.SQLiteError: return new InternalError();\n        case ChangeSetStatus.WrongDgnDb: return new ValidationError();\n        case ChangeSetStatus.CouldNotOpenDgnDb: return new OperationFailed();\n        case ChangeSetStatus.MergeSchemaChangesOnOpen: return new BadRequest();\n        case ChangeSetStatus.ReverseOrReinstateSchemaChanges: return new Conflict();\n        case ChangeSetStatus.ProcessSchemaChangesOnOpen: return new BadRequest();\n        case ChangeSetStatus.CannotMergeIntoReadonly: return new ValidationError();\n        case ChangeSetStatus.CannotMergeIntoMaster: return new ValidationError();\n        case ChangeSetStatus.CannotMergeIntoReversed: return new ValidationError();\n        case RepositoryStatus.Success: return new Success();\n        case RepositoryStatus.ServerUnavailable: return new NetworkError();\n        case RepositoryStatus.LockAlreadyHeld: return new Conflict();\n        case RepositoryStatus.SyncError: return new NetworkError();\n        case RepositoryStatus.InvalidResponse: return new NetworkError();\n        case RepositoryStatus.PendingTransactions: return new StateViolation();\n        case RepositoryStatus.LockUsed: return new StateViolation();\n        case RepositoryStatus.CannotCreateChangeSet: return new InternalError();\n        case RepositoryStatus.InvalidRequest: return new NetworkError();\n        case RepositoryStatus.ChangeSetRequired: return new StateViolation();\n        case RepositoryStatus.CodeUnavailable: return new Conflict();\n        case RepositoryStatus.CodeNotReserved: return new StateViolation();\n        case RepositoryStatus.CodeUsed: return new StateViolation();\n        case RepositoryStatus.LockNotHeld: return new Forbidden();\n        case RepositoryStatus.RepositoryIsLocked: return new Locked();\n        case RepositoryStatus.ChannelConstraintViolation: return new ConstraintViolation();\n        case HttpStatus.Success: return new Success();\n        case IModelHubStatus.Success: return new Success();\n        case IModelHubStatus.Unknown: return new UnknownError();\n        case IModelHubStatus.MissingRequiredProperties: return new ValidationError();\n        case IModelHubStatus.InvalidPropertiesValues: return new ValidationError();\n        case IModelHubStatus.UserDoesNotHavePermission: return new PermissionsViolation();\n        case IModelHubStatus.UserDoesNotHaveAccess: return new PermissionsViolation();\n        case IModelHubStatus.InvalidBriefcase: return new ValidationError();\n        case IModelHubStatus.BriefcaseDoesNotExist: return new NotFound();\n        case IModelHubStatus.BriefcaseDoesNotBelongToUser: return new PermissionsViolation();\n        case IModelHubStatus.AnotherUserPushing: return new StateViolation();\n        case IModelHubStatus.ChangeSetAlreadyExists: return new Conflict();\n        case IModelHubStatus.ChangeSetDoesNotExist: return new NotFound();\n        case IModelHubStatus.FileIsNotUploaded: return new StateViolation();\n        case IModelHubStatus.iModelIsNotInitialized: return new StateViolation();\n        case IModelHubStatus.ChangeSetPointsToBadSeed: return new InvalidData();\n        case IModelHubStatus.OperationFailed: return new OperationFailed();\n        case IModelHubStatus.PullIsRequired: return new StateViolation();\n        case IModelHubStatus.MaximumNumberOfBriefcasesPerUser: return new Throttled();\n        case IModelHubStatus.MaximumNumberOfBriefcasesPerUserPerMinute: return new Throttled();\n        case IModelHubStatus.DatabaseTemporarilyLocked: return new Locked();\n        case IModelHubStatus.iModelIsLocked: return new Locked();\n        case IModelHubStatus.CodesExist: return new Conflict();\n        case IModelHubStatus.LocksExist: return new Conflict();\n        case IModelHubStatus.iModelAlreadyExists: return new Conflict();\n        case IModelHubStatus.iModelDoesNotExist: return new NotFound();\n        case IModelHubStatus.FileDoesNotExist: return new NotFound();\n        case IModelHubStatus.FileAlreadyExists: return new Conflict();\n        case IModelHubStatus.LockDoesNotExist: return new NotFound();\n        case IModelHubStatus.LockOwnedByAnotherBriefcase: return new Conflict();\n        case IModelHubStatus.CodeStateInvalid: return new StateViolation();\n        case IModelHubStatus.CodeReservedByAnotherBriefcase: return new Conflict();\n        case IModelHubStatus.CodeDoesNotExist: return new NotFound();\n        case IModelHubStatus.EventTypeDoesNotExist: return new NotFound();\n        case IModelHubStatus.EventSubscriptionDoesNotExist: return new NotFound();\n        case IModelHubStatus.EventSubscriptionAlreadyExists: return new StateViolation();\n        case IModelHubStatus.ITwinIdIsNotSpecified: return new ValidationError();\n        case IModelHubStatus.FailedToGetITwinPermissions: return new OperationFailed();\n        case IModelHubStatus.FailedToGetITwinMembers: return new OperationFailed();\n        case IModelHubStatus.ChangeSetAlreadyHasVersion: return new Conflict();\n        case IModelHubStatus.VersionAlreadyExists: return new Conflict();\n        case IModelHubStatus.JobSchedulingFailed: return new InternalError();\n        case IModelHubStatus.ConflictsAggregate: return new Conflict();\n        case IModelHubStatus.FailedToGetITwinById: return new OperationFailed();\n        case IModelHubStatus.DatabaseOperationFailed: return new OperationFailed();\n        case IModelHubStatus.SeedFileInitializationFailed: return new OperationFailed();\n        case IModelHubStatus.FailedToGetAssetPermissions: return new OperationFailed();\n        case IModelHubStatus.FailedToGetAssetMembers: return new OperationFailed();\n        case IModelHubStatus.ITwinDoesNotExist: return new NotFound();\n        case IModelHubStatus.LockChunkDoesNotExist: return new NotFound();\n        case IModelHubStatus.CheckpointAlreadyExists: return new Conflict();\n        case IModelHubStatus.CheckpointDoesNotExist: return new NotFound();\n        case IModelHubStatus.UndefinedArgumentError: return new ValidationError();\n        case IModelHubStatus.InvalidArgumentError: return new ValidationError();\n        case IModelHubStatus.MissingDownloadUrlError: return new ValidationError();\n        case IModelHubStatus.NotSupportedInBrowser: return new NotSupported();\n        case IModelHubStatus.FileHandlerNotSet: return new NotImplemented();\n        case IModelHubStatus.FileNotFound: return new NotFound();\n        case IModelHubStatus.InitializationTimeout: return new Timeout();\n        case GeoServiceStatus.Success: return new Success();\n        case GeoServiceStatus.NoGeoLocation: return new ValidationError();\n        case GeoServiceStatus.OutOfUsefulRange: return new ValidationError();\n        case GeoServiceStatus.OutOfMathematicalDomain: return new ValidationError();\n        case GeoServiceStatus.NoDatumConverter: return new OperationFailed();\n        case GeoServiceStatus.VerticalDatumConvertError: return new OperationFailed();\n        case GeoServiceStatus.CSMapError: return new InternalError();\n        case GeoServiceStatus.Pending: return new Pending();\n        case RealityDataStatus.Success: return new Success();\n        case RealityDataStatus.InvalidData: return new InvalidData();\n        default: return new UnknownError();\n    }\n}\n//# sourceMappingURL=StatusCategory.js.map",
      "start": 1693508120300,
      "end": 1693508120613,
      "sourcemaps": null
    }
  ]
}
