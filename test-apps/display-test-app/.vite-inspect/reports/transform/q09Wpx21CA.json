{
  "resolvedId": "D:/hub2023A/itwinjs-core/ui/appui-abstract/lib/esm/appui-abstract/BaseUiItemsProvider.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/* eslint-disable deprecation/deprecation */\n/** @packageDocumentation\n * @module UiItemsProvider\n */\nimport { StageUsage } from \"./items/StageUsage\";\nimport { UiItemsManager } from \"./UiItemsManager\";\n/** Base implementation of a UiItemsProvider. The base class allows the user to pass in a function that is used to determine if the\n * active stage should be provided items. Derived provider classes should override the `xxxInternal` methods to provide items.\n * @deprecated in 3.6. Use [BaseUiItemsProvider]($appui-react) instead.\n * @public\n */\nexport class BaseUiItemsProvider {\n    /*\n     * @param providerId - unique identifier for this instance of the provider. This is required in case separate packages want\n     * to set up custom stage with their own subset of standard tools.\n     * @param isSupportedStage - optional function that will be called to determine if tools should be added to current stage. If not set and\n     * the current stage's `usage` is set to `StageUsage.General` then the provider will add items to frontstage.\n     */\n    constructor(_providerId, isSupportedStage) {\n        this._providerId = _providerId;\n        this.isSupportedStage = isSupportedStage;\n    }\n    get id() { return this._providerId; }\n    onUnregister() { }\n    unregister() {\n        UiItemsManager.unregister(this._providerId);\n    }\n    /** Backstage items are not stage specific so no callback is used */\n    provideBackstageItems() {\n        return [];\n    }\n    provideToolbarButtonItemsInternal(_stageId, _stageUsage, _toolbarUsage, _toolbarOrientation, _stageAppData) {\n        return [];\n    }\n    provideToolbarButtonItems(stageId, stageUsage, toolbarUsage, toolbarOrientation, stageAppData) {\n        let provideToStage = false;\n        if (this.isSupportedStage) {\n            provideToStage = this.isSupportedStage(stageId, stageUsage, stageAppData, this);\n        }\n        else {\n            provideToStage = (stageUsage === StageUsage.General);\n        }\n        return provideToStage ? this.provideToolbarButtonItemsInternal(stageId, stageUsage, toolbarUsage, toolbarOrientation, stageAppData) : [];\n    }\n    provideStatusBarItemsInternal(_stageId, _stageUsage, _stageAppData) {\n        return [];\n    }\n    provideStatusBarItems(stageId, stageUsage, stageAppData) {\n        let provideToStage = false;\n        if (this.isSupportedStage) {\n            provideToStage = this.isSupportedStage(stageId, stageUsage, stageAppData, this);\n        }\n        else {\n            provideToStage = (stageUsage === StageUsage.General);\n        }\n        return provideToStage ? this.provideStatusBarItemsInternal(stageId, stageUsage, stageAppData) : [];\n    }\n    provideWidgetsInternal(_stageId, _stageUsage, _location, _section, _zoneLocation, _stageAppData) {\n        return [];\n    }\n    provideWidgets(stageId, stageUsage, location, section, _zoneLocation, stageAppData) {\n        let provideToStage = false;\n        if (this.isSupportedStage) {\n            provideToStage = this.isSupportedStage(stageId, stageUsage, stageAppData, this);\n        }\n        else {\n            provideToStage = (stageUsage === StageUsage.General);\n        }\n        return provideToStage ? this.provideWidgetsInternal(stageId, stageUsage, location, section, _zoneLocation, stageAppData) : [];\n    }\n}\n//# sourceMappingURL=BaseUiItemsProvider.js.map",
      "start": 1693508124363,
      "end": 1693508124434,
      "sourcemaps": null
    }
  ]
}
