{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/tile/ContextShareProvider.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\nimport { Guid } from \"@itwin/core-bentley\";\nimport { RealityDataFormat, RealityDataProvider } from \"@itwin/core-common\";\n/**\n * This class provide methods used to interpret url to Project Wise Context Share (RealityDataProvider.ContextShare)\n * @internal\n */\nexport class ContextShareProvider {\n    /** Return true if this is a supported url to this service provider */\n    static isProviderUrl(tilesetUrl) {\n        // Try to extract realityDataId from URL and if not possible, use the url as the key\n        let attUrl;\n        try {\n            attUrl = new URL(tilesetUrl);\n        }\n        catch (e) {\n            // Not a valid URL for Context share\n            return false;\n        }\n        // If api.bentley.com/realitydata is used, it is context share\n        if (tilesetUrl.toLowerCase().includes(\"api.bentley.com/realitydata\"))\n            return true;\n        // detect if it is a RDS url\n        const formattedUrl1 = attUrl.pathname.replace(/~2F/g, \"/\").replace(/\\\\/g, \"/\");\n        if (formattedUrl1) {\n            const urlParts1 = formattedUrl1.split(\"/\").map((entry) => entry.replace(/%2D/g, \"-\"));\n            let partOffset1 = 0;\n            urlParts1.find((value, index) => {\n                if (value === \"Repositories\") {\n                    partOffset1 = index;\n                    return true;\n                }\n                return false;\n            });\n            const isRDSUrl = (urlParts1[partOffset1] === \"Repositories\") && (urlParts1[partOffset1 + 1].match(\"S3MXECPlugin--*\") !== null) && (urlParts1[partOffset1 + 2] === \"S3MX\");\n            return isRDSUrl;\n        }\n        return false;\n    }\n    /** Return true if this is a supported url to this service provider */\n    static getInfoFromUrl(tilesetUrl) {\n        const invalidUrlInfo = { provider: RealityDataProvider.TilesetUrl, format: RealityDataFormat.ThreeDTile, id: tilesetUrl, iTwinId: undefined };\n        let attUrl;\n        try {\n            attUrl = new URL(tilesetUrl);\n        }\n        catch (e) {\n            // Not a valid URL and not equal, probably $cesiumAsset\n            return invalidUrlInfo;\n        }\n        // If api.bentley.com/realitydata is used, it is context share\n        if (tilesetUrl.toLowerCase().includes(\"api.bentley.com/realitydata\")) {\n            const lcTilesetUrl = tilesetUrl.toLowerCase();\n            // NOTICE: We assume it is a ThreeDTile BUT this could technically be a point cloud (OPC).\n            // This method was used in typical workflow where format was always ThreeDTile and is here for legacy support.\n            // We don't want to make a call to RDS to resolve format since this method must not be async (it is used in workflow that are not async)\n            const format = RealityDataFormat.ThreeDTile;\n            const indexId = lcTilesetUrl.indexOf(\"realitydata/\") + 12; // lenght of \"realitydata/\" = 12;\n            const id = lcTilesetUrl.substring(indexId, Guid.empty.length + indexId);\n            const indexProjectId = lcTilesetUrl.indexOf(\"projectid=\") + 10; // lenght of \"projectid=\" = 10;\n            let projectId;\n            if (indexProjectId && indexProjectId > 0)\n                projectId = lcTilesetUrl.substring(indexProjectId, Guid.empty.length + indexProjectId);\n            const apimContextShareKey = { provider: RealityDataProvider.ContextShare, format, id, iTwinId: projectId };\n            return apimContextShareKey;\n        }\n        // detect if it is a RDS url\n        const formattedUrl1 = attUrl.pathname.replace(/~2F/g, \"/\").replace(/\\\\/g, \"/\");\n        if (formattedUrl1) {\n            const urlParts1 = formattedUrl1.split(\"/\").map((entry) => entry.replace(/%2D/g, \"-\"));\n            let partOffset1 = 0;\n            urlParts1.find((value, index) => {\n                if (value === \"Repositories\") {\n                    partOffset1 = index;\n                    return true;\n                }\n                return false;\n            });\n            const isOPC = attUrl.pathname.match(\".opc*\") !== null;\n            const isRDSUrl = (urlParts1[partOffset1] === \"Repositories\") && (urlParts1[partOffset1 + 1].match(\"S3MXECPlugin--*\") !== null) && (urlParts1[partOffset1 + 2] === \"S3MX\");\n            let projectId;\n            const projectIdSection = urlParts1.find((val) => val.includes(\"--\"));\n            if (projectIdSection)\n                projectId = projectIdSection.split(\"--\")[1];\n            // Make sure the url to compare are REALITYMESH3DTILES url, otherwise, compare the url directly\n            if (isRDSUrl || isOPC) {\n                // Make sure the reality data id are the same\n                const guid1 = urlParts1.find(Guid.isGuid);\n                if (guid1 !== undefined) {\n                    const provider = RealityDataProvider.ContextShare;\n                    const format = isOPC ? RealityDataFormat.OPC : RealityDataFormat.ThreeDTile;\n                    const contextShareKey = { provider, format, id: guid1, iTwinId: projectId };\n                    return contextShareKey;\n                }\n            }\n        }\n        // Not a valid URL and not equal, probably $cesiumAsset\n        return invalidUrlInfo;\n    }\n    static getInfoFromBlobUrl(blobUrl) {\n        let format = RealityDataFormat.ThreeDTile;\n        let provider = RealityDataProvider.TilesetUrl;\n        const url = new URL(blobUrl);\n        // If we cannot interpret that url pass in parameter we just fallback to old implementation\n        if (!url.pathname)\n            return { provider, format, id: blobUrl };\n        // const accountName   = url.hostname.split(\".\")[0];\n        let containerName = \"\";\n        if (url.pathname) {\n            const pathSplit = url.pathname.split(\"/\");\n            containerName = pathSplit[1];\n        }\n        // const blobFileName  = `/${pathSplit[2]}`;\n        // const sasToken      = url.search.substring(1);\n        const isOPC = url.pathname.match(\".opc*\") !== null;\n        provider = RealityDataProvider.ContextShare;\n        format = isOPC ? RealityDataFormat.OPC : RealityDataFormat.ThreeDTile;\n        const contextShareKey = { provider, format, id: containerName };\n        return contextShareKey;\n    }\n}\n//# sourceMappingURL=ContextShareProvider.js.map",
      "start": 1693508122121,
      "end": 1693508122303,
      "sourcemaps": null
    }
  ]
}
