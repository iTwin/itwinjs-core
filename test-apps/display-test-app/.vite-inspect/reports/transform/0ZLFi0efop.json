{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/tile/IModelTileIO.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tile\n */\nimport { assert } from \"@itwin/core-bentley\";\nimport { Range3d } from \"@itwin/core-geometry\";\nimport { nextPoint3d64FromByteStream, TileFormat, TileHeader } from \"./TileIO\";\n/** Flags describing the geometry contained within a tile in iMdl format.\n * @internal\n */\nexport var ImdlFlags;\n(function (ImdlFlags) {\n    /** No special flags */\n    ImdlFlags[ImdlFlags[\"None\"] = 0] = \"None\";\n    /** The tile contains some curved geometry */\n    ImdlFlags[ImdlFlags[\"ContainsCurves\"] = 1] = \"ContainsCurves\";\n    /** Some geometry within the tile range was omitted based on its size */\n    ImdlFlags[ImdlFlags[\"Incomplete\"] = 4] = \"Incomplete\";\n    /** The tile must be refined by sub-division, not magnification. */\n    ImdlFlags[ImdlFlags[\"DisallowMagnification\"] = 8] = \"DisallowMagnification\";\n    /** The tile's feature table contains features from multiple models. */\n    ImdlFlags[ImdlFlags[\"MultiModelFeatureTable\"] = 16] = \"MultiModelFeatureTable\";\n})(ImdlFlags || (ImdlFlags = {}));\n/** Describes the maximum major and minor version of the iMdl tile format supported by this version of this package.\n * @internal\n */\nexport var CurrentImdlVersion;\n(function (CurrentImdlVersion) {\n    /** The unsigned 16-bit major version number. If the major version specified in the tile header is greater than this value, then this\n     * front-end is not capable of reading the tile content. Otherwise, this front-end can read the tile content even if the header specifies a\n     * greater minor version than CurrentVersion.Minor, although some data may be skipped.\n     */\n    CurrentImdlVersion[CurrentImdlVersion[\"Major\"] = 32] = \"Major\";\n    /** The unsigned 16-bit minor version number. If the major version in the tile header is equal to CurrentVersion.Major, then this package can\n     * read the tile content even if the minor version in the tile header is greater than this value, although some data may be skipped.\n     */\n    CurrentImdlVersion[CurrentImdlVersion[\"Minor\"] = 0] = \"Minor\";\n    /** The unsigned 32-bit version number derived from the 16-bit major and minor version numbers. */\n    CurrentImdlVersion[CurrentImdlVersion[\"Combined\"] = 2097152] = \"Combined\";\n})(CurrentImdlVersion || (CurrentImdlVersion = {}));\n/** Header embedded at the beginning of binary tile data in iMdl format describing its contents.\n * @internal\n */\nexport class ImdlHeader extends TileHeader {\n    get versionMajor() { return this.version >>> 0x10; }\n    get versionMinor() { return (this.version & 0xffff) >>> 0; }\n    get isValid() { return TileFormat.IModel === this.format; }\n    get isReadableVersion() { return this.versionMajor <= CurrentImdlVersion.Major; }\n    /** Deserialize a header from the binary data at the stream's current position.\n     * If the binary data does not contain a valid header, the Header will be marked 'invalid'.\n     */\n    constructor(stream) {\n        super(stream);\n        this.headerLength = stream.readUint32();\n        this.flags = stream.readUint32();\n        this.contentRange = new Range3d();\n        nextPoint3d64FromByteStream(stream, this.contentRange.low);\n        nextPoint3d64FromByteStream(stream, this.contentRange.high);\n        this.tolerance = stream.readFloat64();\n        this.numElementsIncluded = stream.readUint32();\n        this.numElementsExcluded = stream.readUint32();\n        this.tileLength = stream.readUint32();\n        // empty sub-volume bit field introduced in format v02.00\n        this.emptySubRanges = this.versionMajor >= 2 ? stream.readUint32() : 0;\n        // Skip any unprocessed bytes in header\n        const remainingHeaderBytes = this.headerLength - stream.curPos;\n        assert(remainingHeaderBytes >= 0);\n        stream.advance(remainingHeaderBytes);\n        if (stream.isPastTheEnd)\n            this.invalidate();\n    }\n}\n/** Header preceding the feature table embedded in an iMdl tile's content.\n * @internal\n */\nclass FeatureTableHeader {\n    static readFrom(stream) {\n        const length = stream.readUint32();\n        const maxFeatures = stream.readUint32();\n        const count = stream.readUint32();\n        return stream.isPastTheEnd ? undefined : new FeatureTableHeader(length, maxFeatures, count);\n    }\n    constructor(length, numSubCategories, count) {\n        this.length = length;\n        this.numSubCategories = numSubCategories;\n        this.count = count;\n    }\n}\nFeatureTableHeader.sizeInBytes = 12;\nexport { FeatureTableHeader };\n//# sourceMappingURL=IModelTileIO.js.map",
      "start": 1693508121101,
      "end": 1693508121171,
      "sourcemaps": null
    }
  ]
}
