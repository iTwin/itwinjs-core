{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend-devtools/lib/esm/tools/DisplayStyleTools.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tools\n */\nimport { ColorDef, RenderMode, SkyCube, SkySphere, SubCategoryOverride, ViewFlags, WhiteOnWhiteReversalSettings, } from \"@itwin/core-common\";\nimport { IModelApp, NotifyMessageDetails, OutputMessagePriority, Tool, } from \"@itwin/core-frontend\";\nimport { copyStringToClipboard } from \"../ClipboardUtilities\";\nimport { parseArgs } from \"./parseArgs\";\nimport { parseToggle } from \"./parseToggle\";\n// Compiler has the info to construct this array for us, but we have no access to it...\nconst booleanFlagNames = [\n    \"dimensions\", \"patterns\", \"weights\", \"styles\", \"transparency\", \"fill\", \"textures\", \"materials\", \"acsTriad\", \"grid\", \"visibleEdges\",\n    \"hiddenEdges\", \"lighting\", \"shadows\", \"clipVolume\", \"constructions\", \"monochrome\", \"backgroundMap\", \"ambientOcclusion\", \"forceSurfaceDiscard\",\n    \"wiremesh\",\n];\nconst lowercaseBooleanFlagNames = booleanFlagNames.map((name) => name.toLowerCase());\n/** Modifies the selected viewport's DisplayStyleState.\n * @beta\n */\nexport class DisplayStyleTool extends Tool {\n    get require3d() { return false; }\n    async run() {\n        const vp = IModelApp.viewManager.selectedView;\n        if (undefined !== vp && (!this.require3d || vp.view.is3d()) && await this.execute(vp))\n            vp.displayStyle = vp.view.displayStyle;\n        return true;\n    }\n    async parseAndRun(...args) {\n        const vp = IModelApp.viewManager.selectedView;\n        if (undefined !== vp && (!this.require3d || vp.view.is3d()) && await this.parse(args, vp))\n            return this.run();\n        else\n            return false;\n    }\n}\n/** Modifies the selected viewport's ViewFlags.\n * The keyin syntax is as follows:\n *  fdt change viewflags flag=value\n * Where 'flag' is one of the BooleanFlagName values, or \"renderMode\"; and value is an integer.\n * For boolean flags, value is 0 for false or 1 for true. For renderMode, value is one of the RenderMode enum values.\n * Flag names are case-insensitive.\n * @beta\n */\nclass ChangeViewFlagsTool extends Tool {\n    static get maxArgs() { return undefined; }\n    static get minArgs() { return 1; }\n    async run(vf, vp) {\n        if (undefined !== vf && undefined !== vp)\n            vp.viewFlags = vf;\n        return true;\n    }\n    async parseAndRun(...args) {\n        const vp = IModelApp.viewManager.selectedView;\n        if (undefined === vp || 0 === args.length)\n            return true;\n        const vf = { ...vp.viewFlags };\n        for (const arg of args) {\n            const parts = arg.split(\"=\");\n            if (2 !== parts.length)\n                continue;\n            const value = parseInt(parts[1], 10);\n            if (Number.isNaN(value))\n                continue;\n            const name = parts[0].toLowerCase();\n            if (name === \"rendermode\") {\n                switch (value) {\n                    case RenderMode.SmoothShade:\n                    case RenderMode.Wireframe:\n                    case RenderMode.HiddenLine:\n                    case RenderMode.SolidFill:\n                        vf.renderMode = value;\n                        vp.invalidateRenderPlan();\n                        break;\n                }\n                continue;\n            }\n            if (0 !== value && 1 !== value)\n                continue;\n            const index = lowercaseBooleanFlagNames.indexOf(name);\n            if (-1 !== index) {\n                const propName = booleanFlagNames[index];\n                vf[propName] = 0 !== value;\n                vp.invalidateRenderPlan();\n            }\n        }\n        return this.run(new ViewFlags(vf), vp);\n    }\n}\nChangeViewFlagsTool.toolId = \"ChangeViewFlags\";\nexport { ChangeViewFlagsTool };\n/** Toggles the skybox.\n * @beta\n */\nclass ToggleSkyboxTool extends DisplayStyleTool {\n    get require3d() { return true; }\n    async parse(_args) { return true; } // no arguments\n    async execute(vp) {\n        const style = vp.view.displayStyle;\n        style.environment = style.environment.withDisplay({ sky: !style.environment.displaySky });\n        return true;\n    }\n}\nToggleSkyboxTool.toolId = \"ToggleSkybox\";\nexport { ToggleSkyboxTool };\n/** Defines a [SkySphere]($common) to apply to the current view.\n * @beta\n */\nclass SkySphereTool extends DisplayStyleTool {\n    static get minArgs() { return 1; }\n    static get maxArgs() { return 1; }\n    get require3d() { return true; }\n    async parse(args) {\n        this._image = args[0];\n        return true;\n    }\n    async execute(vp) {\n        if (this._image && vp.view.is3d()) {\n            vp.view.displayStyle.environment = vp.view.displayStyle.environment.clone({\n                displaySky: true,\n                sky: new SkySphere(this._image),\n            });\n        }\n        return true;\n    }\n}\nSkySphereTool.toolId = \"SetSkySphere\";\nexport { SkySphereTool };\n/** Defines a [SkyCube]($common) to apply to the current view.\n * @beta\n */\nclass SkyCubeTool extends DisplayStyleTool {\n    constructor() {\n        super(...arguments);\n        this._images = [];\n    }\n    static get minArgs() { return 1; }\n    static get maxArgs() { return 6; }\n    get require3d() { return true; }\n    async parse(args) {\n        this._images = [...args];\n        return true;\n    }\n    async execute(vp) {\n        const imgs = this._images;\n        if (imgs.length === 0 || !vp.view.is3d())\n            return true;\n        let top, bottom, left, right, front, back;\n        switch (imgs.length) {\n            case 1:\n                top = bottom = left = right = front = back = imgs[0];\n                break;\n            case 2:\n                top = bottom = imgs[0];\n                left = right = front = back = imgs[1];\n                break;\n            case 3:\n                top = bottom = imgs[0];\n                left = right = imgs[1];\n                front = back = imgs[2];\n                break;\n            case 4:\n                top = imgs[0];\n                bottom = imgs[1];\n                left = right = imgs[2];\n                front = back = imgs[3];\n                break;\n            case 5:\n                top = bottom = imgs[0];\n                left = imgs[1];\n                right = imgs[2];\n                front = imgs[3];\n                back = imgs[4];\n                break;\n            default:\n                top = imgs[0];\n                bottom = imgs[1];\n                left = imgs[2];\n                right = imgs[3];\n                front = imgs[4];\n                back = imgs[5];\n                break;\n        }\n        vp.view.displayStyle.environment = vp.view.displayStyle.environment.clone({\n            displaySky: true,\n            sky: new SkyCube({ top, bottom, left, right, front, back }),\n        });\n        return true;\n    }\n}\nSkyCubeTool.toolId = \"SetSkyCube\";\nexport { SkyCubeTool };\n/** Outputs (and optionally copies to the clipboard) a \"rendering style\" as a partial DisplayStyle3dSettingsProps JSON object based\n * on the current view's display style settings.\n * All arguments are optional, of the form \"name=value\" where `value` is 0 for false or 1 for true. All arguments default to `false` if omitted.\n * @see [DisplayStyleSettings.toOverrides]($common) for details.\n * Arguments:\n *  * `all`: include all settings.\n *  * `imodel`: include iModel-specific settings.\n *  * `project`: include iTwin-specific (formerly known as project) settings.\n *  * `map`: include background map settings.\n *  * `drawingaids`: include drawing aid decoration settings.\n *  * `copy`: copy result to system clipboard.\n *  * `quote`: format the JSON so it can be parsed directly by [ApplyRenderingStyleTool].\n * @beta\n */\nclass SaveRenderingStyleTool extends DisplayStyleTool {\n    constructor() {\n        super(...arguments);\n        this._options = {};\n        this._copyToClipboard = false;\n        this._quote = false;\n    }\n    static get minArgs() { return 0; }\n    static get maxArgs() { return 7; }\n    async parse(inputArgs) {\n        const args = parseArgs(inputArgs);\n        function getArg(name) {\n            return args.getBoolean(name) ? true : undefined;\n        }\n        this._options.includeAll = getArg(\"a\");\n        this._options.includeIModelSpecific = getArg(\"i\");\n        this._options.includeITwinSpecific = getArg(\"p\"); // \"p\" for backwards compatibility with old \"project\" terminology\n        this._options.includeBackgroundMap = getArg(\"m\");\n        this._options.includeDrawingAids = getArg(\"d\");\n        this._copyToClipboard = true === getArg(\"c\");\n        this._quote = true === getArg(\"q\");\n        return true;\n    }\n    async execute(vp) {\n        let json = JSON.stringify(vp.displayStyle.settings.toOverrides(this._options));\n        if (this._quote)\n            json = `\"${json.replace(/\"/g, '\"\"')}\"`;\n        IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Info, \"Rendering style saved\", json));\n        if (this._copyToClipboard)\n            copyStringToClipboard(json);\n        return false;\n    }\n}\nSaveRenderingStyleTool.toolId = \"SaveRenderingStyle\";\nexport { SaveRenderingStyleTool };\n/** Given a \"rendering style\" as a partial DisplayStyle3dSettingsProperties JSON string, apply it to the selected viewport's display style.\n * @see [DisplayStyleSettings.applyOverrides]($common) for details.\n * @beta\n */\nclass ApplyRenderingStyleTool extends DisplayStyleTool {\n    static get minArgs() { return 1; }\n    static get maxArgs() { return 1; }\n    async parse(args) {\n        try {\n            this._overrides = JSON.parse(args[0]);\n            return true;\n        }\n        catch {\n            IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Error, \"Invalid JSON\"));\n            return false;\n        }\n    }\n    async execute(vp) {\n        if (this._overrides)\n            vp.overrideDisplayStyle(this._overrides);\n        return false;\n    }\n}\nApplyRenderingStyleTool.toolId = \"ApplyRenderingStyle\";\nexport { ApplyRenderingStyleTool };\n/** Apply appearance overrides to one or more subcategories in the active viewport.\n * @beta\n */\nclass OverrideSubCategoryTool extends DisplayStyleTool {\n    constructor() {\n        super(...arguments);\n        this._overrideProps = {};\n        this._subcategoryIds = [];\n    }\n    static get minArgs() { return 1; }\n    static get maxArgs() { return 7; }\n    async parse(inArgs) {\n        const args = parseArgs(inArgs);\n        const ids = args.get(\"i\");\n        if (ids)\n            this._subcategoryIds = ids.split(\",\");\n        const props = this._overrideProps;\n        props.color = args.getInteger(\"c\");\n        props.weight = args.getInteger(\"w\");\n        props.priority = args.getInteger(\"p\");\n        props.transp = args.getFloat(\"t\");\n        props.material = args.get(\"m\");\n        const visible = args.getBoolean(\"v\");\n        props.invisible = typeof visible === \"boolean\" ? !visible : undefined;\n        return true;\n    }\n    async execute(vp) {\n        const ovr = SubCategoryOverride.fromJSON(this._overrideProps);\n        for (const id of this._subcategoryIds)\n            vp.displayStyle.overrideSubCategory(id, ovr);\n        return true;\n    }\n}\nOverrideSubCategoryTool.toolId = \"OverrideSubCategory\";\nexport { OverrideSubCategoryTool };\n/** Set whether background color is ignored when applying white-on-white reversal.\n * @beta\n */\nclass WoWIgnoreBackgroundTool extends DisplayStyleTool {\n    static get minArgs() { return 0; }\n    static get maxArgs() { return 1; }\n    async parse(args) {\n        const ignore = parseToggle(args[0]);\n        if (typeof ignore === \"string\")\n            return false;\n        this._ignore = ignore;\n        return true;\n    }\n    async execute(vp) {\n        const ignoreBackgroundColor = this._ignore ?? !vp.displayStyle.settings.whiteOnWhiteReversal.ignoreBackgroundColor;\n        vp.displayStyle.settings.whiteOnWhiteReversal = WhiteOnWhiteReversalSettings.fromJSON({ ignoreBackgroundColor });\n        return true;\n    }\n}\nWoWIgnoreBackgroundTool.toolId = \"WoWIgnoreBackground\";\nexport { WoWIgnoreBackgroundTool };\n/** Toggle whether surfaces display with overlaid wiremesh in the active viewport.\n * @see [ViewFlags.wiremesh]($common).\n * @beta\n */\nclass ToggleWiremeshTool extends DisplayStyleTool {\n    static get minArgs() { return 0; }\n    static get maxArgs() { return 1; }\n    async parse(args) {\n        const enable = parseToggle(args[0]);\n        if (typeof enable === \"string\")\n            return false;\n        this._enable = enable;\n        return true;\n    }\n    async execute(vp) {\n        vp.viewFlags = vp.viewFlags.with(\"wiremesh\", this._enable ?? !vp.viewFlags.wiremesh);\n        return true;\n    }\n}\nToggleWiremeshTool.toolId = \"ToggleWiremesh\";\nexport { ToggleWiremeshTool };\n/** Change the background color of the active viewport and optionally its transparency.\n * @beta\n */\nclass ChangeBackgroundColorTool extends DisplayStyleTool {\n    static get minArgs() { return 1; }\n    static get maxArgs() { return 1; }\n    async parse(args) {\n        this._color = ColorDef.fromString(args[0]);\n        return true;\n    }\n    async execute(vp) {\n        if (!this._color)\n            return false;\n        vp.displayStyle.backgroundColor = this._color;\n        return true;\n    }\n}\nChangeBackgroundColorTool.toolId = \"ChangeBackgroundColor\";\nexport { ChangeBackgroundColorTool };\n//# sourceMappingURL=DisplayStyleTools.js.map",
      "start": 1693508122629,
      "end": 1693508122724,
      "sourcemaps": null
    }
  ]
}
