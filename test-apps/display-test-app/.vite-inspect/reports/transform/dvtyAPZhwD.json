{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend-devtools/lib/esm/widgets/DiagnosticsPanel.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Widgets\n */\nimport { dispose } from \"@itwin/core-bentley\";\nimport { FpsTracker } from \"./FpsTracker\";\nimport { GpuProfiler } from \"./GpuProfiler\";\nimport { KeyinField } from \"./KeyinField\";\nimport { MemoryTracker } from \"./MemoryTracker\";\nimport { RenderCommandBreakdown } from \"./RenderCommandBreakdown\";\nimport { TileMemoryBreakdown } from \"./TileMemoryBreakdown\";\nimport { TileStatisticsTracker } from \"./TileStatisticsTracker\";\nimport { ToolSettingsTracker } from \"./ToolSettingsTracker\";\n/** Consolidates many other widgets into a single panel.\n * @beta\n */\nexport class DiagnosticsPanel {\n    constructor(vp, props) {\n        const exclude = (undefined !== props && undefined !== props.exclude) ? props.exclude : {};\n        this._element = document.createElement(\"div\");\n        this._element.className = \"debugPanel\";\n        if (true !== exclude.fps) {\n            this._fpsTracker = new FpsTracker(this._element, vp);\n            this.addSeparator();\n        }\n        if (true !== exclude.keyin) {\n            this.keyinField = new KeyinField({\n                parent: this._element,\n                baseId: \"diagnosticsPanelKeyin\",\n                wantButton: true,\n                wantLabel: true,\n                historyLength: 20,\n            });\n            this.addSeparator();\n        }\n        if (true !== exclude.tileStats) {\n            this._statsTracker = new TileStatisticsTracker(this._element, vp);\n            this.addSeparator();\n        }\n        if (true !== exclude.tileMemoryBreakdown) {\n            this._tileMemoryBreakdown = new TileMemoryBreakdown(this._element);\n            this.addSeparator();\n        }\n        if (!exclude.renderCommands) {\n            this._renderCommands = new RenderCommandBreakdown(this._element);\n            this.addSeparator();\n        }\n        if (true !== exclude.memory) {\n            this._memoryTracker = new MemoryTracker(this._element, vp);\n            this.addSeparator();\n        }\n        if (true !== exclude.gpuProfiler) {\n            this._gpuProfiler = new GpuProfiler(this._element);\n            this.addSeparator();\n        }\n        if (true !== exclude.toolSettings)\n            this._toolSettingsTracker = new ToolSettingsTracker(this._element, vp);\n    }\n    get element() { return this._element; }\n    dispose() {\n        dispose(this._fpsTracker);\n        dispose(this._memoryTracker);\n        dispose(this._tileMemoryBreakdown);\n        dispose(this._renderCommands);\n        dispose(this._statsTracker);\n        dispose(this._gpuProfiler);\n        dispose(this._toolSettingsTracker);\n        if (undefined !== this._parentElement)\n            this._parentElement.removeChild(this._element);\n    }\n    addSeparator() {\n        this._element.appendChild(document.createElement(\"hr\"));\n    }\n}\n//# sourceMappingURL=DiagnosticsPanel.js.map",
      "start": 1693508122821,
      "end": 1693508122881,
      "sourcemaps": null
    }
  ]
}
