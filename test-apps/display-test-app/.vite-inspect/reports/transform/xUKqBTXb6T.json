{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/Atmosphere.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module DisplayStyles\n */\nimport { JsonUtils } from \"@itwin/core-bentley\";\n/** Namespace containing types controlling how atmospheric scattering should be rendered.\n * @beta\n * The techniques used to render the atmosphere approximate the physical behavior of light when interacting with particles in the air (Rayleigh Scattering and Mie Scattering)\n * Presently, only Rayleigh Scattering is implemented here\n *\n * In a nutshell, this implementation samples atmospheric density along rays cast from the view and uses the samples to simulate the scattering of light toward the camera.\n * The amount of light scattered toward the camera is dependent on the amount of light scattered away from its original path from the sun, so rays must also be cast from the sample points to the sun.\n *\n * The effect can be computed on vertices (the default for the background map) and fragments (the default for the skybox, which is a ViewportQuad).\n * All coordinates are in view space.\n *\n * This implementation is adapted from equations outlined in \"Display of Clouds Taking into Account Multiple Anisotropic Scattering and Sky Light\", Nishita et al. 1993\n *   which are further refined for use in GPU shaders in \"Photorealistic Real-Time Outdoor Light Scattering\", Hoffman and Preetham 2002.\n * These sources are also compiled in Chapter 16 of NVIDIA's \"GPU Gems 2\", which can be found online here:\n *   https://developer.nvidia.com/gpugems/gpugems2/part-ii-shading-lighting-and-shadows/chapter-16-accurate-atmospheric-scattering\n *\n * This implementation is also highly inspired by Sebastian Lague's Solar System project: https://github.com/SebLague/Solar-System/ and video: https://www.youtube.com/watch?v=DxfEbulyFcY\n *   along with this ShaderToy replica: https://www.shadertoy.com/view/fltXD2.\n * Both of which are inspired by this Nvidia article on atmospheric scattering: https://developer.nvidia.com/gpugems/gpugems2/part-ii-shading-lighting-and-shadows/chapter-16-accurate-atmospheric-scattering.\n */\nexport var Atmosphere;\n(function (Atmosphere) {\n    var _a;\n    /** @internal An immutable container of wavelength values for the red, green and blue pixel components. Values are in nanometers. */\n    class Wavelengths {\n        /** Constructs from red, green, and blue wavelength values.\n         * @param r Wavelength value for red\n         * @param g Wavelength value for green\n         * @param b Wavelength value for blue\n         */\n        constructor(props) {\n            this.r = Math.max(0, props.r);\n            this.g = Math.max(0, props.g);\n            this.b = Math.max(0, props.b);\n        }\n        equals(other) {\n            return this.r === other.r && this.g === other.g && this.b === other.b;\n        }\n        toJSON() {\n            return { r: this.r, g: this.g, b: this.b };\n        }\n        static fromJSON(json) {\n            let r = 0;\n            let g = 0;\n            let b = 0;\n            if (undefined !== json) {\n                if (typeof json.r === \"number\")\n                    r = json.r;\n                if (typeof json.g === \"number\")\n                    g = json.g;\n                if (typeof json.b === \"number\")\n                    b = json.b;\n            }\n            return new Wavelengths({ r, g, b });\n        }\n    }\n    Atmosphere.Wavelengths = Wavelengths;\n    /** Describes the properties with which the atmospheric scattering effect should be drawn. Theses properties correspond to a physics-based approximation of atmospheric scattering phenomenons. */\n    class Settings {\n        equals(other) {\n            if (this.atmosphereHeightAboveEarth !== other.atmosphereHeightAboveEarth)\n                return false;\n            if (this.exposure !== other.exposure)\n                return false;\n            if (this.densityFalloff !== other.densityFalloff)\n                return false;\n            if (this.depthBelowEarthForMaxDensity !== other.depthBelowEarthForMaxDensity)\n                return false;\n            if (this.numViewRaySamples !== other.numViewRaySamples)\n                return false;\n            if (this.numSunRaySamples !== other.numSunRaySamples)\n                return false;\n            if (this.scatteringStrength !== other.scatteringStrength)\n                return false;\n            if (!this.wavelengths.equals(other.wavelengths))\n                return false;\n            return true;\n        }\n        constructor(json) {\n            this.atmosphereHeightAboveEarth = JsonUtils.asDouble(json.atmosphereHeightAboveEarth, Settings._defaultAtmosphereHeightAboveEarth);\n            this.exposure = JsonUtils.asDouble(json.exposure, Settings._defaultExposure);\n            this.densityFalloff = JsonUtils.asDouble(json.densityFalloff, Settings._defaultDensityFalloff);\n            this.depthBelowEarthForMaxDensity = JsonUtils.asDouble(json.depthBelowEarthForMaxDensity, Settings._defaultMinDensityHeightBelowEarth);\n            this.numViewRaySamples = JsonUtils.asDouble(json.numViewRaySamples, Settings._defaultNumViewRaySamples);\n            this.numSunRaySamples = JsonUtils.asDouble(json.numSunRaySamples, Settings._defaultNumSunRaySamples);\n            this.scatteringStrength = JsonUtils.asDouble(json.scatteringStrength, Settings._defaultScatteringStrength);\n            this.wavelengths = Wavelengths.fromJSON(JsonUtils.asObject(json.wavelengths) ?? Settings._defaultWavelengths);\n        }\n        static fromJSON(json) {\n            if (undefined === json)\n                return this.defaults;\n            return new Settings(json);\n        }\n        toJSON(display) {\n            const json = {\n                atmosphereHeightAboveEarth: this.atmosphereHeightAboveEarth,\n                exposure: this.exposure,\n                densityFalloff: this.densityFalloff,\n                depthBelowEarthForMaxDensity: this.depthBelowEarthForMaxDensity,\n                numViewRaySamples: this.numViewRaySamples,\n                numSunRaySamples: this.numSunRaySamples,\n                scatteringStrength: this.scatteringStrength,\n                wavelengths: this.wavelengths.toJSON(),\n            };\n            if (undefined !== display)\n                json.display = display;\n            return json;\n        }\n    }\n    _a = Settings;\n    Settings._defaultAtmosphereHeightAboveEarth = 100000.0;\n    Settings._defaultExposure = 2.0;\n    Settings._defaultDensityFalloff = 10.0;\n    Settings._defaultScatteringStrength = 100;\n    Settings._defaultWavelengths = new Wavelengths({ r: 700.0, g: 530.0, b: 440.0 });\n    Settings._defaultNumViewRaySamples = 10;\n    Settings._highQualityNumViewRaySamples = 20;\n    Settings._defaultNumSunRaySamples = 5;\n    Settings.defaults = new Settings({});\n    Settings.highQuality = new Settings({ numViewRaySamples: _a._highQualityNumViewRaySamples });\n    Atmosphere.Settings = Settings;\n})(Atmosphere || (Atmosphere = {}));\n//# sourceMappingURL=Atmosphere.js.map",
      "start": 1693508120654,
      "end": 1693508120712,
      "sourcemaps": null
    }
  ]
}
