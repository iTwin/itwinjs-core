{
  "resolvedId": "D:/hub2023A/itwinjs-core/common/temp/node_modules/.pnpm/@itwin+imodels-access-frontend@3.1.0_ueafa4slb6ohrhyf7kbp6egmha/node_modules/@itwin/imodels-access-frontend/lib/esm/FrontendIModelsAccess.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n * Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n * See LICENSE.md in the project root for license terms and full copyright notice.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { IModelStatus } from \"@itwin/core-bentley\";\r\nimport { IModelError } from \"@itwin/core-common\";\r\nimport { IModelApp } from \"@itwin/core-frontend\";\r\nimport { ChangesetOrderByProperty, IModelsClient, NamedVersionOrderByProperty, OrderByOperator, take } from \"@itwin/imodels-client-management\";\r\nimport { AccessTokenAdapter } from \"./interface-adapters/AccessTokenAdapter\";\r\nexport class FrontendIModelsAccess {\r\n    constructor(iModelsClient) {\r\n        this._emptyChangeset = { index: 0, id: \"\" };\r\n        this._iModelsClient = iModelsClient !== null && iModelsClient !== void 0 ? iModelsClient : new IModelsClient();\r\n    }\r\n    async getChangesetFromId(arg) {\r\n        const getSingleChangesetParams = {\r\n            ...this.getIModelScopedOperationParams(arg),\r\n            changesetId: arg.changeSetId\r\n        };\r\n        const changeset = await this._iModelsClient.changesets.getSingle(getSingleChangesetParams);\r\n        if (!changeset)\r\n            throw new IModelError(IModelStatus.NotFound, `Changeset ${arg.changeSetId} not found`);\r\n        return { index: changeset.index, id: changeset.id };\r\n    }\r\n    async getLatestChangeset(arg) {\r\n        const getChangesetListParams = {\r\n            ...this.getIModelScopedOperationParams(arg),\r\n            urlParams: {\r\n                $top: 1,\r\n                $orderBy: {\r\n                    property: ChangesetOrderByProperty.Index,\r\n                    operator: OrderByOperator.Descending\r\n                }\r\n            }\r\n        };\r\n        const changesetsIterator = this._iModelsClient.changesets.getMinimalList(getChangesetListParams);\r\n        const changesets = await take(changesetsIterator, 1);\r\n        if (!changesets.length)\r\n            return this._emptyChangeset;\r\n        return { index: changesets[0].index, id: changesets[0].id };\r\n    }\r\n    async getChangesetFromVersion(arg) {\r\n        const version = arg.version;\r\n        if (version.isFirst)\r\n            return this._emptyChangeset;\r\n        const namedVersionChangesetId = version.getAsOfChangeSet();\r\n        if (namedVersionChangesetId)\r\n            return this.getChangesetFromId({ ...arg, changeSetId: namedVersionChangesetId });\r\n        const namedVersionName = version.getName();\r\n        if (namedVersionName)\r\n            return this.getChangesetFromNamedVersion({ ...arg, versionName: namedVersionName });\r\n        return this.getLatestChangeset(arg);\r\n    }\r\n    async getChangesetFromNamedVersion(arg) {\r\n        if (!arg.versionName)\r\n            return this.getChangesetFromLatestNamedVersion(arg);\r\n        const getNamedVersionListParams = {\r\n            ...this.getIModelScopedOperationParams(arg),\r\n            urlParams: {\r\n                name: arg.versionName\r\n            }\r\n        };\r\n        const namedVersionsIterator = this._iModelsClient.namedVersions.getMinimalList(getNamedVersionListParams);\r\n        const namedVersions = await take(namedVersionsIterator, 1);\r\n        if (namedVersions.length === 0 || !namedVersions[0].changesetId)\r\n            throw new IModelError(IModelStatus.NotFound, `Named version ${arg.versionName} not found`);\r\n        return { index: namedVersions[0].changesetIndex, id: namedVersions[0].changesetId };\r\n    }\r\n    getIModelScopedOperationParams(arg) {\r\n        const authorizationCallback = arg.accessToken\r\n            ? AccessTokenAdapter.toAuthorizationCallback(arg.accessToken)\r\n            : this.getAuthorizationCallbackFromIModelApp();\r\n        return {\r\n            authorization: authorizationCallback,\r\n            iModelId: arg.iModelId\r\n        };\r\n    }\r\n    getAuthorizationCallbackFromIModelApp() {\r\n        return async () => {\r\n            const token = await IModelApp.getAccessToken();\r\n            return AccessTokenAdapter.toAuthorization(token);\r\n        };\r\n    }\r\n    async getChangesetFromLatestNamedVersion(arg) {\r\n        const getNamedVersionListParams = {\r\n            ...this.getIModelScopedOperationParams(arg),\r\n            urlParams: {\r\n                $top: 1,\r\n                $orderBy: {\r\n                    property: NamedVersionOrderByProperty.ChangesetIndex,\r\n                    operator: OrderByOperator.Descending\r\n                }\r\n            }\r\n        };\r\n        const namedVersionsIterator = this._iModelsClient.namedVersions.getMinimalList(getNamedVersionListParams);\r\n        const namedVersions = await take(namedVersionsIterator, 1);\r\n        if (namedVersions.length === 0 || !namedVersions[0].changesetIndex || !namedVersions[0].changesetId)\r\n            throw new IModelError(IModelStatus.NotFound, \"No named versions found\");\r\n        return { index: namedVersions[0].changesetIndex, id: namedVersions[0].changesetId };\r\n    }\r\n}\r\n//# sourceMappingURL=FrontendIModelsAccess.js.map",
      "start": 1693508122487,
      "end": 1693508122613,
      "sourcemaps": null
    }
  ]
}
