{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/App.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport \"@bentley/icons-generic-webfont/dist/bentley-icons-generic-webfont.css\";\r\nimport { GuidString, ProcessDetector } from \"@itwin/core-bentley\";\r\nimport { ElectronApp, ElectronAppOpts } from \"@itwin/core-electron/lib/cjs/ElectronFrontend\";\r\nimport { BrowserAuthorizationClient } from \"@itwin/browser-authorization\";\r\nimport { FrontendIModelsAccess } from \"@itwin/imodels-access-frontend\";\r\nimport { IModelsClient } from \"@itwin/imodels-client-management\";\r\nimport { FrontendDevTools } from \"@itwin/frontend-devtools\";\r\nimport { HyperModeling } from \"@itwin/hypermodeling-frontend\";\r\nimport {\r\n  BentleyCloudRpcManager, BentleyCloudRpcParams, IModelReadRpcInterface, IModelTileRpcInterface, SnapshotIModelRpcInterface,\r\n} from \"@itwin/core-common\";\r\nimport { EditTools } from \"@itwin/editor-frontend\";\r\nimport {\r\n  AccuDrawHintBuilder, AccuDrawShortcuts, AccuSnap, IModelApp, IpcApp, LocalhostIpcApp, LocalHostIpcAppOpts, RenderSystem, SelectionTool, SnapMode,\r\n  TileAdmin, Tool, ToolAdmin,\r\n} from \"@itwin/core-frontend\";\r\nimport { MobileApp, MobileAppOpts } from \"@itwin/core-mobile/lib/cjs/MobileFrontend\";\r\nimport { RealityDataAccessClient, RealityDataClientOptions } from \"@itwin/reality-data-client\";\r\nimport { DtaConfiguration } from \"../common/DtaConfiguration\";\r\nimport { dtaChannel, DtaIpcInterface } from \"../common/DtaIpcInterface\";\r\nimport { DtaRpcInterface } from \"../common/DtaRpcInterface\";\r\nimport { ToggleAspectRatioSkewDecoratorTool } from \"./AspectRatioSkewDecorator\";\r\nimport { ApplyModelDisplayScaleTool } from \"./DisplayScale\";\r\nimport { ApplyModelTransformTool } from \"./DisplayTransform\";\r\nimport { GenerateElementGraphicsTool, GenerateTileContentTool } from \"./TileContentTool\";\r\nimport { ViewClipByElementGeometryTool } from \"./ViewClipByElementGeometryTool\";\r\nimport { DrawingAidTestTool } from \"./DrawingAidTestTool\";\r\nimport { EditingScopeTool, PlaceLineStringTool } from \"./EditingTools\";\r\nimport { FenceClassifySelectedTool } from \"./Fence\";\r\nimport { RecordFpsTool } from \"./FpsMonitor\";\r\nimport { FrameStatsTool } from \"./FrameStatsTool\";\r\nimport { ChangeGridSettingsTool } from \"./Grid\";\r\nimport { IncidentMarkerDemoTool } from \"./IncidentMarkerDemo\";\r\nimport { MarkupSelectTestTool } from \"./MarkupSelectTestTool\";\r\nimport { Notifications } from \"./Notifications\";\r\nimport { OutputShadersTool } from \"./OutputShadersTool\";\r\nimport { PathDecorationTestTool } from \"./PathDecorationTest\";\r\nimport { GltfDecorationTool } from \"./GltfDecoration\";\r\nimport { ToggleShadowMapTilesTool } from \"./ShadowMapDecoration\";\r\nimport { signIn, signOut } from \"./signIn\";\r\nimport {\r\n  CloneViewportTool, CloseIModelTool, CloseWindowTool, CreateWindowTool, DockWindowTool, FocusWindowTool, MaximizeWindowTool, OpenIModelTool,\r\n  ReopenIModelTool, ResizeWindowTool, RestoreWindowTool, Surface,\r\n} from \"./Surface\";\r\nimport { SyncViewportFrustaTool, SyncViewportsTool } from \"./SyncViewportsTool\";\r\nimport { TimePointComparisonTool } from \"./TimePointComparison\";\r\nimport { UiManager } from \"./UiManager\";\r\nimport { MarkupTool, ModelClipTool, ZoomToSelectedElementsTool } from \"./Viewer\";\r\nimport { MacroTool } from \"./MacroTools\";\r\nimport { RecordTileSizesTool } from \"./TileSizeRecorder\";\r\nimport { TerrainDrapeTool } from \"./TerrainDrapeTool\";\r\nimport { SaveImageTool } from \"./SaveImageTool\";\r\nimport { BingTerrainMeshProvider } from \"./BingTerrainProvider\";\r\nimport { AttachCustomRealityDataTool, registerRealityDataSourceProvider } from \"./RealityDataProvider\";\r\nimport { MapLayersFormats } from \"@itwin/map-layers-formats\";\r\nimport { OpenRealityModelSettingsTool } from \"./RealityModelDisplaySettingsWidget\";\r\nimport { ElectronRendererAuthorization } from \"@itwin/electron-authorization/lib/cjs/ElectronRenderer\";\r\nimport { ITwinLocalization } from \"@itwin/core-i18n\";\r\nimport { getConfigurationString } from \"./DisplayTestApp\";\r\n\r\nclass DisplayTestAppAccuSnap extends AccuSnap {\r\n  private readonly _activeSnaps: SnapMode[] = [SnapMode.NearestKeypoint];\r\n\r\n  public override get keypointDivisor() { return 2; }\r\n  public override getActiveSnapModes(): SnapMode[] { return this._activeSnaps; }\r\n  public setActiveSnapModes(snaps: SnapMode[]): void {\r\n    this._activeSnaps.length = snaps.length;\r\n    for (let i = 0; i < snaps.length; i++)\r\n      this._activeSnaps[i] = snaps[i];\r\n  }\r\n}\r\n\r\nclass DisplayTestAppToolAdmin extends ToolAdmin {\r\n  /** Process shortcut key events */\r\n  public override async processShortcutKey(keyEvent: KeyboardEvent, wentDown: boolean): Promise<boolean> {\r\n    if (wentDown && AccuDrawHintBuilder.isEnabled)\r\n      return AccuDrawShortcuts.processShortcutKey(keyEvent);\r\n    return false;\r\n  }\r\n}\r\n\r\nclass SVTSelectionTool extends SelectionTool {\r\n  public static override toolId = \"SVTSelect\";\r\n  protected override initSelectTool() {\r\n    super.initSelectTool();\r\n\r\n    // ###TODO Want to do this only if version comparison enabled, but meh.\r\n    IModelApp.locateManager.options.allowExternalIModels = true;\r\n  }\r\n}\r\n\r\nclass SignInTool extends Tool {\r\n  public static override toolId = \"SignIn\";\r\n  public override async run(): Promise<boolean> {\r\n    await signIn();\r\n    return true;\r\n  }\r\n}\r\n\r\nclass SignOutTool extends Tool {\r\n  public static override toolId = \"SignOut\";\r\n  public override async run(): Promise<boolean> {\r\n    await signOut();\r\n    return true;\r\n  }\r\n}\r\n\r\nclass PushChangesTool extends Tool {\r\n  public static override toolId = \"PushChanges\";\r\n  public static override get maxArgs() { return 1; }\r\n  public static override get minArgs() { return 1; }\r\n\r\n  public override async run(description?: string): Promise<boolean> {\r\n    if (!description || \"string\" !== typeof description)\r\n      return false;\r\n\r\n    const imodel = IModelApp.viewManager.selectedView?.iModel;\r\n    if (!imodel || !imodel.isBriefcaseConnection())\r\n      return false;\r\n\r\n    await imodel.pushChanges(description);\r\n    return true;\r\n  }\r\n\r\n  public override async parseAndRun(...args: string[]): Promise<boolean> {\r\n    return this.run(args[0]);\r\n  }\r\n}\r\n\r\nclass PullChangesTool extends Tool {\r\n  public static override toolId = \"PullChanges\";\r\n\r\n  public override async run(): Promise<boolean> {\r\n    const imodel = IModelApp.viewManager.selectedView?.iModel;\r\n    if (!imodel || !imodel.isBriefcaseConnection())\r\n      return false;\r\n\r\n    await imodel.pullChanges();\r\n    return true;\r\n  }\r\n}\r\n\r\nexport const dtaIpc = IpcApp.makeIpcProxy<DtaIpcInterface>(dtaChannel);\r\n\r\nclass RefreshTilesTool extends Tool {\r\n  public static override toolId = \"RefreshTiles\";\r\n  public static override get maxArgs() { return undefined; }\r\n\r\n  public override async run(changedModelIds?: string[]): Promise<boolean> {\r\n    if (undefined !== changedModelIds && 0 === changedModelIds.length)\r\n      changedModelIds = undefined;\r\n\r\n    IModelApp.viewManager.refreshForModifiedModels(changedModelIds);\r\n    return true;\r\n  }\r\n\r\n  public override async parseAndRun(...args: string[]): Promise<boolean> {\r\n    return this.run(args);\r\n  }\r\n}\r\n\r\nclass PurgeTileTreesTool extends Tool {\r\n  public static override toolId = \"PurgeTileTrees\";\r\n  public static override get minArgs() { return 0; }\r\n  public static override get maxArgs() { return undefined; }\r\n\r\n  public override async run(modelIds?: string[]): Promise<boolean> {\r\n    const vp = IModelApp.viewManager.selectedView;\r\n    if (undefined === vp)\r\n      return true;\r\n\r\n    if (undefined !== modelIds && 0 === modelIds.length)\r\n      modelIds = undefined;\r\n\r\n    await vp.iModel.tiles.purgeTileTrees(modelIds);\r\n    IModelApp.viewManager.refreshForModifiedModels(modelIds);\r\n\r\n    return true;\r\n  }\r\n\r\n  public override async parseAndRun(...args: string[]): Promise<boolean> {\r\n    return this.run(args);\r\n  }\r\n}\r\n\r\nclass ShutDownTool extends Tool {\r\n  public static override toolId = \"ShutDown\";\r\n\r\n  public override async run(_args: any[]): Promise<boolean> {\r\n    DisplayTestApp.surface.closeAllViewers();\r\n    const app = ElectronApp.isValid ? ElectronApp : IModelApp;\r\n    await app.shutdown();\r\n\r\n    debugger; // eslint-disable-line no-debugger\r\n    return true;\r\n  }\r\n}\r\n\r\nclass ExitTool extends Tool {\r\n  public static override toolId = \"Exit\";\r\n\r\n  public override async run(_args: any[]): Promise<boolean> {\r\n    DisplayTestApp.surface.closeAllViewers();\r\n    await DtaRpcInterface.getClient().terminate();\r\n    return true;\r\n  }\r\n}\r\n\r\nfunction createHubAccess(configuration: DtaConfiguration) {\r\n  if (configuration.urlPrefix) {\r\n    return new FrontendIModelsAccess(new IModelsClient({ api: { baseUrl: `https://${configuration.urlPrefix}api.bentley.com/imodels` } }));\r\n  } else {\r\n    return new FrontendIModelsAccess();\r\n  }\r\n}\r\n\r\nexport class DisplayTestApp {\r\n  private static _surface?: Surface;\r\n  public static get surface() { return this._surface!; }\r\n  public static set surface(surface: Surface) { this._surface = surface; }\r\n  private static _iTwinId?: GuidString;\r\n  public static get iTwinId(): GuidString | undefined { return this._iTwinId; }\r\n\r\n  public static async startup(configuration: DtaConfiguration, renderSys: RenderSystem.Options, tileAdmin: TileAdmin.Props): Promise<void> {\r\n    let socketUrl = new URL(configuration.customOrchestratorUri || \"http://localhost:3001\");\r\n    socketUrl = LocalhostIpcApp.buildUrlForSocket(socketUrl);\r\n    const realityDataClientOptions: RealityDataClientOptions = {\r\n      /** API Version. v1 by default */\r\n      // version?: ApiVersion;\r\n      /** API Url. Used to select environment. Defaults to \"https://api.bentley.com/realitydata\" */\r\n      baseUrl: `https://${process.env.IMJS_URL_PREFIX}api.bentley.com/realitydata`,\r\n    };\r\n    const opts: ElectronAppOpts | LocalHostIpcAppOpts = {\r\n      iModelApp: {\r\n        accuSnap: new DisplayTestAppAccuSnap(),\r\n        notifications: new Notifications(),\r\n        tileAdmin,\r\n        toolAdmin: new DisplayTestAppToolAdmin(),\r\n        uiAdmin: new UiManager(),\r\n        realityDataAccess: new RealityDataAccessClient(realityDataClientOptions),\r\n        renderSys,\r\n        rpcInterfaces: [\r\n          DtaRpcInterface,\r\n          IModelReadRpcInterface,\r\n          IModelTileRpcInterface,\r\n          SnapshotIModelRpcInterface,\r\n        ],\r\n        /* eslint-disable @typescript-eslint/naming-convention */\r\n        mapLayerOptions: {\r\n          MapboxImagery: configuration.mapBoxKey\r\n            ? { key: \"access_token\", value: configuration.mapBoxKey }\r\n            : undefined,\r\n          BingMaps: configuration.bingMapsKey\r\n            ? { key: \"key\", value: configuration.bingMapsKey }\r\n            : undefined,\r\n        },\r\n        /* eslint-enable @typescript-eslint/naming-convention */\r\n        hubAccess: createHubAccess(configuration),\r\n        localization: new ITwinLocalization({ detectorOptions: { order: [\"htmlTag\"] } }),\r\n      },\r\n      localhostIpcApp: {\r\n        socketUrl,\r\n      },\r\n    };\r\n\r\n    this._iTwinId = configuration.iTwinId;\r\n\r\n    if (ProcessDetector.isElectronAppFrontend) {\r\n      // The electron package produces an exception every time getAccessToken is called, which is quite frequently.\r\n      // It makes debugging with \"pause on caught exceptions\" infuriating.\r\n      // ###TODO fix that in the client and remove this\r\n      if (!configuration.noElectronAuth)\r\n        opts.iModelApp!.authorizationClient = new ElectronRendererAuthorization({\r\n          clientId: getConfigurationString(\"oidcClientId\") ?? \"imodeljs-spa-test\",\r\n        });\r\n\r\n      await ElectronApp.startup(opts);\r\n    } else if (ProcessDetector.isMobileAppFrontend) {\r\n      await MobileApp.startup(opts as MobileAppOpts);\r\n    } else {\r\n      const redirectUri = \"http://localhost:3000/signin-callback\";\r\n      const urlObj = new URL(redirectUri);\r\n      if (urlObj.pathname === window.location.pathname) {\r\n        const client = new BrowserAuthorizationClient({\r\n          clientId: getConfigurationString(\"oidcClientId\") ?? \"imodeljs-spa-test\",\r\n          scope: getConfigurationString(\"oidcScope\") ?? \"projects:read realitydata:read imodels:read imodels:modify imodelaccess:read\",\r\n          redirectUri,\r\n        });\r\n        await client.handleSigninCallback();\r\n      }\r\n\r\n      const rpcParams: BentleyCloudRpcParams = { info: { title: \"ui-test-app\", version: \"v1.0\" }, uriPrefix: configuration.customOrchestratorUri || \"http://localhost:3001\" };\r\n      if (opts.iModelApp?.rpcInterfaces) // eslint-disable-line deprecation/deprecation\r\n        BentleyCloudRpcManager.initializeClient(rpcParams, opts.iModelApp.rpcInterfaces); // eslint-disable-line deprecation/deprecation\r\n      await LocalhostIpcApp.startup(opts);\r\n    }\r\n\r\n    IModelApp.applicationLogoCard =\r\n      () => IModelApp.makeLogoCard({ iconSrc: \"DTA.png\", iconWidth: 100, heading: \"Display Test App\", notice: \"For internal testing\" });\r\n\r\n    const svtToolNamespace = \"SVTTools\";\r\n    await IModelApp.localization.registerNamespace(svtToolNamespace);\r\n    [\r\n      ApplyModelDisplayScaleTool,\r\n      ApplyModelTransformTool,\r\n      AttachCustomRealityDataTool,\r\n      ChangeGridSettingsTool,\r\n      CloneViewportTool,\r\n      CloseIModelTool,\r\n      CloseWindowTool,\r\n      CreateWindowTool,\r\n      DockWindowTool,\r\n      DrawingAidTestTool,\r\n      EditingScopeTool,\r\n      ExitTool,\r\n      FenceClassifySelectedTool,\r\n      FocusWindowTool,\r\n      FrameStatsTool,\r\n      GenerateElementGraphicsTool,\r\n      GenerateTileContentTool,\r\n      GltfDecorationTool,\r\n      IncidentMarkerDemoTool,\r\n      PathDecorationTestTool,\r\n      MacroTool,\r\n      MarkupSelectTestTool,\r\n      MarkupTool,\r\n      MaximizeWindowTool,\r\n      ModelClipTool,\r\n      OpenIModelTool,\r\n      OpenRealityModelSettingsTool,\r\n      OutputShadersTool,\r\n      PlaceLineStringTool,\r\n      PullChangesTool,\r\n      PushChangesTool,\r\n      PurgeTileTreesTool,\r\n      RecordFpsTool,\r\n      RecordTileSizesTool,\r\n      RefreshTilesTool,\r\n      ReopenIModelTool,\r\n      ResizeWindowTool,\r\n      RestoreWindowTool,\r\n      SaveImageTool,\r\n      ShutDownTool,\r\n      SignInTool,\r\n      SignOutTool,\r\n      SVTSelectionTool,\r\n      SyncViewportFrustaTool,\r\n      SyncViewportsTool,\r\n      TerrainDrapeTool,\r\n      ToggleAspectRatioSkewDecoratorTool,\r\n      TimePointComparisonTool,\r\n      ToggleShadowMapTilesTool,\r\n      ViewClipByElementGeometryTool,\r\n      ZoomToSelectedElementsTool,\r\n    ].forEach((tool) => tool.register(svtToolNamespace));\r\n\r\n    IModelApp.toolAdmin.defaultToolId = SVTSelectionTool.toolId;\r\n\r\n    BingTerrainMeshProvider.register();\r\n\r\n    const realityApiKey = process.env.IMJS_REALITY_DATA_KEY;\r\n    if (realityApiKey)\r\n      registerRealityDataSourceProvider(realityApiKey);\r\n\r\n    await FrontendDevTools.initialize();\r\n    await HyperModeling.initialize();\r\n    await EditTools.initialize();\r\n    await MapLayersFormats.initialize();\r\n  }\r\n\r\n  public static setActiveSnapModes(snaps: SnapMode[]): void {\r\n    (IModelApp.accuSnap as DisplayTestAppAccuSnap).setActiveSnapModes(snaps);\r\n  }\r\n\r\n  public static setActiveSnapMode(snap: SnapMode): void { this.setActiveSnapModes([snap]); }\r\n}\r\n",
      "start": 1693508118379,
      "end": 1693508118552,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport \"@bentley/icons-generic-webfont/dist/bentley-icons-generic-webfont.css\";\nimport { ProcessDetector } from \"@itwin/core-bentley\";\nimport { ElectronApp } from \"@itwin/core-electron/lib/cjs/ElectronFrontend\";\nimport { BrowserAuthorizationClient } from \"@itwin/browser-authorization\";\nimport { FrontendIModelsAccess } from \"@itwin/imodels-access-frontend\";\nimport { IModelsClient } from \"@itwin/imodels-client-management\";\nimport { FrontendDevTools } from \"@itwin/frontend-devtools\";\nimport { HyperModeling } from \"@itwin/hypermodeling-frontend\";\nimport {\n  BentleyCloudRpcManager,\n  IModelReadRpcInterface,\n  IModelTileRpcInterface,\n  SnapshotIModelRpcInterface\n} from \"@itwin/core-common\";\nimport { EditTools } from \"@itwin/editor-frontend\";\nimport {\n  AccuDrawHintBuilder,\n  AccuDrawShortcuts,\n  AccuSnap,\n  IModelApp,\n  IpcApp,\n  LocalhostIpcApp,\n  SelectionTool,\n  SnapMode,\n  Tool,\n  ToolAdmin\n} from \"@itwin/core-frontend\";\nimport { MobileApp } from \"@itwin/core-mobile/lib/cjs/MobileFrontend\";\nimport { RealityDataAccessClient } from \"@itwin/reality-data-client\";\nimport { dtaChannel } from \"../common/DtaIpcInterface\";\nimport { DtaRpcInterface } from \"../common/DtaRpcInterface\";\nimport { ToggleAspectRatioSkewDecoratorTool } from \"./AspectRatioSkewDecorator\";\nimport { ApplyModelDisplayScaleTool } from \"./DisplayScale\";\nimport { ApplyModelTransformTool } from \"./DisplayTransform\";\nimport { GenerateElementGraphicsTool, GenerateTileContentTool } from \"./TileContentTool\";\nimport { ViewClipByElementGeometryTool } from \"./ViewClipByElementGeometryTool\";\nimport { DrawingAidTestTool } from \"./DrawingAidTestTool\";\nimport { EditingScopeTool, PlaceLineStringTool } from \"./EditingTools\";\nimport { FenceClassifySelectedTool } from \"./Fence\";\nimport { RecordFpsTool } from \"./FpsMonitor\";\nimport { FrameStatsTool } from \"./FrameStatsTool\";\nimport { ChangeGridSettingsTool } from \"./Grid\";\nimport { IncidentMarkerDemoTool } from \"./IncidentMarkerDemo\";\nimport { MarkupSelectTestTool } from \"./MarkupSelectTestTool\";\nimport { Notifications } from \"./Notifications\";\nimport { OutputShadersTool } from \"./OutputShadersTool\";\nimport { PathDecorationTestTool } from \"./PathDecorationTest\";\nimport { GltfDecorationTool } from \"./GltfDecoration\";\nimport { ToggleShadowMapTilesTool } from \"./ShadowMapDecoration\";\nimport { signIn, signOut } from \"./signIn\";\nimport {\n  CloneViewportTool,\n  CloseIModelTool,\n  CloseWindowTool,\n  CreateWindowTool,\n  DockWindowTool,\n  FocusWindowTool,\n  MaximizeWindowTool,\n  OpenIModelTool,\n  ReopenIModelTool,\n  ResizeWindowTool,\n  RestoreWindowTool\n} from \"./Surface\";\nimport { SyncViewportFrustaTool, SyncViewportsTool } from \"./SyncViewportsTool\";\nimport { TimePointComparisonTool } from \"./TimePointComparison\";\nimport { UiManager } from \"./UiManager\";\nimport { MarkupTool, ModelClipTool, ZoomToSelectedElementsTool } from \"./Viewer\";\nimport { MacroTool } from \"./MacroTools\";\nimport { RecordTileSizesTool } from \"./TileSizeRecorder\";\nimport { TerrainDrapeTool } from \"./TerrainDrapeTool\";\nimport { SaveImageTool } from \"./SaveImageTool\";\nimport { BingTerrainMeshProvider } from \"./BingTerrainProvider\";\nimport { AttachCustomRealityDataTool, registerRealityDataSourceProvider } from \"./RealityDataProvider\";\nimport { MapLayersFormats } from \"@itwin/map-layers-formats\";\nimport { OpenRealityModelSettingsTool } from \"./RealityModelDisplaySettingsWidget\";\nimport { ElectronRendererAuthorization } from \"@itwin/electron-authorization/lib/cjs/ElectronRenderer\";\nimport { ITwinLocalization } from \"@itwin/core-i18n\";\nimport { getConfigurationString } from \"./DisplayTestApp\";\nclass DisplayTestAppAccuSnap extends AccuSnap {\n  constructor() {\n    super(...arguments);\n    this._activeSnaps = [SnapMode.NearestKeypoint];\n  }\n  get keypointDivisor() {\n    return 2;\n  }\n  getActiveSnapModes() {\n    return this._activeSnaps;\n  }\n  setActiveSnapModes(snaps) {\n    this._activeSnaps.length = snaps.length;\n    for (let i = 0; i < snaps.length; i++)\n      this._activeSnaps[i] = snaps[i];\n  }\n}\nclass DisplayTestAppToolAdmin extends ToolAdmin {\n  /** Process shortcut key events */\n  async processShortcutKey(keyEvent, wentDown) {\n    if (wentDown && AccuDrawHintBuilder.isEnabled)\n      return AccuDrawShortcuts.processShortcutKey(keyEvent);\n    return false;\n  }\n}\nclass SVTSelectionTool extends SelectionTool {\n  initSelectTool() {\n    super.initSelectTool();\n    IModelApp.locateManager.options.allowExternalIModels = true;\n  }\n}\nSVTSelectionTool.toolId = \"SVTSelect\";\nclass SignInTool extends Tool {\n  async run() {\n    await signIn();\n    return true;\n  }\n}\nSignInTool.toolId = \"SignIn\";\nclass SignOutTool extends Tool {\n  async run() {\n    await signOut();\n    return true;\n  }\n}\nSignOutTool.toolId = \"SignOut\";\nclass PushChangesTool extends Tool {\n  static get maxArgs() {\n    return 1;\n  }\n  static get minArgs() {\n    return 1;\n  }\n  async run(description) {\n    if (!description || \"string\" !== typeof description)\n      return false;\n    const imodel = IModelApp.viewManager.selectedView?.iModel;\n    if (!imodel || !imodel.isBriefcaseConnection())\n      return false;\n    await imodel.pushChanges(description);\n    return true;\n  }\n  async parseAndRun(...args) {\n    return this.run(args[0]);\n  }\n}\nPushChangesTool.toolId = \"PushChanges\";\nclass PullChangesTool extends Tool {\n  async run() {\n    const imodel = IModelApp.viewManager.selectedView?.iModel;\n    if (!imodel || !imodel.isBriefcaseConnection())\n      return false;\n    await imodel.pullChanges();\n    return true;\n  }\n}\nPullChangesTool.toolId = \"PullChanges\";\nexport const dtaIpc = IpcApp.makeIpcProxy(dtaChannel);\nclass RefreshTilesTool extends Tool {\n  static get maxArgs() {\n    return void 0;\n  }\n  async run(changedModelIds) {\n    if (void 0 !== changedModelIds && 0 === changedModelIds.length)\n      changedModelIds = void 0;\n    IModelApp.viewManager.refreshForModifiedModels(changedModelIds);\n    return true;\n  }\n  async parseAndRun(...args) {\n    return this.run(args);\n  }\n}\nRefreshTilesTool.toolId = \"RefreshTiles\";\nclass PurgeTileTreesTool extends Tool {\n  static get minArgs() {\n    return 0;\n  }\n  static get maxArgs() {\n    return void 0;\n  }\n  async run(modelIds) {\n    const vp = IModelApp.viewManager.selectedView;\n    if (void 0 === vp)\n      return true;\n    if (void 0 !== modelIds && 0 === modelIds.length)\n      modelIds = void 0;\n    await vp.iModel.tiles.purgeTileTrees(modelIds);\n    IModelApp.viewManager.refreshForModifiedModels(modelIds);\n    return true;\n  }\n  async parseAndRun(...args) {\n    return this.run(args);\n  }\n}\nPurgeTileTreesTool.toolId = \"PurgeTileTrees\";\nclass ShutDownTool extends Tool {\n  async run(_args) {\n    DisplayTestApp.surface.closeAllViewers();\n    const app = ElectronApp.isValid ? ElectronApp : IModelApp;\n    await app.shutdown();\n    debugger;\n    return true;\n  }\n}\nShutDownTool.toolId = \"ShutDown\";\nclass ExitTool extends Tool {\n  async run(_args) {\n    DisplayTestApp.surface.closeAllViewers();\n    await DtaRpcInterface.getClient().terminate();\n    return true;\n  }\n}\nExitTool.toolId = \"Exit\";\nfunction createHubAccess(configuration) {\n  if (configuration.urlPrefix) {\n    return new FrontendIModelsAccess(new IModelsClient({ api: { baseUrl: `https://${configuration.urlPrefix}api.bentley.com/imodels` } }));\n  } else {\n    return new FrontendIModelsAccess();\n  }\n}\nexport class DisplayTestApp {\n  static get surface() {\n    return this._surface;\n  }\n  static set surface(surface) {\n    this._surface = surface;\n  }\n  static get iTwinId() {\n    return this._iTwinId;\n  }\n  static async startup(configuration, renderSys, tileAdmin) {\n    let socketUrl = new URL(configuration.customOrchestratorUri || \"http://localhost:3001\");\n    socketUrl = LocalhostIpcApp.buildUrlForSocket(socketUrl);\n    const realityDataClientOptions = {\n      /** API Version. v1 by default */\n      // version?: ApiVersion;\n      /** API Url. Used to select environment. Defaults to \"https://api.bentley.com/realitydata\" */\n      baseUrl: `https://${process.env.IMJS_URL_PREFIX}api.bentley.com/realitydata`\n    };\n    const opts = {\n      iModelApp: {\n        accuSnap: new DisplayTestAppAccuSnap(),\n        notifications: new Notifications(),\n        tileAdmin,\n        toolAdmin: new DisplayTestAppToolAdmin(),\n        uiAdmin: new UiManager(),\n        realityDataAccess: new RealityDataAccessClient(realityDataClientOptions),\n        renderSys,\n        rpcInterfaces: [\n          DtaRpcInterface,\n          IModelReadRpcInterface,\n          IModelTileRpcInterface,\n          SnapshotIModelRpcInterface\n        ],\n        /* eslint-disable @typescript-eslint/naming-convention */\n        mapLayerOptions: {\n          MapboxImagery: configuration.mapBoxKey ? { key: \"access_token\", value: configuration.mapBoxKey } : void 0,\n          BingMaps: configuration.bingMapsKey ? { key: \"key\", value: configuration.bingMapsKey } : void 0\n        },\n        /* eslint-enable @typescript-eslint/naming-convention */\n        hubAccess: createHubAccess(configuration),\n        localization: new ITwinLocalization({ detectorOptions: { order: [\"htmlTag\"] } })\n      },\n      localhostIpcApp: {\n        socketUrl\n      }\n    };\n    this._iTwinId = configuration.iTwinId;\n    if (ProcessDetector.isElectronAppFrontend) {\n      if (!configuration.noElectronAuth)\n        opts.iModelApp.authorizationClient = new ElectronRendererAuthorization({\n          clientId: getConfigurationString(\"oidcClientId\") ?? \"imodeljs-spa-test\"\n        });\n      await ElectronApp.startup(opts);\n    } else if (ProcessDetector.isMobileAppFrontend) {\n      await MobileApp.startup(opts);\n    } else {\n      const redirectUri = \"http://localhost:3000/signin-callback\";\n      const urlObj = new URL(redirectUri);\n      if (urlObj.pathname === window.location.pathname) {\n        const client = new BrowserAuthorizationClient({\n          clientId: getConfigurationString(\"oidcClientId\") ?? \"imodeljs-spa-test\",\n          scope: getConfigurationString(\"oidcScope\") ?? \"projects:read realitydata:read imodels:read imodels:modify imodelaccess:read\",\n          redirectUri\n        });\n        await client.handleSigninCallback();\n      }\n      const rpcParams = { info: { title: \"ui-test-app\", version: \"v1.0\" }, uriPrefix: configuration.customOrchestratorUri || \"http://localhost:3001\" };\n      if (opts.iModelApp?.rpcInterfaces)\n        BentleyCloudRpcManager.initializeClient(rpcParams, opts.iModelApp.rpcInterfaces);\n      await LocalhostIpcApp.startup(opts);\n    }\n    IModelApp.applicationLogoCard = () => IModelApp.makeLogoCard({ iconSrc: \"DTA.png\", iconWidth: 100, heading: \"Display Test App\", notice: \"For internal testing\" });\n    const svtToolNamespace = \"SVTTools\";\n    await IModelApp.localization.registerNamespace(svtToolNamespace);\n    [\n      ApplyModelDisplayScaleTool,\n      ApplyModelTransformTool,\n      AttachCustomRealityDataTool,\n      ChangeGridSettingsTool,\n      CloneViewportTool,\n      CloseIModelTool,\n      CloseWindowTool,\n      CreateWindowTool,\n      DockWindowTool,\n      DrawingAidTestTool,\n      EditingScopeTool,\n      ExitTool,\n      FenceClassifySelectedTool,\n      FocusWindowTool,\n      FrameStatsTool,\n      GenerateElementGraphicsTool,\n      GenerateTileContentTool,\n      GltfDecorationTool,\n      IncidentMarkerDemoTool,\n      PathDecorationTestTool,\n      MacroTool,\n      MarkupSelectTestTool,\n      MarkupTool,\n      MaximizeWindowTool,\n      ModelClipTool,\n      OpenIModelTool,\n      OpenRealityModelSettingsTool,\n      OutputShadersTool,\n      PlaceLineStringTool,\n      PullChangesTool,\n      PushChangesTool,\n      PurgeTileTreesTool,\n      RecordFpsTool,\n      RecordTileSizesTool,\n      RefreshTilesTool,\n      ReopenIModelTool,\n      ResizeWindowTool,\n      RestoreWindowTool,\n      SaveImageTool,\n      ShutDownTool,\n      SignInTool,\n      SignOutTool,\n      SVTSelectionTool,\n      SyncViewportFrustaTool,\n      SyncViewportsTool,\n      TerrainDrapeTool,\n      ToggleAspectRatioSkewDecoratorTool,\n      TimePointComparisonTool,\n      ToggleShadowMapTilesTool,\n      ViewClipByElementGeometryTool,\n      ZoomToSelectedElementsTool\n    ].forEach((tool) => tool.register(svtToolNamespace));\n    IModelApp.toolAdmin.defaultToolId = SVTSelectionTool.toolId;\n    BingTerrainMeshProvider.register();\n    const realityApiKey = process.env.IMJS_REALITY_DATA_KEY;\n    if (realityApiKey)\n      registerRealityDataSourceProvider(realityApiKey);\n    await FrontendDevTools.initialize();\n    await HyperModeling.initialize();\n    await EditTools.initialize();\n    await MapLayersFormats.initialize();\n  }\n  static setActiveSnapModes(snaps) {\n    IModelApp.accuSnap.setActiveSnapModes(snaps);\n  }\n  static setActiveSnapMode(snap) {\n    this.setActiveSnapModes([snap]);\n  }\n}\n",
      "start": 1693508118552,
      "end": 1693508118715,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/App.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport \"@bentley/icons-generic-webfont/dist/bentley-icons-generic-webfont.css\";\r\nimport { GuidString, ProcessDetector } from \"@itwin/core-bentley\";\r\nimport { ElectronApp, ElectronAppOpts } from \"@itwin/core-electron/lib/cjs/ElectronFrontend\";\r\nimport { BrowserAuthorizationClient } from \"@itwin/browser-authorization\";\r\nimport { FrontendIModelsAccess } from \"@itwin/imodels-access-frontend\";\r\nimport { IModelsClient } from \"@itwin/imodels-client-management\";\r\nimport { FrontendDevTools } from \"@itwin/frontend-devtools\";\r\nimport { HyperModeling } from \"@itwin/hypermodeling-frontend\";\r\nimport {\r\n  BentleyCloudRpcManager, BentleyCloudRpcParams, IModelReadRpcInterface, IModelTileRpcInterface, SnapshotIModelRpcInterface,\r\n} from \"@itwin/core-common\";\r\nimport { EditTools } from \"@itwin/editor-frontend\";\r\nimport {\r\n  AccuDrawHintBuilder, AccuDrawShortcuts, AccuSnap, IModelApp, IpcApp, LocalhostIpcApp, LocalHostIpcAppOpts, RenderSystem, SelectionTool, SnapMode,\r\n  TileAdmin, Tool, ToolAdmin,\r\n} from \"@itwin/core-frontend\";\r\nimport { MobileApp, MobileAppOpts } from \"@itwin/core-mobile/lib/cjs/MobileFrontend\";\r\nimport { RealityDataAccessClient, RealityDataClientOptions } from \"@itwin/reality-data-client\";\r\nimport { DtaConfiguration } from \"../common/DtaConfiguration\";\r\nimport { dtaChannel, DtaIpcInterface } from \"../common/DtaIpcInterface\";\r\nimport { DtaRpcInterface } from \"../common/DtaRpcInterface\";\r\nimport { ToggleAspectRatioSkewDecoratorTool } from \"./AspectRatioSkewDecorator\";\r\nimport { ApplyModelDisplayScaleTool } from \"./DisplayScale\";\r\nimport { ApplyModelTransformTool } from \"./DisplayTransform\";\r\nimport { GenerateElementGraphicsTool, GenerateTileContentTool } from \"./TileContentTool\";\r\nimport { ViewClipByElementGeometryTool } from \"./ViewClipByElementGeometryTool\";\r\nimport { DrawingAidTestTool } from \"./DrawingAidTestTool\";\r\nimport { EditingScopeTool, PlaceLineStringTool } from \"./EditingTools\";\r\nimport { FenceClassifySelectedTool } from \"./Fence\";\r\nimport { RecordFpsTool } from \"./FpsMonitor\";\r\nimport { FrameStatsTool } from \"./FrameStatsTool\";\r\nimport { ChangeGridSettingsTool } from \"./Grid\";\r\nimport { IncidentMarkerDemoTool } from \"./IncidentMarkerDemo\";\r\nimport { MarkupSelectTestTool } from \"./MarkupSelectTestTool\";\r\nimport { Notifications } from \"./Notifications\";\r\nimport { OutputShadersTool } from \"./OutputShadersTool\";\r\nimport { PathDecorationTestTool } from \"./PathDecorationTest\";\r\nimport { GltfDecorationTool } from \"./GltfDecoration\";\r\nimport { ToggleShadowMapTilesTool } from \"./ShadowMapDecoration\";\r\nimport { signIn, signOut } from \"./signIn\";\r\nimport {\r\n  CloneViewportTool, CloseIModelTool, CloseWindowTool, CreateWindowTool, DockWindowTool, FocusWindowTool, MaximizeWindowTool, OpenIModelTool,\r\n  ReopenIModelTool, ResizeWindowTool, RestoreWindowTool, Surface,\r\n} from \"./Surface\";\r\nimport { SyncViewportFrustaTool, SyncViewportsTool } from \"./SyncViewportsTool\";\r\nimport { TimePointComparisonTool } from \"./TimePointComparison\";\r\nimport { UiManager } from \"./UiManager\";\r\nimport { MarkupTool, ModelClipTool, ZoomToSelectedElementsTool } from \"./Viewer\";\r\nimport { MacroTool } from \"./MacroTools\";\r\nimport { RecordTileSizesTool } from \"./TileSizeRecorder\";\r\nimport { TerrainDrapeTool } from \"./TerrainDrapeTool\";\r\nimport { SaveImageTool } from \"./SaveImageTool\";\r\nimport { BingTerrainMeshProvider } from \"./BingTerrainProvider\";\r\nimport { AttachCustomRealityDataTool, registerRealityDataSourceProvider } from \"./RealityDataProvider\";\r\nimport { MapLayersFormats } from \"@itwin/map-layers-formats\";\r\nimport { OpenRealityModelSettingsTool } from \"./RealityModelDisplaySettingsWidget\";\r\nimport { ElectronRendererAuthorization } from \"@itwin/electron-authorization/lib/cjs/ElectronRenderer\";\r\nimport { ITwinLocalization } from \"@itwin/core-i18n\";\r\nimport { getConfigurationString } from \"./DisplayTestApp\";\r\n\r\nclass DisplayTestAppAccuSnap extends AccuSnap {\r\n  private readonly _activeSnaps: SnapMode[] = [SnapMode.NearestKeypoint];\r\n\r\n  public override get keypointDivisor() { return 2; }\r\n  public override getActiveSnapModes(): SnapMode[] { return this._activeSnaps; }\r\n  public setActiveSnapModes(snaps: SnapMode[]): void {\r\n    this._activeSnaps.length = snaps.length;\r\n    for (let i = 0; i < snaps.length; i++)\r\n      this._activeSnaps[i] = snaps[i];\r\n  }\r\n}\r\n\r\nclass DisplayTestAppToolAdmin extends ToolAdmin {\r\n  /** Process shortcut key events */\r\n  public override async processShortcutKey(keyEvent: KeyboardEvent, wentDown: boolean): Promise<boolean> {\r\n    if (wentDown && AccuDrawHintBuilder.isEnabled)\r\n      return AccuDrawShortcuts.processShortcutKey(keyEvent);\r\n    return false;\r\n  }\r\n}\r\n\r\nclass SVTSelectionTool extends SelectionTool {\r\n  public static override toolId = \"SVTSelect\";\r\n  protected override initSelectTool() {\r\n    super.initSelectTool();\r\n\r\n    // ###TODO Want to do this only if version comparison enabled, but meh.\r\n    IModelApp.locateManager.options.allowExternalIModels = true;\r\n  }\r\n}\r\n\r\nclass SignInTool extends Tool {\r\n  public static override toolId = \"SignIn\";\r\n  public override async run(): Promise<boolean> {\r\n    await signIn();\r\n    return true;\r\n  }\r\n}\r\n\r\nclass SignOutTool extends Tool {\r\n  public static override toolId = \"SignOut\";\r\n  public override async run(): Promise<boolean> {\r\n    await signOut();\r\n    return true;\r\n  }\r\n}\r\n\r\nclass PushChangesTool extends Tool {\r\n  public static override toolId = \"PushChanges\";\r\n  public static override get maxArgs() { return 1; }\r\n  public static override get minArgs() { return 1; }\r\n\r\n  public override async run(description?: string): Promise<boolean> {\r\n    if (!description || \"string\" !== typeof description)\r\n      return false;\r\n\r\n    const imodel = IModelApp.viewManager.selectedView?.iModel;\r\n    if (!imodel || !imodel.isBriefcaseConnection())\r\n      return false;\r\n\r\n    await imodel.pushChanges(description);\r\n    return true;\r\n  }\r\n\r\n  public override async parseAndRun(...args: string[]): Promise<boolean> {\r\n    return this.run(args[0]);\r\n  }\r\n}\r\n\r\nclass PullChangesTool extends Tool {\r\n  public static override toolId = \"PullChanges\";\r\n\r\n  public override async run(): Promise<boolean> {\r\n    const imodel = IModelApp.viewManager.selectedView?.iModel;\r\n    if (!imodel || !imodel.isBriefcaseConnection())\r\n      return false;\r\n\r\n    await imodel.pullChanges();\r\n    return true;\r\n  }\r\n}\r\n\r\nexport const dtaIpc = IpcApp.makeIpcProxy<DtaIpcInterface>(dtaChannel);\r\n\r\nclass RefreshTilesTool extends Tool {\r\n  public static override toolId = \"RefreshTiles\";\r\n  public static override get maxArgs() { return undefined; }\r\n\r\n  public override async run(changedModelIds?: string[]): Promise<boolean> {\r\n    if (undefined !== changedModelIds && 0 === changedModelIds.length)\r\n      changedModelIds = undefined;\r\n\r\n    IModelApp.viewManager.refreshForModifiedModels(changedModelIds);\r\n    return true;\r\n  }\r\n\r\n  public override async parseAndRun(...args: string[]): Promise<boolean> {\r\n    return this.run(args);\r\n  }\r\n}\r\n\r\nclass PurgeTileTreesTool extends Tool {\r\n  public static override toolId = \"PurgeTileTrees\";\r\n  public static override get minArgs() { return 0; }\r\n  public static override get maxArgs() { return undefined; }\r\n\r\n  public override async run(modelIds?: string[]): Promise<boolean> {\r\n    const vp = IModelApp.viewManager.selectedView;\r\n    if (undefined === vp)\r\n      return true;\r\n\r\n    if (undefined !== modelIds && 0 === modelIds.length)\r\n      modelIds = undefined;\r\n\r\n    await vp.iModel.tiles.purgeTileTrees(modelIds);\r\n    IModelApp.viewManager.refreshForModifiedModels(modelIds);\r\n\r\n    return true;\r\n  }\r\n\r\n  public override async parseAndRun(...args: string[]): Promise<boolean> {\r\n    return this.run(args);\r\n  }\r\n}\r\n\r\nclass ShutDownTool extends Tool {\r\n  public static override toolId = \"ShutDown\";\r\n\r\n  public override async run(_args: any[]): Promise<boolean> {\r\n    DisplayTestApp.surface.closeAllViewers();\r\n    const app = ElectronApp.isValid ? ElectronApp : IModelApp;\r\n    await app.shutdown();\r\n\r\n    debugger; // eslint-disable-line no-debugger\r\n    return true;\r\n  }\r\n}\r\n\r\nclass ExitTool extends Tool {\r\n  public static override toolId = \"Exit\";\r\n\r\n  public override async run(_args: any[]): Promise<boolean> {\r\n    DisplayTestApp.surface.closeAllViewers();\r\n    await DtaRpcInterface.getClient().terminate();\r\n    return true;\r\n  }\r\n}\r\n\r\nfunction createHubAccess(configuration: DtaConfiguration) {\r\n  if (configuration.urlPrefix) {\r\n    return new FrontendIModelsAccess(new IModelsClient({ api: { baseUrl: `https://${configuration.urlPrefix}api.bentley.com/imodels` } }));\r\n  } else {\r\n    return new FrontendIModelsAccess();\r\n  }\r\n}\r\n\r\nexport class DisplayTestApp {\r\n  private static _surface?: Surface;\r\n  public static get surface() { return this._surface!; }\r\n  public static set surface(surface: Surface) { this._surface = surface; }\r\n  private static _iTwinId?: GuidString;\r\n  public static get iTwinId(): GuidString | undefined { return this._iTwinId; }\r\n\r\n  public static async startup(configuration: DtaConfiguration, renderSys: RenderSystem.Options, tileAdmin: TileAdmin.Props): Promise<void> {\r\n    let socketUrl = new URL(configuration.customOrchestratorUri || \"http://localhost:3001\");\r\n    socketUrl = LocalhostIpcApp.buildUrlForSocket(socketUrl);\r\n    const realityDataClientOptions: RealityDataClientOptions = {\r\n      /** API Version. v1 by default */\r\n      // version?: ApiVersion;\r\n      /** API Url. Used to select environment. Defaults to \"https://api.bentley.com/realitydata\" */\r\n      baseUrl: `https://${process.env.IMJS_URL_PREFIX}api.bentley.com/realitydata`,\r\n    };\r\n    const opts: ElectronAppOpts | LocalHostIpcAppOpts = {\r\n      iModelApp: {\r\n        accuSnap: new DisplayTestAppAccuSnap(),\r\n        notifications: new Notifications(),\r\n        tileAdmin,\r\n        toolAdmin: new DisplayTestAppToolAdmin(),\r\n        uiAdmin: new UiManager(),\r\n        realityDataAccess: new RealityDataAccessClient(realityDataClientOptions),\r\n        renderSys,\r\n        rpcInterfaces: [\r\n          DtaRpcInterface,\r\n          IModelReadRpcInterface,\r\n          IModelTileRpcInterface,\r\n          SnapshotIModelRpcInterface,\r\n        ],\r\n        /* eslint-disable @typescript-eslint/naming-convention */\r\n        mapLayerOptions: {\r\n          MapboxImagery: configuration.mapBoxKey\r\n            ? { key: \"access_token\", value: configuration.mapBoxKey }\r\n            : undefined,\r\n          BingMaps: configuration.bingMapsKey\r\n            ? { key: \"key\", value: configuration.bingMapsKey }\r\n            : undefined,\r\n        },\r\n        /* eslint-enable @typescript-eslint/naming-convention */\r\n        hubAccess: createHubAccess(configuration),\r\n        localization: new ITwinLocalization({ detectorOptions: { order: [\"htmlTag\"] } }),\r\n      },\r\n      localhostIpcApp: {\r\n        socketUrl,\r\n      },\r\n    };\r\n\r\n    this._iTwinId = configuration.iTwinId;\r\n\r\n    if (ProcessDetector.isElectronAppFrontend) {\r\n      // The electron package produces an exception every time getAccessToken is called, which is quite frequently.\r\n      // It makes debugging with \"pause on caught exceptions\" infuriating.\r\n      // ###TODO fix that in the client and remove this\r\n      if (!configuration.noElectronAuth)\r\n        opts.iModelApp!.authorizationClient = new ElectronRendererAuthorization({\r\n          clientId: getConfigurationString(\"oidcClientId\") ?? \"imodeljs-spa-test\",\r\n        });\r\n\r\n      await ElectronApp.startup(opts);\r\n    } else if (ProcessDetector.isMobileAppFrontend) {\r\n      await MobileApp.startup(opts as MobileAppOpts);\r\n    } else {\r\n      const redirectUri = \"http://localhost:3000/signin-callback\";\r\n      const urlObj = new URL(redirectUri);\r\n      if (urlObj.pathname === window.location.pathname) {\r\n        const client = new BrowserAuthorizationClient({\r\n          clientId: getConfigurationString(\"oidcClientId\") ?? \"imodeljs-spa-test\",\r\n          scope: getConfigurationString(\"oidcScope\") ?? \"projects:read realitydata:read imodels:read imodels:modify imodelaccess:read\",\r\n          redirectUri,\r\n        });\r\n        await client.handleSigninCallback();\r\n      }\r\n\r\n      const rpcParams: BentleyCloudRpcParams = { info: { title: \"ui-test-app\", version: \"v1.0\" }, uriPrefix: configuration.customOrchestratorUri || \"http://localhost:3001\" };\r\n      if (opts.iModelApp?.rpcInterfaces) // eslint-disable-line deprecation/deprecation\r\n        BentleyCloudRpcManager.initializeClient(rpcParams, opts.iModelApp.rpcInterfaces); // eslint-disable-line deprecation/deprecation\r\n      await LocalhostIpcApp.startup(opts);\r\n    }\r\n\r\n    IModelApp.applicationLogoCard =\r\n      () => IModelApp.makeLogoCard({ iconSrc: \"DTA.png\", iconWidth: 100, heading: \"Display Test App\", notice: \"For internal testing\" });\r\n\r\n    const svtToolNamespace = \"SVTTools\";\r\n    await IModelApp.localization.registerNamespace(svtToolNamespace);\r\n    [\r\n      ApplyModelDisplayScaleTool,\r\n      ApplyModelTransformTool,\r\n      AttachCustomRealityDataTool,\r\n      ChangeGridSettingsTool,\r\n      CloneViewportTool,\r\n      CloseIModelTool,\r\n      CloseWindowTool,\r\n      CreateWindowTool,\r\n      DockWindowTool,\r\n      DrawingAidTestTool,\r\n      EditingScopeTool,\r\n      ExitTool,\r\n      FenceClassifySelectedTool,\r\n      FocusWindowTool,\r\n      FrameStatsTool,\r\n      GenerateElementGraphicsTool,\r\n      GenerateTileContentTool,\r\n      GltfDecorationTool,\r\n      IncidentMarkerDemoTool,\r\n      PathDecorationTestTool,\r\n      MacroTool,\r\n      MarkupSelectTestTool,\r\n      MarkupTool,\r\n      MaximizeWindowTool,\r\n      ModelClipTool,\r\n      OpenIModelTool,\r\n      OpenRealityModelSettingsTool,\r\n      OutputShadersTool,\r\n      PlaceLineStringTool,\r\n      PullChangesTool,\r\n      PushChangesTool,\r\n      PurgeTileTreesTool,\r\n      RecordFpsTool,\r\n      RecordTileSizesTool,\r\n      RefreshTilesTool,\r\n      ReopenIModelTool,\r\n      ResizeWindowTool,\r\n      RestoreWindowTool,\r\n      SaveImageTool,\r\n      ShutDownTool,\r\n      SignInTool,\r\n      SignOutTool,\r\n      SVTSelectionTool,\r\n      SyncViewportFrustaTool,\r\n      SyncViewportsTool,\r\n      TerrainDrapeTool,\r\n      ToggleAspectRatioSkewDecoratorTool,\r\n      TimePointComparisonTool,\r\n      ToggleShadowMapTilesTool,\r\n      ViewClipByElementGeometryTool,\r\n      ZoomToSelectedElementsTool,\r\n    ].forEach((tool) => tool.register(svtToolNamespace));\r\n\r\n    IModelApp.toolAdmin.defaultToolId = SVTSelectionTool.toolId;\r\n\r\n    BingTerrainMeshProvider.register();\r\n\r\n    const realityApiKey = process.env.IMJS_REALITY_DATA_KEY;\r\n    if (realityApiKey)\r\n      registerRealityDataSourceProvider(realityApiKey);\r\n\r\n    await FrontendDevTools.initialize();\r\n    await HyperModeling.initialize();\r\n    await EditTools.initialize();\r\n    await MapLayersFormats.initialize();\r\n  }\r\n\r\n  public static setActiveSnapModes(snaps: SnapMode[]): void {\r\n    (IModelApp.accuSnap as DisplayTestAppAccuSnap).setActiveSnapModes(snaps);\r\n  }\r\n\r\n  public static setActiveSnapMode(snap: SnapMode): void { this.setActiveSnapModes([snap]); }\r\n}\r\n"
        ],
        "mappings": "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",
        "names": []
      }
    },
    {
      "name": "vite:define",
      "result": "\"use strict\";\nimport \"@bentley/icons-generic-webfont/dist/bentley-icons-generic-webfont.css\";\nimport { ProcessDetector } from \"@itwin/core-bentley\";\nimport { ElectronApp } from \"@itwin/core-electron/lib/cjs/ElectronFrontend\";\nimport { BrowserAuthorizationClient } from \"@itwin/browser-authorization\";\nimport { FrontendIModelsAccess } from \"@itwin/imodels-access-frontend\";\nimport { IModelsClient } from \"@itwin/imodels-client-management\";\nimport { FrontendDevTools } from \"@itwin/frontend-devtools\";\nimport { HyperModeling } from \"@itwin/hypermodeling-frontend\";\nimport {\n  BentleyCloudRpcManager,\n  IModelReadRpcInterface,\n  IModelTileRpcInterface,\n  SnapshotIModelRpcInterface\n} from \"@itwin/core-common\";\nimport { EditTools } from \"@itwin/editor-frontend\";\nimport {\n  AccuDrawHintBuilder,\n  AccuDrawShortcuts,\n  AccuSnap,\n  IModelApp,\n  IpcApp,\n  LocalhostIpcApp,\n  SelectionTool,\n  SnapMode,\n  Tool,\n  ToolAdmin\n} from \"@itwin/core-frontend\";\nimport { MobileApp } from \"@itwin/core-mobile/lib/cjs/MobileFrontend\";\nimport { RealityDataAccessClient } from \"@itwin/reality-data-client\";\nimport { dtaChannel } from \"../common/DtaIpcInterface\";\nimport { DtaRpcInterface } from \"../common/DtaRpcInterface\";\nimport { ToggleAspectRatioSkewDecoratorTool } from \"./AspectRatioSkewDecorator\";\nimport { ApplyModelDisplayScaleTool } from \"./DisplayScale\";\nimport { ApplyModelTransformTool } from \"./DisplayTransform\";\nimport { GenerateElementGraphicsTool, GenerateTileContentTool } from \"./TileContentTool\";\nimport { ViewClipByElementGeometryTool } from \"./ViewClipByElementGeometryTool\";\nimport { DrawingAidTestTool } from \"./DrawingAidTestTool\";\nimport { EditingScopeTool, PlaceLineStringTool } from \"./EditingTools\";\nimport { FenceClassifySelectedTool } from \"./Fence\";\nimport { RecordFpsTool } from \"./FpsMonitor\";\nimport { FrameStatsTool } from \"./FrameStatsTool\";\nimport { ChangeGridSettingsTool } from \"./Grid\";\nimport { IncidentMarkerDemoTool } from \"./IncidentMarkerDemo\";\nimport { MarkupSelectTestTool } from \"./MarkupSelectTestTool\";\nimport { Notifications } from \"./Notifications\";\nimport { OutputShadersTool } from \"./OutputShadersTool\";\nimport { PathDecorationTestTool } from \"./PathDecorationTest\";\nimport { GltfDecorationTool } from \"./GltfDecoration\";\nimport { ToggleShadowMapTilesTool } from \"./ShadowMapDecoration\";\nimport { signIn, signOut } from \"./signIn\";\nimport {\n  CloneViewportTool,\n  CloseIModelTool,\n  CloseWindowTool,\n  CreateWindowTool,\n  DockWindowTool,\n  FocusWindowTool,\n  MaximizeWindowTool,\n  OpenIModelTool,\n  ReopenIModelTool,\n  ResizeWindowTool,\n  RestoreWindowTool\n} from \"./Surface\";\nimport { SyncViewportFrustaTool, SyncViewportsTool } from \"./SyncViewportsTool\";\nimport { TimePointComparisonTool } from \"./TimePointComparison\";\nimport { UiManager } from \"./UiManager\";\nimport { MarkupTool, ModelClipTool, ZoomToSelectedElementsTool } from \"./Viewer\";\nimport { MacroTool } from \"./MacroTools\";\nimport { RecordTileSizesTool } from \"./TileSizeRecorder\";\nimport { TerrainDrapeTool } from \"./TerrainDrapeTool\";\nimport { SaveImageTool } from \"./SaveImageTool\";\nimport { BingTerrainMeshProvider } from \"./BingTerrainProvider\";\nimport { AttachCustomRealityDataTool, registerRealityDataSourceProvider } from \"./RealityDataProvider\";\nimport { MapLayersFormats } from \"@itwin/map-layers-formats\";\nimport { OpenRealityModelSettingsTool } from \"./RealityModelDisplaySettingsWidget\";\nimport { ElectronRendererAuthorization } from \"@itwin/electron-authorization/lib/cjs/ElectronRenderer\";\nimport { ITwinLocalization } from \"@itwin/core-i18n\";\nimport { getConfigurationString } from \"./DisplayTestApp\";\nclass DisplayTestAppAccuSnap extends AccuSnap {\n  constructor() {\n    super(...arguments);\n    this._activeSnaps = [SnapMode.NearestKeypoint];\n  }\n  get keypointDivisor() {\n    return 2;\n  }\n  getActiveSnapModes() {\n    return this._activeSnaps;\n  }\n  setActiveSnapModes(snaps) {\n    this._activeSnaps.length = snaps.length;\n    for (let i = 0; i < snaps.length; i++)\n      this._activeSnaps[i] = snaps[i];\n  }\n}\nclass DisplayTestAppToolAdmin extends ToolAdmin {\n  /** Process shortcut key events */\n  async processShortcutKey(keyEvent, wentDown) {\n    if (wentDown && AccuDrawHintBuilder.isEnabled)\n      return AccuDrawShortcuts.processShortcutKey(keyEvent);\n    return false;\n  }\n}\nclass SVTSelectionTool extends SelectionTool {\n  initSelectTool() {\n    super.initSelectTool();\n    IModelApp.locateManager.options.allowExternalIModels = true;\n  }\n}\nSVTSelectionTool.toolId = \"SVTSelect\";\nclass SignInTool extends Tool {\n  async run() {\n    await signIn();\n    return true;\n  }\n}\nSignInTool.toolId = \"SignIn\";\nclass SignOutTool extends Tool {\n  async run() {\n    await signOut();\n    return true;\n  }\n}\nSignOutTool.toolId = \"SignOut\";\nclass PushChangesTool extends Tool {\n  static get maxArgs() {\n    return 1;\n  }\n  static get minArgs() {\n    return 1;\n  }\n  async run(description) {\n    if (!description || \"string\" !== typeof description)\n      return false;\n    const imodel = IModelApp.viewManager.selectedView?.iModel;\n    if (!imodel || !imodel.isBriefcaseConnection())\n      return false;\n    await imodel.pushChanges(description);\n    return true;\n  }\n  async parseAndRun(...args) {\n    return this.run(args[0]);\n  }\n}\nPushChangesTool.toolId = \"PushChanges\";\nclass PullChangesTool extends Tool {\n  async run() {\n    const imodel = IModelApp.viewManager.selectedView?.iModel;\n    if (!imodel || !imodel.isBriefcaseConnection())\n      return false;\n    await imodel.pullChanges();\n    return true;\n  }\n}\nPullChangesTool.toolId = \"PullChanges\";\nexport const dtaIpc = IpcApp.makeIpcProxy(dtaChannel);\nclass RefreshTilesTool extends Tool {\n  static get maxArgs() {\n    return void 0;\n  }\n  async run(changedModelIds) {\n    if (void 0 !== changedModelIds && 0 === changedModelIds.length)\n      changedModelIds = void 0;\n    IModelApp.viewManager.refreshForModifiedModels(changedModelIds);\n    return true;\n  }\n  async parseAndRun(...args) {\n    return this.run(args);\n  }\n}\nRefreshTilesTool.toolId = \"RefreshTiles\";\nclass PurgeTileTreesTool extends Tool {\n  static get minArgs() {\n    return 0;\n  }\n  static get maxArgs() {\n    return void 0;\n  }\n  async run(modelIds) {\n    const vp = IModelApp.viewManager.selectedView;\n    if (void 0 === vp)\n      return true;\n    if (void 0 !== modelIds && 0 === modelIds.length)\n      modelIds = void 0;\n    await vp.iModel.tiles.purgeTileTrees(modelIds);\n    IModelApp.viewManager.refreshForModifiedModels(modelIds);\n    return true;\n  }\n  async parseAndRun(...args) {\n    return this.run(args);\n  }\n}\nPurgeTileTreesTool.toolId = \"PurgeTileTrees\";\nclass ShutDownTool extends Tool {\n  async run(_args) {\n    DisplayTestApp.surface.closeAllViewers();\n    const app = ElectronApp.isValid ? ElectronApp : IModelApp;\n    await app.shutdown();\n    debugger;\n    return true;\n  }\n}\nShutDownTool.toolId = \"ShutDown\";\nclass ExitTool extends Tool {\n  async run(_args) {\n    DisplayTestApp.surface.closeAllViewers();\n    await DtaRpcInterface.getClient().terminate();\n    return true;\n  }\n}\nExitTool.toolId = \"Exit\";\nfunction createHubAccess(configuration) {\n  if (configuration.urlPrefix) {\n    return new FrontendIModelsAccess(new IModelsClient({ api: { baseUrl: `https://${configuration.urlPrefix}api.bentley.com/imodels` } }));\n  } else {\n    return new FrontendIModelsAccess();\n  }\n}\nexport class DisplayTestApp {\n  static get surface() {\n    return this._surface;\n  }\n  static set surface(surface) {\n    this._surface = surface;\n  }\n  static get iTwinId() {\n    return this._iTwinId;\n  }\n  static async startup(configuration, renderSys, tileAdmin) {\n    let socketUrl = new URL(configuration.customOrchestratorUri || \"http://localhost:3001\");\n    socketUrl = LocalhostIpcApp.buildUrlForSocket(socketUrl);\n    const realityDataClientOptions = {\n      /** API Version. v1 by default */\n      // version?: ApiVersion;\n      /** API Url. Used to select environment. Defaults to \"https://api.bentley.com/realitydata\" */\n      baseUrl: `https://${{\"ALLUSERSPROFILE\":\"C:\\\\ProgramData\",\"ANDROID_NDK_ROOT\":\"d:\\\\android-ndk-r12b-windows-x86_64\\\\android-ndk-r12b\\\\\",\"APPDATA\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\",\"BBNODOC\":\"--buildDocDeferralRule=never\",\"BEGTEST_LOGGING_CONFIG\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\BeGTest\\\\gtest\\\\logging.config.xml\",\"BUILDARCHITECTURE\":\"x64\",\"BUILDIMODEL_SYMLINKS\":\"1\",\"BUILDSTRATEGY\":\"TYPESCRIPT\",\"CD1\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\core\\\\geometry\\\\\",\"CLANG_ENFORCE_OVERRIDE\":\"1\",\"COLOR\":\"0\",\"COMMONPROGRAMFILES\":\"C:\\\\Program Files\\\\Common Files\",\"COMMONPROGRAMFILES(X86)\":\"C:\\\\Program Files (x86)\\\\Common Files\",\"COMMONPROGRAMW6432\":\"C:\\\\Program Files\\\\Common Files\",\"COMPILEBGNETSTRUCTSBSPLINESUPPORT\":\"1\",\"COMPILEMTGBASE1\":\"1\",\"COMPILE_BVRANGETREE\":\"1\",\"COMPUTERNAME\":\"NAOU22376A\",\"COMSPEC\":\"C:\\\\Windows\\\\system32\\\\cmd.exe\",\"CONSOLECOLOR\":\"74\",\"CORESRC\":\"backend\\\\src clients\\\\src common\\\\src frontend\\\\src geometry\\\\src\",\"CUBESRC\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\\\\\ui\\\\framework\\\\src\\\\configurableui\\\\navigationaids\\\\\",\"CUBETEST\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\test-apps\\\\ui-test-app\\\\\",\"DEBUG\":\"1\",\"DRIVERDATA\":\"C:\\\\Windows\\\\System32\\\\Drivers\\\\DriverData\",\"EDITOR\":\"notepad.exe\",\"EXPAND_GEOMETRY_GENSRC\":\"1\",\"FPS_BROWSER_APP_PROFILE_STRING\":\"Internet Explorer\",\"FPS_BROWSER_USER_PROFILE_STRING\":\"Default\",\"GEMADIR\":\"d:\\\\source\\\\bsitools\\\\winnt\\\\gemascripts\\\\\",\"GEOMETRYCORE\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\core\\\\geometry\\\\\",\"GEOMETRYROOT\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\\\\\core\\\\geometry\",\"GEOMTESTOUTPUTDIR\":\"d:\\\\tmp\\\\geomtest\\\\\",\"GITBASEBRANCH\":\"master\",\"GITROOT\":\"hub2023A\",\"HGRCPATH\":\"C:\\\\DevTools\\\\Mercurial-BSI\\\\Mercurial\\\\mercurial.ini;%APPDATA%\\\\Mercurial-BSI\\\\mercurial.user.ini\",\"HOME\":\"C:\\\\Users\\\\Earlin.Lutz\",\"HOMEDRIVE\":\"C:\",\"HOMEPATH\":\"\\\\Users\\\\Earlin.Lutz\",\"INIT_CWD\":\"D:\\\\hub2023A\\\\itwinjs-core\\\\test-apps\\\\display-test-app\",\"LOCALAPPDATA\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Local\",\"LOGONSERVER\":\"\\\\\\\\BENTLEYDC5\",\"METASRCPATH\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\BentleyGeometryNet\\\\src\\\\Structs\\\\metasrc\\\\\",\"MS_ALLOW_EDIT_IMODEL\":\"1\",\"MS_FEATUREASPECTSBETA\":\"FeatureAspects_Interchange_RFA;FeatureAspects_Interchange_RFA_Import;FeatureAspects_Printing_Printing3D;FeatureAspects_Mesh_NewModify\",\"MS_IGNORE_ASSERTS\":\"1\",\"NODE\":\"C:\\\\Program Files\\\\nodejs\\\\node.exe\",\"NODE_ENV\":\"development\",\"NODE_EXE\":\"C:\\\\Program Files\\\\nodejs\\\\\\\\node.exe\",\"NODE_OPTIONS\":\"--max_old_space_size=8192\",\"NODE_PATH\":\"D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.pnpm\\\\vite@4.4.9\\\\node_modules\\\\vite\\\\bin\\\\node_modules;D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.pnpm\\\\vite@4.4.9\\\\node_modules\\\\vite\\\\node_modules;D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.pnpm\\\\vite@4.4.9\\\\node_modules;D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.pnpm\\\\node_modules;D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.pnpm\\\\cross-env@5.2.1\\\\node_modules\\\\cross-env\\\\dist\\\\bin\\\\node_modules;D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.pnpm\\\\cross-env@5.2.1\\\\node_modules\\\\cross-env\\\\dist\\\\node_modules;D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.pnpm\\\\cross-env@5.2.1\\\\node_modules\\\\cross-env\\\\node_modules;D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.pnpm\\\\cross-env@5.2.1\\\\node_modules;D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.pnpm\\\\node_modules\",\"NPM_CLI_JS\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\",\"npm_command\":\"run-script\",\"npm_config_always_auth\":\"true\",\"npm_config_cache\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Local\\\\npm-cache\",\"npm_config_globalconfig\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\\\\npm\\\\etc\\\\npmrc\",\"npm_config_global_prefix\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\\\\npm\",\"npm_config_init_module\":\"C:\\\\Users\\\\Earlin.Lutz\\\\.npm-init.js\",\"npm_config_local_prefix\":\"D:\\\\hub2023A\\\\itwinjs-core\\\\test-apps\\\\display-test-app\",\"npm_config_loglevel\":\"silent\",\"npm_config_metrics_registry\":\"https://registry.npmjs.org/\",\"npm_config_node_gyp\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\node_modules\\\\node-gyp\\\\bin\\\\node-gyp.js\",\"npm_config_noproxy\":\"\",\"npm_config_prefix\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\\\\npm\",\"npm_config_userconfig\":\"C:\\\\Users\\\\Earlin.Lutz\\\\.npmrc\",\"npm_config_user_agent\":\"npm/8.12.2 node/v18.14.1 win32 x64 workspaces/false\",\"npm_execpath\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\",\"npm_lifecycle_event\":\"build:frontend-vite\",\"npm_lifecycle_script\":\"cross-env NODE_OPTIONS=--max_old_space_size=8192 vite build\",\"npm_node_execpath\":\"C:\\\\Program Files\\\\nodejs\\\\node.exe\",\"npm_package_engines_node\":\"^18.0.0\",\"npm_package_json\":\"D:\\\\hub2023A\\\\itwinjs-core\\\\test-apps\\\\display-test-app\\\\package.json\",\"npm_package_name\":\"display-test-app\",\"npm_package_version\":\"1.8.0\",\"NPM_PREFIX_NPM_CLI_JS\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\",\"NUMBER_OF_PROCESSORS\":\"24\",\"ONEDRIVE\":\"C:\\\\Users\\\\Earlin.Lutz\\\\OneDrive - Bentley Systems, Inc\",\"ONEDRIVECOMMERCIAL\":\"C:\\\\Users\\\\Earlin.Lutz\\\\OneDrive - Bentley Systems, Inc\",\"OS\":\"Windows_NT\",\"OUTBASE\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\\\\\core\\\\geometry\\\\lib\\\\\",\"OUTROOT\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\\\\\core\\\\geometry\\\\lib\\\\\",\"PATH\":\"D:\\\\hub2023A\\\\itwinjs-core\\\\test-apps\\\\display-test-app\\\\node_modules\\\\.bin;D:\\\\hub2023A\\\\itwinjs-core\\\\test-apps\\\\node_modules\\\\.bin;D:\\\\hub2023A\\\\itwinjs-core\\\\node_modules\\\\.bin;D:\\\\hub2023A\\\\node_modules\\\\.bin;D:\\\\node_modules\\\\.bin;C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\node_modules\\\\@npmcli\\\\run-script\\\\lib\\\\node-gyp-bin;D:\\\\hub2023A\\\\itwinjs-core\\\\test-apps\\\\display-test-app\\\\node_modules\\\\.bin;D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.bin;C:\\\\Program Files (x86)\\\\Microsoft SDKs\\\\Azure\\\\CLI2\\\\wbin;C:\\\\DevTools\\\\python38\\\\Scripts\\\\;C:\\\\DevTools\\\\python38\\\\;C:\\\\Windows\\\\system32;C:\\\\Windows;C:\\\\Windows\\\\System32\\\\Wbem;C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\;C:\\\\Windows\\\\System32\\\\OpenSSH\\\\;C:\\\\DevTools\\\\Mercurial-BSI\\\\Mercurial\\\\;C:\\\\DevTools\\\\Mercurial-BSI\\\\KDiff3\\\\;C:\\\\Program Files\\\\TortoiseHg\\\\;C:\\\\Program Files\\\\Microsoft SQL Server\\\\130\\\\Tools\\\\Binn\\\\;C:\\\\Program Files\\\\dotnet\\\\;C:\\\\Program Files\\\\Microsoft SQL Server\\\\Client SDK\\\\ODBC\\\\170\\\\Tools\\\\Binn\\\\;C:\\\\Program Files\\\\nodejs\\\\;c:\\\\DevTools\\\\Git\\\\cmd;C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Local\\\\Microsoft\\\\WindowsApps;C:\\\\devtools\\\\cvsnt\\\\;C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Local\\\\Programs\\\\Microsoft VS Code\\\\bin;C:\\\\Users\\\\Earlin.Lutz\\\\.dotnet\\\\tools;C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\\\\npm;c:\\\\bin\\\\;c:\\\\bin\\\\build\\\\;d:\\\\hub2023A\\\\itwinjs-core\\\\bsitools\\\\anycpu;\",\"PATHEXT\":\".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JSE;.WSF;.WSH;.MSC;.PY;.PYW\",\"PROCESSOR_ARCHITECTURE\":\"AMD64\",\"PROCESSOR_IDENTIFIER\":\"Intel64 Family 6 Model 85 Stepping 4, GenuineIntel\",\"PROCESSOR_LEVEL\":\"6\",\"PROCESSOR_REVISION\":\"5504\",\"PROGRAMDATA\":\"C:\\\\ProgramData\",\"PROGRAMFILES\":\"C:\\\\Program Files\",\"PROGRAMFILES(X86)\":\"C:\\\\Program Files (x86)\",\"PROGRAMW6432\":\"C:\\\\Program Files\",\"PROMPT\":\"$P$G\",\"PSMODULEPATH\":\"C:\\\\Program Files\\\\WindowsPowerShell\\\\Modules;C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\Modules\",\"PUBLIC\":\"C:\\\\Users\\\\Public\",\"RUSHSTACK_FILE_ERROR_BASE_FOLDER\":\"D:\\\\hub2023A\\\\itwinjs-core\",\"RUSH_INVOKED_FOLDER\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\core\\\\geometry\",\"SESSIONNAME\":\"Console\",\"SRCROOT\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\\",\"SYSTEMDRIVE\":\"C:\",\"SYSTEMROOT\":\"C:\\\\Windows\",\"TEMP\":\"C:\\\\Users\\\\EARLIN~1.LUT\\\\AppData\\\\Local\\\\Temp\",\"TESTAPPS\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\test-apps\\\\\",\"TMP\":\"C:\\\\Users\\\\EARLIN~1.LUT\\\\AppData\\\\Local\\\\Temp\",\"TOOLCACHE\":\"d:\\\\toolcache\\\\\",\"UATDATA\":\"C:\\\\Windows\\\\CCM\\\\UATData\\\\D9F8C395-CAB8-491d-B8AC-179A1FE1BE77\",\"UIFRAMEWORK\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\ui\\\\framework\\\\\",\"USERDNSDOMAIN\":\"BENTLEY.COM\",\"USERDOMAIN\":\"BENTLEY\",\"USERDOMAIN_ROAMINGPROFILE\":\"BENTLEY\",\"USERNAME\":\"Earlin.Lutz\",\"USERPROFILE\":\"C:\\\\Users\\\\Earlin.Lutz\",\"USE_NEW_BB\":\"1\",\"UTILROOT\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\util\\\\\",\"WINDIR\":\"C:\\\\Windows\",\"WIPPARTENABLE_ANDROIDTOOLCACHE\":\"1\",\"_RUSH_LIB_PATH\":\"C:\\\\Users\\\\Earlin.Lutz\\\\.rush\\\\node-v18.14.1\\\\rush-5.99.0\\\\node_modules\\\\@microsoft\\\\rush-lib\\\\lib\\\\index.js\",\"_USTN_CONVERTASSERTSTOPRINTF\":\"1\",\"__PSLOCKDOWNPOLICY\":\"0\",\"__TAIL0__\":\"g\",\"__TAIL__\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\core\\\\geometry\\\\\"}.IMJS_URL_PREFIX}api.bentley.com/realitydata`\n    };\n    const opts = {\n      iModelApp: {\n        accuSnap: new DisplayTestAppAccuSnap(),\n        notifications: new Notifications(),\n        tileAdmin,\n        toolAdmin: new DisplayTestAppToolAdmin(),\n        uiAdmin: new UiManager(),\n        realityDataAccess: new RealityDataAccessClient(realityDataClientOptions),\n        renderSys,\n        rpcInterfaces: [\n          DtaRpcInterface,\n          IModelReadRpcInterface,\n          IModelTileRpcInterface,\n          SnapshotIModelRpcInterface\n        ],\n        /* eslint-disable @typescript-eslint/naming-convention */\n        mapLayerOptions: {\n          MapboxImagery: configuration.mapBoxKey ? { key: \"access_token\", value: configuration.mapBoxKey } : void 0,\n          BingMaps: configuration.bingMapsKey ? { key: \"key\", value: configuration.bingMapsKey } : void 0\n        },\n        /* eslint-enable @typescript-eslint/naming-convention */\n        hubAccess: createHubAccess(configuration),\n        localization: new ITwinLocalization({ detectorOptions: { order: [\"htmlTag\"] } })\n      },\n      localhostIpcApp: {\n        socketUrl\n      }\n    };\n    this._iTwinId = configuration.iTwinId;\n    if (ProcessDetector.isElectronAppFrontend) {\n      if (!configuration.noElectronAuth)\n        opts.iModelApp.authorizationClient = new ElectronRendererAuthorization({\n          clientId: getConfigurationString(\"oidcClientId\") ?? \"imodeljs-spa-test\"\n        });\n      await ElectronApp.startup(opts);\n    } else if (ProcessDetector.isMobileAppFrontend) {\n      await MobileApp.startup(opts);\n    } else {\n      const redirectUri = \"http://localhost:3000/signin-callback\";\n      const urlObj = new URL(redirectUri);\n      if (urlObj.pathname === window.location.pathname) {\n        const client = new BrowserAuthorizationClient({\n          clientId: getConfigurationString(\"oidcClientId\") ?? \"imodeljs-spa-test\",\n          scope: getConfigurationString(\"oidcScope\") ?? \"projects:read realitydata:read imodels:read imodels:modify imodelaccess:read\",\n          redirectUri\n        });\n        await client.handleSigninCallback();\n      }\n      const rpcParams = { info: { title: \"ui-test-app\", version: \"v1.0\" }, uriPrefix: configuration.customOrchestratorUri || \"http://localhost:3001\" };\n      if (opts.iModelApp?.rpcInterfaces)\n        BentleyCloudRpcManager.initializeClient(rpcParams, opts.iModelApp.rpcInterfaces);\n      await LocalhostIpcApp.startup(opts);\n    }\n    IModelApp.applicationLogoCard = () => IModelApp.makeLogoCard({ iconSrc: \"DTA.png\", iconWidth: 100, heading: \"Display Test App\", notice: \"For internal testing\" });\n    const svtToolNamespace = \"SVTTools\";\n    await IModelApp.localization.registerNamespace(svtToolNamespace);\n    [\n      ApplyModelDisplayScaleTool,\n      ApplyModelTransformTool,\n      AttachCustomRealityDataTool,\n      ChangeGridSettingsTool,\n      CloneViewportTool,\n      CloseIModelTool,\n      CloseWindowTool,\n      CreateWindowTool,\n      DockWindowTool,\n      DrawingAidTestTool,\n      EditingScopeTool,\n      ExitTool,\n      FenceClassifySelectedTool,\n      FocusWindowTool,\n      FrameStatsTool,\n      GenerateElementGraphicsTool,\n      GenerateTileContentTool,\n      GltfDecorationTool,\n      IncidentMarkerDemoTool,\n      PathDecorationTestTool,\n      MacroTool,\n      MarkupSelectTestTool,\n      MarkupTool,\n      MaximizeWindowTool,\n      ModelClipTool,\n      OpenIModelTool,\n      OpenRealityModelSettingsTool,\n      OutputShadersTool,\n      PlaceLineStringTool,\n      PullChangesTool,\n      PushChangesTool,\n      PurgeTileTreesTool,\n      RecordFpsTool,\n      RecordTileSizesTool,\n      RefreshTilesTool,\n      ReopenIModelTool,\n      ResizeWindowTool,\n      RestoreWindowTool,\n      SaveImageTool,\n      ShutDownTool,\n      SignInTool,\n      SignOutTool,\n      SVTSelectionTool,\n      SyncViewportFrustaTool,\n      SyncViewportsTool,\n      TerrainDrapeTool,\n      ToggleAspectRatioSkewDecoratorTool,\n      TimePointComparisonTool,\n      ToggleShadowMapTilesTool,\n      ViewClipByElementGeometryTool,\n      ZoomToSelectedElementsTool\n    ].forEach((tool) => tool.register(svtToolNamespace));\n    IModelApp.toolAdmin.defaultToolId = SVTSelectionTool.toolId;\n    BingTerrainMeshProvider.register();\n    const realityApiKey = {\"ALLUSERSPROFILE\":\"C:\\\\ProgramData\",\"ANDROID_NDK_ROOT\":\"d:\\\\android-ndk-r12b-windows-x86_64\\\\android-ndk-r12b\\\\\",\"APPDATA\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\",\"BBNODOC\":\"--buildDocDeferralRule=never\",\"BEGTEST_LOGGING_CONFIG\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\BeGTest\\\\gtest\\\\logging.config.xml\",\"BUILDARCHITECTURE\":\"x64\",\"BUILDIMODEL_SYMLINKS\":\"1\",\"BUILDSTRATEGY\":\"TYPESCRIPT\",\"CD1\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\core\\\\geometry\\\\\",\"CLANG_ENFORCE_OVERRIDE\":\"1\",\"COLOR\":\"0\",\"COMMONPROGRAMFILES\":\"C:\\\\Program Files\\\\Common Files\",\"COMMONPROGRAMFILES(X86)\":\"C:\\\\Program Files (x86)\\\\Common Files\",\"COMMONPROGRAMW6432\":\"C:\\\\Program Files\\\\Common Files\",\"COMPILEBGNETSTRUCTSBSPLINESUPPORT\":\"1\",\"COMPILEMTGBASE1\":\"1\",\"COMPILE_BVRANGETREE\":\"1\",\"COMPUTERNAME\":\"NAOU22376A\",\"COMSPEC\":\"C:\\\\Windows\\\\system32\\\\cmd.exe\",\"CONSOLECOLOR\":\"74\",\"CORESRC\":\"backend\\\\src clients\\\\src common\\\\src frontend\\\\src geometry\\\\src\",\"CUBESRC\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\\\\\ui\\\\framework\\\\src\\\\configurableui\\\\navigationaids\\\\\",\"CUBETEST\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\test-apps\\\\ui-test-app\\\\\",\"DEBUG\":\"1\",\"DRIVERDATA\":\"C:\\\\Windows\\\\System32\\\\Drivers\\\\DriverData\",\"EDITOR\":\"notepad.exe\",\"EXPAND_GEOMETRY_GENSRC\":\"1\",\"FPS_BROWSER_APP_PROFILE_STRING\":\"Internet Explorer\",\"FPS_BROWSER_USER_PROFILE_STRING\":\"Default\",\"GEMADIR\":\"d:\\\\source\\\\bsitools\\\\winnt\\\\gemascripts\\\\\",\"GEOMETRYCORE\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\core\\\\geometry\\\\\",\"GEOMETRYROOT\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\\\\\core\\\\geometry\",\"GEOMTESTOUTPUTDIR\":\"d:\\\\tmp\\\\geomtest\\\\\",\"GITBASEBRANCH\":\"master\",\"GITROOT\":\"hub2023A\",\"HGRCPATH\":\"C:\\\\DevTools\\\\Mercurial-BSI\\\\Mercurial\\\\mercurial.ini;%APPDATA%\\\\Mercurial-BSI\\\\mercurial.user.ini\",\"HOME\":\"C:\\\\Users\\\\Earlin.Lutz\",\"HOMEDRIVE\":\"C:\",\"HOMEPATH\":\"\\\\Users\\\\Earlin.Lutz\",\"INIT_CWD\":\"D:\\\\hub2023A\\\\itwinjs-core\\\\test-apps\\\\display-test-app\",\"LOCALAPPDATA\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Local\",\"LOGONSERVER\":\"\\\\\\\\BENTLEYDC5\",\"METASRCPATH\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\BentleyGeometryNet\\\\src\\\\Structs\\\\metasrc\\\\\",\"MS_ALLOW_EDIT_IMODEL\":\"1\",\"MS_FEATUREASPECTSBETA\":\"FeatureAspects_Interchange_RFA;FeatureAspects_Interchange_RFA_Import;FeatureAspects_Printing_Printing3D;FeatureAspects_Mesh_NewModify\",\"MS_IGNORE_ASSERTS\":\"1\",\"NODE\":\"C:\\\\Program Files\\\\nodejs\\\\node.exe\",\"NODE_ENV\":\"development\",\"NODE_EXE\":\"C:\\\\Program Files\\\\nodejs\\\\\\\\node.exe\",\"NODE_OPTIONS\":\"--max_old_space_size=8192\",\"NODE_PATH\":\"D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.pnpm\\\\vite@4.4.9\\\\node_modules\\\\vite\\\\bin\\\\node_modules;D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.pnpm\\\\vite@4.4.9\\\\node_modules\\\\vite\\\\node_modules;D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.pnpm\\\\vite@4.4.9\\\\node_modules;D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.pnpm\\\\node_modules;D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.pnpm\\\\cross-env@5.2.1\\\\node_modules\\\\cross-env\\\\dist\\\\bin\\\\node_modules;D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.pnpm\\\\cross-env@5.2.1\\\\node_modules\\\\cross-env\\\\dist\\\\node_modules;D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.pnpm\\\\cross-env@5.2.1\\\\node_modules\\\\cross-env\\\\node_modules;D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.pnpm\\\\cross-env@5.2.1\\\\node_modules;D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.pnpm\\\\node_modules\",\"NPM_CLI_JS\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\",\"npm_command\":\"run-script\",\"npm_config_always_auth\":\"true\",\"npm_config_cache\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Local\\\\npm-cache\",\"npm_config_globalconfig\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\\\\npm\\\\etc\\\\npmrc\",\"npm_config_global_prefix\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\\\\npm\",\"npm_config_init_module\":\"C:\\\\Users\\\\Earlin.Lutz\\\\.npm-init.js\",\"npm_config_local_prefix\":\"D:\\\\hub2023A\\\\itwinjs-core\\\\test-apps\\\\display-test-app\",\"npm_config_loglevel\":\"silent\",\"npm_config_metrics_registry\":\"https://registry.npmjs.org/\",\"npm_config_node_gyp\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\node_modules\\\\node-gyp\\\\bin\\\\node-gyp.js\",\"npm_config_noproxy\":\"\",\"npm_config_prefix\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\\\\npm\",\"npm_config_userconfig\":\"C:\\\\Users\\\\Earlin.Lutz\\\\.npmrc\",\"npm_config_user_agent\":\"npm/8.12.2 node/v18.14.1 win32 x64 workspaces/false\",\"npm_execpath\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\",\"npm_lifecycle_event\":\"build:frontend-vite\",\"npm_lifecycle_script\":\"cross-env NODE_OPTIONS=--max_old_space_size=8192 vite build\",\"npm_node_execpath\":\"C:\\\\Program Files\\\\nodejs\\\\node.exe\",\"npm_package_engines_node\":\"^18.0.0\",\"npm_package_json\":\"D:\\\\hub2023A\\\\itwinjs-core\\\\test-apps\\\\display-test-app\\\\package.json\",\"npm_package_name\":\"display-test-app\",\"npm_package_version\":\"1.8.0\",\"NPM_PREFIX_NPM_CLI_JS\":\"C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\",\"NUMBER_OF_PROCESSORS\":\"24\",\"ONEDRIVE\":\"C:\\\\Users\\\\Earlin.Lutz\\\\OneDrive - Bentley Systems, Inc\",\"ONEDRIVECOMMERCIAL\":\"C:\\\\Users\\\\Earlin.Lutz\\\\OneDrive - Bentley Systems, Inc\",\"OS\":\"Windows_NT\",\"OUTBASE\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\\\\\core\\\\geometry\\\\lib\\\\\",\"OUTROOT\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\\\\\core\\\\geometry\\\\lib\\\\\",\"PATH\":\"D:\\\\hub2023A\\\\itwinjs-core\\\\test-apps\\\\display-test-app\\\\node_modules\\\\.bin;D:\\\\hub2023A\\\\itwinjs-core\\\\test-apps\\\\node_modules\\\\.bin;D:\\\\hub2023A\\\\itwinjs-core\\\\node_modules\\\\.bin;D:\\\\hub2023A\\\\node_modules\\\\.bin;D:\\\\node_modules\\\\.bin;C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\npm\\\\node_modules\\\\@npmcli\\\\run-script\\\\lib\\\\node-gyp-bin;D:\\\\hub2023A\\\\itwinjs-core\\\\test-apps\\\\display-test-app\\\\node_modules\\\\.bin;D:\\\\hub2023A\\\\itwinjs-core\\\\common\\\\temp\\\\node_modules\\\\.bin;C:\\\\Program Files (x86)\\\\Microsoft SDKs\\\\Azure\\\\CLI2\\\\wbin;C:\\\\DevTools\\\\python38\\\\Scripts\\\\;C:\\\\DevTools\\\\python38\\\\;C:\\\\Windows\\\\system32;C:\\\\Windows;C:\\\\Windows\\\\System32\\\\Wbem;C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\;C:\\\\Windows\\\\System32\\\\OpenSSH\\\\;C:\\\\DevTools\\\\Mercurial-BSI\\\\Mercurial\\\\;C:\\\\DevTools\\\\Mercurial-BSI\\\\KDiff3\\\\;C:\\\\Program Files\\\\TortoiseHg\\\\;C:\\\\Program Files\\\\Microsoft SQL Server\\\\130\\\\Tools\\\\Binn\\\\;C:\\\\Program Files\\\\dotnet\\\\;C:\\\\Program Files\\\\Microsoft SQL Server\\\\Client SDK\\\\ODBC\\\\170\\\\Tools\\\\Binn\\\\;C:\\\\Program Files\\\\nodejs\\\\;c:\\\\DevTools\\\\Git\\\\cmd;C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Local\\\\Microsoft\\\\WindowsApps;C:\\\\devtools\\\\cvsnt\\\\;C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Local\\\\Programs\\\\Microsoft VS Code\\\\bin;C:\\\\Users\\\\Earlin.Lutz\\\\.dotnet\\\\tools;C:\\\\Users\\\\Earlin.Lutz\\\\AppData\\\\Roaming\\\\npm;c:\\\\bin\\\\;c:\\\\bin\\\\build\\\\;d:\\\\hub2023A\\\\itwinjs-core\\\\bsitools\\\\anycpu;\",\"PATHEXT\":\".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JSE;.WSF;.WSH;.MSC;.PY;.PYW\",\"PROCESSOR_ARCHITECTURE\":\"AMD64\",\"PROCESSOR_IDENTIFIER\":\"Intel64 Family 6 Model 85 Stepping 4, GenuineIntel\",\"PROCESSOR_LEVEL\":\"6\",\"PROCESSOR_REVISION\":\"5504\",\"PROGRAMDATA\":\"C:\\\\ProgramData\",\"PROGRAMFILES\":\"C:\\\\Program Files\",\"PROGRAMFILES(X86)\":\"C:\\\\Program Files (x86)\",\"PROGRAMW6432\":\"C:\\\\Program Files\",\"PROMPT\":\"$P$G\",\"PSMODULEPATH\":\"C:\\\\Program Files\\\\WindowsPowerShell\\\\Modules;C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\Modules\",\"PUBLIC\":\"C:\\\\Users\\\\Public\",\"RUSHSTACK_FILE_ERROR_BASE_FOLDER\":\"D:\\\\hub2023A\\\\itwinjs-core\",\"RUSH_INVOKED_FOLDER\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\core\\\\geometry\",\"SESSIONNAME\":\"Console\",\"SRCROOT\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\\",\"SYSTEMDRIVE\":\"C:\",\"SYSTEMROOT\":\"C:\\\\Windows\",\"TEMP\":\"C:\\\\Users\\\\EARLIN~1.LUT\\\\AppData\\\\Local\\\\Temp\",\"TESTAPPS\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\test-apps\\\\\",\"TMP\":\"C:\\\\Users\\\\EARLIN~1.LUT\\\\AppData\\\\Local\\\\Temp\",\"TOOLCACHE\":\"d:\\\\toolcache\\\\\",\"UATDATA\":\"C:\\\\Windows\\\\CCM\\\\UATData\\\\D9F8C395-CAB8-491d-B8AC-179A1FE1BE77\",\"UIFRAMEWORK\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\ui\\\\framework\\\\\",\"USERDNSDOMAIN\":\"BENTLEY.COM\",\"USERDOMAIN\":\"BENTLEY\",\"USERDOMAIN_ROAMINGPROFILE\":\"BENTLEY\",\"USERNAME\":\"Earlin.Lutz\",\"USERPROFILE\":\"C:\\\\Users\\\\Earlin.Lutz\",\"USE_NEW_BB\":\"1\",\"UTILROOT\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\util\\\\\",\"WINDIR\":\"C:\\\\Windows\",\"WIPPARTENABLE_ANDROIDTOOLCACHE\":\"1\",\"_RUSH_LIB_PATH\":\"C:\\\\Users\\\\Earlin.Lutz\\\\.rush\\\\node-v18.14.1\\\\rush-5.99.0\\\\node_modules\\\\@microsoft\\\\rush-lib\\\\lib\\\\index.js\",\"_USTN_CONVERTASSERTSTOPRINTF\":\"1\",\"__PSLOCKDOWNPOLICY\":\"0\",\"__TAIL0__\":\"g\",\"__TAIL__\":\"d:\\\\hub2023A\\\\itwinjs-core\\\\core\\\\geometry\\\\\"}.IMJS_REALITY_DATA_KEY;\n    if (realityApiKey)\n      registerRealityDataSourceProvider(realityApiKey);\n    await FrontendDevTools.initialize();\n    await HyperModeling.initialize();\n    await EditTools.initialize();\n    await MapLayersFormats.initialize();\n  }\n  static setActiveSnapModes(snaps) {\n    IModelApp.accuSnap.setActiveSnapModes(snaps);\n  }\n  static setActiveSnapMode(snap) {\n    this.setActiveSnapModes([snap]);\n  }\n}\n",
      "start": 1693508118715,
      "end": 1693508118715,
      "order": "normal",
      "sourcemaps": null
    }
  ]
}
