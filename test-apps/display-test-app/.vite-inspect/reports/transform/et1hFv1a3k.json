{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/tools/EventController.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tools\n */\nimport { ToolAdmin } from \"./ToolAdmin\";\n/**\n * An EventController maps user input events from a Viewport to the ToolAdmin so that tools can process them.\n * Viewports are assigned an EventController when they are registered with ViewManager.addViewport and they are destroyed with ViewManager.dropViewport.\n * @public\n * @extensions\n */\nexport class EventController {\n    constructor(vp) {\n        this.vp = vp;\n        this._removals = [];\n        const element = vp.parentDiv;\n        if (element === undefined)\n            return;\n        // Put events  on the parentDiv to allows us to stopPropagation of events to the view canvas when they are meant for a sibling of view canvas (markup canvas, for example).\n        this.addDomListeners([\"mousedown\", \"mouseup\", \"mousemove\", \"mouseover\", \"mouseout\", \"wheel\", \"touchstart\", \"touchend\", \"touchcancel\", \"touchmove\"], element);\n        element.oncontextmenu = element.onselectstart = () => false;\n    }\n    destroy() {\n        this._removals.forEach((remove) => remove());\n        this._removals.length = 0;\n    }\n    /**\n     * Call element.addEventListener for each type of DOM event supplied. Creates a listener that will forward the HTML event to ToolAdmin.addEvent.\n     * Records the listener in the [[removals]] member so they are removed when this EventController is destroyed.\n     * @param domType An array of DOM event types to pass to element.addEventListener\n     * @param element The HTML element to which the listeners are added\n     */\n    addDomListeners(domType, element) {\n        const vp = this.vp;\n        const listener = (ev) => {\n            ev.preventDefault();\n            ToolAdmin.addEvent(ev, vp);\n        };\n        domType.forEach((type) => {\n            element.addEventListener(type, listener, false);\n            this._removals.push(() => element.removeEventListener(type, listener, false));\n        });\n    }\n}\n//# sourceMappingURL=EventController.js.map",
      "start": 1693508120010,
      "end": 1693508120297,
      "sourcemaps": null
    }
  ]
}
