{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/webgl/Material.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module WebGL\n */\nimport { ColorDef, RenderMaterial } from \"@itwin/core-common\";\nimport { FloatRgb } from \"./FloatRGBA\";\n/** Parameters describing a single material. The parameters used are:\n *  - diffuse color rgb (vec3).\n *  - alpha (float in [0..1])\n *  - is rgb overridden (bool)\n *  - is alpha overridden (bool)\n *  - specular exponent (float).\n *  - specular color (vec3).\n *  - specular weight (float in [0..1])\n *  - diffuse weight (float in [0..1])\n *  - texture weight (float in [0..1])\n *\n * The rgb and alpha are applied in the vertex shader. Either can be negative, indicating the material does not override it.\n *\n * The rest are passed as a varying vec4 to be applied in the fragment shader.\n * All but the specular exponent are compressed such that floats in [0..1] become integers in [0..255] and concatenated bitwise in pairs into 16-bit integer values.\n *\n * The result is:\n *  x: diffuse and specular weights\n *  y: texture weight and specular red\n *  z: specular green and blue\n *  w: specular exponent\n *\n * This packing is motivated by the limited max number of varying vectors guaranteed by WebGL.\n * A varying is used because:\n *  1. Material atlases require looking up the material associated with a particular vertex; and\n *  2. The vertex material may be replaced with a default material based on other criteria such as view flags and feature symbology overrides.\n * @internal\n */\nclass Material extends RenderMaterial {\n    get overridesRgb() { return this.rgba[0] >= 0; }\n    get overridesAlpha() { return this.rgba[3] >= 0; }\n    get hasTranslucency() { return this.overridesAlpha && this.rgba[3] < 1; }\n    // eslint-disable-next-line deprecation/deprecation\n    constructor(params) {\n        super(params);\n        // Used for type-switching vs MaterialAtlas\n        this.isAtlas = false;\n        this.fragUniforms = new Float32Array(4);\n        this.rgba = new Float32Array(4);\n        if (undefined !== params.diffuseColor) {\n            const rgb = FloatRgb.fromColorDef(params.diffuseColor);\n            this.rgba[0] = rgb.red;\n            this.rgba[1] = rgb.green;\n            this.rgba[2] = rgb.blue;\n        }\n        else {\n            this.rgba[0] = this.rgba[1] = this.rgba[2] = -1;\n        }\n        const alpha = undefined !== params.alpha ? params.alpha : -1;\n        this.rgba[3] = alpha;\n        const scale = (value) => Math.floor(value * 255 + 0.5);\n        this.setInteger(scale(params.diffuse), scale(params.specular), 0);\n        const textureWeight = undefined !== this.textureMapping ? this.textureMapping.params.weight : 1.0;\n        const specularRgb = undefined !== params.specularColor ? params.specularColor : ColorDef.white;\n        const specularColors = specularRgb.colors;\n        this.setInteger(scale(textureWeight), specularColors.r, 1);\n        this.setInteger(specularColors.g, specularColors.b, 2);\n        this.fragUniforms[3] = params.specularExponent;\n    }\n    setInteger(loByte, hiByte, index) {\n        const clamp = (x) => Math.floor(Math.min(255, (Math.max(x, 0))));\n        loByte = clamp(loByte);\n        hiByte = clamp(hiByte);\n        this.fragUniforms[index] = loByte + hiByte * 256;\n    }\n}\n// eslint-disable-next-line deprecation/deprecation\nMaterial.default = new Material(RenderMaterial.Params.defaults);\nexport { Material };\nObject.freeze(Material.default);\n/** @internal */\nexport function createMaterialInfo(source) {\n    if (undefined === source)\n        return undefined;\n    else if (source.isAtlas)\n        return source;\n    else\n        return source.material;\n}\n//# sourceMappingURL=Material.js.map",
      "start": 1693508124527,
      "end": 1693508124585,
      "sourcemaps": null
    }
  ]
}
