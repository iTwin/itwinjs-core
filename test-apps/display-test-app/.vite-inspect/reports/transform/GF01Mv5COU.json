{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/BriefcaseTypes.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module iModels\n */\n/** Values of [[BriefcaseId]] that have special meaning.\n * @public\n * @extensions\n */\nexport var BriefcaseIdValue;\n(function (BriefcaseIdValue) {\n    /** Indicates an invalid/illegal BriefcaseId */\n    BriefcaseIdValue[BriefcaseIdValue[\"Illegal\"] = 4294967295] = \"Illegal\";\n    /** BriefcaseIds must be less than this value */\n    BriefcaseIdValue[BriefcaseIdValue[\"Max\"] = 16777216] = \"Max\";\n    /** All valid iModelHub issued BriefcaseIds will be equal or higher than this */\n    BriefcaseIdValue[BriefcaseIdValue[\"FirstValid\"] = 2] = \"FirstValid\";\n    /** All valid iModelHub issued BriefcaseIds will be equal or lower than this */\n    BriefcaseIdValue[BriefcaseIdValue[\"LastValid\"] = 16777205] = \"LastValid\";\n    /**\n     * The briefcase has not been assigned a unique Id by iModelHub. Only briefcases that have been assigned a unique BriefcaseId may create changesets,\n     * because BriefcaseId is used to create unique ElementIds for new elements.\n     *\n     * The `Unassigned` briefcaseId is used for several purposes:\n     *  - **Snapshots**. Snapshot files are immutable copies of an iModel for archival or data exchange purposes. They can neither generate nor accept new changesets.\n     *  - **Checkpoints**. Checkpoints are Snapshots that represent a specific version on an iModel's timeline.\n     *  - **PullOnly**. A local briefcase file that may be used to \"slide\" along a timeline by applying incoming changesets.\n     * They are always opened readonly except to apply changesets.\n     *  - **Standalone**. Standalone iModels are local files that are not connected to iModelHub, and therefore cannot accept or create changesets.\n     */\n    BriefcaseIdValue[BriefcaseIdValue[\"Unassigned\"] = 0] = \"Unassigned\";\n})(BriefcaseIdValue || (BriefcaseIdValue = {}));\n/** Whether a briefcase is editable or may only accept incoming changesets from iModelHub\n * @public\n * @extensions\n */\nexport var SyncMode;\n(function (SyncMode) {\n    /** Use a fixed version (i.e. a checkpoint). See [CheckpointManager]($backend) for preferred approach to using checkpoint files. */\n    SyncMode[SyncMode[\"FixedVersion\"] = 1] = \"FixedVersion\";\n    /** A briefcase that can be edited. A unique briefcaseId must be assigned by iModelHub. */\n    SyncMode[SyncMode[\"PullAndPush\"] = 2] = \"PullAndPush\";\n    /** use [BriefcaseIdValue.Unassigned](%backend). This makes a briefcase that can accept changesets from iModelHub but can never create changesets. */\n    SyncMode[SyncMode[\"PullOnly\"] = 3] = \"PullOnly\";\n})(SyncMode || (SyncMode = {}));\n/** Option to control the validation and upgrade of domain schemas in the Db\n * @beta\n */\nexport var DomainOptions;\n(function (DomainOptions) {\n    /** Domain schemas will be validated for any required upgrades. Any errors will be reported back, and cause the application to fail opening the Db */\n    DomainOptions[DomainOptions[\"CheckRequiredUpgrades\"] = 0] = \"CheckRequiredUpgrades\";\n    /** Domain schemas will be validated for any required or optional upgrades. Any errors will be reported back, and cause the application to fail opening the Db */\n    DomainOptions[DomainOptions[\"CheckRecommendedUpgrades\"] = 1] = \"CheckRecommendedUpgrades\";\n    /** Domain schemas will be upgraded if necessary. However, only compatible schema upgrades will be allowed - these are typically additions of classes, properties, and changes to custom attributes */\n    DomainOptions[DomainOptions[\"Upgrade\"] = 2] = \"Upgrade\";\n    /** Domain schemas will neither be validated nor be upgraded. Used only internally */\n    DomainOptions[DomainOptions[\"SkipCheck\"] = 3] = \"SkipCheck\";\n})(DomainOptions || (DomainOptions = {}));\n/** Options that control whether a profile upgrade should be performed when opening a Db\n * @beta\n */\nexport var ProfileOptions;\n(function (ProfileOptions) {\n    /** No profile upgrade will be performed. If a profile upgrade was required, opening the file will fail */\n    ProfileOptions[ProfileOptions[\"None\"] = 0] = \"None\";\n    /** Profile upgrade will be performed if necessary */\n    ProfileOptions[ProfileOptions[\"Upgrade\"] = 1] = \"Upgrade\";\n})(ProfileOptions || (ProfileOptions = {}));\n/**\n * The state of the schemas in the Db compared with what the current version of the software expects\n * Note: The state may vary depending on whether the Db is to be opened ReadOnly or ReadWrite.\n * @beta\n */\nexport var SchemaState;\n(function (SchemaState) {\n    /** The schemas in the Db are up-to-date, and do not need to be upgraded before opening it with the current version of the software */\n    SchemaState[SchemaState[\"UpToDate\"] = 0] = \"UpToDate\";\n    /** It's required that the schemas in the Db be upgraded before it can be opened with the current version of the software.\n     * This may happen in read-write scenarios where the application requires a newer version of the schemas to be in place before\n     * it can write data based on that new schema.\n     */\n    SchemaState[SchemaState[\"UpgradeRequired\"] = 1] = \"UpgradeRequired\";\n    /** It's recommended, but not necessary that the schemas in the Db be upgraded before opening it with the current version of the software */\n    SchemaState[SchemaState[\"UpgradeRecommended\"] = 2] = \"UpgradeRecommended\";\n    /** The schemas in the Db are too old to be opened by the current version of the software. Upgrade using the API is not possible. */\n    SchemaState[SchemaState[\"TooOld\"] = 3] = \"TooOld\";\n    /** The schemas in the Db are too new to be opened by the current version of the software */\n    SchemaState[SchemaState[\"TooNew\"] = 4] = \"TooNew\";\n})(SchemaState || (SchemaState = {}));\n//# sourceMappingURL=BriefcaseTypes.js.map",
      "start": 1693508120673,
      "end": 1693508120723,
      "sourcemaps": null
    }
  ]
}
