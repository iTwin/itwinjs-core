{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/ViewPicker.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { BeEvent, compareBooleans, compareStrings, Id64, Id64String, SortedArray } from \"@itwin/core-bentley\";\r\nimport { ColorDef } from \"@itwin/core-common\";\r\nimport { IModelConnection, SpatialViewState, ViewState } from \"@itwin/core-frontend\";\r\n\r\ninterface ViewSpec extends IModelConnection.ViewSpec {\r\n  isPrivate: boolean;\r\n}\r\n\r\nexport class ViewList extends SortedArray<ViewSpec> {\r\n  private _defaultViewId = Id64.invalid;\r\n  private readonly _views = new Map<Id64String, ViewState>();\r\n\r\n  private constructor() {\r\n    super((lhs, rhs) => {\r\n      // Every entry has a unique Id, but we want to sort in the UI based on other criteria first.\r\n      let cmp = compareBooleans(lhs.isPrivate, rhs.isPrivate);\r\n      if (0 === cmp) {\r\n        cmp = compareStrings(lhs.name, rhs.name);\r\n        if (0 === cmp)\r\n          cmp = compareStrings(lhs.id, rhs.id);\r\n      }\r\n\r\n      return cmp;\r\n    });\r\n  }\r\n\r\n  public get defaultViewId(): Id64String { return this._defaultViewId; }\r\n\r\n  public async getView(id: Id64String, iModel: IModelConnection): Promise<ViewState> {\r\n    let view = this._views.get(id);\r\n    if (undefined === view) {\r\n      try {\r\n        view = await iModel.views.load(id);\r\n      } catch {\r\n        // The view probably refers to a nonexistent display style or model/category selector. Replace with a default spatial view.\r\n        // Or, we've opened a blank connection and `id` is intentionally invalid.\r\n        // The viewport's title bar will display \"UNNAMED\" instead of the bad view's name.\r\n        view = this.manufactureSpatialView(iModel);\r\n      }\r\n\r\n      this._views.set(id, view);\r\n    }\r\n\r\n    // NB: We clone so that if user switches back to this view, it is shown in its initial (persistent) state.\r\n    return view.clone();\r\n  }\r\n\r\n  public async getDefaultView(iModel: IModelConnection): Promise<ViewState> {\r\n    return this.getView(this.defaultViewId, iModel);\r\n  }\r\n\r\n  public static async create(iModel: IModelConnection, viewName?: string): Promise<ViewList> {\r\n    const viewList = new ViewList();\r\n    await viewList.populate(iModel, viewName);\r\n    return viewList;\r\n  }\r\n\r\n  public override clear(): void {\r\n    super.clear();\r\n    this._defaultViewId = Id64.invalid;\r\n    this._views.clear();\r\n  }\r\n\r\n  public async populate(iModel: IModelConnection, viewName?: string): Promise<void> {\r\n    this.clear();\r\n\r\n    // Query all non-private views. They sort first in list.\r\n    let specs = await iModel.views.getViewList({ wantPrivate: false });\r\n    for (const spec of specs)\r\n      this.insert({ ...spec, isPrivate: false });\r\n\r\n    // Query private views. They sort to end of list.\r\n    const nSpecs = specs.length;\r\n    specs = await iModel.views.getViewList({ wantPrivate: true });\r\n    if (specs.length > nSpecs) {\r\n      for (const spec of specs) {\r\n        const entry = { ...spec, isPrivate: false };\r\n        if (!this.findEqual(entry)) {\r\n          entry.isPrivate = true;\r\n          this.insert(entry);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (undefined !== viewName) {\r\n      for (const spec of this) {\r\n        if (spec.name === viewName) {\r\n          this._defaultViewId = spec.id;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (Id64.isInvalid(this._defaultViewId) && 0 < this._array.length) {\r\n      this._defaultViewId = this._array[0].id;\r\n      const defaultViewId = await iModel.views.queryDefaultViewId();\r\n      for (const spec of this) {\r\n        if (spec.id === defaultViewId) {\r\n          this._defaultViewId = defaultViewId;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (Id64.isInvalid(this._defaultViewId))\r\n      this.insert({ id: Id64.invalid, name: \"Spatial View\", class: SpatialViewState.classFullName, isPrivate: false });\r\n\r\n    // Ensure default view is selected and loaded.\r\n    await this.getView(this._defaultViewId, iModel);\r\n  }\r\n\r\n  // create a new spatial view initialized to show the project extents from top view. Model and\r\n  // category selectors are empty, so this is really only useful for testing backgroundMaps and\r\n  // reality models.\r\n  private manufactureSpatialView(iModel: IModelConnection): SpatialViewState {\r\n    const ext = iModel.projectExtents;\r\n\r\n    // start with a new \"blank\" spatial view to show the extents of the project, from top view\r\n    const blankView = SpatialViewState.createBlank(iModel, ext.low, ext.high.minus(ext.low));\r\n\r\n    // turn on the background map\r\n    const style = blankView.displayStyle;\r\n    style.viewFlags = style.viewFlags.with(\"backgroundMap\", true);\r\n\r\n    style.backgroundColor = ColorDef.white;\r\n\r\n    // turn on the skybox in the environment\r\n    style.environment = style.environment.withDisplay({ sky: true });\r\n\r\n    return blankView;\r\n  }\r\n}\r\n\r\nexport class ViewPicker {\r\n  private readonly _select: HTMLSelectElement;\r\n  public readonly onSelectedViewChanged = new BeEvent<(viewId: Id64String) => void>();\r\n\r\n  public get element(): HTMLElement { return this._select; }\r\n\r\n  public constructor(parent: HTMLElement, views: ViewList) {\r\n    this._select = document.createElement(\"select\");\r\n    this._select.className = \"viewList\";\r\n    this._select.onchange = () => this.onSelectedViewChanged.raiseEvent(this._select.value);\r\n\r\n    parent.appendChild(this._select);\r\n\r\n    this.populate(views);\r\n  }\r\n\r\n  public populate(views: ViewList): void {\r\n    while (this._select.hasChildNodes())\r\n      this._select.removeChild(this._select.firstChild!);\r\n\r\n    let index = 0;\r\n    for (const spec of views) {\r\n      const option = document.createElement(\"option\");\r\n      option.innerText = spec.name;\r\n      option.value = spec.id;\r\n      this._select.appendChild(option);\r\n      if (spec.id === views.defaultViewId)\r\n        this._select.selectedIndex = index;\r\n      index++;\r\n    }\r\n  }\r\n}\r\n",
      "start": 1693508124601,
      "end": 1693508124720,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { BeEvent, compareBooleans, compareStrings, Id64, SortedArray } from \"@itwin/core-bentley\";\nimport { ColorDef } from \"@itwin/core-common\";\nimport { SpatialViewState } from \"@itwin/core-frontend\";\nexport class ViewList extends SortedArray {\n  constructor() {\n    super((lhs, rhs) => {\n      let cmp = compareBooleans(lhs.isPrivate, rhs.isPrivate);\n      if (0 === cmp) {\n        cmp = compareStrings(lhs.name, rhs.name);\n        if (0 === cmp)\n          cmp = compareStrings(lhs.id, rhs.id);\n      }\n      return cmp;\n    });\n    this._defaultViewId = Id64.invalid;\n    this._views = /* @__PURE__ */ new Map();\n  }\n  get defaultViewId() {\n    return this._defaultViewId;\n  }\n  async getView(id, iModel) {\n    let view = this._views.get(id);\n    if (void 0 === view) {\n      try {\n        view = await iModel.views.load(id);\n      } catch {\n        view = this.manufactureSpatialView(iModel);\n      }\n      this._views.set(id, view);\n    }\n    return view.clone();\n  }\n  async getDefaultView(iModel) {\n    return this.getView(this.defaultViewId, iModel);\n  }\n  static async create(iModel, viewName) {\n    const viewList = new ViewList();\n    await viewList.populate(iModel, viewName);\n    return viewList;\n  }\n  clear() {\n    super.clear();\n    this._defaultViewId = Id64.invalid;\n    this._views.clear();\n  }\n  async populate(iModel, viewName) {\n    this.clear();\n    let specs = await iModel.views.getViewList({ wantPrivate: false });\n    for (const spec of specs)\n      this.insert({ ...spec, isPrivate: false });\n    const nSpecs = specs.length;\n    specs = await iModel.views.getViewList({ wantPrivate: true });\n    if (specs.length > nSpecs) {\n      for (const spec of specs) {\n        const entry = { ...spec, isPrivate: false };\n        if (!this.findEqual(entry)) {\n          entry.isPrivate = true;\n          this.insert(entry);\n        }\n      }\n    }\n    if (void 0 !== viewName) {\n      for (const spec of this) {\n        if (spec.name === viewName) {\n          this._defaultViewId = spec.id;\n          break;\n        }\n      }\n    }\n    if (Id64.isInvalid(this._defaultViewId) && 0 < this._array.length) {\n      this._defaultViewId = this._array[0].id;\n      const defaultViewId = await iModel.views.queryDefaultViewId();\n      for (const spec of this) {\n        if (spec.id === defaultViewId) {\n          this._defaultViewId = defaultViewId;\n          break;\n        }\n      }\n    }\n    if (Id64.isInvalid(this._defaultViewId))\n      this.insert({ id: Id64.invalid, name: \"Spatial View\", class: SpatialViewState.classFullName, isPrivate: false });\n    await this.getView(this._defaultViewId, iModel);\n  }\n  // create a new spatial view initialized to show the project extents from top view. Model and\n  // category selectors are empty, so this is really only useful for testing backgroundMaps and\n  // reality models.\n  manufactureSpatialView(iModel) {\n    const ext = iModel.projectExtents;\n    const blankView = SpatialViewState.createBlank(iModel, ext.low, ext.high.minus(ext.low));\n    const style = blankView.displayStyle;\n    style.viewFlags = style.viewFlags.with(\"backgroundMap\", true);\n    style.backgroundColor = ColorDef.white;\n    style.environment = style.environment.withDisplay({ sky: true });\n    return blankView;\n  }\n}\nexport class ViewPicker {\n  constructor(parent, views) {\n    this.onSelectedViewChanged = new BeEvent();\n    this._select = document.createElement(\"select\");\n    this._select.className = \"viewList\";\n    this._select.onchange = () => this.onSelectedViewChanged.raiseEvent(this._select.value);\n    parent.appendChild(this._select);\n    this.populate(views);\n  }\n  get element() {\n    return this._select;\n  }\n  populate(views) {\n    while (this._select.hasChildNodes())\n      this._select.removeChild(this._select.firstChild);\n    let index = 0;\n    for (const spec of views) {\n      const option = document.createElement(\"option\");\n      option.innerText = spec.name;\n      option.value = spec.id;\n      this._select.appendChild(option);\n      if (spec.id === views.defaultViewId)\n        this._select.selectedIndex = index;\n      index++;\n    }\n  }\n}\n",
      "start": 1693508124720,
      "end": 1693508124833,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/ViewPicker.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { BeEvent, compareBooleans, compareStrings, Id64, Id64String, SortedArray } from \"@itwin/core-bentley\";\r\nimport { ColorDef } from \"@itwin/core-common\";\r\nimport { IModelConnection, SpatialViewState, ViewState } from \"@itwin/core-frontend\";\r\n\r\ninterface ViewSpec extends IModelConnection.ViewSpec {\r\n  isPrivate: boolean;\r\n}\r\n\r\nexport class ViewList extends SortedArray<ViewSpec> {\r\n  private _defaultViewId = Id64.invalid;\r\n  private readonly _views = new Map<Id64String, ViewState>();\r\n\r\n  private constructor() {\r\n    super((lhs, rhs) => {\r\n      // Every entry has a unique Id, but we want to sort in the UI based on other criteria first.\r\n      let cmp = compareBooleans(lhs.isPrivate, rhs.isPrivate);\r\n      if (0 === cmp) {\r\n        cmp = compareStrings(lhs.name, rhs.name);\r\n        if (0 === cmp)\r\n          cmp = compareStrings(lhs.id, rhs.id);\r\n      }\r\n\r\n      return cmp;\r\n    });\r\n  }\r\n\r\n  public get defaultViewId(): Id64String { return this._defaultViewId; }\r\n\r\n  public async getView(id: Id64String, iModel: IModelConnection): Promise<ViewState> {\r\n    let view = this._views.get(id);\r\n    if (undefined === view) {\r\n      try {\r\n        view = await iModel.views.load(id);\r\n      } catch {\r\n        // The view probably refers to a nonexistent display style or model/category selector. Replace with a default spatial view.\r\n        // Or, we've opened a blank connection and `id` is intentionally invalid.\r\n        // The viewport's title bar will display \"UNNAMED\" instead of the bad view's name.\r\n        view = this.manufactureSpatialView(iModel);\r\n      }\r\n\r\n      this._views.set(id, view);\r\n    }\r\n\r\n    // NB: We clone so that if user switches back to this view, it is shown in its initial (persistent) state.\r\n    return view.clone();\r\n  }\r\n\r\n  public async getDefaultView(iModel: IModelConnection): Promise<ViewState> {\r\n    return this.getView(this.defaultViewId, iModel);\r\n  }\r\n\r\n  public static async create(iModel: IModelConnection, viewName?: string): Promise<ViewList> {\r\n    const viewList = new ViewList();\r\n    await viewList.populate(iModel, viewName);\r\n    return viewList;\r\n  }\r\n\r\n  public override clear(): void {\r\n    super.clear();\r\n    this._defaultViewId = Id64.invalid;\r\n    this._views.clear();\r\n  }\r\n\r\n  public async populate(iModel: IModelConnection, viewName?: string): Promise<void> {\r\n    this.clear();\r\n\r\n    // Query all non-private views. They sort first in list.\r\n    let specs = await iModel.views.getViewList({ wantPrivate: false });\r\n    for (const spec of specs)\r\n      this.insert({ ...spec, isPrivate: false });\r\n\r\n    // Query private views. They sort to end of list.\r\n    const nSpecs = specs.length;\r\n    specs = await iModel.views.getViewList({ wantPrivate: true });\r\n    if (specs.length > nSpecs) {\r\n      for (const spec of specs) {\r\n        const entry = { ...spec, isPrivate: false };\r\n        if (!this.findEqual(entry)) {\r\n          entry.isPrivate = true;\r\n          this.insert(entry);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (undefined !== viewName) {\r\n      for (const spec of this) {\r\n        if (spec.name === viewName) {\r\n          this._defaultViewId = spec.id;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (Id64.isInvalid(this._defaultViewId) && 0 < this._array.length) {\r\n      this._defaultViewId = this._array[0].id;\r\n      const defaultViewId = await iModel.views.queryDefaultViewId();\r\n      for (const spec of this) {\r\n        if (spec.id === defaultViewId) {\r\n          this._defaultViewId = defaultViewId;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (Id64.isInvalid(this._defaultViewId))\r\n      this.insert({ id: Id64.invalid, name: \"Spatial View\", class: SpatialViewState.classFullName, isPrivate: false });\r\n\r\n    // Ensure default view is selected and loaded.\r\n    await this.getView(this._defaultViewId, iModel);\r\n  }\r\n\r\n  // create a new spatial view initialized to show the project extents from top view. Model and\r\n  // category selectors are empty, so this is really only useful for testing backgroundMaps and\r\n  // reality models.\r\n  private manufactureSpatialView(iModel: IModelConnection): SpatialViewState {\r\n    const ext = iModel.projectExtents;\r\n\r\n    // start with a new \"blank\" spatial view to show the extents of the project, from top view\r\n    const blankView = SpatialViewState.createBlank(iModel, ext.low, ext.high.minus(ext.low));\r\n\r\n    // turn on the background map\r\n    const style = blankView.displayStyle;\r\n    style.viewFlags = style.viewFlags.with(\"backgroundMap\", true);\r\n\r\n    style.backgroundColor = ColorDef.white;\r\n\r\n    // turn on the skybox in the environment\r\n    style.environment = style.environment.withDisplay({ sky: true });\r\n\r\n    return blankView;\r\n  }\r\n}\r\n\r\nexport class ViewPicker {\r\n  private readonly _select: HTMLSelectElement;\r\n  public readonly onSelectedViewChanged = new BeEvent<(viewId: Id64String) => void>();\r\n\r\n  public get element(): HTMLElement { return this._select; }\r\n\r\n  public constructor(parent: HTMLElement, views: ViewList) {\r\n    this._select = document.createElement(\"select\");\r\n    this._select.className = \"viewList\";\r\n    this._select.onchange = () => this.onSelectedViewChanged.raiseEvent(this._select.value);\r\n\r\n    parent.appendChild(this._select);\r\n\r\n    this.populate(views);\r\n  }\r\n\r\n  public populate(views: ViewList): void {\r\n    while (this._select.hasChildNodes())\r\n      this._select.removeChild(this._select.firstChild!);\r\n\r\n    let index = 0;\r\n    for (const spec of views) {\r\n      const option = document.createElement(\"option\");\r\n      option.innerText = spec.name;\r\n      option.value = spec.id;\r\n      this._select.appendChild(option);\r\n      if (spec.id === views.defaultViewId)\r\n        this._select.selectedIndex = index;\r\n      index++;\r\n    }\r\n  }\r\n}\r\n"
        ],
        "mappings": "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",
        "names": []
      }
    }
  ]
}
