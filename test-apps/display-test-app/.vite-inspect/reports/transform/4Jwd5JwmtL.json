{
  "resolvedId": "D:/hub2023A/itwinjs-core/common/temp/node_modules/.pnpm/@svgdotjs+svg.js@3.0.13/node_modules/@svgdotjs/svg.js/src/elements/G.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { nodeOrNew, register, wrapWithAttrCheck } from '../utils/adopter.js'\r\nimport { proportionalSize } from '../utils/utils.js'\r\nimport { registerMethods } from '../utils/methods.js'\r\nimport Container from './Container.js'\r\nimport Matrix from '../types/Matrix.js'\r\nimport Point from '../types/Point.js'\r\n\r\nexport default class G extends Container {\r\n  constructor (node) {\r\n    super(nodeOrNew('g', node), node)\r\n  }\r\n\r\n  x (x, box = this.bbox()) {\r\n    if (x == null) return box.x\r\n    return this.move(x, box.y, box)\r\n  }\r\n\r\n  y (y, box = this.bbox()) {\r\n    if (y == null) return box.y\r\n    return this.move(box.x, y, box)\r\n  }\r\n\r\n  move (x = 0, y = 0, box = this.bbox()) {\r\n    const dx = x - box.x\r\n    const dy = y - box.y\r\n\r\n    return this.dmove(dx, dy)\r\n  }\r\n\r\n  dx (dx) {\r\n    return this.dmove(dx, 0)\r\n  }\r\n\r\n  dy (dy) {\r\n    return this.dmove(0, dy)\r\n  }\r\n\r\n  dmove (dx, dy) {\r\n    this.children().forEach((child, i) => {\r\n      // Get the childs bbox\r\n      const bbox = child.bbox()\r\n      // Get childs matrix\r\n      const m = new Matrix(child)\r\n      // Translate childs matrix by amount and\r\n      // transform it back into parents space\r\n      const matrix = m.translate(dx, dy).transform(m.inverse())\r\n      // Calculate new x and y from old box\r\n      const p = new Point(bbox.x, bbox.y).transform(matrix)\r\n      // Move element\r\n      child.move(p.x, p.y)\r\n    })\r\n\r\n    return this\r\n  }\r\n\r\n  width (width, box = this.bbox()) {\r\n    if (width == null) return box.width\r\n    return this.size(width, box.height, box)\r\n  }\r\n\r\n  height (height, box = this.bbox()) {\r\n    if (height == null) return box.height\r\n    return this.size(box.width, height, box)\r\n  }\r\n\r\n  size (width, height, box = this.bbox()) {\r\n    const p = proportionalSize(this, width, height, box)\r\n    const scaleX = p.width / box.width\r\n    const scaleY = p.height / box.height\r\n\r\n    this.children().forEach((child, i) => {\r\n      const o = new Point(box).transform(new Matrix(child).inverse())\r\n      child.scale(scaleX, scaleY, o.x, o.y)\r\n    })\r\n\r\n    return this\r\n  }\r\n}\r\n\r\nregisterMethods({\r\n  Container: {\r\n    // Create a group element\r\n    group: wrapWithAttrCheck(function () {\r\n      return this.put(new G())\r\n    })\r\n  }\r\n})\r\n\r\nregister(G, 'G')\r\n",
      "start": 1693508127154,
      "end": 1693508127201,
      "sourcemaps": null
    }
  ]
}
