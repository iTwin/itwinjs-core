{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/RgbColor.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Symbology\n */\nimport { compareNumbers } from \"@itwin/core-bentley\";\nimport { ColorDef } from \"./ColorDef\";\n/** An immutable representation of a color with red, green, and blue components each in the integer range [0, 255].\n * @public\n */\nexport class RgbColor {\n    /** Constructs from red, green, and blue components.\n     * @param r Red\n     * @param g Green\n     * @param b Blue\n     */\n    constructor(r, g, b) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.r = Math.max(0, Math.min(this.r, 0xff));\n        this.g = Math.max(0, Math.min(this.g, 0xff));\n        this.b = Math.max(0, Math.min(this.b, 0xff));\n    }\n    /** Constructs from the red, green, and blue components of a ColorDef. The transparency component is ignored. */\n    static fromColorDef(colorDef) {\n        const colors = colorDef.colors;\n        return new RgbColor(colors.r, colors.g, colors.b);\n    }\n    /** Converts this RgbColor to a ColorDef.\n     * @param transparency Value to use for the transparency component of the ColorDef.\n     * @param out If defined, this ColorDef will be modified in-place and returned; otherwise a new ColorDef will be allocated.\n     * @returns A ColorDef with RGB components equivalent to those of this RgbColor and transparency component as specified.\n     */\n    toColorDef(transparency = 0) {\n        return ColorDef.from(this.r, this.g, this.b, transparency);\n    }\n    /** Convert this color to its JSON representation. */\n    toJSON() {\n        return { r: this.r, g: this.g, b: this.b };\n    }\n    /** Create an RgbColor from its JSON representation.\n     * If `json` is `undefined`, the result is pure white.\n     */\n    static fromJSON(json) {\n        let r = 0xff;\n        let g = 0xff;\n        let b = 0xff;\n        if (undefined !== json) {\n            if (typeof json.r === \"number\")\n                r = json.r;\n            if (typeof json.g === \"number\")\n                g = json.g;\n            if (typeof json.b === \"number\")\n                b = json.b;\n        }\n        return new RgbColor(r, g, b);\n    }\n    /** Returns true if this color's red, green, and blue components are identical to those of `other`. */\n    equals(other) {\n        return this.r === other.r && this.g === other.g && this.b === other.b;\n    }\n    /** Compare this color to another color using the rules of an [OrderedComparator]($bentley). */\n    compareTo(other) {\n        return compareNumbers(this.r, other.r) || compareNumbers(this.g, other.g) || compareNumbers(this.b, other.b);\n    }\n    /** Convert this color to a string in the form \"#rrggbb\" where the values are the hex digits of the respective color components. */\n    toHexString() {\n        return this.toColorDef().toHexString();\n    }\n}\n//# sourceMappingURL=RgbColor.js.map",
      "start": 1693508120948,
      "end": 1693508121004,
      "sourcemaps": null
    }
  ]
}
