{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/hypermodeling/lib/esm/SectionDrawingLocationState.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module HyperModeling\n */\nimport { Placement3d, QueryRowFormat } from \"@itwin/core-common\";\nimport { DrawingViewState, SheetViewState, SpatialViewState } from \"@itwin/core-frontend\";\nimport { ClipVector, Transform } from \"@itwin/core-geometry\";\nconst selectSectionDrawingLocationStatesECSql = `\r\n  SELECT\r\n    bis.SectionDrawingLocation.ECInstanceId as sectionLocationId,\r\n    bis.SectionDrawingLocation.Model.Id as sectionLocationModelId,\r\n    bis.SectionDrawingLocation.SectionView.Id as sectionViewId,\r\n    bis.SectionDrawingLocation.Category.Id as categoryId,\r\n    bis.SectionDrawingLocation.Origin as origin,\r\n    bis.SectionDrawingLocation.Yaw as yaw,\r\n    bis.SectionDrawingLocation.Pitch as pitch,\r\n    bis.SectionDrawingLocation.Roll as roll,\r\n    bis.SectionDrawingLocation.BBoxLow as bboxLow,\r\n    bis.SectionDrawingLocation.BBoxHigh as bboxHigh,\r\n    bis.SectionDrawingLocation.UserLabel as userLabel,\r\n\r\n    bis.SectionDrawing.SectionType as sectionType,\r\n    json_extract(bis.SectionDrawing.jsonProperties, '$.drawingToSpatialTransform') as drawingToSpatialTransform,\r\n    bis.SectionDrawing.SpatialView.Id as spatialViewId,\r\n    json_extract(bis.SectionDrawing.jsonProperties, '$.sheetToSpatialTransform') as sheetToSpatialTransform,\r\n    json_extract(bis.SectionDrawing.jsonProperties, '$.drawingBoundaryClip') as sheetClip,\r\n\r\n    json_extract(bis.SpatialViewDefinition.jsonProperties, '$.viewDetails.clip') as clipJSON,\r\n    bis.ViewAttachment.ECInstanceId as viewAttachmentId,\r\n    bis.SheetViewDefinition.ECInstanceId as sheetViewId\r\n  FROM bis.SectionDrawingLocation\r\n  INNER JOIN bis.ViewDefinition2d on bis.SectionDrawingLocation.SectionView.Id = bis.ViewDefinition2d.ECInstanceId\r\n  INNER JOIN bis.SectionDrawing on bis.ViewDefinition2d.BaseModel.Id = bis.SectionDrawing.ECInstanceId\r\n  LEFT JOIN  bis.ViewAttachment on bis.ViewDefinition2d.ECInstanceId = bis.ViewAttachment.View.Id\r\n  LEFT JOIN bis.SheetViewDefinition on bis.SheetViewDefinition.BaseModel.Id = bis.ViewAttachment.Model.Id\r\n  INNER JOIN bis.SpatialViewDefinition on bis.SpatialViewDefinition.ECInstanceId = bis.SectionDrawing.SpatialView.Id\r\n`;\n/** Represents a [SectionDrawingLocation]($backend), including data from related elements like [SectionDrawing]($backend) used in a hyper-modeling context.\n * @see [[SectionMarker]] for a widget that allows the user to interact with a section drawing location.\n * @public\n */\nexport class SectionDrawingLocationState {\n    /** @internal */\n    constructor(props, iModel) {\n        this.iModel = iModel;\n        this.id = props.sectionLocationId;\n        this.model = props.sectionLocationModelId;\n        this.userLabel = props.userLabel;\n        this.category = props.categoryId;\n        this.sectionType = props.sectionType;\n        this.drawingViewId = props.sectionViewId;\n        this.spatialViewId = props.spatialViewId;\n        this.drawingToSpatialTransform = Transform.fromJSON(JSON.parse(props.drawingToSpatialTransform));\n        const extractClip = (str) => {\n            let clip;\n            if (str) {\n                try {\n                    clip = ClipVector.fromJSON(JSON.parse(str));\n                }\n                catch { }\n            }\n            return clip;\n        };\n        this.clip = extractClip(props.clipJSON) ?? ClipVector.createEmpty();\n        const placementProps = {\n            origin: props.origin ?? {},\n            angles: {\n                yaw: props.yaw,\n                pitch: props.pitch,\n                roll: props.roll,\n            },\n            placement: (props.bboxLow && props.bboxHigh) ? { low: props.bboxLow, high: props.bboxHigh } : undefined,\n        };\n        this.placement = Placement3d.fromJSON(placementProps);\n        if (props.viewAttachmentId && props.sheetToSpatialTransform) {\n            this.viewAttachment = {\n                id: props.viewAttachmentId,\n                transformToSpatial: Transform.fromJSON(JSON.parse(props.sheetToSpatialTransform)),\n                clip: extractClip(props.sheetClip),\n                viewId: props.sheetViewId,\n            };\n        }\n    }\n    /** Return a promise that resolves to the [DrawingViewState]($frontend) corresponding to `this.drawingViewId`, or undefined if an exception occurs. */\n    async tryLoadDrawingView() {\n        try {\n            const view = await this.iModel.views.load(this.drawingViewId);\n            if (view instanceof DrawingViewState)\n                return view;\n        }\n        catch { }\n        return undefined;\n    }\n    /** Return a promise that resolves to the [SpatialViewState]($frontend) corresponding to `this.spatialViewId`, or undefined if an exception occurs. */\n    async tryLoadSpatialView() {\n        try {\n            const view = await this.iModel.views.load(this.spatialViewId);\n            if (view instanceof SpatialViewState)\n                return view;\n        }\n        catch { }\n        return undefined;\n    }\n    /** Return a promise that resolves to the [SheetViewState]($frontend) corresponding to `this.viewAttachment.viewId`; or undefined if there is no corresponding [ViewAttachment]($backend) or an exception occurs. */\n    async tryLoadSheetView() {\n        if (undefined === this.viewAttachment || undefined === this.viewAttachment.viewId)\n            return undefined;\n        try {\n            const view = await this.iModel.views.load(this.viewAttachment.viewId);\n            if (view instanceof SheetViewState)\n                return view;\n        }\n        catch { }\n        return undefined;\n    }\n    /** Query the specified iModel for [SectionDrawingLocation]($backend)s and return a list of corresponding [[SectionDrawingLocationState]]s. */\n    static async queryAll(iModel) {\n        const states = [];\n        try {\n            for await (const row of iModel.createQueryReader(selectSectionDrawingLocationStatesECSql, undefined, { rowFormat: QueryRowFormat.UseJsPropertyNames }))\n                states.push(new SectionDrawingLocationState(row.toRow(), iModel));\n        }\n        catch {\n            // If the iModel contains a version of BisCore schema older than 1.12.0, the query will produce an exception due to missing SectionDrawingLocation class. That's fine.\n        }\n        return states;\n    }\n}\n//# sourceMappingURL=SectionDrawingLocationState.js.map",
      "start": 1693508122873,
      "end": 1693508122973,
      "sourcemaps": null
    }
  ]
}
