{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/pointcloud/format/opc/GeometryRecord.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { Bounds } from \"../../../spatial/geom/Bounds\";\nimport { Coordinate } from \"../../../spatial/geom/Coordinate\";\nimport { LittleEndian } from \"../../../system/buffer/LittleEndian\";\nimport { Grid } from \"../../model/Grid\";\n/**\n * Class GeometryRecord defines a geometry record.\n *\n * @version 1.0 January 2014\n */\n/** @internal */\nexport class GeometryRecord {\n    /**\n     * Create a new record.\n     */\n    constructor(bounds, tileGrid) {\n        this._bounds = bounds;\n        this._tileGrid = tileGrid;\n    }\n    /**\n     * Get the bounds.\n     * @return the bounds.\n     */\n    getBounds() {\n        return this._bounds;\n    }\n    /**\n     * Get the tile grid.\n     * @return the tile grid.\n     */\n    getTileGrid() {\n        return this._tileGrid;\n    }\n    /**\n     * Read a record.\n     * @param data the record data.\n     * @return the record.\n     */\n    static readFromBuffer(data) {\n        /* Get the record fields */\n        let minX = LittleEndian.readBufferDouble(data, 0);\n        let maxX = LittleEndian.readBufferDouble(data, 8);\n        let minY = LittleEndian.readBufferDouble(data, 16);\n        let maxY = LittleEndian.readBufferDouble(data, 24);\n        let minZ = LittleEndian.readBufferDouble(data, 32);\n        let maxZ = LittleEndian.readBufferDouble(data, 40);\n        let bounds = new Bounds();\n        bounds.addXYZ(minX, minY, minZ);\n        bounds.addXYZ(maxX, maxY, maxZ);\n        let gridX0 = LittleEndian.readBufferDouble(data, 48);\n        let gridY0 = LittleEndian.readBufferDouble(data, 56);\n        let gridZ0 = LittleEndian.readBufferDouble(data, 64);\n        let gridSX = LittleEndian.readBufferDouble(data, 72);\n        let gridSY = LittleEndian.readBufferDouble(data, 80);\n        let gridSZ = LittleEndian.readBufferDouble(data, 88);\n        let tileGrid = new Grid(new Coordinate(gridX0, gridY0, gridZ0), new Coordinate(gridSX, gridSY, gridSZ));\n        /* Return the record */\n        return new GeometryRecord(bounds, tileGrid);\n    }\n    /**\n     * Read a record.\n     * @param fileAccess the access to the file.\n     * @param offset the file offset to the record.\n     * @param size the file size to the record.\n     * @return the record.\n     */\n    static readNew(offset, size, contentLoader) {\n        /* Request the data? */\n        if (contentLoader.isLoaded() == false) {\n            /* Add the range */\n            contentLoader.requestFilePart(offset, size.toInt());\n            return null;\n        }\n        /* Get the data */\n        let data = contentLoader.getFilePart(offset, size.toInt());\n        /* Parse the record */\n        return GeometryRecord.readFromBuffer(data);\n    }\n    /**\n     * Write the record.\n     * @param out the output stream.\n     */\n    write(output) {\n        LittleEndian.writeStreamDouble(output, this._bounds.min.x);\n        LittleEndian.writeStreamDouble(output, this._bounds.max.x);\n        LittleEndian.writeStreamDouble(output, this._bounds.min.y);\n        LittleEndian.writeStreamDouble(output, this._bounds.max.y);\n        LittleEndian.writeStreamDouble(output, this._bounds.min.z);\n        LittleEndian.writeStreamDouble(output, this._bounds.max.z);\n        LittleEndian.writeStreamDouble(output, this._tileGrid.p0.x);\n        LittleEndian.writeStreamDouble(output, this._tileGrid.p0.y);\n        LittleEndian.writeStreamDouble(output, this._tileGrid.p0.z);\n        LittleEndian.writeStreamDouble(output, this._tileGrid.size.x);\n        LittleEndian.writeStreamDouble(output, this._tileGrid.size.y);\n        LittleEndian.writeStreamDouble(output, this._tileGrid.size.z);\n    }\n}\n//# sourceMappingURL=GeometryRecord.js.map",
      "start": 1693508127342,
      "end": 1693508127390,
      "sourcemaps": null
    }
  ]
}
