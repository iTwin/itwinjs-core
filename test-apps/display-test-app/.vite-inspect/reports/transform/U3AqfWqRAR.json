{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/geometry/lib/esm/polyface/FacetFaceData.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Polyface\n */\nimport { Point2d, Vector2d } from \"../geometry3d/Point2dVector2d\";\nimport { Point3d } from \"../geometry3d/Point3dVector3d\";\nimport { Range2d } from \"../geometry3d/Range\";\nimport { IndexedPolyfaceVisitor } from \"./IndexedPolyfaceVisitor\";\n/**\n * Data for a face in a polyface containing facets.\n * This is built up cooperatively by the PolyfaceBuilder and its\n * callers, and stored as a FaceData array in PolyfaceData.\n * @public\n */\nexport class FacetFaceData {\n    /** (property accessor) Return a reference to the distance-scaled parameter range. */\n    get paramDistanceRange() { return this._paramDistanceRange; }\n    /** (property accessor) Return a reference to the parameter range. */\n    get paramRange() { return this._paramRange; }\n    constructor(distanceRange, paramRange) {\n        this._paramDistanceRange = distanceRange;\n        this._paramRange = paramRange;\n    }\n    /** Create a FacetFaceData with null ranges. */\n    static createNull() {\n        return new FacetFaceData(Range2d.createNull(), Range2d.createNull());\n    }\n    /** Create a deep copy of this FacetFaceData object. */\n    clone(result) {\n        if (result) {\n            this._paramDistanceRange.clone(result._paramDistanceRange);\n            this._paramRange.clone(result._paramRange);\n            return result;\n        }\n        return new FacetFaceData(this._paramDistanceRange.clone(), this._paramRange.clone());\n    }\n    /** Restore this FacetFaceData to its null constructor state. */\n    setNull() {\n        this._paramDistanceRange.setNull();\n        this._paramRange.setNull();\n    }\n    /** Return distance-based parameter from stored parameter value. */\n    convertParamXYToDistance(x, y, result) {\n        result = result ? result : Point2d.create();\n        const paramDelta = this._paramRange.high.minus(this._paramRange.low);\n        result.x = (0 === paramDelta.x) ? x : (this._paramDistanceRange.low.x + (x - this._paramRange.low.x)\n            * (this._paramDistanceRange.high.x - this._paramDistanceRange.low.x) / paramDelta.x);\n        result.y = (0.0 === paramDelta.y) ? y : (this.paramDistanceRange.low.y + (y - this._paramRange.low.y)\n            * (this._paramDistanceRange.high.y - this._paramDistanceRange.low.y) / paramDelta.y);\n        return result;\n    }\n    /** Return normalized (0-1) parameter from stored parameter value. */\n    convertParamXYToNormalized(x, y, result) {\n        result = result ? result : Point2d.create();\n        const paramDelta = this._paramRange.high.minus(this._paramRange.low);\n        result.x = (0.0 === paramDelta.x) ? x : ((x - this._paramRange.low.x) / paramDelta.x);\n        result.y = (0.0 === paramDelta.y) ? y : ((y - this._paramRange.low.y) / paramDelta.y);\n        return result;\n    }\n    /** Return distance-based parameter from stored parameter value. */\n    convertParamToDistance(param, result) {\n        return this.convertParamXYToDistance(param.x, param.y, result);\n    }\n    /** Return normalized (0-1) parameter from stored parameter value. */\n    convertParamToNormalized(param, result) {\n        return this.convertParamXYToNormalized(param.x, param.y, result);\n    }\n    /** Scale distance parameters. */\n    scaleDistances(distanceScale) {\n        this._paramDistanceRange.low.x *= distanceScale;\n        this._paramDistanceRange.low.y *= distanceScale;\n        this._paramDistanceRange.high.x *= distanceScale;\n        this._paramDistanceRange.high.y *= distanceScale;\n    }\n    /**\n     * Sets the param and paramDistance range of this FacetFaceData based on the newly terminated facets that make it up.\n     * Takes the polyface itself, the first and last indexes of the facets to be included in the face.\n     * Returns true on success, false otherwise.\n     */\n    setParamDistanceRangeFromNewFaceData(polyface, facetStart, facetEnd) {\n        const dSTotal = Point2d.create();\n        const dSSquaredTotal = Point2d.create();\n        this.setNull();\n        let aveTotal = 0;\n        const visitor = IndexedPolyfaceVisitor.create(polyface, 0);\n        if (!visitor.moveToReadIndex(facetStart) || facetEnd <= facetStart)\n            return false;\n        do {\n            const numPointsInFacet = visitor.numEdgesThisFacet;\n            const visitorPoints = visitor.point;\n            const trianglePointIndexes = [];\n            const visitorParams = visitor.param;\n            const triangleParamIndexes = [];\n            if (!visitorParams)\n                return false;\n            visitorParams.extendRange(this._paramRange);\n            const dUV0 = Vector2d.create();\n            const dUV1 = Vector2d.create();\n            for (let k = 0; k < numPointsInFacet; k++) {\n                trianglePointIndexes[2] = k;\n                triangleParamIndexes[2] = k;\n                if (k > 1) {\n                    visitorParams.vectorIndexIndex(triangleParamIndexes[1], triangleParamIndexes[0], dUV0);\n                    visitorParams.vectorIndexIndex(triangleParamIndexes[1], triangleParamIndexes[2], dUV1);\n                    const delta0 = visitorPoints.getPoint3dAtUncheckedPointIndex(trianglePointIndexes[0]).minus(visitorPoints.getPoint3dAtUncheckedPointIndex(trianglePointIndexes[1]));\n                    const delta1 = visitorPoints.getPoint3dAtUncheckedPointIndex(trianglePointIndexes[1]).minus(visitorPoints.getPoint3dAtUncheckedPointIndex(trianglePointIndexes[2]));\n                    const uvCross = Math.abs(dUV0.x * dUV1.y - dUV1.x * dUV0.y);\n                    if (uvCross) {\n                        const dwDu = Point3d.createFrom(delta0);\n                        dwDu.scaleInPlace(dUV1.y);\n                        dwDu.addScaledInPlace(delta1, -dUV0.y);\n                        const dwDv = Point3d.createFrom(delta1);\n                        dwDv.scaleInPlace(dUV0.x);\n                        dwDv.addScaledInPlace(delta0, -dUV1.x);\n                        const dS = Point2d.create(dwDu.magnitude() / uvCross, dwDv.magnitude() / uvCross);\n                        dSTotal.x += dS.x;\n                        dSTotal.y += dS.y;\n                        dSSquaredTotal.x += dS.x * dS.x;\n                        dSSquaredTotal.y += dS.y * dS.y;\n                        aveTotal++;\n                    }\n                }\n                triangleParamIndexes[0] = triangleParamIndexes[1];\n                triangleParamIndexes[1] = triangleParamIndexes[2];\n                trianglePointIndexes[0] = trianglePointIndexes[1];\n                trianglePointIndexes[1] = trianglePointIndexes[2];\n            }\n        } while (visitor.moveToNextFacet() && visitor.currentReadIndex() < facetEnd);\n        if (aveTotal !== 0) {\n            const dS = Point2d.create(dSTotal.x / aveTotal, dSTotal.y / aveTotal);\n            const standardDeviation = Point2d.create(Math.sqrt(Math.abs((dSSquaredTotal.x / aveTotal) - dS.x * dS.x)), Math.sqrt(Math.abs((dSSquaredTotal.y / aveTotal) - dS.y * dS.y)));\n            // TR# 268980 - Add standard deviation to match QV....\n            this._paramDistanceRange.low.set(0, 0);\n            this._paramDistanceRange.high.set((dS.x + standardDeviation.x) * (this._paramRange.high.x - this._paramRange.low.x), (dS.y + standardDeviation.y) * (this._paramRange.high.y - this._paramRange.low.y));\n        }\n        return true;\n    }\n}\n//# sourceMappingURL=FacetFaceData.js.map",
      "start": 1693508123896,
      "end": 1693508124062,
      "sourcemaps": null
    }
  ]
}
