{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/SaveImageTool.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { ProcessDetector } from \"@itwin/core-bentley\";\r\nimport { Point2d } from \"@itwin/core-geometry\";\r\nimport { imageBufferToPngDataUrl, IModelApp, openImageDataUrlInNewWindow, Tool } from \"@itwin/core-frontend\";\r\nimport { parseArgs } from \"@itwin/frontend-devtools\";\r\n\r\ninterface SaveImageOptions {\r\n  copyToClipboard?: boolean;\r\n  width?: number;\r\n  height?: number;\r\n}\r\n\r\nexport class SaveImageTool extends Tool {\r\n  public static override toolId = \"SaveImage\";\r\n  public static override get minArgs() { return 0; }\r\n  public static override get maxArgs() { return 3; }\r\n\r\n  public override async run(opts?: SaveImageOptions): Promise<boolean> {\r\n    const vp = IModelApp.viewManager.selectedView;\r\n    if (!vp)\r\n      return false;\r\n\r\n    const width = opts?.width ?? vp.viewRect.width;\r\n    const height = opts?.height ?? vp.viewRect.height;\r\n    if (width <= 0 || height <= 0) {\r\n      alert(\"Invalid image dimensions\");\r\n      return true;\r\n    }\r\n\r\n    const copy = opts?.copyToClipboard ?? false;\r\n\r\n    await vp.waitForSceneCompletion();\r\n    const buffer = vp.readImageBuffer({ size: new Point2d(width, height) });\r\n    if (!buffer) {\r\n      alert(\"Failed to read image\");\r\n      return true;\r\n    }\r\n\r\n    const url = imageBufferToPngDataUrl(buffer, false);\r\n    if (!url) {\r\n      alert(\"Failed to produce PNG\");\r\n      return true;\r\n    }\r\n\r\n    if (!copy) {\r\n      openImageDataUrlInNewWindow(url, \"Saved View\");\r\n      return true;\r\n    }\r\n\r\n    try {\r\n      const getBlob = async () => {\r\n        const png = await fetch(url);\r\n        return png.blob();\r\n      };\r\n\r\n      // ClipboardItem currently unsupported in Firefox. Chrome expects a resolved promise; safari (and typescript type definitions) an unresolved promise.\r\n      // Tested only in chrome+electron.\r\n      const blob = ProcessDetector.isChromium ? (await getBlob()) as unknown as Promise<string | Blob> : getBlob();\r\n      await navigator.clipboard.write([\r\n        new ClipboardItem({\r\n          \"image/png\": blob,\r\n        }),\r\n      ]);\r\n    } catch (_) {\r\n      alert(\"Failed to copy to clipboard\");\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public override async parseAndRun(...input: string[]): Promise<boolean> {\r\n    const args = parseArgs(input);\r\n    const opts: SaveImageOptions = {\r\n      copyToClipboard: args.getBoolean(\"c\"),\r\n    };\r\n\r\n    const dimension = args.getInteger(\"d\");\r\n    if (undefined !== dimension) {\r\n      opts.width = opts.height = dimension;\r\n    } else {\r\n      opts.width = args.getInteger(\"w\");\r\n      opts.height = args.getInteger(\"h\");\r\n    }\r\n\r\n    return this.run(opts);\r\n  }\r\n}\r\n",
      "start": 1693508121254,
      "end": 1693508121325,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { ProcessDetector } from \"@itwin/core-bentley\";\nimport { Point2d } from \"@itwin/core-geometry\";\nimport { imageBufferToPngDataUrl, IModelApp, openImageDataUrlInNewWindow, Tool } from \"@itwin/core-frontend\";\nimport { parseArgs } from \"@itwin/frontend-devtools\";\nexport class SaveImageTool extends Tool {\n  static get minArgs() {\n    return 0;\n  }\n  static get maxArgs() {\n    return 3;\n  }\n  async run(opts) {\n    const vp = IModelApp.viewManager.selectedView;\n    if (!vp)\n      return false;\n    const width = opts?.width ?? vp.viewRect.width;\n    const height = opts?.height ?? vp.viewRect.height;\n    if (width <= 0 || height <= 0) {\n      alert(\"Invalid image dimensions\");\n      return true;\n    }\n    const copy = opts?.copyToClipboard ?? false;\n    await vp.waitForSceneCompletion();\n    const buffer = vp.readImageBuffer({ size: new Point2d(width, height) });\n    if (!buffer) {\n      alert(\"Failed to read image\");\n      return true;\n    }\n    const url = imageBufferToPngDataUrl(buffer, false);\n    if (!url) {\n      alert(\"Failed to produce PNG\");\n      return true;\n    }\n    if (!copy) {\n      openImageDataUrlInNewWindow(url, \"Saved View\");\n      return true;\n    }\n    try {\n      const getBlob = async () => {\n        const png = await fetch(url);\n        return png.blob();\n      };\n      const blob = ProcessDetector.isChromium ? await getBlob() : getBlob();\n      await navigator.clipboard.write([\n        new ClipboardItem({\n          \"image/png\": blob\n        })\n      ]);\n    } catch (_) {\n      alert(\"Failed to copy to clipboard\");\n    }\n    return true;\n  }\n  async parseAndRun(...input) {\n    const args = parseArgs(input);\n    const opts = {\n      copyToClipboard: args.getBoolean(\"c\")\n    };\n    const dimension = args.getInteger(\"d\");\n    if (void 0 !== dimension) {\n      opts.width = opts.height = dimension;\n    } else {\n      opts.width = args.getInteger(\"w\");\n      opts.height = args.getInteger(\"h\");\n    }\n    return this.run(opts);\n  }\n}\nSaveImageTool.toolId = \"SaveImage\";\n",
      "start": 1693508121325,
      "end": 1693508121653,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/SaveImageTool.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { ProcessDetector } from \"@itwin/core-bentley\";\r\nimport { Point2d } from \"@itwin/core-geometry\";\r\nimport { imageBufferToPngDataUrl, IModelApp, openImageDataUrlInNewWindow, Tool } from \"@itwin/core-frontend\";\r\nimport { parseArgs } from \"@itwin/frontend-devtools\";\r\n\r\ninterface SaveImageOptions {\r\n  copyToClipboard?: boolean;\r\n  width?: number;\r\n  height?: number;\r\n}\r\n\r\nexport class SaveImageTool extends Tool {\r\n  public static override toolId = \"SaveImage\";\r\n  public static override get minArgs() { return 0; }\r\n  public static override get maxArgs() { return 3; }\r\n\r\n  public override async run(opts?: SaveImageOptions): Promise<boolean> {\r\n    const vp = IModelApp.viewManager.selectedView;\r\n    if (!vp)\r\n      return false;\r\n\r\n    const width = opts?.width ?? vp.viewRect.width;\r\n    const height = opts?.height ?? vp.viewRect.height;\r\n    if (width <= 0 || height <= 0) {\r\n      alert(\"Invalid image dimensions\");\r\n      return true;\r\n    }\r\n\r\n    const copy = opts?.copyToClipboard ?? false;\r\n\r\n    await vp.waitForSceneCompletion();\r\n    const buffer = vp.readImageBuffer({ size: new Point2d(width, height) });\r\n    if (!buffer) {\r\n      alert(\"Failed to read image\");\r\n      return true;\r\n    }\r\n\r\n    const url = imageBufferToPngDataUrl(buffer, false);\r\n    if (!url) {\r\n      alert(\"Failed to produce PNG\");\r\n      return true;\r\n    }\r\n\r\n    if (!copy) {\r\n      openImageDataUrlInNewWindow(url, \"Saved View\");\r\n      return true;\r\n    }\r\n\r\n    try {\r\n      const getBlob = async () => {\r\n        const png = await fetch(url);\r\n        return png.blob();\r\n      };\r\n\r\n      // ClipboardItem currently unsupported in Firefox. Chrome expects a resolved promise; safari (and typescript type definitions) an unresolved promise.\r\n      // Tested only in chrome+electron.\r\n      const blob = ProcessDetector.isChromium ? (await getBlob()) as unknown as Promise<string | Blob> : getBlob();\r\n      await navigator.clipboard.write([\r\n        new ClipboardItem({\r\n          \"image/png\": blob,\r\n        }),\r\n      ]);\r\n    } catch (_) {\r\n      alert(\"Failed to copy to clipboard\");\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public override async parseAndRun(...input: string[]): Promise<boolean> {\r\n    const args = parseArgs(input);\r\n    const opts: SaveImageOptions = {\r\n      copyToClipboard: args.getBoolean(\"c\"),\r\n    };\r\n\r\n    const dimension = args.getInteger(\"d\");\r\n    if (undefined !== dimension) {\r\n      opts.width = opts.height = dimension;\r\n    } else {\r\n      opts.width = args.getInteger(\"w\");\r\n      opts.height = args.getInteger(\"h\");\r\n    }\r\n\r\n    return this.run(opts);\r\n  }\r\n}\r\n"
        ],
        "mappings": ";AAKA,SAAS,uBAAuB;AAChC,SAAS,eAAe;AACxB,SAAS,yBAAyB,WAAW,6BAA6B,YAAY;AACtF,SAAS,iBAAiB;AAQnB,aAAM,sBAAsB,KAAK;AAAA,EAEtC,WAA2B,UAAU;AAAE,WAAO;AAAA,EAAG;AAAA,EACjD,WAA2B,UAAU;AAAE,WAAO;AAAA,EAAG;AAAA,EAEjD,MAAsB,IAAI,MAA2C;AACnE,UAAM,KAAK,UAAU,YAAY;AACjC,QAAI,CAAC;AACH,aAAO;AAET,UAAM,QAAQ,MAAM,SAAS,GAAG,SAAS;AACzC,UAAM,SAAS,MAAM,UAAU,GAAG,SAAS;AAC3C,QAAI,SAAS,KAAK,UAAU,GAAG;AAC7B,YAAM,0BAA0B;AAChC,aAAO;AAAA,IACT;AAEA,UAAM,OAAO,MAAM,mBAAmB;AAEtC,UAAM,GAAG,uBAAuB;AAChC,UAAM,SAAS,GAAG,gBAAgB,EAAE,MAAM,IAAI,QAAQ,OAAO,MAAM,EAAE,CAAC;AACtE,QAAI,CAAC,QAAQ;AACX,YAAM,sBAAsB;AAC5B,aAAO;AAAA,IACT;AAEA,UAAM,MAAM,wBAAwB,QAAQ,KAAK;AACjD,QAAI,CAAC,KAAK;AACR,YAAM,uBAAuB;AAC7B,aAAO;AAAA,IACT;AAEA,QAAI,CAAC,MAAM;AACT,kCAA4B,KAAK,YAAY;AAC7C,aAAO;AAAA,IACT;AAEA,QAAI;AACF,YAAM,UAAU,YAAY;AAC1B,cAAM,MAAM,MAAM,MAAM,GAAG;AAC3B,eAAO,IAAI,KAAK;AAAA,MAClB;AAIA,YAAM,OAAO,gBAAgB,aAAc,MAAM,QAAQ,IAA0C,QAAQ;AAC3G,YAAM,UAAU,UAAU,MAAM;AAAA,QAC9B,IAAI,cAAc;AAAA,UAChB,aAAa;AAAA,QACf,CAAC;AAAA,MACH,CAAC;AAAA,IACH,SAAS,GAAG;AACV,YAAM,6BAA6B;AAAA,IACrC;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAsB,eAAe,OAAmC;AACtE,UAAM,OAAO,UAAU,KAAK;AAC5B,UAAM,OAAyB;AAAA,MAC7B,iBAAiB,KAAK,WAAW,GAAG;AAAA,IACtC;AAEA,UAAM,YAAY,KAAK,WAAW,GAAG;AACrC,QAAI,WAAc,WAAW;AAC3B,WAAK,QAAQ,KAAK,SAAS;AAAA,IAC7B,OAAO;AACL,WAAK,QAAQ,KAAK,WAAW,GAAG;AAChC,WAAK,SAAS,KAAK,WAAW,GAAG;AAAA,IACnC;AAEA,WAAO,KAAK,IAAI,IAAI;AAAA,EACtB;AACF;AA1Ea,cACY,SAAS;",
        "names": []
      }
    }
  ]
}
