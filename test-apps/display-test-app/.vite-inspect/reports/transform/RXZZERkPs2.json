{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/ModelClipGroup.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Views\n */\nimport { ClipVector } from \"@itwin/core-geometry\";\n/** Describes how to clip a group of models in the context of a [ViewDefinition3d]($backend) by applying a single [ClipVector]($core-geometry] to each model in the group.\n * @see [[ModelClipGroups]] to define multiple groups of models with different clip vectors.\n * @public\n */\nexport class ModelClipGroup {\n    constructor(models, clip) {\n        this.models = models;\n        this.clip = clip;\n    }\n    /** Create a new ModelClipGroup. The input arguments are captured as references and should not be subsequently modified. */\n    static create(clip, models) {\n        return new ModelClipGroup(models, clip);\n    }\n    /** Create a deep copy of this group. */\n    clone() {\n        const models = this.models ? [...this.models] : undefined;\n        return new ModelClipGroup(models, this.clip?.clone());\n    }\n    /** Returns whether the specified model Id belongs to this group. */\n    includesModel(modelId) {\n        return undefined === this.models || this.models.includes(modelId);\n    }\n    /** Create from JSON representation. */\n    static fromJSON(props) {\n        const models = props.models ? [...props.models] : undefined;\n        const clip = props.clip ? ClipVector.fromJSON(props.clip) : undefined;\n        return new ModelClipGroup(models, undefined !== clip && clip.isValid ? clip : undefined);\n    }\n    /** Convert to JSON representation. */\n    toJSON() {\n        const props = {};\n        if (this.models)\n            props.models = [...this.models];\n        if (this.clip)\n            props.clip = this.clip.toJSON();\n        return props;\n    }\n}\n/** Describes how to clip groups of models in the context of a [ViewDefinition3d]($backend) or [ViewState3d]($frontend).\n * Each group will be clipped by the [ClipVector]($core-geometry) associated with the group to which it belongs.\n * A model belongs to the first group in the list for which `ModelClipGroup.includesModel()` returns `true`.\n * A catch-all group can be defined by a ModelClipGroup with an `undefined` array of model Ids; any model whose Id does not appear in any group's list would belong to this group. If a catch-all group exists, it should appear last in the list.\n * A group of models can be exempted from clipping by a ModelClipGroup with an `undefined` ClipVector.\n * @note A ModelClipGroups obtained from a [[ViewDetails3d]] should **not** be modified directly. Clone it instead and modify the clone.\n * @see [[ViewDetails3d.modelClipGroups]] to define the clip groups for a [ViewDefinition3d]($backend) or [ViewState3d]($frontend).\n * @public\n */\nexport class ModelClipGroups {\n    /** Create a new ModelClipGroups.\n     * @note The ModelClipGroup takes ownership of the input array, which should not be subsequently modified.\n     */\n    constructor(groups = []) {\n        this.groups = groups;\n    }\n    /** Create a deep copy of this ModelClipGroups. */\n    clone() {\n        const groups = this.groups.map((group) => group.clone());\n        return new ModelClipGroups(groups);\n    }\n    /** Find the first group to which the specified model Id belongs, if any. */\n    findGroup(modelId) {\n        return this.groups.find((group) => group.includesModel(modelId));\n    }\n    /** Returns the array index of the group to which the specified model belongs, or -1 if the model belongs to no group. */\n    findGroupIndex(modelId) {\n        return this.groups.findIndex((group) => group.includesModel(modelId));\n    }\n    /** Find the clip that should be applied to the specified model.\n     * @note This may return `undefined` if the model belongs to no group, **or** it belongs to a group that should not be clipped.\n     */\n    getClipForModel(modelId) {\n        return this.findGroup(modelId)?.clip;\n    }\n    /** Create from JSON representation. */\n    static fromJSON(props) {\n        const groups = props?.map((prop) => ModelClipGroup.fromJSON(prop));\n        return new ModelClipGroups(groups);\n    }\n    /** Convert to JSON representation. */\n    toJSON() {\n        return this.groups.map((group) => group.toJSON());\n    }\n}\n//# sourceMappingURL=ModelClipGroup.js.map",
      "start": 1693508120914,
      "end": 1693508120960,
      "sourcemaps": null
    }
  ]
}
