{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/NoRenderApp.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module IModelApp\n */\nimport { EmptyLocalization } from \"@itwin/core-common\";\nimport { IModelApp } from \"./IModelApp\";\nimport { RenderSystem } from \"./render/RenderSystem\";\nimport { RenderTarget } from \"./render/RenderTarget\";\nimport { ViewRect } from \"./common/ViewRect\";\n/**\n * A RenderTarget for applications that must run in environments where WebGL is not present.\n * This is typically used in tests.\n * @internal\n */\nexport class NullTarget extends RenderTarget {\n    get analysisFraction() { return 0; }\n    set analysisFraction(_fraction) { }\n    get renderSystem() { return undefined; }\n    get viewRect() { return new ViewRect(); }\n    get wantInvertBlackBackground() { return false; }\n    get animationBranches() { return undefined; }\n    set animationBranches(_branches) { }\n    onDestroy() { }\n    reset() { }\n    changeScene() { }\n    changeDynamics() { }\n    changeDecorations() { }\n    changeRenderPlan() { }\n    drawFrame(_sceneMilSecElapsed) { }\n    overrideFeatureSymbology() { }\n    setHiliteSet() { }\n    setFlashed() { }\n    setViewRect() { }\n    onResized() { }\n    dispose() { }\n    updateViewRect() { return false; }\n    readPixels() { }\n    get screenSpaceEffects() { return []; }\n    set screenSpaceEffects(_effects) { }\n}\n/**\n * A RenderSystem for applications that must run in environments where WebGL is not present.\n * This is typically used in tests.\n * @internal\n */\nexport class NullRenderSystem extends RenderSystem {\n    get isValid() { return false; }\n    doIdleWork() { return false; }\n    createTarget() { return new NullTarget(); }\n    createOffscreenTarget() { return new NullTarget(); }\n    createGraphic() { return undefined; }\n    createGraphicList() { return undefined; }\n    createGraphicBranch() { return undefined; }\n    createBatch() { return undefined; }\n    dispose() { }\n    constructor() { super(); }\n    createRenderGraphic() { return undefined; }\n}\n/** A utility class intended for applications (primarily test-runners) that run in environments that lack support for WebGL.\n * It installs a [[RenderSystem]] that produces no graphics.\n * Use [[NoRenderApp.startup]] instead of [[IModelApp.startup]] to initialize your application frontend.\n * You may then use the [[IModelApp]] API as normal.\n * @public\n */\nexport class NoRenderApp {\n    /** Initializes [[IModelApp]] with a [[RenderSystem]] that produces no graphics.\n     * Use this in place of [[IModelApp.startup]], then proceed to use [[IModelApp]]'s API as normal.\n     */\n    static async startup(opts) {\n        opts = opts ? opts : {};\n        opts.renderSys = new NullRenderSystem();\n        opts.noRender = true;\n        opts.localization = opts.localization ?? new EmptyLocalization();\n        await IModelApp.startup(opts);\n    }\n}\n//# sourceMappingURL=NoRenderApp.js.map",
      "start": 1693508119433,
      "end": 1693508119588,
      "sourcemaps": null
    }
  ]
}
