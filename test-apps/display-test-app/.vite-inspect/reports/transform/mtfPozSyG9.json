{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/BingLocation.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tiles\n */\nimport { Cartographic } from \"@itwin/core-common\";\nimport { request } from \"./request/Request\";\nimport { IModelApp } from \"./IModelApp\";\n/** Provides an interface to the [Bing Maps location services](https://docs.microsoft.com/en-us/bingmaps/rest-services/locations/).\n * @public\n * @extensions\n */\nexport class BingLocationProvider {\n    constructor() {\n        let bingKey = \"\";\n        if (IModelApp.mapLayerFormatRegistry.configOptions.BingMaps) {\n            bingKey = IModelApp.mapLayerFormatRegistry.configOptions.BingMaps.value;\n        }\n        this._locationRequestTemplate = `https://dev.virtualearth.net/REST/v1/Locations?query={query}&key=${bingKey}`;\n    }\n    /** Return the location of a query (or undefined if not found). The strings \"Space Needle\" (a landmark) and \"1 Microsoft Way Redmond WA\" (an address) are examples of query strings with location information.\n     * These strings can be specified as a structured URL parameter or as a query parameter value.  See [Bing Location Services documentation](https://docs.microsoft.com/en-us/bingmaps/rest-services/locations/find-a-location-by-query) for additional\n     * information on queries.\n     * @public\n     */\n    async getLocation(query) {\n        const requestUrl = this._locationRequestTemplate.replace(\"{query}\", query);\n        try {\n            const locationResponse = await request(requestUrl, \"json\");\n            const point = locationResponse.resourceSets[0].resources[0].point;\n            const bbox = locationResponse.resourceSets[0].resources[0].bbox;\n            const southLatitude = bbox[0];\n            const westLongitude = bbox[1];\n            const northLatitude = bbox[2];\n            const eastLongitude = bbox[3];\n            return {\n                center: Cartographic.fromDegrees({ longitude: point.coordinates[1], latitude: point.coordinates[0] }),\n                area: {\n                    southwest: Cartographic.fromDegrees({ longitude: westLongitude, latitude: southLatitude }),\n                    northeast: Cartographic.fromDegrees({ longitude: eastLongitude, latitude: northLatitude }),\n                },\n            };\n        }\n        catch (error) {\n            return undefined;\n        }\n    }\n}\n//# sourceMappingURL=BingLocation.js.map",
      "start": 1693508118460,
      "end": 1693508119068,
      "sourcemaps": null
    }
  ]
}
