{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/rpc/core/RpcControl.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module RpcInterface\n */\nvar __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\nimport { Base64 } from \"js-base64\";\nimport { RpcInterface } from \"../../RpcInterface\";\nimport { RpcManager } from \"../../RpcManager\";\nimport { RpcConfiguration } from \"./RpcConfiguration\";\nimport { RpcOperation } from \"./RpcOperation\";\nimport { RpcRegistry } from \"./RpcRegistry\";\n/* eslint-disable deprecation/deprecation */\n/** An RPC operation control response.\n * @public\n */\nexport class RpcControlResponse {\n    constructor() {\n        this.message = \"RpcControlResponse\";\n    }\n}\n/** A pending RPC operation response.\n * @public\n */\nexport class RpcPendingResponse extends RpcControlResponse {\n    /** Constructs a pending response. */\n    constructor(message = \"\") {\n        super();\n        this.message = message;\n    }\n}\n/** A RPC operation response.\n * @public\n */\nexport class RpcNotFoundResponse extends RpcControlResponse {\n    constructor() {\n        super(...arguments);\n        this.message = \"Not found\";\n    }\n}\n/** Manages requests and responses for an RPC configuration.\n * @internal\n */\nclass RpcControlChannel {\n    /** @internal */\n    static ensureInitialized() {\n        this.channels.forEach((channel) => channel.initialize());\n    }\n    constructor(configuration) {\n        var _a;\n        this._initialized = false;\n        this._clientActive = false;\n        this._describeEndpoints = undefined;\n        this._channelInterface = (_a = class extends RpcInterface {\n                async describeEndpoints() { return this.forward(arguments); }\n            },\n            __setFunctionName(_a, \"_channelInterface\"),\n            _a.interfaceVersion = \"CONTROL\",\n            _a.interfaceName = \"\",\n            _a);\n        this._channelImpl = class extends RpcInterface {\n            async describeEndpoints() {\n                const endpoints = [];\n                this.configuration.interfaces().forEach((definition) => {\n                    if (!RpcRegistry.instance.isRpcInterfaceInitialized(definition))\n                        return;\n                    const description = { interfaceName: definition.interfaceName, interfaceVersion: definition.interfaceVersion, operationNames: [], compatible: true };\n                    RpcOperation.forEach(definition, (operation) => description.operationNames.push(operation.operationName));\n                    endpoints.push(description);\n                });\n                return endpoints;\n            }\n        };\n        this._configuration = configuration;\n        RpcControlChannel.channels.push(this);\n    }\n    /** @internal */\n    async describeEndpoints() {\n        this.activateClient();\n        if (!this._channelInterface.interfaceName) {\n            return [];\n        }\n        return this._describeEndpoints();\n    }\n    /** @internal */\n    static obtain(configuration) {\n        if (RpcControlChannel._obtainLock)\n            return undefined;\n        ++RpcControlChannel._obtainLock;\n        const channel = new RpcControlChannel(configuration);\n        --RpcControlChannel._obtainLock;\n        return channel;\n    }\n    computeId() {\n        const interfaces = [];\n        this._configuration.interfaces().forEach((definition) => interfaces.push(`${definition.interfaceName}@${definition.interfaceVersion}`));\n        const id = interfaces.sort().join(\",\");\n        return Base64.encode(id);\n    }\n    activateClient() {\n        if (this._clientActive)\n            return;\n        this.initialize();\n        const token = { key: \"none\", iTwinId: \"none\", iModelId: \"none\", changeset: { id: \"none\" } };\n        RpcOperation.forEach(this._channelInterface, (operation) => operation.policy.token = (_request) => RpcOperation.fallbackToken ?? token);\n        const client = RpcManager.getClientForInterface(this._channelInterface);\n        this._describeEndpoints = async () => client.describeEndpoints();\n        this._clientActive = true;\n    }\n    /** @internal */\n    initialize() {\n        if (this._initialized) {\n            return;\n        }\n        const id = this.computeId();\n        Object.defineProperty(this._channelInterface, \"interfaceName\", { value: id });\n        Object.defineProperty(this._channelImpl, \"interfaceName\", { value: id });\n        RpcConfiguration.assign(this._channelInterface, () => this._configuration.constructor);\n        RpcManager.registerImpl(this._channelInterface, this._channelImpl);\n        RpcManager.initializeInterface(this._channelInterface);\n        this._initialized = true;\n    }\n    /** @internal */\n    handleUnknownOperation(invocation, _error) {\n        this.initialize();\n        const op = invocation.request.operation;\n        if (op.interfaceVersion === \"CONTROL\" && op.operationName === \"describeEndpoints\") {\n            if (this._channelInterface.interfaceName) {\n                op.interfaceDefinition = this._channelInterface.interfaceName;\n            }\n            return true;\n        }\n        return false;\n    }\n}\n/** @internal */\nRpcControlChannel.channels = [];\nRpcControlChannel._obtainLock = 0;\nexport { RpcControlChannel };\n//# sourceMappingURL=RpcControl.js.map",
      "start": 1693508121008,
      "end": 1693508121064,
      "sourcemaps": null
    }
  ]
}
