{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend-devtools/lib/esm/widgets/ToolSettingsTracker.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Widgets\n */\nimport { BeDuration } from \"@itwin/core-bentley\";\nimport { IModelApp, ScreenViewport, ToolSettings } from \"@itwin/core-frontend\";\nimport { createCheckBox } from \"../ui/CheckBox\";\nimport { createNestedMenu } from \"../ui/NestedMenu\";\nimport { createLabeledNumericInput, createNumericInput } from \"../ui/NumericInput\";\n/** Allows the global settings controlling the behavior of viewing tools to be customized.\n * @alpha\n */\nclass ToolSettingsTracker {\n    constructor(parent, _vp) {\n        const settingsDiv = document.createElement(\"div\");\n        settingsDiv.style.display = \"block\";\n        settingsDiv.style.textAlign = \"left\";\n        createNestedMenu({\n            label: \"Tool Settings\",\n            parent,\n            expand: ToolSettingsTracker._expandToolSettings,\n            handler: (expanded) => ToolSettingsTracker._expandToolSettings = expanded,\n            body: settingsDiv,\n        });\n        let div = IModelApp.makeHTMLElement(\"div\", { parent: settingsDiv });\n        createCheckBox({\n            parent: div,\n            name: \"Preserve World Up When Rotating\",\n            id: \"ts_preserveWorldUp\",\n            isChecked: ToolSettings.preserveWorldUp,\n            handler: (_cb) => {\n                ToolSettings.preserveWorldUp = !ToolSettings.preserveWorldUp;\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                IModelApp.toolAdmin.exitViewTool();\n            },\n        });\n        div.style.textAlign = \"left\";\n        // We use a static so the expand/collapse state persists after closing and reopening the drop-down.\n        settingsDiv.style.display = ToolSettingsTracker._expandToolSettings ? \"block\" : \"none\";\n        div = IModelApp.makeHTMLElement(\"div\", { parent: settingsDiv });\n        let label = IModelApp.makeHTMLElement(\"label\", { innerText: \"Animation Duration (ms): \", parent: div });\n        label.style.display = \"inline\";\n        label.htmlFor = \"ts_animationTime\";\n        createNumericInput({\n            parent: div,\n            id: \"ts_animationTime\",\n            display: \"inline\",\n            min: 0,\n            step: 1,\n            value: ScreenViewport.animation.time.normal.milliseconds,\n            handler: (value, _input) => {\n                ScreenViewport.animation.time.normal = BeDuration.fromMilliseconds(value);\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                IModelApp.toolAdmin.exitViewTool();\n            },\n        });\n        div.style.display = \"block\";\n        div.style.textAlign = \"left\";\n        div = IModelApp.makeHTMLElement(\"div\", { parent: settingsDiv });\n        label = IModelApp.makeHTMLElement(\"label\", { innerText: \"Pick Radius (inches): \", parent: div });\n        label.style.display = \"inline\";\n        label.htmlFor = \"ts_viewToolPickRadiusInches\";\n        label.innerText = \"Pick Radius (inches): \";\n        createNumericInput({\n            parent: div,\n            id: \"ts_viewToolPickRadiusInches\",\n            display: \"inline\",\n            min: 0,\n            step: 0.01,\n            value: ToolSettings.viewToolPickRadiusInches,\n            handler: (value, _input) => {\n                ToolSettings.viewToolPickRadiusInches = value;\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                IModelApp.toolAdmin.exitViewTool();\n            },\n            parseAsFloat: true,\n        }, true);\n        div.style.display = \"block\";\n        div.style.textAlign = \"left\";\n        div = IModelApp.makeHTMLElement(\"div\", { parent: settingsDiv });\n        createCheckBox({\n            parent: div,\n            name: \"Walk Enforce Z Up\",\n            id: \"ts_walkEnforceZUp\",\n            isChecked: ToolSettings.walkEnforceZUp,\n            handler: (_cb) => {\n                ToolSettings.walkEnforceZUp = !ToolSettings.walkEnforceZUp;\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                IModelApp.toolAdmin.exitViewTool();\n            },\n        });\n        div.style.display = \"block\";\n        div.style.textAlign = \"left\";\n        div = IModelApp.makeHTMLElement(\"div\", { parent: settingsDiv });\n        label = IModelApp.makeHTMLElement(\"label\", { innerText: \"Walk Camera Angle (degrees): \", parent: div });\n        label.style.display = \"inline\";\n        label.htmlFor = \"ts_walkCameraAngle\";\n        createNumericInput({\n            parent: div,\n            id: \"ts_walkCameraAngle\",\n            display: \"inline\",\n            min: 0,\n            step: 0.1,\n            value: ToolSettings.walkCameraAngle.degrees,\n            handler: (value, _input) => {\n                ToolSettings.walkCameraAngle.setDegrees(value);\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                IModelApp.toolAdmin.exitViewTool();\n            },\n            parseAsFloat: true,\n        }, true);\n        div.style.display = \"block\";\n        div.style.textAlign = \"left\";\n        div = IModelApp.makeHTMLElement(\"div\", { parent: settingsDiv });\n        label = IModelApp.makeHTMLElement(\"label\", { innerText: \"Walk Velocity (meters per second): \", parent: div });\n        label.style.display = \"inline\";\n        label.htmlFor = \"ts_walkVelocity\";\n        createNumericInput({\n            parent: div,\n            id: \"ts_walkVelocity\",\n            display: \"inline\",\n            min: 0,\n            step: 0.1,\n            value: ToolSettings.walkVelocity,\n            handler: (value, _input) => {\n                ToolSettings.walkVelocity = value;\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                IModelApp.toolAdmin.exitViewTool();\n            },\n            parseAsFloat: true,\n        }, true);\n        div.style.display = \"block\";\n        div.style.textAlign = \"left\";\n        div = IModelApp.makeHTMLElement(\"div\", { parent: settingsDiv });\n        label = IModelApp.makeHTMLElement(\"label\", { innerText: \"Wheel Zoom Bump Distance (meters): \", parent: div });\n        label.style.display = \"inline\";\n        label.htmlFor = \"ts_wheelZoomBumpDistance\";\n        createNumericInput({\n            parent: div,\n            id: \"ts_wheelZoomBumpDistance\",\n            display: \"inline\",\n            min: 0,\n            step: 0.025,\n            value: ToolSettings.wheelZoomBumpDistance,\n            handler: (value, _input) => {\n                ToolSettings.wheelZoomBumpDistance = value;\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                IModelApp.toolAdmin.exitViewTool();\n            },\n            parseAsFloat: true,\n        }, true);\n        div.style.display = \"block\";\n        div.style.textAlign = \"left\";\n        div = IModelApp.makeHTMLElement(\"div\", { parent: settingsDiv });\n        label = IModelApp.makeHTMLElement(\"label\", { innerText: \"Wheel Zoom Ratio: \", parent: div });\n        label.style.display = \"inline\";\n        label.htmlFor = \"ts_wheelZoomRatio\";\n        createNumericInput({\n            parent: div,\n            id: \"ts_wheelZoomRatio\",\n            display: \"inline\",\n            min: 1.0,\n            step: 0.025,\n            value: ToolSettings.wheelZoomRatio,\n            handler: async (value, _input) => {\n                ToolSettings.wheelZoomRatio = value;\n                return IModelApp.toolAdmin.exitViewTool();\n            },\n            parseAsFloat: true,\n        }, true);\n        div.style.display = \"block\";\n        div.style.textAlign = \"left\";\n        createLabeledNumericInput({\n            id: \"num_inertiaDamping\",\n            parent: settingsDiv,\n            value: ToolSettings.viewingInertia.damping,\n            handler: async (value, _) => {\n                ToolSettings.viewingInertia.damping = value;\n                return IModelApp.toolAdmin.exitViewTool();\n            },\n            min: 0,\n            max: 1,\n            step: 0.05,\n            parseAsFloat: true,\n            name: \"Inertial damping: \",\n        });\n        createLabeledNumericInput({\n            id: \"num_inertiaDuration\",\n            parent: settingsDiv,\n            value: ToolSettings.viewingInertia.duration.milliseconds / 1000,\n            handler: async (value, _) => {\n                ToolSettings.viewingInertia.duration = BeDuration.fromMilliseconds(value * 1000);\n                return IModelApp.toolAdmin.exitViewTool();\n            },\n            min: 0,\n            max: 10,\n            step: 0.5,\n            parseAsFloat: true,\n            name: \"Inertial duration (seconds): \",\n        });\n    }\n    dispose() { }\n}\nToolSettingsTracker._expandToolSettings = false;\nexport { ToolSettingsTracker };\n//# sourceMappingURL=ToolSettingsTracker.js.map",
      "start": 1693508122852,
      "end": 1693508122932,
      "sourcemaps": null
    }
  ]
}
