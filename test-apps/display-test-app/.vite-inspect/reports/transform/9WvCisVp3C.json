{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/TileContentTool.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { assert, ByteStream, Guid } from \"@itwin/core-bentley\";\r\nimport { PersistentGraphicsRequestProps } from \"@itwin/core-common\";\r\nimport {\r\n  ImdlReader, IModelApp, IModelConnection, IModelTileTree, Tool,\r\n} from \"@itwin/core-frontend\";\r\nimport { parseArgs } from \"@itwin/frontend-devtools\";\r\n\r\nexport class GenerateTileContentTool extends Tool {\r\n  public static override toolId = \"GenerateTileContent\";\r\n  public static override get minArgs() { return 2; }\r\n  public static override get maxArgs() { return 2; }\r\n\r\n  public override async run(args?: { tree: IModelTileTree, contentId: string }) {\r\n    if (!args)\r\n      return false;\r\n\r\n    try {\r\n      const { tree, contentId } = args;\r\n      const bytes = await IModelApp.tileAdmin.generateTileContent({ contentId, iModelTree: tree });\r\n      const stream = ByteStream.fromUint8Array(bytes);\r\n      const { iModel, modelId, is3d, containsTransformNodes } = tree;\r\n      const reader = ImdlReader.create({\r\n        stream, iModel, modelId, is3d, containsTransformNodes,\r\n        system: IModelApp.renderSystem,\r\n        type: tree.batchType,\r\n        loadEdges: false !== tree.edgeOptions,\r\n        options: { tileId: contentId },\r\n      });\r\n\r\n      assert(undefined !== reader);\r\n      await reader.read();\r\n      return true;\r\n    } catch (err) {\r\n      if (err instanceof Error)\r\n        alert(err.toString());\r\n\r\n      return false;\r\n    }\r\n  }\r\n\r\n  public override async parseAndRun(...input: string[]) {\r\n    const iModel = IModelApp.viewManager.selectedView?.iModel;\r\n    if (!iModel)\r\n      return false;\r\n\r\n    const args = parseArgs(input);\r\n    const contentId = args.get(\"c\");\r\n    const modelId = args.get(\"m\");\r\n    if (!contentId || !modelId)\r\n      return false;\r\n\r\n    for (const owner of iModel.tiles) {\r\n      const tree = owner.owner.tileTree;\r\n      if (tree instanceof IModelTileTree && tree.modelId === modelId)\r\n        return this.run({ tree, contentId });\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\nexport class GenerateElementGraphicsTool extends Tool {\r\n  public static override toolId = \"GenerateElementGraphics\";\r\n  public static override get minArgs() { return 1; }\r\n  public static override get maxArgs() { return 2; }\r\n\r\n  public override async run(props?: PersistentGraphicsRequestProps, iModel?: IModelConnection): Promise<boolean> {\r\n    if (!props || !iModel)\r\n      return false;\r\n\r\n    await IModelApp.tileAdmin.requestElementGraphics(iModel, props);\r\n    return true;\r\n  }\r\n\r\n  public override async parseAndRun(...input: string[]) {\r\n    const args = parseArgs(input);\r\n    const elementId = args.get(\"e\");\r\n    if (!elementId)\r\n      return false;\r\n\r\n    return this.run({\r\n      id: Guid.createValue(),\r\n      elementId,\r\n      toleranceLog10: args.getInteger(\"t\") ?? -2,\r\n    }, IModelApp.viewManager.selectedView?.iModel);\r\n  }\r\n}\r\n",
      "start": 1693508121176,
      "end": 1693508121254,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { assert, ByteStream, Guid } from \"@itwin/core-bentley\";\nimport {\n  ImdlReader,\n  IModelApp,\n  IModelTileTree,\n  Tool\n} from \"@itwin/core-frontend\";\nimport { parseArgs } from \"@itwin/frontend-devtools\";\nexport class GenerateTileContentTool extends Tool {\n  static get minArgs() {\n    return 2;\n  }\n  static get maxArgs() {\n    return 2;\n  }\n  async run(args) {\n    if (!args)\n      return false;\n    try {\n      const { tree, contentId } = args;\n      const bytes = await IModelApp.tileAdmin.generateTileContent({ contentId, iModelTree: tree });\n      const stream = ByteStream.fromUint8Array(bytes);\n      const { iModel, modelId, is3d, containsTransformNodes } = tree;\n      const reader = ImdlReader.create({\n        stream,\n        iModel,\n        modelId,\n        is3d,\n        containsTransformNodes,\n        system: IModelApp.renderSystem,\n        type: tree.batchType,\n        loadEdges: false !== tree.edgeOptions,\n        options: { tileId: contentId }\n      });\n      assert(void 0 !== reader);\n      await reader.read();\n      return true;\n    } catch (err) {\n      if (err instanceof Error)\n        alert(err.toString());\n      return false;\n    }\n  }\n  async parseAndRun(...input) {\n    const iModel = IModelApp.viewManager.selectedView?.iModel;\n    if (!iModel)\n      return false;\n    const args = parseArgs(input);\n    const contentId = args.get(\"c\");\n    const modelId = args.get(\"m\");\n    if (!contentId || !modelId)\n      return false;\n    for (const owner of iModel.tiles) {\n      const tree = owner.owner.tileTree;\n      if (tree instanceof IModelTileTree && tree.modelId === modelId)\n        return this.run({ tree, contentId });\n    }\n    return false;\n  }\n}\nGenerateTileContentTool.toolId = \"GenerateTileContent\";\nexport class GenerateElementGraphicsTool extends Tool {\n  static get minArgs() {\n    return 1;\n  }\n  static get maxArgs() {\n    return 2;\n  }\n  async run(props, iModel) {\n    if (!props || !iModel)\n      return false;\n    await IModelApp.tileAdmin.requestElementGraphics(iModel, props);\n    return true;\n  }\n  async parseAndRun(...input) {\n    const args = parseArgs(input);\n    const elementId = args.get(\"e\");\n    if (!elementId)\n      return false;\n    return this.run({\n      id: Guid.createValue(),\n      elementId,\n      toleranceLog10: args.getInteger(\"t\") ?? -2\n    }, IModelApp.viewManager.selectedView?.iModel);\n  }\n}\nGenerateElementGraphicsTool.toolId = \"GenerateElementGraphics\";\n",
      "start": 1693508121254,
      "end": 1693508121398,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/TileContentTool.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { assert, ByteStream, Guid } from \"@itwin/core-bentley\";\r\nimport { PersistentGraphicsRequestProps } from \"@itwin/core-common\";\r\nimport {\r\n  ImdlReader, IModelApp, IModelConnection, IModelTileTree, Tool,\r\n} from \"@itwin/core-frontend\";\r\nimport { parseArgs } from \"@itwin/frontend-devtools\";\r\n\r\nexport class GenerateTileContentTool extends Tool {\r\n  public static override toolId = \"GenerateTileContent\";\r\n  public static override get minArgs() { return 2; }\r\n  public static override get maxArgs() { return 2; }\r\n\r\n  public override async run(args?: { tree: IModelTileTree, contentId: string }) {\r\n    if (!args)\r\n      return false;\r\n\r\n    try {\r\n      const { tree, contentId } = args;\r\n      const bytes = await IModelApp.tileAdmin.generateTileContent({ contentId, iModelTree: tree });\r\n      const stream = ByteStream.fromUint8Array(bytes);\r\n      const { iModel, modelId, is3d, containsTransformNodes } = tree;\r\n      const reader = ImdlReader.create({\r\n        stream, iModel, modelId, is3d, containsTransformNodes,\r\n        system: IModelApp.renderSystem,\r\n        type: tree.batchType,\r\n        loadEdges: false !== tree.edgeOptions,\r\n        options: { tileId: contentId },\r\n      });\r\n\r\n      assert(undefined !== reader);\r\n      await reader.read();\r\n      return true;\r\n    } catch (err) {\r\n      if (err instanceof Error)\r\n        alert(err.toString());\r\n\r\n      return false;\r\n    }\r\n  }\r\n\r\n  public override async parseAndRun(...input: string[]) {\r\n    const iModel = IModelApp.viewManager.selectedView?.iModel;\r\n    if (!iModel)\r\n      return false;\r\n\r\n    const args = parseArgs(input);\r\n    const contentId = args.get(\"c\");\r\n    const modelId = args.get(\"m\");\r\n    if (!contentId || !modelId)\r\n      return false;\r\n\r\n    for (const owner of iModel.tiles) {\r\n      const tree = owner.owner.tileTree;\r\n      if (tree instanceof IModelTileTree && tree.modelId === modelId)\r\n        return this.run({ tree, contentId });\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\nexport class GenerateElementGraphicsTool extends Tool {\r\n  public static override toolId = \"GenerateElementGraphics\";\r\n  public static override get minArgs() { return 1; }\r\n  public static override get maxArgs() { return 2; }\r\n\r\n  public override async run(props?: PersistentGraphicsRequestProps, iModel?: IModelConnection): Promise<boolean> {\r\n    if (!props || !iModel)\r\n      return false;\r\n\r\n    await IModelApp.tileAdmin.requestElementGraphics(iModel, props);\r\n    return true;\r\n  }\r\n\r\n  public override async parseAndRun(...input: string[]) {\r\n    const args = parseArgs(input);\r\n    const elementId = args.get(\"e\");\r\n    if (!elementId)\r\n      return false;\r\n\r\n    return this.run({\r\n      id: Guid.createValue(),\r\n      elementId,\r\n      toleranceLog10: args.getInteger(\"t\") ?? -2,\r\n    }, IModelApp.viewManager.selectedView?.iModel);\r\n  }\r\n}\r\n"
        ],
        "mappings": ";AAKA,SAAS,QAAQ,YAAY,YAAY;AAEzC;AAAA,EACE;AAAA,EAAY;AAAA,EAA6B;AAAA,EAAgB;AAAA,OACpD;AACP,SAAS,iBAAiB;AAEnB,aAAM,gCAAgC,KAAK;AAAA,EAEhD,WAA2B,UAAU;AAAE,WAAO;AAAA,EAAG;AAAA,EACjD,WAA2B,UAAU;AAAE,WAAO;AAAA,EAAG;AAAA,EAEjD,MAAsB,IAAI,MAAoD;AAC5E,QAAI,CAAC;AACH,aAAO;AAET,QAAI;AACF,YAAM,EAAE,MAAM,UAAU,IAAI;AAC5B,YAAM,QAAQ,MAAM,UAAU,UAAU,oBAAoB,EAAE,WAAW,YAAY,KAAK,CAAC;AAC3F,YAAM,SAAS,WAAW,eAAe,KAAK;AAC9C,YAAM,EAAE,QAAQ,SAAS,MAAM,uBAAuB,IAAI;AAC1D,YAAM,SAAS,WAAW,OAAO;AAAA,QAC/B;AAAA,QAAQ;AAAA,QAAQ;AAAA,QAAS;AAAA,QAAM;AAAA,QAC/B,QAAQ,UAAU;AAAA,QAClB,MAAM,KAAK;AAAA,QACX,WAAW,UAAU,KAAK;AAAA,QAC1B,SAAS,EAAE,QAAQ,UAAU;AAAA,MAC/B,CAAC;AAED,aAAO,WAAc,MAAM;AAC3B,YAAM,OAAO,KAAK;AAClB,aAAO;AAAA,IACT,SAAS,KAAK;AACZ,UAAI,eAAe;AACjB,cAAM,IAAI,SAAS,CAAC;AAEtB,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAEA,MAAsB,eAAe,OAAiB;AACpD,UAAM,SAAS,UAAU,YAAY,cAAc;AACnD,QAAI,CAAC;AACH,aAAO;AAET,UAAM,OAAO,UAAU,KAAK;AAC5B,UAAM,YAAY,KAAK,IAAI,GAAG;AAC9B,UAAM,UAAU,KAAK,IAAI,GAAG;AAC5B,QAAI,CAAC,aAAa,CAAC;AACjB,aAAO;AAET,eAAW,SAAS,OAAO,OAAO;AAChC,YAAM,OAAO,MAAM,MAAM;AACzB,UAAI,gBAAgB,kBAAkB,KAAK,YAAY;AACrD,eAAO,KAAK,IAAI,EAAE,MAAM,UAAU,CAAC;AAAA,IACvC;AAEA,WAAO;AAAA,EACT;AACF;AApDa,wBACY,SAAS;AAqD3B,aAAM,oCAAoC,KAAK;AAAA,EAEpD,WAA2B,UAAU;AAAE,WAAO;AAAA,EAAG;AAAA,EACjD,WAA2B,UAAU;AAAE,WAAO;AAAA,EAAG;AAAA,EAEjD,MAAsB,IAAI,OAAwC,QAA6C;AAC7G,QAAI,CAAC,SAAS,CAAC;AACb,aAAO;AAET,UAAM,UAAU,UAAU,uBAAuB,QAAQ,KAAK;AAC9D,WAAO;AAAA,EACT;AAAA,EAEA,MAAsB,eAAe,OAAiB;AACpD,UAAM,OAAO,UAAU,KAAK;AAC5B,UAAM,YAAY,KAAK,IAAI,GAAG;AAC9B,QAAI,CAAC;AACH,aAAO;AAET,WAAO,KAAK,IAAI;AAAA,MACd,IAAI,KAAK,YAAY;AAAA,MACrB;AAAA,MACA,gBAAgB,KAAK,WAAW,GAAG,KAAK;AAAA,IAC1C,GAAG,UAAU,YAAY,cAAc,MAAM;AAAA,EAC/C;AACF;AAzBa,4BACY,SAAS;",
        "names": []
      }
    }
  ]
}
