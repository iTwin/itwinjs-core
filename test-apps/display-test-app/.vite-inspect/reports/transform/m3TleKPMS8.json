{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/MacroTools.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { IModelApp, MessageBoxIconType, MessageBoxType, NotifyMessageDetails, OutputMessagePriority, ParseAndRunResult, Tool } from \"@itwin/core-frontend\";\r\nimport { DtaRpcInterface } from \"../common/DtaRpcInterface\";\r\n\r\nexport class MacroTool extends Tool {\r\n  public static override toolId = \"Macro\";\r\n  public static override get minArgs() { return 1; }\r\n  public static override get maxArgs() { return 1; }\r\n\r\n  public override async run(macroFile: string): Promise<boolean> {\r\n    const macroString = await DtaRpcInterface.getClient().readExternalFile(macroFile);\r\n    const re = /\\r/g;\r\n    const macroStr2 = macroString.replace (re, \"\");\r\n    const commands = macroStr2.split (\"\\n\");\r\n    commands.forEach((item, index) => {\r\n      if(item === \"\")\r\n        commands.splice(index,1);\r\n    });\r\n\r\n    if (commands.length === 0) {\r\n      IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Info, \"File not found or no content\"));\r\n    } else {\r\n      for (const cmd of commands) {\r\n        let message: string | undefined;\r\n        try {\r\n          switch (await IModelApp.tools.parseAndRun(cmd)) {\r\n            case ParseAndRunResult.ToolNotFound:\r\n              message = `Cannot find a key-in that matches: ${cmd}`;\r\n              break;\r\n            case ParseAndRunResult.BadArgumentCount:\r\n              message = `Incorrect number of arguments for: ${cmd}`;\r\n              break;\r\n            case ParseAndRunResult.FailedToRun:\r\n              message = `Key-in failed to run: ${cmd}`;\r\n              break;\r\n          }\r\n        } catch (ex) {\r\n          message = `Key-in ${cmd} produced exception: ${ex}`;\r\n        }\r\n        if (undefined !== message)\r\n          await IModelApp.notifications.openMessageBox(MessageBoxType.MediumAlert, message, MessageBoxIconType.Warning);\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  public override async parseAndRun(...args: string[]): Promise<boolean> {\r\n    const macroFile=args[0];\r\n    return this.run(macroFile);\r\n  }\r\n}\r\n",
      "start": 1693508121254,
      "end": 1693508121320,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { IModelApp, MessageBoxIconType, MessageBoxType, NotifyMessageDetails, OutputMessagePriority, ParseAndRunResult, Tool } from \"@itwin/core-frontend\";\nimport { DtaRpcInterface } from \"../common/DtaRpcInterface\";\nexport class MacroTool extends Tool {\n  static get minArgs() {\n    return 1;\n  }\n  static get maxArgs() {\n    return 1;\n  }\n  async run(macroFile) {\n    const macroString = await DtaRpcInterface.getClient().readExternalFile(macroFile);\n    const re = /\\r/g;\n    const macroStr2 = macroString.replace(re, \"\");\n    const commands = macroStr2.split(\"\\n\");\n    commands.forEach((item, index) => {\n      if (item === \"\")\n        commands.splice(index, 1);\n    });\n    if (commands.length === 0) {\n      IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Info, \"File not found or no content\"));\n    } else {\n      for (const cmd of commands) {\n        let message;\n        try {\n          switch (await IModelApp.tools.parseAndRun(cmd)) {\n            case ParseAndRunResult.ToolNotFound:\n              message = `Cannot find a key-in that matches: ${cmd}`;\n              break;\n            case ParseAndRunResult.BadArgumentCount:\n              message = `Incorrect number of arguments for: ${cmd}`;\n              break;\n            case ParseAndRunResult.FailedToRun:\n              message = `Key-in failed to run: ${cmd}`;\n              break;\n          }\n        } catch (ex) {\n          message = `Key-in ${cmd} produced exception: ${ex}`;\n        }\n        if (void 0 !== message)\n          await IModelApp.notifications.openMessageBox(MessageBoxType.MediumAlert, message, MessageBoxIconType.Warning);\n      }\n    }\n    return true;\n  }\n  async parseAndRun(...args) {\n    const macroFile = args[0];\n    return this.run(macroFile);\n  }\n}\nMacroTool.toolId = \"Macro\";\n",
      "start": 1693508121320,
      "end": 1693508121469,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/MacroTools.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { IModelApp, MessageBoxIconType, MessageBoxType, NotifyMessageDetails, OutputMessagePriority, ParseAndRunResult, Tool } from \"@itwin/core-frontend\";\r\nimport { DtaRpcInterface } from \"../common/DtaRpcInterface\";\r\n\r\nexport class MacroTool extends Tool {\r\n  public static override toolId = \"Macro\";\r\n  public static override get minArgs() { return 1; }\r\n  public static override get maxArgs() { return 1; }\r\n\r\n  public override async run(macroFile: string): Promise<boolean> {\r\n    const macroString = await DtaRpcInterface.getClient().readExternalFile(macroFile);\r\n    const re = /\\r/g;\r\n    const macroStr2 = macroString.replace (re, \"\");\r\n    const commands = macroStr2.split (\"\\n\");\r\n    commands.forEach((item, index) => {\r\n      if(item === \"\")\r\n        commands.splice(index,1);\r\n    });\r\n\r\n    if (commands.length === 0) {\r\n      IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Info, \"File not found or no content\"));\r\n    } else {\r\n      for (const cmd of commands) {\r\n        let message: string | undefined;\r\n        try {\r\n          switch (await IModelApp.tools.parseAndRun(cmd)) {\r\n            case ParseAndRunResult.ToolNotFound:\r\n              message = `Cannot find a key-in that matches: ${cmd}`;\r\n              break;\r\n            case ParseAndRunResult.BadArgumentCount:\r\n              message = `Incorrect number of arguments for: ${cmd}`;\r\n              break;\r\n            case ParseAndRunResult.FailedToRun:\r\n              message = `Key-in failed to run: ${cmd}`;\r\n              break;\r\n          }\r\n        } catch (ex) {\r\n          message = `Key-in ${cmd} produced exception: ${ex}`;\r\n        }\r\n        if (undefined !== message)\r\n          await IModelApp.notifications.openMessageBox(MessageBoxType.MediumAlert, message, MessageBoxIconType.Warning);\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  public override async parseAndRun(...args: string[]): Promise<boolean> {\r\n    const macroFile=args[0];\r\n    return this.run(macroFile);\r\n  }\r\n}\r\n"
        ],
        "mappings": ";AAIA,SAAS,WAAW,oBAAoB,gBAAgB,sBAAsB,uBAAuB,mBAAmB,YAAY;AACpI,SAAS,uBAAuB;AAEzB,aAAM,kBAAkB,KAAK;AAAA,EAElC,WAA2B,UAAU;AAAE,WAAO;AAAA,EAAG;AAAA,EACjD,WAA2B,UAAU;AAAE,WAAO;AAAA,EAAG;AAAA,EAEjD,MAAsB,IAAI,WAAqC;AAC7D,UAAM,cAAc,MAAM,gBAAgB,UAAU,EAAE,iBAAiB,SAAS;AAChF,UAAM,KAAK;AACX,UAAM,YAAY,YAAY,QAAS,IAAI,EAAE;AAC7C,UAAM,WAAW,UAAU,MAAO,IAAI;AACtC,aAAS,QAAQ,CAAC,MAAM,UAAU;AAChC,UAAG,SAAS;AACV,iBAAS,OAAO,OAAM,CAAC;AAAA,IAC3B,CAAC;AAED,QAAI,SAAS,WAAW,GAAG;AACzB,gBAAU,cAAc,cAAc,IAAI,qBAAqB,sBAAsB,MAAM,8BAA8B,CAAC;AAAA,IAC5H,OAAO;AACL,iBAAW,OAAO,UAAU;AAC1B,YAAI;AACJ,YAAI;AACF,kBAAQ,MAAM,UAAU,MAAM,YAAY,GAAG,GAAG;AAAA,YAC9C,KAAK,kBAAkB;AACrB,wBAAU,sCAAsC,GAAG;AACnD;AAAA,YACF,KAAK,kBAAkB;AACrB,wBAAU,sCAAsC,GAAG;AACnD;AAAA,YACF,KAAK,kBAAkB;AACrB,wBAAU,yBAAyB,GAAG;AACtC;AAAA,UACJ;AAAA,QACF,SAAS,IAAI;AACX,oBAAU,UAAU,GAAG,wBAAwB,EAAE;AAAA,QACnD;AACA,YAAI,WAAc;AAChB,gBAAM,UAAU,cAAc,eAAe,eAAe,aAAa,SAAS,mBAAmB,OAAO;AAAA,MAChH;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EAEA,MAAsB,eAAe,MAAkC;AACrE,UAAM,YAAU,KAAK,CAAC;AACtB,WAAO,KAAK,IAAI,SAAS;AAAA,EAC3B;AACF;AA9Ca,UACY,SAAS;",
        "names": []
      }
    }
  ]
}
