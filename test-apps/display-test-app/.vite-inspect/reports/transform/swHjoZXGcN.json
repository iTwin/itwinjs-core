{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/ViewCreator2d.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Views\n */\n/*\nAPI for creating a 2D view from a given modelId and modelType (classFullName).\nAdditional options (such as background color) can be passed during view creation.\n*/\nimport { IModelStatus } from \"@itwin/core-bentley\";\nimport { Code, ColorDef, IModel, IModelError, QueryBinder, QueryRowFormat, } from \"@itwin/core-common\";\nimport { Range3d } from \"@itwin/core-geometry\";\nimport { DrawingViewState } from \"./DrawingViewState\";\nimport { DrawingModelState, SectionDrawingModelState, SheetModelState } from \"./ModelState\";\nimport { SheetViewState } from \"./SheetViewState\";\n/**\n * API for creating a [[ViewState2d]] for a 2D model ([[GeometricModel2dState]]). @see [[ViewCreator3d]] to create a view for a 3d model.\n * Example usage:\n * ```ts\n * const viewCreator = new ViewCreator2d(imodel);\n * const models = await imodel.models.queryProps({ from: \"BisCore.GeometricModel2d\" });\n * if (models.length > 0)\n *   const view = await viewCreator.createViewForModel(models[0].id!);\n * ```\n * @public\n * @extensions\n */\nclass ViewCreator2d {\n    /**\n     * Constructs a ViewCreator2d using an [[IModelConnection]].\n     * @param _imodel [[IModelConnection]] to query for categories and/or models.\n     */\n    constructor(_imodel) {\n        this._imodel = _imodel;\n        /**\n         * Creates ViewStateProps for the model. ViewStateProps are composed of the 4 sets of Props below.\n         * @param modelId of target model.\n         * @param options for view creation.\n         */\n        this._createViewStateProps = async (modelId, options) => {\n            // Use dictionary model in all props\n            const dictionaryId = IModel.dictionaryId;\n            const categories = await this._getAllCategories();\n            // Get bg color from options or default to white\n            const bgColor = options?.bgColor ? options.bgColor : ColorDef.white;\n            // model extents\n            const modelProps = await this._imodel.models.queryExtents(modelId);\n            const modelExtents = Range3d.fromJSON(modelProps[0]?.extents);\n            let originX = modelExtents.low.x;\n            let originY = modelExtents.low.y;\n            let deltaX = modelExtents.xLength();\n            let deltaY = modelExtents.yLength();\n            // if vp aspect given, update model extents to fit view\n            if (options?.vpAspect) {\n                const modelAspect = deltaY / deltaX;\n                if (modelAspect > options.vpAspect) {\n                    const xFix = deltaY / options.vpAspect;\n                    originX = originX - xFix / 2;\n                    deltaX = deltaX + xFix;\n                }\n                else if (modelAspect < options.vpAspect) {\n                    const yFix = deltaX * options.vpAspect;\n                    originY = originY - yFix / 2;\n                    deltaY = deltaY + yFix;\n                }\n            }\n            const modelSelectorProps = {\n                models: [modelId],\n                code: Code.createEmpty(),\n                model: dictionaryId,\n                classFullName: \"BisCore:ModelSelector\",\n            };\n            const categorySelectorProps = {\n                categories,\n                code: Code.createEmpty(),\n                model: dictionaryId,\n                classFullName: \"BisCore:CategorySelector\",\n            };\n            const viewDefinitionProps = {\n                baseModelId: modelId,\n                categorySelectorId: \"\",\n                displayStyleId: \"\",\n                origin: { x: originX, y: originY },\n                delta: { x: deltaX, y: deltaY },\n                angle: { radians: 0 },\n                code: Code.createEmpty(),\n                model: dictionaryId,\n                classFullName: \"BisCore:ViewDefinition2d\",\n            };\n            const displayStyleProps = {\n                code: Code.createEmpty(),\n                model: dictionaryId,\n                classFullName: \"BisCore:DisplayStyle2d\",\n                jsonProperties: {\n                    styles: {\n                        backgroundColor: bgColor.tbgr,\n                    },\n                },\n            };\n            const viewStateProps = {\n                displayStyleProps,\n                categorySelectorProps,\n                modelSelectorProps,\n                viewDefinitionProps,\n                modelExtents,\n            };\n            // merge seed view props if needed\n            return options?.useSeedView ? this._mergeSeedView(modelId, viewStateProps) : viewStateProps;\n        };\n        /**\n         * Helper function to execute ECSql queries.\n         * @param query statement to execute.\n         */\n        this._executeQuery = async (query) => {\n            const rows = [];\n            for await (const row of this._imodel.createQueryReader(query, undefined, { rowFormat: QueryRowFormat.UseJsPropertyNames }))\n                rows.push(row.id);\n            return rows;\n        };\n    }\n    /**\n     * Creates and returns view for the 2D model id passed in.\n     * @param modelId Id of the 2D model for the view.\n     * @param [options] Options for creating the view.\n     * @throws [IModelError]($common) If modelType is not supported.\n     */\n    async createViewForModel(modelId, options) {\n        const baseClassName = await this._getModelBaseClassName(modelId);\n        const viewState = await this._createViewState2d(modelId, baseClassName.classFullName, options);\n        try {\n            await viewState.load();\n        }\n        catch { }\n        return viewState;\n    }\n    /**\n     * Gets model base class name from id.\n     * @param modelId of target model.\n     * @throws [IModelError]($common) if modelId is invalid.\n     */\n    async _getModelBaseClassName(modelId) {\n        let baseClassName;\n        const modelProps = await this._imodel.models.getProps(modelId);\n        if (modelProps.length > 0) {\n            const modelType = modelProps[0].classFullName;\n            baseClassName = await this._imodel.findClassFor(modelType, undefined);\n        }\n        else\n            throw new IModelError(IModelStatus.BadModel, \"ViewCreator2d._getModelBaseClassName: modelId is invalid\");\n        if (baseClassName === undefined)\n            throw new IModelError(IModelStatus.WrongClass, \"ViewCreator2d.getViewForModel: modelType is invalid\");\n        return baseClassName;\n    }\n    /**\n     * Creates view from any 2D model type (Drawing/SectionDrawing/Sheet)\n     * @param modelId of target model.\n     * @param modelType classFullName of target 2D model.\n     * @param options for view creation.\n     * @throws [IModelError]($common) if modelType is not supported.\n     */\n    async _createViewState2d(modelId, modelType, options) {\n        let viewState;\n        if (this._isDrawingModelClass(modelType)) {\n            const props = await this._createViewStateProps(modelId, options);\n            viewState = DrawingViewState.createFromProps(props, this._imodel);\n        }\n        else if (this._isSheetModelClass(modelType)) {\n            let props = await this._createViewStateProps(modelId, options);\n            props = await this._addSheetViewProps(modelId, props);\n            viewState = SheetViewState.createFromProps(props, this._imodel);\n        }\n        else\n            throw new IModelError(IModelStatus.WrongClass, \"ViewCreator2d._createViewState2d: modelType not supported\");\n        return viewState;\n    }\n    /**\n     * Checks to see if given model is of [[DrawingModelState]].\n     * @param modelType classFullName of model.\n     */\n    _isDrawingModelClass(modelType) {\n        if (ViewCreator2d._drawingModelClasses.includes(modelType)) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Checks to see if given model is of [[SheetModelState]].\n     * @param modelType classFullName of model.\n     */\n    _isSheetModelClass(modelType) {\n        if (ViewCreator2d._sheetModelClasses.includes(modelType)) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Adds Sheet view props to given view props.\n     * @param modelId of target model.\n     * @param props input ViewStateProps.\n     */\n    async _addSheetViewProps(modelId, props) {\n        let width = 0;\n        let height = 0;\n        for await (const row of this._imodel.createQueryReader(`SELECT Width, Height FROM bis.Sheet WHERE ECInstanceId = ?`, QueryBinder.from([modelId]), { rowFormat: QueryRowFormat.UseJsPropertyNames })) {\n            width = row.width;\n            height = row.height;\n            break;\n        }\n        const sheetProps = {\n            model: modelId,\n            code: { spec: \"\", scope: \"\" },\n            classFullName: \"DrawingSheetModel\",\n            height,\n            width,\n        };\n        props.sheetAttachments = await this._getSheetAttachments(modelId);\n        props.sheetProps = sheetProps;\n        return props;\n    }\n    /**\n      * Merges a seed view in the iModel with the passed view state props. It will be a no-op if there are no 2D views for target model.\n      * @param modelId of target model.\n      * @param props Input view props to be merged\n      */\n    async _mergeSeedView(modelId, props) {\n        const viewDefinitionId = await this._getViewDefinitionsIdForModel(modelId);\n        // Return incase no viewDefinition found.\n        if (viewDefinitionId === undefined)\n            return props;\n        const seedViewState = (await this._imodel.views.load(viewDefinitionId));\n        const seedViewStateProps = {\n            categorySelectorProps: seedViewState.categorySelector.toJSON(),\n            viewDefinitionProps: seedViewState.toJSON(),\n            displayStyleProps: seedViewState.displayStyle.toJSON(),\n        };\n        const mergedDisplayProps = seedViewStateProps.displayStyleProps;\n        if (mergedDisplayProps.jsonProperties !== undefined) {\n            mergedDisplayProps.jsonProperties.styles = {\n                ...mergedDisplayProps.jsonProperties.styles,\n                ...props.displayStyleProps.jsonProperties.styles,\n            };\n        }\n        return { ...seedViewStateProps, ...props, displayStyleProps: mergedDisplayProps };\n    }\n    /**\n     * Get all view definitions for a given model.\n     * @param modelId of target model.\n     */\n    async _getViewDefinitionsIdForModel(modelId) {\n        const query = `SELECT ECInstanceId from Bis.ViewDefinition2D WHERE BaseModel.Id = ${modelId} AND isPrivate = false LIMIT 1`;\n        const viewDefinitionsId = await this._executeQuery(query);\n        return (viewDefinitionsId.length) > 0 ? viewDefinitionsId[0] : undefined;\n    }\n    /**\n     * Get all drawing categories\n     */\n    async _getAllCategories() {\n        const query = \"SELECT ECInstanceId from BisCore.DrawingCategory\";\n        const categories = await this._executeQuery(query);\n        return categories;\n    }\n    /**\n     * Get all sheet attachments\n     * @param modelId of target model.\n     */\n    async _getSheetAttachments(modelId) {\n        const query = `SELECT ECInstanceId FROM Bis.ViewAttachment WHERE Model.Id = ${modelId}`;\n        const attachments = await this._executeQuery(query);\n        return attachments;\n    }\n}\n// Types of 2D models the API supports\nViewCreator2d._drawingModelClasses = [DrawingModelState.classFullName, SectionDrawingModelState.classFullName];\nViewCreator2d._sheetModelClasses = [SheetModelState.classFullName];\nexport { ViewCreator2d };\n//# sourceMappingURL=ViewCreator2d.js.map",
      "start": 1693508120086,
      "end": 1693508120571,
      "sourcemaps": null
    }
  ]
}
