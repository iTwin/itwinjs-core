{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend-devtools/lib/esm/tools/TileTreeBoundsDecoration.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tools\n */\nimport { ColorDef, LinePixels } from \"@itwin/core-common\";\nimport { GraphicType, IModelApp, Tool } from \"@itwin/core-frontend\";\nimport { parseToggle } from \"./parseToggle\";\nclass TreeDecoration {\n    constructor() {\n        /** This will allow the render system to cache and reuse the decorations created by this decorator's decorate() method. */\n        this.useCachedDecorations = true;\n        this._removeMe = IModelApp.viewManager.addDecorator(this);\n    }\n    stop() {\n        if (this._removeMe) {\n            this._removeMe();\n            this._removeMe = undefined;\n        }\n    }\n    decorate(context) {\n        context.viewport.forEachTileTreeRef((ref) => this.drawBoundingBox(ref, context));\n    }\n    drawBoundingBox(ref, context) {\n        const tree = ref.treeOwner.tileTree;\n        const location = ref.getLocation();\n        if (undefined === location || undefined === tree || tree.isContentUnbounded || tree.range.isNull)\n            return;\n        const builder = context.createGraphicBuilder(GraphicType.WorldDecoration, location);\n        builder.setSymbology(ColorDef.green, ColorDef.green, 1, LinePixels.Solid);\n        builder.addRangeBox(tree.range);\n        if (undefined !== tree.contentRange) {\n            builder.setSymbology(ColorDef.red, ColorDef.red, 1, LinePixels.Solid);\n            builder.addRangeBox(tree.contentRange);\n        }\n        context.addDecorationFromBuilder(builder);\n    }\n    static toggle(enabled) {\n        const instance = TreeDecoration._instance;\n        if (undefined !== enabled && (undefined !== instance) === enabled)\n            return;\n        if (undefined === instance) {\n            TreeDecoration._instance = new TreeDecoration();\n        }\n        else {\n            instance.stop();\n            TreeDecoration._instance = undefined;\n        }\n    }\n}\n/** Display in every viewport a green range graphic for each displayed tile tree, plus a red range graphic for each tile tree's content range if defined.\n * @beta\n */\nclass ToggleTileTreeBoundsDecorationTool extends Tool {\n    static get minArgs() { return 0; }\n    static get maxArgs() { return 1; }\n    async run(enable) {\n        TreeDecoration.toggle(enable);\n        return true;\n    }\n    async parseAndRun(...args) {\n        const enable = parseToggle(args[0]);\n        if (typeof enable !== \"string\")\n            await this.run(enable);\n        return true;\n    }\n}\nToggleTileTreeBoundsDecorationTool.toolId = \"ToggleTileTreeBoundsDecoration\";\nexport { ToggleTileTreeBoundsDecorationTool };\n//# sourceMappingURL=TileTreeBoundsDecoration.js.map",
      "start": 1693508122756,
      "end": 1693508122852,
      "sourcemaps": null
    }
  ]
}
