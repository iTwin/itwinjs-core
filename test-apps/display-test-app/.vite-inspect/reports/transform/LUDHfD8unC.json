{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/signIn.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { ElectronRendererAuthorization } from \"@itwin/electron-authorization/lib/cjs/ElectronRenderer\";\r\nimport { IModelApp  } from \"@itwin/core-frontend\";\r\nimport { BrowserAuthorizationClient } from \"@itwin/browser-authorization\";\r\nimport { AccessToken, ProcessDetector } from \"@itwin/core-bentley\";\r\nimport { getConfigurationString } from \"./DisplayTestApp\";\r\n\r\n// Wraps the signIn process\r\n// @return Promise that resolves to true after signIn is complete\r\nexport async function signIn(): Promise<boolean> {\r\n  const existingAuthClient = IModelApp.authorizationClient;\r\n  if (undefined !== existingAuthClient && (existingAuthClient instanceof BrowserAuthorizationClient || existingAuthClient instanceof ElectronRendererAuthorization)) {\r\n    if (existingAuthClient.isAuthorized) {\r\n      return (await existingAuthClient.getAccessToken()) !== undefined;\r\n    }\r\n\r\n    return new Promise<boolean>((resolve, reject) => {\r\n      existingAuthClient.onAccessTokenChanged.addOnce((token: AccessToken) => resolve(!!token));\r\n      existingAuthClient.signIn().catch((err) => reject(err));\r\n    });\r\n  }\r\n\r\n  let authClient: ElectronRendererAuthorization | BrowserAuthorizationClient | undefined;\r\n  if (ProcessDetector.isElectronAppFrontend) {\r\n    authClient = new ElectronRendererAuthorization({\r\n      clientId: getConfigurationString(\"oidcClientId\") ?? \"imodeljs-spa-test\",\r\n    });\r\n  } else if (ProcessDetector.isMobileAppFrontend) {\r\n    // The default auth client works on mobile\r\n    const accessToken = await IModelApp.authorizationClient?.getAccessToken();\r\n    return !!accessToken;\r\n  } else {\r\n    const clientId = getConfigurationString(\"oidcClientId\") ?? \"imodeljs-spa-test\";\r\n    const redirectUri = getConfigurationString(\"oidcRedirectUri\") ?? \"http://localhost:3000/signin-callback\";\r\n    const scope = getConfigurationString(\"oidcScope\") ?? \"projects:read realitydata:read imodels:read imodels:modify imodelaccess:read\";\r\n    const responseType = \"code\";\r\n    authClient = new BrowserAuthorizationClient({\r\n      clientId,\r\n      redirectUri,\r\n      scope,\r\n      responseType,\r\n    });\r\n    try {\r\n      await authClient.signInSilent();\r\n    } catch (err) { }\r\n  }\r\n\r\n  if (typeof authClient === \"undefined\") {\r\n    return false;\r\n  } else {\r\n    IModelApp.authorizationClient = authClient;\r\n    if (authClient.isAuthorized)\r\n      return true;\r\n\r\n    return new Promise<boolean>((resolve, reject) => {\r\n      authClient!.onAccessTokenChanged.addOnce((token: AccessToken) => resolve(!!token));\r\n      authClient!.signIn().catch((err) => reject(err));\r\n    });\r\n  }\r\n}\r\n\r\nexport async function signOut(): Promise<void> {\r\n  const auth = IModelApp.authorizationClient;\r\n  if (auth instanceof ElectronRendererAuthorization || auth instanceof BrowserAuthorizationClient){\r\n    await auth.signOut();\r\n    IModelApp.authorizationClient = undefined;\r\n  }\r\n}\r\n",
      "start": 1693508118379,
      "end": 1693508118552,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { ElectronRendererAuthorization } from \"@itwin/electron-authorization/lib/cjs/ElectronRenderer\";\nimport { IModelApp } from \"@itwin/core-frontend\";\nimport { BrowserAuthorizationClient } from \"@itwin/browser-authorization\";\nimport { ProcessDetector } from \"@itwin/core-bentley\";\nimport { getConfigurationString } from \"./DisplayTestApp\";\nexport async function signIn() {\n  const existingAuthClient = IModelApp.authorizationClient;\n  if (void 0 !== existingAuthClient && (existingAuthClient instanceof BrowserAuthorizationClient || existingAuthClient instanceof ElectronRendererAuthorization)) {\n    if (existingAuthClient.isAuthorized) {\n      return await existingAuthClient.getAccessToken() !== void 0;\n    }\n    return new Promise((resolve, reject) => {\n      existingAuthClient.onAccessTokenChanged.addOnce((token) => resolve(!!token));\n      existingAuthClient.signIn().catch((err) => reject(err));\n    });\n  }\n  let authClient;\n  if (ProcessDetector.isElectronAppFrontend) {\n    authClient = new ElectronRendererAuthorization({\n      clientId: getConfigurationString(\"oidcClientId\") ?? \"imodeljs-spa-test\"\n    });\n  } else if (ProcessDetector.isMobileAppFrontend) {\n    const accessToken = await IModelApp.authorizationClient?.getAccessToken();\n    return !!accessToken;\n  } else {\n    const clientId = getConfigurationString(\"oidcClientId\") ?? \"imodeljs-spa-test\";\n    const redirectUri = getConfigurationString(\"oidcRedirectUri\") ?? \"http://localhost:3000/signin-callback\";\n    const scope = getConfigurationString(\"oidcScope\") ?? \"projects:read realitydata:read imodels:read imodels:modify imodelaccess:read\";\n    const responseType = \"code\";\n    authClient = new BrowserAuthorizationClient({\n      clientId,\n      redirectUri,\n      scope,\n      responseType\n    });\n    try {\n      await authClient.signInSilent();\n    } catch (err) {\n    }\n  }\n  if (typeof authClient === \"undefined\") {\n    return false;\n  } else {\n    IModelApp.authorizationClient = authClient;\n    if (authClient.isAuthorized)\n      return true;\n    return new Promise((resolve, reject) => {\n      authClient.onAccessTokenChanged.addOnce((token) => resolve(!!token));\n      authClient.signIn().catch((err) => reject(err));\n    });\n  }\n}\nexport async function signOut() {\n  const auth = IModelApp.authorizationClient;\n  if (auth instanceof ElectronRendererAuthorization || auth instanceof BrowserAuthorizationClient) {\n    await auth.signOut();\n    IModelApp.authorizationClient = void 0;\n  }\n}\n",
      "start": 1693508118552,
      "end": 1693508118676,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/signIn.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { ElectronRendererAuthorization } from \"@itwin/electron-authorization/lib/cjs/ElectronRenderer\";\r\nimport { IModelApp  } from \"@itwin/core-frontend\";\r\nimport { BrowserAuthorizationClient } from \"@itwin/browser-authorization\";\r\nimport { AccessToken, ProcessDetector } from \"@itwin/core-bentley\";\r\nimport { getConfigurationString } from \"./DisplayTestApp\";\r\n\r\n// Wraps the signIn process\r\n// @return Promise that resolves to true after signIn is complete\r\nexport async function signIn(): Promise<boolean> {\r\n  const existingAuthClient = IModelApp.authorizationClient;\r\n  if (undefined !== existingAuthClient && (existingAuthClient instanceof BrowserAuthorizationClient || existingAuthClient instanceof ElectronRendererAuthorization)) {\r\n    if (existingAuthClient.isAuthorized) {\r\n      return (await existingAuthClient.getAccessToken()) !== undefined;\r\n    }\r\n\r\n    return new Promise<boolean>((resolve, reject) => {\r\n      existingAuthClient.onAccessTokenChanged.addOnce((token: AccessToken) => resolve(!!token));\r\n      existingAuthClient.signIn().catch((err) => reject(err));\r\n    });\r\n  }\r\n\r\n  let authClient: ElectronRendererAuthorization | BrowserAuthorizationClient | undefined;\r\n  if (ProcessDetector.isElectronAppFrontend) {\r\n    authClient = new ElectronRendererAuthorization({\r\n      clientId: getConfigurationString(\"oidcClientId\") ?? \"imodeljs-spa-test\",\r\n    });\r\n  } else if (ProcessDetector.isMobileAppFrontend) {\r\n    // The default auth client works on mobile\r\n    const accessToken = await IModelApp.authorizationClient?.getAccessToken();\r\n    return !!accessToken;\r\n  } else {\r\n    const clientId = getConfigurationString(\"oidcClientId\") ?? \"imodeljs-spa-test\";\r\n    const redirectUri = getConfigurationString(\"oidcRedirectUri\") ?? \"http://localhost:3000/signin-callback\";\r\n    const scope = getConfigurationString(\"oidcScope\") ?? \"projects:read realitydata:read imodels:read imodels:modify imodelaccess:read\";\r\n    const responseType = \"code\";\r\n    authClient = new BrowserAuthorizationClient({\r\n      clientId,\r\n      redirectUri,\r\n      scope,\r\n      responseType,\r\n    });\r\n    try {\r\n      await authClient.signInSilent();\r\n    } catch (err) { }\r\n  }\r\n\r\n  if (typeof authClient === \"undefined\") {\r\n    return false;\r\n  } else {\r\n    IModelApp.authorizationClient = authClient;\r\n    if (authClient.isAuthorized)\r\n      return true;\r\n\r\n    return new Promise<boolean>((resolve, reject) => {\r\n      authClient!.onAccessTokenChanged.addOnce((token: AccessToken) => resolve(!!token));\r\n      authClient!.signIn().catch((err) => reject(err));\r\n    });\r\n  }\r\n}\r\n\r\nexport async function signOut(): Promise<void> {\r\n  const auth = IModelApp.authorizationClient;\r\n  if (auth instanceof ElectronRendererAuthorization || auth instanceof BrowserAuthorizationClient){\r\n    await auth.signOut();\r\n    IModelApp.authorizationClient = undefined;\r\n  }\r\n}\r\n"
        ],
        "mappings": ";AAIA,SAAS,qCAAqC;AAC9C,SAAS,iBAAkB;AAC3B,SAAS,kCAAkC;AAC3C,SAAsB,uBAAuB;AAC7C,SAAS,8BAA8B;AAIvC,sBAAsB,SAA2B;AAC/C,QAAM,qBAAqB,UAAU;AACrC,MAAI,WAAc,uBAAuB,8BAA8B,8BAA8B,8BAA8B,gCAAgC;AACjK,QAAI,mBAAmB,cAAc;AACnC,aAAQ,MAAM,mBAAmB,eAAe,MAAO;AAAA,IACzD;AAEA,WAAO,IAAI,QAAiB,CAAC,SAAS,WAAW;AAC/C,yBAAmB,qBAAqB,QAAQ,CAAC,UAAuB,QAAQ,CAAC,CAAC,KAAK,CAAC;AACxF,yBAAmB,OAAO,EAAE,MAAM,CAAC,QAAQ,OAAO,GAAG,CAAC;AAAA,IACxD,CAAC;AAAA,EACH;AAEA,MAAI;AACJ,MAAI,gBAAgB,uBAAuB;AACzC,iBAAa,IAAI,8BAA8B;AAAA,MAC7C,UAAU,uBAAuB,cAAc,KAAK;AAAA,IACtD,CAAC;AAAA,EACH,WAAW,gBAAgB,qBAAqB;AAE9C,UAAM,cAAc,MAAM,UAAU,qBAAqB,eAAe;AACxE,WAAO,CAAC,CAAC;AAAA,EACX,OAAO;AACL,UAAM,WAAW,uBAAuB,cAAc,KAAK;AAC3D,UAAM,cAAc,uBAAuB,iBAAiB,KAAK;AACjE,UAAM,QAAQ,uBAAuB,WAAW,KAAK;AACrD,UAAM,eAAe;AACrB,iBAAa,IAAI,2BAA2B;AAAA,MAC1C;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AACD,QAAI;AACF,YAAM,WAAW,aAAa;AAAA,IAChC,SAAS,KAAK;AAAA,IAAE;AAAA,EAClB;AAEA,MAAI,OAAO,eAAe,aAAa;AACrC,WAAO;AAAA,EACT,OAAO;AACL,cAAU,sBAAsB;AAChC,QAAI,WAAW;AACb,aAAO;AAET,WAAO,IAAI,QAAiB,CAAC,SAAS,WAAW;AAC/C,iBAAY,qBAAqB,QAAQ,CAAC,UAAuB,QAAQ,CAAC,CAAC,KAAK,CAAC;AACjF,iBAAY,OAAO,EAAE,MAAM,CAAC,QAAQ,OAAO,GAAG,CAAC;AAAA,IACjD,CAAC;AAAA,EACH;AACF;AAEA,sBAAsB,UAAyB;AAC7C,QAAM,OAAO,UAAU;AACvB,MAAI,gBAAgB,iCAAiC,gBAAgB,4BAA2B;AAC9F,UAAM,KAAK,QAAQ;AACnB,cAAU,sBAAsB;AAAA,EAClC;AACF;",
        "names": []
      }
    }
  ]
}
