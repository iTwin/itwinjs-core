{
  "resolvedId": "D:/hub2023A/itwinjs-core/extensions/frontend-tiles/lib/esm/BatchedTilesetReader.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\nimport { Matrix3d, Point3d, Range3d, Transform, Vector3d, } from \"@itwin/core-geometry\";\nimport { RealityModelTileUtils, TileLoadPriority } from \"@itwin/core-frontend\";\nfunction isTileset3d(json) {\n    if (typeof json !== \"object\")\n        return false;\n    const props = json;\n    if (!props.root || !props.asset)\n        return false;\n    // ###TODO spec requires geometricError to be present on tileset and all tiles; exporter is omitting from tileset.\n    if (undefined === props.geometricError)\n        props.geometricError = props.root.geometricError;\n    return true;\n}\nfunction rangeFromBoundingVolume(vol) {\n    if (vol.box) {\n        const center = new Point3d(vol.box[0], vol.box[1], vol.box[2]);\n        const ux = new Vector3d(vol.box[3], vol.box[4], vol.box[5]);\n        const uy = new Vector3d(vol.box[6], vol.box[7], vol.box[8]);\n        const uz = new Vector3d(vol.box[9], vol.box[10], vol.box[11]);\n        const range = Range3d.createNull();\n        for (let i = -1; i <= 1; i += 2)\n            for (let j = -1; j <= 1; j += 2)\n                for (let k = -1; k <= 1; k += 2)\n                    range.extendPoint(center.plus3Scaled(ux, i, uy, j, uz, k));\n        return range;\n    }\n    else if (vol.sphere) {\n        const center = new Point3d(vol.sphere[0], vol.sphere[1], vol.sphere[2]);\n        const radius = vol.sphere[3];\n        return Range3d.createXYZXYZ(center.x - radius, center.y - radius, center.z - radius, center.x + radius, center.y + radius, center.z + radius);\n    }\n    // We won't get region bounding volumes in our tiles.\n    throw new Error(\"region bounding volume unimplemented\");\n}\nfunction transformFromJSON(json) {\n    const translation = new Point3d(json[12], json[13], json[14]);\n    const matrix = Matrix3d.createRowValues(json[0], json[4], json[8], json[1], json[5], json[9], json[2], json[6], json[10]);\n    return Transform.createOriginAndMatrix(translation, matrix);\n}\n/** @internal */\nexport class BatchedTilesetReader {\n    constructor(json, iModel, baseUrl) {\n        if (!isTileset3d(json))\n            throw new Error(\"Invalid tileset JSON\");\n        this._iModel = iModel;\n        this._tileset = json;\n        this.baseUrl = baseUrl;\n    }\n    readTileParams(json, parent) {\n        const content = json.content;\n        const geometricError = json.geometricError;\n        const range = rangeFromBoundingVolume(json.boundingVolume);\n        const isLeaf = undefined === json.children || json.children.length === 0;\n        // ###TODO evaluate this. The geometric errors in the tiles seem far too small.\n        const maximumSizeScale = 8;\n        return {\n            parent,\n            contentId: content?.uri ?? \"\",\n            range,\n            contentRange: content?.boundingVolume ? rangeFromBoundingVolume(content.boundingVolume) : undefined,\n            isLeaf,\n            maximumSize: maximumSizeScale * RealityModelTileUtils.maximumSizeFromGeometricTolerance(range, geometricError),\n            childrenProps: isLeaf ? undefined : json.children,\n        };\n    }\n    async readTileTreeParams() {\n        const root = this._tileset.root;\n        const location = root.transform ? transformFromJSON(root.transform) : Transform.createIdentity();\n        return {\n            id: \"spatial-models\",\n            modelId: this._iModel.transientIds.getNext(),\n            iModel: this._iModel,\n            location,\n            priority: TileLoadPriority.Primary,\n            rootTile: this.readTileParams(root),\n            reader: this,\n        };\n    }\n}\n//# sourceMappingURL=BatchedTilesetReader.js.map",
      "start": 1693508126123,
      "end": 1693508126286,
      "sourcemaps": null
    }
  ]
}
