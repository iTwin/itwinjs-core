{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/ViewDetails.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Views\n */\nimport { assert, BeEvent, Id64, JsonUtils } from \"@itwin/core-bentley\";\nimport { ClipVector, Geometry } from \"@itwin/core-geometry\";\nimport { ModelClipGroups } from \"./ModelClipGroup\";\n/** Describes the orientation of the grid displayed within a [Viewport]($frontend).\n * @public\n * @extensions\n */\nexport var GridOrientationType;\n(function (GridOrientationType) {\n    /** Oriented with the view. */\n    GridOrientationType[GridOrientationType[\"View\"] = 0] = \"View\";\n    /** Top */\n    GridOrientationType[GridOrientationType[\"WorldXY\"] = 1] = \"WorldXY\";\n    /** Right */\n    GridOrientationType[GridOrientationType[\"WorldYZ\"] = 2] = \"WorldYZ\";\n    /** Front */\n    GridOrientationType[GridOrientationType[\"WorldXZ\"] = 3] = \"WorldXZ\";\n    /** Oriented by the auxiliary coordinate system. */\n    GridOrientationType[GridOrientationType[\"AuxCoord\"] = 4] = \"AuxCoord\";\n})(GridOrientationType || (GridOrientationType = {}));\n/** Encapsulates access to optional view details stored in JSON properties.\n * @see [[ViewDetailsProps]] for the JSON representation.\n * @see [ViewDefinition.details]($backend) and [ViewState.details]($frontend).\n * @public\n */\nclass ViewDetails {\n    /** @internal */\n    constructor(jsonProperties) {\n        /** Event raised just before assignment to the [[clipVector]] property. */\n        this.onClipVectorChanged = new BeEvent();\n        if (!jsonProperties.viewDetails)\n            jsonProperties.viewDetails = {};\n        this._json = jsonProperties.viewDetails;\n    }\n    /** The Id of the auxiliary coordinate system for the view. */\n    get auxiliaryCoordinateSystemId() {\n        return Id64.fromJSON(this._json.acs);\n    }\n    set auxiliaryCoordinateSystemId(id) {\n        this._json.acs = Id64.isValidId64(id) ? id : undefined;\n    }\n    /** The aspect ratio skew (x/y, usually 1.0) used to exaggerate the y axis of the view. */\n    get aspectRatioSkew() {\n        const maxSkew = ViewDetails.maxSkew;\n        const skew = JsonUtils.asDouble(this._json.aspectSkew, 1.0);\n        return Geometry.clamp(skew, 1 / maxSkew, maxSkew);\n    }\n    set aspectRatioSkew(skew) {\n        this._json.aspectSkew = 1.0 !== skew ? skew : undefined;\n    }\n    /** The orientation of the view's grid. */\n    get gridOrientation() {\n        return JsonUtils.asInt(this._json.gridOrient, GridOrientationType.WorldXY);\n    }\n    set gridOrientation(orientation) {\n        this._json.gridOrient = GridOrientationType.WorldXY === orientation ? undefined : orientation;\n    }\n    /** The number of grids per ref for the view. */\n    get gridsPerRef() {\n        return JsonUtils.asInt(this._json.gridPerRef, 10);\n    }\n    set gridsPerRef(gridsPerRef) {\n        this._json.gridPerRef = 10 === gridsPerRef ? undefined : gridsPerRef;\n    }\n    /** The grid spacing for the view. */\n    get gridSpacing() {\n        const x = JsonUtils.asDouble(this._json.gridSpaceX, 1.0);\n        const y = JsonUtils.asDouble(this._json.gridSpaceY, x);\n        return { x, y };\n    }\n    set gridSpacing(spacing) {\n        this._json.gridSpaceX = 1.0 !== spacing.x ? spacing.x : undefined;\n        this._json.gridSpaceY = spacing.x !== spacing.y ? spacing.y : undefined;\n    }\n    /** Clipping volume for the view.\n     * @note Do *not* modify the returned ClipVector. If you wish to change the ClipVector, clone the returned ClipVector, modify it as desired, and pass the clone back to the setter.\n     */\n    get clipVector() {\n        if (undefined === this._clipVector) {\n            const clip = this._json.clip;\n            this._clipVector = (undefined !== clip ? ClipVector.fromJSON(clip) : ClipVector.createEmpty());\n        }\n        return this._clipVector.isValid ? this._clipVector : undefined;\n    }\n    set clipVector(clip) {\n        const curClip = this.clipVector;\n        if (curClip === clip)\n            return;\n        if (!curClip) {\n            assert(undefined !== clip);\n            // An empty clip is equivalent to no clip.\n            if (!clip.isValid)\n                return;\n        }\n        clip = clip ?? ClipVector.createEmpty();\n        this.onClipVectorChanged.raiseEvent(clip.isValid ? clip : undefined);\n        this._clipVector = clip;\n        if (clip.isValid)\n            this._json.clip = clip.toJSON();\n        else\n            delete this._json.clip;\n    }\n    /** Returns the internal JSON representation. This is *not* a copy.\n     * @internal\n     */\n    getJSON() {\n        return this._json;\n    }\n}\n/** Maximum aspect ratio skew. Apps can override this by changing its value. */\nViewDetails.maxSkew = 25;\nexport { ViewDetails };\n/** Encapsulates access to optional 3d view details stored in JSON properties.\n * @see [[ViewDetails3dProps]] for the JSON representation.\n * @public\n */\nexport class ViewDetails3d extends ViewDetails {\n    get _json3d() {\n        return this._json;\n    }\n    /** @internal */\n    constructor(jsonProperties) {\n        super(jsonProperties);\n        /** Event raised when just before assignment to the [[modelClipGroups]] property. */\n        this.onModelClipGroupsChanged = new BeEvent();\n    }\n    /** Controls whether viewing tools are allowed to operate on the view in 3 dimensions. */\n    get allow3dManipulations() {\n        return !JsonUtils.asBool(this._json3d.disable3dManipulations, false);\n    }\n    set allow3dManipulations(allow) {\n        this._json3d.disable3dManipulations = allow ? undefined : true;\n    }\n    /** Groups of models associated with [ClipVector]($core-geometry)s by which those models should be clipped.\n     * If the view and the model both have a clip vector defined, geometry in the model will be clipped by the intersection of the two clip vectors.\n     * [[ViewFlags.clipVolume]] has no effect on model clips, only the view clip - model clips are always applied.\n     * @note Do **not** modify the returned object directly. Instead, clone it, modify the clone, and pass the clone to the property setter.\n     */\n    get modelClipGroups() {\n        if (!this._modelClipGroups)\n            this._modelClipGroups = ModelClipGroups.fromJSON(this._json3d.modelClipGroups);\n        return this._modelClipGroups;\n    }\n    set modelClipGroups(groups) {\n        this.onModelClipGroupsChanged.raiseEvent(groups);\n        this._modelClipGroups = groups;\n        this._json3d.modelClipGroups = groups.toJSON();\n    }\n    /** Returns the internal JSON representation. This is *not* a copy.\n     * @internal\n     */\n    getJSON() {\n        return this._json3d;\n    }\n}\n//# sourceMappingURL=ViewDetails.js.map",
      "start": 1693508120994,
      "end": 1693508121046,
      "sourcemaps": null
    }
  ]
}
