{
  "resolvedId": "D:/hub2023A/itwinjs-core/common/temp/node_modules/.pnpm/@itwin+imodels-client-management@3.1.0/node_modules/@itwin/imodels-client-management/lib/esm/base/types/iterators/IteratorUtilFunctions.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n * Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n * See LICENSE.md in the project root for license terms and full copyright notice.\r\n *--------------------------------------------------------------------------------------------*/\r\n/**\r\n * Transforms each entity in the async iterator using the provided function.\r\n * @param {AsyncIterableIterator<TSource>} iterator source entity iterator.\r\n * @param {(entity: TSource) => TTarget} mapFunc function to transform elements from `TSource` to `TTarget`.\r\n * @returns {AsyncIterableIterator<TTarget>} iterator of transformed elements.\r\n */\r\nexport async function* map(iterator, mapFunc) {\r\n    for await (const entity of iterator)\r\n        yield mapFunc(entity);\r\n}\r\n/**\r\n * Transforms an iterator of entity pages into an iterator of entities.\r\n * @param {AsyncIterableIterator<TEntity[]>} pagedIterator iterator of entity pages.\r\n * @returns {AsyncIterableIterator<TEntity>} iterator of entities.\r\n */\r\nexport async function* flatten(pagedIterator) {\r\n    for await (const entityChunk of pagedIterator)\r\n        for (const entity of entityChunk)\r\n            yield entity;\r\n}\r\n/**\r\n * Loads all entities from an iterator into an array.\r\n * @param {AsyncIterableIterator<TEntity>} iterator entity iterator.\r\n * @returns {Promise<TEntity[]>} entity array.\r\n */\r\nexport async function toArray(iterator) {\r\n    const result = [];\r\n    for await (const entity of iterator)\r\n        result.push(entity);\r\n    return result;\r\n}\r\n/**\r\n * Loads top n entities from an iterator into an array.\r\n * @param {AsyncIterableIterator<TSource>} iterator source entity iterator.\r\n * @param {number} entityCount number of entities to load.\r\n * @returns {Promise<TEntity[]>} entity array that contains a number of top elements specified. If iterator contains\r\n * less items than specified in `entityCount` length of the array will be less than `entityCount`. If\r\n * iterator contains no entities the array will be empty.\r\n */\r\nexport async function take(iterator, entityCount) {\r\n    const result = [];\r\n    for await (const entity of iterator) {\r\n        result.push(entity);\r\n        if (result.length === entityCount)\r\n            break;\r\n    }\r\n    return result;\r\n}\r\n//# sourceMappingURL=IteratorUtilFunctions.js.map",
      "start": 1693508125013,
      "end": 1693508125107,
      "sourcemaps": null
    }
  ]
}
