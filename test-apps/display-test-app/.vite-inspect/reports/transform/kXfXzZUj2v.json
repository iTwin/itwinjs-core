{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/webgl/PointString.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module WebGL\n */\nimport { assert, dispose } from \"@itwin/core-bentley\";\nimport { FeatureIndexType } from \"@itwin/core-common\";\nimport { AttributeMap } from \"./AttributeMap\";\nimport { LUTGeometry } from \"./CachedGeometry\";\nimport { GL } from \"./GL\";\nimport { BufferHandle, BufferParameters, BuffersContainer } from \"./AttributeBuffers\";\nimport { System } from \"./System\";\nimport { VertexLUT } from \"./VertexLUT\";\n/** @internal */\nexport class PointStringGeometry extends LUTGeometry {\n    get lutBuffers() { return this.buffers; }\n    constructor(indices, numIndices, lut, qparams, weight, hasFeatures, viOrigin) {\n        super(viOrigin);\n        this.buffers = BuffersContainer.create();\n        const attrPos = AttributeMap.findAttribute(\"a_pos\", 3 /* TechniqueId.PointString */, false);\n        assert(undefined !== attrPos);\n        this.buffers.addBuffer(indices, [BufferParameters.create(attrPos.location, 3, GL.DataType.UnsignedByte, false, 0, 0, false)]);\n        this.numIndices = numIndices;\n        this.indices = indices;\n        this.lut = lut;\n        this.vertexParams = qparams;\n        this.weight = weight;\n        this._hasFeatures = hasFeatures;\n    }\n    _wantWoWReversal(_target) { return true; }\n    get techniqueId() { return 3 /* TechniqueId.PointString */; }\n    getPass() { return \"opaque-linear\"; }\n    get hasFeatures() { return this._hasFeatures; }\n    get renderOrder() { return 13 /* RenderOrder.PlanarLinear */; }\n    _getLineWeight(_params) { return this.weight; }\n    _draw(numInstances, instanceBuffersContainer) {\n        const gl = System.instance;\n        const bufs = instanceBuffersContainer !== undefined ? instanceBuffersContainer : this.buffers;\n        bufs.bind();\n        gl.drawArrays(GL.PrimitiveType.Points, 0, this.numIndices, numInstances);\n        bufs.unbind();\n    }\n    static create(params, viOrigin) {\n        const indices = BufferHandle.createArrayBuffer(params.indices.data);\n        if (undefined === indices)\n            return undefined;\n        const lut = VertexLUT.createFromVertexTable(params.vertices);\n        if (undefined === lut)\n            return undefined;\n        const hasFeatures = FeatureIndexType.Empty !== params.vertices.featureIndexType;\n        return new PointStringGeometry(indices, params.indices.length, lut, params.vertices.qparams, params.weight, hasFeatures, viOrigin);\n    }\n    get isDisposed() {\n        return this.buffers.isDisposed\n            && this.lut.isDisposed\n            && this.indices.isDisposed;\n    }\n    dispose() {\n        dispose(this.buffers);\n        dispose(this.lut);\n        dispose(this.indices);\n    }\n    collectStatistics(stats) {\n        stats.addVertexTable(this.lut.bytesUsed);\n        stats.addPointString(this.indices.bytesUsed);\n    }\n}\n//# sourceMappingURL=PointString.js.map",
      "start": 1693508124529,
      "end": 1693508124610,
      "sourcemaps": null
    }
  ]
}
