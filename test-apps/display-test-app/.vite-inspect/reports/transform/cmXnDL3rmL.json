{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend-devtools/lib/esm/ui/RadioBox.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @alpha */\nexport function createRadioBox(props) {\n    const div = document.createElement(\"div\");\n    let label;\n    if (undefined !== props.name) {\n        label = document.createElement(\"label\");\n        label.htmlFor = props.id;\n        label.innerText = props.name;\n        div.appendChild(label);\n    }\n    const form = document.createElement(\"form\");\n    form.id = props.id;\n    const radioBoxes = [];\n    for (const entry of props.entries) {\n        const input = document.createElement(\"input\");\n        input.type = \"radio\";\n        input.name = props.name ? props.name : props.id;\n        input.value = (undefined !== entry.value) ? entry.value.toString() : \"\";\n        const inputLabel = document.createElement(\"label\");\n        inputLabel.innerText = entry.label;\n        inputLabel.onclick = () => {\n            try {\n                input.checked = true;\n                const value = input.value;\n                props.handler(value, form);\n            }\n            catch (_ex) {\n                //\n            }\n        };\n        input.onchange = () => {\n            try {\n                const value = input.value;\n                props.handler(value, form);\n            }\n            catch (_ex) {\n                //\n            }\n        };\n        if (props.defaultValue === entry.value) {\n            input.checked = true;\n        }\n        radioBoxes.push(input);\n        if (props.vertical) {\n            const container = document.createElement(\"div\");\n            container.appendChild(input);\n            container.appendChild(inputLabel);\n            form.appendChild(container);\n        }\n        else {\n            form.appendChild(input);\n            form.appendChild(inputLabel);\n        }\n    }\n    div.appendChild(form);\n    if (undefined !== props.parent)\n        props.parent.appendChild(div);\n    const setValue = (value) => {\n        const stringValue = value.toString();\n        const validValue = radioBoxes.map((input) => input.value).includes(stringValue);\n        if (validValue) {\n            radioBoxes.forEach((input) => input.checked = input.value === stringValue);\n            props.handler(stringValue, form);\n        }\n        return validValue;\n    };\n    return { div, label, setValue, form };\n}\n//# sourceMappingURL=RadioBox.js.map",
      "start": 1693508122807,
      "end": 1693508122872,
      "sourcemaps": null
    }
  ]
}
