{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/HubPicker.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { ProcessDetector } from \"@itwin/core-bentley\";\r\nimport { createButton, createTextBox, TextBoxProps } from \"@itwin/frontend-devtools\";\r\nimport { getConfigurationString } from \"./DisplayTestApp\";\r\nimport { ToolBarDropDown } from \"./ToolBar\";\r\n\r\nexport class HubPicker extends ToolBarDropDown {\r\n  private readonly _parent: HTMLElement;\r\n  private readonly _element: HTMLElement;\r\n  private _iModelIdInput: HTMLInputElement | undefined;\r\n  private _iTwinIdInput: HTMLInputElement | undefined;\r\n  private _onOpenIModel: (iModelId: string, iTwinId: string) => void;\r\n  private static _lastITwinId: string | undefined;\r\n  private static _lastIModelId: string | undefined;\r\n  private _inputWidth = 300;\r\n  private _totalWidth = this._inputWidth + 95;\r\n\r\n  public constructor(parent: HTMLElement, onOpenIModel: (iModelId: string, iTwinId: string) => void) {\r\n    super();\r\n    if (ProcessDetector.isIOSAppFrontend) {\r\n      this._inputWidth = 255;\r\n      this._totalWidth = this._inputWidth + 110;\r\n    }\r\n    this._parent = parent;\r\n    this._onOpenIModel = onOpenIModel;\r\n    this._element = document.createElement(\"div\");\r\n    this._element.className = \"debugPanel\";\r\n    this._element.style.width = `${this._totalWidth}px`;\r\n    parent.appendChild(this._element);\r\n    if (HubPicker._lastITwinId === undefined) {\r\n      HubPicker._lastITwinId = getConfigurationString(\"iTwinId\");\r\n    }\r\n    if (HubPicker._lastIModelId === undefined) {\r\n      HubPicker._lastIModelId = getConfigurationString(\"iModelId\");\r\n    }\r\n  }\r\n\r\n  protected _open(): void { this._element.style.display = \"block\"; }\r\n  protected _close(): void { this._element.style.display = \"none\"; }\r\n  public get isOpen(): boolean { return \"none\" !== this._element.style.display; }\r\n\r\n  private _createTextBox(props: TextBoxProps, defaultValue: string | undefined) {\r\n    const div = this._element.appendChild(document.createElement(\"div\"));\r\n    div.className = \"inputDiv\";\r\n    const textbox = createTextBox({\r\n      ...props,\r\n      parent: div,\r\n      inline: true,\r\n    }).textbox;\r\n    textbox.defaultValue = defaultValue ?? \"\";\r\n    textbox.style.width = `${this._inputWidth}px`;\r\n    textbox.style.fontFamily = \"monospace\";\r\n    return textbox;\r\n  }\r\n\r\n  private openIModel() {\r\n    const iModelId = this._iModelIdInput?.value;\r\n    const iTwinId = this._iTwinIdInput?.value;\r\n    // Note: below checks for undefined OR empty.\r\n    if (iModelId && iTwinId) {\r\n      HubPicker._lastITwinId = iTwinId;\r\n      HubPicker._lastIModelId = iModelId;\r\n      this._onOpenIModel(iModelId, iTwinId);\r\n    } else {\r\n      alert(\"You must enter an iTwinId and an iModelId\");\r\n    }\r\n  }\r\n\r\n  public async populate(): Promise<void> {\r\n    this._iTwinIdInput = this._createTextBox({\r\n      label: \"iTwin Id: \",\r\n      id: \"HubPicker_iTwinId\",\r\n      tooltip: \"Enter the iTwin Id of the iModel to load\",\r\n    }, HubPicker._lastITwinId);\r\n    this._iModelIdInput = this._createTextBox({\r\n      label: \"iModel Id: \",\r\n      id: \"HubPicker_iModelId\",\r\n      tooltip: \"Enter the iModel Id of the iModel to load\",\r\n    }, HubPicker._lastIModelId);\r\n    const openIModelDiv = this._element.appendChild(document.createElement(\"div\"));\r\n    openIModelDiv.className = \"inputDiv\";\r\n    createButton({\r\n      parent: openIModelDiv,\r\n      value: \"Open hub iModel\",\r\n      inline: true,\r\n      handler: () => this.openIModel(),\r\n      tooltip: \"Download and open hub iModel\",\r\n    });\r\n  }\r\n}\r\n",
      "start": 1693508124606,
      "end": 1693508124720,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { ProcessDetector } from \"@itwin/core-bentley\";\nimport { createButton, createTextBox } from \"@itwin/frontend-devtools\";\nimport { getConfigurationString } from \"./DisplayTestApp\";\nimport { ToolBarDropDown } from \"./ToolBar\";\nexport class HubPicker extends ToolBarDropDown {\n  constructor(parent, onOpenIModel) {\n    super();\n    this._inputWidth = 300;\n    this._totalWidth = this._inputWidth + 95;\n    if (ProcessDetector.isIOSAppFrontend) {\n      this._inputWidth = 255;\n      this._totalWidth = this._inputWidth + 110;\n    }\n    this._parent = parent;\n    this._onOpenIModel = onOpenIModel;\n    this._element = document.createElement(\"div\");\n    this._element.className = \"debugPanel\";\n    this._element.style.width = `${this._totalWidth}px`;\n    parent.appendChild(this._element);\n    if (HubPicker._lastITwinId === void 0) {\n      HubPicker._lastITwinId = getConfigurationString(\"iTwinId\");\n    }\n    if (HubPicker._lastIModelId === void 0) {\n      HubPicker._lastIModelId = getConfigurationString(\"iModelId\");\n    }\n  }\n  _open() {\n    this._element.style.display = \"block\";\n  }\n  _close() {\n    this._element.style.display = \"none\";\n  }\n  get isOpen() {\n    return \"none\" !== this._element.style.display;\n  }\n  _createTextBox(props, defaultValue) {\n    const div = this._element.appendChild(document.createElement(\"div\"));\n    div.className = \"inputDiv\";\n    const textbox = createTextBox({\n      ...props,\n      parent: div,\n      inline: true\n    }).textbox;\n    textbox.defaultValue = defaultValue ?? \"\";\n    textbox.style.width = `${this._inputWidth}px`;\n    textbox.style.fontFamily = \"monospace\";\n    return textbox;\n  }\n  openIModel() {\n    const iModelId = this._iModelIdInput?.value;\n    const iTwinId = this._iTwinIdInput?.value;\n    if (iModelId && iTwinId) {\n      HubPicker._lastITwinId = iTwinId;\n      HubPicker._lastIModelId = iModelId;\n      this._onOpenIModel(iModelId, iTwinId);\n    } else {\n      alert(\"You must enter an iTwinId and an iModelId\");\n    }\n  }\n  async populate() {\n    this._iTwinIdInput = this._createTextBox({\n      label: \"iTwin Id: \",\n      id: \"HubPicker_iTwinId\",\n      tooltip: \"Enter the iTwin Id of the iModel to load\"\n    }, HubPicker._lastITwinId);\n    this._iModelIdInput = this._createTextBox({\n      label: \"iModel Id: \",\n      id: \"HubPicker_iModelId\",\n      tooltip: \"Enter the iModel Id of the iModel to load\"\n    }, HubPicker._lastIModelId);\n    const openIModelDiv = this._element.appendChild(document.createElement(\"div\"));\n    openIModelDiv.className = \"inputDiv\";\n    createButton({\n      parent: openIModelDiv,\n      value: \"Open hub iModel\",\n      inline: true,\n      handler: () => this.openIModel(),\n      tooltip: \"Download and open hub iModel\"\n    });\n  }\n}\n",
      "start": 1693508124720,
      "end": 1693508124833,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/HubPicker.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { ProcessDetector } from \"@itwin/core-bentley\";\r\nimport { createButton, createTextBox, TextBoxProps } from \"@itwin/frontend-devtools\";\r\nimport { getConfigurationString } from \"./DisplayTestApp\";\r\nimport { ToolBarDropDown } from \"./ToolBar\";\r\n\r\nexport class HubPicker extends ToolBarDropDown {\r\n  private readonly _parent: HTMLElement;\r\n  private readonly _element: HTMLElement;\r\n  private _iModelIdInput: HTMLInputElement | undefined;\r\n  private _iTwinIdInput: HTMLInputElement | undefined;\r\n  private _onOpenIModel: (iModelId: string, iTwinId: string) => void;\r\n  private static _lastITwinId: string | undefined;\r\n  private static _lastIModelId: string | undefined;\r\n  private _inputWidth = 300;\r\n  private _totalWidth = this._inputWidth + 95;\r\n\r\n  public constructor(parent: HTMLElement, onOpenIModel: (iModelId: string, iTwinId: string) => void) {\r\n    super();\r\n    if (ProcessDetector.isIOSAppFrontend) {\r\n      this._inputWidth = 255;\r\n      this._totalWidth = this._inputWidth + 110;\r\n    }\r\n    this._parent = parent;\r\n    this._onOpenIModel = onOpenIModel;\r\n    this._element = document.createElement(\"div\");\r\n    this._element.className = \"debugPanel\";\r\n    this._element.style.width = `${this._totalWidth}px`;\r\n    parent.appendChild(this._element);\r\n    if (HubPicker._lastITwinId === undefined) {\r\n      HubPicker._lastITwinId = getConfigurationString(\"iTwinId\");\r\n    }\r\n    if (HubPicker._lastIModelId === undefined) {\r\n      HubPicker._lastIModelId = getConfigurationString(\"iModelId\");\r\n    }\r\n  }\r\n\r\n  protected _open(): void { this._element.style.display = \"block\"; }\r\n  protected _close(): void { this._element.style.display = \"none\"; }\r\n  public get isOpen(): boolean { return \"none\" !== this._element.style.display; }\r\n\r\n  private _createTextBox(props: TextBoxProps, defaultValue: string | undefined) {\r\n    const div = this._element.appendChild(document.createElement(\"div\"));\r\n    div.className = \"inputDiv\";\r\n    const textbox = createTextBox({\r\n      ...props,\r\n      parent: div,\r\n      inline: true,\r\n    }).textbox;\r\n    textbox.defaultValue = defaultValue ?? \"\";\r\n    textbox.style.width = `${this._inputWidth}px`;\r\n    textbox.style.fontFamily = \"monospace\";\r\n    return textbox;\r\n  }\r\n\r\n  private openIModel() {\r\n    const iModelId = this._iModelIdInput?.value;\r\n    const iTwinId = this._iTwinIdInput?.value;\r\n    // Note: below checks for undefined OR empty.\r\n    if (iModelId && iTwinId) {\r\n      HubPicker._lastITwinId = iTwinId;\r\n      HubPicker._lastIModelId = iModelId;\r\n      this._onOpenIModel(iModelId, iTwinId);\r\n    } else {\r\n      alert(\"You must enter an iTwinId and an iModelId\");\r\n    }\r\n  }\r\n\r\n  public async populate(): Promise<void> {\r\n    this._iTwinIdInput = this._createTextBox({\r\n      label: \"iTwin Id: \",\r\n      id: \"HubPicker_iTwinId\",\r\n      tooltip: \"Enter the iTwin Id of the iModel to load\",\r\n    }, HubPicker._lastITwinId);\r\n    this._iModelIdInput = this._createTextBox({\r\n      label: \"iModel Id: \",\r\n      id: \"HubPicker_iModelId\",\r\n      tooltip: \"Enter the iModel Id of the iModel to load\",\r\n    }, HubPicker._lastIModelId);\r\n    const openIModelDiv = this._element.appendChild(document.createElement(\"div\"));\r\n    openIModelDiv.className = \"inputDiv\";\r\n    createButton({\r\n      parent: openIModelDiv,\r\n      value: \"Open hub iModel\",\r\n      inline: true,\r\n      handler: () => this.openIModel(),\r\n      tooltip: \"Download and open hub iModel\",\r\n    });\r\n  }\r\n}\r\n"
        ],
        "mappings": ";AAIA,SAAS,uBAAuB;AAChC,SAAS,cAAc,qBAAmC;AAC1D,SAAS,8BAA8B;AACvC,SAAS,uBAAuB;AAEzB,aAAM,kBAAkB,gBAAgB;AAAA,EAWtC,YAAY,QAAqB,cAA2D;AACjG,UAAM;AAJR,SAAQ,cAAc;AACtB,SAAQ,cAAc,KAAK,cAAc;AAIvC,QAAI,gBAAgB,kBAAkB;AACpC,WAAK,cAAc;AACnB,WAAK,cAAc,KAAK,cAAc;AAAA,IACxC;AACA,SAAK,UAAU;AACf,SAAK,gBAAgB;AACrB,SAAK,WAAW,SAAS,cAAc,KAAK;AAC5C,SAAK,SAAS,YAAY;AAC1B,SAAK,SAAS,MAAM,QAAQ,GAAG,KAAK,WAAW;AAC/C,WAAO,YAAY,KAAK,QAAQ;AAChC,QAAI,UAAU,iBAAiB,QAAW;AACxC,gBAAU,eAAe,uBAAuB,SAAS;AAAA,IAC3D;AACA,QAAI,UAAU,kBAAkB,QAAW;AACzC,gBAAU,gBAAgB,uBAAuB,UAAU;AAAA,IAC7D;AAAA,EACF;AAAA,EAEU,QAAc;AAAE,SAAK,SAAS,MAAM,UAAU;AAAA,EAAS;AAAA,EACvD,SAAe;AAAE,SAAK,SAAS,MAAM,UAAU;AAAA,EAAQ;AAAA,EACjE,IAAW,SAAkB;AAAE,WAAO,WAAW,KAAK,SAAS,MAAM;AAAA,EAAS;AAAA,EAEtE,eAAe,OAAqB,cAAkC;AAC5E,UAAM,MAAM,KAAK,SAAS,YAAY,SAAS,cAAc,KAAK,CAAC;AACnE,QAAI,YAAY;AAChB,UAAM,UAAU,cAAc;AAAA,MAC5B,GAAG;AAAA,MACH,QAAQ;AAAA,MACR,QAAQ;AAAA,IACV,CAAC,EAAE;AACH,YAAQ,eAAe,gBAAgB;AACvC,YAAQ,MAAM,QAAQ,GAAG,KAAK,WAAW;AACzC,YAAQ,MAAM,aAAa;AAC3B,WAAO;AAAA,EACT;AAAA,EAEQ,aAAa;AACnB,UAAM,WAAW,KAAK,gBAAgB;AACtC,UAAM,UAAU,KAAK,eAAe;AAEpC,QAAI,YAAY,SAAS;AACvB,gBAAU,eAAe;AACzB,gBAAU,gBAAgB;AAC1B,WAAK,cAAc,UAAU,OAAO;AAAA,IACtC,OAAO;AACL,YAAM,2CAA2C;AAAA,IACnD;AAAA,EACF;AAAA,EAEA,MAAa,WAA0B;AACrC,SAAK,gBAAgB,KAAK,eAAe;AAAA,MACvC,OAAO;AAAA,MACP,IAAI;AAAA,MACJ,SAAS;AAAA,IACX,GAAG,UAAU,YAAY;AACzB,SAAK,iBAAiB,KAAK,eAAe;AAAA,MACxC,OAAO;AAAA,MACP,IAAI;AAAA,MACJ,SAAS;AAAA,IACX,GAAG,UAAU,aAAa;AAC1B,UAAM,gBAAgB,KAAK,SAAS,YAAY,SAAS,cAAc,KAAK,CAAC;AAC7E,kBAAc,YAAY;AAC1B,iBAAa;AAAA,MACX,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,SAAS,MAAM,KAAK,WAAW;AAAA,MAC/B,SAAS;AAAA,IACX,CAAC;AAAA,EACH;AACF;",
        "names": []
      }
    }
  ]
}
