{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/geometry/lib/esm/serialization/DeepCompare.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Serialization\n */\n/* eslint-disable quote-props */\n/**\n * Utilities to compare json objects by searching through their properties.\n * @public\n */\nexport class DeepCompare {\n    /** Construct comparison object with relative tolerance. */\n    constructor(numberRelTol = 1.0e-12) {\n        /** Statistical accumulations during searchers. */\n        this.typeCounts = {\n            numbers: 0,\n            arrays: 0,\n            functions: 0,\n            objects: 0,\n            strings: 0,\n            booleans: 0,\n            undefined: 0,\n        };\n        /** Counts of property names encountered during various searches. */\n        this.propertyCounts = {};\n        /** Array of error descriptions. */\n        this.errorTracker = [];\n        this.numberRelTol = numberRelTol;\n    }\n    /** Test if a and b are within tolerance.\n     * * If not, push error message to errorTracker.\n     */\n    compareNumber(a, b) {\n        if (Math.abs(b - a) < this.numberRelTol * (1 + Math.abs(a) + Math.abs(b))) {\n            return this.announce(true);\n        }\n        else {\n            this.errorTracker.unshift(b);\n            this.errorTracker.unshift(a);\n            this.errorTracker.unshift(`In ${this.errorTracker[this.errorTracker.length - 1]} property: Mismatched values`);\n            return this.announce(false);\n        }\n    }\n    compareArray(a, b) {\n        if (a.length !== b.length) {\n            const aCounter = {};\n            const bCounter = {};\n            // Append object to tracker that counts the properties of each array element (which is an object) in b, ONLY AT THIS LEVEL\n            for (const i of b) {\n                if (typeof i === \"object\" && typeof i !== \"function\" && !Array.isArray(i)) {\n                    for (const property in i) {\n                        if (i.hasOwnProperty(property)) {\n                            // Add property to counter if not already there\n                            if (!bCounter.hasOwnProperty(property))\n                                bCounter[property] = 0;\n                            bCounter[property]++;\n                        }\n                    }\n                }\n            }\n            this.errorTracker.unshift(bCounter);\n            // Append object to tracker that counts the properties of each array element (which is an object) in a, ONLY AT THIS LEVEL\n            for (const i of a) {\n                if (typeof i === \"object\" && typeof i !== \"function\" && !Array.isArray(i)) {\n                    for (const property in i) {\n                        if (i.hasOwnProperty(property)) {\n                            // Add property to counter if not already there\n                            if (!aCounter.hasOwnProperty(property))\n                                aCounter[property] = 0;\n                            aCounter[property]++;\n                        }\n                    }\n                }\n            }\n            this.errorTracker.unshift(aCounter);\n            this.errorTracker.unshift(`Mismatched array lengths a: [${a.length}] b: [${b.length}]`);\n            return this.announce(false);\n        }\n        // Keep track of result for each element of array\n        let toReturn = true;\n        for (let i = 0; i < a.length; i++) {\n            if (!this.compareInternal(a[i], b[i])) {\n                toReturn = false;\n                this.errorTracker.unshift(`[${i.toString()}]`);\n                break;\n            }\n        }\n        return this.announce(toReturn);\n    }\n    compareObject(a, b) {\n        // Check that both objects contain the same amount of properties\n        if (a == null && b == null)\n            return this.announce(true);\n        if ((Object.keys(a)).length !== (Object.keys(b)).length) {\n            this.errorTracker.unshift(`Mismatched property lists [${Object.keys(a)}][${Object.keys(b)}`);\n            return this.announce(false);\n        }\n        // Keep track of result for each property of object\n        let toReturn = true;\n        for (const property in a) {\n            // Only check non-generic object properties\n            if (a.hasOwnProperty(property)) {\n                // If property does not exist in propertyCounter, add it\n                if (!this.propertyCounts.hasOwnProperty(property)) {\n                    this.propertyCounts[property] = 0;\n                }\n                this.propertyCounts[property]++;\n                // Check that same property exists in b\n                if (!(b.hasOwnProperty(property))) {\n                    this.errorTracker.unshift(`Property ${property} of A not in B`);\n                    this.errorTracker.unshift(a);\n                    this.errorTracker.unshift(b);\n                    return this.announce(false);\n                }\n                if (!this.compareInternal(a[property], b[property])) {\n                    // If not true, push property and break the loop\n                    this.errorTracker.unshift(property);\n                    toReturn = false;\n                    break;\n                }\n            }\n        }\n        return this.announce(toReturn);\n    }\n    // this is a convenient place for a breakpoint on failures in areSameStructure.\n    announce(value) {\n        if (value)\n            return true;\n        return false;\n    }\n    /** Main entry for comparing deep json objects.\n     * * errorTracker, typeCounts, and propertyCounts are cleared.\n     */\n    compare(a, b, tolerance) {\n        if (tolerance !== undefined)\n            this.numberRelTol = tolerance;\n        this.errorTracker.length = 0;\n        this.typeCounts.numbers = this.typeCounts.arrays = this.typeCounts.functions = this.typeCounts.objects = this.typeCounts.strings = this.typeCounts.booleans = this.typeCounts.undefined = 0;\n        this.propertyCounts = {};\n        return this.compareInternal(a, b);\n    }\n    // Recursive function for comparing any two nodes in a json object \"tree\"\n    compareInternal(a, b) {\n        if (typeof a !== typeof b) {\n            return this.announce(false);\n        }\n        else if ((typeof a === \"number\") && (typeof b === \"number\")) {\n            this.typeCounts.numbers++;\n            return this.compareNumber(a, b);\n        }\n        else if (Array.isArray(a) && Array.isArray(b)) {\n            this.typeCounts.arrays++;\n            return this.compareArray(a, b);\n        }\n        else if (typeof a === \"function\" && typeof b === \"function\") {\n            // No current necessity to check functions\n            this.typeCounts.functions++;\n            return true;\n        }\n        else if (typeof a === \"object\" && typeof b === \"object\") {\n            // Argument is object but not array or function\n            this.typeCounts.objects++;\n            return (a === b) ? true : this.compareObject(a, b);\n        }\n        else if (typeof a === \"string\" && typeof b === \"string\") {\n            this.typeCounts.strings++;\n            return a === b;\n        }\n        else if (typeof a === \"boolean\" && typeof b === \"boolean\") {\n            this.typeCounts.booleans++;\n            return a === b;\n        }\n        else if (typeof a === \"undefined\" && typeof b === \"undefined\") {\n            // As long as both are undefined, return true\n            this.typeCounts.undefined++;\n            return true;\n        }\n        else {\n            // Unsupported type\n            return this.announce(false);\n        }\n    }\n}\n//# sourceMappingURL=DeepCompare.js.map",
      "start": 1693508124028,
      "end": 1693508124250,
      "sourcemaps": null
    }
  ]
}
