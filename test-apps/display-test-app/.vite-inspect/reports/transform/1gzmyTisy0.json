{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend-devtools/lib/esm/effects/Convolution.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Effects\n */\nimport { UniformType, VaryingType } from \"@itwin/core-frontend\";\nimport { AddEffectTool } from \"./EffectTools\";\n/** Adds one of a collection of \"convolution kernels\" that alter a [Viewport]($frontend)'s image by blending neighboring pixels.\n * Based on https://webglfundamentals.org/webgl/lessons/webgl-image-processing-continued.html\n * @beta\n */\nexport class ConvolutionEffect extends AddEffectTool {\n    static get minArgs() { return 0; }\n    static get maxArgs() { return 0; }\n    get textureCoordFromPosition() { return true; }\n    get source() {\n        return {\n            // The vertex shader simply computes the texture coordinate for use in the fragment shader.\n            vertex: `\r\n        void effectMain(vec4 pos) {\r\n          v_texCoord = textureCoordFromPosition(pos);\r\n        }`,\n            // The fragment shader samples the pixel and its neighbors and applies the kernel.\n            fragment: `\r\n        vec4 effectMain() {\r\n          vec2 onePixel = vec2(1.0, 1.0) / u_textureSize;\r\n          vec4 colorSum =\r\n            TEXTURE(u_diffuse, v_texCoord + onePixel * vec2(-1, -1)) * u_kernel[0] +\r\n            TEXTURE(u_diffuse, v_texCoord + onePixel * vec2( 0, -1)) * u_kernel[1] +\r\n            TEXTURE(u_diffuse, v_texCoord + onePixel * vec2( 1, -1)) * u_kernel[2] +\r\n            TEXTURE(u_diffuse, v_texCoord + onePixel * vec2(-1,  0)) * u_kernel[3] +\r\n            TEXTURE(u_diffuse, v_texCoord + onePixel * vec2( 0,  0)) * u_kernel[4] +\r\n            TEXTURE(u_diffuse, v_texCoord + onePixel * vec2( 1,  0)) * u_kernel[5] +\r\n            TEXTURE(u_diffuse, v_texCoord + onePixel * vec2(-1,  1)) * u_kernel[6] +\r\n            TEXTURE(u_diffuse, v_texCoord + onePixel * vec2( 0,  1)) * u_kernel[7] +\r\n            TEXTURE(u_diffuse, v_texCoord + onePixel * vec2( 1,  1)) * u_kernel[8] ;\r\n          return vec4((colorSum / u_kernelWeight).rgb, 1);\r\n        }`,\n        };\n    }\n    defineEffect(builder) {\n        // Define the varying for the texture coordinate.\n        builder.addVarying(\"v_texCoord\", VaryingType.Vec2);\n        // Hook up the uniforms.\n        const matrix = this.matrix;\n        builder.addUniform({\n            name: \"u_textureSize\",\n            type: UniformType.Vec2,\n            bind: (uniform, context) => {\n                const rect = context.viewport.viewRect;\n                uniform.setUniform2fv([rect.width, rect.height]);\n            },\n        });\n        builder.addUniformArray({\n            name: \"u_kernel\",\n            type: UniformType.Float,\n            length: matrix.length,\n            bind: (uniform) => uniform.setUniform1fv(matrix),\n        });\n        let weight = matrix.reduce((prev, curr) => prev + curr);\n        if (weight <= 0)\n            weight = 1;\n        builder.addUniform({\n            name: \"u_kernelWeight\",\n            type: UniformType.Float,\n            bind: (uniform) => uniform.setUniform1f(weight),\n        });\n    }\n}\n/** Adds a gaussian blur screen-space effect to the selected Viewport.\n * @beta\n */\nclass GaussianBlurEffect extends ConvolutionEffect {\n    get effectName() { return \"blur\"; }\n    get matrix() {\n        return [\n            0.045, 0.122, 0.045,\n            0.122, 0.332, 0.122,\n            0.045, 0.122, 0.045,\n        ];\n    }\n}\nGaussianBlurEffect.toolId = \"GaussianBlurEffect\";\nexport { GaussianBlurEffect };\n/** Adds a screen-space unsharpen effect to the selected Viewport.\n * @beta\n */\nclass UnsharpenEffect extends ConvolutionEffect {\n    get effectName() { return \"unsharpen\"; }\n    get matrix() {\n        return [\n            -1, -1, -1,\n            -1, 9, -1,\n            -1, -1, -1,\n        ];\n    }\n}\nUnsharpenEffect.toolId = \"UnsharpenEffect\";\nexport { UnsharpenEffect };\n/** Adds a screen-space emboss effect to the selected Viewport.\n * @beta\n */\nclass EmbossEffect extends ConvolutionEffect {\n    get effectName() { return \"emboss\"; }\n    get matrix() {\n        return [\n            -2, -1, 0,\n            -1, 1, 1,\n            0, 1, 2,\n        ];\n    }\n}\nEmbossEffect.toolId = \"EmbossEffect\";\nexport { EmbossEffect };\n/** Adds a screen-space sharpen effect to the selected Viewport.\n * @beta\n */\nclass SharpenEffect extends ConvolutionEffect {\n    get effectName() { return \"sharpen\"; }\n    get matrix() {\n        return [\n            0, -1, 0,\n            -1, 5, -1,\n            0, -1, 0,\n        ];\n    }\n}\nSharpenEffect.toolId = \"SharpenEffect\";\nexport { SharpenEffect };\n/** Adds a screen-space sharpness effect to the selected Viewport.\n * @beta\n */\nclass SharpnessEffect extends ConvolutionEffect {\n    get effectName() { return \"sharpness\"; }\n    get matrix() {\n        return [\n            0, -1, 0,\n            -1, 5, -1,\n            0, -1, 0,\n        ];\n    }\n}\nSharpnessEffect.toolId = \"SharpnessEffect\";\nexport { SharpnessEffect };\n/** Adds a screen-space edge-detection effect to the selected Viewport.\n * @beta\n */\nclass EdgeDetectionEffect extends ConvolutionEffect {\n    get effectName() { return \"edgedetect\"; }\n    get matrix() {\n        return [\n            -5, 0, 0,\n            0, 0, 0,\n            0, 0, 5,\n        ];\n    }\n}\nEdgeDetectionEffect.toolId = \"EdgeDetectionEffect\";\nexport { EdgeDetectionEffect };\n//# sourceMappingURL=Convolution.js.map",
      "start": 1693508122578,
      "end": 1693508122678,
      "sourcemaps": null
    }
  ]
}
