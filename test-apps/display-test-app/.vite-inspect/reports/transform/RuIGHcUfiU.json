{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/IdPicker.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { assert, compareStringsOrUndefined, Id64, Id64Arg } from \"@itwin/core-bentley\";\r\nimport { GeometricModel3dProps, QueryBinder, QueryRowFormat } from \"@itwin/core-common\";\r\nimport { GeometricModel3dState, ScreenViewport, SpatialViewState, ViewManip } from \"@itwin/core-frontend\";\r\nimport { CheckBox, ComboBoxEntry, createButton, createCheckBox, createComboBox, createTextBox } from \"@itwin/frontend-devtools\";\r\nimport { ToolBarDropDown } from \"./ToolBar\";\r\n\r\n// cspell:ignore dehilite textbox subcat\r\n\r\nexport abstract class IdPicker extends ToolBarDropDown {\r\n  protected readonly _vp: ScreenViewport;\r\n  protected readonly _element: HTMLElement;\r\n  protected readonly _parent: HTMLElement;\r\n  protected readonly _checkboxes: HTMLInputElement[] = [];\r\n  protected readonly _availableIds = new Set<string>();\r\n\r\n  protected abstract get _elementType(): \"Model\" | \"Category\";\r\n  protected get _settingsType(): \"model\" | \"category\" { return this._elementType.toLowerCase() as \"model\" | \"category\"; }\r\n  protected get _showIn2d(): boolean { return true; }\r\n  protected abstract get _enabledIds(): Set<string>;\r\n  protected abstract changeDisplay(ids: Id64Arg, enabled: boolean): void;\r\n\r\n  protected toggleAll(enabled: boolean): void {\r\n    this.changeDisplay(this._availableIds, enabled);\r\n    for (const cb of this._checkboxes)\r\n      cb.checked = enabled;\r\n  }\r\n\r\n  protected invertAll(): void {\r\n    for (const cb of this._checkboxes) {\r\n      const enabled = !cb.checked;\r\n      cb.checked = enabled;\r\n      this.changeDisplay(cb.id, enabled);\r\n    }\r\n  }\r\n\r\n  protected get _comboBoxEntries(): ComboBoxEntry[] {\r\n    return [\r\n      { name: \"\", value: \"\" },\r\n      { name: \"Show All\", value: \"All\" },\r\n      { name: \"Hide All\", value: \"None\" },\r\n      { name: \"Invert\", value: \"Inverse\" },\r\n      { name: \"Isolate Selected\", value: \"Isolate\" },\r\n      { name: \"Hide Selected\", value: \"Hide\" },\r\n      { name: \"Hilite Enabled\", value: \"Hilite\" },\r\n      { name: \"Un-hilite Enabled\", value: \"Dehilite\" },\r\n      // Set [[BriefcaseConnection.editorToolSettings]].model/category to first enabled entry.\r\n      { name: \"Set First Active\", value: \"SetFirstActive\" },\r\n    ];\r\n  }\r\n\r\n  protected enableByIds(ids: string[]): void {\r\n    for (const id of ids)\r\n      this.enableById(id);\r\n  }\r\n\r\n  protected enableById(id: string): void {\r\n    for (const cb of this._checkboxes) {\r\n      if (cb.id === id) {\r\n        if (!cb.checked) {\r\n          cb.checked = true;\r\n          this.changeDisplay(id, true);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  protected abstract _populate(): Promise<void>;\r\n  public async populate(): Promise<void> {\r\n    this._availableIds.clear();\r\n    this._checkboxes.length = 0;\r\n    while (this._element.hasChildNodes())\r\n      this._element.removeChild(this._element.firstChild!);\r\n\r\n    const visible = this._showIn2d || this._vp.view.isSpatialView();\r\n    this._parent.style.display = visible ? \"block\" : \"none\";\r\n    if (!visible)\r\n      return;\r\n\r\n    createComboBox({\r\n      name: \"Display: \",\r\n      id: `${this._elementType}Picker_show`,\r\n      parent: this._element,\r\n      handler: (select) => {\r\n        this.show(select.value);\r\n        select.value = \"\";\r\n      },\r\n      value: \"\",\r\n      entries: this._comboBoxEntries,\r\n    });\r\n\r\n    const textbox = createTextBox({\r\n      label: \"Id: \",\r\n      id: `${this._elementType}Enable_byId`,\r\n      parent: this._element,\r\n      tooltip: \"Enter comma-separated list of Ids to enable\",\r\n      inline: true,\r\n    }).textbox;\r\n    textbox.onkeyup = (e) => {\r\n      if (e.code === \"Enter\") // enter key\r\n        this.enableByIds(textbox.value.split(\",\"));\r\n    };\r\n\r\n    await this._populate();\r\n  }\r\n\r\n  protected constructor(vp: ScreenViewport, parent: HTMLElement) {\r\n    super();\r\n    this._vp = vp;\r\n    this._parent = parent;\r\n\r\n    this._element = document.createElement(\"div\");\r\n    this._element.className = \"scrollingToolMenu\";\r\n    this._element.style.display = \"block\";\r\n\r\n    parent.appendChild(this._element);\r\n  }\r\n\r\n  public get isOpen(): boolean { return \"none\" !== this._element.style.display; }\r\n  protected _open(): void { this._element.style.display = \"block\"; }\r\n  protected _close(): void { this._element.style.display = \"none\"; }\r\n  public override get onViewChanged(): Promise<void> { return this.populate(); }\r\n\r\n  protected showOrHide(element: HTMLElement, show: boolean) {\r\n    if (element)\r\n      element.style.display = show ? \"block\" : \"none\";\r\n  }\r\n\r\n  protected addCheckbox(name: string, id: string, isChecked: boolean): CheckBox {\r\n    this._availableIds.add(id);\r\n\r\n    const cb = createCheckBox({\r\n      name,\r\n      id,\r\n      parent: this._element,\r\n      isChecked,\r\n      handler: (checkbox) => {\r\n        this.changeDisplay(checkbox.id, checkbox.checked);\r\n      },\r\n    });\r\n\r\n    this._checkboxes.push(cb.checkbox);\r\n    return cb;\r\n  }\r\n\r\n  protected show(which: string): void {\r\n    switch (which) {\r\n      case \"All\":\r\n        this.toggleAll(true);\r\n        return;\r\n      case \"None\":\r\n        this.toggleAll(false);\r\n        return;\r\n      case \"Inverse\":\r\n        this.invertAll();\r\n        return;\r\n      case \"Hilite\":\r\n      case \"Dehilite\":\r\n        this.hiliteEnabled(\"Hilite\" === which);\r\n        return;\r\n      case \"SetFirstActive\":\r\n        if (this._vp.iModel.isBriefcaseConnection()) {\r\n          const first = Array.from(this._enabledIds)[0];\r\n          this._vp.iModel.editorToolSettings[this._settingsType] = first;\r\n        }\r\n        return;\r\n      case \"\":\r\n        return;\r\n    }\r\n\r\n    this.queryIds().then((ids) => {\r\n      if (0 === ids.length)\r\n        return;\r\n\r\n      const isolate = \"Isolate\" === which;\r\n      if (isolate)\r\n        this.toggleAll(false);\r\n\r\n      this.toggleIds(ids, isolate);\r\n    }).catch((reason) => {\r\n      alert(`Error querying iModel: ${reason}`);\r\n    });\r\n  }\r\n\r\n  private async queryIds(): Promise<string[]> {\r\n    const is2d = this._vp.view.is2d();\r\n    const elementType = this._elementType;\r\n    if (is2d && elementType === \"Model\")\r\n      return [];\r\n\r\n    const selectedElems = this._vp.iModel.selectionSet.elements;\r\n    if (0 === selectedElems.size || selectedElems.size > 20) {\r\n      if (0 < selectedElems.size)\r\n        alert(\"Too many elements selected\");\r\n\r\n      return [];\r\n    }\r\n\r\n    const elemIds = `(${Array.from(selectedElems).join(\",\")})`;\r\n    const ecsql = `SELECT DISTINCT ${elementType}.Id FROM bis.GeometricElement${is2d ? \"2d\" : \"3d\"} WHERE ECInstanceId IN ${elemIds}`;\r\n    const rows = [];\r\n    for await (const queryRow of this._vp.view.iModel.createQueryReader(ecsql, undefined, { rowFormat: QueryRowFormat.UseJsPropertyNames })) {\r\n      rows.push(queryRow.toRow());\r\n    }\r\n    const column = `${elementType.toLowerCase()}.id`;\r\n    return rows.map((value) => value[column]);\r\n  }\r\n\r\n  protected toggleIds(ids: Id64Arg, enabled: boolean): void {\r\n    const boxById = new Map<string, HTMLInputElement>();\r\n    this._checkboxes.map((box) => boxById.set(box.id, box));\r\n    for (const id of Id64.iterable(ids)) {\r\n      this.changeDisplay(id, enabled);\r\n      if (boxById.get(id))\r\n        boxById.get(id)!.checked = enabled;\r\n    }\r\n  }\r\n\r\n  protected abstract hiliteEnabled(hiliteOn: boolean): void;\r\n}\r\n\r\nfunction getCategoryName(row: any): string {\r\n  return undefined !== row.label ? row.label : row.code;\r\n}\r\n\r\nconst selectUsedSpatialCategoryIds = \"SELECT DISTINCT Category.Id as CategoryId from BisCore.GeometricElement3d WHERE Category.Id IN (SELECT ECInstanceId from BisCore.SpatialCategory)\";\r\nconst selectUsedDrawingCategoryIds = \"SELECT DISTINCT Category.Id as CategoryId from BisCore.GeometricElement2d WHERE Model.Id=? AND Category.Id IN (SELECT ECInstanceId from BisCore.DrawingCategory)\";\r\nconst selectCategoryProps = \"SELECT ECInstanceId as id, CodeValue as code, UserLabel as label FROM \";\r\nconst selectSpatialCategoryProps = `${selectCategoryProps}BisCore.SpatialCategory WHERE ECInstanceId IN (${selectUsedSpatialCategoryIds})`;\r\nconst selectDrawingCategoryProps = `${selectCategoryProps}BisCore.DrawingCategory WHERE ECInstanceId IN (${selectUsedDrawingCategoryIds})`;\r\n\r\nexport class CategoryPicker extends IdPicker {\r\n  public constructor(vp: ScreenViewport, parent: HTMLElement) { super(vp, parent); }\r\n\r\n  protected get _elementType(): \"Category\" { return \"Category\"; }\r\n  protected get _enabledIds() { return this._vp.view.categorySelector.categories; }\r\n  protected changeDisplay(ids: Id64Arg, enabled: boolean) { this._vp.changeCategoryDisplay(ids, enabled); }\r\n\r\n  protected override get _comboBoxEntries(): ComboBoxEntry[] {\r\n    const entries = super._comboBoxEntries;\r\n    entries.push({ name: \"All SubCategories\", value: \"Subcategories\" });\r\n    return entries;\r\n  }\r\n\r\n  protected async _populate(): Promise<void> {\r\n    this._element.appendChild(document.createElement(\"hr\"));\r\n\r\n    const view = this._vp.view;\r\n    if (!view.iModel.isOpen)\r\n      return;\r\n\r\n    const ecsql = view.is3d() ? selectSpatialCategoryProps : selectDrawingCategoryProps;\r\n    const bindings = view.is2d() ? [view.baseModelId] : undefined;\r\n    const rows: any[] = [];\r\n    for await (const queryRow of view.iModel.createQueryReader(`${ecsql}`, QueryBinder.from(bindings), { rowFormat: QueryRowFormat.UseJsPropertyNames })) {\r\n      rows.push(queryRow.toRow());\r\n    }\r\n    rows.sort((lhs, rhs) => {\r\n      const lhName = getCategoryName(lhs);\r\n      const rhName = getCategoryName(rhs);\r\n      if (lhName < rhName)\r\n        return -1;\r\n      else if (lhName > rhName)\r\n        return 1;\r\n      else\r\n        return 0;\r\n    });\r\n\r\n    for (const row of rows) {\r\n      const name = getCategoryName(row);\r\n      this.addCheckbox(name, row.id, view.categorySelector.has(row.id));\r\n    }\r\n\r\n    // Remove any unused categories from category selector (otherwise areAllEnabled criterion is broken).\r\n    let unusedCategories: Set<string> | undefined;\r\n    for (const categoryId of view.categorySelector.categories) {\r\n      if (!this._availableIds.has(categoryId)) {\r\n        if (undefined === unusedCategories)\r\n          unusedCategories = new Set<string>();\r\n\r\n        unusedCategories.add(categoryId);\r\n      }\r\n    }\r\n\r\n    if (undefined !== unusedCategories)\r\n      this._vp.changeCategoryDisplay(unusedCategories, false);\r\n  }\r\n\r\n  protected override show(which: string): void {\r\n    if (\"Subcategories\" === which)\r\n      this._vp.changeCategoryDisplay(this._enabledIds, true, true);\r\n    else\r\n      super.show(which);\r\n  }\r\n\r\n  protected hiliteEnabled(hiliteOn: boolean): void {\r\n    const catIds = this._enabledIds;\r\n    const cache = this._vp.iModel.subcategories;\r\n    const set = this._vp.iModel.hilited.subcategories;\r\n    for (const catId of catIds) {\r\n      const subcatIds = cache.getSubCategories(catId);\r\n      if (undefined !== subcatIds) {\r\n        for (const subcatId of subcatIds) {\r\n          if (hiliteOn)\r\n            set.addId(subcatId);\r\n          else\r\n            set.deleteId(subcatId);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport class ModelPicker extends IdPicker {\r\n  private _availableIdList: string[] = [];\r\n  private _stepIndex = -1;\r\n  private _fitOnStep = true;\r\n  private _planProjectionIds: string[] = [];\r\n\r\n  public constructor(vp: ScreenViewport, parent: HTMLElement) { super(vp, parent); }\r\n\r\n  protected get _elementType(): \"Model\" { return \"Model\"; }\r\n  protected get _enabledIds() { return (this._vp.view as SpatialViewState).modelSelector.models; }\r\n  protected override get _showIn2d() { return false; }\r\n  protected changeDisplay(ids: Id64Arg, enabled: boolean) {\r\n    if (enabled)\r\n      this._vp.addViewedModels(ids); // eslint-disable-line @typescript-eslint/no-floating-promises\r\n    else\r\n      this._vp.changeModelDisplay(ids, enabled);\r\n  }\r\n\r\n  protected hiliteEnabled(hiliteOn: boolean): void {\r\n    const modelIds = this._enabledIds;\r\n    const hilites = this._vp.iModel.hilited;\r\n    for (const modelId of modelIds) {\r\n      if (hiliteOn)\r\n        hilites.models.addId(modelId);\r\n      else\r\n        hilites.models.deleteId(modelId);\r\n    }\r\n  }\r\n\r\n  protected async _populate(): Promise<void> {\r\n    const buttons = document.createElement(\"div\");\r\n    buttons.style.textAlign = \"center\";\r\n    createButton({\r\n      parent: buttons,\r\n      value: \"⏪\",\r\n      inline: true,\r\n      handler: () => this.stepToIndex(0),\r\n      tooltip: \"Isolate first\",\r\n    });\r\n    createButton({\r\n      parent: buttons,\r\n      value: \"◀️\",\r\n      inline: true,\r\n      handler: () => this.stepToIndex(this._stepIndex - 1),\r\n      tooltip: \"Isolate previous\",\r\n    });\r\n    createButton({\r\n      parent: buttons,\r\n      value: \"➕\",\r\n      inline: true,\r\n      handler: () => {\r\n        const enabledIds = this._enabledIds;\r\n        for (let i = 0; i < this._availableIdList.length; i++) {\r\n          if (enabledIds.has(this._availableIdList[i])) {\r\n            this.stepToIndex(i);\r\n            break;\r\n          }\r\n        }\r\n      },\r\n      tooltip: \"Set first enabled as step index\",\r\n    });\r\n    const fit = createButton({\r\n      parent: buttons,\r\n      value: \"⛶\",\r\n      inline: true,\r\n      handler: () => {\r\n        this._fitOnStep = !this._fitOnStep;\r\n        fit.style.borderStyle = this._fitOnStep ? \"inset\" : \"outset\";\r\n      },\r\n      tooltip: \"Fit after isolate\",\r\n    }).button;\r\n    fit.style.borderStyle = \"inset\";\r\n    createButton({\r\n      parent: buttons,\r\n      value: \"▶️\",\r\n      inline: true,\r\n      handler: () => this.stepToIndex(this._stepIndex + 1),\r\n      tooltip: \"Isolate next\",\r\n    });\r\n    createButton({\r\n      parent: buttons,\r\n      value: \"⏩\",\r\n      inline: true,\r\n      handler: () => this.stepToIndex(this._availableIdList.length - 1),\r\n      tooltip: \"Isolate last\",\r\n    });\r\n    this._element.appendChild(buttons);\r\n\r\n    const view = this._vp.view;\r\n    assert(undefined !== view && view.isSpatialView());\r\n\r\n    const query = { from: GeometricModel3dState.classFullName, wantPrivate: true };\r\n    const props = await view.iModel.models.queryProps(query);\r\n    props.forEach((prop) => {\r\n      if (prop.isPrivate)\r\n        prop.name = `~${prop.name}`;\r\n    });\r\n\r\n    props.sort((lhs, rhs) => compareStringsOrUndefined(lhs.name, rhs.name));\r\n\r\n    const selector = view.modelSelector;\r\n    for (const prop of props) {\r\n      if (undefined !== prop.id && undefined !== prop.name) {\r\n        this.addCheckbox(prop.name, prop.id, selector.has(prop.id));\r\n        if ((prop as GeometricModel3dProps).isPlanProjection)\r\n          this._planProjectionIds.push(prop.id);\r\n      }\r\n    }\r\n\r\n    this._availableIdList = Array.from(this._availableIds);\r\n  }\r\n\r\n  private stepToIndex(index: number): void {\r\n    if (index < 0 || index >= this._availableIdList.length)\r\n      return;\r\n\r\n    this._stepIndex = index;\r\n    this.toggleAll(false);\r\n    this.enableById(this._availableIdList[index]);\r\n\r\n    if (this._fitOnStep)\r\n      ViewManip.fitView(this._vp, true);\r\n  }\r\n\r\n  protected override get _comboBoxEntries() {\r\n    const entries = super._comboBoxEntries;\r\n    entries.push({ name: \"Plan Projections\", value: \"PlanProjections\" });\r\n    return entries;\r\n  }\r\n\r\n  protected override show(which: string) {\r\n    if (\"PlanProjections\" === which) {\r\n      this.toggleAll(false);\r\n      this.toggleIds(this._planProjectionIds, true);\r\n    } else {\r\n      super.show(which);\r\n    }\r\n  }\r\n}\r\n",
      "start": 1693508124563,
      "end": 1693508124709,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { assert, compareStringsOrUndefined, Id64 } from \"@itwin/core-bentley\";\nimport { QueryBinder, QueryRowFormat } from \"@itwin/core-common\";\nimport { GeometricModel3dState, ViewManip } from \"@itwin/core-frontend\";\nimport { createButton, createCheckBox, createComboBox, createTextBox } from \"@itwin/frontend-devtools\";\nimport { ToolBarDropDown } from \"./ToolBar\";\nexport class IdPicker extends ToolBarDropDown {\n  constructor(vp, parent) {\n    super();\n    this._checkboxes = [];\n    this._availableIds = /* @__PURE__ */ new Set();\n    this._vp = vp;\n    this._parent = parent;\n    this._element = document.createElement(\"div\");\n    this._element.className = \"scrollingToolMenu\";\n    this._element.style.display = \"block\";\n    parent.appendChild(this._element);\n  }\n  get _settingsType() {\n    return this._elementType.toLowerCase();\n  }\n  get _showIn2d() {\n    return true;\n  }\n  toggleAll(enabled) {\n    this.changeDisplay(this._availableIds, enabled);\n    for (const cb of this._checkboxes)\n      cb.checked = enabled;\n  }\n  invertAll() {\n    for (const cb of this._checkboxes) {\n      const enabled = !cb.checked;\n      cb.checked = enabled;\n      this.changeDisplay(cb.id, enabled);\n    }\n  }\n  get _comboBoxEntries() {\n    return [\n      { name: \"\", value: \"\" },\n      { name: \"Show All\", value: \"All\" },\n      { name: \"Hide All\", value: \"None\" },\n      { name: \"Invert\", value: \"Inverse\" },\n      { name: \"Isolate Selected\", value: \"Isolate\" },\n      { name: \"Hide Selected\", value: \"Hide\" },\n      { name: \"Hilite Enabled\", value: \"Hilite\" },\n      { name: \"Un-hilite Enabled\", value: \"Dehilite\" },\n      // Set [[BriefcaseConnection.editorToolSettings]].model/category to first enabled entry.\n      { name: \"Set First Active\", value: \"SetFirstActive\" }\n    ];\n  }\n  enableByIds(ids) {\n    for (const id of ids)\n      this.enableById(id);\n  }\n  enableById(id) {\n    for (const cb of this._checkboxes) {\n      if (cb.id === id) {\n        if (!cb.checked) {\n          cb.checked = true;\n          this.changeDisplay(id, true);\n        }\n        break;\n      }\n    }\n  }\n  async populate() {\n    this._availableIds.clear();\n    this._checkboxes.length = 0;\n    while (this._element.hasChildNodes())\n      this._element.removeChild(this._element.firstChild);\n    const visible = this._showIn2d || this._vp.view.isSpatialView();\n    this._parent.style.display = visible ? \"block\" : \"none\";\n    if (!visible)\n      return;\n    createComboBox({\n      name: \"Display: \",\n      id: `${this._elementType}Picker_show`,\n      parent: this._element,\n      handler: (select) => {\n        this.show(select.value);\n        select.value = \"\";\n      },\n      value: \"\",\n      entries: this._comboBoxEntries\n    });\n    const textbox = createTextBox({\n      label: \"Id: \",\n      id: `${this._elementType}Enable_byId`,\n      parent: this._element,\n      tooltip: \"Enter comma-separated list of Ids to enable\",\n      inline: true\n    }).textbox;\n    textbox.onkeyup = (e) => {\n      if (e.code === \"Enter\")\n        this.enableByIds(textbox.value.split(\",\"));\n    };\n    await this._populate();\n  }\n  get isOpen() {\n    return \"none\" !== this._element.style.display;\n  }\n  _open() {\n    this._element.style.display = \"block\";\n  }\n  _close() {\n    this._element.style.display = \"none\";\n  }\n  get onViewChanged() {\n    return this.populate();\n  }\n  showOrHide(element, show) {\n    if (element)\n      element.style.display = show ? \"block\" : \"none\";\n  }\n  addCheckbox(name, id, isChecked) {\n    this._availableIds.add(id);\n    const cb = createCheckBox({\n      name,\n      id,\n      parent: this._element,\n      isChecked,\n      handler: (checkbox) => {\n        this.changeDisplay(checkbox.id, checkbox.checked);\n      }\n    });\n    this._checkboxes.push(cb.checkbox);\n    return cb;\n  }\n  show(which) {\n    switch (which) {\n      case \"All\":\n        this.toggleAll(true);\n        return;\n      case \"None\":\n        this.toggleAll(false);\n        return;\n      case \"Inverse\":\n        this.invertAll();\n        return;\n      case \"Hilite\":\n      case \"Dehilite\":\n        this.hiliteEnabled(\"Hilite\" === which);\n        return;\n      case \"SetFirstActive\":\n        if (this._vp.iModel.isBriefcaseConnection()) {\n          const first = Array.from(this._enabledIds)[0];\n          this._vp.iModel.editorToolSettings[this._settingsType] = first;\n        }\n        return;\n      case \"\":\n        return;\n    }\n    this.queryIds().then((ids) => {\n      if (0 === ids.length)\n        return;\n      const isolate = \"Isolate\" === which;\n      if (isolate)\n        this.toggleAll(false);\n      this.toggleIds(ids, isolate);\n    }).catch((reason) => {\n      alert(`Error querying iModel: ${reason}`);\n    });\n  }\n  async queryIds() {\n    const is2d = this._vp.view.is2d();\n    const elementType = this._elementType;\n    if (is2d && elementType === \"Model\")\n      return [];\n    const selectedElems = this._vp.iModel.selectionSet.elements;\n    if (0 === selectedElems.size || selectedElems.size > 20) {\n      if (0 < selectedElems.size)\n        alert(\"Too many elements selected\");\n      return [];\n    }\n    const elemIds = `(${Array.from(selectedElems).join(\",\")})`;\n    const ecsql = `SELECT DISTINCT ${elementType}.Id FROM bis.GeometricElement${is2d ? \"2d\" : \"3d\"} WHERE ECInstanceId IN ${elemIds}`;\n    const rows = [];\n    for await (const queryRow of this._vp.view.iModel.createQueryReader(ecsql, void 0, { rowFormat: QueryRowFormat.UseJsPropertyNames })) {\n      rows.push(queryRow.toRow());\n    }\n    const column = `${elementType.toLowerCase()}.id`;\n    return rows.map((value) => value[column]);\n  }\n  toggleIds(ids, enabled) {\n    const boxById = /* @__PURE__ */ new Map();\n    this._checkboxes.map((box) => boxById.set(box.id, box));\n    for (const id of Id64.iterable(ids)) {\n      this.changeDisplay(id, enabled);\n      if (boxById.get(id))\n        boxById.get(id).checked = enabled;\n    }\n  }\n}\nfunction getCategoryName(row) {\n  return void 0 !== row.label ? row.label : row.code;\n}\nconst selectUsedSpatialCategoryIds = \"SELECT DISTINCT Category.Id as CategoryId from BisCore.GeometricElement3d WHERE Category.Id IN (SELECT ECInstanceId from BisCore.SpatialCategory)\";\nconst selectUsedDrawingCategoryIds = \"SELECT DISTINCT Category.Id as CategoryId from BisCore.GeometricElement2d WHERE Model.Id=? AND Category.Id IN (SELECT ECInstanceId from BisCore.DrawingCategory)\";\nconst selectCategoryProps = \"SELECT ECInstanceId as id, CodeValue as code, UserLabel as label FROM \";\nconst selectSpatialCategoryProps = `${selectCategoryProps}BisCore.SpatialCategory WHERE ECInstanceId IN (${selectUsedSpatialCategoryIds})`;\nconst selectDrawingCategoryProps = `${selectCategoryProps}BisCore.DrawingCategory WHERE ECInstanceId IN (${selectUsedDrawingCategoryIds})`;\nexport class CategoryPicker extends IdPicker {\n  constructor(vp, parent) {\n    super(vp, parent);\n  }\n  get _elementType() {\n    return \"Category\";\n  }\n  get _enabledIds() {\n    return this._vp.view.categorySelector.categories;\n  }\n  changeDisplay(ids, enabled) {\n    this._vp.changeCategoryDisplay(ids, enabled);\n  }\n  get _comboBoxEntries() {\n    const entries = super._comboBoxEntries;\n    entries.push({ name: \"All SubCategories\", value: \"Subcategories\" });\n    return entries;\n  }\n  async _populate() {\n    this._element.appendChild(document.createElement(\"hr\"));\n    const view = this._vp.view;\n    if (!view.iModel.isOpen)\n      return;\n    const ecsql = view.is3d() ? selectSpatialCategoryProps : selectDrawingCategoryProps;\n    const bindings = view.is2d() ? [view.baseModelId] : void 0;\n    const rows = [];\n    for await (const queryRow of view.iModel.createQueryReader(`${ecsql}`, QueryBinder.from(bindings), { rowFormat: QueryRowFormat.UseJsPropertyNames })) {\n      rows.push(queryRow.toRow());\n    }\n    rows.sort((lhs, rhs) => {\n      const lhName = getCategoryName(lhs);\n      const rhName = getCategoryName(rhs);\n      if (lhName < rhName)\n        return -1;\n      else if (lhName > rhName)\n        return 1;\n      else\n        return 0;\n    });\n    for (const row of rows) {\n      const name = getCategoryName(row);\n      this.addCheckbox(name, row.id, view.categorySelector.has(row.id));\n    }\n    let unusedCategories;\n    for (const categoryId of view.categorySelector.categories) {\n      if (!this._availableIds.has(categoryId)) {\n        if (void 0 === unusedCategories)\n          unusedCategories = /* @__PURE__ */ new Set();\n        unusedCategories.add(categoryId);\n      }\n    }\n    if (void 0 !== unusedCategories)\n      this._vp.changeCategoryDisplay(unusedCategories, false);\n  }\n  show(which) {\n    if (\"Subcategories\" === which)\n      this._vp.changeCategoryDisplay(this._enabledIds, true, true);\n    else\n      super.show(which);\n  }\n  hiliteEnabled(hiliteOn) {\n    const catIds = this._enabledIds;\n    const cache = this._vp.iModel.subcategories;\n    const set = this._vp.iModel.hilited.subcategories;\n    for (const catId of catIds) {\n      const subcatIds = cache.getSubCategories(catId);\n      if (void 0 !== subcatIds) {\n        for (const subcatId of subcatIds) {\n          if (hiliteOn)\n            set.addId(subcatId);\n          else\n            set.deleteId(subcatId);\n        }\n      }\n    }\n  }\n}\nexport class ModelPicker extends IdPicker {\n  constructor(vp, parent) {\n    super(vp, parent);\n    this._availableIdList = [];\n    this._stepIndex = -1;\n    this._fitOnStep = true;\n    this._planProjectionIds = [];\n  }\n  get _elementType() {\n    return \"Model\";\n  }\n  get _enabledIds() {\n    return this._vp.view.modelSelector.models;\n  }\n  get _showIn2d() {\n    return false;\n  }\n  changeDisplay(ids, enabled) {\n    if (enabled)\n      this._vp.addViewedModels(ids);\n    else\n      this._vp.changeModelDisplay(ids, enabled);\n  }\n  hiliteEnabled(hiliteOn) {\n    const modelIds = this._enabledIds;\n    const hilites = this._vp.iModel.hilited;\n    for (const modelId of modelIds) {\n      if (hiliteOn)\n        hilites.models.addId(modelId);\n      else\n        hilites.models.deleteId(modelId);\n    }\n  }\n  async _populate() {\n    const buttons = document.createElement(\"div\");\n    buttons.style.textAlign = \"center\";\n    createButton({\n      parent: buttons,\n      value: \"⏪\",\n      inline: true,\n      handler: () => this.stepToIndex(0),\n      tooltip: \"Isolate first\"\n    });\n    createButton({\n      parent: buttons,\n      value: \"◀️\",\n      inline: true,\n      handler: () => this.stepToIndex(this._stepIndex - 1),\n      tooltip: \"Isolate previous\"\n    });\n    createButton({\n      parent: buttons,\n      value: \"➕\",\n      inline: true,\n      handler: () => {\n        const enabledIds = this._enabledIds;\n        for (let i = 0; i < this._availableIdList.length; i++) {\n          if (enabledIds.has(this._availableIdList[i])) {\n            this.stepToIndex(i);\n            break;\n          }\n        }\n      },\n      tooltip: \"Set first enabled as step index\"\n    });\n    const fit = createButton({\n      parent: buttons,\n      value: \"⛶\",\n      inline: true,\n      handler: () => {\n        this._fitOnStep = !this._fitOnStep;\n        fit.style.borderStyle = this._fitOnStep ? \"inset\" : \"outset\";\n      },\n      tooltip: \"Fit after isolate\"\n    }).button;\n    fit.style.borderStyle = \"inset\";\n    createButton({\n      parent: buttons,\n      value: \"▶️\",\n      inline: true,\n      handler: () => this.stepToIndex(this._stepIndex + 1),\n      tooltip: \"Isolate next\"\n    });\n    createButton({\n      parent: buttons,\n      value: \"⏩\",\n      inline: true,\n      handler: () => this.stepToIndex(this._availableIdList.length - 1),\n      tooltip: \"Isolate last\"\n    });\n    this._element.appendChild(buttons);\n    const view = this._vp.view;\n    assert(void 0 !== view && view.isSpatialView());\n    const query = { from: GeometricModel3dState.classFullName, wantPrivate: true };\n    const props = await view.iModel.models.queryProps(query);\n    props.forEach((prop) => {\n      if (prop.isPrivate)\n        prop.name = `~${prop.name}`;\n    });\n    props.sort((lhs, rhs) => compareStringsOrUndefined(lhs.name, rhs.name));\n    const selector = view.modelSelector;\n    for (const prop of props) {\n      if (void 0 !== prop.id && void 0 !== prop.name) {\n        this.addCheckbox(prop.name, prop.id, selector.has(prop.id));\n        if (prop.isPlanProjection)\n          this._planProjectionIds.push(prop.id);\n      }\n    }\n    this._availableIdList = Array.from(this._availableIds);\n  }\n  stepToIndex(index) {\n    if (index < 0 || index >= this._availableIdList.length)\n      return;\n    this._stepIndex = index;\n    this.toggleAll(false);\n    this.enableById(this._availableIdList[index]);\n    if (this._fitOnStep)\n      ViewManip.fitView(this._vp, true);\n  }\n  get _comboBoxEntries() {\n    const entries = super._comboBoxEntries;\n    entries.push({ name: \"Plan Projections\", value: \"PlanProjections\" });\n    return entries;\n  }\n  show(which) {\n    if (\"PlanProjections\" === which) {\n      this.toggleAll(false);\n      this.toggleIds(this._planProjectionIds, true);\n    } else {\n      super.show(which);\n    }\n  }\n}\n",
      "start": 1693508124709,
      "end": 1693508124818,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/IdPicker.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { assert, compareStringsOrUndefined, Id64, Id64Arg } from \"@itwin/core-bentley\";\r\nimport { GeometricModel3dProps, QueryBinder, QueryRowFormat } from \"@itwin/core-common\";\r\nimport { GeometricModel3dState, ScreenViewport, SpatialViewState, ViewManip } from \"@itwin/core-frontend\";\r\nimport { CheckBox, ComboBoxEntry, createButton, createCheckBox, createComboBox, createTextBox } from \"@itwin/frontend-devtools\";\r\nimport { ToolBarDropDown } from \"./ToolBar\";\r\n\r\n// cspell:ignore dehilite textbox subcat\r\n\r\nexport abstract class IdPicker extends ToolBarDropDown {\r\n  protected readonly _vp: ScreenViewport;\r\n  protected readonly _element: HTMLElement;\r\n  protected readonly _parent: HTMLElement;\r\n  protected readonly _checkboxes: HTMLInputElement[] = [];\r\n  protected readonly _availableIds = new Set<string>();\r\n\r\n  protected abstract get _elementType(): \"Model\" | \"Category\";\r\n  protected get _settingsType(): \"model\" | \"category\" { return this._elementType.toLowerCase() as \"model\" | \"category\"; }\r\n  protected get _showIn2d(): boolean { return true; }\r\n  protected abstract get _enabledIds(): Set<string>;\r\n  protected abstract changeDisplay(ids: Id64Arg, enabled: boolean): void;\r\n\r\n  protected toggleAll(enabled: boolean): void {\r\n    this.changeDisplay(this._availableIds, enabled);\r\n    for (const cb of this._checkboxes)\r\n      cb.checked = enabled;\r\n  }\r\n\r\n  protected invertAll(): void {\r\n    for (const cb of this._checkboxes) {\r\n      const enabled = !cb.checked;\r\n      cb.checked = enabled;\r\n      this.changeDisplay(cb.id, enabled);\r\n    }\r\n  }\r\n\r\n  protected get _comboBoxEntries(): ComboBoxEntry[] {\r\n    return [\r\n      { name: \"\", value: \"\" },\r\n      { name: \"Show All\", value: \"All\" },\r\n      { name: \"Hide All\", value: \"None\" },\r\n      { name: \"Invert\", value: \"Inverse\" },\r\n      { name: \"Isolate Selected\", value: \"Isolate\" },\r\n      { name: \"Hide Selected\", value: \"Hide\" },\r\n      { name: \"Hilite Enabled\", value: \"Hilite\" },\r\n      { name: \"Un-hilite Enabled\", value: \"Dehilite\" },\r\n      // Set [[BriefcaseConnection.editorToolSettings]].model/category to first enabled entry.\r\n      { name: \"Set First Active\", value: \"SetFirstActive\" },\r\n    ];\r\n  }\r\n\r\n  protected enableByIds(ids: string[]): void {\r\n    for (const id of ids)\r\n      this.enableById(id);\r\n  }\r\n\r\n  protected enableById(id: string): void {\r\n    for (const cb of this._checkboxes) {\r\n      if (cb.id === id) {\r\n        if (!cb.checked) {\r\n          cb.checked = true;\r\n          this.changeDisplay(id, true);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  protected abstract _populate(): Promise<void>;\r\n  public async populate(): Promise<void> {\r\n    this._availableIds.clear();\r\n    this._checkboxes.length = 0;\r\n    while (this._element.hasChildNodes())\r\n      this._element.removeChild(this._element.firstChild!);\r\n\r\n    const visible = this._showIn2d || this._vp.view.isSpatialView();\r\n    this._parent.style.display = visible ? \"block\" : \"none\";\r\n    if (!visible)\r\n      return;\r\n\r\n    createComboBox({\r\n      name: \"Display: \",\r\n      id: `${this._elementType}Picker_show`,\r\n      parent: this._element,\r\n      handler: (select) => {\r\n        this.show(select.value);\r\n        select.value = \"\";\r\n      },\r\n      value: \"\",\r\n      entries: this._comboBoxEntries,\r\n    });\r\n\r\n    const textbox = createTextBox({\r\n      label: \"Id: \",\r\n      id: `${this._elementType}Enable_byId`,\r\n      parent: this._element,\r\n      tooltip: \"Enter comma-separated list of Ids to enable\",\r\n      inline: true,\r\n    }).textbox;\r\n    textbox.onkeyup = (e) => {\r\n      if (e.code === \"Enter\") // enter key\r\n        this.enableByIds(textbox.value.split(\",\"));\r\n    };\r\n\r\n    await this._populate();\r\n  }\r\n\r\n  protected constructor(vp: ScreenViewport, parent: HTMLElement) {\r\n    super();\r\n    this._vp = vp;\r\n    this._parent = parent;\r\n\r\n    this._element = document.createElement(\"div\");\r\n    this._element.className = \"scrollingToolMenu\";\r\n    this._element.style.display = \"block\";\r\n\r\n    parent.appendChild(this._element);\r\n  }\r\n\r\n  public get isOpen(): boolean { return \"none\" !== this._element.style.display; }\r\n  protected _open(): void { this._element.style.display = \"block\"; }\r\n  protected _close(): void { this._element.style.display = \"none\"; }\r\n  public override get onViewChanged(): Promise<void> { return this.populate(); }\r\n\r\n  protected showOrHide(element: HTMLElement, show: boolean) {\r\n    if (element)\r\n      element.style.display = show ? \"block\" : \"none\";\r\n  }\r\n\r\n  protected addCheckbox(name: string, id: string, isChecked: boolean): CheckBox {\r\n    this._availableIds.add(id);\r\n\r\n    const cb = createCheckBox({\r\n      name,\r\n      id,\r\n      parent: this._element,\r\n      isChecked,\r\n      handler: (checkbox) => {\r\n        this.changeDisplay(checkbox.id, checkbox.checked);\r\n      },\r\n    });\r\n\r\n    this._checkboxes.push(cb.checkbox);\r\n    return cb;\r\n  }\r\n\r\n  protected show(which: string): void {\r\n    switch (which) {\r\n      case \"All\":\r\n        this.toggleAll(true);\r\n        return;\r\n      case \"None\":\r\n        this.toggleAll(false);\r\n        return;\r\n      case \"Inverse\":\r\n        this.invertAll();\r\n        return;\r\n      case \"Hilite\":\r\n      case \"Dehilite\":\r\n        this.hiliteEnabled(\"Hilite\" === which);\r\n        return;\r\n      case \"SetFirstActive\":\r\n        if (this._vp.iModel.isBriefcaseConnection()) {\r\n          const first = Array.from(this._enabledIds)[0];\r\n          this._vp.iModel.editorToolSettings[this._settingsType] = first;\r\n        }\r\n        return;\r\n      case \"\":\r\n        return;\r\n    }\r\n\r\n    this.queryIds().then((ids) => {\r\n      if (0 === ids.length)\r\n        return;\r\n\r\n      const isolate = \"Isolate\" === which;\r\n      if (isolate)\r\n        this.toggleAll(false);\r\n\r\n      this.toggleIds(ids, isolate);\r\n    }).catch((reason) => {\r\n      alert(`Error querying iModel: ${reason}`);\r\n    });\r\n  }\r\n\r\n  private async queryIds(): Promise<string[]> {\r\n    const is2d = this._vp.view.is2d();\r\n    const elementType = this._elementType;\r\n    if (is2d && elementType === \"Model\")\r\n      return [];\r\n\r\n    const selectedElems = this._vp.iModel.selectionSet.elements;\r\n    if (0 === selectedElems.size || selectedElems.size > 20) {\r\n      if (0 < selectedElems.size)\r\n        alert(\"Too many elements selected\");\r\n\r\n      return [];\r\n    }\r\n\r\n    const elemIds = `(${Array.from(selectedElems).join(\",\")})`;\r\n    const ecsql = `SELECT DISTINCT ${elementType}.Id FROM bis.GeometricElement${is2d ? \"2d\" : \"3d\"} WHERE ECInstanceId IN ${elemIds}`;\r\n    const rows = [];\r\n    for await (const queryRow of this._vp.view.iModel.createQueryReader(ecsql, undefined, { rowFormat: QueryRowFormat.UseJsPropertyNames })) {\r\n      rows.push(queryRow.toRow());\r\n    }\r\n    const column = `${elementType.toLowerCase()}.id`;\r\n    return rows.map((value) => value[column]);\r\n  }\r\n\r\n  protected toggleIds(ids: Id64Arg, enabled: boolean): void {\r\n    const boxById = new Map<string, HTMLInputElement>();\r\n    this._checkboxes.map((box) => boxById.set(box.id, box));\r\n    for (const id of Id64.iterable(ids)) {\r\n      this.changeDisplay(id, enabled);\r\n      if (boxById.get(id))\r\n        boxById.get(id)!.checked = enabled;\r\n    }\r\n  }\r\n\r\n  protected abstract hiliteEnabled(hiliteOn: boolean): void;\r\n}\r\n\r\nfunction getCategoryName(row: any): string {\r\n  return undefined !== row.label ? row.label : row.code;\r\n}\r\n\r\nconst selectUsedSpatialCategoryIds = \"SELECT DISTINCT Category.Id as CategoryId from BisCore.GeometricElement3d WHERE Category.Id IN (SELECT ECInstanceId from BisCore.SpatialCategory)\";\r\nconst selectUsedDrawingCategoryIds = \"SELECT DISTINCT Category.Id as CategoryId from BisCore.GeometricElement2d WHERE Model.Id=? AND Category.Id IN (SELECT ECInstanceId from BisCore.DrawingCategory)\";\r\nconst selectCategoryProps = \"SELECT ECInstanceId as id, CodeValue as code, UserLabel as label FROM \";\r\nconst selectSpatialCategoryProps = `${selectCategoryProps}BisCore.SpatialCategory WHERE ECInstanceId IN (${selectUsedSpatialCategoryIds})`;\r\nconst selectDrawingCategoryProps = `${selectCategoryProps}BisCore.DrawingCategory WHERE ECInstanceId IN (${selectUsedDrawingCategoryIds})`;\r\n\r\nexport class CategoryPicker extends IdPicker {\r\n  public constructor(vp: ScreenViewport, parent: HTMLElement) { super(vp, parent); }\r\n\r\n  protected get _elementType(): \"Category\" { return \"Category\"; }\r\n  protected get _enabledIds() { return this._vp.view.categorySelector.categories; }\r\n  protected changeDisplay(ids: Id64Arg, enabled: boolean) { this._vp.changeCategoryDisplay(ids, enabled); }\r\n\r\n  protected override get _comboBoxEntries(): ComboBoxEntry[] {\r\n    const entries = super._comboBoxEntries;\r\n    entries.push({ name: \"All SubCategories\", value: \"Subcategories\" });\r\n    return entries;\r\n  }\r\n\r\n  protected async _populate(): Promise<void> {\r\n    this._element.appendChild(document.createElement(\"hr\"));\r\n\r\n    const view = this._vp.view;\r\n    if (!view.iModel.isOpen)\r\n      return;\r\n\r\n    const ecsql = view.is3d() ? selectSpatialCategoryProps : selectDrawingCategoryProps;\r\n    const bindings = view.is2d() ? [view.baseModelId] : undefined;\r\n    const rows: any[] = [];\r\n    for await (const queryRow of view.iModel.createQueryReader(`${ecsql}`, QueryBinder.from(bindings), { rowFormat: QueryRowFormat.UseJsPropertyNames })) {\r\n      rows.push(queryRow.toRow());\r\n    }\r\n    rows.sort((lhs, rhs) => {\r\n      const lhName = getCategoryName(lhs);\r\n      const rhName = getCategoryName(rhs);\r\n      if (lhName < rhName)\r\n        return -1;\r\n      else if (lhName > rhName)\r\n        return 1;\r\n      else\r\n        return 0;\r\n    });\r\n\r\n    for (const row of rows) {\r\n      const name = getCategoryName(row);\r\n      this.addCheckbox(name, row.id, view.categorySelector.has(row.id));\r\n    }\r\n\r\n    // Remove any unused categories from category selector (otherwise areAllEnabled criterion is broken).\r\n    let unusedCategories: Set<string> | undefined;\r\n    for (const categoryId of view.categorySelector.categories) {\r\n      if (!this._availableIds.has(categoryId)) {\r\n        if (undefined === unusedCategories)\r\n          unusedCategories = new Set<string>();\r\n\r\n        unusedCategories.add(categoryId);\r\n      }\r\n    }\r\n\r\n    if (undefined !== unusedCategories)\r\n      this._vp.changeCategoryDisplay(unusedCategories, false);\r\n  }\r\n\r\n  protected override show(which: string): void {\r\n    if (\"Subcategories\" === which)\r\n      this._vp.changeCategoryDisplay(this._enabledIds, true, true);\r\n    else\r\n      super.show(which);\r\n  }\r\n\r\n  protected hiliteEnabled(hiliteOn: boolean): void {\r\n    const catIds = this._enabledIds;\r\n    const cache = this._vp.iModel.subcategories;\r\n    const set = this._vp.iModel.hilited.subcategories;\r\n    for (const catId of catIds) {\r\n      const subcatIds = cache.getSubCategories(catId);\r\n      if (undefined !== subcatIds) {\r\n        for (const subcatId of subcatIds) {\r\n          if (hiliteOn)\r\n            set.addId(subcatId);\r\n          else\r\n            set.deleteId(subcatId);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport class ModelPicker extends IdPicker {\r\n  private _availableIdList: string[] = [];\r\n  private _stepIndex = -1;\r\n  private _fitOnStep = true;\r\n  private _planProjectionIds: string[] = [];\r\n\r\n  public constructor(vp: ScreenViewport, parent: HTMLElement) { super(vp, parent); }\r\n\r\n  protected get _elementType(): \"Model\" { return \"Model\"; }\r\n  protected get _enabledIds() { return (this._vp.view as SpatialViewState).modelSelector.models; }\r\n  protected override get _showIn2d() { return false; }\r\n  protected changeDisplay(ids: Id64Arg, enabled: boolean) {\r\n    if (enabled)\r\n      this._vp.addViewedModels(ids); // eslint-disable-line @typescript-eslint/no-floating-promises\r\n    else\r\n      this._vp.changeModelDisplay(ids, enabled);\r\n  }\r\n\r\n  protected hiliteEnabled(hiliteOn: boolean): void {\r\n    const modelIds = this._enabledIds;\r\n    const hilites = this._vp.iModel.hilited;\r\n    for (const modelId of modelIds) {\r\n      if (hiliteOn)\r\n        hilites.models.addId(modelId);\r\n      else\r\n        hilites.models.deleteId(modelId);\r\n    }\r\n  }\r\n\r\n  protected async _populate(): Promise<void> {\r\n    const buttons = document.createElement(\"div\");\r\n    buttons.style.textAlign = \"center\";\r\n    createButton({\r\n      parent: buttons,\r\n      value: \"⏪\",\r\n      inline: true,\r\n      handler: () => this.stepToIndex(0),\r\n      tooltip: \"Isolate first\",\r\n    });\r\n    createButton({\r\n      parent: buttons,\r\n      value: \"◀️\",\r\n      inline: true,\r\n      handler: () => this.stepToIndex(this._stepIndex - 1),\r\n      tooltip: \"Isolate previous\",\r\n    });\r\n    createButton({\r\n      parent: buttons,\r\n      value: \"➕\",\r\n      inline: true,\r\n      handler: () => {\r\n        const enabledIds = this._enabledIds;\r\n        for (let i = 0; i < this._availableIdList.length; i++) {\r\n          if (enabledIds.has(this._availableIdList[i])) {\r\n            this.stepToIndex(i);\r\n            break;\r\n          }\r\n        }\r\n      },\r\n      tooltip: \"Set first enabled as step index\",\r\n    });\r\n    const fit = createButton({\r\n      parent: buttons,\r\n      value: \"⛶\",\r\n      inline: true,\r\n      handler: () => {\r\n        this._fitOnStep = !this._fitOnStep;\r\n        fit.style.borderStyle = this._fitOnStep ? \"inset\" : \"outset\";\r\n      },\r\n      tooltip: \"Fit after isolate\",\r\n    }).button;\r\n    fit.style.borderStyle = \"inset\";\r\n    createButton({\r\n      parent: buttons,\r\n      value: \"▶️\",\r\n      inline: true,\r\n      handler: () => this.stepToIndex(this._stepIndex + 1),\r\n      tooltip: \"Isolate next\",\r\n    });\r\n    createButton({\r\n      parent: buttons,\r\n      value: \"⏩\",\r\n      inline: true,\r\n      handler: () => this.stepToIndex(this._availableIdList.length - 1),\r\n      tooltip: \"Isolate last\",\r\n    });\r\n    this._element.appendChild(buttons);\r\n\r\n    const view = this._vp.view;\r\n    assert(undefined !== view && view.isSpatialView());\r\n\r\n    const query = { from: GeometricModel3dState.classFullName, wantPrivate: true };\r\n    const props = await view.iModel.models.queryProps(query);\r\n    props.forEach((prop) => {\r\n      if (prop.isPrivate)\r\n        prop.name = `~${prop.name}`;\r\n    });\r\n\r\n    props.sort((lhs, rhs) => compareStringsOrUndefined(lhs.name, rhs.name));\r\n\r\n    const selector = view.modelSelector;\r\n    for (const prop of props) {\r\n      if (undefined !== prop.id && undefined !== prop.name) {\r\n        this.addCheckbox(prop.name, prop.id, selector.has(prop.id));\r\n        if ((prop as GeometricModel3dProps).isPlanProjection)\r\n          this._planProjectionIds.push(prop.id);\r\n      }\r\n    }\r\n\r\n    this._availableIdList = Array.from(this._availableIds);\r\n  }\r\n\r\n  private stepToIndex(index: number): void {\r\n    if (index < 0 || index >= this._availableIdList.length)\r\n      return;\r\n\r\n    this._stepIndex = index;\r\n    this.toggleAll(false);\r\n    this.enableById(this._availableIdList[index]);\r\n\r\n    if (this._fitOnStep)\r\n      ViewManip.fitView(this._vp, true);\r\n  }\r\n\r\n  protected override get _comboBoxEntries() {\r\n    const entries = super._comboBoxEntries;\r\n    entries.push({ name: \"Plan Projections\", value: \"PlanProjections\" });\r\n    return entries;\r\n  }\r\n\r\n  protected override show(which: string) {\r\n    if (\"PlanProjections\" === which) {\r\n      this.toggleAll(false);\r\n      this.toggleIds(this._planProjectionIds, true);\r\n    } else {\r\n      super.show(which);\r\n    }\r\n  }\r\n}\r\n"
        ],
        "mappings": "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",
        "names": []
      }
    }
  ]
}
