{
  "resolvedId": "D:/hub2023A/itwinjs-core/common/temp/node_modules/.pnpm/@itwin+electron-authorization@0.14.1_vfbcftczlx5fy7lxoa3opanwwu/node_modules/@itwin/electron-authorization/lib/cjs/renderer/Client.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "\"use strict\";\r\n/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ElectronRendererAuthorization = void 0;\r\nconst core_bentley_1 = require(\"@itwin/core-bentley\");\r\nconst IpcChannelNames_1 = require(\"../common/IpcChannelNames\");\r\n/**\r\n * Frontend Ipc support for Electron apps.\r\n */\r\nclass ElectronAuthIPC {\r\n    constructor(ipcChannelNames, ipcSocket) {\r\n        this._ipcChannelNames = ipcChannelNames;\r\n        if (ipcSocket) {\r\n            this._ipcSocket = ipcSocket;\r\n        }\r\n        else {\r\n            // use the methods on window.itwinjs exposed by ElectronPreload.ts, or ipcRenderer directly if running with nodeIntegration=true (**only** for tests).\r\n            // Note that `require(\"electron\")` doesn't work with nodeIntegration=false - that's what it stops\r\n            this._ipcSocket = window.itwinjs ?? require(\"electron\").ipcRenderer; // eslint-disable-line @typescript-eslint/no-var-requires\r\n        }\r\n    }\r\n    async signIn() {\r\n        return this._ipcSocket.invoke(this._ipcChannelNames.signIn);\r\n    }\r\n    async signOut() {\r\n        return this._ipcSocket.invoke(this._ipcChannelNames.signOut);\r\n    }\r\n    async getAccessToken() {\r\n        return this._ipcSocket.invoke(this._ipcChannelNames.getAccessToken);\r\n    }\r\n    addAccessTokenChangeListener(callback) {\r\n        this._ipcSocket.addListener(this._ipcChannelNames.onAccessTokenChanged, callback);\r\n    }\r\n    addAccessTokenExpirationChangeListener(callback) {\r\n        this._ipcSocket.addListener(this._ipcChannelNames.onAccessTokenExpirationChanged, callback);\r\n    }\r\n    async signInSilent() {\r\n        return this._ipcSocket.invoke(this._ipcChannelNames.signInSilent);\r\n    }\r\n}\r\n/**\r\n * Object to be set as `IModelApp.authorizationClient` for the frontend of ElectronApps.\r\n * Since Electron Apps use the backend for all authorization, this class sends signIn/signOut requests to the backend\r\n * and then gets the access token from the backend.\r\n * @public\r\n */\r\nclass ElectronRendererAuthorization {\r\n    /** Constructor for ElectronRendererAuthorization. Sets up listeners for when the access token changes both on the frontend and the backend. */\r\n    constructor(config) {\r\n        this._cachedToken = \"\";\r\n        this._refreshingToken = false;\r\n        this.onAccessTokenChanged = new core_bentley_1.BeEvent();\r\n        const ipcChannelNames = IpcChannelNames_1.getIpcChannelNames(config.clientId);\r\n        this._ipcAuthAPI = new ElectronAuthIPC(ipcChannelNames, config.ipcSocket);\r\n        this.onAccessTokenChanged.addListener((token) => {\r\n            this._cachedToken = token;\r\n        });\r\n        this._ipcAuthAPI.addAccessTokenChangeListener((_event, token) => {\r\n            this.onAccessTokenChanged.raiseEvent(token);\r\n        });\r\n        this._ipcAuthAPI.addAccessTokenExpirationChangeListener((_event, expiration) => {\r\n            this._expiresAt = expiration;\r\n        });\r\n    }\r\n    get hasSignedIn() { return this._cachedToken !== \"\"; }\r\n    get isAuthorized() {\r\n        return this.hasSignedIn && !this._hasExpired;\r\n    }\r\n    /** Called to start the sign-in process. Subscribe to onAccessTokenChanged to be notified when sign-in completes */\r\n    async signIn() {\r\n        await this._ipcAuthAPI.signIn();\r\n    }\r\n    /** Called to start the sign-out process. Subscribe to onAccessTokenChanged to be notified when sign-out completes */\r\n    async signOut() {\r\n        await this._ipcAuthAPI.signOut();\r\n    }\r\n    /** Called to start the silent sign-in process. Subscribe to onAccessTokenChanged to be notified when silent sign-in completes */\r\n    async signInSilent() {\r\n        await this._ipcAuthAPI.signInSilent();\r\n    }\r\n    /** Returns a promise that resolves to the AccessToken if signed in.\r\n     * - The token is ensured to be valid *at least* for the buffer of time specified by the configuration.\r\n     * - The token is refreshed if it's possible and necessary.\r\n     * - This method must be called to refresh the token - the client does NOT automatically monitor for token expiry.\r\n     * - Getting or refreshing the token will trigger the [[onAccessTokenChanged]] event.\r\n     */\r\n    async getAccessToken() {\r\n        // if we have a valid token, return it. Otherwise call backend to refresh the token.\r\n        if (!this.isAuthorized) {\r\n            if (this._refreshingToken) {\r\n                return Promise.reject(); // short-circuits any recursive use of this function\r\n            }\r\n            try {\r\n                this._refreshingToken = true;\r\n                this._cachedToken = (await this._ipcAuthAPI.getAccessToken()) ?? \"\";\r\n            }\r\n            catch (err) {\r\n                throw err;\r\n            }\r\n            finally {\r\n                this._refreshingToken = false;\r\n            }\r\n        }\r\n        return this._cachedToken ?? \"\";\r\n    }\r\n    get _hasExpired() {\r\n        if (!this._expiresAt)\r\n            return false;\r\n        return this._expiresAt.getTime() - Date.now() <= 1 * 60 * 1000; // Consider 1 minute before expiry as expired\r\n    }\r\n}\r\nexports.ElectronRendererAuthorization = ElectronRendererAuthorization;\r\n//# sourceMappingURL=Client.js.map",
      "start": 1693508122400,
      "end": 1693508122586,
      "sourcemaps": null
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as Client } from \"\\u0000D:/hub2023A/itwinjs-core/common/temp/node_modules/.pnpm/@itwin+electron-authorization@0.14.1_vfbcftczlx5fy7lxoa3opanwwu/node_modules/@itwin/electron-authorization/lib/cjs/renderer/Client.js?commonjs-exports\";\nimport require$$0 from \"\\u0000D:/hub2023A/itwinjs-core/core/bentley/lib/esm/core-bentley.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000D:/hub2023A/itwinjs-core/common/temp/node_modules/.pnpm/@itwin+electron-authorization@0.14.1_vfbcftczlx5fy7lxoa3opanwwu/node_modules/@itwin/electron-authorization/lib/cjs/common/IpcChannelNames.js?commonjs-proxy\";\nimport { __require as require$$2 } from \"\\u0000D:/hub2023A/itwinjs-core/common/temp/node_modules/.pnpm/electron@25.3.1/node_modules/electron/index.js?commonjs-wrapped\";\n\n\"use strict\";\r\n/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nObject.defineProperty(Client, \"__esModule\", { value: true });\r\nvar ElectronRendererAuthorization_1 = Client.ElectronRendererAuthorization = void 0;\r\nconst core_bentley_1 = require$$0;\r\nconst IpcChannelNames_1 = require$$1;\r\n/**\r\n * Frontend Ipc support for Electron apps.\r\n */\r\nclass ElectronAuthIPC {\r\n    constructor(ipcChannelNames, ipcSocket) {\r\n        this._ipcChannelNames = ipcChannelNames;\r\n        if (ipcSocket) {\r\n            this._ipcSocket = ipcSocket;\r\n        }\r\n        else {\r\n            // use the methods on window.itwinjs exposed by ElectronPreload.ts, or ipcRenderer directly if running with nodeIntegration=true (**only** for tests).\r\n            // Note that `require(\"electron\")` doesn't work with nodeIntegration=false - that's what it stops\r\n            this._ipcSocket = window.itwinjs ?? require$$2().ipcRenderer; // eslint-disable-line @typescript-eslint/no-var-requires\r\n        }\r\n    }\r\n    async signIn() {\r\n        return this._ipcSocket.invoke(this._ipcChannelNames.signIn);\r\n    }\r\n    async signOut() {\r\n        return this._ipcSocket.invoke(this._ipcChannelNames.signOut);\r\n    }\r\n    async getAccessToken() {\r\n        return this._ipcSocket.invoke(this._ipcChannelNames.getAccessToken);\r\n    }\r\n    addAccessTokenChangeListener(callback) {\r\n        this._ipcSocket.addListener(this._ipcChannelNames.onAccessTokenChanged, callback);\r\n    }\r\n    addAccessTokenExpirationChangeListener(callback) {\r\n        this._ipcSocket.addListener(this._ipcChannelNames.onAccessTokenExpirationChanged, callback);\r\n    }\r\n    async signInSilent() {\r\n        return this._ipcSocket.invoke(this._ipcChannelNames.signInSilent);\r\n    }\r\n}\r\n/**\r\n * Object to be set as `IModelApp.authorizationClient` for the frontend of ElectronApps.\r\n * Since Electron Apps use the backend for all authorization, this class sends signIn/signOut requests to the backend\r\n * and then gets the access token from the backend.\r\n * @public\r\n */\r\nclass ElectronRendererAuthorization {\r\n    /** Constructor for ElectronRendererAuthorization. Sets up listeners for when the access token changes both on the frontend and the backend. */\r\n    constructor(config) {\r\n        this._cachedToken = \"\";\r\n        this._refreshingToken = false;\r\n        this.onAccessTokenChanged = new core_bentley_1.BeEvent();\r\n        const ipcChannelNames = IpcChannelNames_1.getIpcChannelNames(config.clientId);\r\n        this._ipcAuthAPI = new ElectronAuthIPC(ipcChannelNames, config.ipcSocket);\r\n        this.onAccessTokenChanged.addListener((token) => {\r\n            this._cachedToken = token;\r\n        });\r\n        this._ipcAuthAPI.addAccessTokenChangeListener((_event, token) => {\r\n            this.onAccessTokenChanged.raiseEvent(token);\r\n        });\r\n        this._ipcAuthAPI.addAccessTokenExpirationChangeListener((_event, expiration) => {\r\n            this._expiresAt = expiration;\r\n        });\r\n    }\r\n    get hasSignedIn() { return this._cachedToken !== \"\"; }\r\n    get isAuthorized() {\r\n        return this.hasSignedIn && !this._hasExpired;\r\n    }\r\n    /** Called to start the sign-in process. Subscribe to onAccessTokenChanged to be notified when sign-in completes */\r\n    async signIn() {\r\n        await this._ipcAuthAPI.signIn();\r\n    }\r\n    /** Called to start the sign-out process. Subscribe to onAccessTokenChanged to be notified when sign-out completes */\r\n    async signOut() {\r\n        await this._ipcAuthAPI.signOut();\r\n    }\r\n    /** Called to start the silent sign-in process. Subscribe to onAccessTokenChanged to be notified when silent sign-in completes */\r\n    async signInSilent() {\r\n        await this._ipcAuthAPI.signInSilent();\r\n    }\r\n    /** Returns a promise that resolves to the AccessToken if signed in.\r\n     * - The token is ensured to be valid *at least* for the buffer of time specified by the configuration.\r\n     * - The token is refreshed if it's possible and necessary.\r\n     * - This method must be called to refresh the token - the client does NOT automatically monitor for token expiry.\r\n     * - Getting or refreshing the token will trigger the [[onAccessTokenChanged]] event.\r\n     */\r\n    async getAccessToken() {\r\n        // if we have a valid token, return it. Otherwise call backend to refresh the token.\r\n        if (!this.isAuthorized) {\r\n            if (this._refreshingToken) {\r\n                return Promise.reject(); // short-circuits any recursive use of this function\r\n            }\r\n            try {\r\n                this._refreshingToken = true;\r\n                this._cachedToken = (await this._ipcAuthAPI.getAccessToken()) ?? \"\";\r\n            }\r\n            catch (err) {\r\n                throw err;\r\n            }\r\n            finally {\r\n                this._refreshingToken = false;\r\n            }\r\n        }\r\n        return this._cachedToken ?? \"\";\r\n    }\r\n    get _hasExpired() {\r\n        if (!this._expiresAt)\r\n            return false;\r\n        return this._expiresAt.getTime() - Date.now() <= 1 * 60 * 1000; // Consider 1 minute before expiry as expired\r\n    }\r\n}\r\nElectronRendererAuthorization_1 = Client.ElectronRendererAuthorization = ElectronRendererAuthorization;\r\n//# sourceMappingURL=Client.js.map\n\nexport { Client as __moduleExports, ElectronRendererAuthorization_1 as ElectronRendererAuthorization, Client as default };",
      "start": 1693508122586,
      "end": 1693508126202,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "file": null,
        "sources": [
          null
        ],
        "sourcesContent": [
          null
        ],
        "names": [],
        "mappings": "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"
      }
    }
  ]
}
