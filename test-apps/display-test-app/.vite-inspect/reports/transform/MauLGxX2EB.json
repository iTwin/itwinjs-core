{
  "resolvedId": "D:/hub2023A/itwinjs-core/ui/appui-abstract/lib/esm/appui-abstract/properties/Description.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Properties\n */\nimport { PropertyEditorParamTypes, } from \"./EditorParams\";\nimport { StandardEditorNames } from \"./StandardEditorNames\";\nimport { StandardTypeNames } from \"./StandardTypeNames\";\n/** Helper class that builds property descriptions for specific PropertyEditors and processes descriptions.\n * @public\n */\nexport class PropertyDescriptionHelper {\n    /** Builds a number description with a \"weight-picker\" editor name\n     * @public\n     */\n    static buildWeightPickerDescription(name, label, additionalParams = []) {\n        return {\n            name,\n            displayLabel: label,\n            typename: StandardTypeNames.Number,\n            editor: {\n                name: StandardEditorNames.WeightPicker,\n                params: additionalParams,\n            },\n        };\n    }\n    /** Builds an editor that uses [NumberInput]($core-react) control\n     * @public\n     */\n    static buildNumberEditorDescription(name, label, overrideParams, additionalParams = []) {\n        const editorParams = [{\n                type: PropertyEditorParamTypes.Range,\n                step: 1,\n                precision: 0,\n                ...overrideParams,\n            }, ...additionalParams];\n        const editor = {\n            name: StandardEditorNames.NumericInput,\n            params: editorParams,\n        };\n        return {\n            name,\n            displayLabel: label,\n            typename: StandardTypeNames.Number,\n            editor,\n        };\n    }\n    /** Builds a string description\n     * @public\n     */\n    static buildTextEditorDescription(name, label, additionalParams = []) {\n        const editor = {\n            params: additionalParams,\n        };\n        return {\n            name,\n            displayLabel: label,\n            typename: StandardTypeNames.String,\n            editor,\n        };\n    }\n    /** Builds an enum description\n     * @public\n     */\n    static buildEnumPicklistEditorDescription(name, label, choices, additionalParams = []) {\n        const editor = additionalParams.length ? {\n            params: additionalParams,\n        } : undefined;\n        return {\n            name,\n            displayLabel: label,\n            typename: StandardTypeNames.Enum,\n            editor,\n            enum: {\n                choices,\n            },\n        };\n    }\n    /** Builds a number description for a tool settings or dialog property that will display a \"color-picker\" control.\n     * @public\n     */\n    static buildColorPickerDescription(name, label, colorValues, numColumns, additionalParams = []) {\n        const editorParams = [\n            {\n                type: PropertyEditorParamTypes.ColorData,\n                colorValues,\n                numColumns,\n            },\n            ...additionalParams,\n        ];\n        return {\n            name,\n            displayLabel: label,\n            typename: StandardTypeNames.Number,\n            editor: {\n                name: StandardEditorNames.ColorPicker,\n                params: editorParams,\n            },\n        };\n    }\n    /** Builds a boolean description for a tool settings or dialog property that will display a \"toggle\" control.\n     * @public\n     */\n    static buildToggleDescription(name, label, additionalParams = []) {\n        return {\n            name,\n            displayLabel: label,\n            typename: StandardTypeNames.Boolean,\n            editor: {\n                name: StandardEditorNames.Toggle,\n                params: additionalParams,\n            },\n        };\n    }\n    /** Builds a boolean description for a tool settings or dialog property that will display a \"image-check-box\" control.\n     * @public\n     */\n    static buildImageCheckBoxDescription(name, label, imageOff, imageOn, additionalParams = []) {\n        const editorParams = [{\n                type: PropertyEditorParamTypes.CheckBoxImages,\n                imageOff,\n                imageOn,\n            }, ...additionalParams];\n        return {\n            name,\n            displayLabel: label,\n            typename: StandardTypeNames.Boolean,\n            editor: {\n                name: StandardEditorNames.ImageCheckBox,\n                params: editorParams,\n            },\n        };\n    }\n    /** Builds a boolean description for a tool settings or dialog property that will display a checkbox control.\n     * @public\n     */\n    static buildCheckboxDescription(name, label, additionalParams = []) {\n        const editor = {\n            params: additionalParams,\n        };\n        return {\n            name,\n            displayLabel: label,\n            typename: StandardTypeNames.Boolean,\n            editor,\n        };\n    }\n    /** Builds a property description for a tool settings or dialog `lock` property. This will create a checkbox control with no label.\n     * @public\n     */\n    static buildLockPropertyDescription(name, additionalParams = []) {\n        const defaultParams = {\n            type: PropertyEditorParamTypes.SuppressEditorLabel,\n            suppressLabelPlaceholder: true,\n        };\n        const editor = {\n            params: [defaultParams, ...additionalParams],\n        };\n        return {\n            name,\n            displayLabel: \"\",\n            typename: StandardTypeNames.Boolean,\n            editor,\n        };\n    }\n    /** Bumps an enum property description value\n     * @public\n     */\n    static async bumpEnumProperty(description, value) {\n        let choices;\n        if (description.enum) {\n            if (description.enum.choices instanceof Promise) {\n                choices = await description.enum.choices;\n            }\n            else {\n                choices = description.enum.choices;\n            }\n        }\n        if (!choices || choices.length === 0)\n            return value;\n        let choiceIndex = choices.findIndex((choice) => choice.value === value);\n        if (choiceIndex < 0)\n            return value;\n        choiceIndex++;\n        if (choiceIndex >= choices.length)\n            choiceIndex = 0;\n        const newValue = choices[choiceIndex].value;\n        return newValue;\n    }\n}\n//# sourceMappingURL=Description.js.map",
      "start": 1693508124446,
      "end": 1693508124495,
      "sourcemaps": null
    }
  ]
}
