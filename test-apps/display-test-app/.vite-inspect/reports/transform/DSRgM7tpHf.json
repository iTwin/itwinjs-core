{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/LightSettings.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module DisplayStyles\n */\nimport { assert, JsonUtils } from \"@itwin/core-bentley\";\nimport { Vector3d } from \"@itwin/core-geometry\";\nimport { RgbColor } from \"./RgbColor\";\nfunction extractIntensity(value, defaultValue) {\n    const maxIntensity = 5;\n    return typeof value === \"number\" ? Math.max(0, Math.min(maxIntensity, value)) : defaultValue;\n}\nconst defaultSolarDirection = Vector3d.create(0.272166, 0.680414, 0.680414);\n/** Describes the solar directional light associated with a [[LightSettings]].\n * @see [[SolarLightProps]].\n * @public\n */\nexport class SolarLight {\n    constructor(json) {\n        json = json || {};\n        this.intensity = extractIntensity(json.intensity, 1);\n        this.alwaysEnabled = JsonUtils.asBool(json.alwaysEnabled);\n        if (json.direction)\n            this.direction = Vector3d.fromJSON(json.direction);\n        else\n            this.direction = defaultSolarDirection.clone();\n        if (typeof json.timePoint === \"number\")\n            this.timePoint = json.timePoint;\n    }\n    toJSON() {\n        const direction = this.direction.isAlmostEqual(defaultSolarDirection) ? undefined : this.direction.toJSON();\n        const intensity = this.intensity !== 1 ? this.intensity : undefined;\n        const alwaysEnabled = this.alwaysEnabled ? true : undefined;\n        const timePoint = this.timePoint;\n        if (undefined === direction && undefined === intensity && undefined === alwaysEnabled && undefined === timePoint)\n            return undefined;\n        const json = {};\n        if (direction)\n            json.direction = direction;\n        if (undefined !== intensity)\n            json.intensity = intensity;\n        if (undefined !== alwaysEnabled)\n            json.alwaysEnabled = alwaysEnabled;\n        if (undefined !== timePoint)\n            json.timePoint = timePoint;\n        return json;\n    }\n    /** Create a copy of this SolarLight, identical except in any properties explicitly specified by `changedProps`, with a possible exception for [[timePoint]].\n     * If `this.timePoint` is defined and `changedProps` defines `direction` but **doesn't** define `timePoint`, the time point will only be preserved in the\n     * copy if `changesProps.direction` is equal to `this.direction`.\n     */\n    clone(changedProps) {\n        if (!changedProps)\n            return this;\n        const props = this.toJSON() ?? {};\n        if (undefined !== changedProps.direction)\n            props.direction = changedProps.direction;\n        if (undefined !== changedProps.intensity)\n            props.intensity = changedProps.intensity;\n        if (undefined !== changedProps.alwaysEnabled)\n            props.alwaysEnabled = changedProps.alwaysEnabled;\n        if (undefined !== changedProps.timePoint)\n            props.timePoint = changedProps.timePoint;\n        // If our direction was computed from a time point and the caller only supplies a direction, invalidate the time point unless the input direction matches our direction.\n        // If caller explicitly supplied a timePoint, trust it.\n        if (undefined !== this.timePoint && undefined === changedProps.timePoint && undefined !== changedProps.direction) {\n            const newDirection = Vector3d.fromJSON(changedProps.direction);\n            if (!newDirection.isAlmostEqual(this.direction))\n                props.timePoint = undefined;\n        }\n        return new SolarLight(props);\n    }\n    equals(rhs) {\n        return this.intensity === rhs.intensity && this.alwaysEnabled === rhs.alwaysEnabled && this.direction.isExactEqual(rhs.direction) && this.timePoint === rhs.timePoint;\n    }\n}\n/** Describes the ambient light associated with a [[LightSettings]].\n * @see [[AmbientLightProps]]\n * @public\n */\nexport class AmbientLight {\n    constructor(json) {\n        json = json || {};\n        this.intensity = extractIntensity(json.intensity, 0.2);\n        this.color = json.color ? RgbColor.fromJSON(json.color) : new RgbColor(0, 0, 0);\n    }\n    toJSON() {\n        const color = this.color.r !== 0 || this.color.g !== 0 || this.color.b !== 0 ? this.color.toJSON() : undefined;\n        const intensity = 0.2 !== this.intensity ? this.intensity : undefined;\n        if (undefined === color && undefined === intensity)\n            return undefined;\n        const json = {};\n        if (color)\n            json.color = color;\n        if (undefined !== intensity)\n            json.intensity = intensity;\n        return json;\n    }\n    /** Create a copy of this light, identical except for any properties explicitly specified by `changed`. */\n    clone(changed) {\n        if (!changed)\n            return this;\n        const props = this.toJSON() ?? {};\n        if (undefined !== changed.intensity)\n            props.intensity = changed.intensity;\n        if (undefined !== changed.color)\n            props.color = changed.color;\n        return new AmbientLight(props);\n    }\n    equals(rhs) {\n        return this.intensity === rhs.intensity && this.color.equals(rhs.color);\n    }\n}\nconst defaultUpperHemisphereColor = new RgbColor(143, 205, 255);\nconst defaultLowerHemisphereColor = new RgbColor(120, 143, 125);\n/** Describes a pair of hemisphere lights associated with a [[LightSettings]].\n * @see [[HemisphereLightsProps]]\n * @public\n */\nexport class HemisphereLights {\n    constructor(json) {\n        json = json || {};\n        this.intensity = extractIntensity(json.intensity, 0);\n        this.upperColor = json.upperColor ? RgbColor.fromJSON(json.upperColor) : defaultUpperHemisphereColor;\n        this.lowerColor = json.lowerColor ? RgbColor.fromJSON(json.lowerColor) : defaultLowerHemisphereColor;\n    }\n    toJSON() {\n        const upperColor = this.upperColor.equals(defaultUpperHemisphereColor) ? undefined : this.upperColor.toJSON();\n        const lowerColor = this.lowerColor.equals(defaultLowerHemisphereColor) ? undefined : this.lowerColor.toJSON();\n        const intensity = 0 === this.intensity ? undefined : this.intensity;\n        if (undefined === upperColor && undefined === lowerColor && undefined === intensity)\n            return undefined;\n        const json = {};\n        if (upperColor)\n            json.upperColor = upperColor;\n        if (lowerColor)\n            json.lowerColor = lowerColor;\n        if (undefined !== intensity)\n            json.intensity = intensity;\n        return json;\n    }\n    /** Create a copy of these lights, identical except for any properties explicitly specified by `changed`. */\n    clone(changed) {\n        if (!changed)\n            return this;\n        const props = this.toJSON() || {};\n        if (undefined !== changed.upperColor)\n            props.upperColor = changed.upperColor;\n        if (undefined !== changed.lowerColor)\n            props.lowerColor = changed.lowerColor;\n        if (undefined !== changed.intensity)\n            props.intensity = changed.intensity;\n        return new HemisphereLights(props);\n    }\n    equals(rhs) {\n        return this.intensity === rhs.intensity && this.upperColor.equals(rhs.upperColor) && this.lowerColor.equals(rhs.lowerColor);\n    }\n}\nfunction clampIntensity(intensity = 0) {\n    return Math.max(intensity, 0);\n}\n/** As part of a [[LightSettings]], describes how to apply a Fresnel effect to the contents of the view.\n * The \"Fresnel effect\" is based on the observation that the reflectivity of a surface varies based on the angle between the surface and\n * the viewer's line of sight. For example, a flat surface will appear more reflective when viewed at a glancing angle than it will when\n * viewed from above; and a sphere will appear more reflective around its edges than at its center.\n *\n * This principle can be used to improve photorealism, but the implementation provided here is intended to produce non-realistic but\n * aesthetically-pleasing results.\n * @see [[LightSettings.fresnel]].\n * @public\n */\nclass FresnelSettings {\n    constructor(intensity, invert) {\n        assert(intensity >= 0);\n        this.intensity = intensity;\n        this.invert = invert;\n    }\n    /** Create from JSON representation, using default values for any unspecified or `undefined` properties. */\n    static fromJSON(props) {\n        const intensity = clampIntensity(JsonUtils.asDouble(props?.intensity));\n        const invert = JsonUtils.asBool(props?.invert);\n        if (0 === intensity && !invert)\n            return this._defaults;\n        return new this(intensity, invert);\n    }\n    /** Create a new FresnelSettings.\n     * @note Intensity values less than zero will be set to zero.\n     */\n    static create(intensity = 0, invert = false) {\n        return this.fromJSON({ intensity, invert });\n    }\n    /** Convert to JSON representation.\n     * @note If all settings match the default values, `undefined` will be returned.\n     */\n    toJSON() {\n        if (0 === this.intensity && !this.invert)\n            return undefined;\n        const props = {};\n        if (0 !== this.intensity)\n            props.intensity = this.intensity;\n        if (this.invert)\n            props.invert = true;\n        return props;\n    }\n    /** Create a copy of these settings, modified to match any properties explicitly specified by `changedProps`. */\n    clone(changedProps) {\n        if ((undefined === changedProps?.intensity || changedProps.intensity === this.intensity)\n            && (undefined === changedProps?.invert || changedProps.invert === this.invert))\n            return this;\n        const intensity = changedProps?.intensity ?? this.intensity;\n        const invert = changedProps?.invert ?? this.invert;\n        return FresnelSettings.fromJSON({ intensity, invert });\n    }\n    /** Return true if these settings are equivalent to `rhs`. */\n    equals(rhs) {\n        return this === rhs || (this.intensity === rhs.intensity && this.invert === rhs.invert);\n    }\n}\nFresnelSettings._defaults = new FresnelSettings(0, false);\nexport { FresnelSettings };\n/** Describes the lighting for a 3d scene, associated with a [[DisplayStyle3dSettings]] in turn associated with a [DisplayStyle3d]($backend) or [DisplayStyle3dState]($frontend).\n * @see [[LightSettingsProps]]\n * @public\n */\nexport class LightSettings {\n    constructor(solar, ambient, hemisphere, portraitIntensity, specularIntensity, numCels, fresnel) {\n        this.solar = solar;\n        this.ambient = ambient;\n        this.hemisphere = hemisphere;\n        this.portraitIntensity = portraitIntensity;\n        this.specularIntensity = specularIntensity;\n        this.numCels = numCels;\n        this.fresnel = fresnel;\n    }\n    static fromJSON(props) {\n        const solar = new SolarLight(props?.solar);\n        const ambient = new AmbientLight(props?.ambient);\n        const hemisphere = new HemisphereLights(props?.hemisphere);\n        const portraitIntensity = extractIntensity(props?.portrait?.intensity, 0.3);\n        const specularIntensity = extractIntensity(props?.specularIntensity, 1.0);\n        const numCels = JsonUtils.asInt(props?.numCels, 0);\n        const fresnel = FresnelSettings.fromJSON(props?.fresnel);\n        return new LightSettings(solar, ambient, hemisphere, portraitIntensity, specularIntensity, numCels, fresnel);\n    }\n    toJSON() {\n        const solar = this.solar.toJSON();\n        const ambient = this.ambient.toJSON();\n        const hemisphere = this.hemisphere.toJSON();\n        const portrait = 0.3 !== this.portraitIntensity ? { intensity: this.portraitIntensity } : undefined;\n        const specularIntensity = 1 !== this.specularIntensity ? this.specularIntensity : undefined;\n        const numCels = 0 !== this.numCels ? this.numCels : undefined;\n        const fresnel = this.fresnel.toJSON();\n        if (!solar && !ambient && !hemisphere && !portrait && undefined === specularIntensity && undefined === numCels && undefined === fresnel)\n            return undefined;\n        const json = {};\n        if (solar)\n            json.solar = solar;\n        if (ambient)\n            json.ambient = ambient;\n        if (hemisphere)\n            json.hemisphere = hemisphere;\n        if (portrait)\n            json.portrait = portrait;\n        if (undefined !== specularIntensity)\n            json.specularIntensity = specularIntensity;\n        if (undefined !== numCels)\n            json.numCels = numCels;\n        if (fresnel)\n            json.fresnel = fresnel;\n        return json;\n    }\n    /** Create a copy of these light settings, identical except for any properties explicitly specified by `changed`.\n     * Note that the solar, ambient, and hemisphere lights will also be cloned using their own `clone` methods - so for example, the following:\n     * `  clone({ ambient: { intensity: 0.5 } })`\n     * will overwrite the ambient light's intensity but preserve its current color, rather than replacing the color with the default color.\n     */\n    clone(changed) {\n        if (!changed)\n            return this;\n        const solar = this.solar.clone(changed.solar);\n        const ambient = this.ambient.clone(changed.ambient);\n        const hemisphere = this.hemisphere.clone(changed.hemisphere);\n        const portrait = changed.portrait?.intensity ?? this.portraitIntensity;\n        const specular = changed.specularIntensity ?? this.specularIntensity;\n        const numCels = changed.numCels ?? this.numCels;\n        const fresnel = this.fresnel.clone(changed.fresnel);\n        return new LightSettings(solar, ambient, hemisphere, portrait, specular, numCels, fresnel);\n    }\n    equals(rhs) {\n        if (this === rhs)\n            return true;\n        return this.portraitIntensity === rhs.portraitIntensity && this.specularIntensity === rhs.specularIntensity && this.numCels === rhs.numCels\n            && this.ambient.equals(rhs.ambient) && this.solar.equals(rhs.solar) && this.hemisphere.equals(rhs.hemisphere) && this.fresnel.equals(rhs.fresnel);\n    }\n}\n//# sourceMappingURL=LightSettings.js.map",
      "start": 1693508120891,
      "end": 1693508120937,
      "sourcemaps": null
    }
  ]
}
