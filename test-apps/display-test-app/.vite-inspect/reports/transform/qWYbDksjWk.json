{
  "resolvedId": "D:/hub2023A/itwinjs-core/extensions/map-layers-formats/lib/esm/ArcGisFeature/EsriSymbology.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\nimport { assert } from \"@itwin/core-bentley\";\nimport { ColorDef } from \"@itwin/core-common\";\n// Convert a channel array [r, g, b, a] to ColorDef\nfunction colorFromArray(channels) {\n    if (channels && channels.length === 4) {\n        // Alpha channel is reversed, 255 = opaque\n        return ColorDef.from(channels[0], channels[1], channels[2], 255 - channels[3]);\n    }\n    return undefined;\n}\n/** @internal */\nexport class EsriSymbol {\n    static fromJSON(props) {\n        if (props.type === \"esriSFS\") {\n            return EsriSFS.fromJSON(props);\n        }\n        else if (props.type === \"esriSLS\") {\n            return EsriSLS.fromJSON(props);\n        }\n        else if (props.type === \"esriPMS\") {\n            return EsriPMS.fromJSON(props);\n        }\n        throw new Error(\"Unknown ESRI symbology type\");\n    }\n}\n/** @internal */\nexport class EsriSLS {\n    get color() { return colorFromArray(this.props.color); }\n    get type() { return this.props.type; }\n    get width() { return this.props.width; }\n    get style() { return this.props.style; }\n    constructor(json) {\n        this.props = json;\n    }\n    static fromJSON(json) {\n        return new EsriSLS(json);\n    }\n}\n/** @internal */\nexport class EsriPMS {\n    get type() { return this.props.type; }\n    get url() { return this.props.url; }\n    get imageData() { return this.props.imageData; }\n    get imageUrl() { return `data:${this.contentType};base64,${this.imageData}`; }\n    get image() {\n        assert(this._image !== undefined);\n        return this._image;\n    }\n    get contentType() { return this.props.contentType; }\n    get width() { return this.props.width; }\n    get height() { return this.props.height; }\n    get xoffset() { return this.props.xoffset; }\n    get yoffset() { return this.props.yoffset; }\n    get angle() { return this.props.angle; }\n    async loadImage() {\n        if (this._image === undefined) {\n            this._image = new Image();\n            return new Promise((resolve, reject) => {\n                if (this._image) {\n                    this._image.addEventListener(\"load\", () => {\n                        resolve();\n                    });\n                    this._image.src = this.imageUrl;\n                }\n                else\n                    reject(new Error(\"Failed to load image\"));\n            });\n        }\n    }\n    constructor(json) {\n        this.props = json;\n    }\n    static fromJSON(json) {\n        return new EsriPMS(json);\n    }\n}\n/** @internal */\nexport class EsriSFS {\n    get color() { return colorFromArray(this.props.color); }\n    get type() { return this.props.type; }\n    get style() { return this.props.style; }\n    get outline() { return this._outline; }\n    constructor(json) {\n        this.props = json;\n        if (json.outline)\n            this._outline = EsriSLS.fromJSON(json.outline);\n    }\n    static fromJSON(json) {\n        return new EsriSFS(json);\n    }\n}\n/** @internal */\nexport class EsriUniqueValueInfo {\n    constructor(json) {\n        this.value = json.value;\n        this.label = json.label;\n        this.description = json.description;\n        this.symbol = EsriSymbol.fromJSON(json.symbol);\n    }\n    static fromJSON(json) {\n        return new EsriUniqueValueInfo(json);\n    }\n}\n/** @internal */\nexport class EsriRenderer {\n    static fromJSON(json) {\n        if (json.type === \"simple\")\n            return EsriSimpleRenderer.fromJSON(json);\n        else if (json.type === \"uniqueValue\")\n            return EsriUniqueValueRenderer.fromJSON(json);\n        else\n            throw Error(\"Unknown renderer type\");\n    }\n}\n/** @internal */\nexport class EsriSimpleRenderer extends EsriRenderer {\n    constructor(json) {\n        super();\n        this.type = \"simple\";\n        this.type = json.type;\n        this.symbol = EsriSymbol.fromJSON(json.symbol);\n    }\n    async initialize() {\n        const promises = [];\n        if (this.symbol.type === \"esriPMS\") {\n            promises.push(this.symbol.loadImage());\n        }\n        await Promise.all(promises);\n    }\n    static fromJSON(json) {\n        return new EsriSimpleRenderer(json);\n    }\n}\n/** @internal */\nexport class EsriUniqueValueRenderer extends EsriRenderer {\n    get field1() { return this._props.field1 ?? undefined; }\n    get field2() { return this._props.field2 ?? undefined; }\n    get field3() { return this._props.field3 ?? undefined; }\n    constructor(json) {\n        super();\n        this.type = \"uniqueValue\";\n        this.uniqueValueInfos = [];\n        if (json.defaultSymbol)\n            this.defaultSymbol = EsriSymbol.fromJSON(json.defaultSymbol);\n        for (const uvi of json.uniqueValueInfos) {\n            this.uniqueValueInfos.push(EsriUniqueValueInfo.fromJSON(uvi));\n        }\n        this._props = json;\n    }\n    async initialize() {\n        const promises = [];\n        if (this.defaultSymbol?.type === \"esriPMS\") {\n            promises.push(this.defaultSymbol.loadImage());\n        }\n        for (const uvi of this.uniqueValueInfos) {\n            if (uvi.symbol.type === \"esriPMS\") {\n                promises.push(uvi.symbol.loadImage());\n            }\n        }\n        await Promise.all(promises);\n    }\n    static fromJSON(json) {\n        return new EsriUniqueValueRenderer(json);\n    }\n}\n//# sourceMappingURL=EsriSymbology.js.map",
      "start": 1693508125125,
      "end": 1693508125202,
      "sourcemaps": null
    }
  ]
}
