{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/webgl/glsl/ScreenSpaceEffect.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module WebGL\n */\nimport { TextureUnit } from \"../RenderFlags\";\nimport { AttributeMap } from \"../AttributeMap\";\nimport { ProgramBuilder } from \"../ShaderBuilder\";\nimport { assignFragColor } from \"./Fragment\";\nconst computePosition = `\r\n  effectMain(rawPos);\r\n  return rawPos;\r\n`;\nconst textureCoordFromPosition = `\r\n  vec2 textureCoordFromPosition(vec4 pos) {\r\n    return (pos.xy + 1.0) * 0.5;\r\n  }\r\n`;\nconst computeBaseColor = \"  return effectMain();\";\nconst computeBaseColorWithShift = `\r\n  return u_readingPixels ? sampleSourcePixel() : effectMain();\r\n`;\n/** @internal */\nexport function createScreenSpaceEffectProgramBuilder(params) {\n    const builder = new ProgramBuilder(AttributeMap.findAttributeMap(undefined, false));\n    if (params.textureCoordFromPosition)\n        builder.vert.addFunction(textureCoordFromPosition);\n    builder.vert.addFunction(params.source.vertex);\n    builder.vert.set(10 /* VertexShaderComponent.ComputePosition */, computePosition);\n    if (params.source.sampleSourcePixel)\n        builder.frag.addFunction(\"vec4 sampleSourcePixel()\", params.source.sampleSourcePixel);\n    builder.frag.addFunction(params.source.fragment);\n    builder.addUniform(\"u_diffuse\", 8 /* VariableType.Sampler2D */, (prog) => {\n        prog.addProgramUniform(\"u_diffuse\", (uniform, progParams) => {\n            const texture = progParams.target.compositor.screenSpaceEffectFbo.getColor(0);\n            texture.bindSampler(uniform, TextureUnit.Zero);\n        });\n    });\n    builder.frag.set(16 /* FragmentShaderComponent.AssignFragData */, assignFragColor);\n    if (!params.source.sampleSourcePixel) {\n        builder.frag.set(1 /* FragmentShaderComponent.ComputeBaseColor */, computeBaseColor);\n    }\n    else {\n        builder.frag.set(1 /* FragmentShaderComponent.ComputeBaseColor */, computeBaseColorWithShift);\n        builder.frag.addUniform(\"u_readingPixels\", 0 /* VariableType.Boolean */, (prog) => {\n            prog.addProgramUniform(\"u_readingPixels\", (uniform, progParams) => {\n                uniform.setUniform1i(progParams.target.isReadPixelsInProgress ? 1 : 0);\n            });\n        });\n    }\n    return builder;\n}\n//# sourceMappingURL=ScreenSpaceEffect.js.map",
      "start": 1693508125827,
      "end": 1693508125906,
      "sourcemaps": null
    }
  ]
}
