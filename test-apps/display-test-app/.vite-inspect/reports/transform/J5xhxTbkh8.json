{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/common/DtaRpcInterface.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { RpcInterface, RpcManager } from \"@itwin/core-common\";\r\nimport * as http from \"http\";\r\nimport * as https from \"https\";\r\nimport { DtaConfiguration } from \"./DtaConfiguration\";\r\n\r\n/** Display Test App RPC interface. */\r\nexport class DtaRpcInterface extends RpcInterface { // eslint-disable-line deprecation/deprecation\r\n  /** The immutable name of the interface. */\r\n  public static readonly interfaceName = \"SVTRpcInterface\";\r\n\r\n  /** The version of the interface. */\r\n  public static interfaceVersion = \"1.0.0\";\r\n\r\n  /** The types that can be marshaled by the interface. */\r\n  public static types = () => [];\r\n\r\n  /** The backend server, when running on a browser */\r\n  public static backendServer: http.Server | https.Server | undefined;\r\n\r\n  public static getClient(): DtaRpcInterface { return RpcManager.getClientForInterface(DtaRpcInterface); }\r\n  public async readExternalSavedViews(_filename: string): Promise<string> { return this.forward(arguments); }\r\n  public async writeExternalSavedViews(_filename: string, _namedViews: string): Promise<void> { return this.forward(arguments); }\r\n  public async readExternalCameraPaths(_filename: string): Promise<string> { return this.forward(arguments); }\r\n  public async writeExternalCameraPaths(_filename: string, _cameraPaths: string): Promise<void> { return this.forward(arguments); }\r\n  public async readExternalFile(_filename: string): Promise<string> { return this.forward(arguments); }\r\n  public async writeExternalFile(_filename: string, _content: string): Promise<void> { return this.forward(arguments); }\r\n  public async terminate(): Promise<void> { return this.forward(arguments); }\r\n  public async getEnvConfig(): Promise<DtaConfiguration> { return this.forward(arguments); }\r\n  public async getAccessToken(): Promise<string> { return this.forward(arguments); }\r\n}\r\n",
      "start": 1693508118379,
      "end": 1693508118555,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { RpcInterface, RpcManager } from \"@itwin/core-common\";\nconst _DtaRpcInterface = class _DtaRpcInterface extends RpcInterface {\n  static getClient() {\n    return RpcManager.getClientForInterface(_DtaRpcInterface);\n  }\n  async readExternalSavedViews(_filename) {\n    return this.forward(arguments);\n  }\n  async writeExternalSavedViews(_filename, _namedViews) {\n    return this.forward(arguments);\n  }\n  async readExternalCameraPaths(_filename) {\n    return this.forward(arguments);\n  }\n  async writeExternalCameraPaths(_filename, _cameraPaths) {\n    return this.forward(arguments);\n  }\n  async readExternalFile(_filename) {\n    return this.forward(arguments);\n  }\n  async writeExternalFile(_filename, _content) {\n    return this.forward(arguments);\n  }\n  async terminate() {\n    return this.forward(arguments);\n  }\n  async getEnvConfig() {\n    return this.forward(arguments);\n  }\n  async getAccessToken() {\n    return this.forward(arguments);\n  }\n};\n// eslint-disable-line deprecation/deprecation\n/** The immutable name of the interface. */\n_DtaRpcInterface.interfaceName = \"SVTRpcInterface\";\n/** The version of the interface. */\n_DtaRpcInterface.interfaceVersion = \"1.0.0\";\n/** The types that can be marshaled by the interface. */\n_DtaRpcInterface.types = () => [];\nexport let DtaRpcInterface = _DtaRpcInterface;\n",
      "start": 1693508118555,
      "end": 1693508118676,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/common/DtaRpcInterface.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { RpcInterface, RpcManager } from \"@itwin/core-common\";\r\nimport * as http from \"http\";\r\nimport * as https from \"https\";\r\nimport { DtaConfiguration } from \"./DtaConfiguration\";\r\n\r\n/** Display Test App RPC interface. */\r\nexport class DtaRpcInterface extends RpcInterface { // eslint-disable-line deprecation/deprecation\r\n  /** The immutable name of the interface. */\r\n  public static readonly interfaceName = \"SVTRpcInterface\";\r\n\r\n  /** The version of the interface. */\r\n  public static interfaceVersion = \"1.0.0\";\r\n\r\n  /** The types that can be marshaled by the interface. */\r\n  public static types = () => [];\r\n\r\n  /** The backend server, when running on a browser */\r\n  public static backendServer: http.Server | https.Server | undefined;\r\n\r\n  public static getClient(): DtaRpcInterface { return RpcManager.getClientForInterface(DtaRpcInterface); }\r\n  public async readExternalSavedViews(_filename: string): Promise<string> { return this.forward(arguments); }\r\n  public async writeExternalSavedViews(_filename: string, _namedViews: string): Promise<void> { return this.forward(arguments); }\r\n  public async readExternalCameraPaths(_filename: string): Promise<string> { return this.forward(arguments); }\r\n  public async writeExternalCameraPaths(_filename: string, _cameraPaths: string): Promise<void> { return this.forward(arguments); }\r\n  public async readExternalFile(_filename: string): Promise<string> { return this.forward(arguments); }\r\n  public async writeExternalFile(_filename: string, _content: string): Promise<void> { return this.forward(arguments); }\r\n  public async terminate(): Promise<void> { return this.forward(arguments); }\r\n  public async getEnvConfig(): Promise<DtaConfiguration> { return this.forward(arguments); }\r\n  public async getAccessToken(): Promise<string> { return this.forward(arguments); }\r\n}\r\n"
        ],
        "mappings": ";AAIA,SAAS,cAAc,kBAAkB;AAMlC,MAAM,mBAAN,MAAM,yBAAwB,aAAa;AAAA,EAahD,OAAc,YAA6B;AAAE,WAAO,WAAW,sBAAsB,gBAAe;AAAA,EAAG;AAAA,EACvG,MAAa,uBAAuB,WAAoC;AAAE,WAAO,KAAK,QAAQ,SAAS;AAAA,EAAG;AAAA,EAC1G,MAAa,wBAAwB,WAAmB,aAAoC;AAAE,WAAO,KAAK,QAAQ,SAAS;AAAA,EAAG;AAAA,EAC9H,MAAa,wBAAwB,WAAoC;AAAE,WAAO,KAAK,QAAQ,SAAS;AAAA,EAAG;AAAA,EAC3G,MAAa,yBAAyB,WAAmB,cAAqC;AAAE,WAAO,KAAK,QAAQ,SAAS;AAAA,EAAG;AAAA,EAChI,MAAa,iBAAiB,WAAoC;AAAE,WAAO,KAAK,QAAQ,SAAS;AAAA,EAAG;AAAA,EACpG,MAAa,kBAAkB,WAAmB,UAAiC;AAAE,WAAO,KAAK,QAAQ,SAAS;AAAA,EAAG;AAAA,EACrH,MAAa,YAA2B;AAAE,WAAO,KAAK,QAAQ,SAAS;AAAA,EAAG;AAAA,EAC1E,MAAa,eAA0C;AAAE,WAAO,KAAK,QAAQ,SAAS;AAAA,EAAG;AAAA,EACzF,MAAa,iBAAkC;AAAE,WAAO,KAAK,QAAQ,SAAS;AAAA,EAAG;AACnF;AAAA;AAAA;AAvBa,iBAEY,gBAAgB;AAAA;AAF5B,iBAKG,mBAAmB;AAAA;AALtB,iBAQG,QAAQ,MAAM,CAAC;AARxB,WAAM,kBAAN;",
        "names": []
      }
    }
  ]
}
