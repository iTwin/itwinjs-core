{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/geometry/lib/esm/geometry3d/GeometryHandler.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/**\n * `GeometryHandler` defines the base abstract methods for double-dispatch geometry computation.\n * * User code that wants to handle one or all of the commonly known geometry types implements a handler class.\n * * User code that does not handle all types is most likely to start with `NullGeometryHandler`, which will provide\n * No-action implementations for all types.\n * @public\n */\nexport class GeometryHandler {\n    /** Handle strongly typed  [[CurveCollection]]  */\n    handleCurveCollection(_g) { }\n    /** Handle strongly typed Path (base class method calls handleCurveCollection) */\n    handlePath(g) {\n        return this.handleCurveCollection(g);\n    }\n    /** Handle strongly typed  Loop (base class method calls handleCurveCollection) */\n    handleLoop(g) {\n        return this.handleCurveCollection(g);\n    }\n    /** Handle strongly typed  ParityRegion (base class method calls handleCurveCollection) */\n    handleParityRegion(g) {\n        return this.handleCurveCollection(g);\n    }\n    /** Handle strongly typed  UnionRegion (base class method calls handleCurveCollection) */\n    handleUnionRegion(g) {\n        return this.handleCurveCollection(g);\n    }\n    /** Handle strongly typed  BagOfCurves (base class method calls handleCurveCollection) */\n    handleBagOfCurves(g) {\n        return this.handleCurveCollection(g);\n    }\n}\n/**\n * `NullGeometryHandler` is a base class for dispatching various geometry types to application specific implementation\n * of some service.\n * To use:\n * * Derive a class from `NullGeometryHandler`\n * * Re-implement any or all of the specific `handleXXXX` methods\n * * Create a handler instance `myHandler`\n * * To send a `GeometryQuery` object `candidateGeometry` through the (fast) dispatch, invoke\n * `candidateGeometry.dispatchToHandler (myHandler).\n * * The appropriate method or methods will get called with a strongly typed `_g ` value.\n * @public\n */\nexport class NullGeometryHandler extends GeometryHandler {\n    /** No-action implementation */\n    handleLineSegment3d(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleLineString3d(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleArc3d(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleCurveCollection(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleBSplineCurve3d(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleInterpolationCurve3d(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleAkimaCurve3d(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleBSplineCurve3dH(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleBSplineSurface3d(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleCoordinateXYZ(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleBSplineSurface3dH(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleIndexedPolyface(_g) {\n        return undefined;\n    }\n    /** No-action implementation\n     * @alpha\n     */\n    handleTransitionSpiral(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handlePath(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleLoop(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleParityRegion(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleUnionRegion(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleBagOfCurves(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleSphere(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleCone(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleBox(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleTorusPipe(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleLinearSweep(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleRotationalSweep(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleRuledSweep(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handlePointString3d(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleBezierCurve3d(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleBezierCurve3dH(_g) {\n        return undefined;\n    }\n}\n/**\n * Implement GeometryHandler methods, with all curve collection methods recursing to children.\n * @public\n */\nexport class RecurseToCurvesGeometryHandler extends GeometryHandler {\n    /** No-action implementation */\n    handleLineSegment3d(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleLineString3d(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleArc3d(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleBSplineCurve3d(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleInterpolationCurve3d(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleAkimaCurve3d(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleBSplineCurve3dH(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleBSplineSurface3d(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleCoordinateXYZ(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleBSplineSurface3dH(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleIndexedPolyface(_g) {\n        return undefined;\n    }\n    /** No-action implementation\n     * @alpha\n     */\n    handleTransitionSpiral(_g) {\n        return undefined;\n    }\n    /** Invoke `child.dispatchToGeometryHandler(this)` for each child in the array returned by the query `g.children` */\n    handleChildren(g) {\n        const children = g.children;\n        if (children)\n            for (const child of children) {\n                child.dispatchToGeometryHandler(this);\n            }\n    }\n    /** Recurse to children */\n    handleCurveCollection(g) {\n        return this.handleChildren(g);\n    }\n    /** Recurse to children */\n    handlePath(g) {\n        return this.handleChildren(g);\n    }\n    /** Recurse to children */\n    handleLoop(g) {\n        return this.handleChildren(g);\n    }\n    /** Recurse to children */\n    handleParityRegion(g) {\n        return this.handleChildren(g);\n    }\n    /** Recurse to children */\n    handleUnionRegion(g) {\n        return this.handleChildren(g);\n    }\n    /** Recurse to children */\n    handleBagOfCurves(g) {\n        return this.handleChildren(g);\n    }\n    /** No-action implementation */\n    handleSphere(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleCone(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleBox(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleTorusPipe(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleLinearSweep(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleRotationalSweep(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleRuledSweep(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handlePointString3d(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleBezierCurve3d(_g) {\n        return undefined;\n    }\n    /** No-action implementation */\n    handleBezierCurve3dH(_g) {\n        return undefined;\n    }\n}\n//# sourceMappingURL=GeometryHandler.js.map",
      "start": 1693508123034,
      "end": 1693508123249,
      "sourcemaps": null
    }
  ]
}
