{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend-devtools/lib/esm/tools/RenderSystemTools.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tools\n */\nimport { IModelApp, NotifyMessageDetails, OutputMessagePriority, Tool } from \"@itwin/core-frontend\";\nimport { parseToggle } from \"./parseToggle\";\n/** Executes some code against a RenderSystemDebugControl obtained from the IModelApp's RenderSystem.\n * @beta\n */\nexport class RenderSystemDebugControlTool extends Tool {\n    async run(_args) {\n        const control = IModelApp.renderSystem.debugControl;\n        if (undefined !== control)\n            this.execute(control);\n        return true;\n    }\n}\n/** Forces webgl context loss.\n * @beta\n */\nclass LoseWebGLContextTool extends RenderSystemDebugControlTool {\n    execute(control) {\n        control.loseContext();\n    }\n}\nLoseWebGLContextTool.toolId = \"LoseWebGLContext\";\nexport { LoseWebGLContextTool };\n/** Compiles all registered shader programs for which compilation has not already been attempted.\n * This is useful for uncovering/debugging platform-specific shader issues.\n * @beta\n */\nclass CompileShadersTool extends RenderSystemDebugControlTool {\n    execute(control) {\n        const compiled = control.compileAllShaders();\n        IModelApp.notifications.outputMessage(new NotifyMessageDetails(compiled ? OutputMessagePriority.Info : OutputMessagePriority.Error, `${compiled ? \"No\" : \"Some\"} compilation errors occurred.`));\n    }\n}\nCompileShadersTool.toolId = \"CompileShaders\";\nexport { CompileShadersTool };\n/** Toggles whether or not device pixel ratio should be taken into account when computing LOD for tiles and decoration graphics.\n * @see [RenderSystem.Options.dpiAwareLOD]($frontend)\n * @beta\n */\nclass ToggleDPIForLODTool extends RenderSystemDebugControlTool {\n    static get minArgs() { return 0; }\n    static get maxArgs() { return 1; }\n    execute(control) {\n        const enable = this._enable ?? !control.dpiAwareLOD;\n        control.dpiAwareLOD = enable;\n        IModelApp.viewManager.invalidateViewportScenes();\n    }\n    async parseAndRun(...args) {\n        const enable = parseToggle(args[0]);\n        if (typeof enable !== \"string\") {\n            this._enable = enable;\n            await this.run([]);\n        }\n        return true;\n    }\n}\nToggleDPIForLODTool.toolId = \"ToggleDPIForLOD\";\nexport { ToggleDPIForLODTool };\n//# sourceMappingURL=RenderSystemTools.js.map",
      "start": 1693508122708,
      "end": 1693508122810,
      "sourcemaps": null
    }
  ]
}
