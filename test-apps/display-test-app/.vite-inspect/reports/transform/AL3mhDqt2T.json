{
  "resolvedId": "D:/hub2023A/itwinjs-core/common/temp/node_modules/.pnpm/@svgdotjs+svg.js@3.0.13/node_modules/@svgdotjs/svg.js/src/modules/optional/arrange.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { makeInstance } from '../../utils/adopter.js'\r\nimport { registerMethods } from '../../utils/methods.js'\r\n\r\n// Get all siblings, including myself\r\nexport function siblings () {\r\n  return this.parent().children()\r\n}\r\n\r\n// Get the curent position siblings\r\nexport function position () {\r\n  return this.parent().index(this)\r\n}\r\n\r\n// Get the next element (will return null if there is none)\r\nexport function next () {\r\n  return this.siblings()[this.position() + 1]\r\n}\r\n\r\n// Get the next element (will return null if there is none)\r\nexport function prev () {\r\n  return this.siblings()[this.position() - 1]\r\n}\r\n\r\n// Send given element one step forward\r\nexport function forward () {\r\n  var i = this.position() + 1\r\n  var p = this.parent()\r\n\r\n  // move node one step forward\r\n  p.removeElement(this).add(this, i)\r\n\r\n  // make sure defs node is always at the top\r\n  if (typeof p.isRoot === 'function' && p.isRoot()) {\r\n    p.node.appendChild(p.defs().node)\r\n  }\r\n\r\n  return this\r\n}\r\n\r\n// Send given element one step backward\r\nexport function backward () {\r\n  var i = this.position()\r\n\r\n  if (i > 0) {\r\n    this.parent().removeElement(this).add(this, i - 1)\r\n  }\r\n\r\n  return this\r\n}\r\n\r\n// Send given element all the way to the front\r\nexport function front () {\r\n  var p = this.parent()\r\n\r\n  // Move node forward\r\n  p.node.appendChild(this.node)\r\n\r\n  // Make sure defs node is always at the top\r\n  if (typeof p.isRoot === 'function' && p.isRoot()) {\r\n    p.node.appendChild(p.defs().node)\r\n  }\r\n\r\n  return this\r\n}\r\n\r\n// Send given element all the way to the back\r\nexport function back () {\r\n  if (this.position() > 0) {\r\n    this.parent().removeElement(this).add(this, 0)\r\n  }\r\n\r\n  return this\r\n}\r\n\r\n// Inserts a given element before the targeted element\r\nexport function before (element) {\r\n  element = makeInstance(element)\r\n  element.remove()\r\n\r\n  var i = this.position()\r\n\r\n  this.parent().add(element, i)\r\n\r\n  return this\r\n}\r\n\r\n// Inserts a given element after the targeted element\r\nexport function after (element) {\r\n  element = makeInstance(element)\r\n  element.remove()\r\n\r\n  var i = this.position()\r\n\r\n  this.parent().add(element, i + 1)\r\n\r\n  return this\r\n}\r\n\r\nexport function insertBefore (element) {\r\n  element = makeInstance(element)\r\n  element.before(this)\r\n  return this\r\n}\r\n\r\nexport function insertAfter (element) {\r\n  element = makeInstance(element)\r\n  element.after(this)\r\n  return this\r\n}\r\n\r\nregisterMethods('Dom', {\r\n  siblings,\r\n  position,\r\n  next,\r\n  prev,\r\n  forward,\r\n  backward,\r\n  front,\r\n  back,\r\n  before,\r\n  after,\r\n  insertBefore,\r\n  insertAfter\r\n})\r\n",
      "start": 1693508126726,
      "end": 1693508127010,
      "sourcemaps": null
    }
  ]
}
