{
  "resolvedId": "D:/hub2023A/itwinjs-core/editor/frontend/lib/esm/EditTool.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Editing\n */\nimport { BeDuration } from \"@itwin/core-bentley\";\nimport { IModelApp, IpcApp } from \"@itwin/core-frontend\";\nimport { editorIpcStrings } from \"@itwin/editor-common\";\nimport * as UndoRedoTools from \"./UndoRedoTool\";\nimport * as DeleteElementsTool from \"./DeleteElementsTool\";\nimport * as ModifyCurveTools from \"./ModifyCurveTools\";\nimport * as ProjectLocation from \"./ProjectLocation/ProjectExtentsDecoration\";\nimport * as ProjectGeoLocation from \"./ProjectLocation/ProjectGeolocation\";\nimport * as SketchTools from \"./SketchTools\";\nimport * as SolidModelingTools from \"./SolidModelingTools\";\nimport * as SolidPrimitiveTools from \"./SolidPrimitiveTools\";\nimport * as TransformTools from \"./TransformElementsTool\";\n/**\n * Supports PrimitiveTool and InputCollector sub-classes.\n * @beta\n */\nclass EditTools {\n    static async startCommand(startArg, ...cmdArgs) {\n        let attempt = 0;\n        while (true) {\n            try {\n                return await IpcApp.callIpcChannel(editorIpcStrings.channel, \"startCommand\", startArg.commandId, startArg.iModelKey, ...cmdArgs);\n            }\n            catch (e) {\n                if (e.name !== editorIpcStrings.commandBusy)\n                    throw e; // unknown backend error\n                const delay = await this.busyRetry?.(attempt++, e.message) ?? 1000;\n                await BeDuration.fromMilliseconds(delay).wait();\n            }\n        }\n    }\n    /** @internal */\n    static translate(prompt) {\n        return IModelApp.localization.getLocalizedString(this.tools + prompt);\n    }\n    /** Call this before using the package (e.g., before attempting to use any of its tools.)\n     * To initialize when starting up your app:\n     * ```ts\n     *   IModelApp.startup();\n     *   await EditorTools.initialize();\n     * ```\n     */\n    static async initialize() {\n        if (this._initialized)\n            return;\n        this._initialized = true;\n        // clean up if we're being shut down\n        IModelApp.onBeforeShutdown.addListener(() => this.shutdown());\n        const namespacePromise = IModelApp.localization.registerNamespace(this.namespace);\n        const tools = IModelApp.tools;\n        tools.registerModule(UndoRedoTools, this.namespace);\n        // TODO: TEMPORARY - Register tools for testing. To be moved into apps.\n        tools.registerModule(ProjectLocation, this.namespace);\n        tools.registerModule(ProjectGeoLocation, this.namespace);\n        tools.registerModule(SketchTools, this.namespace);\n        tools.registerModule(SolidModelingTools, this.namespace);\n        tools.registerModule(SolidPrimitiveTools, this.namespace);\n        tools.registerModule(TransformTools, this.namespace);\n        tools.registerModule(DeleteElementsTool, this.namespace);\n        tools.registerModule(ModifyCurveTools, this.namespace);\n        return namespacePromise;\n    }\n    static shutdown() {\n        this._initialized = false;\n    }\n}\nEditTools.namespace = \"Editor\";\nEditTools.tools = \"Editor:tools.\";\nEditTools._initialized = false;\nexport { EditTools };\n//# sourceMappingURL=EditTool.js.map",
      "start": 1693508122889,
      "end": 1693508122994,
      "sourcemaps": null
    }
  ]
}
