{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/ToolBar.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { assert } from \"@itwin/core-bentley\";\r\nimport { IModelApp, Viewport } from \"@itwin/core-frontend\";\r\n\r\n// cspell:ignore simpleicon\r\n\r\nexport interface ToolButtonProps {\r\n  iconUnicode: string;\r\n  click: (ev: Event) => void;\r\n  tooltip?: string;\r\n}\r\n\r\nconst createTestAppIcon = (iconUnicode: string) => {\r\n  const icon = IModelApp.makeHTMLElement(\"span\", { innerText: iconUnicode });\r\n  icon.style.fontFamily = \"Display-Test-App-Icons\";\r\n  icon.style.fontSize = \"35px\";\r\n  return icon;\r\n};\r\n\r\nexport function createToolButton(props: ToolButtonProps) {\r\n  const icon = createTestAppIcon(props.iconUnicode);\r\n  const div = IModelApp.makeHTMLElement(\"div\", { className: \"simpleicon\" });\r\n\r\n  div.addEventListener(\"click\", (ev: Event) => props.click(ev));\r\n  if (undefined !== props.tooltip)\r\n    div.title = props.tooltip;\r\n\r\n  div.appendChild(icon);\r\n  return div;\r\n}\r\n\r\nexport interface ImageButtonProps {\r\n  src: string;\r\n  tooltip?: string;\r\n  click: (ev: Event) => void;\r\n}\r\n\r\nexport function createImageButton(props: ImageButtonProps) {\r\n  const img = IModelApp.makeHTMLElement(\"img\", { className: \"simpleicon\" });\r\n  img.src = props.src;\r\n  if (undefined !== props.tooltip)\r\n    img.title = props.tooltip;\r\n  img.addEventListener(\"click\", (ev: Event) => props.click(ev));\r\n  return img;\r\n}\r\n\r\nexport abstract class ToolBarDropDown {\r\n  protected _isPinned: boolean = false;\r\n\r\n  public get onViewChanged(): Promise<void> | undefined { return undefined; }\r\n\r\n  protected abstract _open(): void;\r\n  protected abstract _close(): void;\r\n  public dispose(): void { }\r\n\r\n  public abstract get isOpen(): boolean;\r\n\r\n  public open(): void {\r\n    if (!this.isOpen)\r\n      this._open();\r\n  }\r\n\r\n  public close(): boolean {\r\n    if (this.isOpen && !this._isPinned) {\r\n      this._close();\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public togglePinnedState(): void {\r\n    this._isPinned = !this._isPinned;\r\n  }\r\n}\r\n\r\nexport type CreateToolBarDropDown = (parent: HTMLElement) => Promise<ToolBarDropDown>;\r\n\r\nexport interface ToolBarDropDownProps {\r\n  iconUnicode: string;\r\n  createDropDown: CreateToolBarDropDown;\r\n  tooltip?: string;\r\n  only3d?: boolean;\r\n}\r\n\r\nclass DropDown {\r\n  public readonly element: HTMLDivElement;\r\n  private readonly _createDropDown: CreateToolBarDropDown;\r\n  public dropDown?: ToolBarDropDown;\r\n  public readonly only3d: boolean;\r\n\r\n  public constructor(toolBar: ToolBar, index: number, props: ToolBarDropDownProps) {\r\n    this.element = IModelApp.makeHTMLElement(\"div\", { parent: toolBar.element, className: \"simpleicon\" });\r\n    this._createDropDown = props.createDropDown;\r\n    this.only3d = true === props.only3d;\r\n\r\n    const icon = createTestAppIcon(props.iconUnicode);\r\n    icon.addEventListener(\"click\", () => {\r\n      toolBar.toggle(index); // eslint-disable-line @typescript-eslint/no-floating-promises\r\n    });\r\n\r\n    if (undefined !== props.tooltip)\r\n      this.element.title = props.tooltip;\r\n\r\n    this.element.appendChild(icon);\r\n  }\r\n\r\n  public dispose(): void {\r\n    if (this.dropDown) {\r\n      this.dropDown.dispose();\r\n      this.dropDown = undefined;\r\n    }\r\n  }\r\n\r\n  public async createDropDown(): Promise<ToolBarDropDown> {\r\n    return this._createDropDown(this.element);\r\n  }\r\n}\r\n\r\nexport class ToolBar {\r\n  public readonly element: HTMLElement;\r\n  private readonly _dropDowns: DropDown[] = [];\r\n  private _currentlyOpen: Set<number> = new Set<number>();\r\n\r\n  public constructor(container: HTMLElement) {\r\n    this.element = container;\r\n  }\r\n\r\n  public dispose(): void {\r\n    for (const dd of this._dropDowns)\r\n      dd.dispose();\r\n\r\n    this._dropDowns.length = 0;\r\n    this._currentlyOpen.clear();\r\n  }\r\n\r\n  public addDropDown(props: ToolBarDropDownProps): void {\r\n    this._dropDowns.push(new DropDown(this, this._dropDowns.length, props));\r\n  }\r\n\r\n  public addItem(item: HTMLElement): void {\r\n    this.element.appendChild(item);\r\n  }\r\n\r\n  public close(): void {\r\n    for (const currentlyOpen of this._currentlyOpen) {\r\n      const item = this._dropDowns[currentlyOpen];\r\n      assert(undefined !== item.dropDown);\r\n      assert(item.dropDown.isOpen);\r\n\r\n      const closeSuccess = item.dropDown.close();\r\n      if (closeSuccess)\r\n        this._currentlyOpen.delete(currentlyOpen);\r\n    }\r\n  }\r\n\r\n  public async open(index: number): Promise<void> {\r\n    if (this._currentlyOpen.has(index))\r\n      return;\r\n\r\n    this.close();\r\n    const item = this._dropDowns[index];\r\n    if (undefined === item.dropDown)\r\n      item.dropDown = await item.createDropDown();\r\n    else\r\n      item.dropDown.open();\r\n\r\n    this._currentlyOpen.add(index);\r\n  }\r\n\r\n  public async toggle(index: number): Promise<void> {\r\n    if (this._currentlyOpen.has(index))\r\n      this.close();\r\n    else\r\n      await this.open(index);\r\n  }\r\n\r\n  public async onViewChanged(vp: Viewport): Promise<void> {\r\n    this.close();\r\n\r\n    const promises: Array<Promise<void>> = [];\r\n    for (const item of this._dropDowns) {\r\n      if (item.only3d)\r\n        item.element.style.display = vp.view.is3d() ? \"block\" : \"none\";\r\n\r\n      if (undefined !== item.dropDown) {\r\n        const promise = item.dropDown.onViewChanged;\r\n        if (undefined !== promise)\r\n          promises.push(promise);\r\n      }\r\n    }\r\n\r\n    await Promise.all(promises);\r\n  }\r\n}\r\n",
      "start": 1693508121256,
      "end": 1693508121434,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { assert } from \"@itwin/core-bentley\";\nimport { IModelApp } from \"@itwin/core-frontend\";\nconst createTestAppIcon = (iconUnicode) => {\n  const icon = IModelApp.makeHTMLElement(\"span\", { innerText: iconUnicode });\n  icon.style.fontFamily = \"Display-Test-App-Icons\";\n  icon.style.fontSize = \"35px\";\n  return icon;\n};\nexport function createToolButton(props) {\n  const icon = createTestAppIcon(props.iconUnicode);\n  const div = IModelApp.makeHTMLElement(\"div\", { className: \"simpleicon\" });\n  div.addEventListener(\"click\", (ev) => props.click(ev));\n  if (void 0 !== props.tooltip)\n    div.title = props.tooltip;\n  div.appendChild(icon);\n  return div;\n}\nexport function createImageButton(props) {\n  const img = IModelApp.makeHTMLElement(\"img\", { className: \"simpleicon\" });\n  img.src = props.src;\n  if (void 0 !== props.tooltip)\n    img.title = props.tooltip;\n  img.addEventListener(\"click\", (ev) => props.click(ev));\n  return img;\n}\nexport class ToolBarDropDown {\n  constructor() {\n    this._isPinned = false;\n  }\n  get onViewChanged() {\n    return void 0;\n  }\n  dispose() {\n  }\n  open() {\n    if (!this.isOpen)\n      this._open();\n  }\n  close() {\n    if (this.isOpen && !this._isPinned) {\n      this._close();\n      return true;\n    }\n    return false;\n  }\n  togglePinnedState() {\n    this._isPinned = !this._isPinned;\n  }\n}\nclass DropDown {\n  constructor(toolBar, index, props) {\n    this.element = IModelApp.makeHTMLElement(\"div\", { parent: toolBar.element, className: \"simpleicon\" });\n    this._createDropDown = props.createDropDown;\n    this.only3d = true === props.only3d;\n    const icon = createTestAppIcon(props.iconUnicode);\n    icon.addEventListener(\"click\", () => {\n      toolBar.toggle(index);\n    });\n    if (void 0 !== props.tooltip)\n      this.element.title = props.tooltip;\n    this.element.appendChild(icon);\n  }\n  dispose() {\n    if (this.dropDown) {\n      this.dropDown.dispose();\n      this.dropDown = void 0;\n    }\n  }\n  async createDropDown() {\n    return this._createDropDown(this.element);\n  }\n}\nexport class ToolBar {\n  constructor(container) {\n    this._dropDowns = [];\n    this._currentlyOpen = /* @__PURE__ */ new Set();\n    this.element = container;\n  }\n  dispose() {\n    for (const dd of this._dropDowns)\n      dd.dispose();\n    this._dropDowns.length = 0;\n    this._currentlyOpen.clear();\n  }\n  addDropDown(props) {\n    this._dropDowns.push(new DropDown(this, this._dropDowns.length, props));\n  }\n  addItem(item) {\n    this.element.appendChild(item);\n  }\n  close() {\n    for (const currentlyOpen of this._currentlyOpen) {\n      const item = this._dropDowns[currentlyOpen];\n      assert(void 0 !== item.dropDown);\n      assert(item.dropDown.isOpen);\n      const closeSuccess = item.dropDown.close();\n      if (closeSuccess)\n        this._currentlyOpen.delete(currentlyOpen);\n    }\n  }\n  async open(index) {\n    if (this._currentlyOpen.has(index))\n      return;\n    this.close();\n    const item = this._dropDowns[index];\n    if (void 0 === item.dropDown)\n      item.dropDown = await item.createDropDown();\n    else\n      item.dropDown.open();\n    this._currentlyOpen.add(index);\n  }\n  async toggle(index) {\n    if (this._currentlyOpen.has(index))\n      this.close();\n    else\n      await this.open(index);\n  }\n  async onViewChanged(vp) {\n    this.close();\n    const promises = [];\n    for (const item of this._dropDowns) {\n      if (item.only3d)\n        item.element.style.display = vp.view.is3d() ? \"block\" : \"none\";\n      if (void 0 !== item.dropDown) {\n        const promise = item.dropDown.onViewChanged;\n        if (void 0 !== promise)\n          promises.push(promise);\n      }\n    }\n    await Promise.all(promises);\n  }\n}\n",
      "start": 1693508121434,
      "end": 1693508121720,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/ToolBar.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { assert } from \"@itwin/core-bentley\";\r\nimport { IModelApp, Viewport } from \"@itwin/core-frontend\";\r\n\r\n// cspell:ignore simpleicon\r\n\r\nexport interface ToolButtonProps {\r\n  iconUnicode: string;\r\n  click: (ev: Event) => void;\r\n  tooltip?: string;\r\n}\r\n\r\nconst createTestAppIcon = (iconUnicode: string) => {\r\n  const icon = IModelApp.makeHTMLElement(\"span\", { innerText: iconUnicode });\r\n  icon.style.fontFamily = \"Display-Test-App-Icons\";\r\n  icon.style.fontSize = \"35px\";\r\n  return icon;\r\n};\r\n\r\nexport function createToolButton(props: ToolButtonProps) {\r\n  const icon = createTestAppIcon(props.iconUnicode);\r\n  const div = IModelApp.makeHTMLElement(\"div\", { className: \"simpleicon\" });\r\n\r\n  div.addEventListener(\"click\", (ev: Event) => props.click(ev));\r\n  if (undefined !== props.tooltip)\r\n    div.title = props.tooltip;\r\n\r\n  div.appendChild(icon);\r\n  return div;\r\n}\r\n\r\nexport interface ImageButtonProps {\r\n  src: string;\r\n  tooltip?: string;\r\n  click: (ev: Event) => void;\r\n}\r\n\r\nexport function createImageButton(props: ImageButtonProps) {\r\n  const img = IModelApp.makeHTMLElement(\"img\", { className: \"simpleicon\" });\r\n  img.src = props.src;\r\n  if (undefined !== props.tooltip)\r\n    img.title = props.tooltip;\r\n  img.addEventListener(\"click\", (ev: Event) => props.click(ev));\r\n  return img;\r\n}\r\n\r\nexport abstract class ToolBarDropDown {\r\n  protected _isPinned: boolean = false;\r\n\r\n  public get onViewChanged(): Promise<void> | undefined { return undefined; }\r\n\r\n  protected abstract _open(): void;\r\n  protected abstract _close(): void;\r\n  public dispose(): void { }\r\n\r\n  public abstract get isOpen(): boolean;\r\n\r\n  public open(): void {\r\n    if (!this.isOpen)\r\n      this._open();\r\n  }\r\n\r\n  public close(): boolean {\r\n    if (this.isOpen && !this._isPinned) {\r\n      this._close();\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public togglePinnedState(): void {\r\n    this._isPinned = !this._isPinned;\r\n  }\r\n}\r\n\r\nexport type CreateToolBarDropDown = (parent: HTMLElement) => Promise<ToolBarDropDown>;\r\n\r\nexport interface ToolBarDropDownProps {\r\n  iconUnicode: string;\r\n  createDropDown: CreateToolBarDropDown;\r\n  tooltip?: string;\r\n  only3d?: boolean;\r\n}\r\n\r\nclass DropDown {\r\n  public readonly element: HTMLDivElement;\r\n  private readonly _createDropDown: CreateToolBarDropDown;\r\n  public dropDown?: ToolBarDropDown;\r\n  public readonly only3d: boolean;\r\n\r\n  public constructor(toolBar: ToolBar, index: number, props: ToolBarDropDownProps) {\r\n    this.element = IModelApp.makeHTMLElement(\"div\", { parent: toolBar.element, className: \"simpleicon\" });\r\n    this._createDropDown = props.createDropDown;\r\n    this.only3d = true === props.only3d;\r\n\r\n    const icon = createTestAppIcon(props.iconUnicode);\r\n    icon.addEventListener(\"click\", () => {\r\n      toolBar.toggle(index); // eslint-disable-line @typescript-eslint/no-floating-promises\r\n    });\r\n\r\n    if (undefined !== props.tooltip)\r\n      this.element.title = props.tooltip;\r\n\r\n    this.element.appendChild(icon);\r\n  }\r\n\r\n  public dispose(): void {\r\n    if (this.dropDown) {\r\n      this.dropDown.dispose();\r\n      this.dropDown = undefined;\r\n    }\r\n  }\r\n\r\n  public async createDropDown(): Promise<ToolBarDropDown> {\r\n    return this._createDropDown(this.element);\r\n  }\r\n}\r\n\r\nexport class ToolBar {\r\n  public readonly element: HTMLElement;\r\n  private readonly _dropDowns: DropDown[] = [];\r\n  private _currentlyOpen: Set<number> = new Set<number>();\r\n\r\n  public constructor(container: HTMLElement) {\r\n    this.element = container;\r\n  }\r\n\r\n  public dispose(): void {\r\n    for (const dd of this._dropDowns)\r\n      dd.dispose();\r\n\r\n    this._dropDowns.length = 0;\r\n    this._currentlyOpen.clear();\r\n  }\r\n\r\n  public addDropDown(props: ToolBarDropDownProps): void {\r\n    this._dropDowns.push(new DropDown(this, this._dropDowns.length, props));\r\n  }\r\n\r\n  public addItem(item: HTMLElement): void {\r\n    this.element.appendChild(item);\r\n  }\r\n\r\n  public close(): void {\r\n    for (const currentlyOpen of this._currentlyOpen) {\r\n      const item = this._dropDowns[currentlyOpen];\r\n      assert(undefined !== item.dropDown);\r\n      assert(item.dropDown.isOpen);\r\n\r\n      const closeSuccess = item.dropDown.close();\r\n      if (closeSuccess)\r\n        this._currentlyOpen.delete(currentlyOpen);\r\n    }\r\n  }\r\n\r\n  public async open(index: number): Promise<void> {\r\n    if (this._currentlyOpen.has(index))\r\n      return;\r\n\r\n    this.close();\r\n    const item = this._dropDowns[index];\r\n    if (undefined === item.dropDown)\r\n      item.dropDown = await item.createDropDown();\r\n    else\r\n      item.dropDown.open();\r\n\r\n    this._currentlyOpen.add(index);\r\n  }\r\n\r\n  public async toggle(index: number): Promise<void> {\r\n    if (this._currentlyOpen.has(index))\r\n      this.close();\r\n    else\r\n      await this.open(index);\r\n  }\r\n\r\n  public async onViewChanged(vp: Viewport): Promise<void> {\r\n    this.close();\r\n\r\n    const promises: Array<Promise<void>> = [];\r\n    for (const item of this._dropDowns) {\r\n      if (item.only3d)\r\n        item.element.style.display = vp.view.is3d() ? \"block\" : \"none\";\r\n\r\n      if (undefined !== item.dropDown) {\r\n        const promise = item.dropDown.onViewChanged;\r\n        if (undefined !== promise)\r\n          promises.push(promise);\r\n      }\r\n    }\r\n\r\n    await Promise.all(promises);\r\n  }\r\n}\r\n"
        ],
        "mappings": "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",
        "names": []
      }
    }
  ]
}
