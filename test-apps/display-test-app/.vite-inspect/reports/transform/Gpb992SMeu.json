{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend-devtools/lib/esm/effects/FlipImage.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Effects\n */\nimport { Tool, UniformType, VaryingType } from \"@itwin/core-frontend\";\nimport { parseArgs } from \"../tools/parseArgs\";\nimport { AddEffectTool, refreshViewportsForEffect } from \"./EffectTools\";\nlet flipHorizontal = false;\nlet flipVertical = false;\nlet flipColor = false;\n/** An extremely simple and mostly useless effect intended to demonstrate the basics of creating a screen-space effect.\n * It flips the Viewport's image on the x and/or y axis, and/or inverts the color of each pixel.\n * @beta\n */\nclass FlipImageEffect extends AddEffectTool {\n    get effectName() { return \"flip\"; }\n    get textureCoordFromPosition() { return true; }\n    get source() {\n        return {\n            // Compute texture coordinate for use in fragment shader.\n            vertex: `\r\n        void effectMain(vec4 pos) {\r\n          vec2 uv = textureCoordFromPosition(pos);\r\n          if (u_flipHorizontal)\r\n            uv.x = 1.0 - uv.x;\r\n\r\n          if (u_flipVertical)\r\n            uv.y = 1.0 - uv.y;\r\n\r\n          v_uv = uv;\r\n        }`,\n            // Sample the original image to flip on x and/or y axis, then invert its color.\n            fragment: `\r\n        vec4 effectMain() {\r\n          vec4 color = sampleSourcePixel();\r\n          if (u_flipColor) {\r\n            color.r = 1.0 - color.r;\r\n            color.g = 1.0 - color.g;\r\n            color.b = 1.0 - color.b;\r\n          }\r\n\r\n          return color;\r\n        }`,\n            // Because we're moving pixels around, we must tell the render system where the source pixel was originally located - otherwise\n            // element locate will not work correctly.\n            sampleSourcePixel: \"return TEXTURE(u_diffuse, v_uv);\",\n        };\n    }\n    defineEffect(builder) {\n        // Don't bother applying the effect if nothing is to be flipped.\n        builder.shouldApply = (_context) => flipHorizontal || flipVertical || flipColor;\n        // Define the varying for the texture coordinate.\n        builder.addVarying(\"v_uv\", VaryingType.Vec2);\n        // Hook up the uniforms.\n        builder.addUniform({\n            name: \"u_flipHorizontal\",\n            type: UniformType.Bool,\n            bind: (uniform, _context) => uniform.setUniform1i(flipHorizontal ? 1 : 0),\n        });\n        builder.addUniform({\n            name: \"u_flipVertical\",\n            type: UniformType.Bool,\n            bind: (uniform, _context) => uniform.setUniform1i(flipVertical ? 1 : 0),\n        });\n        builder.addUniform({\n            name: \"u_flipColor\",\n            type: UniformType.Bool,\n            bind: (uniform, _context) => uniform.setUniform1i(flipColor ? 1 : 0),\n        });\n    }\n}\nFlipImageEffect.toolId = \"FlipImageEffect\";\nexport { FlipImageEffect };\n/** Configure the [[FlipImageEffect]].\n * @beta\n */\nclass FlipImageConfig extends Tool {\n    static get minArgs() { return 0; }\n    static get maxArgs() { return 3; }\n    async run(horizontal, vertical, color) {\n        flipHorizontal = !!horizontal;\n        flipVertical = !!vertical;\n        flipColor = !!color;\n        refreshViewportsForEffect(\"fdt flip\");\n        return true;\n    }\n    async parseAndRun(...input) {\n        const args = parseArgs(input);\n        return this.run(args.getBoolean(\"h\"), args.getBoolean(\"v\"), args.getBoolean(\"c\"));\n    }\n}\nFlipImageConfig.toolId = \"FlipImageConfig\";\nexport { FlipImageConfig };\n//# sourceMappingURL=FlipImage.js.map",
      "start": 1693508122588,
      "end": 1693508122695,
      "sourcemaps": null
    }
  ]
}
