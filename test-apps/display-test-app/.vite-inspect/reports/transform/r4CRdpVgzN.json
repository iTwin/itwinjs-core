{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/ThematicDisplay.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { assert } from \"@itwin/core-bentley\";\r\nimport { ComboBox, ComboBoxEntry, createButton, createCheckBox, createComboBox, createLabeledNumericInput, createSlider, LabeledNumericInput, Slider } from \"@itwin/frontend-devtools\";\r\nimport { Point3d, Range1d } from \"@itwin/core-geometry\";\r\nimport {\r\n  calculateSolarDirectionFromAngles, ColorByName, ColorDef, ThematicDisplay, ThematicDisplayMode, ThematicDisplayProps,\r\n  ThematicDisplaySensorProps, ThematicGradientColorScheme, ThematicGradientMode, ViewFlags,\r\n} from \"@itwin/core-common\";\r\nimport { Viewport, ViewState, ViewState3d } from \"@itwin/core-frontend\";\r\n\r\ntype Required<T> = {\r\n  [P in keyof T]-?: T[P];\r\n};\r\n\r\nconst defaultSettings: Required<ThematicDisplayProps> = {\r\n  displayMode: ThematicDisplayMode.Height,\r\n  gradientSettings: {\r\n    mode: ThematicGradientMode.Smooth,\r\n    marginColor: ColorByName.blanchedAlmond,\r\n    colorScheme: ThematicGradientColorScheme.BlueRed,\r\n  },\r\n  axis: [0.0, 0.0, 1.0],\r\n  range: [0, 1],\r\n  sunDirection: calculateSolarDirectionFromAngles({ azimuth: 315.0, elevation: 45.0 }).toJSON(),\r\n  sensorSettings: {\r\n    sensors: [],\r\n    distanceCutoff: 0,\r\n  },\r\n};\r\n\r\nexport class ThematicDisplayEditor {\r\n  // create a 32x32 grid of sensors spread evenly within the extents of the project\r\n  private _createSensorGrid(sensors: ThematicDisplaySensorProps[]) {\r\n    const sensorGridXLength = 32;\r\n    const sensorGridYLength = 32;\r\n\r\n    const sensorValues: number[] = [0.1, 0.9, 0.25, 0.15, 0.8, 0.34, 0.78, 0.32, 0.15, 0.29, 0.878, 0.95, 0.5, 0.278, 0.44, 0.33, 0.71];\r\n\r\n    const extents = this._vp.view.iModel.projectExtents;\r\n    const xRange = Range1d.createXX(extents.xLow, extents.xHigh);\r\n    const yRange = Range1d.createXX(extents.yLow, extents.yHigh);\r\n    const sensorZ = extents.low.z + (extents.high.z - extents.low.z) / 2.0;\r\n\r\n    let sensorValueIndex = 0;\r\n\r\n    for (let y = 0; y < sensorGridYLength; y++) {\r\n      const sensorY = yRange.fractionToPoint(y / (sensorGridYLength - 1));\r\n\r\n      for (let x = 0; x < sensorGridXLength; x++) {\r\n        const sensorX = xRange.fractionToPoint(x / (sensorGridXLength - 1));\r\n\r\n        const sensorPos = Point3d.create(sensorX, sensorY, sensorZ);\r\n        this._pushNewSensor(sensors, { position: sensorPos, value: sensorValues[sensorValueIndex] });\r\n\r\n        sensorValueIndex++;\r\n        if (sensorValueIndex >= sensorValues.length)\r\n          sensorValueIndex = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  private _pushNewSensor(sensors: ThematicDisplaySensorProps[], sensorProps?: ThematicDisplaySensorProps) {\r\n    if (undefined !== sensorProps) {\r\n      sensors.push(sensorProps);\r\n      return;\r\n    }\r\n\r\n    const extents = this._vp.view.iModel.projectExtents;\r\n    defaultSettings.range = { low: extents.zLow, high: extents.zHigh };\r\n\r\n    const sensorZ = extents.low.z + (extents.high.z - extents.low.z) / 2.0;\r\n    const sensorLow = extents.low.cloneAsPoint3d();\r\n    const sensorHigh = extents.high.cloneAsPoint3d();\r\n    sensorLow.z = sensorHigh.z = sensorZ;\r\n\r\n    const sensorPos = sensorLow.interpolate(0.5, sensorHigh);\r\n\r\n    sensors.push({ position: sensorPos, value: 0.5 });\r\n  }\r\n\r\n  private _resetSensorEntries(count: number) {\r\n    const select = this._thematicSensor.select;\r\n    while (select.length > 0)\r\n      select.remove(0);\r\n\r\n    for (let i = 0; i < count; i++)\r\n      this._appendSensorEntry(`Sensor ${i.toString()}`);\r\n  }\r\n\r\n  private _appendSensorEntry(name: string) {\r\n    const option = document.createElement(\"option\");\r\n    option.innerText = name;\r\n    this._thematicSensor.select.appendChild(option);\r\n  }\r\n\r\n  private readonly _vp: Viewport;\r\n  private readonly _scratchViewFlags = new ViewFlags();\r\n  private readonly _update: (view: ViewState) => void;\r\n  private readonly _thematicDisplayMode: ComboBox;\r\n  private readonly _thematicGradientMode: ComboBox;\r\n  private readonly _thematicStepCount: LabeledNumericInput;\r\n  private readonly _thematicColorScheme: ComboBox;\r\n  private readonly _thematicRangeLow: LabeledNumericInput;\r\n  private readonly _thematicRangeHigh: LabeledNumericInput;\r\n  private readonly _thematicColorMix: Slider;\r\n  private readonly _thematicAxisX: LabeledNumericInput;\r\n  private readonly _thematicAxisY: LabeledNumericInput;\r\n  private readonly _thematicAxisZ: LabeledNumericInput;\r\n  private readonly _thematicSunDirX: LabeledNumericInput;\r\n  private readonly _thematicSunDirY: LabeledNumericInput;\r\n  private readonly _thematicSunDirZ: LabeledNumericInput;\r\n  private readonly _thematicDistanceCutoff: LabeledNumericInput;\r\n  private readonly _thematicSensor: ComboBox;\r\n  private readonly _thematicSensorX: LabeledNumericInput;\r\n  private readonly _thematicSensorY: LabeledNumericInput;\r\n  private readonly _thematicSensorZ: LabeledNumericInput;\r\n  private readonly _thematicSensorValue: LabeledNumericInput;\r\n\r\n  private static _gradientModeEntriesForHeight = [\r\n    { name: \"Smooth\", value: ThematicGradientMode.Smooth },\r\n    { name: \"Stepped\", value: ThematicGradientMode.Stepped },\r\n    { name: \"SteppedWithDelimiter\", value: ThematicGradientMode.SteppedWithDelimiter },\r\n    { name: \"IsoLines\", value: ThematicGradientMode.IsoLines },\r\n  ];\r\n  private static _gradientModeEntriesForOthers = [\r\n    { name: \"Smooth\", value: ThematicGradientMode.Smooth },\r\n    { name: \"Stepped\", value: ThematicGradientMode.Stepped },\r\n  ];\r\n\r\n  private static _appendComboBoxEntry(select: HTMLSelectElement, entry: ComboBoxEntry) {\r\n    const option = document.createElement(\"option\");\r\n    option.innerText = entry.name;\r\n    if (undefined !== entry.value)\r\n      option.value = entry.value.toString();\r\n    select.appendChild(option);\r\n  }\r\n\r\n  private static _setComboBoxEntries(cb: ComboBox, entries: ComboBoxEntry[]) {\r\n    // remove all existing entries\r\n    let i;\r\n    const ln = cb.select.options.length - 1;\r\n    for (i = ln; i >= 0; i--) {\r\n      cb.select.remove(i);\r\n    }\r\n\r\n    // add new entries\r\n    for (const entry of entries) {\r\n      ThematicDisplayEditor._appendComboBoxEntry(cb.select, entry);\r\n    }\r\n  }\r\n\r\n  public updateDefaultRange() {\r\n    const extents = this._vp.view.iModel.projectExtents;\r\n    defaultSettings.range = { low: extents.zLow, high: extents.zHigh };\r\n  }\r\n\r\n  public constructor(vp: Viewport, parent: HTMLElement) {\r\n    this._vp = vp;\r\n\r\n    const isThematicDisplaySupported = (view: ViewState) => view.is3d();\r\n    const isThematicDisplayEnabled = (view: ViewState) => view.viewFlags.thematicDisplay;\r\n\r\n    const div = document.createElement(\"div\");\r\n\r\n    const thematicControlsDiv = document.createElement(\"div\")!;\r\n\r\n    const showHideControls = (show: boolean) => {\r\n      const display = show ? \"block\" : \"none\";\r\n      thematicControlsDiv.style.display = display;\r\n    };\r\n\r\n    const enableThematicDisplay = (enabled: boolean) => {\r\n      const extents = this._vp.view.iModel.projectExtents;\r\n      defaultSettings.range = { low: extents.zLow, high: extents.zHigh };\r\n      const sensors = defaultSettings.sensorSettings.sensors!;\r\n      defaultSettings.sensorSettings.distanceCutoff = extents.xLength() / 25.0;\r\n\r\n      const sensorZ = extents.low.z + (extents.high.z - extents.low.z) / 2.0;\r\n      const sensorLow = extents.low.cloneAsPoint3d();\r\n      const sensorHigh = extents.high.cloneAsPoint3d();\r\n      sensorLow.z = sensorHigh.z = sensorZ;\r\n\r\n      const sensorPosA = sensorLow.interpolate(0.25, sensorHigh);\r\n      const sensorPosB = sensorLow.interpolate(0.5, sensorHigh);\r\n      const sensorPosC = sensorLow.interpolate(0.65, sensorHigh);\r\n      const sensorPosD = sensorLow.interpolate(0.75, sensorHigh);\r\n\r\n      sensors[0] = { position: sensorPosA, value: 0.025 };\r\n      sensors[1] = { position: sensorPosB, value: 0.5 };\r\n      sensors[2] = { position: sensorPosC, value: 0.025 };\r\n      sensors[3] = { position: sensorPosD, value: 0.75 };\r\n\r\n      this._resetSensorEntries(4);\r\n\r\n      const displaySettings = (this._vp.view as ViewState3d).getDisplayStyle3d().settings;\r\n      displaySettings.thematic = ThematicDisplay.fromJSON(defaultSettings);\r\n      this._vp.viewFlags = this._vp.viewFlags.with(\"thematicDisplay\", enabled);\r\n      showHideControls(enabled);\r\n      this.sync();\r\n    };\r\n\r\n    const checkboxInterface = createCheckBox({\r\n      parent: div,\r\n      handler: (cb) => enableThematicDisplay(cb.checked),\r\n      name: \"Thematic Display\",\r\n      id: \"cbx_Thematic\",\r\n    });\r\n    const checkbox = checkboxInterface.checkbox;\r\n    const checkboxLabel = checkboxInterface.label;\r\n\r\n    const displayModeEntries = [\r\n      { name: \"Height\", value: ThematicDisplayMode.Height },\r\n      { name: \"InverseDistanceWeightedSensors\", value: ThematicDisplayMode.InverseDistanceWeightedSensors },\r\n      { name: \"Slope\", value: ThematicDisplayMode.Slope },\r\n      { name: \"HillShade\", value: ThematicDisplayMode.HillShade },\r\n    ];\r\n\r\n    this._thematicDisplayMode = createComboBox({\r\n      parent: thematicControlsDiv,\r\n      name: \"Display Mode: \",\r\n      entries: displayModeEntries,\r\n      id: \"thematic_displayMode\",\r\n      value: 0,\r\n      handler: (thing) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        const prevDisplayMode = props.displayMode;\r\n        const newDisplayMode = props.displayMode = Number.parseInt(thing.value, 10);\r\n        if (ThematicDisplayMode.Slope === newDisplayMode) {\r\n          props.range = { low: 0.0, high: 90.0 };\r\n        } else if (ThematicDisplayMode.Slope === prevDisplayMode) {\r\n          this.updateDefaultRange();\r\n          const range1d = Range1d.fromJSON(defaultSettings.range);\r\n          props.range = { low: range1d.low, high: range1d.high };\r\n        }\r\n        return props;\r\n      }),\r\n    });\r\n\r\n    this._thematicGradientMode = createComboBox({\r\n      parent: thematicControlsDiv,\r\n      name: \"Gradient Mode: \",\r\n      entries: ThematicDisplayEditor._gradientModeEntriesForHeight,\r\n      id: \"thematic_gradientMode\",\r\n      value: 0,\r\n      handler: (thing) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        props.gradientSettings!.mode = Number.parseInt(thing.value, 10);\r\n        return props;\r\n      }),\r\n    });\r\n\r\n    const spanStepAndColor = document.createElement(\"span\");\r\n    spanStepAndColor.style.display = \"flex\";\r\n    thematicControlsDiv.appendChild(spanStepAndColor);\r\n    this._thematicStepCount = createLabeledNumericInput({\r\n      id: \"thematic_stepCount\",\r\n      parent: spanStepAndColor,\r\n      value: 1,\r\n      handler: (value, _) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        props.gradientSettings!.stepCount = value;\r\n        return props;\r\n      }),\r\n      min: 2,\r\n      max: 65536,\r\n      step: 1,\r\n      name: \"Step Count: \",\r\n    });\r\n    this._thematicStepCount.div.style.marginRight = \"1.5em\";\r\n\r\n    const colorSchemeEntries = [\r\n      { name: \"BlueRed\", value: ThematicGradientColorScheme.BlueRed },\r\n      { name: \"RedBlue\", value: ThematicGradientColorScheme.RedBlue },\r\n      { name: \"Monochrome\", value: ThematicGradientColorScheme.Monochrome },\r\n      { name: \"Topographic\", value: ThematicGradientColorScheme.Topographic },\r\n      { name: \"SeaMountain\", value: ThematicGradientColorScheme.SeaMountain },\r\n      { name: \"Custom\", value: ThematicGradientColorScheme.Custom },\r\n    ];\r\n\r\n    this._thematicColorScheme = createComboBox({\r\n      parent: spanStepAndColor,\r\n      name: \"Color Scheme: \",\r\n      entries: colorSchemeEntries,\r\n      id: \"thematic_colorScheme\",\r\n      value: 0,\r\n      handler: (thing) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        props.gradientSettings!.colorScheme = Number.parseInt(thing.value, 10);\r\n\r\n        // For now, we just hard code a custom color scheme in here. ###TODO - allow user to specify their own custom values.\r\n        if (props.gradientSettings!.colorScheme === ThematicGradientColorScheme.Custom) {\r\n          const customKeyValues = [[0.0, 255, 255, 0], [0.5, 255, 0, 255], [1.0, 0, 255, 255]];\r\n          props.gradientSettings!.customKeys = [];\r\n          customKeyValues.forEach((key) => props.gradientSettings!.customKeys!.push({ value: key[0], color: ColorDef.computeTbgrFromComponents(key[1], key[2], key[3]) }));\r\n        }\r\n        return props;\r\n      }),\r\n    });\r\n\r\n    const spanRange = document.createElement(\"span\");\r\n    spanRange.style.display = \"flex\";\r\n    thematicControlsDiv.appendChild(spanRange);\r\n    this._thematicRangeHigh = createLabeledNumericInput({\r\n      id: \"thematic_rangeHigh\",\r\n      parent: spanRange,\r\n      value: -1.0,\r\n      handler: (value, _) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        const oldRange = Range1d.fromJSON(props.range);\r\n        props.range = { low: oldRange.low, high: value };\r\n        return props;\r\n      }),\r\n      min: -100000.0,\r\n      max: 100000.0,\r\n      step: 1.0,\r\n      parseAsFloat: true,\r\n      name: \"High range: \",\r\n    });\r\n    this._thematicRangeHigh.div.style.marginRight = \"0.5em\";\r\n\r\n    this._thematicRangeLow = createLabeledNumericInput({\r\n      id: \"thematic_rangeLow\",\r\n      parent: spanRange,\r\n      value: 1.0,\r\n      handler: (value, _) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        const oldRange = Range1d.fromJSON(props.range);\r\n        props.range = { low: value, high: oldRange.high };\r\n        return props;\r\n      }),\r\n      min: -100000.0,\r\n      max: 100000.0,\r\n      step: 1.0,\r\n      parseAsFloat: true,\r\n      name: \"Low range: \",\r\n    });\r\n\r\n    const defaultAxis = Point3d.fromJSON(defaultSettings.axis);\r\n\r\n    const spanAxis = document.createElement(\"span\");\r\n    spanAxis.style.display = \"flex\";\r\n    thematicControlsDiv.appendChild(spanAxis);\r\n    this._thematicAxisX = createLabeledNumericInput({\r\n      id: \"thematic_axisX\",\r\n      parent: spanAxis,\r\n      value: defaultAxis.x,\r\n      handler: (value, _) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        const axis = Point3d.fromJSON(props.axis);\r\n        axis.x = value;\r\n        props.axis = axis.toJSON();\r\n        return props;\r\n      }),\r\n      min: -1.0,\r\n      max: 1.0,\r\n      step: 0.1,\r\n      parseAsFloat: true,\r\n      name: \"Axis X: \",\r\n    });\r\n    this._thematicAxisX.div.style.marginRight = \"0.5em\";\r\n\r\n    this._thematicAxisY = createLabeledNumericInput({\r\n      id: \"thematic_axisY\",\r\n      parent: spanAxis,\r\n      value: defaultAxis.y,\r\n      handler: (value, _) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        const axis = Point3d.fromJSON(props.axis);\r\n        axis.y = value;\r\n        props.axis = axis.toJSON();\r\n        return props;\r\n      }),\r\n      min: -1.0,\r\n      max: 1.0,\r\n      step: 0.1,\r\n      parseAsFloat: true,\r\n      name: \"Y: \",\r\n    });\r\n    this._thematicAxisY.div.style.marginRight = \"0.5em\";\r\n\r\n    this._thematicAxisZ = createLabeledNumericInput({\r\n      id: \"thematic_axisZ\",\r\n      parent: spanAxis,\r\n      value: defaultAxis.z,\r\n      handler: (value, _) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        const axis = Point3d.fromJSON(props.axis);\r\n        axis.z = value;\r\n        props.axis = axis.toJSON();\r\n        return props;\r\n      }),\r\n      min: -1.0,\r\n      max: 1.0,\r\n      step: 0.1,\r\n      parseAsFloat: true,\r\n      name: \"Z: \",\r\n    });\r\n\r\n    this._thematicColorMix = createSlider({\r\n      id: \"thematic_colorMix\",\r\n      name: \"Terrain/PointCloud Mix\",\r\n      parent: thematicControlsDiv,\r\n      min: \"0.0\",\r\n      max: \"1.0\",\r\n      step: \"0.05\",\r\n      value: \"0.0\",\r\n      readout: \"right\",\r\n      handler: (_) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        props.gradientSettings!.colorMix = parseFloat(this._thematicColorMix.slider.value);\r\n        return props;\r\n      }),\r\n    });\r\n    this._thematicColorMix.div.style.textAlign = \"left\";\r\n\r\n    const spanSunDir = document.createElement(\"span\");\r\n    spanSunDir.style.display = \"flex\";\r\n    thematicControlsDiv.appendChild(spanSunDir);\r\n    this._thematicSunDirX = createLabeledNumericInput({\r\n      id: \"thematic_sunDirX\",\r\n      parent: spanSunDir,\r\n      value: 0.0,\r\n      handler: (value, _) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        const sunDir = Point3d.fromJSON(props.sunDirection);\r\n        sunDir.x = value;\r\n        props.sunDirection = sunDir.toJSON();\r\n        return props;\r\n      }),\r\n      min: -1.0,\r\n      max: 1.0,\r\n      step: 0.1,\r\n      parseAsFloat: true,\r\n      name: \"Sun Direction X: \",\r\n    });\r\n    this._thematicSunDirX.div.style.marginRight = \"0.5em\";\r\n\r\n    this._thematicSunDirY = createLabeledNumericInput({\r\n      id: \"thematic_sunDirY\",\r\n      parent: spanSunDir,\r\n      value: 0.0,\r\n      handler: (value, _) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        const sunDir = Point3d.fromJSON(props.sunDirection);\r\n        sunDir.y = value;\r\n        props.sunDirection = sunDir.toJSON();\r\n        return props;\r\n      }),\r\n      min: -1.0,\r\n      max: 1.0,\r\n      step: 0.1,\r\n      parseAsFloat: true,\r\n      name: \"Y: \",\r\n    });\r\n    this._thematicSunDirY.div.style.marginRight = \"0.5em\";\r\n\r\n    this._thematicSunDirZ = createLabeledNumericInput({\r\n      id: \"thematic_sunDirZ\",\r\n      parent: spanSunDir,\r\n      value: 0.0,\r\n      handler: (value, _) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        const sunDir = Point3d.fromJSON(props.sunDirection);\r\n        sunDir.z = value;\r\n        props.sunDirection = sunDir.toJSON();\r\n        return props;\r\n      }),\r\n      min: -1.0,\r\n      max: 1.0,\r\n      step: 0.1,\r\n      parseAsFloat: true,\r\n      name: \"Z: \",\r\n    });\r\n\r\n    this._thematicDistanceCutoff = createLabeledNumericInput({\r\n      id: \"thematic_distanceCutoff\",\r\n      parent: thematicControlsDiv,\r\n      value: 0.0,\r\n      handler: (value, _) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        props.sensorSettings!.distanceCutoff = value;\r\n        return props;\r\n      }),\r\n      min: -999999.0,\r\n      max: 999999.0,\r\n      step: 0.1,\r\n      parseAsFloat: true,\r\n      name: \"Distance Cutoff: \",\r\n    });\r\n\r\n    this._thematicSensor = createComboBox({\r\n      parent: thematicControlsDiv,\r\n      name: \"Selected Sensor: \",\r\n      entries: [],\r\n      id: \"thematic_sensor\",\r\n      value: 0,\r\n      handler: (_thing) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        return this.getThematicSettingsProps(view);\r\n      }),\r\n    });\r\n\r\n    const spanSensor = document.createElement(\"span\");\r\n    spanSensor.style.display = \"flex\";\r\n    thematicControlsDiv.appendChild(spanSensor);\r\n    this._thematicSensorX = createLabeledNumericInput({\r\n      id: \"thematic_sensorX\",\r\n      parent: spanSensor,\r\n      value: 0.0,\r\n      handler: (value, _) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        const selectedSensor = this._thematicSensor.select.options.selectedIndex;\r\n        const pos = Point3d.fromJSON(props.sensorSettings!.sensors![selectedSensor].position);\r\n        pos.x = value;\r\n        props.sensorSettings!.sensors![selectedSensor].position = pos.toJSON();\r\n        return props;\r\n      }),\r\n      min: -999999.0,\r\n      max: 999999.0,\r\n      step: 0.1,\r\n      parseAsFloat: true,\r\n      name: \"Sensor X: \",\r\n    });\r\n    this._thematicSensorX.div.style.marginRight = \"0.5em\";\r\n\r\n    this._thematicSensorY = createLabeledNumericInput({\r\n      id: \"thematic_sensorY\",\r\n      parent: spanSensor,\r\n      value: 0.0,\r\n      handler: (value, _) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        const selectedSensor = this._thematicSensor.select.options.selectedIndex;\r\n        const pos = Point3d.fromJSON(props.sensorSettings!.sensors![selectedSensor].position);\r\n        pos.y = value;\r\n        props.sensorSettings!.sensors![selectedSensor].position = pos.toJSON();\r\n        return props;\r\n      }),\r\n      min: -999999.0,\r\n      max: 999999.0,\r\n      step: 0.1,\r\n      parseAsFloat: true,\r\n      name: \"Y: \",\r\n    });\r\n    this._thematicSensorY.div.style.marginRight = \"0.5em\";\r\n\r\n    this._thematicSensorZ = createLabeledNumericInput({\r\n      id: \"thematic_sensorZ\",\r\n      parent: spanSensor,\r\n      value: 0.0,\r\n      handler: (value, _) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        const selectedSensor = this._thematicSensor.select.options.selectedIndex;\r\n        const pos = Point3d.fromJSON(props.sensorSettings!.sensors![selectedSensor].position);\r\n        pos.z = value;\r\n        props.sensorSettings!.sensors![selectedSensor].position = pos.toJSON();\r\n        return props;\r\n      }),\r\n      min: -999999.0,\r\n      max: 999999.0,\r\n      step: 0.1,\r\n      parseAsFloat: true,\r\n      name: \"Z: \",\r\n    });\r\n\r\n    this._thematicSensorValue = createLabeledNumericInput({\r\n      id: \"thematic_sensorValue\",\r\n      parent: thematicControlsDiv,\r\n      value: 0.0,\r\n      handler: (value, _) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        const selectedSensor = this._thematicSensor.select.options.selectedIndex;\r\n        props.sensorSettings!.sensors![selectedSensor].value = value;\r\n        return props;\r\n      }),\r\n      min: 0.0,\r\n      max: 1.0,\r\n      step: 0.025,\r\n      parseAsFloat: true,\r\n      name: \"Sensor Value: \",\r\n    });\r\n\r\n    const sensorsControlsDiv = document.createElement(\"div\")!;\r\n\r\n    createButton({\r\n      parent: sensorsControlsDiv,\r\n      id: \"thematic_addSensor\",\r\n      value: \"Add Sensor\",\r\n      inline: true,\r\n      handler: () => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        if (props.sensorSettings!.sensors !== undefined) {\r\n          this._pushNewSensor(props.sensorSettings!.sensors);\r\n          this._resetSensorEntries(props.sensorSettings!.sensors.length);\r\n          this._thematicSensor.select.selectedIndex = props.sensorSettings!.sensors.length - 1;\r\n        }\r\n        return props;\r\n      }),\r\n    });\r\n\r\n    createButton({\r\n      parent: sensorsControlsDiv,\r\n      id: \"thematic_deleteSensor\",\r\n      value: \"Delete Sensor\",\r\n      inline: true,\r\n      handler: () => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        if (props.sensorSettings!.sensors !== undefined && props.sensorSettings!.sensors.length > 1) {\r\n          const selectedSensorIndex = this._thematicSensor.select.options.selectedIndex;\r\n          props.sensorSettings!.sensors.splice(selectedSensorIndex, 1);\r\n          if (props.sensorSettings!.sensors === undefined)\r\n            props.sensorSettings!.sensors = [];\r\n          this._thematicSensor.select.options.remove(selectedSensorIndex);\r\n        }\r\n        return props;\r\n      }),\r\n    });\r\n\r\n    createButton({\r\n      parent: sensorsControlsDiv,\r\n      id: \"thematic_createSensorGrid\",\r\n      value: \"Create Sensor Grid\",\r\n      inline: true,\r\n      handler: () => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        if (props.sensorSettings!.sensors !== undefined) {\r\n          props.sensorSettings!.sensors = [];\r\n          this._createSensorGrid(props.sensorSettings!.sensors);\r\n          this._resetSensorEntries(props.sensorSettings!.sensors.length);\r\n          this._thematicSensor.select.selectedIndex = props.sensorSettings!.sensors.length - 1;\r\n        }\r\n        return props;\r\n      }),\r\n    });\r\n\r\n    sensorsControlsDiv.style.textAlign = \"center\";\r\n    thematicControlsDiv.appendChild(sensorsControlsDiv);\r\n\r\n    const resetButton = createButton({\r\n      parent: thematicControlsDiv,\r\n      id: \"thematic_reset\",\r\n      value: \"Reset\",\r\n      handler: () => this.resetThematicDisplay(),\r\n    });\r\n    resetButton.div.style.textAlign = \"center\";\r\n\r\n    this._update = (view) => {\r\n      const visible = isThematicDisplaySupported(view);\r\n      div.style.display = visible ? \"block\" : \"none\";\r\n      if (!visible)\r\n        return;\r\n\r\n      checkbox.checked = isThematicDisplayEnabled(view);\r\n      checkboxLabel.style.fontWeight = checkbox.checked ? \"bold\" : \"500\";\r\n      showHideControls(checkbox.checked);\r\n\r\n      this.updateThematicDisplayUI(view);\r\n    };\r\n\r\n    div.appendChild(thematicControlsDiv);\r\n\r\n    const hr = document.createElement(\"hr\");\r\n    hr.style.borderColor = \"grey\";\r\n    div.appendChild(hr);\r\n\r\n    parent.appendChild(div);\r\n  }\r\n\r\n  public update(view: ViewState): void {\r\n    this._update(view);\r\n  }\r\n\r\n  private getThematicSettings(view: ViewState): ThematicDisplay {\r\n    assert(view.is3d());\r\n    return view.displayStyle.settings.thematic;\r\n  }\r\n\r\n  private getThematicSettingsProps(view: ViewState): ThematicDisplayProps {\r\n    return this.getThematicSettings(view).toJSON();\r\n  }\r\n\r\n  private updateThematicDisplayUI(view: ViewState) {\r\n    const settings = this.getThematicSettings(view);\r\n\r\n    let range = settings.range;\r\n    if (range.isNull) {\r\n      this.updateDefaultRange();\r\n      range = Range1d.fromJSON(defaultSettings.range);\r\n    }\r\n    this._thematicRangeLow.input.value = range.low.toString();\r\n    this._thematicRangeHigh.input.value = range.high.toString();\r\n\r\n    this._thematicDisplayMode.select.value = settings.displayMode.toString();\r\n\r\n    const displayMode = Number.parseInt(this._thematicDisplayMode.select.value, 10);\r\n    if (ThematicDisplayMode.Height === displayMode) {\r\n      ThematicDisplayEditor._setComboBoxEntries(this._thematicGradientMode, ThematicDisplayEditor._gradientModeEntriesForHeight);\r\n    } else {\r\n      ThematicDisplayEditor._setComboBoxEntries(this._thematicGradientMode, ThematicDisplayEditor._gradientModeEntriesForOthers);\r\n    }\r\n\r\n    this._thematicGradientMode.select.value = settings.gradientSettings.mode.toString();\r\n    this._thematicStepCount.input.value = settings.gradientSettings.stepCount.toString();\r\n    this._thematicColorScheme.select.value = settings.gradientSettings.colorScheme.toString();\r\n    this._thematicColorMix.slider.value = this._thematicColorMix.readout.innerText = settings.gradientSettings.colorMix.toString();\r\n\r\n    this._thematicAxisX.input.value = settings.axis.x.toString();\r\n    this._thematicAxisY.input.value = settings.axis.y.toString();\r\n    this._thematicAxisZ.input.value = settings.axis.z.toString();\r\n\r\n    this._thematicSunDirX.input.value = settings.sunDirection.x.toString();\r\n    this._thematicSunDirY.input.value = settings.sunDirection.y.toString();\r\n    this._thematicSunDirZ.input.value = settings.sunDirection.z.toString();\r\n\r\n    this._thematicDistanceCutoff.input.value = settings.sensorSettings.distanceCutoff.toString();\r\n    const sensors = settings.sensorSettings.sensors;\r\n    if (sensors.length > 0) {\r\n      if (this._thematicSensor.select.length < 1)\r\n        this._resetSensorEntries(sensors.length);\r\n\r\n      const selectedSensor = this._thematicSensor.select.options.selectedIndex;\r\n      const pos = Point3d.fromJSON(sensors[selectedSensor].position);\r\n      this._thematicSensorX.input.value = pos.x.toString();\r\n      this._thematicSensorY.input.value = pos.y.toString();\r\n      this._thematicSensorZ.input.value = pos.z.toString();\r\n      this._thematicSensorValue.input.value = sensors[selectedSensor].value.toString();\r\n    }\r\n  }\r\n\r\n  private updateThematicDisplay(updateFunction: (view: ViewState) => ThematicDisplayProps) {\r\n    const props = updateFunction(this._vp.view);\r\n    (this._vp.view as ViewState3d).getDisplayStyle3d().settings.thematic = ThematicDisplay.fromJSON(props);\r\n    this.sync();\r\n  }\r\n\r\n  private resetThematicDisplay(): void {\r\n    const thematicDisplay = ThematicDisplay.fromJSON(defaultSettings);\r\n    (this._vp.view as ViewState3d).getDisplayStyle3d().settings.thematic = thematicDisplay;\r\n    this._resetSensorEntries(thematicDisplay.sensorSettings.sensors.length);\r\n    this.sync();\r\n    this.updateThematicDisplayUI(this._vp.view);\r\n  }\r\n\r\n  private sync(): void {\r\n    this._vp.synchWithView();\r\n  }\r\n}\r\n",
      "start": 1693508126108,
      "end": 1693508126251,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { assert } from \"@itwin/core-bentley\";\nimport { createButton, createCheckBox, createComboBox, createLabeledNumericInput, createSlider } from \"@itwin/frontend-devtools\";\nimport { Point3d, Range1d } from \"@itwin/core-geometry\";\nimport {\n  calculateSolarDirectionFromAngles,\n  ColorByName,\n  ColorDef,\n  ThematicDisplay,\n  ThematicDisplayMode,\n  ThematicGradientColorScheme,\n  ThematicGradientMode,\n  ViewFlags\n} from \"@itwin/core-common\";\nconst defaultSettings = {\n  displayMode: ThematicDisplayMode.Height,\n  gradientSettings: {\n    mode: ThematicGradientMode.Smooth,\n    marginColor: ColorByName.blanchedAlmond,\n    colorScheme: ThematicGradientColorScheme.BlueRed\n  },\n  axis: [0, 0, 1],\n  range: [0, 1],\n  sunDirection: calculateSolarDirectionFromAngles({ azimuth: 315, elevation: 45 }).toJSON(),\n  sensorSettings: {\n    sensors: [],\n    distanceCutoff: 0\n  }\n};\nconst _ThematicDisplayEditor = class _ThematicDisplayEditor {\n  constructor(vp, parent) {\n    this._scratchViewFlags = new ViewFlags();\n    this._vp = vp;\n    const isThematicDisplaySupported = (view) => view.is3d();\n    const isThematicDisplayEnabled = (view) => view.viewFlags.thematicDisplay;\n    const div = document.createElement(\"div\");\n    const thematicControlsDiv = document.createElement(\"div\");\n    const showHideControls = (show) => {\n      const display = show ? \"block\" : \"none\";\n      thematicControlsDiv.style.display = display;\n    };\n    const enableThematicDisplay = (enabled) => {\n      const extents = this._vp.view.iModel.projectExtents;\n      defaultSettings.range = { low: extents.zLow, high: extents.zHigh };\n      const sensors = defaultSettings.sensorSettings.sensors;\n      defaultSettings.sensorSettings.distanceCutoff = extents.xLength() / 25;\n      const sensorZ = extents.low.z + (extents.high.z - extents.low.z) / 2;\n      const sensorLow = extents.low.cloneAsPoint3d();\n      const sensorHigh = extents.high.cloneAsPoint3d();\n      sensorLow.z = sensorHigh.z = sensorZ;\n      const sensorPosA = sensorLow.interpolate(0.25, sensorHigh);\n      const sensorPosB = sensorLow.interpolate(0.5, sensorHigh);\n      const sensorPosC = sensorLow.interpolate(0.65, sensorHigh);\n      const sensorPosD = sensorLow.interpolate(0.75, sensorHigh);\n      sensors[0] = { position: sensorPosA, value: 0.025 };\n      sensors[1] = { position: sensorPosB, value: 0.5 };\n      sensors[2] = { position: sensorPosC, value: 0.025 };\n      sensors[3] = { position: sensorPosD, value: 0.75 };\n      this._resetSensorEntries(4);\n      const displaySettings = this._vp.view.getDisplayStyle3d().settings;\n      displaySettings.thematic = ThematicDisplay.fromJSON(defaultSettings);\n      this._vp.viewFlags = this._vp.viewFlags.with(\"thematicDisplay\", enabled);\n      showHideControls(enabled);\n      this.sync();\n    };\n    const checkboxInterface = createCheckBox({\n      parent: div,\n      handler: (cb) => enableThematicDisplay(cb.checked),\n      name: \"Thematic Display\",\n      id: \"cbx_Thematic\"\n    });\n    const checkbox = checkboxInterface.checkbox;\n    const checkboxLabel = checkboxInterface.label;\n    const displayModeEntries = [\n      { name: \"Height\", value: ThematicDisplayMode.Height },\n      { name: \"InverseDistanceWeightedSensors\", value: ThematicDisplayMode.InverseDistanceWeightedSensors },\n      { name: \"Slope\", value: ThematicDisplayMode.Slope },\n      { name: \"HillShade\", value: ThematicDisplayMode.HillShade }\n    ];\n    this._thematicDisplayMode = createComboBox({\n      parent: thematicControlsDiv,\n      name: \"Display Mode: \",\n      entries: displayModeEntries,\n      id: \"thematic_displayMode\",\n      value: 0,\n      handler: (thing) => this.updateThematicDisplay((view) => {\n        const props = this.getThematicSettingsProps(view);\n        const prevDisplayMode = props.displayMode;\n        const newDisplayMode = props.displayMode = Number.parseInt(thing.value, 10);\n        if (ThematicDisplayMode.Slope === newDisplayMode) {\n          props.range = { low: 0, high: 90 };\n        } else if (ThematicDisplayMode.Slope === prevDisplayMode) {\n          this.updateDefaultRange();\n          const range1d = Range1d.fromJSON(defaultSettings.range);\n          props.range = { low: range1d.low, high: range1d.high };\n        }\n        return props;\n      })\n    });\n    this._thematicGradientMode = createComboBox({\n      parent: thematicControlsDiv,\n      name: \"Gradient Mode: \",\n      entries: _ThematicDisplayEditor._gradientModeEntriesForHeight,\n      id: \"thematic_gradientMode\",\n      value: 0,\n      handler: (thing) => this.updateThematicDisplay((view) => {\n        const props = this.getThematicSettingsProps(view);\n        props.gradientSettings.mode = Number.parseInt(thing.value, 10);\n        return props;\n      })\n    });\n    const spanStepAndColor = document.createElement(\"span\");\n    spanStepAndColor.style.display = \"flex\";\n    thematicControlsDiv.appendChild(spanStepAndColor);\n    this._thematicStepCount = createLabeledNumericInput({\n      id: \"thematic_stepCount\",\n      parent: spanStepAndColor,\n      value: 1,\n      handler: (value, _) => this.updateThematicDisplay((view) => {\n        const props = this.getThematicSettingsProps(view);\n        props.gradientSettings.stepCount = value;\n        return props;\n      }),\n      min: 2,\n      max: 65536,\n      step: 1,\n      name: \"Step Count: \"\n    });\n    this._thematicStepCount.div.style.marginRight = \"1.5em\";\n    const colorSchemeEntries = [\n      { name: \"BlueRed\", value: ThematicGradientColorScheme.BlueRed },\n      { name: \"RedBlue\", value: ThematicGradientColorScheme.RedBlue },\n      { name: \"Monochrome\", value: ThematicGradientColorScheme.Monochrome },\n      { name: \"Topographic\", value: ThematicGradientColorScheme.Topographic },\n      { name: \"SeaMountain\", value: ThematicGradientColorScheme.SeaMountain },\n      { name: \"Custom\", value: ThematicGradientColorScheme.Custom }\n    ];\n    this._thematicColorScheme = createComboBox({\n      parent: spanStepAndColor,\n      name: \"Color Scheme: \",\n      entries: colorSchemeEntries,\n      id: \"thematic_colorScheme\",\n      value: 0,\n      handler: (thing) => this.updateThematicDisplay((view) => {\n        const props = this.getThematicSettingsProps(view);\n        props.gradientSettings.colorScheme = Number.parseInt(thing.value, 10);\n        if (props.gradientSettings.colorScheme === ThematicGradientColorScheme.Custom) {\n          const customKeyValues = [[0, 255, 255, 0], [0.5, 255, 0, 255], [1, 0, 255, 255]];\n          props.gradientSettings.customKeys = [];\n          customKeyValues.forEach((key) => props.gradientSettings.customKeys.push({ value: key[0], color: ColorDef.computeTbgrFromComponents(key[1], key[2], key[3]) }));\n        }\n        return props;\n      })\n    });\n    const spanRange = document.createElement(\"span\");\n    spanRange.style.display = \"flex\";\n    thematicControlsDiv.appendChild(spanRange);\n    this._thematicRangeHigh = createLabeledNumericInput({\n      id: \"thematic_rangeHigh\",\n      parent: spanRange,\n      value: -1,\n      handler: (value, _) => this.updateThematicDisplay((view) => {\n        const props = this.getThematicSettingsProps(view);\n        const oldRange = Range1d.fromJSON(props.range);\n        props.range = { low: oldRange.low, high: value };\n        return props;\n      }),\n      min: -1e5,\n      max: 1e5,\n      step: 1,\n      parseAsFloat: true,\n      name: \"High range: \"\n    });\n    this._thematicRangeHigh.div.style.marginRight = \"0.5em\";\n    this._thematicRangeLow = createLabeledNumericInput({\n      id: \"thematic_rangeLow\",\n      parent: spanRange,\n      value: 1,\n      handler: (value, _) => this.updateThematicDisplay((view) => {\n        const props = this.getThematicSettingsProps(view);\n        const oldRange = Range1d.fromJSON(props.range);\n        props.range = { low: value, high: oldRange.high };\n        return props;\n      }),\n      min: -1e5,\n      max: 1e5,\n      step: 1,\n      parseAsFloat: true,\n      name: \"Low range: \"\n    });\n    const defaultAxis = Point3d.fromJSON(defaultSettings.axis);\n    const spanAxis = document.createElement(\"span\");\n    spanAxis.style.display = \"flex\";\n    thematicControlsDiv.appendChild(spanAxis);\n    this._thematicAxisX = createLabeledNumericInput({\n      id: \"thematic_axisX\",\n      parent: spanAxis,\n      value: defaultAxis.x,\n      handler: (value, _) => this.updateThematicDisplay((view) => {\n        const props = this.getThematicSettingsProps(view);\n        const axis = Point3d.fromJSON(props.axis);\n        axis.x = value;\n        props.axis = axis.toJSON();\n        return props;\n      }),\n      min: -1,\n      max: 1,\n      step: 0.1,\n      parseAsFloat: true,\n      name: \"Axis X: \"\n    });\n    this._thematicAxisX.div.style.marginRight = \"0.5em\";\n    this._thematicAxisY = createLabeledNumericInput({\n      id: \"thematic_axisY\",\n      parent: spanAxis,\n      value: defaultAxis.y,\n      handler: (value, _) => this.updateThematicDisplay((view) => {\n        const props = this.getThematicSettingsProps(view);\n        const axis = Point3d.fromJSON(props.axis);\n        axis.y = value;\n        props.axis = axis.toJSON();\n        return props;\n      }),\n      min: -1,\n      max: 1,\n      step: 0.1,\n      parseAsFloat: true,\n      name: \"Y: \"\n    });\n    this._thematicAxisY.div.style.marginRight = \"0.5em\";\n    this._thematicAxisZ = createLabeledNumericInput({\n      id: \"thematic_axisZ\",\n      parent: spanAxis,\n      value: defaultAxis.z,\n      handler: (value, _) => this.updateThematicDisplay((view) => {\n        const props = this.getThematicSettingsProps(view);\n        const axis = Point3d.fromJSON(props.axis);\n        axis.z = value;\n        props.axis = axis.toJSON();\n        return props;\n      }),\n      min: -1,\n      max: 1,\n      step: 0.1,\n      parseAsFloat: true,\n      name: \"Z: \"\n    });\n    this._thematicColorMix = createSlider({\n      id: \"thematic_colorMix\",\n      name: \"Terrain/PointCloud Mix\",\n      parent: thematicControlsDiv,\n      min: \"0.0\",\n      max: \"1.0\",\n      step: \"0.05\",\n      value: \"0.0\",\n      readout: \"right\",\n      handler: (_) => this.updateThematicDisplay((view) => {\n        const props = this.getThematicSettingsProps(view);\n        props.gradientSettings.colorMix = parseFloat(this._thematicColorMix.slider.value);\n        return props;\n      })\n    });\n    this._thematicColorMix.div.style.textAlign = \"left\";\n    const spanSunDir = document.createElement(\"span\");\n    spanSunDir.style.display = \"flex\";\n    thematicControlsDiv.appendChild(spanSunDir);\n    this._thematicSunDirX = createLabeledNumericInput({\n      id: \"thematic_sunDirX\",\n      parent: spanSunDir,\n      value: 0,\n      handler: (value, _) => this.updateThematicDisplay((view) => {\n        const props = this.getThematicSettingsProps(view);\n        const sunDir = Point3d.fromJSON(props.sunDirection);\n        sunDir.x = value;\n        props.sunDirection = sunDir.toJSON();\n        return props;\n      }),\n      min: -1,\n      max: 1,\n      step: 0.1,\n      parseAsFloat: true,\n      name: \"Sun Direction X: \"\n    });\n    this._thematicSunDirX.div.style.marginRight = \"0.5em\";\n    this._thematicSunDirY = createLabeledNumericInput({\n      id: \"thematic_sunDirY\",\n      parent: spanSunDir,\n      value: 0,\n      handler: (value, _) => this.updateThematicDisplay((view) => {\n        const props = this.getThematicSettingsProps(view);\n        const sunDir = Point3d.fromJSON(props.sunDirection);\n        sunDir.y = value;\n        props.sunDirection = sunDir.toJSON();\n        return props;\n      }),\n      min: -1,\n      max: 1,\n      step: 0.1,\n      parseAsFloat: true,\n      name: \"Y: \"\n    });\n    this._thematicSunDirY.div.style.marginRight = \"0.5em\";\n    this._thematicSunDirZ = createLabeledNumericInput({\n      id: \"thematic_sunDirZ\",\n      parent: spanSunDir,\n      value: 0,\n      handler: (value, _) => this.updateThematicDisplay((view) => {\n        const props = this.getThematicSettingsProps(view);\n        const sunDir = Point3d.fromJSON(props.sunDirection);\n        sunDir.z = value;\n        props.sunDirection = sunDir.toJSON();\n        return props;\n      }),\n      min: -1,\n      max: 1,\n      step: 0.1,\n      parseAsFloat: true,\n      name: \"Z: \"\n    });\n    this._thematicDistanceCutoff = createLabeledNumericInput({\n      id: \"thematic_distanceCutoff\",\n      parent: thematicControlsDiv,\n      value: 0,\n      handler: (value, _) => this.updateThematicDisplay((view) => {\n        const props = this.getThematicSettingsProps(view);\n        props.sensorSettings.distanceCutoff = value;\n        return props;\n      }),\n      min: -999999,\n      max: 999999,\n      step: 0.1,\n      parseAsFloat: true,\n      name: \"Distance Cutoff: \"\n    });\n    this._thematicSensor = createComboBox({\n      parent: thematicControlsDiv,\n      name: \"Selected Sensor: \",\n      entries: [],\n      id: \"thematic_sensor\",\n      value: 0,\n      handler: (_thing) => this.updateThematicDisplay((view) => {\n        return this.getThematicSettingsProps(view);\n      })\n    });\n    const spanSensor = document.createElement(\"span\");\n    spanSensor.style.display = \"flex\";\n    thematicControlsDiv.appendChild(spanSensor);\n    this._thematicSensorX = createLabeledNumericInput({\n      id: \"thematic_sensorX\",\n      parent: spanSensor,\n      value: 0,\n      handler: (value, _) => this.updateThematicDisplay((view) => {\n        const props = this.getThematicSettingsProps(view);\n        const selectedSensor = this._thematicSensor.select.options.selectedIndex;\n        const pos = Point3d.fromJSON(props.sensorSettings.sensors[selectedSensor].position);\n        pos.x = value;\n        props.sensorSettings.sensors[selectedSensor].position = pos.toJSON();\n        return props;\n      }),\n      min: -999999,\n      max: 999999,\n      step: 0.1,\n      parseAsFloat: true,\n      name: \"Sensor X: \"\n    });\n    this._thematicSensorX.div.style.marginRight = \"0.5em\";\n    this._thematicSensorY = createLabeledNumericInput({\n      id: \"thematic_sensorY\",\n      parent: spanSensor,\n      value: 0,\n      handler: (value, _) => this.updateThematicDisplay((view) => {\n        const props = this.getThematicSettingsProps(view);\n        const selectedSensor = this._thematicSensor.select.options.selectedIndex;\n        const pos = Point3d.fromJSON(props.sensorSettings.sensors[selectedSensor].position);\n        pos.y = value;\n        props.sensorSettings.sensors[selectedSensor].position = pos.toJSON();\n        return props;\n      }),\n      min: -999999,\n      max: 999999,\n      step: 0.1,\n      parseAsFloat: true,\n      name: \"Y: \"\n    });\n    this._thematicSensorY.div.style.marginRight = \"0.5em\";\n    this._thematicSensorZ = createLabeledNumericInput({\n      id: \"thematic_sensorZ\",\n      parent: spanSensor,\n      value: 0,\n      handler: (value, _) => this.updateThematicDisplay((view) => {\n        const props = this.getThematicSettingsProps(view);\n        const selectedSensor = this._thematicSensor.select.options.selectedIndex;\n        const pos = Point3d.fromJSON(props.sensorSettings.sensors[selectedSensor].position);\n        pos.z = value;\n        props.sensorSettings.sensors[selectedSensor].position = pos.toJSON();\n        return props;\n      }),\n      min: -999999,\n      max: 999999,\n      step: 0.1,\n      parseAsFloat: true,\n      name: \"Z: \"\n    });\n    this._thematicSensorValue = createLabeledNumericInput({\n      id: \"thematic_sensorValue\",\n      parent: thematicControlsDiv,\n      value: 0,\n      handler: (value, _) => this.updateThematicDisplay((view) => {\n        const props = this.getThematicSettingsProps(view);\n        const selectedSensor = this._thematicSensor.select.options.selectedIndex;\n        props.sensorSettings.sensors[selectedSensor].value = value;\n        return props;\n      }),\n      min: 0,\n      max: 1,\n      step: 0.025,\n      parseAsFloat: true,\n      name: \"Sensor Value: \"\n    });\n    const sensorsControlsDiv = document.createElement(\"div\");\n    createButton({\n      parent: sensorsControlsDiv,\n      id: \"thematic_addSensor\",\n      value: \"Add Sensor\",\n      inline: true,\n      handler: () => this.updateThematicDisplay((view) => {\n        const props = this.getThematicSettingsProps(view);\n        if (props.sensorSettings.sensors !== void 0) {\n          this._pushNewSensor(props.sensorSettings.sensors);\n          this._resetSensorEntries(props.sensorSettings.sensors.length);\n          this._thematicSensor.select.selectedIndex = props.sensorSettings.sensors.length - 1;\n        }\n        return props;\n      })\n    });\n    createButton({\n      parent: sensorsControlsDiv,\n      id: \"thematic_deleteSensor\",\n      value: \"Delete Sensor\",\n      inline: true,\n      handler: () => this.updateThematicDisplay((view) => {\n        const props = this.getThematicSettingsProps(view);\n        if (props.sensorSettings.sensors !== void 0 && props.sensorSettings.sensors.length > 1) {\n          const selectedSensorIndex = this._thematicSensor.select.options.selectedIndex;\n          props.sensorSettings.sensors.splice(selectedSensorIndex, 1);\n          if (props.sensorSettings.sensors === void 0)\n            props.sensorSettings.sensors = [];\n          this._thematicSensor.select.options.remove(selectedSensorIndex);\n        }\n        return props;\n      })\n    });\n    createButton({\n      parent: sensorsControlsDiv,\n      id: \"thematic_createSensorGrid\",\n      value: \"Create Sensor Grid\",\n      inline: true,\n      handler: () => this.updateThematicDisplay((view) => {\n        const props = this.getThematicSettingsProps(view);\n        if (props.sensorSettings.sensors !== void 0) {\n          props.sensorSettings.sensors = [];\n          this._createSensorGrid(props.sensorSettings.sensors);\n          this._resetSensorEntries(props.sensorSettings.sensors.length);\n          this._thematicSensor.select.selectedIndex = props.sensorSettings.sensors.length - 1;\n        }\n        return props;\n      })\n    });\n    sensorsControlsDiv.style.textAlign = \"center\";\n    thematicControlsDiv.appendChild(sensorsControlsDiv);\n    const resetButton = createButton({\n      parent: thematicControlsDiv,\n      id: \"thematic_reset\",\n      value: \"Reset\",\n      handler: () => this.resetThematicDisplay()\n    });\n    resetButton.div.style.textAlign = \"center\";\n    this._update = (view) => {\n      const visible = isThematicDisplaySupported(view);\n      div.style.display = visible ? \"block\" : \"none\";\n      if (!visible)\n        return;\n      checkbox.checked = isThematicDisplayEnabled(view);\n      checkboxLabel.style.fontWeight = checkbox.checked ? \"bold\" : \"500\";\n      showHideControls(checkbox.checked);\n      this.updateThematicDisplayUI(view);\n    };\n    div.appendChild(thematicControlsDiv);\n    const hr = document.createElement(\"hr\");\n    hr.style.borderColor = \"grey\";\n    div.appendChild(hr);\n    parent.appendChild(div);\n  }\n  // create a 32x32 grid of sensors spread evenly within the extents of the project\n  _createSensorGrid(sensors) {\n    const sensorGridXLength = 32;\n    const sensorGridYLength = 32;\n    const sensorValues = [0.1, 0.9, 0.25, 0.15, 0.8, 0.34, 0.78, 0.32, 0.15, 0.29, 0.878, 0.95, 0.5, 0.278, 0.44, 0.33, 0.71];\n    const extents = this._vp.view.iModel.projectExtents;\n    const xRange = Range1d.createXX(extents.xLow, extents.xHigh);\n    const yRange = Range1d.createXX(extents.yLow, extents.yHigh);\n    const sensorZ = extents.low.z + (extents.high.z - extents.low.z) / 2;\n    let sensorValueIndex = 0;\n    for (let y = 0; y < sensorGridYLength; y++) {\n      const sensorY = yRange.fractionToPoint(y / (sensorGridYLength - 1));\n      for (let x = 0; x < sensorGridXLength; x++) {\n        const sensorX = xRange.fractionToPoint(x / (sensorGridXLength - 1));\n        const sensorPos = Point3d.create(sensorX, sensorY, sensorZ);\n        this._pushNewSensor(sensors, { position: sensorPos, value: sensorValues[sensorValueIndex] });\n        sensorValueIndex++;\n        if (sensorValueIndex >= sensorValues.length)\n          sensorValueIndex = 0;\n      }\n    }\n  }\n  _pushNewSensor(sensors, sensorProps) {\n    if (void 0 !== sensorProps) {\n      sensors.push(sensorProps);\n      return;\n    }\n    const extents = this._vp.view.iModel.projectExtents;\n    defaultSettings.range = { low: extents.zLow, high: extents.zHigh };\n    const sensorZ = extents.low.z + (extents.high.z - extents.low.z) / 2;\n    const sensorLow = extents.low.cloneAsPoint3d();\n    const sensorHigh = extents.high.cloneAsPoint3d();\n    sensorLow.z = sensorHigh.z = sensorZ;\n    const sensorPos = sensorLow.interpolate(0.5, sensorHigh);\n    sensors.push({ position: sensorPos, value: 0.5 });\n  }\n  _resetSensorEntries(count) {\n    const select = this._thematicSensor.select;\n    while (select.length > 0)\n      select.remove(0);\n    for (let i = 0; i < count; i++)\n      this._appendSensorEntry(`Sensor ${i.toString()}`);\n  }\n  _appendSensorEntry(name) {\n    const option = document.createElement(\"option\");\n    option.innerText = name;\n    this._thematicSensor.select.appendChild(option);\n  }\n  static _appendComboBoxEntry(select, entry) {\n    const option = document.createElement(\"option\");\n    option.innerText = entry.name;\n    if (void 0 !== entry.value)\n      option.value = entry.value.toString();\n    select.appendChild(option);\n  }\n  static _setComboBoxEntries(cb, entries) {\n    let i;\n    const ln = cb.select.options.length - 1;\n    for (i = ln; i >= 0; i--) {\n      cb.select.remove(i);\n    }\n    for (const entry of entries) {\n      _ThematicDisplayEditor._appendComboBoxEntry(cb.select, entry);\n    }\n  }\n  updateDefaultRange() {\n    const extents = this._vp.view.iModel.projectExtents;\n    defaultSettings.range = { low: extents.zLow, high: extents.zHigh };\n  }\n  update(view) {\n    this._update(view);\n  }\n  getThematicSettings(view) {\n    assert(view.is3d());\n    return view.displayStyle.settings.thematic;\n  }\n  getThematicSettingsProps(view) {\n    return this.getThematicSettings(view).toJSON();\n  }\n  updateThematicDisplayUI(view) {\n    const settings = this.getThematicSettings(view);\n    let range = settings.range;\n    if (range.isNull) {\n      this.updateDefaultRange();\n      range = Range1d.fromJSON(defaultSettings.range);\n    }\n    this._thematicRangeLow.input.value = range.low.toString();\n    this._thematicRangeHigh.input.value = range.high.toString();\n    this._thematicDisplayMode.select.value = settings.displayMode.toString();\n    const displayMode = Number.parseInt(this._thematicDisplayMode.select.value, 10);\n    if (ThematicDisplayMode.Height === displayMode) {\n      _ThematicDisplayEditor._setComboBoxEntries(this._thematicGradientMode, _ThematicDisplayEditor._gradientModeEntriesForHeight);\n    } else {\n      _ThematicDisplayEditor._setComboBoxEntries(this._thematicGradientMode, _ThematicDisplayEditor._gradientModeEntriesForOthers);\n    }\n    this._thematicGradientMode.select.value = settings.gradientSettings.mode.toString();\n    this._thematicStepCount.input.value = settings.gradientSettings.stepCount.toString();\n    this._thematicColorScheme.select.value = settings.gradientSettings.colorScheme.toString();\n    this._thematicColorMix.slider.value = this._thematicColorMix.readout.innerText = settings.gradientSettings.colorMix.toString();\n    this._thematicAxisX.input.value = settings.axis.x.toString();\n    this._thematicAxisY.input.value = settings.axis.y.toString();\n    this._thematicAxisZ.input.value = settings.axis.z.toString();\n    this._thematicSunDirX.input.value = settings.sunDirection.x.toString();\n    this._thematicSunDirY.input.value = settings.sunDirection.y.toString();\n    this._thematicSunDirZ.input.value = settings.sunDirection.z.toString();\n    this._thematicDistanceCutoff.input.value = settings.sensorSettings.distanceCutoff.toString();\n    const sensors = settings.sensorSettings.sensors;\n    if (sensors.length > 0) {\n      if (this._thematicSensor.select.length < 1)\n        this._resetSensorEntries(sensors.length);\n      const selectedSensor = this._thematicSensor.select.options.selectedIndex;\n      const pos = Point3d.fromJSON(sensors[selectedSensor].position);\n      this._thematicSensorX.input.value = pos.x.toString();\n      this._thematicSensorY.input.value = pos.y.toString();\n      this._thematicSensorZ.input.value = pos.z.toString();\n      this._thematicSensorValue.input.value = sensors[selectedSensor].value.toString();\n    }\n  }\n  updateThematicDisplay(updateFunction) {\n    const props = updateFunction(this._vp.view);\n    this._vp.view.getDisplayStyle3d().settings.thematic = ThematicDisplay.fromJSON(props);\n    this.sync();\n  }\n  resetThematicDisplay() {\n    const thematicDisplay = ThematicDisplay.fromJSON(defaultSettings);\n    this._vp.view.getDisplayStyle3d().settings.thematic = thematicDisplay;\n    this._resetSensorEntries(thematicDisplay.sensorSettings.sensors.length);\n    this.sync();\n    this.updateThematicDisplayUI(this._vp.view);\n  }\n  sync() {\n    this._vp.synchWithView();\n  }\n};\n_ThematicDisplayEditor._gradientModeEntriesForHeight = [\n  { name: \"Smooth\", value: ThematicGradientMode.Smooth },\n  { name: \"Stepped\", value: ThematicGradientMode.Stepped },\n  { name: \"SteppedWithDelimiter\", value: ThematicGradientMode.SteppedWithDelimiter },\n  { name: \"IsoLines\", value: ThematicGradientMode.IsoLines }\n];\n_ThematicDisplayEditor._gradientModeEntriesForOthers = [\n  { name: \"Smooth\", value: ThematicGradientMode.Smooth },\n  { name: \"Stepped\", value: ThematicGradientMode.Stepped }\n];\nexport let ThematicDisplayEditor = _ThematicDisplayEditor;\n",
      "start": 1693508126251,
      "end": 1693508126316,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/ThematicDisplay.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { assert } from \"@itwin/core-bentley\";\r\nimport { ComboBox, ComboBoxEntry, createButton, createCheckBox, createComboBox, createLabeledNumericInput, createSlider, LabeledNumericInput, Slider } from \"@itwin/frontend-devtools\";\r\nimport { Point3d, Range1d } from \"@itwin/core-geometry\";\r\nimport {\r\n  calculateSolarDirectionFromAngles, ColorByName, ColorDef, ThematicDisplay, ThematicDisplayMode, ThematicDisplayProps,\r\n  ThematicDisplaySensorProps, ThematicGradientColorScheme, ThematicGradientMode, ViewFlags,\r\n} from \"@itwin/core-common\";\r\nimport { Viewport, ViewState, ViewState3d } from \"@itwin/core-frontend\";\r\n\r\ntype Required<T> = {\r\n  [P in keyof T]-?: T[P];\r\n};\r\n\r\nconst defaultSettings: Required<ThematicDisplayProps> = {\r\n  displayMode: ThematicDisplayMode.Height,\r\n  gradientSettings: {\r\n    mode: ThematicGradientMode.Smooth,\r\n    marginColor: ColorByName.blanchedAlmond,\r\n    colorScheme: ThematicGradientColorScheme.BlueRed,\r\n  },\r\n  axis: [0.0, 0.0, 1.0],\r\n  range: [0, 1],\r\n  sunDirection: calculateSolarDirectionFromAngles({ azimuth: 315.0, elevation: 45.0 }).toJSON(),\r\n  sensorSettings: {\r\n    sensors: [],\r\n    distanceCutoff: 0,\r\n  },\r\n};\r\n\r\nexport class ThematicDisplayEditor {\r\n  // create a 32x32 grid of sensors spread evenly within the extents of the project\r\n  private _createSensorGrid(sensors: ThematicDisplaySensorProps[]) {\r\n    const sensorGridXLength = 32;\r\n    const sensorGridYLength = 32;\r\n\r\n    const sensorValues: number[] = [0.1, 0.9, 0.25, 0.15, 0.8, 0.34, 0.78, 0.32, 0.15, 0.29, 0.878, 0.95, 0.5, 0.278, 0.44, 0.33, 0.71];\r\n\r\n    const extents = this._vp.view.iModel.projectExtents;\r\n    const xRange = Range1d.createXX(extents.xLow, extents.xHigh);\r\n    const yRange = Range1d.createXX(extents.yLow, extents.yHigh);\r\n    const sensorZ = extents.low.z + (extents.high.z - extents.low.z) / 2.0;\r\n\r\n    let sensorValueIndex = 0;\r\n\r\n    for (let y = 0; y < sensorGridYLength; y++) {\r\n      const sensorY = yRange.fractionToPoint(y / (sensorGridYLength - 1));\r\n\r\n      for (let x = 0; x < sensorGridXLength; x++) {\r\n        const sensorX = xRange.fractionToPoint(x / (sensorGridXLength - 1));\r\n\r\n        const sensorPos = Point3d.create(sensorX, sensorY, sensorZ);\r\n        this._pushNewSensor(sensors, { position: sensorPos, value: sensorValues[sensorValueIndex] });\r\n\r\n        sensorValueIndex++;\r\n        if (sensorValueIndex >= sensorValues.length)\r\n          sensorValueIndex = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  private _pushNewSensor(sensors: ThematicDisplaySensorProps[], sensorProps?: ThematicDisplaySensorProps) {\r\n    if (undefined !== sensorProps) {\r\n      sensors.push(sensorProps);\r\n      return;\r\n    }\r\n\r\n    const extents = this._vp.view.iModel.projectExtents;\r\n    defaultSettings.range = { low: extents.zLow, high: extents.zHigh };\r\n\r\n    const sensorZ = extents.low.z + (extents.high.z - extents.low.z) / 2.0;\r\n    const sensorLow = extents.low.cloneAsPoint3d();\r\n    const sensorHigh = extents.high.cloneAsPoint3d();\r\n    sensorLow.z = sensorHigh.z = sensorZ;\r\n\r\n    const sensorPos = sensorLow.interpolate(0.5, sensorHigh);\r\n\r\n    sensors.push({ position: sensorPos, value: 0.5 });\r\n  }\r\n\r\n  private _resetSensorEntries(count: number) {\r\n    const select = this._thematicSensor.select;\r\n    while (select.length > 0)\r\n      select.remove(0);\r\n\r\n    for (let i = 0; i < count; i++)\r\n      this._appendSensorEntry(`Sensor ${i.toString()}`);\r\n  }\r\n\r\n  private _appendSensorEntry(name: string) {\r\n    const option = document.createElement(\"option\");\r\n    option.innerText = name;\r\n    this._thematicSensor.select.appendChild(option);\r\n  }\r\n\r\n  private readonly _vp: Viewport;\r\n  private readonly _scratchViewFlags = new ViewFlags();\r\n  private readonly _update: (view: ViewState) => void;\r\n  private readonly _thematicDisplayMode: ComboBox;\r\n  private readonly _thematicGradientMode: ComboBox;\r\n  private readonly _thematicStepCount: LabeledNumericInput;\r\n  private readonly _thematicColorScheme: ComboBox;\r\n  private readonly _thematicRangeLow: LabeledNumericInput;\r\n  private readonly _thematicRangeHigh: LabeledNumericInput;\r\n  private readonly _thematicColorMix: Slider;\r\n  private readonly _thematicAxisX: LabeledNumericInput;\r\n  private readonly _thematicAxisY: LabeledNumericInput;\r\n  private readonly _thematicAxisZ: LabeledNumericInput;\r\n  private readonly _thematicSunDirX: LabeledNumericInput;\r\n  private readonly _thematicSunDirY: LabeledNumericInput;\r\n  private readonly _thematicSunDirZ: LabeledNumericInput;\r\n  private readonly _thematicDistanceCutoff: LabeledNumericInput;\r\n  private readonly _thematicSensor: ComboBox;\r\n  private readonly _thematicSensorX: LabeledNumericInput;\r\n  private readonly _thematicSensorY: LabeledNumericInput;\r\n  private readonly _thematicSensorZ: LabeledNumericInput;\r\n  private readonly _thematicSensorValue: LabeledNumericInput;\r\n\r\n  private static _gradientModeEntriesForHeight = [\r\n    { name: \"Smooth\", value: ThematicGradientMode.Smooth },\r\n    { name: \"Stepped\", value: ThematicGradientMode.Stepped },\r\n    { name: \"SteppedWithDelimiter\", value: ThematicGradientMode.SteppedWithDelimiter },\r\n    { name: \"IsoLines\", value: ThematicGradientMode.IsoLines },\r\n  ];\r\n  private static _gradientModeEntriesForOthers = [\r\n    { name: \"Smooth\", value: ThematicGradientMode.Smooth },\r\n    { name: \"Stepped\", value: ThematicGradientMode.Stepped },\r\n  ];\r\n\r\n  private static _appendComboBoxEntry(select: HTMLSelectElement, entry: ComboBoxEntry) {\r\n    const option = document.createElement(\"option\");\r\n    option.innerText = entry.name;\r\n    if (undefined !== entry.value)\r\n      option.value = entry.value.toString();\r\n    select.appendChild(option);\r\n  }\r\n\r\n  private static _setComboBoxEntries(cb: ComboBox, entries: ComboBoxEntry[]) {\r\n    // remove all existing entries\r\n    let i;\r\n    const ln = cb.select.options.length - 1;\r\n    for (i = ln; i >= 0; i--) {\r\n      cb.select.remove(i);\r\n    }\r\n\r\n    // add new entries\r\n    for (const entry of entries) {\r\n      ThematicDisplayEditor._appendComboBoxEntry(cb.select, entry);\r\n    }\r\n  }\r\n\r\n  public updateDefaultRange() {\r\n    const extents = this._vp.view.iModel.projectExtents;\r\n    defaultSettings.range = { low: extents.zLow, high: extents.zHigh };\r\n  }\r\n\r\n  public constructor(vp: Viewport, parent: HTMLElement) {\r\n    this._vp = vp;\r\n\r\n    const isThematicDisplaySupported = (view: ViewState) => view.is3d();\r\n    const isThematicDisplayEnabled = (view: ViewState) => view.viewFlags.thematicDisplay;\r\n\r\n    const div = document.createElement(\"div\");\r\n\r\n    const thematicControlsDiv = document.createElement(\"div\")!;\r\n\r\n    const showHideControls = (show: boolean) => {\r\n      const display = show ? \"block\" : \"none\";\r\n      thematicControlsDiv.style.display = display;\r\n    };\r\n\r\n    const enableThematicDisplay = (enabled: boolean) => {\r\n      const extents = this._vp.view.iModel.projectExtents;\r\n      defaultSettings.range = { low: extents.zLow, high: extents.zHigh };\r\n      const sensors = defaultSettings.sensorSettings.sensors!;\r\n      defaultSettings.sensorSettings.distanceCutoff = extents.xLength() / 25.0;\r\n\r\n      const sensorZ = extents.low.z + (extents.high.z - extents.low.z) / 2.0;\r\n      const sensorLow = extents.low.cloneAsPoint3d();\r\n      const sensorHigh = extents.high.cloneAsPoint3d();\r\n      sensorLow.z = sensorHigh.z = sensorZ;\r\n\r\n      const sensorPosA = sensorLow.interpolate(0.25, sensorHigh);\r\n      const sensorPosB = sensorLow.interpolate(0.5, sensorHigh);\r\n      const sensorPosC = sensorLow.interpolate(0.65, sensorHigh);\r\n      const sensorPosD = sensorLow.interpolate(0.75, sensorHigh);\r\n\r\n      sensors[0] = { position: sensorPosA, value: 0.025 };\r\n      sensors[1] = { position: sensorPosB, value: 0.5 };\r\n      sensors[2] = { position: sensorPosC, value: 0.025 };\r\n      sensors[3] = { position: sensorPosD, value: 0.75 };\r\n\r\n      this._resetSensorEntries(4);\r\n\r\n      const displaySettings = (this._vp.view as ViewState3d).getDisplayStyle3d().settings;\r\n      displaySettings.thematic = ThematicDisplay.fromJSON(defaultSettings);\r\n      this._vp.viewFlags = this._vp.viewFlags.with(\"thematicDisplay\", enabled);\r\n      showHideControls(enabled);\r\n      this.sync();\r\n    };\r\n\r\n    const checkboxInterface = createCheckBox({\r\n      parent: div,\r\n      handler: (cb) => enableThematicDisplay(cb.checked),\r\n      name: \"Thematic Display\",\r\n      id: \"cbx_Thematic\",\r\n    });\r\n    const checkbox = checkboxInterface.checkbox;\r\n    const checkboxLabel = checkboxInterface.label;\r\n\r\n    const displayModeEntries = [\r\n      { name: \"Height\", value: ThematicDisplayMode.Height },\r\n      { name: \"InverseDistanceWeightedSensors\", value: ThematicDisplayMode.InverseDistanceWeightedSensors },\r\n      { name: \"Slope\", value: ThematicDisplayMode.Slope },\r\n      { name: \"HillShade\", value: ThematicDisplayMode.HillShade },\r\n    ];\r\n\r\n    this._thematicDisplayMode = createComboBox({\r\n      parent: thematicControlsDiv,\r\n      name: \"Display Mode: \",\r\n      entries: displayModeEntries,\r\n      id: \"thematic_displayMode\",\r\n      value: 0,\r\n      handler: (thing) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        const prevDisplayMode = props.displayMode;\r\n        const newDisplayMode = props.displayMode = Number.parseInt(thing.value, 10);\r\n        if (ThematicDisplayMode.Slope === newDisplayMode) {\r\n          props.range = { low: 0.0, high: 90.0 };\r\n        } else if (ThematicDisplayMode.Slope === prevDisplayMode) {\r\n          this.updateDefaultRange();\r\n          const range1d = Range1d.fromJSON(defaultSettings.range);\r\n          props.range = { low: range1d.low, high: range1d.high };\r\n        }\r\n        return props;\r\n      }),\r\n    });\r\n\r\n    this._thematicGradientMode = createComboBox({\r\n      parent: thematicControlsDiv,\r\n      name: \"Gradient Mode: \",\r\n      entries: ThematicDisplayEditor._gradientModeEntriesForHeight,\r\n      id: \"thematic_gradientMode\",\r\n      value: 0,\r\n      handler: (thing) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        props.gradientSettings!.mode = Number.parseInt(thing.value, 10);\r\n        return props;\r\n      }),\r\n    });\r\n\r\n    const spanStepAndColor = document.createElement(\"span\");\r\n    spanStepAndColor.style.display = \"flex\";\r\n    thematicControlsDiv.appendChild(spanStepAndColor);\r\n    this._thematicStepCount = createLabeledNumericInput({\r\n      id: \"thematic_stepCount\",\r\n      parent: spanStepAndColor,\r\n      value: 1,\r\n      handler: (value, _) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        props.gradientSettings!.stepCount = value;\r\n        return props;\r\n      }),\r\n      min: 2,\r\n      max: 65536,\r\n      step: 1,\r\n      name: \"Step Count: \",\r\n    });\r\n    this._thematicStepCount.div.style.marginRight = \"1.5em\";\r\n\r\n    const colorSchemeEntries = [\r\n      { name: \"BlueRed\", value: ThematicGradientColorScheme.BlueRed },\r\n      { name: \"RedBlue\", value: ThematicGradientColorScheme.RedBlue },\r\n      { name: \"Monochrome\", value: ThematicGradientColorScheme.Monochrome },\r\n      { name: \"Topographic\", value: ThematicGradientColorScheme.Topographic },\r\n      { name: \"SeaMountain\", value: ThematicGradientColorScheme.SeaMountain },\r\n      { name: \"Custom\", value: ThematicGradientColorScheme.Custom },\r\n    ];\r\n\r\n    this._thematicColorScheme = createComboBox({\r\n      parent: spanStepAndColor,\r\n      name: \"Color Scheme: \",\r\n      entries: colorSchemeEntries,\r\n      id: \"thematic_colorScheme\",\r\n      value: 0,\r\n      handler: (thing) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        props.gradientSettings!.colorScheme = Number.parseInt(thing.value, 10);\r\n\r\n        // For now, we just hard code a custom color scheme in here. ###TODO - allow user to specify their own custom values.\r\n        if (props.gradientSettings!.colorScheme === ThematicGradientColorScheme.Custom) {\r\n          const customKeyValues = [[0.0, 255, 255, 0], [0.5, 255, 0, 255], [1.0, 0, 255, 255]];\r\n          props.gradientSettings!.customKeys = [];\r\n          customKeyValues.forEach((key) => props.gradientSettings!.customKeys!.push({ value: key[0], color: ColorDef.computeTbgrFromComponents(key[1], key[2], key[3]) }));\r\n        }\r\n        return props;\r\n      }),\r\n    });\r\n\r\n    const spanRange = document.createElement(\"span\");\r\n    spanRange.style.display = \"flex\";\r\n    thematicControlsDiv.appendChild(spanRange);\r\n    this._thematicRangeHigh = createLabeledNumericInput({\r\n      id: \"thematic_rangeHigh\",\r\n      parent: spanRange,\r\n      value: -1.0,\r\n      handler: (value, _) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        const oldRange = Range1d.fromJSON(props.range);\r\n        props.range = { low: oldRange.low, high: value };\r\n        return props;\r\n      }),\r\n      min: -100000.0,\r\n      max: 100000.0,\r\n      step: 1.0,\r\n      parseAsFloat: true,\r\n      name: \"High range: \",\r\n    });\r\n    this._thematicRangeHigh.div.style.marginRight = \"0.5em\";\r\n\r\n    this._thematicRangeLow = createLabeledNumericInput({\r\n      id: \"thematic_rangeLow\",\r\n      parent: spanRange,\r\n      value: 1.0,\r\n      handler: (value, _) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        const oldRange = Range1d.fromJSON(props.range);\r\n        props.range = { low: value, high: oldRange.high };\r\n        return props;\r\n      }),\r\n      min: -100000.0,\r\n      max: 100000.0,\r\n      step: 1.0,\r\n      parseAsFloat: true,\r\n      name: \"Low range: \",\r\n    });\r\n\r\n    const defaultAxis = Point3d.fromJSON(defaultSettings.axis);\r\n\r\n    const spanAxis = document.createElement(\"span\");\r\n    spanAxis.style.display = \"flex\";\r\n    thematicControlsDiv.appendChild(spanAxis);\r\n    this._thematicAxisX = createLabeledNumericInput({\r\n      id: \"thematic_axisX\",\r\n      parent: spanAxis,\r\n      value: defaultAxis.x,\r\n      handler: (value, _) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        const axis = Point3d.fromJSON(props.axis);\r\n        axis.x = value;\r\n        props.axis = axis.toJSON();\r\n        return props;\r\n      }),\r\n      min: -1.0,\r\n      max: 1.0,\r\n      step: 0.1,\r\n      parseAsFloat: true,\r\n      name: \"Axis X: \",\r\n    });\r\n    this._thematicAxisX.div.style.marginRight = \"0.5em\";\r\n\r\n    this._thematicAxisY = createLabeledNumericInput({\r\n      id: \"thematic_axisY\",\r\n      parent: spanAxis,\r\n      value: defaultAxis.y,\r\n      handler: (value, _) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        const axis = Point3d.fromJSON(props.axis);\r\n        axis.y = value;\r\n        props.axis = axis.toJSON();\r\n        return props;\r\n      }),\r\n      min: -1.0,\r\n      max: 1.0,\r\n      step: 0.1,\r\n      parseAsFloat: true,\r\n      name: \"Y: \",\r\n    });\r\n    this._thematicAxisY.div.style.marginRight = \"0.5em\";\r\n\r\n    this._thematicAxisZ = createLabeledNumericInput({\r\n      id: \"thematic_axisZ\",\r\n      parent: spanAxis,\r\n      value: defaultAxis.z,\r\n      handler: (value, _) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        const axis = Point3d.fromJSON(props.axis);\r\n        axis.z = value;\r\n        props.axis = axis.toJSON();\r\n        return props;\r\n      }),\r\n      min: -1.0,\r\n      max: 1.0,\r\n      step: 0.1,\r\n      parseAsFloat: true,\r\n      name: \"Z: \",\r\n    });\r\n\r\n    this._thematicColorMix = createSlider({\r\n      id: \"thematic_colorMix\",\r\n      name: \"Terrain/PointCloud Mix\",\r\n      parent: thematicControlsDiv,\r\n      min: \"0.0\",\r\n      max: \"1.0\",\r\n      step: \"0.05\",\r\n      value: \"0.0\",\r\n      readout: \"right\",\r\n      handler: (_) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        props.gradientSettings!.colorMix = parseFloat(this._thematicColorMix.slider.value);\r\n        return props;\r\n      }),\r\n    });\r\n    this._thematicColorMix.div.style.textAlign = \"left\";\r\n\r\n    const spanSunDir = document.createElement(\"span\");\r\n    spanSunDir.style.display = \"flex\";\r\n    thematicControlsDiv.appendChild(spanSunDir);\r\n    this._thematicSunDirX = createLabeledNumericInput({\r\n      id: \"thematic_sunDirX\",\r\n      parent: spanSunDir,\r\n      value: 0.0,\r\n      handler: (value, _) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        const sunDir = Point3d.fromJSON(props.sunDirection);\r\n        sunDir.x = value;\r\n        props.sunDirection = sunDir.toJSON();\r\n        return props;\r\n      }),\r\n      min: -1.0,\r\n      max: 1.0,\r\n      step: 0.1,\r\n      parseAsFloat: true,\r\n      name: \"Sun Direction X: \",\r\n    });\r\n    this._thematicSunDirX.div.style.marginRight = \"0.5em\";\r\n\r\n    this._thematicSunDirY = createLabeledNumericInput({\r\n      id: \"thematic_sunDirY\",\r\n      parent: spanSunDir,\r\n      value: 0.0,\r\n      handler: (value, _) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        const sunDir = Point3d.fromJSON(props.sunDirection);\r\n        sunDir.y = value;\r\n        props.sunDirection = sunDir.toJSON();\r\n        return props;\r\n      }),\r\n      min: -1.0,\r\n      max: 1.0,\r\n      step: 0.1,\r\n      parseAsFloat: true,\r\n      name: \"Y: \",\r\n    });\r\n    this._thematicSunDirY.div.style.marginRight = \"0.5em\";\r\n\r\n    this._thematicSunDirZ = createLabeledNumericInput({\r\n      id: \"thematic_sunDirZ\",\r\n      parent: spanSunDir,\r\n      value: 0.0,\r\n      handler: (value, _) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        const sunDir = Point3d.fromJSON(props.sunDirection);\r\n        sunDir.z = value;\r\n        props.sunDirection = sunDir.toJSON();\r\n        return props;\r\n      }),\r\n      min: -1.0,\r\n      max: 1.0,\r\n      step: 0.1,\r\n      parseAsFloat: true,\r\n      name: \"Z: \",\r\n    });\r\n\r\n    this._thematicDistanceCutoff = createLabeledNumericInput({\r\n      id: \"thematic_distanceCutoff\",\r\n      parent: thematicControlsDiv,\r\n      value: 0.0,\r\n      handler: (value, _) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        props.sensorSettings!.distanceCutoff = value;\r\n        return props;\r\n      }),\r\n      min: -999999.0,\r\n      max: 999999.0,\r\n      step: 0.1,\r\n      parseAsFloat: true,\r\n      name: \"Distance Cutoff: \",\r\n    });\r\n\r\n    this._thematicSensor = createComboBox({\r\n      parent: thematicControlsDiv,\r\n      name: \"Selected Sensor: \",\r\n      entries: [],\r\n      id: \"thematic_sensor\",\r\n      value: 0,\r\n      handler: (_thing) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        return this.getThematicSettingsProps(view);\r\n      }),\r\n    });\r\n\r\n    const spanSensor = document.createElement(\"span\");\r\n    spanSensor.style.display = \"flex\";\r\n    thematicControlsDiv.appendChild(spanSensor);\r\n    this._thematicSensorX = createLabeledNumericInput({\r\n      id: \"thematic_sensorX\",\r\n      parent: spanSensor,\r\n      value: 0.0,\r\n      handler: (value, _) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        const selectedSensor = this._thematicSensor.select.options.selectedIndex;\r\n        const pos = Point3d.fromJSON(props.sensorSettings!.sensors![selectedSensor].position);\r\n        pos.x = value;\r\n        props.sensorSettings!.sensors![selectedSensor].position = pos.toJSON();\r\n        return props;\r\n      }),\r\n      min: -999999.0,\r\n      max: 999999.0,\r\n      step: 0.1,\r\n      parseAsFloat: true,\r\n      name: \"Sensor X: \",\r\n    });\r\n    this._thematicSensorX.div.style.marginRight = \"0.5em\";\r\n\r\n    this._thematicSensorY = createLabeledNumericInput({\r\n      id: \"thematic_sensorY\",\r\n      parent: spanSensor,\r\n      value: 0.0,\r\n      handler: (value, _) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        const selectedSensor = this._thematicSensor.select.options.selectedIndex;\r\n        const pos = Point3d.fromJSON(props.sensorSettings!.sensors![selectedSensor].position);\r\n        pos.y = value;\r\n        props.sensorSettings!.sensors![selectedSensor].position = pos.toJSON();\r\n        return props;\r\n      }),\r\n      min: -999999.0,\r\n      max: 999999.0,\r\n      step: 0.1,\r\n      parseAsFloat: true,\r\n      name: \"Y: \",\r\n    });\r\n    this._thematicSensorY.div.style.marginRight = \"0.5em\";\r\n\r\n    this._thematicSensorZ = createLabeledNumericInput({\r\n      id: \"thematic_sensorZ\",\r\n      parent: spanSensor,\r\n      value: 0.0,\r\n      handler: (value, _) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        const selectedSensor = this._thematicSensor.select.options.selectedIndex;\r\n        const pos = Point3d.fromJSON(props.sensorSettings!.sensors![selectedSensor].position);\r\n        pos.z = value;\r\n        props.sensorSettings!.sensors![selectedSensor].position = pos.toJSON();\r\n        return props;\r\n      }),\r\n      min: -999999.0,\r\n      max: 999999.0,\r\n      step: 0.1,\r\n      parseAsFloat: true,\r\n      name: \"Z: \",\r\n    });\r\n\r\n    this._thematicSensorValue = createLabeledNumericInput({\r\n      id: \"thematic_sensorValue\",\r\n      parent: thematicControlsDiv,\r\n      value: 0.0,\r\n      handler: (value, _) => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        const selectedSensor = this._thematicSensor.select.options.selectedIndex;\r\n        props.sensorSettings!.sensors![selectedSensor].value = value;\r\n        return props;\r\n      }),\r\n      min: 0.0,\r\n      max: 1.0,\r\n      step: 0.025,\r\n      parseAsFloat: true,\r\n      name: \"Sensor Value: \",\r\n    });\r\n\r\n    const sensorsControlsDiv = document.createElement(\"div\")!;\r\n\r\n    createButton({\r\n      parent: sensorsControlsDiv,\r\n      id: \"thematic_addSensor\",\r\n      value: \"Add Sensor\",\r\n      inline: true,\r\n      handler: () => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        if (props.sensorSettings!.sensors !== undefined) {\r\n          this._pushNewSensor(props.sensorSettings!.sensors);\r\n          this._resetSensorEntries(props.sensorSettings!.sensors.length);\r\n          this._thematicSensor.select.selectedIndex = props.sensorSettings!.sensors.length - 1;\r\n        }\r\n        return props;\r\n      }),\r\n    });\r\n\r\n    createButton({\r\n      parent: sensorsControlsDiv,\r\n      id: \"thematic_deleteSensor\",\r\n      value: \"Delete Sensor\",\r\n      inline: true,\r\n      handler: () => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        if (props.sensorSettings!.sensors !== undefined && props.sensorSettings!.sensors.length > 1) {\r\n          const selectedSensorIndex = this._thematicSensor.select.options.selectedIndex;\r\n          props.sensorSettings!.sensors.splice(selectedSensorIndex, 1);\r\n          if (props.sensorSettings!.sensors === undefined)\r\n            props.sensorSettings!.sensors = [];\r\n          this._thematicSensor.select.options.remove(selectedSensorIndex);\r\n        }\r\n        return props;\r\n      }),\r\n    });\r\n\r\n    createButton({\r\n      parent: sensorsControlsDiv,\r\n      id: \"thematic_createSensorGrid\",\r\n      value: \"Create Sensor Grid\",\r\n      inline: true,\r\n      handler: () => this.updateThematicDisplay((view): ThematicDisplayProps => {\r\n        const props = this.getThematicSettingsProps(view);\r\n        if (props.sensorSettings!.sensors !== undefined) {\r\n          props.sensorSettings!.sensors = [];\r\n          this._createSensorGrid(props.sensorSettings!.sensors);\r\n          this._resetSensorEntries(props.sensorSettings!.sensors.length);\r\n          this._thematicSensor.select.selectedIndex = props.sensorSettings!.sensors.length - 1;\r\n        }\r\n        return props;\r\n      }),\r\n    });\r\n\r\n    sensorsControlsDiv.style.textAlign = \"center\";\r\n    thematicControlsDiv.appendChild(sensorsControlsDiv);\r\n\r\n    const resetButton = createButton({\r\n      parent: thematicControlsDiv,\r\n      id: \"thematic_reset\",\r\n      value: \"Reset\",\r\n      handler: () => this.resetThematicDisplay(),\r\n    });\r\n    resetButton.div.style.textAlign = \"center\";\r\n\r\n    this._update = (view) => {\r\n      const visible = isThematicDisplaySupported(view);\r\n      div.style.display = visible ? \"block\" : \"none\";\r\n      if (!visible)\r\n        return;\r\n\r\n      checkbox.checked = isThematicDisplayEnabled(view);\r\n      checkboxLabel.style.fontWeight = checkbox.checked ? \"bold\" : \"500\";\r\n      showHideControls(checkbox.checked);\r\n\r\n      this.updateThematicDisplayUI(view);\r\n    };\r\n\r\n    div.appendChild(thematicControlsDiv);\r\n\r\n    const hr = document.createElement(\"hr\");\r\n    hr.style.borderColor = \"grey\";\r\n    div.appendChild(hr);\r\n\r\n    parent.appendChild(div);\r\n  }\r\n\r\n  public update(view: ViewState): void {\r\n    this._update(view);\r\n  }\r\n\r\n  private getThematicSettings(view: ViewState): ThematicDisplay {\r\n    assert(view.is3d());\r\n    return view.displayStyle.settings.thematic;\r\n  }\r\n\r\n  private getThematicSettingsProps(view: ViewState): ThematicDisplayProps {\r\n    return this.getThematicSettings(view).toJSON();\r\n  }\r\n\r\n  private updateThematicDisplayUI(view: ViewState) {\r\n    const settings = this.getThematicSettings(view);\r\n\r\n    let range = settings.range;\r\n    if (range.isNull) {\r\n      this.updateDefaultRange();\r\n      range = Range1d.fromJSON(defaultSettings.range);\r\n    }\r\n    this._thematicRangeLow.input.value = range.low.toString();\r\n    this._thematicRangeHigh.input.value = range.high.toString();\r\n\r\n    this._thematicDisplayMode.select.value = settings.displayMode.toString();\r\n\r\n    const displayMode = Number.parseInt(this._thematicDisplayMode.select.value, 10);\r\n    if (ThematicDisplayMode.Height === displayMode) {\r\n      ThematicDisplayEditor._setComboBoxEntries(this._thematicGradientMode, ThematicDisplayEditor._gradientModeEntriesForHeight);\r\n    } else {\r\n      ThematicDisplayEditor._setComboBoxEntries(this._thematicGradientMode, ThematicDisplayEditor._gradientModeEntriesForOthers);\r\n    }\r\n\r\n    this._thematicGradientMode.select.value = settings.gradientSettings.mode.toString();\r\n    this._thematicStepCount.input.value = settings.gradientSettings.stepCount.toString();\r\n    this._thematicColorScheme.select.value = settings.gradientSettings.colorScheme.toString();\r\n    this._thematicColorMix.slider.value = this._thematicColorMix.readout.innerText = settings.gradientSettings.colorMix.toString();\r\n\r\n    this._thematicAxisX.input.value = settings.axis.x.toString();\r\n    this._thematicAxisY.input.value = settings.axis.y.toString();\r\n    this._thematicAxisZ.input.value = settings.axis.z.toString();\r\n\r\n    this._thematicSunDirX.input.value = settings.sunDirection.x.toString();\r\n    this._thematicSunDirY.input.value = settings.sunDirection.y.toString();\r\n    this._thematicSunDirZ.input.value = settings.sunDirection.z.toString();\r\n\r\n    this._thematicDistanceCutoff.input.value = settings.sensorSettings.distanceCutoff.toString();\r\n    const sensors = settings.sensorSettings.sensors;\r\n    if (sensors.length > 0) {\r\n      if (this._thematicSensor.select.length < 1)\r\n        this._resetSensorEntries(sensors.length);\r\n\r\n      const selectedSensor = this._thematicSensor.select.options.selectedIndex;\r\n      const pos = Point3d.fromJSON(sensors[selectedSensor].position);\r\n      this._thematicSensorX.input.value = pos.x.toString();\r\n      this._thematicSensorY.input.value = pos.y.toString();\r\n      this._thematicSensorZ.input.value = pos.z.toString();\r\n      this._thematicSensorValue.input.value = sensors[selectedSensor].value.toString();\r\n    }\r\n  }\r\n\r\n  private updateThematicDisplay(updateFunction: (view: ViewState) => ThematicDisplayProps) {\r\n    const props = updateFunction(this._vp.view);\r\n    (this._vp.view as ViewState3d).getDisplayStyle3d().settings.thematic = ThematicDisplay.fromJSON(props);\r\n    this.sync();\r\n  }\r\n\r\n  private resetThematicDisplay(): void {\r\n    const thematicDisplay = ThematicDisplay.fromJSON(defaultSettings);\r\n    (this._vp.view as ViewState3d).getDisplayStyle3d().settings.thematic = thematicDisplay;\r\n    this._resetSensorEntries(thematicDisplay.sensorSettings.sensors.length);\r\n    this.sync();\r\n    this.updateThematicDisplayUI(this._vp.view);\r\n  }\r\n\r\n  private sync(): void {\r\n    this._vp.synchWithView();\r\n  }\r\n}\r\n"
        ],
        "mappings": "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",
        "names": []
      }
    }
  ]
}
