{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/DisplayTestApp.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { Logger, LogLevel, ProcessDetector } from \"@itwin/core-bentley\";\r\nimport { RpcConfiguration } from \"@itwin/core-common\";\r\nimport {\r\n  GpuMemoryLimit,\r\n  IModelApp, IModelConnection, RenderDiagnostics, RenderSystem, TileAdmin,\r\n} from \"@itwin/core-frontend\";\r\nimport { initializeFrontendTiles } from \"@itwin/frontend-tiles\";\r\nimport { WebGLExtensionName } from \"@itwin/webgl-compatibility\";\r\nimport { DtaBooleanConfiguration, DtaConfiguration, DtaNumberConfiguration, DtaStringConfiguration, getConfig } from \"../common/DtaConfiguration\";\r\nimport { DtaRpcInterface } from \"../common/DtaRpcInterface\";\r\nimport { DisplayTestApp } from \"./App\";\r\nimport { MobileMessenger } from \"./FileOpen\";\r\nimport { openIModel, OpenIModelProps } from \"./openIModel\";\r\nimport { signIn } from \"./signIn\";\r\nimport { Surface } from \"./Surface\";\r\nimport { setTitle } from \"./Title\";\r\nimport { showStatus } from \"./Utils\";\r\nimport { Dock } from \"./Window\";\r\n\r\nconst configuration: DtaConfiguration = {};\r\n\r\n/**\r\n * Get the value for a string configuration param.\r\n * @param key The parameter name of the parameter to get.\r\n * @returns The value of the string configuration param.\r\n */\r\nexport function getConfigurationString(key: keyof DtaStringConfiguration) {\r\n  return (configuration as DtaStringConfiguration)[key];\r\n}\r\n\r\n/**\r\n * Get the value for a boolean configuration param.\r\n * @param key The parameter name of the parameter to get.\r\n * @returns The value of the boolean configuration param, or false if the param is undefined.\r\n */\r\nexport function getConfigurationBoolean(key: keyof DtaBooleanConfiguration): boolean {\r\n  return (configuration as DtaBooleanConfiguration)[key] ?? false;\r\n}\r\n\r\n/**\r\n * Get the value for a numeric configuration param.\r\n * @param key The parameter name of the parameter to get.\r\n * @returns The value of the numeric configuration param.\r\n */\r\nexport function getConfigurationNumber(key: keyof DtaNumberConfiguration) {\r\n  return (configuration as DtaNumberConfiguration)[key];\r\n}\r\n\r\nconst getFrontendConfig = async (useRPC = false) => {\r\n  if (ProcessDetector.isMobileAppFrontend) {\r\n    if (window) {\r\n      const urlParams = new URLSearchParams(window.location.hash);\r\n      urlParams.forEach((val, key) => {\r\n        (configuration as any)[key] = val;\r\n      });\r\n    }\r\n  } else {\r\n    const config: DtaConfiguration = useRPC ? await DtaRpcInterface.getClient().getEnvConfig() : getConfig();\r\n    Object.assign(configuration, config);\r\n  }\r\n\r\n  // Overriding the configuration generally requires setting environment variables, rebuilding the app, and restarting the app from scratch -\r\n  // and sometimes that doesn't even work.\r\n  // If you want to quickly adjust aspects of the configuration on the frontend, you can instead add your overrides below and just hot-reload the app in the browser/electron.\r\n  // Obviously, don't commit such changes.\r\n  const configurationOverrides: DtaConfiguration = {\r\n    /* For example:\r\n    iModelName: \"d:\\\\bim\\\\Constructions.bim\",\r\n    disableInstancing: true,\r\n    */\r\n  };\r\n  Object.assign(configuration, configurationOverrides);\r\n\r\n  console.log(\"Configuration\", configuration); // eslint-disable-line no-console\r\n};\r\n\r\nasync function openFile(props: OpenIModelProps): Promise<IModelConnection> {\r\n  configuration.standalone = true;\r\n  const iModelConnection = await openIModel(props);\r\n  configuration.iModelName = iModelConnection.name;\r\n  return iModelConnection;\r\n}\r\n\r\nfunction setConfigurationResults(): [renderSystemOptions: RenderSystem.Options, tileAdminProps: TileAdmin.Props] {\r\n  const renderSystemOptions: RenderSystem.Options = {\r\n    disabledExtensions: configuration.disabledExtensions as WebGLExtensionName[],\r\n    preserveShaderSourceCode: true === configuration.preserveShaderSourceCode,\r\n    logarithmicDepthBuffer: false !== configuration.logarithmicZBuffer,\r\n    dpiAwareViewports: false !== configuration.dpiAwareViewports,\r\n    devicePixelRatioOverride: configuration.devicePixelRatioOverride,\r\n    dpiAwareLOD: true === configuration.dpiAwareLOD,\r\n    useWebGL2: false !== configuration.useWebGL2,\r\n    planProjections: true,\r\n    errorOnMissingUniform: false !== configuration.errorOnMissingUniform,\r\n    debugShaders: true === configuration.debugShaders,\r\n    antialiasSamples: configuration.antialiasSamples,\r\n  };\r\n\r\n  const tileAdminProps: TileAdmin.Props = {\r\n    retryInterval: 50,\r\n    enableInstancing: true,\r\n    enableIndexedEdges: true !== configuration.disableIndexedEdges,\r\n  };\r\n\r\n  if (configuration.disableInstancing)\r\n    tileAdminProps.enableInstancing = false;\r\n\r\n  if (false === configuration.enableImprovedElision)\r\n    tileAdminProps.enableImprovedElision = false;\r\n\r\n  if (configuration.ignoreAreaPatterns)\r\n    tileAdminProps.ignoreAreaPatterns = true;\r\n\r\n  if (false === configuration.useProjectExtents)\r\n    tileAdminProps.useProjectExtents = false;\r\n\r\n  if (configuration.cacheTileMetadata)\r\n    tileAdminProps.cacheTileMetadata = true;\r\n\r\n  if (configuration.disableMagnification)\r\n    tileAdminProps.disableMagnification = true;\r\n\r\n  if (configuration.disableBRepCache)\r\n    tileAdminProps.optimizeBRepProcessing = false;\r\n\r\n  if (undefined !== configuration.gpuMemoryLimit)\r\n    tileAdminProps.gpuMemoryLimits = configuration.gpuMemoryLimit as GpuMemoryLimit;\r\n\r\n  if (true === configuration.noImdlWorker)\r\n    tileAdminProps.decodeImdlInWorker = false;\r\n\r\n  tileAdminProps.enableExternalTextures = (configuration.enableExternalTextures !== false);\r\n  tileAdminProps.enableFrontendScheduleScripts = (configuration.enableFrontendScheduleScripts !== false);\r\n  tileAdminProps.tileTreeExpirationTime = configuration.tileTreeExpirationSeconds;\r\n  tileAdminProps.tileExpirationTime = configuration.tileExpirationSeconds;\r\n  tileAdminProps.maximumLevelsToSkip = configuration.maxTilesToSkip;\r\n  tileAdminProps.alwaysRequestEdges = true === configuration.alwaysLoadEdges;\r\n  tileAdminProps.minimumSpatialTolerance = configuration.minimumSpatialTolerance;\r\n  tileAdminProps.alwaysSubdivideIncompleteTiles = true === configuration.alwaysSubdivideIncompleteTiles;\r\n  tileAdminProps.cesiumIonKey = configuration.cesiumIonKey;\r\n\r\n  return [renderSystemOptions, tileAdminProps];\r\n}\r\n\r\n// simple function to extract file name, without path or extension, on Windows or Linux\r\nfunction getFileName(path: string): string {\r\n  let strs = path.split(\"/\");\r\n  let str = strs[strs.length - 1];\r\n  strs = str.split(\"\\\\\");\r\n  str = strs[strs.length - 1];\r\n  const ndx = str.lastIndexOf(\".\");\r\n  if (ndx > 0) // allow files starting with .\r\n    str = str.substring(0, ndx);\r\n  return str;\r\n}\r\n\r\n// main entry point.\r\nconst dtaFrontendMain = async () => {\r\n  RpcConfiguration.developmentMode = true; // needed for snapshots in web apps\r\n  RpcConfiguration.disableRoutingValidation = true;\r\n\r\n  // retrieve, set, and output the global configuration variable\r\n  await getFrontendConfig();\r\n\r\n  // Start the app. (This tries to fetch a number of localization json files from the origin.)\r\n  let tileAdminProps: TileAdmin.Props;\r\n  let renderSystemOptions: RenderSystem.Options;\r\n  [renderSystemOptions, tileAdminProps] = setConfigurationResults();\r\n  await DisplayTestApp.startup(configuration, renderSystemOptions, tileAdminProps);\r\n  if (false !== configuration.enableDiagnostics)\r\n    IModelApp.renderSystem.enableDiagnostics(RenderDiagnostics.All);\r\n\r\n  if (!configuration.standalone && !configuration.customOrchestratorUri) {\r\n    alert(\"Standalone iModel required. Set IMJS_STANDALONE_FILENAME in environment\");\r\n    return;\r\n  }\r\n\r\n  // We can call RPC at this point (after startup), so if not mobile, call RPC and get true env from backend,\r\n  // then shutdown frontend, init vars again based on possibly changed configuration, then startup again\r\n  // (All that to workaround the fact that we can't call RPC before we start to get the true env first.)\r\n  if (!ProcessDetector.isMobileAppFrontend) {\r\n    Object.assign(configuration, await getFrontendConfig(true));\r\n    // console.log(\"New Front End Configuration from backend:\", JSON.stringify(configuration)); // eslint-disable-line no-console\r\n    await IModelApp.shutdown();\r\n    [renderSystemOptions, tileAdminProps] = setConfigurationResults();\r\n    await DisplayTestApp.startup(configuration, renderSystemOptions, tileAdminProps);\r\n    if (false !== configuration.enableDiagnostics)\r\n      IModelApp.renderSystem.enableDiagnostics(RenderDiagnostics.All);\r\n\r\n    if (!configuration.standalone && !configuration.customOrchestratorUri) {\r\n      alert(\"Standalone iModel required. Set IMJS_STANDALONE_FILENAME in environment\");\r\n      return;\r\n    }\r\n  }\r\n\r\n  // this needs to execute after all DisplayTestApp.startup executions so that env var will be current\r\n  if (configuration.frontendTilesUrlTemplate) {\r\n    initializeFrontendTiles({\r\n      computeSpatialTilesetBaseUrl: async (iModel) => {\r\n        let urlStr = configuration.frontendTilesUrlTemplate!.replace(\"{iModel.key}\", iModel.key);\r\n        urlStr = urlStr.replace(\"{iModel.filename}\", getFileName(iModel.key));\r\n        const url = new URL(urlStr);\r\n        try {\r\n          // See if a tileset has been published for this iModel.\r\n          const response = await fetch(`${url}tileset.json`);\r\n          await response.json();\r\n          return url;\r\n        } catch (_) {\r\n          // No tileset available.\r\n          return undefined;\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  const uiReady = displayUi(); // Get the browser started loading our html page and the svgs that it references but DON'T WAIT\r\n\r\n  try {\r\n    if (!configuration.standalone || configuration.signInForStandalone) {\r\n      while (!await signIn()) {\r\n        alert(\"please sign in\");\r\n      }\r\n    }\r\n\r\n    let iModel: IModelConnection | undefined;\r\n    const iModelName = configuration.iModelName;\r\n    if (undefined !== iModelName) {\r\n      const writable = configuration.openReadWrite ?? false;\r\n      iModel = await openFile({ fileName: iModelName, writable });\r\n      if (ProcessDetector.isMobileAppFrontend) {\r\n        // attempt to send message to mobile that the model was opened\r\n        MobileMessenger.postMessage(\"modelOpened\", iModelName);\r\n      }\r\n      setTitle(iModel);\r\n    } else {\r\n      const origStandalone = configuration.standalone;\r\n      try {\r\n        const iModelId = configuration.iModelId;\r\n        const iTwinId = configuration.iTwinId;\r\n        if (undefined !== iModelId && undefined !== iTwinId) {\r\n          const writable = configuration.openReadWrite ?? false;\r\n          iModel = await openFile({ iModelId, iTwinId, writable });\r\n          setTitle(iModel);\r\n        }\r\n      } catch (error) {\r\n        configuration.standalone = origStandalone;\r\n        alert(`Error getting hub iModel: ${error}`);\r\n      }\r\n    }\r\n\r\n    await uiReady; // Now wait for the HTML UI to finish loading.\r\n    await initView(iModel);\r\n    Logger.initializeToConsole();\r\n    Logger.setLevelDefault(LogLevel.Warning);\r\n    Logger.setLevel(\"core-frontend.Render\", LogLevel.Error);\r\n\r\n    if (configuration.startupMacro)\r\n      await IModelApp.tools.parseAndRun(`dta macro ${configuration.startupMacro}`);\r\n  } catch (reason) {\r\n    alert(reason);\r\n    return;\r\n  }\r\n};\r\n\r\nasync function documentLoaded(): Promise<void> {\r\n  const readyState = /^complete$/;\r\n  if (readyState.test(document.readyState))\r\n    return;\r\n\r\n  return new Promise<void>((resolve) => {\r\n    const listener = () => {\r\n      if (readyState.test(document.readyState)) {\r\n        document.removeEventListener(\"readystatechange\", listener);\r\n        resolve();\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"readystatechange\", listener);\r\n    listener();\r\n  });\r\n}\r\n\r\nasync function initView(iModel: IModelConnection | undefined) {\r\n  // open the specified view\r\n  showStatus(\"opening View\", configuration.viewName);\r\n\r\n  const fileSelector = undefined !== configuration.standalonePath ? {\r\n    directory: configuration.standalonePath,\r\n    input: document.getElementById(\"browserFileSelector\") as HTMLInputElement,\r\n  } : undefined;\r\n\r\n  DisplayTestApp.surface = new Surface(document.getElementById(\"app-surface\")!, document.getElementById(\"toolBar\")!, fileSelector, configuration.openReadWrite ?? false);\r\n\r\n  // We need layout to complete so that the div we want to stick our viewport into has non-zero dimensions.\r\n  // Consistently reproducible for some folks, not others...\r\n  await documentLoaded();\r\n\r\n  if (undefined !== iModel) {\r\n    const viewer = await DisplayTestApp.surface.createViewer({\r\n      iModel,\r\n      defaultViewName: configuration.viewName,\r\n      disableEdges: true === configuration.disableEdges,\r\n    });\r\n\r\n    viewer.dock(Dock.Full);\r\n  }\r\n\r\n  showStatus(\"View Ready\");\r\n  hideSpinner();\r\n}\r\n\r\n// Set up the HTML UI elements and wire them to our functions\r\nasync function displayUi() {\r\n  return new Promise<void>(async (resolve) => { // eslint-disable-line @typescript-eslint/no-misused-promises\r\n    showSpinner();\r\n    resolve();\r\n  });\r\n}\r\n\r\nfunction showSpinner() {\r\n  const spinner = document.getElementById(\"spinner\") as HTMLElement;\r\n  spinner.style.display = \"block\";\r\n}\r\n\r\nfunction hideSpinner() {\r\n  const spinner = document.getElementById(\"spinner\");\r\n  if (spinner)\r\n    spinner.style.display = \"none\";\r\n}\r\n\r\n// Entry point - run the main function\r\ndtaFrontendMain(); // eslint-disable-line @typescript-eslint/no-floating-promises\r\n",
      "start": 1693508118333,
      "end": 1693508118333,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { Logger, LogLevel, ProcessDetector } from \"@itwin/core-bentley\";\nimport { RpcConfiguration } from \"@itwin/core-common\";\nimport {\n  IModelApp,\n  RenderDiagnostics\n} from \"@itwin/core-frontend\";\nimport { initializeFrontendTiles } from \"@itwin/frontend-tiles\";\nimport { getConfig } from \"../common/DtaConfiguration\";\nimport { DtaRpcInterface } from \"../common/DtaRpcInterface\";\nimport { DisplayTestApp } from \"./App\";\nimport { MobileMessenger } from \"./FileOpen\";\nimport { openIModel } from \"./openIModel\";\nimport { signIn } from \"./signIn\";\nimport { Surface } from \"./Surface\";\nimport { setTitle } from \"./Title\";\nimport { showStatus } from \"./Utils\";\nimport { Dock } from \"./Window\";\nconst configuration = {};\nexport function getConfigurationString(key) {\n  return configuration[key];\n}\nexport function getConfigurationBoolean(key) {\n  return configuration[key] ?? false;\n}\nexport function getConfigurationNumber(key) {\n  return configuration[key];\n}\nconst getFrontendConfig = async (useRPC = false) => {\n  if (ProcessDetector.isMobileAppFrontend) {\n    if (window) {\n      const urlParams = new URLSearchParams(window.location.hash);\n      urlParams.forEach((val, key) => {\n        configuration[key] = val;\n      });\n    }\n  } else {\n    const config = useRPC ? await DtaRpcInterface.getClient().getEnvConfig() : getConfig();\n    Object.assign(configuration, config);\n  }\n  const configurationOverrides = {\n    /* For example:\n    iModelName: \"d:\\\\bim\\\\Constructions.bim\",\n    disableInstancing: true,\n    */\n  };\n  Object.assign(configuration, configurationOverrides);\n  console.log(\"Configuration\", configuration);\n};\nasync function openFile(props) {\n  configuration.standalone = true;\n  const iModelConnection = await openIModel(props);\n  configuration.iModelName = iModelConnection.name;\n  return iModelConnection;\n}\nfunction setConfigurationResults() {\n  const renderSystemOptions = {\n    disabledExtensions: configuration.disabledExtensions,\n    preserveShaderSourceCode: true === configuration.preserveShaderSourceCode,\n    logarithmicDepthBuffer: false !== configuration.logarithmicZBuffer,\n    dpiAwareViewports: false !== configuration.dpiAwareViewports,\n    devicePixelRatioOverride: configuration.devicePixelRatioOverride,\n    dpiAwareLOD: true === configuration.dpiAwareLOD,\n    useWebGL2: false !== configuration.useWebGL2,\n    planProjections: true,\n    errorOnMissingUniform: false !== configuration.errorOnMissingUniform,\n    debugShaders: true === configuration.debugShaders,\n    antialiasSamples: configuration.antialiasSamples\n  };\n  const tileAdminProps = {\n    retryInterval: 50,\n    enableInstancing: true,\n    enableIndexedEdges: true !== configuration.disableIndexedEdges\n  };\n  if (configuration.disableInstancing)\n    tileAdminProps.enableInstancing = false;\n  if (false === configuration.enableImprovedElision)\n    tileAdminProps.enableImprovedElision = false;\n  if (configuration.ignoreAreaPatterns)\n    tileAdminProps.ignoreAreaPatterns = true;\n  if (false === configuration.useProjectExtents)\n    tileAdminProps.useProjectExtents = false;\n  if (configuration.cacheTileMetadata)\n    tileAdminProps.cacheTileMetadata = true;\n  if (configuration.disableMagnification)\n    tileAdminProps.disableMagnification = true;\n  if (configuration.disableBRepCache)\n    tileAdminProps.optimizeBRepProcessing = false;\n  if (void 0 !== configuration.gpuMemoryLimit)\n    tileAdminProps.gpuMemoryLimits = configuration.gpuMemoryLimit;\n  if (true === configuration.noImdlWorker)\n    tileAdminProps.decodeImdlInWorker = false;\n  tileAdminProps.enableExternalTextures = configuration.enableExternalTextures !== false;\n  tileAdminProps.enableFrontendScheduleScripts = configuration.enableFrontendScheduleScripts !== false;\n  tileAdminProps.tileTreeExpirationTime = configuration.tileTreeExpirationSeconds;\n  tileAdminProps.tileExpirationTime = configuration.tileExpirationSeconds;\n  tileAdminProps.maximumLevelsToSkip = configuration.maxTilesToSkip;\n  tileAdminProps.alwaysRequestEdges = true === configuration.alwaysLoadEdges;\n  tileAdminProps.minimumSpatialTolerance = configuration.minimumSpatialTolerance;\n  tileAdminProps.alwaysSubdivideIncompleteTiles = true === configuration.alwaysSubdivideIncompleteTiles;\n  tileAdminProps.cesiumIonKey = configuration.cesiumIonKey;\n  return [renderSystemOptions, tileAdminProps];\n}\nfunction getFileName(path) {\n  let strs = path.split(\"/\");\n  let str = strs[strs.length - 1];\n  strs = str.split(\"\\\\\");\n  str = strs[strs.length - 1];\n  const ndx = str.lastIndexOf(\".\");\n  if (ndx > 0)\n    str = str.substring(0, ndx);\n  return str;\n}\nconst dtaFrontendMain = async () => {\n  RpcConfiguration.developmentMode = true;\n  RpcConfiguration.disableRoutingValidation = true;\n  await getFrontendConfig();\n  let tileAdminProps;\n  let renderSystemOptions;\n  [renderSystemOptions, tileAdminProps] = setConfigurationResults();\n  await DisplayTestApp.startup(configuration, renderSystemOptions, tileAdminProps);\n  if (false !== configuration.enableDiagnostics)\n    IModelApp.renderSystem.enableDiagnostics(RenderDiagnostics.All);\n  if (!configuration.standalone && !configuration.customOrchestratorUri) {\n    alert(\"Standalone iModel required. Set IMJS_STANDALONE_FILENAME in environment\");\n    return;\n  }\n  if (!ProcessDetector.isMobileAppFrontend) {\n    Object.assign(configuration, await getFrontendConfig(true));\n    await IModelApp.shutdown();\n    [renderSystemOptions, tileAdminProps] = setConfigurationResults();\n    await DisplayTestApp.startup(configuration, renderSystemOptions, tileAdminProps);\n    if (false !== configuration.enableDiagnostics)\n      IModelApp.renderSystem.enableDiagnostics(RenderDiagnostics.All);\n    if (!configuration.standalone && !configuration.customOrchestratorUri) {\n      alert(\"Standalone iModel required. Set IMJS_STANDALONE_FILENAME in environment\");\n      return;\n    }\n  }\n  if (configuration.frontendTilesUrlTemplate) {\n    initializeFrontendTiles({\n      computeSpatialTilesetBaseUrl: async (iModel) => {\n        let urlStr = configuration.frontendTilesUrlTemplate.replace(\"{iModel.key}\", iModel.key);\n        urlStr = urlStr.replace(\"{iModel.filename}\", getFileName(iModel.key));\n        const url = new URL(urlStr);\n        try {\n          const response = await fetch(`${url}tileset.json`);\n          await response.json();\n          return url;\n        } catch (_) {\n          return void 0;\n        }\n      }\n    });\n  }\n  const uiReady = displayUi();\n  try {\n    if (!configuration.standalone || configuration.signInForStandalone) {\n      while (!await signIn()) {\n        alert(\"please sign in\");\n      }\n    }\n    let iModel;\n    const iModelName = configuration.iModelName;\n    if (void 0 !== iModelName) {\n      const writable = configuration.openReadWrite ?? false;\n      iModel = await openFile({ fileName: iModelName, writable });\n      if (ProcessDetector.isMobileAppFrontend) {\n        MobileMessenger.postMessage(\"modelOpened\", iModelName);\n      }\n      setTitle(iModel);\n    } else {\n      const origStandalone = configuration.standalone;\n      try {\n        const iModelId = configuration.iModelId;\n        const iTwinId = configuration.iTwinId;\n        if (void 0 !== iModelId && void 0 !== iTwinId) {\n          const writable = configuration.openReadWrite ?? false;\n          iModel = await openFile({ iModelId, iTwinId, writable });\n          setTitle(iModel);\n        }\n      } catch (error) {\n        configuration.standalone = origStandalone;\n        alert(`Error getting hub iModel: ${error}`);\n      }\n    }\n    await uiReady;\n    await initView(iModel);\n    Logger.initializeToConsole();\n    Logger.setLevelDefault(LogLevel.Warning);\n    Logger.setLevel(\"core-frontend.Render\", LogLevel.Error);\n    if (configuration.startupMacro)\n      await IModelApp.tools.parseAndRun(`dta macro ${configuration.startupMacro}`);\n  } catch (reason) {\n    alert(reason);\n    return;\n  }\n};\nasync function documentLoaded() {\n  const readyState = /^complete$/;\n  if (readyState.test(document.readyState))\n    return;\n  return new Promise((resolve) => {\n    const listener = () => {\n      if (readyState.test(document.readyState)) {\n        document.removeEventListener(\"readystatechange\", listener);\n        resolve();\n      }\n    };\n    document.addEventListener(\"readystatechange\", listener);\n    listener();\n  });\n}\nasync function initView(iModel) {\n  showStatus(\"opening View\", configuration.viewName);\n  const fileSelector = void 0 !== configuration.standalonePath ? {\n    directory: configuration.standalonePath,\n    input: document.getElementById(\"browserFileSelector\")\n  } : void 0;\n  DisplayTestApp.surface = new Surface(document.getElementById(\"app-surface\"), document.getElementById(\"toolBar\"), fileSelector, configuration.openReadWrite ?? false);\n  await documentLoaded();\n  if (void 0 !== iModel) {\n    const viewer = await DisplayTestApp.surface.createViewer({\n      iModel,\n      defaultViewName: configuration.viewName,\n      disableEdges: true === configuration.disableEdges\n    });\n    viewer.dock(Dock.Full);\n  }\n  showStatus(\"View Ready\");\n  hideSpinner();\n}\nasync function displayUi() {\n  return new Promise(async (resolve) => {\n    showSpinner();\n    resolve();\n  });\n}\nfunction showSpinner() {\n  const spinner = document.getElementById(\"spinner\");\n  spinner.style.display = \"block\";\n}\nfunction hideSpinner() {\n  const spinner = document.getElementById(\"spinner\");\n  if (spinner)\n    spinner.style.display = \"none\";\n}\ndtaFrontendMain();\n",
      "start": 1693508118333,
      "end": 1693508118337,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/DisplayTestApp.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { Logger, LogLevel, ProcessDetector } from \"@itwin/core-bentley\";\r\nimport { RpcConfiguration } from \"@itwin/core-common\";\r\nimport {\r\n  GpuMemoryLimit,\r\n  IModelApp, IModelConnection, RenderDiagnostics, RenderSystem, TileAdmin,\r\n} from \"@itwin/core-frontend\";\r\nimport { initializeFrontendTiles } from \"@itwin/frontend-tiles\";\r\nimport { WebGLExtensionName } from \"@itwin/webgl-compatibility\";\r\nimport { DtaBooleanConfiguration, DtaConfiguration, DtaNumberConfiguration, DtaStringConfiguration, getConfig } from \"../common/DtaConfiguration\";\r\nimport { DtaRpcInterface } from \"../common/DtaRpcInterface\";\r\nimport { DisplayTestApp } from \"./App\";\r\nimport { MobileMessenger } from \"./FileOpen\";\r\nimport { openIModel, OpenIModelProps } from \"./openIModel\";\r\nimport { signIn } from \"./signIn\";\r\nimport { Surface } from \"./Surface\";\r\nimport { setTitle } from \"./Title\";\r\nimport { showStatus } from \"./Utils\";\r\nimport { Dock } from \"./Window\";\r\n\r\nconst configuration: DtaConfiguration = {};\r\n\r\n/**\r\n * Get the value for a string configuration param.\r\n * @param key The parameter name of the parameter to get.\r\n * @returns The value of the string configuration param.\r\n */\r\nexport function getConfigurationString(key: keyof DtaStringConfiguration) {\r\n  return (configuration as DtaStringConfiguration)[key];\r\n}\r\n\r\n/**\r\n * Get the value for a boolean configuration param.\r\n * @param key The parameter name of the parameter to get.\r\n * @returns The value of the boolean configuration param, or false if the param is undefined.\r\n */\r\nexport function getConfigurationBoolean(key: keyof DtaBooleanConfiguration): boolean {\r\n  return (configuration as DtaBooleanConfiguration)[key] ?? false;\r\n}\r\n\r\n/**\r\n * Get the value for a numeric configuration param.\r\n * @param key The parameter name of the parameter to get.\r\n * @returns The value of the numeric configuration param.\r\n */\r\nexport function getConfigurationNumber(key: keyof DtaNumberConfiguration) {\r\n  return (configuration as DtaNumberConfiguration)[key];\r\n}\r\n\r\nconst getFrontendConfig = async (useRPC = false) => {\r\n  if (ProcessDetector.isMobileAppFrontend) {\r\n    if (window) {\r\n      const urlParams = new URLSearchParams(window.location.hash);\r\n      urlParams.forEach((val, key) => {\r\n        (configuration as any)[key] = val;\r\n      });\r\n    }\r\n  } else {\r\n    const config: DtaConfiguration = useRPC ? await DtaRpcInterface.getClient().getEnvConfig() : getConfig();\r\n    Object.assign(configuration, config);\r\n  }\r\n\r\n  // Overriding the configuration generally requires setting environment variables, rebuilding the app, and restarting the app from scratch -\r\n  // and sometimes that doesn't even work.\r\n  // If you want to quickly adjust aspects of the configuration on the frontend, you can instead add your overrides below and just hot-reload the app in the browser/electron.\r\n  // Obviously, don't commit such changes.\r\n  const configurationOverrides: DtaConfiguration = {\r\n    /* For example:\r\n    iModelName: \"d:\\\\bim\\\\Constructions.bim\",\r\n    disableInstancing: true,\r\n    */\r\n  };\r\n  Object.assign(configuration, configurationOverrides);\r\n\r\n  console.log(\"Configuration\", configuration); // eslint-disable-line no-console\r\n};\r\n\r\nasync function openFile(props: OpenIModelProps): Promise<IModelConnection> {\r\n  configuration.standalone = true;\r\n  const iModelConnection = await openIModel(props);\r\n  configuration.iModelName = iModelConnection.name;\r\n  return iModelConnection;\r\n}\r\n\r\nfunction setConfigurationResults(): [renderSystemOptions: RenderSystem.Options, tileAdminProps: TileAdmin.Props] {\r\n  const renderSystemOptions: RenderSystem.Options = {\r\n    disabledExtensions: configuration.disabledExtensions as WebGLExtensionName[],\r\n    preserveShaderSourceCode: true === configuration.preserveShaderSourceCode,\r\n    logarithmicDepthBuffer: false !== configuration.logarithmicZBuffer,\r\n    dpiAwareViewports: false !== configuration.dpiAwareViewports,\r\n    devicePixelRatioOverride: configuration.devicePixelRatioOverride,\r\n    dpiAwareLOD: true === configuration.dpiAwareLOD,\r\n    useWebGL2: false !== configuration.useWebGL2,\r\n    planProjections: true,\r\n    errorOnMissingUniform: false !== configuration.errorOnMissingUniform,\r\n    debugShaders: true === configuration.debugShaders,\r\n    antialiasSamples: configuration.antialiasSamples,\r\n  };\r\n\r\n  const tileAdminProps: TileAdmin.Props = {\r\n    retryInterval: 50,\r\n    enableInstancing: true,\r\n    enableIndexedEdges: true !== configuration.disableIndexedEdges,\r\n  };\r\n\r\n  if (configuration.disableInstancing)\r\n    tileAdminProps.enableInstancing = false;\r\n\r\n  if (false === configuration.enableImprovedElision)\r\n    tileAdminProps.enableImprovedElision = false;\r\n\r\n  if (configuration.ignoreAreaPatterns)\r\n    tileAdminProps.ignoreAreaPatterns = true;\r\n\r\n  if (false === configuration.useProjectExtents)\r\n    tileAdminProps.useProjectExtents = false;\r\n\r\n  if (configuration.cacheTileMetadata)\r\n    tileAdminProps.cacheTileMetadata = true;\r\n\r\n  if (configuration.disableMagnification)\r\n    tileAdminProps.disableMagnification = true;\r\n\r\n  if (configuration.disableBRepCache)\r\n    tileAdminProps.optimizeBRepProcessing = false;\r\n\r\n  if (undefined !== configuration.gpuMemoryLimit)\r\n    tileAdminProps.gpuMemoryLimits = configuration.gpuMemoryLimit as GpuMemoryLimit;\r\n\r\n  if (true === configuration.noImdlWorker)\r\n    tileAdminProps.decodeImdlInWorker = false;\r\n\r\n  tileAdminProps.enableExternalTextures = (configuration.enableExternalTextures !== false);\r\n  tileAdminProps.enableFrontendScheduleScripts = (configuration.enableFrontendScheduleScripts !== false);\r\n  tileAdminProps.tileTreeExpirationTime = configuration.tileTreeExpirationSeconds;\r\n  tileAdminProps.tileExpirationTime = configuration.tileExpirationSeconds;\r\n  tileAdminProps.maximumLevelsToSkip = configuration.maxTilesToSkip;\r\n  tileAdminProps.alwaysRequestEdges = true === configuration.alwaysLoadEdges;\r\n  tileAdminProps.minimumSpatialTolerance = configuration.minimumSpatialTolerance;\r\n  tileAdminProps.alwaysSubdivideIncompleteTiles = true === configuration.alwaysSubdivideIncompleteTiles;\r\n  tileAdminProps.cesiumIonKey = configuration.cesiumIonKey;\r\n\r\n  return [renderSystemOptions, tileAdminProps];\r\n}\r\n\r\n// simple function to extract file name, without path or extension, on Windows or Linux\r\nfunction getFileName(path: string): string {\r\n  let strs = path.split(\"/\");\r\n  let str = strs[strs.length - 1];\r\n  strs = str.split(\"\\\\\");\r\n  str = strs[strs.length - 1];\r\n  const ndx = str.lastIndexOf(\".\");\r\n  if (ndx > 0) // allow files starting with .\r\n    str = str.substring(0, ndx);\r\n  return str;\r\n}\r\n\r\n// main entry point.\r\nconst dtaFrontendMain = async () => {\r\n  RpcConfiguration.developmentMode = true; // needed for snapshots in web apps\r\n  RpcConfiguration.disableRoutingValidation = true;\r\n\r\n  // retrieve, set, and output the global configuration variable\r\n  await getFrontendConfig();\r\n\r\n  // Start the app. (This tries to fetch a number of localization json files from the origin.)\r\n  let tileAdminProps: TileAdmin.Props;\r\n  let renderSystemOptions: RenderSystem.Options;\r\n  [renderSystemOptions, tileAdminProps] = setConfigurationResults();\r\n  await DisplayTestApp.startup(configuration, renderSystemOptions, tileAdminProps);\r\n  if (false !== configuration.enableDiagnostics)\r\n    IModelApp.renderSystem.enableDiagnostics(RenderDiagnostics.All);\r\n\r\n  if (!configuration.standalone && !configuration.customOrchestratorUri) {\r\n    alert(\"Standalone iModel required. Set IMJS_STANDALONE_FILENAME in environment\");\r\n    return;\r\n  }\r\n\r\n  // We can call RPC at this point (after startup), so if not mobile, call RPC and get true env from backend,\r\n  // then shutdown frontend, init vars again based on possibly changed configuration, then startup again\r\n  // (All that to workaround the fact that we can't call RPC before we start to get the true env first.)\r\n  if (!ProcessDetector.isMobileAppFrontend) {\r\n    Object.assign(configuration, await getFrontendConfig(true));\r\n    // console.log(\"New Front End Configuration from backend:\", JSON.stringify(configuration)); // eslint-disable-line no-console\r\n    await IModelApp.shutdown();\r\n    [renderSystemOptions, tileAdminProps] = setConfigurationResults();\r\n    await DisplayTestApp.startup(configuration, renderSystemOptions, tileAdminProps);\r\n    if (false !== configuration.enableDiagnostics)\r\n      IModelApp.renderSystem.enableDiagnostics(RenderDiagnostics.All);\r\n\r\n    if (!configuration.standalone && !configuration.customOrchestratorUri) {\r\n      alert(\"Standalone iModel required. Set IMJS_STANDALONE_FILENAME in environment\");\r\n      return;\r\n    }\r\n  }\r\n\r\n  // this needs to execute after all DisplayTestApp.startup executions so that env var will be current\r\n  if (configuration.frontendTilesUrlTemplate) {\r\n    initializeFrontendTiles({\r\n      computeSpatialTilesetBaseUrl: async (iModel) => {\r\n        let urlStr = configuration.frontendTilesUrlTemplate!.replace(\"{iModel.key}\", iModel.key);\r\n        urlStr = urlStr.replace(\"{iModel.filename}\", getFileName(iModel.key));\r\n        const url = new URL(urlStr);\r\n        try {\r\n          // See if a tileset has been published for this iModel.\r\n          const response = await fetch(`${url}tileset.json`);\r\n          await response.json();\r\n          return url;\r\n        } catch (_) {\r\n          // No tileset available.\r\n          return undefined;\r\n        }\r\n      },\r\n    });\r\n  }\r\n\r\n  const uiReady = displayUi(); // Get the browser started loading our html page and the svgs that it references but DON'T WAIT\r\n\r\n  try {\r\n    if (!configuration.standalone || configuration.signInForStandalone) {\r\n      while (!await signIn()) {\r\n        alert(\"please sign in\");\r\n      }\r\n    }\r\n\r\n    let iModel: IModelConnection | undefined;\r\n    const iModelName = configuration.iModelName;\r\n    if (undefined !== iModelName) {\r\n      const writable = configuration.openReadWrite ?? false;\r\n      iModel = await openFile({ fileName: iModelName, writable });\r\n      if (ProcessDetector.isMobileAppFrontend) {\r\n        // attempt to send message to mobile that the model was opened\r\n        MobileMessenger.postMessage(\"modelOpened\", iModelName);\r\n      }\r\n      setTitle(iModel);\r\n    } else {\r\n      const origStandalone = configuration.standalone;\r\n      try {\r\n        const iModelId = configuration.iModelId;\r\n        const iTwinId = configuration.iTwinId;\r\n        if (undefined !== iModelId && undefined !== iTwinId) {\r\n          const writable = configuration.openReadWrite ?? false;\r\n          iModel = await openFile({ iModelId, iTwinId, writable });\r\n          setTitle(iModel);\r\n        }\r\n      } catch (error) {\r\n        configuration.standalone = origStandalone;\r\n        alert(`Error getting hub iModel: ${error}`);\r\n      }\r\n    }\r\n\r\n    await uiReady; // Now wait for the HTML UI to finish loading.\r\n    await initView(iModel);\r\n    Logger.initializeToConsole();\r\n    Logger.setLevelDefault(LogLevel.Warning);\r\n    Logger.setLevel(\"core-frontend.Render\", LogLevel.Error);\r\n\r\n    if (configuration.startupMacro)\r\n      await IModelApp.tools.parseAndRun(`dta macro ${configuration.startupMacro}`);\r\n  } catch (reason) {\r\n    alert(reason);\r\n    return;\r\n  }\r\n};\r\n\r\nasync function documentLoaded(): Promise<void> {\r\n  const readyState = /^complete$/;\r\n  if (readyState.test(document.readyState))\r\n    return;\r\n\r\n  return new Promise<void>((resolve) => {\r\n    const listener = () => {\r\n      if (readyState.test(document.readyState)) {\r\n        document.removeEventListener(\"readystatechange\", listener);\r\n        resolve();\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"readystatechange\", listener);\r\n    listener();\r\n  });\r\n}\r\n\r\nasync function initView(iModel: IModelConnection | undefined) {\r\n  // open the specified view\r\n  showStatus(\"opening View\", configuration.viewName);\r\n\r\n  const fileSelector = undefined !== configuration.standalonePath ? {\r\n    directory: configuration.standalonePath,\r\n    input: document.getElementById(\"browserFileSelector\") as HTMLInputElement,\r\n  } : undefined;\r\n\r\n  DisplayTestApp.surface = new Surface(document.getElementById(\"app-surface\")!, document.getElementById(\"toolBar\")!, fileSelector, configuration.openReadWrite ?? false);\r\n\r\n  // We need layout to complete so that the div we want to stick our viewport into has non-zero dimensions.\r\n  // Consistently reproducible for some folks, not others...\r\n  await documentLoaded();\r\n\r\n  if (undefined !== iModel) {\r\n    const viewer = await DisplayTestApp.surface.createViewer({\r\n      iModel,\r\n      defaultViewName: configuration.viewName,\r\n      disableEdges: true === configuration.disableEdges,\r\n    });\r\n\r\n    viewer.dock(Dock.Full);\r\n  }\r\n\r\n  showStatus(\"View Ready\");\r\n  hideSpinner();\r\n}\r\n\r\n// Set up the HTML UI elements and wire them to our functions\r\nasync function displayUi() {\r\n  return new Promise<void>(async (resolve) => { // eslint-disable-line @typescript-eslint/no-misused-promises\r\n    showSpinner();\r\n    resolve();\r\n  });\r\n}\r\n\r\nfunction showSpinner() {\r\n  const spinner = document.getElementById(\"spinner\") as HTMLElement;\r\n  spinner.style.display = \"block\";\r\n}\r\n\r\nfunction hideSpinner() {\r\n  const spinner = document.getElementById(\"spinner\");\r\n  if (spinner)\r\n    spinner.style.display = \"none\";\r\n}\r\n\r\n// Entry point - run the main function\r\ndtaFrontendMain(); // eslint-disable-line @typescript-eslint/no-floating-promises\r\n"
        ],
        "mappings": "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",
        "names": []
      }
    }
  ]
}
