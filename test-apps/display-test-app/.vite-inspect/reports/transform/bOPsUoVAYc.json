{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/geometry/lib/esm/geometry4d/PlaneByOriginAndVectors4d.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\nimport { Point4d } from \"./Point4d\";\n/**\n * A PlaneByOriginAndVectors4d is a 4d origin and pair of 4d \"vectors\" defining a 4d plane.\n * * The parameterization of the plane is    `X = origin + vectorU * u + vectorV * v`\n * * With particular weight values `origin.w === 1, vectorU.w === 0, vectorV.w === 0` this is like `Plane3dByOriginAndVectors`\n * * With other weights, the deweighted xyz coordinates of points on the 4d plane still form a 3d plane.\n * @public\n */\nexport class PlaneByOriginAndVectors4d {\n    constructor(origin, vectorU, vectorV) {\n        this.origin = origin;\n        this.vectorU = vectorU;\n        this.vectorV = vectorV;\n    }\n    /** Return a clone of this plane */\n    clone(result) {\n        if (result) {\n            result.setFrom(this);\n            return result;\n        }\n        return new PlaneByOriginAndVectors4d(this.origin.clone(), this.vectorU.clone(), this.vectorV.clone());\n    }\n    /** copy all content from other plane */\n    setFrom(other) {\n        this.origin.setFrom(other.origin);\n        this.vectorU.setFrom(other.vectorU);\n        this.vectorV.setFrom(other.vectorV);\n    }\n    /** Return true if origin, vectorU, and vectorV pass isAlmostEqual. */\n    isAlmostEqual(other) {\n        return this.origin.isAlmostEqual(other.origin)\n            && this.vectorU.isAlmostEqual(other.vectorU)\n            && this.vectorV.isAlmostEqual(other.vectorV);\n    }\n    /** Create a plane with (copies of) origin, vectorU, vectorV parameters, all given as full 4d points.\n     */\n    static createOriginAndVectors(origin, vectorU, vectorV, result) {\n        if (result) {\n            result.setOriginAndVectors(origin, vectorU, vectorV);\n            return result;\n        }\n        return new PlaneByOriginAndVectors4d(origin.clone(), vectorU.clone(), vectorV.clone());\n    }\n    /** Set all numeric data from complete list of (x,y,z,w) in origin, vectorU, and vectorV */\n    setOriginAndVectorsXYZW(x0, y0, z0, w0, ux, uy, uz, uw, vx, vy, vz, vw) {\n        this.origin.set(x0, y0, z0, w0);\n        this.vectorU.set(ux, uy, uz, uw);\n        this.vectorV.set(vx, vy, vz, vw);\n        return this;\n    }\n    /** Copy the contents of origin, vectorU, vectorV parameters to respective member variables */\n    setOriginAndVectors(origin, vectorU, vectorV) {\n        this.origin.setFrom(origin);\n        this.vectorU.setFrom(vectorU);\n        this.vectorV.setFrom(vectorV);\n        return this;\n    }\n    /** Create from complete list of (x,y,z,w) in origin, vectorU, and vectorV */\n    static createOriginAndVectorsXYZW(x0, y0, z0, w0, ux, uy, uz, uw, vx, vy, vz, vw, result) {\n        if (result)\n            return result.setOriginAndVectorsXYZW(x0, y0, z0, w0, ux, uy, uz, uw, vx, vy, vz, vw);\n        return new PlaneByOriginAndVectors4d(Point4d.create(x0, y0, z0, w0), Point4d.create(ux, uy, uz, uw), Point4d.create(vx, vy, vz, uw));\n    }\n    /** create from origin point, (u=1,v=0) point, and (u=0,v=1) point. */\n    static createOriginAndTargets3d(origin, targetU, targetV, result) {\n        return PlaneByOriginAndVectors4d.createOriginAndVectorsXYZW(origin.x, origin.y, origin.z, 1.0, targetU.x - origin.x, targetU.y - origin.y, targetU.z - origin.z, 0.0, targetV.x - origin.x, targetV.y - origin.y, targetV.z - origin.z, 0.0, result);\n    }\n    /** evaluate plane point (full 3d) at given (u,v) coordinate. */\n    fractionToPoint(u, v, result) {\n        return this.origin.plus2Scaled(this.vectorU, u, this.vectorV, v, result);\n    }\n    /** create a new plane which maps to the cartesian xy plane. */\n    static createXYPlane(result) {\n        return PlaneByOriginAndVectors4d.createOriginAndVectorsXYZW(0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, result);\n    }\n}\n//# sourceMappingURL=PlaneByOriginAndVectors4d.js.map",
      "start": 1693508123389,
      "end": 1693508123559,
      "sourcemaps": null
    }
  ]
}
