{
  "resolvedId": "D:/hub2023A/itwinjs-core/common/temp/node_modules/.pnpm/@loaders.gl+worker-utils@3.4.7/node_modules/@loaders.gl/worker-utils/dist/esm/lib/worker-farm/worker-body.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { getTransferList } from '../worker-utils/get-transfer-list';\nfunction getParentPort() {\n  let parentPort;\n  try {\n    eval('globalThis.parentPort = require(\\'worker_threads\\').parentPort');\n    parentPort = globalThis.parentPort;\n  } catch {}\n  return parentPort;\n}\nconst onMessageWrapperMap = new Map();\nexport default class WorkerBody {\n  static inWorkerThread() {\n    return typeof self !== 'undefined' || Boolean(getParentPort());\n  }\n  static set onmessage(onMessage) {\n    function handleMessage(message) {\n      const parentPort = getParentPort();\n      const {\n        type,\n        payload\n      } = parentPort ? message : message.data;\n      onMessage(type, payload);\n    }\n    const parentPort = getParentPort();\n    if (parentPort) {\n      parentPort.on('message', handleMessage);\n      parentPort.on('exit', () => console.debug('Node worker closing'));\n    } else {\n      globalThis.onmessage = handleMessage;\n    }\n  }\n  static addEventListener(onMessage) {\n    let onMessageWrapper = onMessageWrapperMap.get(onMessage);\n    if (!onMessageWrapper) {\n      onMessageWrapper = message => {\n        if (!isKnownMessage(message)) {\n          return;\n        }\n        const parentPort = getParentPort();\n        const {\n          type,\n          payload\n        } = parentPort ? message : message.data;\n        onMessage(type, payload);\n      };\n    }\n    const parentPort = getParentPort();\n    if (parentPort) {\n      console.error('not implemented');\n    } else {\n      globalThis.addEventListener('message', onMessageWrapper);\n    }\n  }\n  static removeEventListener(onMessage) {\n    const onMessageWrapper = onMessageWrapperMap.get(onMessage);\n    onMessageWrapperMap.delete(onMessage);\n    const parentPort = getParentPort();\n    if (parentPort) {\n      console.error('not implemented');\n    } else {\n      globalThis.removeEventListener('message', onMessageWrapper);\n    }\n  }\n  static postMessage(type, payload) {\n    const data = {\n      source: 'loaders.gl',\n      type,\n      payload\n    };\n    const transferList = getTransferList(payload);\n    const parentPort = getParentPort();\n    if (parentPort) {\n      parentPort.postMessage(data, transferList);\n    } else {\n      globalThis.postMessage(data, transferList);\n    }\n  }\n}\nfunction isKnownMessage(message) {\n  const {\n    type,\n    data\n  } = message;\n  return type === 'message' && data && typeof data.source === 'string' && data.source.startsWith('loaders.gl');\n}\n//# sourceMappingURL=worker-body.js.map",
      "start": 1693508125723,
      "end": 1693508125826,
      "sourcemaps": null
    }
  ]
}
