{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/RenderPlan.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Rendering\n */\nimport { ClipStyle, ColorDef, Frustum, GlobeMode, Hilite, MonochromeMode, Npc, ViewFlags, WhiteOnWhiteReversalSettings, } from \"@itwin/core-common\";\nimport { Constant, Point3d, Vector3d } from \"@itwin/core-geometry\";\nimport { FlashSettings } from \"../FlashSettings\";\nconst scratchPoint3a = new Point3d();\nconst scratchPoint3b = new Point3d();\nconst scratchPoint3c = new Point3d();\n/**\n * @internal\n */\nexport class RenderPlanEllipsoid {\n    constructor(ellipsoidCenter, ellipsoidRotation, ellipsoidRadii) {\n        this.ellipsoidCenter = ellipsoidCenter;\n        this.ellipsoidRotation = ellipsoidRotation;\n        this.ellipsoidRadii = ellipsoidRadii;\n    }\n    equals(other) {\n        if (this.ellipsoidCenter.isAlmostEqual(other.ellipsoidCenter))\n            return false;\n        if (this.ellipsoidRotation.isAlmostEqual(other.ellipsoidRotation))\n            return false;\n        if (this.ellipsoidRadii.isAlmostEqual(other.ellipsoidRadii))\n            return false;\n        return true;\n    }\n}\n/** @internal */\nexport function createEmptyRenderPlan() {\n    return {\n        is3d: true,\n        viewFlags: new ViewFlags(),\n        bgColor: ColorDef.white,\n        monoColor: ColorDef.white,\n        monochromeMode: MonochromeMode.Scaled,\n        hiliteSettings: new Hilite.Settings(),\n        emphasisSettings: new Hilite.Settings(),\n        flashSettings: new FlashSettings(),\n        clipStyle: ClipStyle.defaults,\n        frustum: new Frustum(),\n        fraction: 0,\n        isFadeOutActive: false,\n        globalViewTransition: 0,\n        isGlobeMode3D: false,\n        backgroundMapOn: false,\n        upVector: Vector3d.unitZ(),\n        whiteOnWhiteReversal: WhiteOnWhiteReversalSettings.fromJSON(),\n    };\n}\n/** @internal */\nexport function createRenderPlanFromViewport(vp) {\n    const view = vp.view;\n    const style = view.displayStyle;\n    const is3d = view.is3d();\n    const globalViewTransition = view.is3d() ? view.globalViewTransition() : 0.0;\n    const isGlobeMode3D = GlobeMode.Ellipsoid === view.globeMode;\n    const backgroundMapOn = view.displayStyle.viewFlags.backgroundMap;\n    const frustum = vp.viewingSpace.getFrustum();\n    const fraction = vp.viewingSpace.frustFraction;\n    const viewFlags = style.viewFlags;\n    const bgColor = view.backgroundColor;\n    const monoColor = style.monochromeColor;\n    const monochromeMode = style.settings.monochromeMode;\n    const hiliteSettings = vp.hilite;\n    const emphasisSettings = vp.emphasisSettings;\n    const flashSettings = vp.flashSettings;\n    const lights = vp.lightSettings;\n    const isFadeOutActive = vp.isFadeOutActive;\n    const clip = view.getViewClip();\n    const clipStyle = view.displayStyle.settings.clipStyle;\n    const hline = style.is3d() ? style.settings.hiddenLineSettings : undefined;\n    const ao = style.is3d() ? style.settings.ambientOcclusionSettings : undefined;\n    const analysisStyle = style.settings.analysisStyle;\n    const thematic = (style.is3d() && view.displayStyle.viewFlags.thematicDisplay) ? style.settings.thematic : undefined;\n    const shouldDisplayAtmosphere = (style.is3d() && GlobeMode.Ellipsoid === view.globeMode && vp.iModel.isGeoLocated && style.viewFlags.backgroundMap) ? vp.view.getDisplayStyle3d().environment.displayAtmosphere : false;\n    const atmosphere = shouldDisplayAtmosphere ? vp.view.getDisplayStyle3d().environment.atmosphere : undefined;\n    let upVector;\n    if (GlobeMode.Ellipsoid === view.globeMode) {\n        const lb = frustum.getCorner(Npc.LeftBottomRear).interpolate(0.5, frustum.getCorner(Npc.LeftBottomFront), scratchPoint3a);\n        const rt = frustum.getCorner(Npc.RightTopRear).interpolate(0.5, frustum.getCorner(Npc.RightTopFront), scratchPoint3b);\n        const cntr = lb.interpolate(0.5, rt, scratchPoint3c);\n        upVector = view.getUpVector(cntr);\n    }\n    else {\n        upVector = Vector3d.unitZ();\n    }\n    let analysisTexture;\n    if (analysisStyle?.thematic)\n        analysisTexture = vp.target.renderSystem.getGradientTexture(analysisStyle.thematic.gradient, vp.iModel);\n    let ellipsoid;\n    if (GlobeMode.Ellipsoid === view.globeMode) {\n        const mapEcefToDb = view.iModel.getMapEcefToDb(0);\n        ellipsoid = new RenderPlanEllipsoid(Point3d.fromJSON(mapEcefToDb.origin), mapEcefToDb.matrix, Point3d.fromJSON({ x: Constant.earthRadiusWGS84.equator, y: Constant.earthRadiusWGS84.equator, z: Constant.earthRadiusWGS84.polar }));\n    }\n    return {\n        is3d,\n        viewFlags,\n        bgColor,\n        monoColor,\n        monochromeMode,\n        hiliteSettings,\n        emphasisSettings,\n        flashSettings,\n        clip,\n        clipStyle,\n        hline,\n        analysisStyle,\n        ao,\n        thematic,\n        atmosphere,\n        isFadeOutActive,\n        analysisTexture,\n        frustum,\n        fraction,\n        globalViewTransition,\n        isGlobeMode3D,\n        backgroundMapOn,\n        upVector,\n        lights,\n        whiteOnWhiteReversal: vp.displayStyle.settings.whiteOnWhiteReversal,\n        ellipsoid,\n    };\n}\n//# sourceMappingURL=RenderPlan.js.map",
      "start": 1693508119893,
      "end": 1693508119965,
      "sourcemaps": null
    }
  ]
}
