{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/StandardView.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Views\n */\nimport { Matrix3d } from \"@itwin/core-geometry\";\n/** Describes a set of commonly-used view rotations.\n * @public\n * @extensions\n */\nexport var StandardViewId;\n(function (StandardViewId) {\n    /** Any rotation which does not match one of the standard rotations.\n     * Invalid as an argument to StandardView.getStandardRotation() - used as a return value only.\n     */\n    StandardViewId[StandardViewId[\"NotStandard\"] = -1] = \"NotStandard\";\n    StandardViewId[StandardViewId[\"Top\"] = 0] = \"Top\";\n    StandardViewId[StandardViewId[\"Bottom\"] = 1] = \"Bottom\";\n    StandardViewId[StandardViewId[\"Left\"] = 2] = \"Left\";\n    StandardViewId[StandardViewId[\"Right\"] = 3] = \"Right\";\n    StandardViewId[StandardViewId[\"Front\"] = 4] = \"Front\";\n    StandardViewId[StandardViewId[\"Back\"] = 5] = \"Back\";\n    StandardViewId[StandardViewId[\"Iso\"] = 6] = \"Iso\";\n    StandardViewId[StandardViewId[\"RightIso\"] = 7] = \"RightIso\";\n})(StandardViewId || (StandardViewId = {}));\nlet standardViewMatrices;\nfunction getMatrices() {\n    if (undefined !== standardViewMatrices)\n        return standardViewMatrices;\n    standardViewMatrices = [];\n    standardViewMatrices[StandardViewId.Top] = Matrix3d.identity;\n    standardViewMatrices[StandardViewId.Bottom] = Matrix3d.createRowValues(1, 0, 0, 0, -1, 0, 0, 0, -1);\n    standardViewMatrices[StandardViewId.Left] = Matrix3d.createRowValues(0, -1, 0, 0, 0, 1, -1, 0, 0);\n    standardViewMatrices[StandardViewId.Right] = Matrix3d.createRowValues(0, 1, 0, 0, 0, 1, 1, 0, 0);\n    standardViewMatrices[StandardViewId.Front] = Matrix3d.createRowValues(1, 0, 0, 0, 0, 1, 0, -1, 0);\n    standardViewMatrices[StandardViewId.Back] = Matrix3d.createRowValues(-1, 0, 0, 0, 0, 1, 0, 1, 0);\n    standardViewMatrices[StandardViewId.Iso] = Matrix3d.createRowValues(0.707106781186548, -0.70710678118654757, 0.00000000000000000, 0.408248290463863, 0.40824829046386302, 0.81649658092772603, -0.577350269189626, -0.57735026918962573, 0.57735026918962573);\n    standardViewMatrices[StandardViewId.RightIso] = Matrix3d.createRowValues(0.707106781186548, 0.70710678118654757, 0.00000000000000000, -0.408248290463863, 0.40824829046386302, 0.81649658092772603, 0.577350269189626, -0.57735026918962573, 0.57735026918962573);\n    standardViewMatrices.forEach((mat) => Object.freeze(mat));\n    return standardViewMatrices;\n}\n/** Supplies access to a set of commonly-used view rotations.\n * @public\n */\nexport class StandardView {\n    static get top() { return this.getStandardRotation(StandardViewId.Top); }\n    static get bottom() { return this.getStandardRotation(StandardViewId.Bottom); }\n    static get left() { return this.getStandardRotation(StandardViewId.Left); }\n    static get right() { return this.getStandardRotation(StandardViewId.Right); }\n    static get front() { return this.getStandardRotation(StandardViewId.Front); }\n    static get back() { return this.getStandardRotation(StandardViewId.Back); }\n    static get iso() { return this.getStandardRotation(StandardViewId.Iso); }\n    static get rightIso() { return this.getStandardRotation(StandardViewId.RightIso); }\n    /** Obtain a [[Matrix3d]] corresponding to the specified [[StandardViewId]].\n     * @param id The ID of the desired rotation.\n     * @return A rotation matrix corresponding to the requested standard view ID, or a \"top\" view rotation if the input does not correspond to a standard rotation.\n     */\n    static getStandardRotation(id) {\n        if (id < StandardViewId.Top || id > StandardViewId.RightIso)\n            id = StandardViewId.Top;\n        return getMatrices()[id];\n    }\n    /** Attempts to adjust the supplied rotation matrix to match the standard view rotation it most closely matches.\n     * If a matching standard rotation exists, the input matrix will be modified in-place to precisely match it.\n     * Otherwise, the input matrix will be unmodified.\n     * @param matrix The rotation matrix to adjust.\n     */\n    static adjustToStandardRotation(matrix) {\n        getMatrices().some((test) => {\n            if (test.maxDiff(matrix) > 1.0e-7)\n                return false;\n            matrix.setFrom(test);\n            return true;\n        });\n    }\n}\n//# sourceMappingURL=StandardView.js.map",
      "start": 1693508119487,
      "end": 1693508119644,
      "sourcemaps": null
    }
  ]
}
