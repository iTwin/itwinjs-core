{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/ViewAttributes.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { Id64String } from \"@itwin/core-bentley\";\r\nimport {\r\n  CheckBox, ComboBox, ComboBoxEntry, createCheckBox, createColorInput, createComboBox, createNestedMenu, createNumericInput, createSlider, Slider,\r\n} from \"@itwin/frontend-devtools\";\r\nimport {\r\n  BackgroundMapProps, BackgroundMapProviderName, BackgroundMapProviderProps, BackgroundMapType, BaseMapLayerSettings, ColorDef, DisplayStyle3dSettingsProps,\r\n  GlobeMode, HiddenLine, LinePixels, MonochromeMode, RenderMode, TerrainProps, ThematicDisplayMode, ThematicGradientColorScheme, ThematicGradientMode,\r\n} from \"@itwin/core-common\";\r\nimport { DisplayStyle2dState, DisplayStyle3dState, DisplayStyleState, IModelApp, Viewport, ViewState, ViewState3d } from \"@itwin/core-frontend\";\r\nimport { AmbientOcclusionEditor } from \"./AmbientOcclusion\";\r\nimport { EnvironmentEditor } from \"./EnvironmentEditor\";\r\nimport { Settings } from \"./FeatureOverrides\";\r\nimport { ThematicDisplayEditor } from \"./ThematicDisplay\";\r\nimport { ToolBarDropDown } from \"./ToolBar\";\r\n\r\n// cspell:ignore cels\r\n\r\ntype UpdateAttribute = (view: ViewState) => void;\r\n\r\ntype ViewFlag = \"acsTriad\" | \"grid\" | \"fill\" | \"materials\" | \"textures\" | \"visibleEdges\" | \"hiddenEdges\" | \"monochrome\" | \"constructions\" | \"transparency\" | \"weights\" | \"styles\" | \"clipVolume\" | \"forceSurfaceDiscard\" | \"whiteOnWhiteReversal\";\r\n\r\ninterface RenderingStyle extends DisplayStyle3dSettingsProps {\r\n  name: string;\r\n}\r\n\r\nconst renderingStyleViewFlags = {\r\n  noCameraLights: false,\r\n  noSourceLights: false,\r\n  noSolarLight: false,\r\n  visEdges: false,\r\n  hidEdges: false,\r\n  shadows: false,\r\n  monochrome: false,\r\n  ambientOcclusion: false,\r\n  thematicDisplay: false,\r\n  renderMode: RenderMode.SmoothShade,\r\n};\r\n\r\nconst renderingStyles: RenderingStyle[] = [{\r\n  name: \"None\",\r\n}, {\r\n  name: \"Default\",\r\n  environment: {\r\n    sky: {\r\n      display: true, groundColor: 8228728, zenithColor: 16741686, nadirColor: 3880, skyColor: 16764303,\r\n    },\r\n    ground: {\r\n      display: false, elevation: -0.01, aboveColor: 32768, belowColor: 1262987,\r\n    },\r\n  },\r\n  viewflags: renderingStyleViewFlags,\r\n  lights: {\r\n    solar: { direction: [-0.9833878378071199, -0.18098510351728977, 0.013883542698953828] },\r\n  },\r\n}, {\r\n  name: \"Ambient\",\r\n  backgroundColor: 10921638,\r\n  environment: {\r\n    sky: { display: false },\r\n    ground: { display: false },\r\n  },\r\n  viewflags: { ...renderingStyleViewFlags, ambientOcclusion: true },\r\n  lights: {\r\n    solar: { intensity: 0 },\r\n    portrait: { intensity: 0 },\r\n    ambient: { intensity: 0.55 },\r\n    fresnel: { intensity: 0.8, invert: true },\r\n    specularIntensity: 0,\r\n  },\r\n}, {\r\n  name: \"Illustration\",\r\n  environment: {},\r\n  backgroundColor: 10921638,\r\n  viewflags: { ...renderingStyleViewFlags, noCameraLights: true, noSourceLights: true, noSolarLight: true, visEdges: true },\r\n  lights: {\r\n    solar: { direction: [-0.9833878378071199, -0.18098510351728977, 0.013883542698953828] },\r\n  },\r\n  hline: {\r\n    visible: { ovrColor: true, color: 0, pattern: 0, width: 1 },\r\n    hidden: { ovrColor: false, color: 16777215, pattern: 3435973836, width: 0 },\r\n    transThreshold: 1,\r\n  },\r\n}, {\r\n  name: \"Sun-dappled\",\r\n  environment: {\r\n    sky: {\r\n      display: true, groundColor: 8228728, zenithColor: 16741686, nadirColor: 3880, skyColor: 16764303,\r\n    },\r\n    ground: {\r\n      display: false, elevation: -0.01, aboveColor: 32768, belowColor: 1262987,\r\n    },\r\n  },\r\n  viewflags: { ...renderingStyleViewFlags, shadows: true },\r\n  lights: {\r\n    solar: { direction: [0.9391245716329828, 0.10165764029437066, -0.3281931795832247] },\r\n    hemisphere: { intensity: 0.2 },\r\n    portrait: { intensity: 0 },\r\n  },\r\n}, {\r\n  name: \"Comic Book\",\r\n  environment: {\r\n    sky: { display: true, groundColor: 8228728, zenithColor: 16741686, nadirColor: 3880, skyColor: 16764303 },\r\n    ground: { display: false, elevation: -0.01, aboveColor: 32768, belowColor: 1262987 },\r\n  },\r\n  viewflags: { ...renderingStyleViewFlags, noWeight: false, visEdges: true },\r\n  hline: {\r\n    visible: { ovrColor: true, color: 0, pattern: 0, width: 3 },\r\n    transThreshold: 1,\r\n  },\r\n  lights: {\r\n    solar: { direction: [0.7623, 0.0505, -0.6453], intensity: 1.95, alwaysEnabled: true },\r\n    ambient: { intensity: 0.2 },\r\n    portrait: { intensity: 0 },\r\n    specularIntensity: 0,\r\n    numCels: 2,\r\n  },\r\n}, {\r\n  name: \"Outdoorsy\",\r\n  environment: {\r\n    sky: { display: true, groundColor: 8228728, zenithColor: 16741686, nadirColor: 3880, skyColor: 16764303 },\r\n    ground: { display: false, elevation: -0.01, aboveColor: 32768, belowColor: 1262987 },\r\n  },\r\n  viewflags: renderingStyleViewFlags,\r\n  lights: {\r\n    solar: { direction: [-0.9833878378071199, -0.18098510351728977, 0.013883542698953828], intensity: 1.05 },\r\n    ambient: { intensity: 0.25 },\r\n    hemisphere: {\r\n      upperColor: { r: 206, g: 233, b: 255 },\r\n      intensity: 0.5,\r\n    },\r\n    portrait: { intensity: 0 },\r\n  },\r\n}, {\r\n  name: \"Schematic\",\r\n  environment: {},\r\n  backgroundColor: 16777215,\r\n  viewflags: { ...renderingStyleViewFlags, visEdges: true },\r\n  lights: {\r\n    solar: { direction: [0, -0.6178171353958787, -0.7863218089378106], intensity: 1.95, alwaysEnabled: true },\r\n    ambient: { intensity: 0.65 },\r\n    portrait: { intensity: 0 },\r\n    specularIntensity: 0,\r\n  },\r\n  hline: {\r\n    visible: { ovrColor: true, color: 0, pattern: 0, width: 1 },\r\n    hidden: { ovrColor: false, color: 16777215, pattern: 3435973836, width: 0 },\r\n    transThreshold: 1,\r\n  },\r\n}, {\r\n  name: \"Soft\",\r\n  environment: {\r\n    sky: { display: true, groundColor: 8228728, zenithColor: 16741686, nadirColor: 3880, skyColor: 16764303 },\r\n    ground: { display: false, elevation: -0.01, aboveColor: 32768, belowColor: 1262987 },\r\n  },\r\n  viewflags: { ...renderingStyleViewFlags, ambientOcclusion: true },\r\n  lights: {\r\n    solar: { direction: [-0.9833878378071199, -0.18098510351728977, 0.013883542698953828], intensity: 0 },\r\n    ambient: { intensity: 0.75 },\r\n    hemisphere: { intensity: 0.3 },\r\n    portrait: { intensity: 0.5 },\r\n    specularIntensity: 0.4,\r\n  },\r\n  ao: { bias: 0.25, zLengthCap: 0.0025, maxDistance: 100, intensity: 1, texelStepSize: 1, blurDelta: 1.5, blurSigma: 2, blurTexelStepSize: 1 },\r\n}, {\r\n  name: \"Moonlit\",\r\n  environment: {\r\n    sky: { display: true, groundColor: 2435876, zenithColor: 0, nadirColor: 3880, skyColor: 3481088 },\r\n    ground: { display: false, elevation: -0.01, aboveColor: 32768, belowColor: 1262987 },\r\n  },\r\n  viewflags: { ...renderingStyleViewFlags, visEdges: true },\r\n  lights: {\r\n    solar: { direction: [-0.9833878378071199, -0.18098510351728977, 0.013883542698953828], intensity: 3, alwaysEnabled: true },\r\n    ambient: { intensity: 0.05 },\r\n    hemisphere: { lowerColor: { r: 83, g: 100, b: 87 } },\r\n    portrait: { intensity: 0 },\r\n    specularIntensity: 0,\r\n  },\r\n  monochromeMode: 0,\r\n  hline: {\r\n    visible: { ovrColor: true, color: 0, pattern: -1, width: 0 },\r\n    hidden: { ovrColor: false, color: 16777215, pattern: 3435973836, width: 0 },\r\n    transThreshold: 1,\r\n  },\r\n  monochromeColor: 7897479,\r\n}, {\r\n  name: \"Thematic: Height\",\r\n  viewflags: { ...renderingStyleViewFlags, thematicDisplay: true },\r\n  thematic: {\r\n    axis: [0, 0, 1],\r\n    gradientSettings: { mode: ThematicGradientMode.SteppedWithDelimiter },\r\n  },\r\n  lights: {},\r\n}, {\r\n  name: \"Thematic: Slope\",\r\n  viewflags: { ...renderingStyleViewFlags, thematicDisplay: true },\r\n  thematic: {\r\n    displayMode: ThematicDisplayMode.Slope,\r\n    range: [0, 90],\r\n    axis: [0, 0, 1],\r\n    gradientSettings: {\r\n      mode: ThematicGradientMode.Smooth,\r\n      colorScheme: ThematicGradientColorScheme.Custom,\r\n      customKeys: [\r\n        { value: 0, color: 0x404040 },\r\n        { value: 1, color: 0xffffff },\r\n      ],\r\n    },\r\n  },\r\n  lights: {},\r\n}, {\r\n  name: \"Gloss\",\r\n  environment: {\r\n    sky: { display: true, groundColor: 8228728, zenithColor: 16741686, nadirColor: 3880, skyColor: 16764303 },\r\n    ground: { display: false, elevation: -0.01, aboveColor: 32768, belowColor: 1262987 },\r\n  },\r\n  viewflags: { ...renderingStyleViewFlags, visEdges: true },\r\n  lights: {\r\n    solar: { direction: [-0.9833878378071199, -0.18098510351728977, 0.013883542698953828] },\r\n    specularIntensity: 4.15,\r\n  },\r\n  hline: {\r\n    visible: { ovrColor: true, color: 8026756, pattern: 0, width: 1 },\r\n    hidden: { ovrColor: false, color: 16777215, pattern: 3435973836, width: 0 },\r\n    transThreshold: 1,\r\n  },\r\n}, {\r\n  name: \"Atmosphere\",\r\n  environment: {\r\n    sky: {\r\n      display: true,\r\n    },\r\n    ground: {\r\n      display: true,\r\n    },\r\n    atmosphere: {\r\n      display: true,\r\n    },\r\n  },\r\n  viewflags: renderingStyleViewFlags,\r\n}];\r\n\r\nexport class ViewAttributes {\r\n  private static _expandViewFlags = false;\r\n  private static _expandEdgeDisplay = false;\r\n  private readonly _vp: Viewport;\r\n  private readonly _element: HTMLElement;\r\n  private readonly _updates: UpdateAttribute[] = [];\r\n  private _updating = false;\r\n  private readonly _removeMe: () => void;\r\n  private readonly _parent: HTMLElement;\r\n  private _id = 0;\r\n\r\n  private _displayStylePickerDiv?: HTMLDivElement;\r\n  public set displayStylePickerInput(newComboBox: ComboBox) {\r\n    while (this._displayStylePickerDiv!.hasChildNodes())\r\n      this._displayStylePickerDiv!.removeChild(this._displayStylePickerDiv!.firstChild!);\r\n\r\n    this._displayStylePickerDiv!.appendChild(newComboBox.div);\r\n  }\r\n\r\n  public constructor(vp: Viewport, parent: HTMLElement, disableEdges = false) {\r\n    this._vp = vp;\r\n    this._parent = parent;\r\n    this._element = document.createElement(\"div\");\r\n    this._element.className = \"debugPanel\"; // \"toolMenu\"; or set display=\"block\"...\r\n\r\n    this._removeMe = vp.onViewChanged.addListener((_vp) => this.update());\r\n\r\n    this.addDisplayStylePicker();\r\n    this.addRenderMode();\r\n    this.addRenderingStyles();\r\n    const hr = document.createElement(\"hr\");\r\n    hr.style.borderColor = \"grey\";\r\n    this._element.appendChild(hr);\r\n\r\n    const flagsDiv = document.createElement(\"div\");\r\n    const vfMenu = createNestedMenu({\r\n      id: this._nextId,\r\n      label: \"View Flags\",\r\n      parent: this._element,\r\n      // We use a static so the expand/collapse state persists after closing and reopening the drop-down.\r\n      expand: ViewAttributes._expandViewFlags,\r\n      handler: (expanded) => {\r\n        ViewAttributes._expandViewFlags = expanded;\r\n        vfMenu.label.style.fontWeight = expanded ? \"bold\" : \"500\";\r\n      },\r\n      body: flagsDiv,\r\n    });\r\n    (vfMenu.div.firstElementChild!.lastElementChild! as HTMLElement).style.borderColor = \"grey\";\r\n\r\n    this._updates.push((_view) => {\r\n      vfMenu.label.style.fontWeight = ViewAttributes._expandViewFlags ? \"bold\" : \"500\";\r\n    });\r\n\r\n    this._element.appendChild(flagsDiv);\r\n\r\n    this.addViewFlagAttribute(flagsDiv, \"ACS Triad\", \"acsTriad\");\r\n    this.addViewFlagAttribute(flagsDiv, \"Grid\", \"grid\");\r\n    this.addViewFlagAttribute(flagsDiv, \"Fill\", \"fill\");\r\n    this.addViewFlagAttribute(flagsDiv, \"Materials\", \"materials\");\r\n    this.addViewFlagAttribute(flagsDiv, \"Textures\", \"textures\");\r\n    this.addViewFlagAttribute(flagsDiv, \"Constructions\", \"constructions\");\r\n    this.addViewFlagAttribute(flagsDiv, \"Transparency\", \"transparency\");\r\n    this.addViewFlagAttribute(flagsDiv, \"Line Weights\", \"weights\");\r\n    this.addViewFlagAttribute(flagsDiv, \"Line Styles\", \"styles\");\r\n    this.addViewFlagAttribute(flagsDiv, \"Clip Volume\", \"clipVolume\", true);\r\n    this.addViewFlagAttribute(flagsDiv, \"Force Surface Discard\", \"forceSurfaceDiscard\", true);\r\n    this.addViewFlagAttribute(flagsDiv, \"White-on-white Reversal\", \"whiteOnWhiteReversal\");\r\n\r\n    this.addCameraToggle(flagsDiv);\r\n    this.addMonochrome(flagsDiv);\r\n    const hr2 = document.createElement(\"hr\");\r\n    hr2.style.borderColor = \"grey\";\r\n    flagsDiv.appendChild(hr2);\r\n\r\n    this.addEnvironmentEditor();\r\n    this.addBackgroundMapOrTerrain();\r\n    if (!disableEdges)\r\n      this.addEdgeDisplay();\r\n\r\n    this.addAmbientOcclusion();\r\n    this.addThematicDisplay();\r\n\r\n    // Set initial states\r\n    this.update();\r\n\r\n    parent.appendChild(this._element);\r\n  }\r\n\r\n  public dispose(): void {\r\n    this._removeMe();\r\n    this._parent.removeChild(this._element);\r\n  }\r\n\r\n  private addDisplayStylePicker(): void {\r\n    this._displayStylePickerDiv = document.createElement(\"div\");\r\n    this._element.appendChild(this._displayStylePickerDiv);\r\n  }\r\n\r\n  private addEnvironmentEditor() {\r\n    const env = new EnvironmentEditor(this._vp, this._element);\r\n    this._updates.push((view) => env.update(view));\r\n  }\r\n\r\n  private addViewFlagAttribute(parent: HTMLElement, label: string, flag: ViewFlag, only3d: boolean = false): void {\r\n    const elems = this.addCheckbox(label, (enabled: boolean) => {\r\n      this._vp.viewFlags = this._vp.viewFlags.with(flag, enabled);\r\n      this.sync();\r\n    }, parent);\r\n\r\n    const update = (view: ViewState) => {\r\n      const visible = !only3d || view.is3d();\r\n      elems.div.style.display = visible ? \"\" : \"none\";\r\n      if (visible)\r\n        elems.checkbox.checked = view.viewFlags[flag];\r\n    };\r\n\r\n    this._updates.push(update);\r\n  }\r\n\r\n  private addCameraToggle(parent: HTMLElement): void {\r\n    const elems = this.addCheckbox(\"Camera\", (enabled: boolean) => {\r\n      if (enabled)\r\n        this._vp.turnCameraOn();\r\n      else\r\n        (this._vp.view as ViewState3d).turnCameraOff();\r\n\r\n      this.sync(true);\r\n    }, parent);\r\n\r\n    const update = (view: ViewState) => {\r\n      const visible = view.is3d() && view.allow3dManipulations() && view.supportsCamera();\r\n      elems.div.style.display = visible ? \"block\" : \"none\";\r\n      if (visible)\r\n        elems.checkbox.checked = this._vp.isCameraOn;\r\n    };\r\n\r\n    this._updates.push(update);\r\n  }\r\n\r\n  private addMonochrome(parent: HTMLElement): void {\r\n    const colorInput = createColorInput({\r\n      label: \"Color\",\r\n      id: this._nextId,\r\n      parent,\r\n      display: \"inline\",\r\n      value: this._vp.view.displayStyle.settings.monochromeColor.toHexString(),\r\n      handler: (color) => {\r\n        this._vp.view.displayStyle.settings.monochromeColor = ColorDef.create(color);\r\n        this.sync();\r\n      },\r\n    });\r\n    colorInput.div.style.cssFloat = \"right\";\r\n\r\n    const scaledCb = this.addCheckbox(\"Scaled\", (enabled: boolean) => {\r\n      this._vp.displayStyle.settings.monochromeMode = enabled ? MonochromeMode.Scaled : MonochromeMode.Flat;\r\n      this.sync();\r\n    }, parent);\r\n    scaledCb.div.style.cssFloat = \"right\";\r\n    scaledCb.div.style.marginRight = \"0.67em\";\r\n\r\n    this.addViewFlagAttribute(parent, \"Monochrome\", \"monochrome\");\r\n    colorInput.div.style.marginTop = \"-4px\";\r\n\r\n    this._updates.push((view: ViewState) => {\r\n      if (view.viewFlags.monochrome) {\r\n        colorInput.div.style.display = scaledCb.div.style.display = \"\";\r\n        colorInput.input.value = view.displayStyle.settings.monochromeColor.toHexString();\r\n        scaledCb.checkbox.checked = MonochromeMode.Scaled === view.displayStyle.settings.monochromeMode;\r\n      } else {\r\n        colorInput.div.style.display = scaledCb.div.style.display = \"none\";\r\n      }\r\n    });\r\n  }\r\n\r\n  private addRenderMode(): void {\r\n    const div = document.createElement(\"div\");\r\n\r\n    const entries = [\r\n      { name: \"Wireframe\", value: RenderMode.Wireframe },\r\n      { name: \"Solid Fill\", value: RenderMode.SolidFill },\r\n      { name: \"Hidden Line\", value: RenderMode.HiddenLine },\r\n      { name: \"Smooth Shade\", value: RenderMode.SmoothShade },\r\n    ];\r\n\r\n    const select = createComboBox({\r\n      parent: div,\r\n      name: \"Render Mode: \",\r\n      entries,\r\n      id: \"viewAttr_renderMode\",\r\n      value: this._vp.viewFlags.renderMode,\r\n      handler: (thing) => {\r\n        this._vp.viewFlags = this._vp.viewFlags.withRenderMode(Number.parseInt(thing.value, 10));\r\n        this.sync();\r\n      },\r\n    }).select;\r\n\r\n    this._updates.push((view) => {\r\n      const visible = view.is3d();\r\n      div.style.display = visible ? \"block\" : \"none\";\r\n      if (visible)\r\n        select.value = view.viewFlags.renderMode.toString();\r\n    });\r\n\r\n    this._element.appendChild(div);\r\n  }\r\n\r\n  private addRenderingStyles(): void {\r\n    const div = document.createElement(\"div\");\r\n    const entries: ComboBoxEntry[] = renderingStyles.map((renderingStyle, index) => ({ name: renderingStyle.name, value: index }));\r\n    createComboBox({\r\n      parent: div,\r\n      name: \"Rendering Style: \",\r\n      entries,\r\n      id: \"viewAttr_renderingStyle\",\r\n      value: 0,\r\n      handler: (cbx) => {\r\n        this.applyRenderingStyle(renderingStyles[parseInt(cbx.value, 10)]);\r\n      },\r\n    });\r\n\r\n    this._updates.push((view) => {\r\n      div.style.display = view.is3d() ? \"\" : \"none\";\r\n    });\r\n\r\n    this._element.appendChild(div);\r\n  }\r\n\r\n  private applyRenderingStyle(style: RenderingStyle): void {\r\n    if (style.name !== \"None\")\r\n      this._vp.overrideDisplayStyle(style);\r\n  }\r\n\r\n  private addAmbientOcclusion(): void {\r\n    const ao = new AmbientOcclusionEditor(this._vp, this._element);\r\n    this._updates.push((view) => ao.update(view));\r\n  }\r\n\r\n  private addThematicDisplay(): void {\r\n    const thematic = new ThematicDisplayEditor(this._vp, this._element);\r\n    this._updates.push((view) => thematic.update(view));\r\n  }\r\n\r\n  private getBackgroundMap(view: ViewState) { return view.displayStyle.settings.backgroundMap; }\r\n  private addBackgroundMapOrTerrain(): void {\r\n    const isMapSupported = (view: ViewState) => view.is3d() && view.iModel.isGeoLocated;\r\n\r\n    const div = document.createElement(\"div\");\r\n\r\n    const backgroundSettingsDiv = document.createElement(\"div\")!;\r\n\r\n    const showOrHideSettings = (show: boolean) => {\r\n      const display = show ? \"block\" : \"none\";\r\n      backgroundSettingsDiv.style.display = display;\r\n    };\r\n\r\n    const enableMap = (enabled: boolean) => {\r\n      this._vp.viewFlags = this._vp.viewFlags.with(\"backgroundMap\", enabled);\r\n      backgroundSettingsDiv.style.display = enabled ? \"block\" : \"none\";\r\n      showOrHideSettings(enabled);\r\n      this.sync();\r\n    };\r\n    const checkboxInterface = this.addCheckbox(\"Background Map\", enableMap, div);\r\n    const checkbox = checkboxInterface.checkbox;\r\n    const checkboxLabel = checkboxInterface.label;\r\n\r\n    const imageryProviders = createComboBox({\r\n      parent: backgroundSettingsDiv,\r\n      name: \"Imagery: \",\r\n      id: \"viewAttr_MapProvider\",\r\n      entries: [\r\n        { name: \"Bing\", value: \"BingProvider\" },\r\n        { name: \"MapBox\", value: \"MapBoxProvider\" },\r\n      ],\r\n      handler: (select) => this.updateBackgroundMapProvider({ name: select.value as BackgroundMapProviderName }),\r\n    }).select;\r\n\r\n    const types = createComboBox({\r\n      parent: backgroundSettingsDiv,\r\n      name: \"Type: \",\r\n      id: \"viewAttr_mapType\",\r\n      entries: [\r\n        { name: \"Street\", value: BackgroundMapType.Street },\r\n        { name: \"Aerial\", value: BackgroundMapType.Aerial },\r\n        { name: \"Hybrid\", value: BackgroundMapType.Hybrid },\r\n      ],\r\n      handler: (select) => this.updateBackgroundMapProvider({ type: Number.parseInt(select.value, 10) }),\r\n    }).select;\r\n    const globeModes = createComboBox({\r\n      parent: backgroundSettingsDiv,\r\n      name: \"Globe: \",\r\n      id: \"viewAttr_globeMode\",\r\n      entries: [\r\n        { name: \"Ellipsoid\", value: GlobeMode.Ellipsoid },\r\n        { name: \"Plane\", value: GlobeMode.Plane },\r\n      ],\r\n      handler: (select) => this.updateBackgroundMap({ globeMode: Number.parseInt(select.value, 10) }),\r\n    }).select;\r\n\r\n    const terrainSettings = this.addTerrainSettings();\r\n    const mapSettings = this.addMapSettings();\r\n\r\n    const enableTerrain = (enable: boolean) => {\r\n      this.updateBackgroundMap({ applyTerrain: enable });\r\n      terrainSettings.style.display = enable ? \"block\" : \"none\";\r\n      mapSettings.style.display = enable ? \"none\" : \"block\";\r\n      this.sync();\r\n    };\r\n\r\n    const terrainCheckbox = this.addCheckbox(\"Terrain\", enableTerrain, backgroundSettingsDiv).checkbox;\r\n    const transCheckbox = this.addCheckbox(\"Transparency\", (enabled: boolean) => this.updateBackgroundMap({ transparency: enabled ? 0.5 : false }), backgroundSettingsDiv).checkbox;\r\n    const locatable = this.addCheckbox(\"Locatable\", (enabled) => this.updateBackgroundMap({ nonLocatable: !enabled }), backgroundSettingsDiv).checkbox;\r\n    backgroundSettingsDiv.appendChild(document.createElement(\"hr\")!);\r\n    backgroundSettingsDiv.appendChild(mapSettings);\r\n    backgroundSettingsDiv.appendChild(terrainSettings);\r\n\r\n    this._updates.push((view) => {\r\n      const visible = isMapSupported(view);\r\n      div.style.display = visible ? \"block\" : \"none\";\r\n      if (!visible)\r\n        return;\r\n\r\n      checkbox.checked = view.viewFlags.backgroundMap;\r\n      checkboxLabel.style.fontWeight = checkbox.checked ? \"bold\" : \"500\";\r\n      showOrHideSettings(checkbox.checked);\r\n\r\n      const baseLayer = view.displayStyle.settings.mapImagery.backgroundBase;\r\n      if (baseLayer instanceof BaseMapLayerSettings && baseLayer.provider) {\r\n        imageryProviders.value = baseLayer.provider.name;\r\n        types.value = baseLayer.provider.type.toString();\r\n      }\r\n\r\n      const map = this.getBackgroundMap(view);\r\n      terrainCheckbox.checked = map.applyTerrain;\r\n      transCheckbox.checked = false !== map.transparency;\r\n      locatable.checked = map.locatable;\r\n      globeModes.value = map.globeMode.toString();\r\n\r\n      if (map.applyTerrain !== terrainCheckbox.checked)\r\n        enableTerrain(terrainCheckbox.checked);\r\n    });\r\n\r\n    div.appendChild(backgroundSettingsDiv);\r\n    const hr = document.createElement(\"hr\");\r\n    hr.style.borderColor = \"grey\";\r\n    div.appendChild(hr);\r\n    this._element.appendChild(div);\r\n  }\r\n\r\n  private addMapSettings() {\r\n    const mapSettingsDiv = document.createElement(\"div\");\r\n    const groundBiasDiv = document.createElement(\"div\");\r\n    const groundBiasLabel = document.createElement(\"label\");\r\n    groundBiasLabel.style.display = \"inline\";\r\n    groundBiasLabel.htmlFor = \"ts_viewToolPickRadiusInches\";\r\n    groundBiasLabel.innerText = \"Ground Bias: \";\r\n    groundBiasDiv.appendChild(groundBiasLabel);\r\n    const groundBias = createNumericInput({\r\n      parent: groundBiasDiv,\r\n      value: this.getBackgroundMap(this._vp.view).groundBias,\r\n      handler: (value) => this.updateBackgroundMap({ groundBias: value }),\r\n    }, true);\r\n    groundBiasDiv.style.display = \"block\";\r\n    groundBiasDiv.style.textAlign = \"left\";\r\n    mapSettingsDiv.appendChild(groundBiasDiv);\r\n\r\n    const depthCheckbox = this.addCheckbox(\"Depth\", (enabled: boolean) => this.updateBackgroundMap({ useDepthBuffer: enabled }), mapSettingsDiv).checkbox;\r\n\r\n    this._updates.push((view) => {\r\n      const map = this.getBackgroundMap(view);\r\n      groundBias.value = map.groundBias.toString();\r\n      depthCheckbox.checked = map.useDepthBuffer;\r\n    });\r\n\r\n    return mapSettingsDiv;\r\n  }\r\n\r\n  private updateBackgroundMap(props: BackgroundMapProps): void {\r\n    this._vp.changeBackgroundMapProps(props);\r\n    this.sync();\r\n  }\r\n\r\n  private updateBackgroundMapProvider(props: BackgroundMapProviderProps): void {\r\n    this._vp.displayStyle.changeBackgroundMapProvider(props);\r\n    this.sync();\r\n  }\r\n\r\n  private addTerrainSettings() {\r\n    const getTerrainSettings = (view: ViewState) => view.displayStyle.settings.backgroundMap.terrainSettings;\r\n    const updateTerrainSettings = (props: TerrainProps) => this._vp.changeBackgroundMapProps({ terrainSettings: props });\r\n\r\n    const settingsDiv = document.createElement(\"div\")!;\r\n    const heightOriginMode: HTMLSelectElement = createComboBox({\r\n      name: \"Height Origin Mode: \",\r\n      id: \"viewAttr_TerrainHeightOrigin\",\r\n      entries: [\r\n        { name: \"GPS (Geodetic/Ellipsoid)\", value: \"0\" },\r\n        { name: \"Sea Level (Geoid)\", value: \"1\" },\r\n        { name: \"Ground\", value: \"2\" },\r\n      ],\r\n      handler: (select) => { updateTerrainSettings({ heightOriginMode: parseInt(select.value, 10) }); },\r\n    }).select;\r\n\r\n    const heightOriginDiv = document.createElement(\"div\");\r\n    const heightOriginLabel = document.createElement(\"label\");\r\n    heightOriginLabel.style.display = \"inline\";\r\n    heightOriginLabel.htmlFor = \"ts_viewToolPickRadiusInches\";\r\n    heightOriginLabel.innerText = \"Model Height: \";\r\n    heightOriginDiv.appendChild(heightOriginLabel);\r\n    const heightOrigin = createNumericInput({\r\n      parent: heightOriginDiv,\r\n      value: getTerrainSettings(this._vp.view).heightOrigin,\r\n      handler: (value) => updateTerrainSettings({ heightOrigin: value }),\r\n    }, true);\r\n    heightOriginDiv.appendChild(heightOriginMode);\r\n    heightOriginDiv.style.display = \"block\";\r\n    heightOriginDiv.style.textAlign = \"left\";\r\n    settingsDiv.appendChild(heightOriginDiv);\r\n\r\n    const exaggerationDiv = document.createElement(\"div\");\r\n    const exaggerationLabel = document.createElement(\"label\");\r\n    exaggerationLabel.style.display = \"inline\";\r\n    exaggerationLabel.htmlFor = \"ts_viewToolPickRadiusInches\";\r\n    exaggerationLabel.innerText = \"Exaggeration: \";\r\n    exaggerationDiv.appendChild(exaggerationLabel);\r\n\r\n    const exaggeration = createNumericInput({\r\n      parent: exaggerationDiv,\r\n      value: getTerrainSettings(this._vp.view).exaggeration,\r\n      handler: (value) => updateTerrainSettings({ exaggeration: value }),\r\n    }, true);\r\n\r\n    exaggerationDiv.style.display = \"block\";\r\n    exaggerationDiv.style.textAlign = \"left\";\r\n    settingsDiv.appendChild(exaggerationDiv);\r\n\r\n    const bingCheckbox = this.addCheckbox(\"Use Bing elevation\",\r\n      (enabled: boolean) => updateTerrainSettings({ providerName: enabled ? \"DtaBingTerrain\" : \"CesiumWorldTerrain\" }),\r\n      settingsDiv,\r\n    ).checkbox;\r\n\r\n    this._updates.push((view) => {\r\n      const map = view.displayStyle.settings.backgroundMap;\r\n      const terrainSettings = map.terrainSettings;\r\n      heightOriginMode.value = terrainSettings.heightOriginMode.toString();\r\n      heightOrigin.value = terrainSettings.heightOrigin.toString();\r\n      exaggeration.value = terrainSettings.exaggeration.toString();\r\n      bingCheckbox.checked = \"DtaBingTerrain\" === terrainSettings.providerName;\r\n    });\r\n\r\n    return settingsDiv;\r\n  }\r\n\r\n  private addCheckbox(cbLabel: string, handler: (enabled: boolean) => void, parent?: HTMLElement): CheckBox {\r\n    if (undefined === parent)\r\n      parent = this._element;\r\n\r\n    return createCheckBox({\r\n      parent,\r\n      name: cbLabel,\r\n      id: this._nextId,\r\n      handler: (cb) => handler(cb.checked),\r\n    });\r\n  }\r\n\r\n  private update(): void {\r\n    if (!this._updating) {\r\n      this._updating = true;\r\n      for (const update of this._updates)\r\n        update(this._vp.view);\r\n\r\n      this._updating = false;\r\n    }\r\n  }\r\n\r\n  private sync(saveInUndo = false): void {\r\n    this._vp.synchWithView({ noSaveInUndo: !saveInUndo });\r\n  }\r\n\r\n  private get _nextId(): string {\r\n    ++this._id;\r\n    return `viewAttributesPanel_${this._id}`;\r\n  }\r\n\r\n  private get _edgeSettings() { return (this._vp.view as ViewState3d).getDisplayStyle3d().settings.hiddenLineSettings; }\r\n  private overrideEdgeSettings(props: HiddenLine.SettingsProps) {\r\n    (this._vp.view as ViewState3d).getDisplayStyle3d().settings.hiddenLineSettings = this._edgeSettings.override(props);\r\n    this.sync();\r\n  }\r\n\r\n  private addEdgeDisplay(): void {\r\n    const edgeDisplayDiv = document.createElement(\"div\");\r\n    const nestedMenu = createNestedMenu({\r\n      id: this._nextId,\r\n      label: \"Edge Display\",\r\n      parent: this._element,\r\n      expand: ViewAttributes._expandEdgeDisplay,\r\n      // We use a static so the expand/collapse state persists after closing and reopening the drop-down.\r\n      handler: (expanded) => {\r\n        ViewAttributes._expandEdgeDisplay = expanded;\r\n        nestedMenu.label.style.fontWeight = expanded ? \"bold\" : \"500\";\r\n      },\r\n      body: edgeDisplayDiv,\r\n    });\r\n    nestedMenu.label.style.fontWeight = \"500\";\r\n    (nestedMenu.div.firstElementChild!.lastElementChild! as HTMLElement).style.borderColor = \"grey\";\r\n\r\n    const slider: Slider = createSlider({\r\n      id: this._nextId,\r\n      name: \"Transparency Threshold\",\r\n      parent: edgeDisplayDiv,\r\n      min: \"0.0\",\r\n      max: \"1.0\",\r\n      step: \"0.05\",\r\n      value: \"1.0\",\r\n      readout: \"right\",\r\n      handler: (_) => this.overrideEdgeSettings({ transThreshold: parseFloat(slider.slider.value) }),\r\n    });\r\n    slider.div.style.textAlign = \"left\";\r\n\r\n    const smoothEdgesCb = this.addCheckbox(\"Smooth Polyface Edges\", (enabled: boolean) => {\r\n      IModelApp.tileAdmin.edgeOptions.smooth = enabled;\r\n      this._vp.invalidateScene();\r\n      this.sync();\r\n    }, edgeDisplayDiv);\r\n\r\n    const visEdgesCb = this.addCheckbox(\"Visible Edges\", (enabled: boolean) => {\r\n      this._vp.viewFlags = this._vp.viewFlags.with(\"visibleEdges\", enabled);\r\n      hidEdgesCb.checkbox.disabled = !enabled;\r\n      hidEditor.hidden = hidEditor.hidden || !enabled;\r\n      visEditor.hidden = !enabled;\r\n      this.sync();\r\n    }, nestedMenu.body);\r\n\r\n    const visEditor = this.addHiddenLineEditor(false);\r\n    edgeDisplayDiv.appendChild(visEditor);\r\n\r\n    const hidEdgesCb = this.addCheckbox(\"Hidden Edges\", (enabled: boolean) => {\r\n      this._vp.viewFlags = this._vp.viewFlags.with(\"hiddenEdges\", enabled);\r\n      hidEditor.hidden = !enabled;\r\n      this.sync();\r\n    }, edgeDisplayDiv);\r\n\r\n    const hidEditor = this.addHiddenLineEditor(true);\r\n    edgeDisplayDiv.appendChild(hidEditor);\r\n\r\n    this._updates.push((view) => {\r\n      nestedMenu.label.style.fontWeight = ViewAttributes._expandEdgeDisplay ? \"bold\" : \"500\";\r\n      if (view.is2d()) {\r\n        nestedMenu.div.hidden = true;\r\n        return;\r\n      }\r\n\r\n      nestedMenu.div.hidden = false;\r\n      const settings = this._edgeSettings;\r\n      slider.slider.value = slider.readout.innerText = settings.transparencyThreshold.toString();\r\n\r\n      const vf = this._vp.viewFlags;\r\n      visEdgesCb.checkbox.checked = vf.visibleEdges;\r\n      visEditor.hidden = !vf.visibleEdges;\r\n      hidEdgesCb.checkbox.checked = vf.visibleEdges && vf.hiddenEdges;\r\n      smoothEdgesCb.checkbox.checked = IModelApp.tileAdmin.edgeOptions.smooth;\r\n      hidEditor.hidden = !vf.hiddenEdges;\r\n    });\r\n    const hr = document.createElement(\"hr\");\r\n    hr.style.borderColor = \"grey\";\r\n    edgeDisplayDiv.appendChild(hr);\r\n  }\r\n\r\n  private addHiddenLineEditor(forHiddenEdges: boolean): HTMLDivElement {\r\n    const style = this._vp.view.is3d() ? this._edgeSettings : HiddenLine.Settings.defaults;\r\n    const settings = forHiddenEdges ? style.hidden : style.visible;\r\n    const div = document.createElement(\"div\");\r\n    div.style.paddingLeft = \"10px\";\r\n    div.hidden = forHiddenEdges ? !this._vp.view.viewFlags.hiddenEdges : !this._vp.view.viewFlags.visibleEdges;\r\n\r\n    const getSettings = () => forHiddenEdges ? this._edgeSettings.hidden : this._edgeSettings.visible;\r\n    const overrideSettings = (newSettings: HiddenLine.Style) => this.overrideEdgeSettings(forHiddenEdges ? { hidden: newSettings.toJSON() } : { visible: newSettings.toJSON() });\r\n\r\n    // Color override (visible only)\r\n    let colorCb: HTMLInputElement | undefined;\r\n    let colorInput: HTMLInputElement | undefined;\r\n    if (!forHiddenEdges) {\r\n      const colorDiv = document.createElement(\"div\");\r\n      div.appendChild(colorDiv);\r\n\r\n      colorCb = document.createElement(\"input\");\r\n      colorCb.type = \"checkbox\";\r\n      colorCb.id = this._nextId;\r\n      colorCb.checked = settings.ovrColor;\r\n      colorDiv.appendChild(colorCb);\r\n\r\n      const color = undefined !== settings.color ? settings.color.toHexString() : \"#ffffff\";\r\n      colorInput = createColorInput({\r\n        parent: colorDiv,\r\n        id: this._nextId,\r\n        label: \"Color\",\r\n        value: color,\r\n        display: \"inline\",\r\n        disabled: !settings.ovrColor,\r\n        handler: (value: string) => overrideSettings(getSettings().overrideColor(ColorDef.create(value))),\r\n      }).input;\r\n\r\n      colorCb.addEventListener(\"click\", () => overrideSettings(getSettings().overrideColor(colorCb!.checked ? ColorDef.create(colorInput!.value) : undefined)));\r\n    }\r\n\r\n    // Width override\r\n    const widthDiv = document.createElement(\"div\");\r\n    div.appendChild(widthDiv);\r\n\r\n    const widthCb = document.createElement(\"input\");\r\n    widthCb.type = \"checkbox\";\r\n    widthCb.id = this._nextId;\r\n    widthCb.checked = undefined !== settings.width;\r\n    widthDiv.appendChild(widthCb);\r\n\r\n    const widthLabel = document.createElement(\"label\");\r\n    widthLabel.htmlFor = widthCb.id;\r\n    widthLabel.innerText = \"Weight \";\r\n    widthDiv.appendChild(widthLabel);\r\n\r\n    const width = createNumericInput({\r\n      parent: widthDiv,\r\n      value: undefined !== settings.width ? settings.width : 1,\r\n      disabled: undefined === settings.width,\r\n      min: 1,\r\n      max: 31,\r\n      step: 1,\r\n      handler: (value) => overrideSettings(getSettings().overrideWidth(value)),\r\n    });\r\n    widthDiv.appendChild(width);\r\n    widthCb.addEventListener(\"click\", () => overrideSettings(getSettings().overrideWidth(widthCb.checked ? parseInt(width.value, 10) : undefined)));\r\n\r\n    // Line style override\r\n    const patternCb = Settings.addStyle(div, settings.pattern ? settings.pattern : LinePixels.Invalid, (select) => {\r\n      overrideSettings(getSettings().overridePattern(parseInt(select.value, 10)));\r\n    });\r\n\r\n    // Synchronization\r\n    this._updates.push((view: ViewState) => {\r\n      if (view.is2d()) {\r\n        div.hidden = true;\r\n        return;\r\n      }\r\n\r\n      const curStyle = getSettings();\r\n      if (undefined !== colorCb && undefined !== colorInput) {\r\n        colorCb.checked = undefined !== curStyle.color;\r\n        colorInput.disabled = !colorCb.checked;\r\n        if (undefined !== curStyle.color)\r\n          colorInput.value = curStyle.color.toHexString();\r\n      }\r\n\r\n      widthCb.checked = undefined !== curStyle.width;\r\n      width.disabled = !widthCb.checked;\r\n      if (undefined !== curStyle.width)\r\n        width.value = curStyle.width.toString();\r\n\r\n      const pix = undefined !== curStyle.pattern ? curStyle.pattern : LinePixels.Invalid;\r\n      patternCb.select.value = pix.toString();\r\n    });\r\n\r\n    return div;\r\n  }\r\n}\r\n\r\nexport class ViewAttributesPanel extends ToolBarDropDown {\r\n  private readonly _vp: Viewport;\r\n  private readonly _parent: HTMLElement;\r\n  private _attributes?: ViewAttributes;\r\n  private _displayStylePickerInput?: ComboBox;\r\n  private _disableEdges: boolean;\r\n\r\n  public constructor(vp: Viewport, parent: HTMLElement, disableEdges: boolean) {\r\n    super();\r\n    this._vp = vp;\r\n    this._parent = parent;\r\n    this._disableEdges = disableEdges;\r\n    this.open();\r\n  }\r\n\r\n  public async populate(): Promise<void> {\r\n    if (undefined !== this._displayStylePickerInput)\r\n      this._displayStylePickerInput.select.disabled = true;\r\n\r\n    const view = this._vp.view;\r\n    const is3d = view.is3d();\r\n    const sqlName: string = is3d ? DisplayStyle3dState.classFullName : DisplayStyle2dState.classFullName;\r\n    const displayStyleProps = await this._vp.view.iModel.elements.queryProps({ from: sqlName, where: \"IsPrivate=FALSE\" });\r\n    const displayStyles = new Map<Id64String, DisplayStyleState>();\r\n    const styleEntries = [];\r\n    const promises: Array<Promise<void>> = [];\r\n    for (const displayStyleProp of displayStyleProps) {\r\n      styleEntries.push({ name: displayStyleProp.code.value!, value: displayStyleProp.id });\r\n      let displayStyle: DisplayStyleState;\r\n      if (is3d)\r\n        displayStyle = new DisplayStyle3dState(displayStyleProp, view.iModel);\r\n      else\r\n        displayStyle = new DisplayStyle2dState(displayStyleProp, view.iModel);\r\n\r\n      displayStyles.set(displayStyleProp.id!, displayStyle);\r\n    }\r\n\r\n    await Promise.all(promises);\r\n\r\n    this._displayStylePickerInput = createComboBox({\r\n      name: \"Display Style: \",\r\n      id: \"DisplayStyles\",\r\n      value: this._vp.view.displayStyle.id,\r\n      handler: async (select) => {\r\n        const style = displayStyles.get(select.value)!;\r\n        await style.load();\r\n        this._vp.displayStyle = style;\r\n        this._vp.invalidateScene();\r\n      },\r\n      entries: styleEntries,\r\n    });\r\n\r\n    this._displayStylePickerInput.select.disabled = false;\r\n    if (undefined !== this._attributes)\r\n      this._attributes.displayStylePickerInput = this._displayStylePickerInput;\r\n  }\r\n  public override get onViewChanged(): Promise<void> {\r\n    return this.populate();\r\n  }\r\n\r\n  public get isOpen() { return undefined !== this._attributes; }\r\n  protected _open(): void {\r\n    this._attributes = new ViewAttributes(this._vp, this._parent, this._disableEdges);\r\n    const loadingComboBox = createComboBox({\r\n      name: \"Display Style: \",\r\n      id: \"DisplayStyles\",\r\n      entries: [{ name: \"Now Loading...\", value: undefined }],\r\n    });\r\n    if (undefined === this._displayStylePickerInput)\r\n      this._attributes.displayStylePickerInput = loadingComboBox;\r\n    else\r\n      this._attributes.displayStylePickerInput = this._displayStylePickerInput;\r\n  }\r\n\r\n  protected _close(): void {\r\n    if (undefined !== this._attributes) {\r\n      this._attributes.dispose();\r\n      this._attributes = undefined;\r\n    }\r\n  }\r\n}\r\n",
      "start": 1693508124594,
      "end": 1693508124719,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport {\n  createCheckBox,\n  createColorInput,\n  createComboBox,\n  createNestedMenu,\n  createNumericInput,\n  createSlider\n} from \"@itwin/frontend-devtools\";\nimport {\n  BackgroundMapType,\n  BaseMapLayerSettings,\n  ColorDef,\n  GlobeMode,\n  HiddenLine,\n  LinePixels,\n  MonochromeMode,\n  RenderMode,\n  ThematicDisplayMode,\n  ThematicGradientColorScheme,\n  ThematicGradientMode\n} from \"@itwin/core-common\";\nimport { DisplayStyle2dState, DisplayStyle3dState, IModelApp } from \"@itwin/core-frontend\";\nimport { AmbientOcclusionEditor } from \"./AmbientOcclusion\";\nimport { EnvironmentEditor } from \"./EnvironmentEditor\";\nimport { Settings } from \"./FeatureOverrides\";\nimport { ThematicDisplayEditor } from \"./ThematicDisplay\";\nimport { ToolBarDropDown } from \"./ToolBar\";\nconst renderingStyleViewFlags = {\n  noCameraLights: false,\n  noSourceLights: false,\n  noSolarLight: false,\n  visEdges: false,\n  hidEdges: false,\n  shadows: false,\n  monochrome: false,\n  ambientOcclusion: false,\n  thematicDisplay: false,\n  renderMode: RenderMode.SmoothShade\n};\nconst renderingStyles = [{\n  name: \"None\"\n}, {\n  name: \"Default\",\n  environment: {\n    sky: {\n      display: true,\n      groundColor: 8228728,\n      zenithColor: 16741686,\n      nadirColor: 3880,\n      skyColor: 16764303\n    },\n    ground: {\n      display: false,\n      elevation: -0.01,\n      aboveColor: 32768,\n      belowColor: 1262987\n    }\n  },\n  viewflags: renderingStyleViewFlags,\n  lights: {\n    solar: { direction: [-0.9833878378071199, -0.18098510351728977, 0.013883542698953828] }\n  }\n}, {\n  name: \"Ambient\",\n  backgroundColor: 10921638,\n  environment: {\n    sky: { display: false },\n    ground: { display: false }\n  },\n  viewflags: { ...renderingStyleViewFlags, ambientOcclusion: true },\n  lights: {\n    solar: { intensity: 0 },\n    portrait: { intensity: 0 },\n    ambient: { intensity: 0.55 },\n    fresnel: { intensity: 0.8, invert: true },\n    specularIntensity: 0\n  }\n}, {\n  name: \"Illustration\",\n  environment: {},\n  backgroundColor: 10921638,\n  viewflags: { ...renderingStyleViewFlags, noCameraLights: true, noSourceLights: true, noSolarLight: true, visEdges: true },\n  lights: {\n    solar: { direction: [-0.9833878378071199, -0.18098510351728977, 0.013883542698953828] }\n  },\n  hline: {\n    visible: { ovrColor: true, color: 0, pattern: 0, width: 1 },\n    hidden: { ovrColor: false, color: 16777215, pattern: 3435973836, width: 0 },\n    transThreshold: 1\n  }\n}, {\n  name: \"Sun-dappled\",\n  environment: {\n    sky: {\n      display: true,\n      groundColor: 8228728,\n      zenithColor: 16741686,\n      nadirColor: 3880,\n      skyColor: 16764303\n    },\n    ground: {\n      display: false,\n      elevation: -0.01,\n      aboveColor: 32768,\n      belowColor: 1262987\n    }\n  },\n  viewflags: { ...renderingStyleViewFlags, shadows: true },\n  lights: {\n    solar: { direction: [0.9391245716329828, 0.10165764029437066, -0.3281931795832247] },\n    hemisphere: { intensity: 0.2 },\n    portrait: { intensity: 0 }\n  }\n}, {\n  name: \"Comic Book\",\n  environment: {\n    sky: { display: true, groundColor: 8228728, zenithColor: 16741686, nadirColor: 3880, skyColor: 16764303 },\n    ground: { display: false, elevation: -0.01, aboveColor: 32768, belowColor: 1262987 }\n  },\n  viewflags: { ...renderingStyleViewFlags, noWeight: false, visEdges: true },\n  hline: {\n    visible: { ovrColor: true, color: 0, pattern: 0, width: 3 },\n    transThreshold: 1\n  },\n  lights: {\n    solar: { direction: [0.7623, 0.0505, -0.6453], intensity: 1.95, alwaysEnabled: true },\n    ambient: { intensity: 0.2 },\n    portrait: { intensity: 0 },\n    specularIntensity: 0,\n    numCels: 2\n  }\n}, {\n  name: \"Outdoorsy\",\n  environment: {\n    sky: { display: true, groundColor: 8228728, zenithColor: 16741686, nadirColor: 3880, skyColor: 16764303 },\n    ground: { display: false, elevation: -0.01, aboveColor: 32768, belowColor: 1262987 }\n  },\n  viewflags: renderingStyleViewFlags,\n  lights: {\n    solar: { direction: [-0.9833878378071199, -0.18098510351728977, 0.013883542698953828], intensity: 1.05 },\n    ambient: { intensity: 0.25 },\n    hemisphere: {\n      upperColor: { r: 206, g: 233, b: 255 },\n      intensity: 0.5\n    },\n    portrait: { intensity: 0 }\n  }\n}, {\n  name: \"Schematic\",\n  environment: {},\n  backgroundColor: 16777215,\n  viewflags: { ...renderingStyleViewFlags, visEdges: true },\n  lights: {\n    solar: { direction: [0, -0.6178171353958787, -0.7863218089378106], intensity: 1.95, alwaysEnabled: true },\n    ambient: { intensity: 0.65 },\n    portrait: { intensity: 0 },\n    specularIntensity: 0\n  },\n  hline: {\n    visible: { ovrColor: true, color: 0, pattern: 0, width: 1 },\n    hidden: { ovrColor: false, color: 16777215, pattern: 3435973836, width: 0 },\n    transThreshold: 1\n  }\n}, {\n  name: \"Soft\",\n  environment: {\n    sky: { display: true, groundColor: 8228728, zenithColor: 16741686, nadirColor: 3880, skyColor: 16764303 },\n    ground: { display: false, elevation: -0.01, aboveColor: 32768, belowColor: 1262987 }\n  },\n  viewflags: { ...renderingStyleViewFlags, ambientOcclusion: true },\n  lights: {\n    solar: { direction: [-0.9833878378071199, -0.18098510351728977, 0.013883542698953828], intensity: 0 },\n    ambient: { intensity: 0.75 },\n    hemisphere: { intensity: 0.3 },\n    portrait: { intensity: 0.5 },\n    specularIntensity: 0.4\n  },\n  ao: { bias: 0.25, zLengthCap: 25e-4, maxDistance: 100, intensity: 1, texelStepSize: 1, blurDelta: 1.5, blurSigma: 2, blurTexelStepSize: 1 }\n}, {\n  name: \"Moonlit\",\n  environment: {\n    sky: { display: true, groundColor: 2435876, zenithColor: 0, nadirColor: 3880, skyColor: 3481088 },\n    ground: { display: false, elevation: -0.01, aboveColor: 32768, belowColor: 1262987 }\n  },\n  viewflags: { ...renderingStyleViewFlags, visEdges: true },\n  lights: {\n    solar: { direction: [-0.9833878378071199, -0.18098510351728977, 0.013883542698953828], intensity: 3, alwaysEnabled: true },\n    ambient: { intensity: 0.05 },\n    hemisphere: { lowerColor: { r: 83, g: 100, b: 87 } },\n    portrait: { intensity: 0 },\n    specularIntensity: 0\n  },\n  monochromeMode: 0,\n  hline: {\n    visible: { ovrColor: true, color: 0, pattern: -1, width: 0 },\n    hidden: { ovrColor: false, color: 16777215, pattern: 3435973836, width: 0 },\n    transThreshold: 1\n  },\n  monochromeColor: 7897479\n}, {\n  name: \"Thematic: Height\",\n  viewflags: { ...renderingStyleViewFlags, thematicDisplay: true },\n  thematic: {\n    axis: [0, 0, 1],\n    gradientSettings: { mode: ThematicGradientMode.SteppedWithDelimiter }\n  },\n  lights: {}\n}, {\n  name: \"Thematic: Slope\",\n  viewflags: { ...renderingStyleViewFlags, thematicDisplay: true },\n  thematic: {\n    displayMode: ThematicDisplayMode.Slope,\n    range: [0, 90],\n    axis: [0, 0, 1],\n    gradientSettings: {\n      mode: ThematicGradientMode.Smooth,\n      colorScheme: ThematicGradientColorScheme.Custom,\n      customKeys: [\n        { value: 0, color: 4210752 },\n        { value: 1, color: 16777215 }\n      ]\n    }\n  },\n  lights: {}\n}, {\n  name: \"Gloss\",\n  environment: {\n    sky: { display: true, groundColor: 8228728, zenithColor: 16741686, nadirColor: 3880, skyColor: 16764303 },\n    ground: { display: false, elevation: -0.01, aboveColor: 32768, belowColor: 1262987 }\n  },\n  viewflags: { ...renderingStyleViewFlags, visEdges: true },\n  lights: {\n    solar: { direction: [-0.9833878378071199, -0.18098510351728977, 0.013883542698953828] },\n    specularIntensity: 4.15\n  },\n  hline: {\n    visible: { ovrColor: true, color: 8026756, pattern: 0, width: 1 },\n    hidden: { ovrColor: false, color: 16777215, pattern: 3435973836, width: 0 },\n    transThreshold: 1\n  }\n}, {\n  name: \"Atmosphere\",\n  environment: {\n    sky: {\n      display: true\n    },\n    ground: {\n      display: true\n    },\n    atmosphere: {\n      display: true\n    }\n  },\n  viewflags: renderingStyleViewFlags\n}];\nconst _ViewAttributes = class _ViewAttributes {\n  constructor(vp, parent, disableEdges = false) {\n    this._updates = [];\n    this._updating = false;\n    this._id = 0;\n    this._vp = vp;\n    this._parent = parent;\n    this._element = document.createElement(\"div\");\n    this._element.className = \"debugPanel\";\n    this._removeMe = vp.onViewChanged.addListener((_vp) => this.update());\n    this.addDisplayStylePicker();\n    this.addRenderMode();\n    this.addRenderingStyles();\n    const hr = document.createElement(\"hr\");\n    hr.style.borderColor = \"grey\";\n    this._element.appendChild(hr);\n    const flagsDiv = document.createElement(\"div\");\n    const vfMenu = createNestedMenu({\n      id: this._nextId,\n      label: \"View Flags\",\n      parent: this._element,\n      // We use a static so the expand/collapse state persists after closing and reopening the drop-down.\n      expand: _ViewAttributes._expandViewFlags,\n      handler: (expanded) => {\n        _ViewAttributes._expandViewFlags = expanded;\n        vfMenu.label.style.fontWeight = expanded ? \"bold\" : \"500\";\n      },\n      body: flagsDiv\n    });\n    vfMenu.div.firstElementChild.lastElementChild.style.borderColor = \"grey\";\n    this._updates.push((_view) => {\n      vfMenu.label.style.fontWeight = _ViewAttributes._expandViewFlags ? \"bold\" : \"500\";\n    });\n    this._element.appendChild(flagsDiv);\n    this.addViewFlagAttribute(flagsDiv, \"ACS Triad\", \"acsTriad\");\n    this.addViewFlagAttribute(flagsDiv, \"Grid\", \"grid\");\n    this.addViewFlagAttribute(flagsDiv, \"Fill\", \"fill\");\n    this.addViewFlagAttribute(flagsDiv, \"Materials\", \"materials\");\n    this.addViewFlagAttribute(flagsDiv, \"Textures\", \"textures\");\n    this.addViewFlagAttribute(flagsDiv, \"Constructions\", \"constructions\");\n    this.addViewFlagAttribute(flagsDiv, \"Transparency\", \"transparency\");\n    this.addViewFlagAttribute(flagsDiv, \"Line Weights\", \"weights\");\n    this.addViewFlagAttribute(flagsDiv, \"Line Styles\", \"styles\");\n    this.addViewFlagAttribute(flagsDiv, \"Clip Volume\", \"clipVolume\", true);\n    this.addViewFlagAttribute(flagsDiv, \"Force Surface Discard\", \"forceSurfaceDiscard\", true);\n    this.addViewFlagAttribute(flagsDiv, \"White-on-white Reversal\", \"whiteOnWhiteReversal\");\n    this.addCameraToggle(flagsDiv);\n    this.addMonochrome(flagsDiv);\n    const hr2 = document.createElement(\"hr\");\n    hr2.style.borderColor = \"grey\";\n    flagsDiv.appendChild(hr2);\n    this.addEnvironmentEditor();\n    this.addBackgroundMapOrTerrain();\n    if (!disableEdges)\n      this.addEdgeDisplay();\n    this.addAmbientOcclusion();\n    this.addThematicDisplay();\n    this.update();\n    parent.appendChild(this._element);\n  }\n  set displayStylePickerInput(newComboBox) {\n    while (this._displayStylePickerDiv.hasChildNodes())\n      this._displayStylePickerDiv.removeChild(this._displayStylePickerDiv.firstChild);\n    this._displayStylePickerDiv.appendChild(newComboBox.div);\n  }\n  dispose() {\n    this._removeMe();\n    this._parent.removeChild(this._element);\n  }\n  addDisplayStylePicker() {\n    this._displayStylePickerDiv = document.createElement(\"div\");\n    this._element.appendChild(this._displayStylePickerDiv);\n  }\n  addEnvironmentEditor() {\n    const env = new EnvironmentEditor(this._vp, this._element);\n    this._updates.push((view) => env.update(view));\n  }\n  addViewFlagAttribute(parent, label, flag, only3d = false) {\n    const elems = this.addCheckbox(label, (enabled) => {\n      this._vp.viewFlags = this._vp.viewFlags.with(flag, enabled);\n      this.sync();\n    }, parent);\n    const update = (view) => {\n      const visible = !only3d || view.is3d();\n      elems.div.style.display = visible ? \"\" : \"none\";\n      if (visible)\n        elems.checkbox.checked = view.viewFlags[flag];\n    };\n    this._updates.push(update);\n  }\n  addCameraToggle(parent) {\n    const elems = this.addCheckbox(\"Camera\", (enabled) => {\n      if (enabled)\n        this._vp.turnCameraOn();\n      else\n        this._vp.view.turnCameraOff();\n      this.sync(true);\n    }, parent);\n    const update = (view) => {\n      const visible = view.is3d() && view.allow3dManipulations() && view.supportsCamera();\n      elems.div.style.display = visible ? \"block\" : \"none\";\n      if (visible)\n        elems.checkbox.checked = this._vp.isCameraOn;\n    };\n    this._updates.push(update);\n  }\n  addMonochrome(parent) {\n    const colorInput = createColorInput({\n      label: \"Color\",\n      id: this._nextId,\n      parent,\n      display: \"inline\",\n      value: this._vp.view.displayStyle.settings.monochromeColor.toHexString(),\n      handler: (color) => {\n        this._vp.view.displayStyle.settings.monochromeColor = ColorDef.create(color);\n        this.sync();\n      }\n    });\n    colorInput.div.style.cssFloat = \"right\";\n    const scaledCb = this.addCheckbox(\"Scaled\", (enabled) => {\n      this._vp.displayStyle.settings.monochromeMode = enabled ? MonochromeMode.Scaled : MonochromeMode.Flat;\n      this.sync();\n    }, parent);\n    scaledCb.div.style.cssFloat = \"right\";\n    scaledCb.div.style.marginRight = \"0.67em\";\n    this.addViewFlagAttribute(parent, \"Monochrome\", \"monochrome\");\n    colorInput.div.style.marginTop = \"-4px\";\n    this._updates.push((view) => {\n      if (view.viewFlags.monochrome) {\n        colorInput.div.style.display = scaledCb.div.style.display = \"\";\n        colorInput.input.value = view.displayStyle.settings.monochromeColor.toHexString();\n        scaledCb.checkbox.checked = MonochromeMode.Scaled === view.displayStyle.settings.monochromeMode;\n      } else {\n        colorInput.div.style.display = scaledCb.div.style.display = \"none\";\n      }\n    });\n  }\n  addRenderMode() {\n    const div = document.createElement(\"div\");\n    const entries = [\n      { name: \"Wireframe\", value: RenderMode.Wireframe },\n      { name: \"Solid Fill\", value: RenderMode.SolidFill },\n      { name: \"Hidden Line\", value: RenderMode.HiddenLine },\n      { name: \"Smooth Shade\", value: RenderMode.SmoothShade }\n    ];\n    const select = createComboBox({\n      parent: div,\n      name: \"Render Mode: \",\n      entries,\n      id: \"viewAttr_renderMode\",\n      value: this._vp.viewFlags.renderMode,\n      handler: (thing) => {\n        this._vp.viewFlags = this._vp.viewFlags.withRenderMode(Number.parseInt(thing.value, 10));\n        this.sync();\n      }\n    }).select;\n    this._updates.push((view) => {\n      const visible = view.is3d();\n      div.style.display = visible ? \"block\" : \"none\";\n      if (visible)\n        select.value = view.viewFlags.renderMode.toString();\n    });\n    this._element.appendChild(div);\n  }\n  addRenderingStyles() {\n    const div = document.createElement(\"div\");\n    const entries = renderingStyles.map((renderingStyle, index) => ({ name: renderingStyle.name, value: index }));\n    createComboBox({\n      parent: div,\n      name: \"Rendering Style: \",\n      entries,\n      id: \"viewAttr_renderingStyle\",\n      value: 0,\n      handler: (cbx) => {\n        this.applyRenderingStyle(renderingStyles[parseInt(cbx.value, 10)]);\n      }\n    });\n    this._updates.push((view) => {\n      div.style.display = view.is3d() ? \"\" : \"none\";\n    });\n    this._element.appendChild(div);\n  }\n  applyRenderingStyle(style) {\n    if (style.name !== \"None\")\n      this._vp.overrideDisplayStyle(style);\n  }\n  addAmbientOcclusion() {\n    const ao = new AmbientOcclusionEditor(this._vp, this._element);\n    this._updates.push((view) => ao.update(view));\n  }\n  addThematicDisplay() {\n    const thematic = new ThematicDisplayEditor(this._vp, this._element);\n    this._updates.push((view) => thematic.update(view));\n  }\n  getBackgroundMap(view) {\n    return view.displayStyle.settings.backgroundMap;\n  }\n  addBackgroundMapOrTerrain() {\n    const isMapSupported = (view) => view.is3d() && view.iModel.isGeoLocated;\n    const div = document.createElement(\"div\");\n    const backgroundSettingsDiv = document.createElement(\"div\");\n    const showOrHideSettings = (show) => {\n      const display = show ? \"block\" : \"none\";\n      backgroundSettingsDiv.style.display = display;\n    };\n    const enableMap = (enabled) => {\n      this._vp.viewFlags = this._vp.viewFlags.with(\"backgroundMap\", enabled);\n      backgroundSettingsDiv.style.display = enabled ? \"block\" : \"none\";\n      showOrHideSettings(enabled);\n      this.sync();\n    };\n    const checkboxInterface = this.addCheckbox(\"Background Map\", enableMap, div);\n    const checkbox = checkboxInterface.checkbox;\n    const checkboxLabel = checkboxInterface.label;\n    const imageryProviders = createComboBox({\n      parent: backgroundSettingsDiv,\n      name: \"Imagery: \",\n      id: \"viewAttr_MapProvider\",\n      entries: [\n        { name: \"Bing\", value: \"BingProvider\" },\n        { name: \"MapBox\", value: \"MapBoxProvider\" }\n      ],\n      handler: (select) => this.updateBackgroundMapProvider({ name: select.value })\n    }).select;\n    const types = createComboBox({\n      parent: backgroundSettingsDiv,\n      name: \"Type: \",\n      id: \"viewAttr_mapType\",\n      entries: [\n        { name: \"Street\", value: BackgroundMapType.Street },\n        { name: \"Aerial\", value: BackgroundMapType.Aerial },\n        { name: \"Hybrid\", value: BackgroundMapType.Hybrid }\n      ],\n      handler: (select) => this.updateBackgroundMapProvider({ type: Number.parseInt(select.value, 10) })\n    }).select;\n    const globeModes = createComboBox({\n      parent: backgroundSettingsDiv,\n      name: \"Globe: \",\n      id: \"viewAttr_globeMode\",\n      entries: [\n        { name: \"Ellipsoid\", value: GlobeMode.Ellipsoid },\n        { name: \"Plane\", value: GlobeMode.Plane }\n      ],\n      handler: (select) => this.updateBackgroundMap({ globeMode: Number.parseInt(select.value, 10) })\n    }).select;\n    const terrainSettings = this.addTerrainSettings();\n    const mapSettings = this.addMapSettings();\n    const enableTerrain = (enable) => {\n      this.updateBackgroundMap({ applyTerrain: enable });\n      terrainSettings.style.display = enable ? \"block\" : \"none\";\n      mapSettings.style.display = enable ? \"none\" : \"block\";\n      this.sync();\n    };\n    const terrainCheckbox = this.addCheckbox(\"Terrain\", enableTerrain, backgroundSettingsDiv).checkbox;\n    const transCheckbox = this.addCheckbox(\"Transparency\", (enabled) => this.updateBackgroundMap({ transparency: enabled ? 0.5 : false }), backgroundSettingsDiv).checkbox;\n    const locatable = this.addCheckbox(\"Locatable\", (enabled) => this.updateBackgroundMap({ nonLocatable: !enabled }), backgroundSettingsDiv).checkbox;\n    backgroundSettingsDiv.appendChild(document.createElement(\"hr\"));\n    backgroundSettingsDiv.appendChild(mapSettings);\n    backgroundSettingsDiv.appendChild(terrainSettings);\n    this._updates.push((view) => {\n      const visible = isMapSupported(view);\n      div.style.display = visible ? \"block\" : \"none\";\n      if (!visible)\n        return;\n      checkbox.checked = view.viewFlags.backgroundMap;\n      checkboxLabel.style.fontWeight = checkbox.checked ? \"bold\" : \"500\";\n      showOrHideSettings(checkbox.checked);\n      const baseLayer = view.displayStyle.settings.mapImagery.backgroundBase;\n      if (baseLayer instanceof BaseMapLayerSettings && baseLayer.provider) {\n        imageryProviders.value = baseLayer.provider.name;\n        types.value = baseLayer.provider.type.toString();\n      }\n      const map = this.getBackgroundMap(view);\n      terrainCheckbox.checked = map.applyTerrain;\n      transCheckbox.checked = false !== map.transparency;\n      locatable.checked = map.locatable;\n      globeModes.value = map.globeMode.toString();\n      if (map.applyTerrain !== terrainCheckbox.checked)\n        enableTerrain(terrainCheckbox.checked);\n    });\n    div.appendChild(backgroundSettingsDiv);\n    const hr = document.createElement(\"hr\");\n    hr.style.borderColor = \"grey\";\n    div.appendChild(hr);\n    this._element.appendChild(div);\n  }\n  addMapSettings() {\n    const mapSettingsDiv = document.createElement(\"div\");\n    const groundBiasDiv = document.createElement(\"div\");\n    const groundBiasLabel = document.createElement(\"label\");\n    groundBiasLabel.style.display = \"inline\";\n    groundBiasLabel.htmlFor = \"ts_viewToolPickRadiusInches\";\n    groundBiasLabel.innerText = \"Ground Bias: \";\n    groundBiasDiv.appendChild(groundBiasLabel);\n    const groundBias = createNumericInput({\n      parent: groundBiasDiv,\n      value: this.getBackgroundMap(this._vp.view).groundBias,\n      handler: (value) => this.updateBackgroundMap({ groundBias: value })\n    }, true);\n    groundBiasDiv.style.display = \"block\";\n    groundBiasDiv.style.textAlign = \"left\";\n    mapSettingsDiv.appendChild(groundBiasDiv);\n    const depthCheckbox = this.addCheckbox(\"Depth\", (enabled) => this.updateBackgroundMap({ useDepthBuffer: enabled }), mapSettingsDiv).checkbox;\n    this._updates.push((view) => {\n      const map = this.getBackgroundMap(view);\n      groundBias.value = map.groundBias.toString();\n      depthCheckbox.checked = map.useDepthBuffer;\n    });\n    return mapSettingsDiv;\n  }\n  updateBackgroundMap(props) {\n    this._vp.changeBackgroundMapProps(props);\n    this.sync();\n  }\n  updateBackgroundMapProvider(props) {\n    this._vp.displayStyle.changeBackgroundMapProvider(props);\n    this.sync();\n  }\n  addTerrainSettings() {\n    const getTerrainSettings = (view) => view.displayStyle.settings.backgroundMap.terrainSettings;\n    const updateTerrainSettings = (props) => this._vp.changeBackgroundMapProps({ terrainSettings: props });\n    const settingsDiv = document.createElement(\"div\");\n    const heightOriginMode = createComboBox({\n      name: \"Height Origin Mode: \",\n      id: \"viewAttr_TerrainHeightOrigin\",\n      entries: [\n        { name: \"GPS (Geodetic/Ellipsoid)\", value: \"0\" },\n        { name: \"Sea Level (Geoid)\", value: \"1\" },\n        { name: \"Ground\", value: \"2\" }\n      ],\n      handler: (select) => {\n        updateTerrainSettings({ heightOriginMode: parseInt(select.value, 10) });\n      }\n    }).select;\n    const heightOriginDiv = document.createElement(\"div\");\n    const heightOriginLabel = document.createElement(\"label\");\n    heightOriginLabel.style.display = \"inline\";\n    heightOriginLabel.htmlFor = \"ts_viewToolPickRadiusInches\";\n    heightOriginLabel.innerText = \"Model Height: \";\n    heightOriginDiv.appendChild(heightOriginLabel);\n    const heightOrigin = createNumericInput({\n      parent: heightOriginDiv,\n      value: getTerrainSettings(this._vp.view).heightOrigin,\n      handler: (value) => updateTerrainSettings({ heightOrigin: value })\n    }, true);\n    heightOriginDiv.appendChild(heightOriginMode);\n    heightOriginDiv.style.display = \"block\";\n    heightOriginDiv.style.textAlign = \"left\";\n    settingsDiv.appendChild(heightOriginDiv);\n    const exaggerationDiv = document.createElement(\"div\");\n    const exaggerationLabel = document.createElement(\"label\");\n    exaggerationLabel.style.display = \"inline\";\n    exaggerationLabel.htmlFor = \"ts_viewToolPickRadiusInches\";\n    exaggerationLabel.innerText = \"Exaggeration: \";\n    exaggerationDiv.appendChild(exaggerationLabel);\n    const exaggeration = createNumericInput({\n      parent: exaggerationDiv,\n      value: getTerrainSettings(this._vp.view).exaggeration,\n      handler: (value) => updateTerrainSettings({ exaggeration: value })\n    }, true);\n    exaggerationDiv.style.display = \"block\";\n    exaggerationDiv.style.textAlign = \"left\";\n    settingsDiv.appendChild(exaggerationDiv);\n    const bingCheckbox = this.addCheckbox(\n      \"Use Bing elevation\",\n      (enabled) => updateTerrainSettings({ providerName: enabled ? \"DtaBingTerrain\" : \"CesiumWorldTerrain\" }),\n      settingsDiv\n    ).checkbox;\n    this._updates.push((view) => {\n      const map = view.displayStyle.settings.backgroundMap;\n      const terrainSettings = map.terrainSettings;\n      heightOriginMode.value = terrainSettings.heightOriginMode.toString();\n      heightOrigin.value = terrainSettings.heightOrigin.toString();\n      exaggeration.value = terrainSettings.exaggeration.toString();\n      bingCheckbox.checked = \"DtaBingTerrain\" === terrainSettings.providerName;\n    });\n    return settingsDiv;\n  }\n  addCheckbox(cbLabel, handler, parent) {\n    if (void 0 === parent)\n      parent = this._element;\n    return createCheckBox({\n      parent,\n      name: cbLabel,\n      id: this._nextId,\n      handler: (cb) => handler(cb.checked)\n    });\n  }\n  update() {\n    if (!this._updating) {\n      this._updating = true;\n      for (const update of this._updates)\n        update(this._vp.view);\n      this._updating = false;\n    }\n  }\n  sync(saveInUndo = false) {\n    this._vp.synchWithView({ noSaveInUndo: !saveInUndo });\n  }\n  get _nextId() {\n    ++this._id;\n    return `viewAttributesPanel_${this._id}`;\n  }\n  get _edgeSettings() {\n    return this._vp.view.getDisplayStyle3d().settings.hiddenLineSettings;\n  }\n  overrideEdgeSettings(props) {\n    this._vp.view.getDisplayStyle3d().settings.hiddenLineSettings = this._edgeSettings.override(props);\n    this.sync();\n  }\n  addEdgeDisplay() {\n    const edgeDisplayDiv = document.createElement(\"div\");\n    const nestedMenu = createNestedMenu({\n      id: this._nextId,\n      label: \"Edge Display\",\n      parent: this._element,\n      expand: _ViewAttributes._expandEdgeDisplay,\n      // We use a static so the expand/collapse state persists after closing and reopening the drop-down.\n      handler: (expanded) => {\n        _ViewAttributes._expandEdgeDisplay = expanded;\n        nestedMenu.label.style.fontWeight = expanded ? \"bold\" : \"500\";\n      },\n      body: edgeDisplayDiv\n    });\n    nestedMenu.label.style.fontWeight = \"500\";\n    nestedMenu.div.firstElementChild.lastElementChild.style.borderColor = \"grey\";\n    const slider = createSlider({\n      id: this._nextId,\n      name: \"Transparency Threshold\",\n      parent: edgeDisplayDiv,\n      min: \"0.0\",\n      max: \"1.0\",\n      step: \"0.05\",\n      value: \"1.0\",\n      readout: \"right\",\n      handler: (_) => this.overrideEdgeSettings({ transThreshold: parseFloat(slider.slider.value) })\n    });\n    slider.div.style.textAlign = \"left\";\n    const smoothEdgesCb = this.addCheckbox(\"Smooth Polyface Edges\", (enabled) => {\n      IModelApp.tileAdmin.edgeOptions.smooth = enabled;\n      this._vp.invalidateScene();\n      this.sync();\n    }, edgeDisplayDiv);\n    const visEdgesCb = this.addCheckbox(\"Visible Edges\", (enabled) => {\n      this._vp.viewFlags = this._vp.viewFlags.with(\"visibleEdges\", enabled);\n      hidEdgesCb.checkbox.disabled = !enabled;\n      hidEditor.hidden = hidEditor.hidden || !enabled;\n      visEditor.hidden = !enabled;\n      this.sync();\n    }, nestedMenu.body);\n    const visEditor = this.addHiddenLineEditor(false);\n    edgeDisplayDiv.appendChild(visEditor);\n    const hidEdgesCb = this.addCheckbox(\"Hidden Edges\", (enabled) => {\n      this._vp.viewFlags = this._vp.viewFlags.with(\"hiddenEdges\", enabled);\n      hidEditor.hidden = !enabled;\n      this.sync();\n    }, edgeDisplayDiv);\n    const hidEditor = this.addHiddenLineEditor(true);\n    edgeDisplayDiv.appendChild(hidEditor);\n    this._updates.push((view) => {\n      nestedMenu.label.style.fontWeight = _ViewAttributes._expandEdgeDisplay ? \"bold\" : \"500\";\n      if (view.is2d()) {\n        nestedMenu.div.hidden = true;\n        return;\n      }\n      nestedMenu.div.hidden = false;\n      const settings = this._edgeSettings;\n      slider.slider.value = slider.readout.innerText = settings.transparencyThreshold.toString();\n      const vf = this._vp.viewFlags;\n      visEdgesCb.checkbox.checked = vf.visibleEdges;\n      visEditor.hidden = !vf.visibleEdges;\n      hidEdgesCb.checkbox.checked = vf.visibleEdges && vf.hiddenEdges;\n      smoothEdgesCb.checkbox.checked = IModelApp.tileAdmin.edgeOptions.smooth;\n      hidEditor.hidden = !vf.hiddenEdges;\n    });\n    const hr = document.createElement(\"hr\");\n    hr.style.borderColor = \"grey\";\n    edgeDisplayDiv.appendChild(hr);\n  }\n  addHiddenLineEditor(forHiddenEdges) {\n    const style = this._vp.view.is3d() ? this._edgeSettings : HiddenLine.Settings.defaults;\n    const settings = forHiddenEdges ? style.hidden : style.visible;\n    const div = document.createElement(\"div\");\n    div.style.paddingLeft = \"10px\";\n    div.hidden = forHiddenEdges ? !this._vp.view.viewFlags.hiddenEdges : !this._vp.view.viewFlags.visibleEdges;\n    const getSettings = () => forHiddenEdges ? this._edgeSettings.hidden : this._edgeSettings.visible;\n    const overrideSettings = (newSettings) => this.overrideEdgeSettings(forHiddenEdges ? { hidden: newSettings.toJSON() } : { visible: newSettings.toJSON() });\n    let colorCb;\n    let colorInput;\n    if (!forHiddenEdges) {\n      const colorDiv = document.createElement(\"div\");\n      div.appendChild(colorDiv);\n      colorCb = document.createElement(\"input\");\n      colorCb.type = \"checkbox\";\n      colorCb.id = this._nextId;\n      colorCb.checked = settings.ovrColor;\n      colorDiv.appendChild(colorCb);\n      const color = void 0 !== settings.color ? settings.color.toHexString() : \"#ffffff\";\n      colorInput = createColorInput({\n        parent: colorDiv,\n        id: this._nextId,\n        label: \"Color\",\n        value: color,\n        display: \"inline\",\n        disabled: !settings.ovrColor,\n        handler: (value) => overrideSettings(getSettings().overrideColor(ColorDef.create(value)))\n      }).input;\n      colorCb.addEventListener(\"click\", () => overrideSettings(getSettings().overrideColor(colorCb.checked ? ColorDef.create(colorInput.value) : void 0)));\n    }\n    const widthDiv = document.createElement(\"div\");\n    div.appendChild(widthDiv);\n    const widthCb = document.createElement(\"input\");\n    widthCb.type = \"checkbox\";\n    widthCb.id = this._nextId;\n    widthCb.checked = void 0 !== settings.width;\n    widthDiv.appendChild(widthCb);\n    const widthLabel = document.createElement(\"label\");\n    widthLabel.htmlFor = widthCb.id;\n    widthLabel.innerText = \"Weight \";\n    widthDiv.appendChild(widthLabel);\n    const width = createNumericInput({\n      parent: widthDiv,\n      value: void 0 !== settings.width ? settings.width : 1,\n      disabled: void 0 === settings.width,\n      min: 1,\n      max: 31,\n      step: 1,\n      handler: (value) => overrideSettings(getSettings().overrideWidth(value))\n    });\n    widthDiv.appendChild(width);\n    widthCb.addEventListener(\"click\", () => overrideSettings(getSettings().overrideWidth(widthCb.checked ? parseInt(width.value, 10) : void 0)));\n    const patternCb = Settings.addStyle(div, settings.pattern ? settings.pattern : LinePixels.Invalid, (select) => {\n      overrideSettings(getSettings().overridePattern(parseInt(select.value, 10)));\n    });\n    this._updates.push((view) => {\n      if (view.is2d()) {\n        div.hidden = true;\n        return;\n      }\n      const curStyle = getSettings();\n      if (void 0 !== colorCb && void 0 !== colorInput) {\n        colorCb.checked = void 0 !== curStyle.color;\n        colorInput.disabled = !colorCb.checked;\n        if (void 0 !== curStyle.color)\n          colorInput.value = curStyle.color.toHexString();\n      }\n      widthCb.checked = void 0 !== curStyle.width;\n      width.disabled = !widthCb.checked;\n      if (void 0 !== curStyle.width)\n        width.value = curStyle.width.toString();\n      const pix = void 0 !== curStyle.pattern ? curStyle.pattern : LinePixels.Invalid;\n      patternCb.select.value = pix.toString();\n    });\n    return div;\n  }\n};\n_ViewAttributes._expandViewFlags = false;\n_ViewAttributes._expandEdgeDisplay = false;\nexport let ViewAttributes = _ViewAttributes;\nexport class ViewAttributesPanel extends ToolBarDropDown {\n  constructor(vp, parent, disableEdges) {\n    super();\n    this._vp = vp;\n    this._parent = parent;\n    this._disableEdges = disableEdges;\n    this.open();\n  }\n  async populate() {\n    if (void 0 !== this._displayStylePickerInput)\n      this._displayStylePickerInput.select.disabled = true;\n    const view = this._vp.view;\n    const is3d = view.is3d();\n    const sqlName = is3d ? DisplayStyle3dState.classFullName : DisplayStyle2dState.classFullName;\n    const displayStyleProps = await this._vp.view.iModel.elements.queryProps({ from: sqlName, where: \"IsPrivate=FALSE\" });\n    const displayStyles = /* @__PURE__ */ new Map();\n    const styleEntries = [];\n    const promises = [];\n    for (const displayStyleProp of displayStyleProps) {\n      styleEntries.push({ name: displayStyleProp.code.value, value: displayStyleProp.id });\n      let displayStyle;\n      if (is3d)\n        displayStyle = new DisplayStyle3dState(displayStyleProp, view.iModel);\n      else\n        displayStyle = new DisplayStyle2dState(displayStyleProp, view.iModel);\n      displayStyles.set(displayStyleProp.id, displayStyle);\n    }\n    await Promise.all(promises);\n    this._displayStylePickerInput = createComboBox({\n      name: \"Display Style: \",\n      id: \"DisplayStyles\",\n      value: this._vp.view.displayStyle.id,\n      handler: async (select) => {\n        const style = displayStyles.get(select.value);\n        await style.load();\n        this._vp.displayStyle = style;\n        this._vp.invalidateScene();\n      },\n      entries: styleEntries\n    });\n    this._displayStylePickerInput.select.disabled = false;\n    if (void 0 !== this._attributes)\n      this._attributes.displayStylePickerInput = this._displayStylePickerInput;\n  }\n  get onViewChanged() {\n    return this.populate();\n  }\n  get isOpen() {\n    return void 0 !== this._attributes;\n  }\n  _open() {\n    this._attributes = new ViewAttributes(this._vp, this._parent, this._disableEdges);\n    const loadingComboBox = createComboBox({\n      name: \"Display Style: \",\n      id: \"DisplayStyles\",\n      entries: [{ name: \"Now Loading...\", value: void 0 }]\n    });\n    if (void 0 === this._displayStylePickerInput)\n      this._attributes.displayStylePickerInput = loadingComboBox;\n    else\n      this._attributes.displayStylePickerInput = this._displayStylePickerInput;\n  }\n  _close() {\n    if (void 0 !== this._attributes) {\n      this._attributes.dispose();\n      this._attributes = void 0;\n    }\n  }\n}\n",
      "start": 1693508124719,
      "end": 1693508124852,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/ViewAttributes.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { Id64String } from \"@itwin/core-bentley\";\r\nimport {\r\n  CheckBox, ComboBox, ComboBoxEntry, createCheckBox, createColorInput, createComboBox, createNestedMenu, createNumericInput, createSlider, Slider,\r\n} from \"@itwin/frontend-devtools\";\r\nimport {\r\n  BackgroundMapProps, BackgroundMapProviderName, BackgroundMapProviderProps, BackgroundMapType, BaseMapLayerSettings, ColorDef, DisplayStyle3dSettingsProps,\r\n  GlobeMode, HiddenLine, LinePixels, MonochromeMode, RenderMode, TerrainProps, ThematicDisplayMode, ThematicGradientColorScheme, ThematicGradientMode,\r\n} from \"@itwin/core-common\";\r\nimport { DisplayStyle2dState, DisplayStyle3dState, DisplayStyleState, IModelApp, Viewport, ViewState, ViewState3d } from \"@itwin/core-frontend\";\r\nimport { AmbientOcclusionEditor } from \"./AmbientOcclusion\";\r\nimport { EnvironmentEditor } from \"./EnvironmentEditor\";\r\nimport { Settings } from \"./FeatureOverrides\";\r\nimport { ThematicDisplayEditor } from \"./ThematicDisplay\";\r\nimport { ToolBarDropDown } from \"./ToolBar\";\r\n\r\n// cspell:ignore cels\r\n\r\ntype UpdateAttribute = (view: ViewState) => void;\r\n\r\ntype ViewFlag = \"acsTriad\" | \"grid\" | \"fill\" | \"materials\" | \"textures\" | \"visibleEdges\" | \"hiddenEdges\" | \"monochrome\" | \"constructions\" | \"transparency\" | \"weights\" | \"styles\" | \"clipVolume\" | \"forceSurfaceDiscard\" | \"whiteOnWhiteReversal\";\r\n\r\ninterface RenderingStyle extends DisplayStyle3dSettingsProps {\r\n  name: string;\r\n}\r\n\r\nconst renderingStyleViewFlags = {\r\n  noCameraLights: false,\r\n  noSourceLights: false,\r\n  noSolarLight: false,\r\n  visEdges: false,\r\n  hidEdges: false,\r\n  shadows: false,\r\n  monochrome: false,\r\n  ambientOcclusion: false,\r\n  thematicDisplay: false,\r\n  renderMode: RenderMode.SmoothShade,\r\n};\r\n\r\nconst renderingStyles: RenderingStyle[] = [{\r\n  name: \"None\",\r\n}, {\r\n  name: \"Default\",\r\n  environment: {\r\n    sky: {\r\n      display: true, groundColor: 8228728, zenithColor: 16741686, nadirColor: 3880, skyColor: 16764303,\r\n    },\r\n    ground: {\r\n      display: false, elevation: -0.01, aboveColor: 32768, belowColor: 1262987,\r\n    },\r\n  },\r\n  viewflags: renderingStyleViewFlags,\r\n  lights: {\r\n    solar: { direction: [-0.9833878378071199, -0.18098510351728977, 0.013883542698953828] },\r\n  },\r\n}, {\r\n  name: \"Ambient\",\r\n  backgroundColor: 10921638,\r\n  environment: {\r\n    sky: { display: false },\r\n    ground: { display: false },\r\n  },\r\n  viewflags: { ...renderingStyleViewFlags, ambientOcclusion: true },\r\n  lights: {\r\n    solar: { intensity: 0 },\r\n    portrait: { intensity: 0 },\r\n    ambient: { intensity: 0.55 },\r\n    fresnel: { intensity: 0.8, invert: true },\r\n    specularIntensity: 0,\r\n  },\r\n}, {\r\n  name: \"Illustration\",\r\n  environment: {},\r\n  backgroundColor: 10921638,\r\n  viewflags: { ...renderingStyleViewFlags, noCameraLights: true, noSourceLights: true, noSolarLight: true, visEdges: true },\r\n  lights: {\r\n    solar: { direction: [-0.9833878378071199, -0.18098510351728977, 0.013883542698953828] },\r\n  },\r\n  hline: {\r\n    visible: { ovrColor: true, color: 0, pattern: 0, width: 1 },\r\n    hidden: { ovrColor: false, color: 16777215, pattern: 3435973836, width: 0 },\r\n    transThreshold: 1,\r\n  },\r\n}, {\r\n  name: \"Sun-dappled\",\r\n  environment: {\r\n    sky: {\r\n      display: true, groundColor: 8228728, zenithColor: 16741686, nadirColor: 3880, skyColor: 16764303,\r\n    },\r\n    ground: {\r\n      display: false, elevation: -0.01, aboveColor: 32768, belowColor: 1262987,\r\n    },\r\n  },\r\n  viewflags: { ...renderingStyleViewFlags, shadows: true },\r\n  lights: {\r\n    solar: { direction: [0.9391245716329828, 0.10165764029437066, -0.3281931795832247] },\r\n    hemisphere: { intensity: 0.2 },\r\n    portrait: { intensity: 0 },\r\n  },\r\n}, {\r\n  name: \"Comic Book\",\r\n  environment: {\r\n    sky: { display: true, groundColor: 8228728, zenithColor: 16741686, nadirColor: 3880, skyColor: 16764303 },\r\n    ground: { display: false, elevation: -0.01, aboveColor: 32768, belowColor: 1262987 },\r\n  },\r\n  viewflags: { ...renderingStyleViewFlags, noWeight: false, visEdges: true },\r\n  hline: {\r\n    visible: { ovrColor: true, color: 0, pattern: 0, width: 3 },\r\n    transThreshold: 1,\r\n  },\r\n  lights: {\r\n    solar: { direction: [0.7623, 0.0505, -0.6453], intensity: 1.95, alwaysEnabled: true },\r\n    ambient: { intensity: 0.2 },\r\n    portrait: { intensity: 0 },\r\n    specularIntensity: 0,\r\n    numCels: 2,\r\n  },\r\n}, {\r\n  name: \"Outdoorsy\",\r\n  environment: {\r\n    sky: { display: true, groundColor: 8228728, zenithColor: 16741686, nadirColor: 3880, skyColor: 16764303 },\r\n    ground: { display: false, elevation: -0.01, aboveColor: 32768, belowColor: 1262987 },\r\n  },\r\n  viewflags: renderingStyleViewFlags,\r\n  lights: {\r\n    solar: { direction: [-0.9833878378071199, -0.18098510351728977, 0.013883542698953828], intensity: 1.05 },\r\n    ambient: { intensity: 0.25 },\r\n    hemisphere: {\r\n      upperColor: { r: 206, g: 233, b: 255 },\r\n      intensity: 0.5,\r\n    },\r\n    portrait: { intensity: 0 },\r\n  },\r\n}, {\r\n  name: \"Schematic\",\r\n  environment: {},\r\n  backgroundColor: 16777215,\r\n  viewflags: { ...renderingStyleViewFlags, visEdges: true },\r\n  lights: {\r\n    solar: { direction: [0, -0.6178171353958787, -0.7863218089378106], intensity: 1.95, alwaysEnabled: true },\r\n    ambient: { intensity: 0.65 },\r\n    portrait: { intensity: 0 },\r\n    specularIntensity: 0,\r\n  },\r\n  hline: {\r\n    visible: { ovrColor: true, color: 0, pattern: 0, width: 1 },\r\n    hidden: { ovrColor: false, color: 16777215, pattern: 3435973836, width: 0 },\r\n    transThreshold: 1,\r\n  },\r\n}, {\r\n  name: \"Soft\",\r\n  environment: {\r\n    sky: { display: true, groundColor: 8228728, zenithColor: 16741686, nadirColor: 3880, skyColor: 16764303 },\r\n    ground: { display: false, elevation: -0.01, aboveColor: 32768, belowColor: 1262987 },\r\n  },\r\n  viewflags: { ...renderingStyleViewFlags, ambientOcclusion: true },\r\n  lights: {\r\n    solar: { direction: [-0.9833878378071199, -0.18098510351728977, 0.013883542698953828], intensity: 0 },\r\n    ambient: { intensity: 0.75 },\r\n    hemisphere: { intensity: 0.3 },\r\n    portrait: { intensity: 0.5 },\r\n    specularIntensity: 0.4,\r\n  },\r\n  ao: { bias: 0.25, zLengthCap: 0.0025, maxDistance: 100, intensity: 1, texelStepSize: 1, blurDelta: 1.5, blurSigma: 2, blurTexelStepSize: 1 },\r\n}, {\r\n  name: \"Moonlit\",\r\n  environment: {\r\n    sky: { display: true, groundColor: 2435876, zenithColor: 0, nadirColor: 3880, skyColor: 3481088 },\r\n    ground: { display: false, elevation: -0.01, aboveColor: 32768, belowColor: 1262987 },\r\n  },\r\n  viewflags: { ...renderingStyleViewFlags, visEdges: true },\r\n  lights: {\r\n    solar: { direction: [-0.9833878378071199, -0.18098510351728977, 0.013883542698953828], intensity: 3, alwaysEnabled: true },\r\n    ambient: { intensity: 0.05 },\r\n    hemisphere: { lowerColor: { r: 83, g: 100, b: 87 } },\r\n    portrait: { intensity: 0 },\r\n    specularIntensity: 0,\r\n  },\r\n  monochromeMode: 0,\r\n  hline: {\r\n    visible: { ovrColor: true, color: 0, pattern: -1, width: 0 },\r\n    hidden: { ovrColor: false, color: 16777215, pattern: 3435973836, width: 0 },\r\n    transThreshold: 1,\r\n  },\r\n  monochromeColor: 7897479,\r\n}, {\r\n  name: \"Thematic: Height\",\r\n  viewflags: { ...renderingStyleViewFlags, thematicDisplay: true },\r\n  thematic: {\r\n    axis: [0, 0, 1],\r\n    gradientSettings: { mode: ThematicGradientMode.SteppedWithDelimiter },\r\n  },\r\n  lights: {},\r\n}, {\r\n  name: \"Thematic: Slope\",\r\n  viewflags: { ...renderingStyleViewFlags, thematicDisplay: true },\r\n  thematic: {\r\n    displayMode: ThematicDisplayMode.Slope,\r\n    range: [0, 90],\r\n    axis: [0, 0, 1],\r\n    gradientSettings: {\r\n      mode: ThematicGradientMode.Smooth,\r\n      colorScheme: ThematicGradientColorScheme.Custom,\r\n      customKeys: [\r\n        { value: 0, color: 0x404040 },\r\n        { value: 1, color: 0xffffff },\r\n      ],\r\n    },\r\n  },\r\n  lights: {},\r\n}, {\r\n  name: \"Gloss\",\r\n  environment: {\r\n    sky: { display: true, groundColor: 8228728, zenithColor: 16741686, nadirColor: 3880, skyColor: 16764303 },\r\n    ground: { display: false, elevation: -0.01, aboveColor: 32768, belowColor: 1262987 },\r\n  },\r\n  viewflags: { ...renderingStyleViewFlags, visEdges: true },\r\n  lights: {\r\n    solar: { direction: [-0.9833878378071199, -0.18098510351728977, 0.013883542698953828] },\r\n    specularIntensity: 4.15,\r\n  },\r\n  hline: {\r\n    visible: { ovrColor: true, color: 8026756, pattern: 0, width: 1 },\r\n    hidden: { ovrColor: false, color: 16777215, pattern: 3435973836, width: 0 },\r\n    transThreshold: 1,\r\n  },\r\n}, {\r\n  name: \"Atmosphere\",\r\n  environment: {\r\n    sky: {\r\n      display: true,\r\n    },\r\n    ground: {\r\n      display: true,\r\n    },\r\n    atmosphere: {\r\n      display: true,\r\n    },\r\n  },\r\n  viewflags: renderingStyleViewFlags,\r\n}];\r\n\r\nexport class ViewAttributes {\r\n  private static _expandViewFlags = false;\r\n  private static _expandEdgeDisplay = false;\r\n  private readonly _vp: Viewport;\r\n  private readonly _element: HTMLElement;\r\n  private readonly _updates: UpdateAttribute[] = [];\r\n  private _updating = false;\r\n  private readonly _removeMe: () => void;\r\n  private readonly _parent: HTMLElement;\r\n  private _id = 0;\r\n\r\n  private _displayStylePickerDiv?: HTMLDivElement;\r\n  public set displayStylePickerInput(newComboBox: ComboBox) {\r\n    while (this._displayStylePickerDiv!.hasChildNodes())\r\n      this._displayStylePickerDiv!.removeChild(this._displayStylePickerDiv!.firstChild!);\r\n\r\n    this._displayStylePickerDiv!.appendChild(newComboBox.div);\r\n  }\r\n\r\n  public constructor(vp: Viewport, parent: HTMLElement, disableEdges = false) {\r\n    this._vp = vp;\r\n    this._parent = parent;\r\n    this._element = document.createElement(\"div\");\r\n    this._element.className = \"debugPanel\"; // \"toolMenu\"; or set display=\"block\"...\r\n\r\n    this._removeMe = vp.onViewChanged.addListener((_vp) => this.update());\r\n\r\n    this.addDisplayStylePicker();\r\n    this.addRenderMode();\r\n    this.addRenderingStyles();\r\n    const hr = document.createElement(\"hr\");\r\n    hr.style.borderColor = \"grey\";\r\n    this._element.appendChild(hr);\r\n\r\n    const flagsDiv = document.createElement(\"div\");\r\n    const vfMenu = createNestedMenu({\r\n      id: this._nextId,\r\n      label: \"View Flags\",\r\n      parent: this._element,\r\n      // We use a static so the expand/collapse state persists after closing and reopening the drop-down.\r\n      expand: ViewAttributes._expandViewFlags,\r\n      handler: (expanded) => {\r\n        ViewAttributes._expandViewFlags = expanded;\r\n        vfMenu.label.style.fontWeight = expanded ? \"bold\" : \"500\";\r\n      },\r\n      body: flagsDiv,\r\n    });\r\n    (vfMenu.div.firstElementChild!.lastElementChild! as HTMLElement).style.borderColor = \"grey\";\r\n\r\n    this._updates.push((_view) => {\r\n      vfMenu.label.style.fontWeight = ViewAttributes._expandViewFlags ? \"bold\" : \"500\";\r\n    });\r\n\r\n    this._element.appendChild(flagsDiv);\r\n\r\n    this.addViewFlagAttribute(flagsDiv, \"ACS Triad\", \"acsTriad\");\r\n    this.addViewFlagAttribute(flagsDiv, \"Grid\", \"grid\");\r\n    this.addViewFlagAttribute(flagsDiv, \"Fill\", \"fill\");\r\n    this.addViewFlagAttribute(flagsDiv, \"Materials\", \"materials\");\r\n    this.addViewFlagAttribute(flagsDiv, \"Textures\", \"textures\");\r\n    this.addViewFlagAttribute(flagsDiv, \"Constructions\", \"constructions\");\r\n    this.addViewFlagAttribute(flagsDiv, \"Transparency\", \"transparency\");\r\n    this.addViewFlagAttribute(flagsDiv, \"Line Weights\", \"weights\");\r\n    this.addViewFlagAttribute(flagsDiv, \"Line Styles\", \"styles\");\r\n    this.addViewFlagAttribute(flagsDiv, \"Clip Volume\", \"clipVolume\", true);\r\n    this.addViewFlagAttribute(flagsDiv, \"Force Surface Discard\", \"forceSurfaceDiscard\", true);\r\n    this.addViewFlagAttribute(flagsDiv, \"White-on-white Reversal\", \"whiteOnWhiteReversal\");\r\n\r\n    this.addCameraToggle(flagsDiv);\r\n    this.addMonochrome(flagsDiv);\r\n    const hr2 = document.createElement(\"hr\");\r\n    hr2.style.borderColor = \"grey\";\r\n    flagsDiv.appendChild(hr2);\r\n\r\n    this.addEnvironmentEditor();\r\n    this.addBackgroundMapOrTerrain();\r\n    if (!disableEdges)\r\n      this.addEdgeDisplay();\r\n\r\n    this.addAmbientOcclusion();\r\n    this.addThematicDisplay();\r\n\r\n    // Set initial states\r\n    this.update();\r\n\r\n    parent.appendChild(this._element);\r\n  }\r\n\r\n  public dispose(): void {\r\n    this._removeMe();\r\n    this._parent.removeChild(this._element);\r\n  }\r\n\r\n  private addDisplayStylePicker(): void {\r\n    this._displayStylePickerDiv = document.createElement(\"div\");\r\n    this._element.appendChild(this._displayStylePickerDiv);\r\n  }\r\n\r\n  private addEnvironmentEditor() {\r\n    const env = new EnvironmentEditor(this._vp, this._element);\r\n    this._updates.push((view) => env.update(view));\r\n  }\r\n\r\n  private addViewFlagAttribute(parent: HTMLElement, label: string, flag: ViewFlag, only3d: boolean = false): void {\r\n    const elems = this.addCheckbox(label, (enabled: boolean) => {\r\n      this._vp.viewFlags = this._vp.viewFlags.with(flag, enabled);\r\n      this.sync();\r\n    }, parent);\r\n\r\n    const update = (view: ViewState) => {\r\n      const visible = !only3d || view.is3d();\r\n      elems.div.style.display = visible ? \"\" : \"none\";\r\n      if (visible)\r\n        elems.checkbox.checked = view.viewFlags[flag];\r\n    };\r\n\r\n    this._updates.push(update);\r\n  }\r\n\r\n  private addCameraToggle(parent: HTMLElement): void {\r\n    const elems = this.addCheckbox(\"Camera\", (enabled: boolean) => {\r\n      if (enabled)\r\n        this._vp.turnCameraOn();\r\n      else\r\n        (this._vp.view as ViewState3d).turnCameraOff();\r\n\r\n      this.sync(true);\r\n    }, parent);\r\n\r\n    const update = (view: ViewState) => {\r\n      const visible = view.is3d() && view.allow3dManipulations() && view.supportsCamera();\r\n      elems.div.style.display = visible ? \"block\" : \"none\";\r\n      if (visible)\r\n        elems.checkbox.checked = this._vp.isCameraOn;\r\n    };\r\n\r\n    this._updates.push(update);\r\n  }\r\n\r\n  private addMonochrome(parent: HTMLElement): void {\r\n    const colorInput = createColorInput({\r\n      label: \"Color\",\r\n      id: this._nextId,\r\n      parent,\r\n      display: \"inline\",\r\n      value: this._vp.view.displayStyle.settings.monochromeColor.toHexString(),\r\n      handler: (color) => {\r\n        this._vp.view.displayStyle.settings.monochromeColor = ColorDef.create(color);\r\n        this.sync();\r\n      },\r\n    });\r\n    colorInput.div.style.cssFloat = \"right\";\r\n\r\n    const scaledCb = this.addCheckbox(\"Scaled\", (enabled: boolean) => {\r\n      this._vp.displayStyle.settings.monochromeMode = enabled ? MonochromeMode.Scaled : MonochromeMode.Flat;\r\n      this.sync();\r\n    }, parent);\r\n    scaledCb.div.style.cssFloat = \"right\";\r\n    scaledCb.div.style.marginRight = \"0.67em\";\r\n\r\n    this.addViewFlagAttribute(parent, \"Monochrome\", \"monochrome\");\r\n    colorInput.div.style.marginTop = \"-4px\";\r\n\r\n    this._updates.push((view: ViewState) => {\r\n      if (view.viewFlags.monochrome) {\r\n        colorInput.div.style.display = scaledCb.div.style.display = \"\";\r\n        colorInput.input.value = view.displayStyle.settings.monochromeColor.toHexString();\r\n        scaledCb.checkbox.checked = MonochromeMode.Scaled === view.displayStyle.settings.monochromeMode;\r\n      } else {\r\n        colorInput.div.style.display = scaledCb.div.style.display = \"none\";\r\n      }\r\n    });\r\n  }\r\n\r\n  private addRenderMode(): void {\r\n    const div = document.createElement(\"div\");\r\n\r\n    const entries = [\r\n      { name: \"Wireframe\", value: RenderMode.Wireframe },\r\n      { name: \"Solid Fill\", value: RenderMode.SolidFill },\r\n      { name: \"Hidden Line\", value: RenderMode.HiddenLine },\r\n      { name: \"Smooth Shade\", value: RenderMode.SmoothShade },\r\n    ];\r\n\r\n    const select = createComboBox({\r\n      parent: div,\r\n      name: \"Render Mode: \",\r\n      entries,\r\n      id: \"viewAttr_renderMode\",\r\n      value: this._vp.viewFlags.renderMode,\r\n      handler: (thing) => {\r\n        this._vp.viewFlags = this._vp.viewFlags.withRenderMode(Number.parseInt(thing.value, 10));\r\n        this.sync();\r\n      },\r\n    }).select;\r\n\r\n    this._updates.push((view) => {\r\n      const visible = view.is3d();\r\n      div.style.display = visible ? \"block\" : \"none\";\r\n      if (visible)\r\n        select.value = view.viewFlags.renderMode.toString();\r\n    });\r\n\r\n    this._element.appendChild(div);\r\n  }\r\n\r\n  private addRenderingStyles(): void {\r\n    const div = document.createElement(\"div\");\r\n    const entries: ComboBoxEntry[] = renderingStyles.map((renderingStyle, index) => ({ name: renderingStyle.name, value: index }));\r\n    createComboBox({\r\n      parent: div,\r\n      name: \"Rendering Style: \",\r\n      entries,\r\n      id: \"viewAttr_renderingStyle\",\r\n      value: 0,\r\n      handler: (cbx) => {\r\n        this.applyRenderingStyle(renderingStyles[parseInt(cbx.value, 10)]);\r\n      },\r\n    });\r\n\r\n    this._updates.push((view) => {\r\n      div.style.display = view.is3d() ? \"\" : \"none\";\r\n    });\r\n\r\n    this._element.appendChild(div);\r\n  }\r\n\r\n  private applyRenderingStyle(style: RenderingStyle): void {\r\n    if (style.name !== \"None\")\r\n      this._vp.overrideDisplayStyle(style);\r\n  }\r\n\r\n  private addAmbientOcclusion(): void {\r\n    const ao = new AmbientOcclusionEditor(this._vp, this._element);\r\n    this._updates.push((view) => ao.update(view));\r\n  }\r\n\r\n  private addThematicDisplay(): void {\r\n    const thematic = new ThematicDisplayEditor(this._vp, this._element);\r\n    this._updates.push((view) => thematic.update(view));\r\n  }\r\n\r\n  private getBackgroundMap(view: ViewState) { return view.displayStyle.settings.backgroundMap; }\r\n  private addBackgroundMapOrTerrain(): void {\r\n    const isMapSupported = (view: ViewState) => view.is3d() && view.iModel.isGeoLocated;\r\n\r\n    const div = document.createElement(\"div\");\r\n\r\n    const backgroundSettingsDiv = document.createElement(\"div\")!;\r\n\r\n    const showOrHideSettings = (show: boolean) => {\r\n      const display = show ? \"block\" : \"none\";\r\n      backgroundSettingsDiv.style.display = display;\r\n    };\r\n\r\n    const enableMap = (enabled: boolean) => {\r\n      this._vp.viewFlags = this._vp.viewFlags.with(\"backgroundMap\", enabled);\r\n      backgroundSettingsDiv.style.display = enabled ? \"block\" : \"none\";\r\n      showOrHideSettings(enabled);\r\n      this.sync();\r\n    };\r\n    const checkboxInterface = this.addCheckbox(\"Background Map\", enableMap, div);\r\n    const checkbox = checkboxInterface.checkbox;\r\n    const checkboxLabel = checkboxInterface.label;\r\n\r\n    const imageryProviders = createComboBox({\r\n      parent: backgroundSettingsDiv,\r\n      name: \"Imagery: \",\r\n      id: \"viewAttr_MapProvider\",\r\n      entries: [\r\n        { name: \"Bing\", value: \"BingProvider\" },\r\n        { name: \"MapBox\", value: \"MapBoxProvider\" },\r\n      ],\r\n      handler: (select) => this.updateBackgroundMapProvider({ name: select.value as BackgroundMapProviderName }),\r\n    }).select;\r\n\r\n    const types = createComboBox({\r\n      parent: backgroundSettingsDiv,\r\n      name: \"Type: \",\r\n      id: \"viewAttr_mapType\",\r\n      entries: [\r\n        { name: \"Street\", value: BackgroundMapType.Street },\r\n        { name: \"Aerial\", value: BackgroundMapType.Aerial },\r\n        { name: \"Hybrid\", value: BackgroundMapType.Hybrid },\r\n      ],\r\n      handler: (select) => this.updateBackgroundMapProvider({ type: Number.parseInt(select.value, 10) }),\r\n    }).select;\r\n    const globeModes = createComboBox({\r\n      parent: backgroundSettingsDiv,\r\n      name: \"Globe: \",\r\n      id: \"viewAttr_globeMode\",\r\n      entries: [\r\n        { name: \"Ellipsoid\", value: GlobeMode.Ellipsoid },\r\n        { name: \"Plane\", value: GlobeMode.Plane },\r\n      ],\r\n      handler: (select) => this.updateBackgroundMap({ globeMode: Number.parseInt(select.value, 10) }),\r\n    }).select;\r\n\r\n    const terrainSettings = this.addTerrainSettings();\r\n    const mapSettings = this.addMapSettings();\r\n\r\n    const enableTerrain = (enable: boolean) => {\r\n      this.updateBackgroundMap({ applyTerrain: enable });\r\n      terrainSettings.style.display = enable ? \"block\" : \"none\";\r\n      mapSettings.style.display = enable ? \"none\" : \"block\";\r\n      this.sync();\r\n    };\r\n\r\n    const terrainCheckbox = this.addCheckbox(\"Terrain\", enableTerrain, backgroundSettingsDiv).checkbox;\r\n    const transCheckbox = this.addCheckbox(\"Transparency\", (enabled: boolean) => this.updateBackgroundMap({ transparency: enabled ? 0.5 : false }), backgroundSettingsDiv).checkbox;\r\n    const locatable = this.addCheckbox(\"Locatable\", (enabled) => this.updateBackgroundMap({ nonLocatable: !enabled }), backgroundSettingsDiv).checkbox;\r\n    backgroundSettingsDiv.appendChild(document.createElement(\"hr\")!);\r\n    backgroundSettingsDiv.appendChild(mapSettings);\r\n    backgroundSettingsDiv.appendChild(terrainSettings);\r\n\r\n    this._updates.push((view) => {\r\n      const visible = isMapSupported(view);\r\n      div.style.display = visible ? \"block\" : \"none\";\r\n      if (!visible)\r\n        return;\r\n\r\n      checkbox.checked = view.viewFlags.backgroundMap;\r\n      checkboxLabel.style.fontWeight = checkbox.checked ? \"bold\" : \"500\";\r\n      showOrHideSettings(checkbox.checked);\r\n\r\n      const baseLayer = view.displayStyle.settings.mapImagery.backgroundBase;\r\n      if (baseLayer instanceof BaseMapLayerSettings && baseLayer.provider) {\r\n        imageryProviders.value = baseLayer.provider.name;\r\n        types.value = baseLayer.provider.type.toString();\r\n      }\r\n\r\n      const map = this.getBackgroundMap(view);\r\n      terrainCheckbox.checked = map.applyTerrain;\r\n      transCheckbox.checked = false !== map.transparency;\r\n      locatable.checked = map.locatable;\r\n      globeModes.value = map.globeMode.toString();\r\n\r\n      if (map.applyTerrain !== terrainCheckbox.checked)\r\n        enableTerrain(terrainCheckbox.checked);\r\n    });\r\n\r\n    div.appendChild(backgroundSettingsDiv);\r\n    const hr = document.createElement(\"hr\");\r\n    hr.style.borderColor = \"grey\";\r\n    div.appendChild(hr);\r\n    this._element.appendChild(div);\r\n  }\r\n\r\n  private addMapSettings() {\r\n    const mapSettingsDiv = document.createElement(\"div\");\r\n    const groundBiasDiv = document.createElement(\"div\");\r\n    const groundBiasLabel = document.createElement(\"label\");\r\n    groundBiasLabel.style.display = \"inline\";\r\n    groundBiasLabel.htmlFor = \"ts_viewToolPickRadiusInches\";\r\n    groundBiasLabel.innerText = \"Ground Bias: \";\r\n    groundBiasDiv.appendChild(groundBiasLabel);\r\n    const groundBias = createNumericInput({\r\n      parent: groundBiasDiv,\r\n      value: this.getBackgroundMap(this._vp.view).groundBias,\r\n      handler: (value) => this.updateBackgroundMap({ groundBias: value }),\r\n    }, true);\r\n    groundBiasDiv.style.display = \"block\";\r\n    groundBiasDiv.style.textAlign = \"left\";\r\n    mapSettingsDiv.appendChild(groundBiasDiv);\r\n\r\n    const depthCheckbox = this.addCheckbox(\"Depth\", (enabled: boolean) => this.updateBackgroundMap({ useDepthBuffer: enabled }), mapSettingsDiv).checkbox;\r\n\r\n    this._updates.push((view) => {\r\n      const map = this.getBackgroundMap(view);\r\n      groundBias.value = map.groundBias.toString();\r\n      depthCheckbox.checked = map.useDepthBuffer;\r\n    });\r\n\r\n    return mapSettingsDiv;\r\n  }\r\n\r\n  private updateBackgroundMap(props: BackgroundMapProps): void {\r\n    this._vp.changeBackgroundMapProps(props);\r\n    this.sync();\r\n  }\r\n\r\n  private updateBackgroundMapProvider(props: BackgroundMapProviderProps): void {\r\n    this._vp.displayStyle.changeBackgroundMapProvider(props);\r\n    this.sync();\r\n  }\r\n\r\n  private addTerrainSettings() {\r\n    const getTerrainSettings = (view: ViewState) => view.displayStyle.settings.backgroundMap.terrainSettings;\r\n    const updateTerrainSettings = (props: TerrainProps) => this._vp.changeBackgroundMapProps({ terrainSettings: props });\r\n\r\n    const settingsDiv = document.createElement(\"div\")!;\r\n    const heightOriginMode: HTMLSelectElement = createComboBox({\r\n      name: \"Height Origin Mode: \",\r\n      id: \"viewAttr_TerrainHeightOrigin\",\r\n      entries: [\r\n        { name: \"GPS (Geodetic/Ellipsoid)\", value: \"0\" },\r\n        { name: \"Sea Level (Geoid)\", value: \"1\" },\r\n        { name: \"Ground\", value: \"2\" },\r\n      ],\r\n      handler: (select) => { updateTerrainSettings({ heightOriginMode: parseInt(select.value, 10) }); },\r\n    }).select;\r\n\r\n    const heightOriginDiv = document.createElement(\"div\");\r\n    const heightOriginLabel = document.createElement(\"label\");\r\n    heightOriginLabel.style.display = \"inline\";\r\n    heightOriginLabel.htmlFor = \"ts_viewToolPickRadiusInches\";\r\n    heightOriginLabel.innerText = \"Model Height: \";\r\n    heightOriginDiv.appendChild(heightOriginLabel);\r\n    const heightOrigin = createNumericInput({\r\n      parent: heightOriginDiv,\r\n      value: getTerrainSettings(this._vp.view).heightOrigin,\r\n      handler: (value) => updateTerrainSettings({ heightOrigin: value }),\r\n    }, true);\r\n    heightOriginDiv.appendChild(heightOriginMode);\r\n    heightOriginDiv.style.display = \"block\";\r\n    heightOriginDiv.style.textAlign = \"left\";\r\n    settingsDiv.appendChild(heightOriginDiv);\r\n\r\n    const exaggerationDiv = document.createElement(\"div\");\r\n    const exaggerationLabel = document.createElement(\"label\");\r\n    exaggerationLabel.style.display = \"inline\";\r\n    exaggerationLabel.htmlFor = \"ts_viewToolPickRadiusInches\";\r\n    exaggerationLabel.innerText = \"Exaggeration: \";\r\n    exaggerationDiv.appendChild(exaggerationLabel);\r\n\r\n    const exaggeration = createNumericInput({\r\n      parent: exaggerationDiv,\r\n      value: getTerrainSettings(this._vp.view).exaggeration,\r\n      handler: (value) => updateTerrainSettings({ exaggeration: value }),\r\n    }, true);\r\n\r\n    exaggerationDiv.style.display = \"block\";\r\n    exaggerationDiv.style.textAlign = \"left\";\r\n    settingsDiv.appendChild(exaggerationDiv);\r\n\r\n    const bingCheckbox = this.addCheckbox(\"Use Bing elevation\",\r\n      (enabled: boolean) => updateTerrainSettings({ providerName: enabled ? \"DtaBingTerrain\" : \"CesiumWorldTerrain\" }),\r\n      settingsDiv,\r\n    ).checkbox;\r\n\r\n    this._updates.push((view) => {\r\n      const map = view.displayStyle.settings.backgroundMap;\r\n      const terrainSettings = map.terrainSettings;\r\n      heightOriginMode.value = terrainSettings.heightOriginMode.toString();\r\n      heightOrigin.value = terrainSettings.heightOrigin.toString();\r\n      exaggeration.value = terrainSettings.exaggeration.toString();\r\n      bingCheckbox.checked = \"DtaBingTerrain\" === terrainSettings.providerName;\r\n    });\r\n\r\n    return settingsDiv;\r\n  }\r\n\r\n  private addCheckbox(cbLabel: string, handler: (enabled: boolean) => void, parent?: HTMLElement): CheckBox {\r\n    if (undefined === parent)\r\n      parent = this._element;\r\n\r\n    return createCheckBox({\r\n      parent,\r\n      name: cbLabel,\r\n      id: this._nextId,\r\n      handler: (cb) => handler(cb.checked),\r\n    });\r\n  }\r\n\r\n  private update(): void {\r\n    if (!this._updating) {\r\n      this._updating = true;\r\n      for (const update of this._updates)\r\n        update(this._vp.view);\r\n\r\n      this._updating = false;\r\n    }\r\n  }\r\n\r\n  private sync(saveInUndo = false): void {\r\n    this._vp.synchWithView({ noSaveInUndo: !saveInUndo });\r\n  }\r\n\r\n  private get _nextId(): string {\r\n    ++this._id;\r\n    return `viewAttributesPanel_${this._id}`;\r\n  }\r\n\r\n  private get _edgeSettings() { return (this._vp.view as ViewState3d).getDisplayStyle3d().settings.hiddenLineSettings; }\r\n  private overrideEdgeSettings(props: HiddenLine.SettingsProps) {\r\n    (this._vp.view as ViewState3d).getDisplayStyle3d().settings.hiddenLineSettings = this._edgeSettings.override(props);\r\n    this.sync();\r\n  }\r\n\r\n  private addEdgeDisplay(): void {\r\n    const edgeDisplayDiv = document.createElement(\"div\");\r\n    const nestedMenu = createNestedMenu({\r\n      id: this._nextId,\r\n      label: \"Edge Display\",\r\n      parent: this._element,\r\n      expand: ViewAttributes._expandEdgeDisplay,\r\n      // We use a static so the expand/collapse state persists after closing and reopening the drop-down.\r\n      handler: (expanded) => {\r\n        ViewAttributes._expandEdgeDisplay = expanded;\r\n        nestedMenu.label.style.fontWeight = expanded ? \"bold\" : \"500\";\r\n      },\r\n      body: edgeDisplayDiv,\r\n    });\r\n    nestedMenu.label.style.fontWeight = \"500\";\r\n    (nestedMenu.div.firstElementChild!.lastElementChild! as HTMLElement).style.borderColor = \"grey\";\r\n\r\n    const slider: Slider = createSlider({\r\n      id: this._nextId,\r\n      name: \"Transparency Threshold\",\r\n      parent: edgeDisplayDiv,\r\n      min: \"0.0\",\r\n      max: \"1.0\",\r\n      step: \"0.05\",\r\n      value: \"1.0\",\r\n      readout: \"right\",\r\n      handler: (_) => this.overrideEdgeSettings({ transThreshold: parseFloat(slider.slider.value) }),\r\n    });\r\n    slider.div.style.textAlign = \"left\";\r\n\r\n    const smoothEdgesCb = this.addCheckbox(\"Smooth Polyface Edges\", (enabled: boolean) => {\r\n      IModelApp.tileAdmin.edgeOptions.smooth = enabled;\r\n      this._vp.invalidateScene();\r\n      this.sync();\r\n    }, edgeDisplayDiv);\r\n\r\n    const visEdgesCb = this.addCheckbox(\"Visible Edges\", (enabled: boolean) => {\r\n      this._vp.viewFlags = this._vp.viewFlags.with(\"visibleEdges\", enabled);\r\n      hidEdgesCb.checkbox.disabled = !enabled;\r\n      hidEditor.hidden = hidEditor.hidden || !enabled;\r\n      visEditor.hidden = !enabled;\r\n      this.sync();\r\n    }, nestedMenu.body);\r\n\r\n    const visEditor = this.addHiddenLineEditor(false);\r\n    edgeDisplayDiv.appendChild(visEditor);\r\n\r\n    const hidEdgesCb = this.addCheckbox(\"Hidden Edges\", (enabled: boolean) => {\r\n      this._vp.viewFlags = this._vp.viewFlags.with(\"hiddenEdges\", enabled);\r\n      hidEditor.hidden = !enabled;\r\n      this.sync();\r\n    }, edgeDisplayDiv);\r\n\r\n    const hidEditor = this.addHiddenLineEditor(true);\r\n    edgeDisplayDiv.appendChild(hidEditor);\r\n\r\n    this._updates.push((view) => {\r\n      nestedMenu.label.style.fontWeight = ViewAttributes._expandEdgeDisplay ? \"bold\" : \"500\";\r\n      if (view.is2d()) {\r\n        nestedMenu.div.hidden = true;\r\n        return;\r\n      }\r\n\r\n      nestedMenu.div.hidden = false;\r\n      const settings = this._edgeSettings;\r\n      slider.slider.value = slider.readout.innerText = settings.transparencyThreshold.toString();\r\n\r\n      const vf = this._vp.viewFlags;\r\n      visEdgesCb.checkbox.checked = vf.visibleEdges;\r\n      visEditor.hidden = !vf.visibleEdges;\r\n      hidEdgesCb.checkbox.checked = vf.visibleEdges && vf.hiddenEdges;\r\n      smoothEdgesCb.checkbox.checked = IModelApp.tileAdmin.edgeOptions.smooth;\r\n      hidEditor.hidden = !vf.hiddenEdges;\r\n    });\r\n    const hr = document.createElement(\"hr\");\r\n    hr.style.borderColor = \"grey\";\r\n    edgeDisplayDiv.appendChild(hr);\r\n  }\r\n\r\n  private addHiddenLineEditor(forHiddenEdges: boolean): HTMLDivElement {\r\n    const style = this._vp.view.is3d() ? this._edgeSettings : HiddenLine.Settings.defaults;\r\n    const settings = forHiddenEdges ? style.hidden : style.visible;\r\n    const div = document.createElement(\"div\");\r\n    div.style.paddingLeft = \"10px\";\r\n    div.hidden = forHiddenEdges ? !this._vp.view.viewFlags.hiddenEdges : !this._vp.view.viewFlags.visibleEdges;\r\n\r\n    const getSettings = () => forHiddenEdges ? this._edgeSettings.hidden : this._edgeSettings.visible;\r\n    const overrideSettings = (newSettings: HiddenLine.Style) => this.overrideEdgeSettings(forHiddenEdges ? { hidden: newSettings.toJSON() } : { visible: newSettings.toJSON() });\r\n\r\n    // Color override (visible only)\r\n    let colorCb: HTMLInputElement | undefined;\r\n    let colorInput: HTMLInputElement | undefined;\r\n    if (!forHiddenEdges) {\r\n      const colorDiv = document.createElement(\"div\");\r\n      div.appendChild(colorDiv);\r\n\r\n      colorCb = document.createElement(\"input\");\r\n      colorCb.type = \"checkbox\";\r\n      colorCb.id = this._nextId;\r\n      colorCb.checked = settings.ovrColor;\r\n      colorDiv.appendChild(colorCb);\r\n\r\n      const color = undefined !== settings.color ? settings.color.toHexString() : \"#ffffff\";\r\n      colorInput = createColorInput({\r\n        parent: colorDiv,\r\n        id: this._nextId,\r\n        label: \"Color\",\r\n        value: color,\r\n        display: \"inline\",\r\n        disabled: !settings.ovrColor,\r\n        handler: (value: string) => overrideSettings(getSettings().overrideColor(ColorDef.create(value))),\r\n      }).input;\r\n\r\n      colorCb.addEventListener(\"click\", () => overrideSettings(getSettings().overrideColor(colorCb!.checked ? ColorDef.create(colorInput!.value) : undefined)));\r\n    }\r\n\r\n    // Width override\r\n    const widthDiv = document.createElement(\"div\");\r\n    div.appendChild(widthDiv);\r\n\r\n    const widthCb = document.createElement(\"input\");\r\n    widthCb.type = \"checkbox\";\r\n    widthCb.id = this._nextId;\r\n    widthCb.checked = undefined !== settings.width;\r\n    widthDiv.appendChild(widthCb);\r\n\r\n    const widthLabel = document.createElement(\"label\");\r\n    widthLabel.htmlFor = widthCb.id;\r\n    widthLabel.innerText = \"Weight \";\r\n    widthDiv.appendChild(widthLabel);\r\n\r\n    const width = createNumericInput({\r\n      parent: widthDiv,\r\n      value: undefined !== settings.width ? settings.width : 1,\r\n      disabled: undefined === settings.width,\r\n      min: 1,\r\n      max: 31,\r\n      step: 1,\r\n      handler: (value) => overrideSettings(getSettings().overrideWidth(value)),\r\n    });\r\n    widthDiv.appendChild(width);\r\n    widthCb.addEventListener(\"click\", () => overrideSettings(getSettings().overrideWidth(widthCb.checked ? parseInt(width.value, 10) : undefined)));\r\n\r\n    // Line style override\r\n    const patternCb = Settings.addStyle(div, settings.pattern ? settings.pattern : LinePixels.Invalid, (select) => {\r\n      overrideSettings(getSettings().overridePattern(parseInt(select.value, 10)));\r\n    });\r\n\r\n    // Synchronization\r\n    this._updates.push((view: ViewState) => {\r\n      if (view.is2d()) {\r\n        div.hidden = true;\r\n        return;\r\n      }\r\n\r\n      const curStyle = getSettings();\r\n      if (undefined !== colorCb && undefined !== colorInput) {\r\n        colorCb.checked = undefined !== curStyle.color;\r\n        colorInput.disabled = !colorCb.checked;\r\n        if (undefined !== curStyle.color)\r\n          colorInput.value = curStyle.color.toHexString();\r\n      }\r\n\r\n      widthCb.checked = undefined !== curStyle.width;\r\n      width.disabled = !widthCb.checked;\r\n      if (undefined !== curStyle.width)\r\n        width.value = curStyle.width.toString();\r\n\r\n      const pix = undefined !== curStyle.pattern ? curStyle.pattern : LinePixels.Invalid;\r\n      patternCb.select.value = pix.toString();\r\n    });\r\n\r\n    return div;\r\n  }\r\n}\r\n\r\nexport class ViewAttributesPanel extends ToolBarDropDown {\r\n  private readonly _vp: Viewport;\r\n  private readonly _parent: HTMLElement;\r\n  private _attributes?: ViewAttributes;\r\n  private _displayStylePickerInput?: ComboBox;\r\n  private _disableEdges: boolean;\r\n\r\n  public constructor(vp: Viewport, parent: HTMLElement, disableEdges: boolean) {\r\n    super();\r\n    this._vp = vp;\r\n    this._parent = parent;\r\n    this._disableEdges = disableEdges;\r\n    this.open();\r\n  }\r\n\r\n  public async populate(): Promise<void> {\r\n    if (undefined !== this._displayStylePickerInput)\r\n      this._displayStylePickerInput.select.disabled = true;\r\n\r\n    const view = this._vp.view;\r\n    const is3d = view.is3d();\r\n    const sqlName: string = is3d ? DisplayStyle3dState.classFullName : DisplayStyle2dState.classFullName;\r\n    const displayStyleProps = await this._vp.view.iModel.elements.queryProps({ from: sqlName, where: \"IsPrivate=FALSE\" });\r\n    const displayStyles = new Map<Id64String, DisplayStyleState>();\r\n    const styleEntries = [];\r\n    const promises: Array<Promise<void>> = [];\r\n    for (const displayStyleProp of displayStyleProps) {\r\n      styleEntries.push({ name: displayStyleProp.code.value!, value: displayStyleProp.id });\r\n      let displayStyle: DisplayStyleState;\r\n      if (is3d)\r\n        displayStyle = new DisplayStyle3dState(displayStyleProp, view.iModel);\r\n      else\r\n        displayStyle = new DisplayStyle2dState(displayStyleProp, view.iModel);\r\n\r\n      displayStyles.set(displayStyleProp.id!, displayStyle);\r\n    }\r\n\r\n    await Promise.all(promises);\r\n\r\n    this._displayStylePickerInput = createComboBox({\r\n      name: \"Display Style: \",\r\n      id: \"DisplayStyles\",\r\n      value: this._vp.view.displayStyle.id,\r\n      handler: async (select) => {\r\n        const style = displayStyles.get(select.value)!;\r\n        await style.load();\r\n        this._vp.displayStyle = style;\r\n        this._vp.invalidateScene();\r\n      },\r\n      entries: styleEntries,\r\n    });\r\n\r\n    this._displayStylePickerInput.select.disabled = false;\r\n    if (undefined !== this._attributes)\r\n      this._attributes.displayStylePickerInput = this._displayStylePickerInput;\r\n  }\r\n  public override get onViewChanged(): Promise<void> {\r\n    return this.populate();\r\n  }\r\n\r\n  public get isOpen() { return undefined !== this._attributes; }\r\n  protected _open(): void {\r\n    this._attributes = new ViewAttributes(this._vp, this._parent, this._disableEdges);\r\n    const loadingComboBox = createComboBox({\r\n      name: \"Display Style: \",\r\n      id: \"DisplayStyles\",\r\n      entries: [{ name: \"Now Loading...\", value: undefined }],\r\n    });\r\n    if (undefined === this._displayStylePickerInput)\r\n      this._attributes.displayStylePickerInput = loadingComboBox;\r\n    else\r\n      this._attributes.displayStylePickerInput = this._displayStylePickerInput;\r\n  }\r\n\r\n  protected _close(): void {\r\n    if (undefined !== this._attributes) {\r\n      this._attributes.dispose();\r\n      this._attributes = undefined;\r\n    }\r\n  }\r\n}\r\n"
        ],
        "mappings": "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",
        "names": []
      }
    }
  ]
}
