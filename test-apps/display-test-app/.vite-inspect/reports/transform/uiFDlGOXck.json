{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/bentley/lib/esm/BeEvent.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Events\n */\nimport { UnexpectedErrors } from \"./UnexpectedErrors\";\n/**\n * Manages a set of *listeners* for a particular event and notifies them when the event is raised.\n * This class is usually instantiated inside of a container class and\n * exposed as a property for others to *subscribe* via [[BeEvent.addListener]].\n * @public\n */\nexport class BeEvent {\n    constructor() {\n        this._listeners = [];\n        this._insideRaiseEvent = false;\n    }\n    /** The number of listeners currently subscribed to the event. */\n    get numberOfListeners() { return this._listeners.length; }\n    /**\n     * Registers a Listener to be executed whenever this event is raised.\n     * @param listener The function to be executed when the event is raised.\n     * @param scope An optional object scope to serve as the 'this' pointer when listener is invoked.\n     * @returns A function that will remove this event listener.\n     * @see [[BeEvent.raiseEvent]], [[BeEvent.removeListener]]\n     */\n    addListener(listener, scope) {\n        this._listeners.push({ listener, scope, once: false });\n        return () => this.removeListener(listener, scope);\n    }\n    /**\n     * Registers a callback function to be executed *only once* when the event is raised.\n     * @param listener The function to be executed once when the event is raised.\n     * @param scope An optional object scope to serve as the `this` pointer in which the listener function will execute.\n     * @returns A function that will remove this event listener.\n     * @see [[BeEvent.raiseEvent]], [[BeEvent.removeListener]]\n     */\n    addOnce(listener, scope) {\n        this._listeners.push({ listener, scope, once: true });\n        return () => this.removeListener(listener, scope);\n    }\n    /**\n     * Un-register a previously registered listener.\n     * @param listener The listener to be unregistered.\n     * @param  scope The scope that was originally passed to addListener.\n     * @returns 'true' if the listener was removed; 'false' if the listener and scope are not registered with the event.\n     * @see [[BeEvent.raiseEvent]], [[BeEvent.addListener]]\n     */\n    removeListener(listener, scope) {\n        const listeners = this._listeners;\n        for (let i = 0; i < listeners.length; ++i) {\n            const context = listeners[i];\n            if (context.listener === listener && context.scope === scope) {\n                if (this._insideRaiseEvent) {\n                    context.listener = undefined;\n                }\n                else {\n                    listeners.splice(i, 1);\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Raises the event by calling each registered listener with the supplied arguments.\n     * @param args This method takes any number of parameters and passes them through to the listeners.\n     * @see [[BeEvent.removeListener]], [[BeEvent.addListener]]\n     */\n    raiseEvent(...args) {\n        this._insideRaiseEvent = true;\n        const listeners = this._listeners;\n        const length = listeners.length;\n        let dropped = false;\n        for (let i = 0; i < length; ++i) {\n            const context = listeners[i];\n            if (!context.listener) {\n                dropped = true;\n            }\n            else {\n                try {\n                    context.listener.apply(context.scope, args);\n                }\n                catch (e) {\n                    UnexpectedErrors.handle(e);\n                }\n                if (context.once) {\n                    context.listener = undefined;\n                    dropped = true;\n                }\n            }\n        }\n        // if we had dropped listeners, remove them now\n        if (dropped)\n            this._listeners = this._listeners.filter((ctx) => ctx.listener !== undefined);\n        this._insideRaiseEvent = false;\n    }\n    /** Determine whether this BeEvent has a specified listener registered.\n     * @param listener The listener to check.\n     * @param scope optional scope argument to match call to addListener\n     */\n    has(listener, scope) {\n        for (const ctx of this._listeners) {\n            if (ctx.listener === listener && ctx.scope === scope) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /** Clear all Listeners from this BeEvent. */\n    clear() { this._listeners.length = 0; }\n}\n/** Specialization of BeEvent for events that take a single strongly typed argument, primarily used for UI events.\n * @public\n */\nexport class BeUiEvent extends BeEvent {\n    /** Raises event with single strongly typed argument. */\n    emit(args) { this.raiseEvent(args); }\n}\n/**\n * A list of BeEvent objects, accessible by an event name.\n * This class may be used instead of explicitly declaring each BeEvent as a member of a containing class.\n * @public\n */\nexport class BeEventList {\n    constructor() {\n        this._events = {};\n    }\n    /**\n     * Gets the event associated with the specified name, creating the event if it does not already exist.\n     * @param name The name of the event.\n     */\n    get(name) {\n        let event = this._events[name];\n        if (event)\n            return event;\n        event = new BeEvent();\n        this._events[name] = event;\n        return event;\n    }\n    /**\n     * Removes the event associated with a name.\n     * @param name The name of the event.\n     */\n    remove(name) {\n        this._events[name] = undefined;\n    }\n}\n//# sourceMappingURL=BeEvent.js.map",
      "start": 1693508120229,
      "end": 1693508120599,
      "sourcemaps": null
    }
  ]
}
