{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/electron/lib/cjs/common/ElectronIpcTransport.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "\"use strict\";\n/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.initializeIpc = exports.BackendIpcTransport = exports.FrontendIpcTransport = exports.ElectronIpcTransport = void 0;\nconst core_bentley_1 = require(\"@itwin/core-bentley\");\nconst core_common_1 = require(\"@itwin/core-common\");\nconst ElectronPush_1 = require(\"./ElectronPush\");\nconst ElectronRpcManager_1 = require(\"./ElectronRpcManager\");\nconst OBJECTS_CHANNEL = (0, core_common_1.iTwinChannel)(\"rpc.objects\");\nconst DATA_CHANNEL = (0, core_common_1.iTwinChannel)(\"rpc.data\");\n/** @internal */\nclass ElectronIpcTransport {\n    get protocol() { return this._protocol; }\n    sendRequest(request) {\n        const value = this._extractValue(request);\n        this._send(request, value);\n    }\n    constructor(protocol) {\n        this._removeListeners = [];\n        this._protocol = protocol;\n        this._partials = new Map();\n        this._setupDataChannel();\n        this._setupObjectsChannel();\n        this.setupPush();\n    }\n    setupPush() { }\n    _setupDataChannel() {\n        const removeListener = this.protocol.ipcSocket.addListener(DATA_CHANNEL, async (evt, chunk) => {\n            let pending = this._partials.get(chunk.id);\n            if (!pending) {\n                pending = [];\n                this._partials.set(chunk.id, pending);\n            }\n            if (Array.isArray(pending)) {\n                pending.push(chunk);\n            }\n            else {\n                ++pending.received;\n                const value = this._extractValue(pending.message);\n                value.data[chunk.index] = chunk.data;\n                if (pending.received === (value.chunks || 0)) {\n                    this.handleComplete(pending.message.id, evt);\n                }\n            }\n        });\n        this._removeListeners.push(removeListener);\n    }\n    _setupObjectsChannel() {\n        const removeListener = this.protocol.ipcSocket.addListener(OBJECTS_CHANNEL, async (evt, message) => {\n            const pending = this._partials.get(message.id);\n            if (pending && !Array.isArray(pending)) {\n                throw new core_common_1.IModelError(core_bentley_1.BentleyStatus.ERROR, `Message already received for id \"${message.id}\".`);\n            }\n            const partial = { message, received: 0 };\n            this._partials.set(message.id, partial);\n            const value = this._extractValue(partial.message);\n            if (pending && Array.isArray(pending)) {\n                for (const chunk of pending) {\n                    ++partial.received;\n                    value.data[chunk.index] = chunk.data;\n                }\n            }\n            if (partial.received === (value.chunks || 0)) {\n                this.handleComplete(message.id, evt);\n            }\n        });\n        this._removeListeners.push(removeListener);\n    }\n    _extractValue(t) {\n        if (t.parameters) {\n            return t.parameters;\n        }\n        if (t.result) {\n            return t.result;\n        }\n        throw new core_common_1.IModelError(core_bentley_1.BentleyStatus.ERROR, \"Unknown value type.\");\n    }\n    _send(message, value, evt) {\n        const chunks = value.data;\n        if (chunks.length) {\n            value.chunks = chunks.length;\n            value.data = [];\n        }\n        this.performSend(OBJECTS_CHANNEL, message, evt);\n        for (let index = 0; index !== chunks.length; ++index) {\n            const chunk = { id: message.id, index, data: chunks[index] };\n            this.performSend(DATA_CHANNEL, chunk, evt);\n        }\n    }\n    performSend(channel, message, evt) {\n        (evt ? evt.sender : this.protocol.ipcSocket).send(channel, message);\n    }\n    /** @internal */\n    sendResponse(message, evt) {\n        const value = this._extractValue(message);\n        this._send(message, value, evt);\n    }\n    loadMessage(id) {\n        const partial = this._partials.get(id);\n        if (!partial || Array.isArray(partial)) {\n            throw new core_common_1.IModelError(core_bentley_1.BentleyStatus.ERROR, `Incomplete transmission for id \"${id}\".`);\n        }\n        this._partials.delete(id);\n        return partial.message;\n    }\n    cleanup() {\n        this._removeListeners.forEach((removeListener) => removeListener());\n    }\n}\nexports.ElectronIpcTransport = ElectronIpcTransport;\n/** @internal */\nclass FrontendIpcTransport extends ElectronIpcTransport {\n    setupPush() {\n        const pushTransport = new ElectronPush_1.ElectronPushTransport(this);\n        this._pushTransport = pushTransport;\n        core_common_1.RpcPushChannel.setup(pushTransport);\n    }\n    async handleComplete(id) {\n        const message = this.loadMessage(id);\n        if (this._pushTransport && this._pushTransport.consume(message)) {\n            return;\n        }\n        const protocol = this._protocol;\n        const request = protocol.requests.get(message.id);\n        request.notifyResponse(message);\n    }\n}\nexports.FrontendIpcTransport = FrontendIpcTransport;\n/** @internal */\nclass BackendIpcTransport extends ElectronIpcTransport {\n    setupPush() {\n        core_common_1.RpcPushConnection.for = (channel, client) => new ElectronPush_1.ElectronPushConnection(channel, client, this);\n        core_common_1.RpcPushChannel.enabled = true;\n    }\n    async handleComplete(id, evt) {\n        const message = this.loadMessage(id);\n        let response;\n        try {\n            const protocol = this._protocol;\n            response = await protocol.fulfill(message);\n        }\n        catch (err) {\n            response = await core_common_1.RpcRequestFulfillment.forUnknownError(message, err);\n        }\n        const raw = response.rawResult;\n        response.rawResult = undefined; // Otherwise, it will be serialized in IPC layer and large responses will then crash the app\n        this.sendResponse(response, evt);\n        response.rawResult = raw;\n    }\n    performSend(channel, message, evt) {\n        if (evt) {\n            return super.performSend(channel, message, evt);\n        }\n        this._requireBrowserWindow();\n        const target = ElectronRpcManager_1.ElectronRpcConfiguration.targetWindowId;\n        const windows = target ? [this._browserWindow.fromId(target)] : this._browserWindow.getAllWindows();\n        windows.forEach((window) => window.webContents.send(channel, message));\n    }\n    _requireBrowserWindow() {\n        if (this._browserWindow) {\n            return;\n        }\n        try { // Wrapping require in a try/catch signals to webpack that this is only an optional dependency\n            this._browserWindow = require(\"electron\").BrowserWindow; // eslint-disable-line @typescript-eslint/no-var-requires\n        }\n        catch (err) {\n            throw new core_common_1.IModelError(core_bentley_1.BentleyStatus.ERROR, `Error requiring electron`, () => core_bentley_1.BentleyError.getErrorProps(err));\n        }\n    }\n}\nexports.BackendIpcTransport = BackendIpcTransport;\nlet transport;\n/** @internal */\nfunction initializeIpc(protocol) {\n    if (transport && transport.protocol !== protocol) {\n        transport.cleanup();\n        transport = undefined;\n    }\n    if (undefined === transport)\n        transport = core_bentley_1.ProcessDetector.isElectronAppFrontend ? new FrontendIpcTransport(protocol) : new BackendIpcTransport(protocol);\n    return transport;\n}\nexports.initializeIpc = initializeIpc;\n//# sourceMappingURL=ElectronIpcTransport.js.map",
      "start": 1693508126634,
      "end": 1693508126690,
      "sourcemaps": null
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as ElectronIpcTransport_1 } from \"\\u0000D:/hub2023A/itwinjs-core/core/electron/lib/cjs/common/ElectronIpcTransport.js?commonjs-exports\";\nimport require$$0 from \"\\u0000D:/hub2023A/itwinjs-core/core/bentley/lib/esm/core-bentley.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000D:/hub2023A/itwinjs-core/core/common/lib/esm/core-common.js?commonjs-proxy\";\nimport require$$2 from \"\\u0000D:/hub2023A/itwinjs-core/core/electron/lib/cjs/common/ElectronPush.js?commonjs-proxy\";\nimport { __require as require$$3 } from \"\\u0000D:/hub2023A/itwinjs-core/core/electron/lib/cjs/common/ElectronRpcManager.js?commonjs-wrapped\";\nimport { __require as require$$4 } from \"\\u0000D:/hub2023A/itwinjs-core/common/temp/node_modules/.pnpm/electron@25.3.1/node_modules/electron/index.js?commonjs-wrapped\";\n\nvar hasRequiredElectronIpcTransport;\n\nfunction requireElectronIpcTransport () {\n\tif (hasRequiredElectronIpcTransport) return ElectronIpcTransport_1;\n\thasRequiredElectronIpcTransport = 1;\n\t\"use strict\";\n\t/*---------------------------------------------------------------------------------------------\n\t* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n\t* See LICENSE.md in the project root for license terms and full copyright notice.\n\t*--------------------------------------------------------------------------------------------*/\n\tObject.defineProperty(ElectronIpcTransport_1, \"__esModule\", { value: true });\n\tElectronIpcTransport_1.initializeIpc = ElectronIpcTransport_1.BackendIpcTransport = ElectronIpcTransport_1.FrontendIpcTransport = ElectronIpcTransport_1.ElectronIpcTransport = void 0;\n\tconst core_bentley_1 = require$$0;\n\tconst core_common_1 = require$$1;\n\tconst ElectronPush_1 = require$$2;\n\tconst ElectronRpcManager_1 = require$$3();\n\tconst OBJECTS_CHANNEL = (0, core_common_1.iTwinChannel)(\"rpc.objects\");\n\tconst DATA_CHANNEL = (0, core_common_1.iTwinChannel)(\"rpc.data\");\n\t/** @internal */\n\tclass ElectronIpcTransport {\n\t    get protocol() { return this._protocol; }\n\t    sendRequest(request) {\n\t        const value = this._extractValue(request);\n\t        this._send(request, value);\n\t    }\n\t    constructor(protocol) {\n\t        this._removeListeners = [];\n\t        this._protocol = protocol;\n\t        this._partials = new Map();\n\t        this._setupDataChannel();\n\t        this._setupObjectsChannel();\n\t        this.setupPush();\n\t    }\n\t    setupPush() { }\n\t    _setupDataChannel() {\n\t        const removeListener = this.protocol.ipcSocket.addListener(DATA_CHANNEL, async (evt, chunk) => {\n\t            let pending = this._partials.get(chunk.id);\n\t            if (!pending) {\n\t                pending = [];\n\t                this._partials.set(chunk.id, pending);\n\t            }\n\t            if (Array.isArray(pending)) {\n\t                pending.push(chunk);\n\t            }\n\t            else {\n\t                ++pending.received;\n\t                const value = this._extractValue(pending.message);\n\t                value.data[chunk.index] = chunk.data;\n\t                if (pending.received === (value.chunks || 0)) {\n\t                    this.handleComplete(pending.message.id, evt);\n\t                }\n\t            }\n\t        });\n\t        this._removeListeners.push(removeListener);\n\t    }\n\t    _setupObjectsChannel() {\n\t        const removeListener = this.protocol.ipcSocket.addListener(OBJECTS_CHANNEL, async (evt, message) => {\n\t            const pending = this._partials.get(message.id);\n\t            if (pending && !Array.isArray(pending)) {\n\t                throw new core_common_1.IModelError(core_bentley_1.BentleyStatus.ERROR, `Message already received for id \"${message.id}\".`);\n\t            }\n\t            const partial = { message, received: 0 };\n\t            this._partials.set(message.id, partial);\n\t            const value = this._extractValue(partial.message);\n\t            if (pending && Array.isArray(pending)) {\n\t                for (const chunk of pending) {\n\t                    ++partial.received;\n\t                    value.data[chunk.index] = chunk.data;\n\t                }\n\t            }\n\t            if (partial.received === (value.chunks || 0)) {\n\t                this.handleComplete(message.id, evt);\n\t            }\n\t        });\n\t        this._removeListeners.push(removeListener);\n\t    }\n\t    _extractValue(t) {\n\t        if (t.parameters) {\n\t            return t.parameters;\n\t        }\n\t        if (t.result) {\n\t            return t.result;\n\t        }\n\t        throw new core_common_1.IModelError(core_bentley_1.BentleyStatus.ERROR, \"Unknown value type.\");\n\t    }\n\t    _send(message, value, evt) {\n\t        const chunks = value.data;\n\t        if (chunks.length) {\n\t            value.chunks = chunks.length;\n\t            value.data = [];\n\t        }\n\t        this.performSend(OBJECTS_CHANNEL, message, evt);\n\t        for (let index = 0; index !== chunks.length; ++index) {\n\t            const chunk = { id: message.id, index, data: chunks[index] };\n\t            this.performSend(DATA_CHANNEL, chunk, evt);\n\t        }\n\t    }\n\t    performSend(channel, message, evt) {\n\t        (evt ? evt.sender : this.protocol.ipcSocket).send(channel, message);\n\t    }\n\t    /** @internal */\n\t    sendResponse(message, evt) {\n\t        const value = this._extractValue(message);\n\t        this._send(message, value, evt);\n\t    }\n\t    loadMessage(id) {\n\t        const partial = this._partials.get(id);\n\t        if (!partial || Array.isArray(partial)) {\n\t            throw new core_common_1.IModelError(core_bentley_1.BentleyStatus.ERROR, `Incomplete transmission for id \"${id}\".`);\n\t        }\n\t        this._partials.delete(id);\n\t        return partial.message;\n\t    }\n\t    cleanup() {\n\t        this._removeListeners.forEach((removeListener) => removeListener());\n\t    }\n\t}\n\tElectronIpcTransport_1.ElectronIpcTransport = ElectronIpcTransport;\n\t/** @internal */\n\tclass FrontendIpcTransport extends ElectronIpcTransport {\n\t    setupPush() {\n\t        const pushTransport = new ElectronPush_1.ElectronPushTransport(this);\n\t        this._pushTransport = pushTransport;\n\t        core_common_1.RpcPushChannel.setup(pushTransport);\n\t    }\n\t    async handleComplete(id) {\n\t        const message = this.loadMessage(id);\n\t        if (this._pushTransport && this._pushTransport.consume(message)) {\n\t            return;\n\t        }\n\t        const protocol = this._protocol;\n\t        const request = protocol.requests.get(message.id);\n\t        request.notifyResponse(message);\n\t    }\n\t}\n\tElectronIpcTransport_1.FrontendIpcTransport = FrontendIpcTransport;\n\t/** @internal */\n\tclass BackendIpcTransport extends ElectronIpcTransport {\n\t    setupPush() {\n\t        core_common_1.RpcPushConnection.for = (channel, client) => new ElectronPush_1.ElectronPushConnection(channel, client, this);\n\t        core_common_1.RpcPushChannel.enabled = true;\n\t    }\n\t    async handleComplete(id, evt) {\n\t        const message = this.loadMessage(id);\n\t        let response;\n\t        try {\n\t            const protocol = this._protocol;\n\t            response = await protocol.fulfill(message);\n\t        }\n\t        catch (err) {\n\t            response = await core_common_1.RpcRequestFulfillment.forUnknownError(message, err);\n\t        }\n\t        const raw = response.rawResult;\n\t        response.rawResult = undefined; // Otherwise, it will be serialized in IPC layer and large responses will then crash the app\n\t        this.sendResponse(response, evt);\n\t        response.rawResult = raw;\n\t    }\n\t    performSend(channel, message, evt) {\n\t        if (evt) {\n\t            return super.performSend(channel, message, evt);\n\t        }\n\t        this._requireBrowserWindow();\n\t        const target = ElectronRpcManager_1.ElectronRpcConfiguration.targetWindowId;\n\t        const windows = target ? [this._browserWindow.fromId(target)] : this._browserWindow.getAllWindows();\n\t        windows.forEach((window) => window.webContents.send(channel, message));\n\t    }\n\t    _requireBrowserWindow() {\n\t        if (this._browserWindow) {\n\t            return;\n\t        }\n\t        try { // Wrapping require in a try/catch signals to webpack that this is only an optional dependency\n\t            this._browserWindow = require$$4().BrowserWindow; // eslint-disable-line @typescript-eslint/no-var-requires\n\t        }\n\t        catch (err) {\n\t            throw new core_common_1.IModelError(core_bentley_1.BentleyStatus.ERROR, `Error requiring electron`, () => core_bentley_1.BentleyError.getErrorProps(err));\n\t        }\n\t    }\n\t}\n\tElectronIpcTransport_1.BackendIpcTransport = BackendIpcTransport;\n\tlet transport;\n\t/** @internal */\n\tfunction initializeIpc(protocol) {\n\t    if (transport && transport.protocol !== protocol) {\n\t        transport.cleanup();\n\t        transport = undefined;\n\t    }\n\t    if (undefined === transport)\n\t        transport = core_bentley_1.ProcessDetector.isElectronAppFrontend ? new FrontendIpcTransport(protocol) : new BackendIpcTransport(protocol);\n\t    return transport;\n\t}\n\tElectronIpcTransport_1.initializeIpc = initializeIpc;\n\t//# sourceMappingURL=ElectronIpcTransport.js.map\n\treturn ElectronIpcTransport_1;\n}\n\nexport { requireElectronIpcTransport as __require };",
      "start": 1693508126691,
      "end": 1693508127299,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "file": null,
        "sources": [
          null
        ],
        "sourcesContent": [
          null
        ],
        "names": [],
        "mappings": "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"
      }
    }
  ]
}
