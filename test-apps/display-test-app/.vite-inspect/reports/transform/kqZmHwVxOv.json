{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/ContextRealityModelState.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Views\n */\nimport { ContextRealityModel, FeatureAppearance, RealityDataFormat } from \"@itwin/core-common\";\nimport { PlanarClipMaskState } from \"./PlanarClipMaskState\";\nimport { RealityDataSource } from \"./RealityDataSource\";\nimport { createOrbitGtTileTreeReference, createRealityTileTreeReference, RealityModelTileTree } from \"./tile/internal\";\n/** A [ContextRealityModel]($common) attached to a [[DisplayStyleState]] supplying a [[TileTreeReference]] used to draw the\n * reality model in a [[Viewport]].\n * @see [DisplayStyleSettings.contextRealityModels]($common).\n * @see [[DisplayStyleState.contextRealityModelStates]].\n * @see [[DisplayStyleState.attachRealityModel]].\n * @public\n * @extensions\n */\nexport class ContextRealityModelState extends ContextRealityModel {\n    /** @internal */\n    constructor(props, iModel, displayStyle) {\n        super(props);\n        this.iModel = iModel;\n        this._appearanceOverrides = props.appearanceOverrides ? FeatureAppearance.fromJSON(props.appearanceOverrides) : undefined;\n        if (undefined === props.orbitGtBlob) {\n            this.rdSourceKey = props.rdSourceKey ? props.rdSourceKey : RealityDataSource.createKeyFromUrl(props.tilesetUrl);\n        }\n        else {\n            this.rdSourceKey = props.rdSourceKey ? props.rdSourceKey : RealityDataSource.createKeyFromOrbitGtBlobProps(props.orbitGtBlob);\n        }\n        const useOrbitGtTileTreeReference = this.rdSourceKey.format === RealityDataFormat.OPC;\n        this._treeRef = (!useOrbitGtTileTreeReference) ?\n            createRealityTileTreeReference({\n                iModel,\n                source: displayStyle,\n                rdSourceKey: this.rdSourceKey,\n                url: props.tilesetUrl,\n                name: props.name,\n                classifiers: this.classifiers,\n                planarClipMask: this.planarClipMaskSettings,\n                getDisplaySettings: () => this.displaySettings,\n            }) :\n            createOrbitGtTileTreeReference({\n                iModel,\n                orbitGtBlob: props.orbitGtBlob,\n                rdSourceKey: this.rdSourceKey,\n                name: props.name,\n                classifiers: this.classifiers,\n                source: displayStyle,\n                getDisplaySettings: () => this.displaySettings,\n            });\n        this.onPlanarClipMaskChanged.addListener((newSettings) => {\n            this._treeRef.planarClipMask = newSettings ? PlanarClipMaskState.create(newSettings) : undefined;\n        });\n    }\n    /** The tile tree reference responsible for drawing the reality model into a [[Viewport]]. */\n    get treeRef() { return this._treeRef; }\n    /** The transient Id assigned to this reality model at run-time. */\n    get modelId() {\n        return (this._treeRef instanceof RealityModelTileTree.Reference) ? this._treeRef.modelId : undefined;\n    }\n    /** Whether the reality model spans the entire globe ellipsoid. */\n    get isGlobal() {\n        return this.treeRef.isGlobal;\n    }\n}\n//# sourceMappingURL=ContextRealityModelState.js.map",
      "start": 1693508119148,
      "end": 1693508119330,
      "sourcemaps": null
    }
  ]
}
