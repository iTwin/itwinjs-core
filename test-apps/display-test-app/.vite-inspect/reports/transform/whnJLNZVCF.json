{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/SyncViewportsTool.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport {\r\n  connectViewportFrusta, connectViewportViews, IModelApp, Tool, Viewport,\r\n} from \"@itwin/core-frontend\";\r\n\r\nclass State {\r\n  private readonly _viewportIds: number[];\r\n\r\n  constructor(viewports: Viewport[], public readonly disconnect: () => void) {\r\n    this._viewportIds = viewports.map((x) => x.viewportId).sort();\r\n  }\r\n\r\n  public equals(viewports: Viewport[]) {\r\n    if (viewports.length !== this._viewportIds.length)\r\n      return false;\r\n\r\n    const ids = viewports.map((x) => x.viewportId).sort();\r\n    return ids.every((val, idx) => val === this._viewportIds[idx]);\r\n  }\r\n}\r\n\r\n/** Connect or disconnect two or more viewports using connectViewports. */\r\nexport class SyncViewportsTool extends Tool {\r\n  public static override toolId = \"SyncViewports\";\r\n  public static override get minArgs() { return 0; }\r\n  public static override get maxArgs() { return undefined; }\r\n\r\n  protected get syncType(): \"frustum\" | \"view\" { return \"view\"; }\r\n\r\n  private static _state?: State;\r\n  private static _removeListeners?: VoidFunction;\r\n\r\n  public override async run(vps?: Viewport[]): Promise<boolean> {\r\n    const that = SyncViewportsTool;\r\n    if (!vps || vps.length < 2) {\r\n      that.disconnect();\r\n    } else {\r\n      if (that._state && that._state.equals(vps))\r\n        that.disconnect();\r\n      else\r\n        that.connect(vps, this.syncType);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public override async parseAndRun(...args: string[]): Promise<boolean> {\r\n    if (args.length === 0)\r\n      return this.run();\r\n\r\n    const allVps = Array.from(IModelApp.viewManager);\r\n    if (args.length === 1)\r\n      return args[0].toLowerCase() === \"all\" ? this.run(allVps) : false;\r\n\r\n    const vps: Viewport[] = [];\r\n    for (const arg of args) {\r\n      const vpId = Number.parseInt(arg, 10);\r\n      if (Number.isNaN(vpId))\r\n        return false;\r\n\r\n      const vp = allVps.find((x) => x.viewportId === vpId);\r\n      if (!vp)\r\n        return false;\r\n\r\n      vps.push(vp);\r\n    }\r\n\r\n    return this.run(vps);\r\n  }\r\n\r\n  private static connect(vps: Viewport[], syncType: \"view\" | \"frustum\"): void {\r\n    this.disconnect();\r\n    const connect = \"view\" === syncType ? connectViewportViews : connectViewportFrusta;\r\n    this._state = new State(vps, connect(vps));\r\n    const dispose = vps.map((x) => x.onDisposed.addOnce(() => this.disconnect()));\r\n    this._removeListeners = () => dispose.forEach((x) => x());\r\n  }\r\n\r\n  private static disconnect(): void {\r\n    this._state?.disconnect();\r\n    this._state = undefined;\r\n\r\n    if (this._removeListeners) {\r\n      this._removeListeners();\r\n      this._removeListeners = undefined;\r\n    }\r\n  }\r\n}\r\n\r\n/** Connect or disconnect two viewports using TwoWayViewportFrustumSync. */\r\nexport class SyncViewportFrustaTool extends SyncViewportsTool {\r\n  public static override toolId = \"SyncFrusta\";\r\n\r\n  protected override get syncType() { return \"frustum\" as const; }\r\n}\r\n",
      "start": 1693508121247,
      "end": 1693508121314,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport {\n  connectViewportFrusta,\n  connectViewportViews,\n  IModelApp,\n  Tool\n} from \"@itwin/core-frontend\";\nclass State {\n  constructor(viewports, disconnect) {\n    this.disconnect = disconnect;\n    this._viewportIds = viewports.map((x) => x.viewportId).sort();\n  }\n  equals(viewports) {\n    if (viewports.length !== this._viewportIds.length)\n      return false;\n    const ids = viewports.map((x) => x.viewportId).sort();\n    return ids.every((val, idx) => val === this._viewportIds[idx]);\n  }\n}\nconst _SyncViewportsTool = class _SyncViewportsTool extends Tool {\n  static get minArgs() {\n    return 0;\n  }\n  static get maxArgs() {\n    return void 0;\n  }\n  get syncType() {\n    return \"view\";\n  }\n  async run(vps) {\n    const that = _SyncViewportsTool;\n    if (!vps || vps.length < 2) {\n      that.disconnect();\n    } else {\n      if (that._state && that._state.equals(vps))\n        that.disconnect();\n      else\n        that.connect(vps, this.syncType);\n    }\n    return true;\n  }\n  async parseAndRun(...args) {\n    if (args.length === 0)\n      return this.run();\n    const allVps = Array.from(IModelApp.viewManager);\n    if (args.length === 1)\n      return args[0].toLowerCase() === \"all\" ? this.run(allVps) : false;\n    const vps = [];\n    for (const arg of args) {\n      const vpId = Number.parseInt(arg, 10);\n      if (Number.isNaN(vpId))\n        return false;\n      const vp = allVps.find((x) => x.viewportId === vpId);\n      if (!vp)\n        return false;\n      vps.push(vp);\n    }\n    return this.run(vps);\n  }\n  static connect(vps, syncType) {\n    this.disconnect();\n    const connect = \"view\" === syncType ? connectViewportViews : connectViewportFrusta;\n    this._state = new State(vps, connect(vps));\n    const dispose = vps.map((x) => x.onDisposed.addOnce(() => this.disconnect()));\n    this._removeListeners = () => dispose.forEach((x) => x());\n  }\n  static disconnect() {\n    this._state?.disconnect();\n    this._state = void 0;\n    if (this._removeListeners) {\n      this._removeListeners();\n      this._removeListeners = void 0;\n    }\n  }\n};\n_SyncViewportsTool.toolId = \"SyncViewports\";\nexport let SyncViewportsTool = _SyncViewportsTool;\nexport class SyncViewportFrustaTool extends SyncViewportsTool {\n  get syncType() {\n    return \"frustum\";\n  }\n}\nSyncViewportFrustaTool.toolId = \"SyncFrusta\";\n",
      "start": 1693508121314,
      "end": 1693508121469,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/SyncViewportsTool.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport {\r\n  connectViewportFrusta, connectViewportViews, IModelApp, Tool, Viewport,\r\n} from \"@itwin/core-frontend\";\r\n\r\nclass State {\r\n  private readonly _viewportIds: number[];\r\n\r\n  constructor(viewports: Viewport[], public readonly disconnect: () => void) {\r\n    this._viewportIds = viewports.map((x) => x.viewportId).sort();\r\n  }\r\n\r\n  public equals(viewports: Viewport[]) {\r\n    if (viewports.length !== this._viewportIds.length)\r\n      return false;\r\n\r\n    const ids = viewports.map((x) => x.viewportId).sort();\r\n    return ids.every((val, idx) => val === this._viewportIds[idx]);\r\n  }\r\n}\r\n\r\n/** Connect or disconnect two or more viewports using connectViewports. */\r\nexport class SyncViewportsTool extends Tool {\r\n  public static override toolId = \"SyncViewports\";\r\n  public static override get minArgs() { return 0; }\r\n  public static override get maxArgs() { return undefined; }\r\n\r\n  protected get syncType(): \"frustum\" | \"view\" { return \"view\"; }\r\n\r\n  private static _state?: State;\r\n  private static _removeListeners?: VoidFunction;\r\n\r\n  public override async run(vps?: Viewport[]): Promise<boolean> {\r\n    const that = SyncViewportsTool;\r\n    if (!vps || vps.length < 2) {\r\n      that.disconnect();\r\n    } else {\r\n      if (that._state && that._state.equals(vps))\r\n        that.disconnect();\r\n      else\r\n        that.connect(vps, this.syncType);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  public override async parseAndRun(...args: string[]): Promise<boolean> {\r\n    if (args.length === 0)\r\n      return this.run();\r\n\r\n    const allVps = Array.from(IModelApp.viewManager);\r\n    if (args.length === 1)\r\n      return args[0].toLowerCase() === \"all\" ? this.run(allVps) : false;\r\n\r\n    const vps: Viewport[] = [];\r\n    for (const arg of args) {\r\n      const vpId = Number.parseInt(arg, 10);\r\n      if (Number.isNaN(vpId))\r\n        return false;\r\n\r\n      const vp = allVps.find((x) => x.viewportId === vpId);\r\n      if (!vp)\r\n        return false;\r\n\r\n      vps.push(vp);\r\n    }\r\n\r\n    return this.run(vps);\r\n  }\r\n\r\n  private static connect(vps: Viewport[], syncType: \"view\" | \"frustum\"): void {\r\n    this.disconnect();\r\n    const connect = \"view\" === syncType ? connectViewportViews : connectViewportFrusta;\r\n    this._state = new State(vps, connect(vps));\r\n    const dispose = vps.map((x) => x.onDisposed.addOnce(() => this.disconnect()));\r\n    this._removeListeners = () => dispose.forEach((x) => x());\r\n  }\r\n\r\n  private static disconnect(): void {\r\n    this._state?.disconnect();\r\n    this._state = undefined;\r\n\r\n    if (this._removeListeners) {\r\n      this._removeListeners();\r\n      this._removeListeners = undefined;\r\n    }\r\n  }\r\n}\r\n\r\n/** Connect or disconnect two viewports using TwoWayViewportFrustumSync. */\r\nexport class SyncViewportFrustaTool extends SyncViewportsTool {\r\n  public static override toolId = \"SyncFrusta\";\r\n\r\n  protected override get syncType() { return \"frustum\" as const; }\r\n}\r\n"
        ],
        "mappings": ";AAKA;AAAA,EACE;AAAA,EAAuB;AAAA,EAAsB;AAAA,EAAW;AAAA,OACnD;AAEP,MAAM,MAAM;AAAA,EAGV,YAAY,WAAuC,YAAwB;AAAxB;AACjD,SAAK,eAAe,UAAU,IAAI,CAAC,MAAM,EAAE,UAAU,EAAE,KAAK;AAAA,EAC9D;AAAA,EAEO,OAAO,WAAuB;AACnC,QAAI,UAAU,WAAW,KAAK,aAAa;AACzC,aAAO;AAET,UAAM,MAAM,UAAU,IAAI,CAAC,MAAM,EAAE,UAAU,EAAE,KAAK;AACpD,WAAO,IAAI,MAAM,CAAC,KAAK,QAAQ,QAAQ,KAAK,aAAa,GAAG,CAAC;AAAA,EAC/D;AACF;AAGO,MAAM,qBAAN,MAAM,2BAA0B,KAAK;AAAA,EAE1C,WAA2B,UAAU;AAAE,WAAO;AAAA,EAAG;AAAA,EACjD,WAA2B,UAAU;AAAE,WAAO;AAAA,EAAW;AAAA,EAEzD,IAAc,WAA+B;AAAE,WAAO;AAAA,EAAQ;AAAA,EAK9D,MAAsB,IAAI,KAAoC;AAC5D,UAAM,OAAO;AACb,QAAI,CAAC,OAAO,IAAI,SAAS,GAAG;AAC1B,WAAK,WAAW;AAAA,IAClB,OAAO;AACL,UAAI,KAAK,UAAU,KAAK,OAAO,OAAO,GAAG;AACvC,aAAK,WAAW;AAAA;AAEhB,aAAK,QAAQ,KAAK,KAAK,QAAQ;AAAA,IACnC;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAsB,eAAe,MAAkC;AACrE,QAAI,KAAK,WAAW;AAClB,aAAO,KAAK,IAAI;AAElB,UAAM,SAAS,MAAM,KAAK,UAAU,WAAW;AAC/C,QAAI,KAAK,WAAW;AAClB,aAAO,KAAK,CAAC,EAAE,YAAY,MAAM,QAAQ,KAAK,IAAI,MAAM,IAAI;AAE9D,UAAM,MAAkB,CAAC;AACzB,eAAW,OAAO,MAAM;AACtB,YAAM,OAAO,OAAO,SAAS,KAAK,EAAE;AACpC,UAAI,OAAO,MAAM,IAAI;AACnB,eAAO;AAET,YAAM,KAAK,OAAO,KAAK,CAAC,MAAM,EAAE,eAAe,IAAI;AACnD,UAAI,CAAC;AACH,eAAO;AAET,UAAI,KAAK,EAAE;AAAA,IACb;AAEA,WAAO,KAAK,IAAI,GAAG;AAAA,EACrB;AAAA,EAEA,OAAe,QAAQ,KAAiB,UAAoC;AAC1E,SAAK,WAAW;AAChB,UAAM,UAAU,WAAW,WAAW,uBAAuB;AAC7D,SAAK,SAAS,IAAI,MAAM,KAAK,QAAQ,GAAG,CAAC;AACzC,UAAM,UAAU,IAAI,IAAI,CAAC,MAAM,EAAE,WAAW,QAAQ,MAAM,KAAK,WAAW,CAAC,CAAC;AAC5E,SAAK,mBAAmB,MAAM,QAAQ,QAAQ,CAAC,MAAM,EAAE,CAAC;AAAA,EAC1D;AAAA,EAEA,OAAe,aAAmB;AAChC,SAAK,QAAQ,WAAW;AACxB,SAAK,SAAS;AAEd,QAAI,KAAK,kBAAkB;AACzB,WAAK,iBAAiB;AACtB,WAAK,mBAAmB;AAAA,IAC1B;AAAA,EACF;AACF;AAjEa,mBACY,SAAS;AAD3B,WAAM,oBAAN;AAoEA,aAAM,+BAA+B,kBAAkB;AAAA,EAG5D,IAAuB,WAAW;AAAE,WAAO;AAAA,EAAoB;AACjE;AAJa,uBACY,SAAS;",
        "names": []
      }
    }
  ]
}
