{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/rpc/web/WebAppRpcProtocol.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module RpcInterface\n */\nimport { BentleyError, Logger } from \"@itwin/core-bentley\";\nimport { CommonLoggerCategory } from \"../../CommonLoggerCategory\";\nimport { RpcContentType, RpcRequestStatus, WEB_RPC_CONSTANTS } from \"../core/RpcConstants\";\nimport { RpcProtocol } from \"../core/RpcProtocol\";\nimport { RpcOpenAPIDescription } from \"./OpenAPI\";\nimport { WebAppRpcLogging } from \"./WebAppRpcLogging\";\nimport { WebAppRpcRequest } from \"./WebAppRpcRequest\";\n/** The HTTP application protocol.\n * @internal\n */\nexport class WebAppRpcProtocol extends RpcProtocol {\n    /** Convenience handler for an RPC operation get request for an HTTP server. */\n    async handleOperationGetRequest(req, res) {\n        return this.handleOperationPostRequest(req, res);\n    }\n    /** Convenience handler for an RPC operation post request for an HTTP server. */\n    async handleOperationPostRequest(req, res) {\n        let request;\n        try {\n            request = await WebAppRpcRequest.parseRequest(this, req);\n        }\n        catch (error) {\n            const message = BentleyError.getErrorMessage(error);\n            Logger.logError(CommonLoggerCategory.RpcInterfaceBackend, `Failed to parse request: ${message}`, BentleyError.getErrorMetadata(error));\n            res.status(400);\n            res.send(JSON.stringify({ message, isError: true }));\n            return;\n        }\n        const fulfillment = await this.fulfill(request);\n        await WebAppRpcRequest.sendResponse(this, request, fulfillment, req, res);\n    }\n    /** Convenience handler for an OpenAPI description request for an HTTP server. */\n    handleOpenApiDescriptionRequest(_req, res) {\n        const description = JSON.stringify(this.openAPIDescription);\n        res.send(description);\n    }\n    /** Converts an HTTP content type value to an RPC content type value. */\n    static computeContentType(httpType) {\n        if (!httpType)\n            return RpcContentType.Unknown;\n        if (httpType.indexOf(WEB_RPC_CONSTANTS.ANY_TEXT) === 0) {\n            return RpcContentType.Text;\n        }\n        else if (httpType.indexOf(WEB_RPC_CONSTANTS.BINARY) === 0) {\n            return RpcContentType.Binary;\n        }\n        else if (httpType.indexOf(WEB_RPC_CONSTANTS.MULTIPART) === 0) {\n            return RpcContentType.Multipart;\n        }\n        else {\n            return RpcContentType.Unknown;\n        }\n    }\n    /** Supplies the status corresponding to a protocol-specific code value. */\n    getStatus(code) {\n        switch (code) {\n            case 404: return RpcRequestStatus.NotFound;\n            case 202: return RpcRequestStatus.Pending;\n            case 200: return RpcRequestStatus.Resolved;\n            case 500: return RpcRequestStatus.Rejected;\n            case 204: return RpcRequestStatus.NoContent;\n            case 502: return RpcRequestStatus.BadGateway;\n            case 503: return RpcRequestStatus.ServiceUnavailable;\n            case 504: return RpcRequestStatus.GatewayTimeout;\n            case 408: return RpcRequestStatus.RequestTimeout;\n            case 429: return RpcRequestStatus.TooManyRequests;\n            default: return RpcRequestStatus.Unknown;\n        }\n    }\n    /** Supplies the protocol-specific code corresponding to a status value. */\n    getCode(status) {\n        switch (status) {\n            case RpcRequestStatus.NotFound: return 404;\n            case RpcRequestStatus.Pending: return 202;\n            case RpcRequestStatus.Resolved: return 200;\n            case RpcRequestStatus.Rejected: return 500;\n            case RpcRequestStatus.NoContent: return 204;\n            case RpcRequestStatus.BadGateway: return 502;\n            case RpcRequestStatus.ServiceUnavailable: return 503;\n            case RpcRequestStatus.GatewayTimeout: return 504;\n            case RpcRequestStatus.RequestTimeout: return 408;\n            case RpcRequestStatus.TooManyRequests: return 429;\n            default: return 501;\n        }\n    }\n    /** Whether an HTTP status code indicates a request timeout. */\n    isTimeout(code) {\n        return code === 504;\n    }\n    /** An OpenAPI-compatible description of this protocol.\n     * @internal\n     */\n    get openAPIDescription() { return new RpcOpenAPIDescription(this); }\n    /** Constructs an HTTP protocol. */\n    constructor(configuration) {\n        super(configuration);\n        this.preserveStreams = true;\n        /** An optional prefix for RPC operation URI paths. */\n        this.pathPrefix = \"\";\n        /** The RPC request class for this protocol. */\n        this.requestType = WebAppRpcRequest;\n        this.supportsStatusCategory = true;\n        this.events.addListener(async (event, object) => WebAppRpcLogging.logProtocolEvent(event, object));\n    }\n}\n//# sourceMappingURL=WebAppRpcProtocol.js.map",
      "start": 1693508121075,
      "end": 1693508121141,
      "sourcemaps": null
    }
  ]
}
