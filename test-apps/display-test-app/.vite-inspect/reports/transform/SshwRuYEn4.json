{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/rpc/web/BentleyCloudRpcProtocol.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module RpcInterface\n */\nimport { BentleyStatus } from \"@itwin/core-bentley\";\nimport { IModelError } from \"../../IModelError\";\nimport { RpcConfiguration } from \"../core/RpcConfiguration\";\nimport { RpcOperation } from \"../core/RpcOperation\";\nimport { WebAppRpcProtocol } from \"./WebAppRpcProtocol\";\n/* eslint-disable deprecation/deprecation */\nvar AppMode;\n(function (AppMode) {\n    AppMode[\"MilestoneReview\"] = \"1\";\n})(AppMode || (AppMode = {}));\n/** An http protocol for Bentley cloud RPC interface deployments.\n * @internal\n */\nexport class BentleyCloudRpcProtocol extends WebAppRpcProtocol {\n    constructor() {\n        super(...arguments);\n        this.checkToken = true;\n        /** The name of various HTTP request headers based on client's request context */\n        this.serializedClientRequestContextHeaderNames = {\n            /** The name of the HTTP request id header. */\n            id: \"X-Correlation-Id\",\n            /** The name of the HTTP application id header. */\n            applicationId: \"X-Application-Id\",\n            /** The name of the HTTP application version header. */\n            applicationVersion: \"X-Application-Version\",\n            /** The name of the HTTP session id header. */\n            sessionId: \"X-Session-Id\",\n            /** The name of the HTTP authorization header. */\n            authorization: \"Authorization\",\n        };\n        /** The name of the RPC protocol version header. */\n        this.protocolVersionHeaderName = \"X-Protocol-Version\";\n    }\n    /** Returns the operation specified by an OpenAPI-compatible URI path. */\n    getOperationFromPath(path) {\n        const url = new URL(path, \"https://localhost/\");\n        const components = url.pathname.split(\"/\").filter((x) => x); // filter out empty segments\n        const operationComponent = components.slice(-1)[0];\n        const encodedRequest = url.searchParams.get(\"parameters\") || \"\";\n        // The encodedRequest should be base64 - fail now if any other characters detected.\n        if (/[^a-zA-Z0-9=+\\/$]/.test(encodedRequest))\n            throw new IModelError(BentleyStatus.ERROR, `Invalid request: Malformed URL parameters detected.`);\n        const firstHyphen = operationComponent.indexOf(\"-\");\n        const lastHyphen = operationComponent.lastIndexOf(\"-\");\n        const interfaceDefinition = operationComponent.slice(0, firstHyphen);\n        const interfaceVersion = operationComponent.slice(firstHyphen + 1, lastHyphen);\n        const operationName = operationComponent.slice(lastHyphen + 1);\n        return { interfaceDefinition, operationName, interfaceVersion, encodedRequest };\n    }\n    /** Supplies the OpenAPI-compatible URI path for an RPC operation. */\n    supplyPathForOperation(operation, request) {\n        const prefix = this.pathPrefix;\n        const appTitle = this.info.title;\n        const appVersion = this.info.version;\n        const operationId = `${operation.interfaceDefinition.interfaceName}-${operation.interfaceVersion}-${operation.operationName}`;\n        let appMode = \"\";\n        let iTwinId = \"\";\n        let iModelId = \"\";\n        let routeChangesetId;\n        /* Note: The changesetId field is omitted in the route in the case of ReadWrite connections since the connection is generally expected to be at the\n         * latest version and not some specific changeset. Also, for the first version (before any changesets), the changesetId in the route is arbitrarily\n         * set to \"0\" instead of an empty string, since the latter is more un-intuitive for a route. However, in all other use cases, including the changesetId\n         * held by the IModelRpcProps itself, the changesetId of \"\" (i.e., empty string) signifies the first version - this is more intuitive and retains\n         * compatibility with the majority of use cases. */\n        if (request === undefined) {\n            appMode = \"{modeId}\";\n            iTwinId = \"{iTwinId}\";\n            iModelId = \"{iModelId}\";\n            routeChangesetId = \"{changeSetId}\";\n        }\n        else {\n            let token = operation.policy.token(request) || RpcOperation.fallbackToken;\n            if (!token || !token.iModelId) {\n                if (RpcConfiguration.disableRoutingValidation) {\n                    token = { key: \"\" };\n                }\n                else {\n                    throw new IModelError(BentleyStatus.ERROR, \"Invalid iModelToken for RPC operation request\");\n                }\n            }\n            iTwinId = encodeURIComponent(token.iTwinId || \"\");\n            iModelId = encodeURIComponent(token.iModelId);\n            routeChangesetId = token.changeset?.id || \"0\";\n            appMode = AppMode.MilestoneReview;\n        }\n        return `${prefix}/${appTitle}/${appVersion}/mode/${appMode}/context/${iTwinId}/imodel/${iModelId}${!!routeChangesetId ? `/changeset/${routeChangesetId}` : \"\"}/${operationId}`;\n    }\n    /**\n     * Inflates the IModelRpcProps from the URL path for each request on the backend.\n     * @note This function updates the IModelRpcProps value supplied in the request body.\n     */\n    inflateToken(tokenFromBody, request) {\n        const urlPathComponents = request.path.split(\"/\");\n        const iModelKey = tokenFromBody.key;\n        let iModelId = tokenFromBody.iModelId;\n        let iTwinId = tokenFromBody.iTwinId;\n        const changeset = { id: tokenFromBody.changeset?.id ?? \"0\", index: tokenFromBody.changeset?.index };\n        for (let i = 0; i <= urlPathComponents.length; ++i) {\n            const key = urlPathComponents[i];\n            const value = urlPathComponents[i + 1];\n            if (key === \"mode\") {\n                ++i;\n            }\n            else if (key === \"context\") {\n                iTwinId = value;\n                ++i;\n            }\n            else if (key === \"imodel\") {\n                iModelId = value;\n                ++i;\n            }\n            else if (key === \"changeset\") {\n                changeset.id = (value === \"0\") ? \"\" : value;\n                ++i;\n            }\n        }\n        return { key: iModelKey, iTwinId, iModelId, changeset };\n    }\n    /** Returns the OpenAPI-compatible URI path parameters for an RPC operation.\n     * @internal\n     */\n    supplyPathParametersForOperation(_operation) {\n        return [\n            { name: \"modeId\", in: \"path\", required: true, schema: { type: \"string\" } },\n            { name: \"iTwinId\", in: \"path\", required: true, schema: { type: \"string\" } },\n            { name: \"iModelId\", in: \"path\", required: true, schema: { type: \"string\" } },\n            { name: \"changeSetId\", in: \"path\", required: false, schema: { type: \"string\" } },\n        ];\n    }\n}\n//# sourceMappingURL=BentleyCloudRpcProtocol.js.map",
      "start": 1693508121064,
      "end": 1693508121131,
      "sourcemaps": null
    }
  ]
}
