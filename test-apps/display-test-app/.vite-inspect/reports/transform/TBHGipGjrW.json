{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/PlanarClipMask.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module DisplayStyles\n */\nimport { CompressedId64Set } from \"@itwin/core-bentley\";\n/** The different modes by which a [[PlanarClipMaskSettings]] collects the geometry used to mask a model.\n * @public\n * @extensions\n */\nexport var PlanarClipMaskMode;\n(function (PlanarClipMaskMode) {\n    /** No masking. */\n    PlanarClipMaskMode[PlanarClipMaskMode[\"None\"] = 0] = \"None\";\n    /** Mask based on priority. Different types of models have different default priorities as enumerated by [[PlanarClipMaskPriority]].\n     * For example, background maps have the lowest priority, so they are masked by all other types, while design models have the highest priority and are therefore never masked.\n     * The priority of a reality model can be overridden by [[PlanarClipMaskSettings.priority]]. This is useful to allow one reality model to mask another overlapping one.\n     */\n    PlanarClipMaskMode[PlanarClipMaskMode[\"Priority\"] = 1] = \"Priority\";\n    /** Indicates that masks should be produced from the geometry in a set of [GeometricModel]($backend)s. */\n    PlanarClipMaskMode[PlanarClipMaskMode[\"Models\"] = 2] = \"Models\";\n    /** Indicates that masks should be produced from geometry belonging to a set of subcategories. */\n    PlanarClipMaskMode[PlanarClipMaskMode[\"IncludeSubCategories\"] = 3] = \"IncludeSubCategories\";\n    /** Indicates that masks should be produced from the geometry of a set of [GeometricElement]($backend)s. */\n    PlanarClipMaskMode[PlanarClipMaskMode[\"IncludeElements\"] = 4] = \"IncludeElements\";\n    /** Indicates that masks should be produced from the geometry of all [GeometricElement]($backend)s in a view, **except** for a specified set of excluded elements. */\n    PlanarClipMaskMode[PlanarClipMaskMode[\"ExcludeElements\"] = 5] = \"ExcludeElements\";\n})(PlanarClipMaskMode || (PlanarClipMaskMode = {}));\n/** The default priority values for a [[PlanarClipMaskSettings]], based on model type. Models with a lower priority are masked by models with a higher priority.\n * The default can be overridden by [[PlanarClipMaskSettings.priority]].\n *  @public\n * @extensions\n */\nexport var PlanarClipMaskPriority;\n(function (PlanarClipMaskPriority) {\n    /** Background map. */\n    PlanarClipMaskPriority[PlanarClipMaskPriority[\"BackgroundMap\"] = -2048] = \"BackgroundMap\";\n    /** A reality model that spans the globe - e.g., OpenStreetMaps Buildings. */\n    PlanarClipMaskPriority[PlanarClipMaskPriority[\"GlobalRealityModel\"] = -1024] = \"GlobalRealityModel\";\n    /** A reality model with a bounded range. */\n    PlanarClipMaskPriority[PlanarClipMaskPriority[\"RealityModel\"] = 0] = \"RealityModel\";\n    /** A design model stored in the [IModelDb]($backend). */\n    PlanarClipMaskPriority[PlanarClipMaskPriority[\"DesignModel\"] = 2048] = \"DesignModel\";\n})(PlanarClipMaskPriority || (PlanarClipMaskPriority = {}));\n/** Describes how to mask the geometry of one [GeometricModel]($backend) for display. The mask is produced by projecting geometry from any number of other models -\n * optionally filtered by [SubCategory]($backend) or by a set of specific [GeometricElement]($backend)s - onto a plane. Regions of the masked model that intersect the\n * mask are rendered partially or completely transparent. This is useful for, e.g., making subsurface geometry visible below the background map, or clipping out portions\n * of a reality model that intersect a design model.\n * @note Currently reality models (including background maps and terrain) can be masked, but design models can only produce masks.\n * @see [[DisplayStyleSettings.planarClipMasks]] to define clip masks for a [DisplayStyle]($backend).\n * @see [[ContextRealityModel.planarClipMaskSettings]] to apply a clip mask to a context reality model.\n * @public\n */\nclass PlanarClipMaskSettings {\n    /** The compressed representation of [[modelIds]]. */\n    get compressedModelIds() {\n        return this._modelIds;\n    }\n    /** Create a new [[PlanarClipMaskSettings]] object from its JSON representation. */\n    static fromJSON(json) {\n        if (!json || undefined === json.mode)\n            return this.defaults;\n        return new PlanarClipMaskSettings(json.mode, json.transparency, json.modelIds, json.subCategoryOrElementIds, json.priority, json.invert);\n    }\n    /** Create a new PlanarClipMaskSettings. */\n    static create(args) {\n        const modelIds = args.modelIds ? CompressedId64Set.sortAndCompress(args.modelIds) : undefined;\n        if (undefined !== args.priority)\n            return new PlanarClipMaskSettings(PlanarClipMaskMode.Priority, args.transparency, undefined, undefined, args.priority, args.invert);\n        else if (undefined !== args.subCategoryIds)\n            return new PlanarClipMaskSettings(PlanarClipMaskMode.IncludeSubCategories, args.transparency, modelIds, CompressedId64Set.sortAndCompress(args.subCategoryIds), undefined, args.invert);\n        else if (undefined !== args.elementIds)\n            return new PlanarClipMaskSettings(args.exclude ? PlanarClipMaskMode.ExcludeElements : PlanarClipMaskMode.IncludeElements, args.transparency, modelIds, CompressedId64Set.sortAndCompress(args.elementIds), undefined, args.invert);\n        else\n            return new PlanarClipMaskSettings(PlanarClipMaskMode.Models, args.transparency, modelIds, undefined, undefined, args.invert);\n    }\n    /** Create JSON object representing this [[PlanarClipMaskSettings]] */\n    toJSON() {\n        const props = { mode: this.mode };\n        if (undefined !== this._modelIds)\n            props.modelIds = this._modelIds;\n        if (undefined !== this._subCategoryOrElementIds)\n            props.subCategoryOrElementIds = this._subCategoryOrElementIds;\n        if (undefined !== this.priority)\n            props.priority = this.priority;\n        if (undefined !== this.transparency)\n            props.transparency = this.transparency;\n        if (this.invert)\n            props.invert = true;\n        return props;\n    }\n    /** Returns true if masking is enabled. */\n    get isValid() {\n        return this.mode !== PlanarClipMaskMode.None;\n    }\n    equals(other) {\n        return this.mode === other.mode &&\n            this.priority === other.priority &&\n            this.transparency === other.transparency &&\n            this.invert === other.invert &&\n            this._modelIds === other._modelIds &&\n            this._subCategoryOrElementIds === other._subCategoryOrElementIds;\n    }\n    /** Create a copy of this TerrainSettings, optionally modifying some of its properties.\n     * @param changedProps JSON representation of the properties to change.\n     * @returns A PlanarClipMaskSettings with all of its properties set to match those of`this`, except those explicitly defined in `changedProps`.\n     */\n    clone(changedProps) {\n        if (undefined === changedProps)\n            return this;\n        return PlanarClipMaskSettings.fromJSON({\n            ...this.toJSON(),\n            ...changedProps,\n        });\n    }\n    constructor(mode, transparency, modelIds, subCategoryOrElementIds, priority, invert) {\n        this.mode = mode;\n        this._modelIds = modelIds;\n        this._subCategoryOrElementIds = subCategoryOrElementIds;\n        this.priority = priority;\n        this.invert = true === invert;\n        this.transparency = undefined !== transparency ? Math.max(0, Math.min(1, transparency)) : undefined;\n        if (modelIds)\n            this.modelIds = CompressedId64Set.iterable(modelIds);\n        if (subCategoryOrElementIds)\n            this.subCategoryOrElementIds = CompressedId64Set.iterable(subCategoryOrElementIds);\n    }\n}\n/** A default PlanarClipMask which masks nothing. */\nPlanarClipMaskSettings.defaults = new PlanarClipMaskSettings(PlanarClipMaskMode.None);\nexport { PlanarClipMaskSettings };\n//# sourceMappingURL=PlanarClipMask.js.map",
      "start": 1693508120928,
      "end": 1693508120974,
      "sourcemaps": null
    }
  ]
}
