{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/Environment.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module DisplayStyles\n */\nimport { Atmosphere } from \"./Atmosphere\";\nimport { GroundPlane } from \"./GroundPlane\";\nimport { SkyBox } from \"./SkyBox\";\n/** As part of a [[DisplayStyle3dSettings]], controls the display of a [[SkyBox]] and [[GroundPlane]] to simulate the\n * outdoor environment.\n * @see [[DisplayStyle3dSettings.environment]].\n * @public\n */\nclass Environment {\n    constructor(props) {\n        this.displaySky = props?.displaySky ?? false;\n        this.displayGround = props?.displayGround ?? false;\n        this.displayAtmosphere = props?.displayAtmosphere ?? false;\n        this.sky = props?.sky ?? SkyBox.defaults;\n        this.ground = props?.ground ?? GroundPlane.defaults;\n        this.atmosphere = props?.atmosphere ?? Atmosphere.Settings.defaults;\n    }\n    /** Create a new Environment. Any properties not specified by `props` will be initialized to their default values. */\n    static create(props) {\n        return props ? new this(props) : this.defaults;\n    }\n    /** Create a copy of this environment, changing the `displayGround`, `displaySky` and/or `displayAtmosphere` flags. */\n    withDisplay(display) {\n        const displaySky = display.sky ?? this.displaySky;\n        const displayGround = display.ground ?? this.displayGround;\n        const displayAtmosphere = display.atmosphere ?? this.displayAtmosphere;\n        if (displaySky === this.displaySky && displayGround === this.displayGround && displayAtmosphere === this.displayAtmosphere)\n            return this;\n        return Environment.create({\n            ...this,\n            displaySky: displaySky ?? this.displaySky,\n            displayGround: displayGround ?? this.displayGround,\n            displayAtmosphere: displayAtmosphere ?? this.displayAtmosphere,\n        });\n    }\n    /** Convert to JSON representation. */\n    toJSON() {\n        return {\n            sky: this.sky.toJSON(this.displaySky),\n            ground: this.ground.toJSON(this.displayGround),\n            atmosphere: this.atmosphere.toJSON(this.displayAtmosphere),\n        };\n    }\n    /** Create from JSON representation. */\n    static fromJSON(props) {\n        if (!props)\n            return this.defaults;\n        return new this({\n            displaySky: props?.sky?.display,\n            displayGround: props?.ground?.display,\n            displayAtmosphere: props?.atmosphere?.display,\n            sky: props?.sky ? SkyBox.fromJSON(props.sky) : undefined,\n            ground: props?.ground ? GroundPlane.fromJSON(props.ground) : undefined,\n            atmosphere: props?.atmosphere ? Atmosphere.Settings.fromJSON(props.atmosphere) : undefined,\n        });\n    }\n    /** Create a copy of this environment, identical except for any properties specified by `changedProps`.\n     * Any properties of `changedProps` explicitly set to `undefined` will be reset to their default values.\n     */\n    clone(changedProps) {\n        if (!changedProps)\n            return this;\n        return Environment.create({ ...this, ...changedProps });\n    }\n}\n/** Default settings without a ground plane, sky box, or atmosphere displayed. */\nEnvironment.defaults = new Environment();\nexport { Environment };\n//# sourceMappingURL=Environment.js.map",
      "start": 1693508120725,
      "end": 1693508120782,
      "sourcemaps": null
    }
  ]
}
