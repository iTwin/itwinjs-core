{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/pointcloud/format/opc/FileReader.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { ALong } from \"../../../system/runtime/ALong\";\nimport { Message } from \"../../../system/runtime/Message\";\nimport { Strings } from \"../../../system/runtime/Strings\";\nimport { ContentLoader } from \"../../../system/storage/ContentLoader\";\nimport { ContainerFile } from \"./ContainerFile\";\nimport { DirectoryReader } from \"./DirectoryReader\";\nimport { EmbeddedAttributeReader } from \"./EmbeddedAttributeReader\";\nimport { FileRecord } from \"./FileRecord\";\nimport { GeometryReader } from \"./GeometryReader\";\n/**\n * Class FileReader reads OPC files.\n *\n * @version 1.0 January 2014\n */\n/** @internal */\nclass FileReader {\n    /**\n     * Create a new reader.\n     * @param fileName the name of the file.\n     * @param container the container file.\n     * @param fileRecord the file record.\n     */\n    constructor(fileStorage, fileName, container, fileRecord) {\n        /* Store the parameters */\n        this._fileStorage = fileStorage;\n        this._fileName = fileName;\n        this._container = container;\n        this._fileRecord = fileRecord;\n        /* Clear */\n        this._directoryReaders = null;\n        this._geometryReaders = null;\n        this._attributeReaders = null;\n    }\n    /**\n     * Open a file.\n     * @param fileName the name of the file.\n     * @param lazyLoading avoid early loading to keep a low memory profile?\n     * @return the reader.\n     */\n    static async openFile(fileStorage, fileName, lazyLoading) {\n        /* Open the container file */\n        let container = await ContainerFile.read(fileStorage, fileName, \"OPC3\");\n        /* Read the file record */\n        let filePart = container.getPart(\"file\");\n        let fileRecord = await FileRecord.readNew(fileStorage, filePart.getFileAccess().getFileName(), filePart.getOffset(), filePart.getSize());\n        /* Create a reader */\n        let fileReader = new FileReader(fileStorage, fileName, container, fileRecord);\n        /* Open the reader */\n        fileReader = await fileReader.open(lazyLoading);\n        /* Return the reader */\n        return fileReader;\n    }\n    /**\n     * Open the reader.\n     * @param lazyLoading avoid early loading to keep a low memory profile?\n     * @return the reader.\n     */\n    async open(lazyLoading) {\n        /* Log */\n        Message.print(FileReader.MODULE, \"Opening OPC with \" + this._fileRecord.getLevelCount() + \" levels (crs \" + this._fileRecord.getCRS() + \", lazy? \" + lazyLoading + \")\");\n        Message.print(FileReader.MODULE, \"Container has \" + this._container.getPartCount() + \" parts\");\n        //        for(ContainerFilePart part: this._container.getParts()) Message.print(MODULE,\"Part '\"+part.getName()+\"'\");\n        /* Define the content we are going to need (dozens of parts) */\n        Message.print(FileReader.MODULE, \"Loading \" + this._fileRecord.getLevelCount() + \" levels and \" + this._fileRecord.getAttributeCount() + \" attributes\");\n        let fileContents = new ContentLoader(this._fileStorage, this._fileName);\n        /* Only read the block list for the top levels? (to save memory) */\n        let prefetchLevelIndex = (this._fileRecord.getLevelCount() - 6);\n        if (prefetchLevelIndex < 0)\n            prefetchLevelIndex = 0;\n        if (lazyLoading == false)\n            prefetchLevelIndex = 0;\n        Message.print(FileReader.MODULE, \"Prefetching from level \" + prefetchLevelIndex);\n        /* Read the directory */\n        this._directoryReaders = new Array(this._fileRecord.getLevelCount());\n        for (let i = 0; i < this._directoryReaders.length; i++) {\n            let directoryReader = new DirectoryReader(this, i);\n            let readBlockList = (i >= prefetchLevelIndex);\n            directoryReader.loadData(readBlockList, fileContents);\n            this._directoryReaders[i] = directoryReader;\n        }\n        /* Read the geometry */\n        this._geometryReaders = new Array(this._fileRecord.getLevelCount());\n        for (let i = 0; i < this._geometryReaders.length; i++) {\n            let geometryReader = new GeometryReader(this, i);\n            geometryReader.loadData(fileContents);\n            this._geometryReaders[i] = geometryReader;\n        }\n        /* Read the attributes */\n        this._attributeReaders = new Array(this._fileRecord.getAttributeCount());\n        for (let i = 0; i < this._fileRecord.getAttributeCount(); i++) {\n            let attributeReader = new EmbeddedAttributeReader(this._container, i, this._fileRecord.getLevelCount());\n            attributeReader.loadData(fileContents);\n            this._attributeReaders[i] = attributeReader;\n        }\n        /* Load all data needed for the structures */\n        fileContents = await fileContents.load();\n        /* Read the directory */\n        for (let i = 0; i < this._directoryReaders.length; i++) {\n            let readBlockList = (i >= prefetchLevelIndex);\n            this._directoryReaders[i].loadData(readBlockList, fileContents);\n        }\n        /* Read the geometry */\n        for (let i = 0; i < this._geometryReaders.length; i++) {\n            this._geometryReaders[i].loadData(fileContents);\n        }\n        /* Read the attributes */\n        for (let i = 0; i < this._fileRecord.getAttributeCount(); i++) {\n            let attributeReader = (this._attributeReaders[i]);\n            attributeReader.loadData(fileContents);\n        }\n        /* Log file info */\n        Message.print(FileReader.MODULE, \"OPC bounds are \" + this._geometryReaders[0].getGeometryRecord().getBounds());\n        let tileGridSize0 = this._geometryReaders[0].getGeometryRecord().getTileGrid().size;\n        Message.print(FileReader.MODULE, \"OPC level0 tile size is (\" + tileGridSize0.x + \",\" + tileGridSize0.y + \",\" + tileGridSize0.z + \")\");\n        let totalPointCount = ALong.ZERO;\n        let totalTileCount = 0;\n        let totalBlockCount = 0;\n        for (let i = 0; i < this._fileRecord.getLevelCount(); i++) {\n            let directoryRecord = this._directoryReaders[i].getDirectoryRecord();\n            Message.print(FileReader.MODULE, \"Level \" + i + \" has \" + directoryRecord.getPointCount() + \" points, \" + directoryRecord.getTileCount() + \" tiles, \" + directoryRecord.getBlockCount() + \" blocks\");\n            totalPointCount = totalPointCount.add(directoryRecord.getPointCount());\n            totalTileCount += directoryRecord.getTileCount();\n            totalBlockCount += directoryRecord.getBlockCount();\n        }\n        Message.print(FileReader.MODULE, \"Pointcloud has \" + totalPointCount + \" points, \" + totalTileCount + \" tiles, \" + totalBlockCount + \" blocks\");\n        /* Get the attributes */\n        Message.print(FileReader.MODULE, \"Pointcloud has \" + this._attributeReaders.length + \" static attributes:\");\n        for (let i = 0; i < this._attributeReaders.length; i++) {\n            Message.print(FileReader.MODULE, \"Attribute \" + i + \": \" + this._attributeReaders[i].getAttribute());\n            Message.print(FileReader.MODULE, \" min: \" + this._attributeReaders[i].getMinimumValue());\n            Message.print(FileReader.MODULE, \" max: \" + this._attributeReaders[i].getMaximumValue());\n        }\n        /* Return the reader */\n        return this;\n    }\n    /**\n     * Close the file.\n     */\n    close() {\n        for (let attributeReader of this._attributeReaders)\n            attributeReader.close();\n        if (this._container != null)\n            this._container.close(true);\n        this._container = null;\n    }\n    /**\n     * Get the storage of the file.\n     * @return the storage of the file.\n     */\n    getFileStorage() {\n        return this._fileStorage;\n    }\n    /**\n     * Get the name of the file.\n     * @return the name of the file.\n     */\n    getFileName() {\n        return this._fileName;\n    }\n    /**\n     * Get the container file.\n     * @return the container file.\n     */\n    getContainer() {\n        return this._container;\n    }\n    /**\n     * Get the file record.\n     * @return the file record.\n     */\n    getFileRecord() {\n        return this._fileRecord;\n    }\n    /**\n     * Get the number of resolution levels.\n     * @return the number of resolution levels.\n     */\n    getLevelCount() {\n        return this._fileRecord.getLevelCount();\n    }\n    /**\n     * Get a directory reader.\n     * @param level the index of the level.\n     * @return the directory reader.\n     */\n    getDirectoryReader(level) {\n        return this._directoryReaders[level];\n    }\n    /**\n     * Get a geometry reader.\n     * @param level the index of the level.\n     * @return the geometry reader.\n     */\n    getGeometryReader(level) {\n        return this._geometryReaders[level];\n    }\n    /**\n     * Get the static attribute readers.\n     * @return the static attribute readers.\n     */\n    getStaticAttributeReaders() {\n        return this._attributeReaders;\n    }\n    /**\n     * Get the attribute readers.\n     * @return the attribute readers.\n     */\n    getAttributeReaders() {\n        return this._attributeReaders;\n    }\n    /**\n     * Get the attributes.\n     * @return the attributes.\n     */\n    getAttributes() {\n        let list = new Array(this._attributeReaders.length);\n        for (let i = 0; i < this._attributeReaders.length; i++)\n            list[i] = this._attributeReaders[i].getAttribute();\n        return list;\n    }\n    /**\n     * Find an attribute reader.\n     * @param attributeName the name of the attribute.\n     * @return the attribute reader (null if not found).\n     */\n    findAttributeReader(attributeName) {\n        /* Check the static attributes */\n        for (let attributeReader of this._attributeReaders) {\n            if (Strings.equalsIgnoreCase(attributeReader.getAttribute().getName(), attributeName))\n                return attributeReader;\n        }\n        /* Not found */\n        return null;\n    }\n}\n/** The name of this module */\nFileReader.MODULE = \"FileReader\";\nexport { FileReader };\n//# sourceMappingURL=FileReader.js.map",
      "start": 1693508126587,
      "end": 1693508126651,
      "sourcemaps": null
    }
  ]
}
