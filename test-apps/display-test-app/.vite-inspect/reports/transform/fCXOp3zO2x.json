{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/webgl/glsl/PlanarGrid.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module WebGL\n */\nimport { PlanarGridTransparency } from \"../../RenderSystem\";\nimport { AttributeMap } from \"../AttributeMap\";\nimport { ProgramBuilder } from \"../ShaderBuilder\";\nimport { System } from \"../System\";\nimport { addShaderFlags } from \"./Common\";\nimport { unquantize2d } from \"./Decode\";\nimport { addLogDepth } from \"./LogarithmicDepthBuffer\";\nimport { addTranslucency } from \"./Translucency\";\nimport { addModelViewProjectionMatrix } from \"./Vertex\";\nconst computePosition = \"gl_PointSize = 1.0; return MAT_MVP * rawPos;\";\nconst computeTexCoord = \"return unquantize2d(a_uvParam, u_qTexCoordParams);\";\nconst computeBaseColor = `\r\n  // u_gridProps - x = gridsPerRef, y - planeAlpha, z = line alpha, w = ref alpha.\r\n  vec4 color = vec4(u_gridColor, u_gridProps.y);\r\n  float refsPerGrid = u_gridProps.x;\r\n  if (0.0 == refsPerGrid || !drawGridLine(color, 1.0 / refsPerGrid, u_gridProps.w - color.a))\r\n    drawGridLine(color, 1.0, u_gridProps.z - color.a);\r\n\r\n  return color;\r\n`;\nconst drawGridLine = `\r\n  bool drawGridLine(inout vec4 color, float mult, float alphaScale) {\r\n    vec2 scaledTexCoord = v_texCoord * mult;\r\n    vec2 deriv = mult * screenSpaceDeriv(v_texCoord);\r\n    if (deriv.x != 0.0 && deriv.y != 0.0) {\r\n      vec2 grid = abs(fract(mult * v_texCoord - 0.5) - 0.5) / deriv;\r\n      float line = min(grid.x, grid.y);\r\n      if (line < 1.0) {\r\n        color.a += alphaScale * (1.0 - min(line, 1.0)) / max(1.0, length(deriv));\r\n        return true;\r\n        }\r\n      }\r\n    return false;\r\n   }\r\n`;\nconst fwidth2d = `\\nvec2 screenSpaceDeriv(vec2 screenXY) { return fwidth(screenXY); }\\n`;\nconst defaultTransparency = new PlanarGridTransparency();\n/** @internal */\nexport default function createPlanarGridProgram(context) {\n    const builder = new ProgramBuilder(AttributeMap.findAttributeMap(8 /* TechniqueId.PlanarGrid */, false));\n    const vert = builder.vert;\n    const frag = builder.frag;\n    vert.set(10 /* VertexShaderComponent.ComputePosition */, computePosition);\n    addModelViewProjectionMatrix(vert);\n    addShaderFlags(builder);\n    addTranslucency(builder);\n    frag.addFunction(fwidth2d);\n    if (System.instance.supportsLogZBuffer)\n        addLogDepth(builder);\n    frag.addFunction(drawGridLine);\n    frag.set(1 /* FragmentShaderComponent.ComputeBaseColor */, computeBaseColor);\n    vert.headerComment = `//!V! PlanarGrid`;\n    frag.headerComment = `//!F! PlanarGrid`;\n    vert.addFunction(unquantize2d);\n    builder.addFunctionComputedVarying(\"v_texCoord\", 3 /* VariableType.Vec2 */, \"computeTexCoord\", computeTexCoord);\n    vert.addUniform(\"u_qTexCoordParams\", 5 /* VariableType.Vec4 */, (prog) => {\n        prog.addGraphicUniform(\"u_qTexCoordParams\", (uniform, params) => {\n            const planarGrid = params.geometry.asPlanarGrid;\n            uniform.setUniform4fv(planarGrid.uvParams.params);\n        });\n    });\n    frag.addUniform(\"u_gridColor\", 4 /* VariableType.Vec3 */, (prog) => {\n        prog.addGraphicUniform(\"u_gridColor\", (uniform, params) => {\n            const planarGrid = params.geometry.asPlanarGrid;\n            const color = planarGrid.props.color.colors;\n            uniform.setUniform3fv([color.r / 255, color.g / 255, color.b / 255]);\n        });\n    });\n    frag.addUniform(\"u_gridProps\", 5 /* VariableType.Vec4 */, (prog) => {\n        prog.addGraphicUniform(\"u_gridProps\", (uniform, params) => {\n            const planarGridProps = params.geometry.asPlanarGrid.props;\n            const transparency = planarGridProps.transparency ? planarGridProps.transparency : defaultTransparency;\n            uniform.setUniform4fv([planarGridProps.gridsPerRef, 1.0 - transparency.planeTransparency, 1.0 - transparency.lineTransparency, 1.0 - transparency.refTransparency]);\n        });\n    });\n    return builder.buildProgram(context);\n}\n//# sourceMappingURL=PlanarGrid.js.map",
      "start": 1693508125902,
      "end": 1693508125998,
      "sourcemaps": null
    }
  ]
}
