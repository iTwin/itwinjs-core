{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/rpc/web/WebAppRpcLogging.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module RpcInterface\n */\nimport { BentleyStatus, Logger } from \"@itwin/core-bentley\";\nimport { CommonLoggerCategory } from \"../../CommonLoggerCategory\";\nimport { IModelError } from \"../../IModelError\";\nimport { RpcProtocolEvent } from \"../core/RpcConstants\";\nimport { RpcInvocation } from \"../core/RpcInvocation\";\nimport { WebAppRpcRequest } from \"./WebAppRpcRequest\";\n/* eslint-disable deprecation/deprecation */\n/** @internal */\nconst BACKEND = Symbol.for(\"@itwin.WebAppRpcLogging.Backend\");\nconst FRONTEND = Symbol.for(\"@itwin.WebAppRpcLogging.Frontend\");\n/** @internal */\nexport class WebAppRpcLogging {\n    static initializeBackend(instance) {\n        globalThis[BACKEND] = instance;\n    }\n    static initializeFrontend(instance) {\n        globalThis[FRONTEND] = instance;\n    }\n    static get backend() {\n        const instance = globalThis[BACKEND];\n        if (typeof (instance) === \"undefined\") {\n            throw new IModelError(BentleyStatus.ERROR, \"Backend logging is not initialized.\");\n        }\n        return instance;\n    }\n    static get frontend() {\n        const instance = globalThis[FRONTEND];\n        if (typeof (instance) === \"undefined\") {\n            throw new IModelError(BentleyStatus.ERROR, \"Frontend logging is not initialized.\");\n        }\n        return instance;\n    }\n    static async logProtocolEvent(event, object) {\n        if (object instanceof WebAppRpcRequest) {\n            await WebAppRpcLogging.frontend.logProtocolEvent(event, object);\n        }\n        else if (object instanceof RpcInvocation) {\n            await WebAppRpcLogging.backend.logProtocolEvent(event, object);\n        }\n    }\n    getRpcInterfaceName(g) {\n        return (typeof g === \"string\") ? g : g.interfaceName;\n    }\n    findPathIds(path) {\n        let iTwinId = \"\";\n        let iModelId = \"\";\n        const tokens = path.split(\"/\");\n        for (let i = 0; i !== tokens.length; ++i) {\n            // For backwards compatibility, find old \"context\" or current \"iTwin\" terminology\n            if ((/^context$/i).test(tokens[i]) || (/^itwin$/i).test(tokens[i])) {\n                iTwinId = tokens[i + 1] || \"\";\n            }\n            if ((/^imodel$/i).test(tokens[i])) {\n                iModelId = tokens[i + 1] || \"\";\n            }\n        }\n        return { iTwinId, iModelId };\n    }\n    buildOperationDescriptor(operation) {\n        if (!operation) {\n            return \"unknown.unknown\";\n        }\n        const interfaceName = typeof (operation.interfaceDefinition) === \"string\" ? operation.interfaceDefinition : operation.interfaceDefinition.interfaceName;\n        const operationName = operation.operationName;\n        return `${interfaceName}.${operationName}`;\n    }\n    logRequest(loggerCategory, message, object) {\n        const operationDescriptor = this.buildOperationDescriptor(object.operation);\n        const pathIds = this.findPathIds(object.path);\n        Logger.logTrace(loggerCategory, `${message}.${operationDescriptor}`, () => ({\n            method: object.method,\n            path: object.path,\n            operation: object.operation.operationName,\n            rpcInterface: this.getRpcInterfaceName(object.operation.interfaceDefinition),\n            // Alert! The following properties are required by Bentley DevOps standards. Do not change their names!\n            ActivityId: object.id,\n            TimeElapsed: (\"elapsed\" in object) ? object.elapsed : 0,\n            MachineName: this.getHostname(),\n            ...pathIds,\n        }));\n    }\n    logResponse(loggerCategory, message, object, status, elapsed) {\n        const operationDescriptor = this.buildOperationDescriptor(object.operation);\n        const pathIds = this.findPathIds(object.path);\n        Logger.logTrace(loggerCategory, `${message}.${operationDescriptor}`, () => ({\n            method: object.method,\n            path: object.path,\n            operation: object.operation.operationName,\n            rpcInterface: this.getRpcInterfaceName(object.operation.interfaceDefinition),\n            status,\n            // Alert! The following properties are required by Bentley DevOps standards. Do not change their names!\n            ActivityId: object.id,\n            TimeElapsed: elapsed,\n            MachineName: this.getHostname(),\n            ...pathIds,\n        }));\n    }\n}\nclass WebAppRpcLoggingFrontend extends WebAppRpcLogging {\n    async logProtocolEvent(event, object) {\n        switch (event) {\n            case RpcProtocolEvent.RequestCreated: return this.logRequest(CommonLoggerCategory.RpcInterfaceFrontend, \"RpcInterface.frontend.request\", object);\n            case RpcProtocolEvent.ResponseLoaded: return this.logResponse(CommonLoggerCategory.RpcInterfaceFrontend, \"RpcInterface.frontend.response\", object, object.metadata.status, object.elapsed);\n            case RpcProtocolEvent.ConnectionErrorReceived: return this.logErrorFrontend(\"RpcInterface.frontend.connectionError\", object);\n            case RpcProtocolEvent.ConnectionAborted: return this.logErrorFrontend(\"RpcInterface.frontend.connectionAborted\", object);\n        }\n    }\n    getHostname() {\n        if (globalThis.window) {\n            return globalThis.window.location.host;\n        }\n        else {\n            return \"imodeljs-mobile\";\n        }\n    }\n    logErrorFrontend(message, request) {\n        const operationDescriptor = this.buildOperationDescriptor(request.operation);\n        const pathIds = this.findPathIds(request.path);\n        Logger.logInfo(CommonLoggerCategory.RpcInterfaceFrontend, `${message}.${operationDescriptor}`, () => ({\n            method: request.method,\n            path: request.path,\n            // Alert! The following properties are required by Bentley DevOps standards. Do not change their names!\n            ActivityId: request.id,\n            MachineName: this.getHostname(),\n            ...pathIds,\n        }));\n    }\n}\nWebAppRpcLogging.initializeFrontend(new WebAppRpcLoggingFrontend());\n//# sourceMappingURL=WebAppRpcLogging.js.map",
      "start": 1693508121081,
      "end": 1693508121153,
      "sourcemaps": null
    }
  ]
}
