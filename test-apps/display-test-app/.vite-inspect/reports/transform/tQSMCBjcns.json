{
  "resolvedId": "D:/hub2023A/itwinjs-core/extensions/map-layers-formats/lib/esm/ArcGisFeature/ArcGisFeatureQuery.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @internal */\nexport class ArcGisFeatureQuery {\n    // base url is expected ito be in the format of:\n    // https://<hostname>/arcgis/rest/services/<ServiceName>/FeatureServer\n    constructor(baseUrl, layerIdx, format, outSR, params) {\n        this.baseUrl = baseUrl;\n        this.layerIdx = layerIdx;\n        this.format = format;\n        this.outSR = outSR;\n        if (params !== undefined) {\n            this.resultRecordCount = params.resultRecordCount;\n            this.resultOffset = params.resultOffset;\n            this.returnGeometry = params.returnGeometry;\n            this.geometry = params.geometry;\n            this.spatialRel = params.spatialRel;\n            this.resultType = params.resultType;\n            this.maxRecordCountFactor = params.maxRecordCountFactor;\n            this.returnExceededLimitFeatures = params.returnExceededLimitFeatures;\n            this.quantizationParams = params.quantizationParameters;\n            this.outFields = params.outFields;\n            this.distance = params.distance;\n            this.maxAllowableOffset = params.maxAllowableOffset;\n        }\n    }\n    toString() {\n        const url = new URL(`${this.baseUrl}/${this.layerIdx}/query`);\n        url.searchParams.append(\"f\", this.format);\n        if (this.resultRecordCount !== undefined) {\n            url.searchParams.append(\"resultRecordCount\", `${this.resultRecordCount}`);\n        }\n        if (this.resultOffset !== undefined) {\n            url.searchParams.append(\"resultOffset\", `${this.resultOffset}`);\n        }\n        if (this.returnGeometry !== undefined) {\n            url.searchParams.append(\"returnGeometry\", this.returnGeometry ? \"true\" : \"false\");\n        }\n        if (this.resultType !== undefined) {\n            url.searchParams.append(\"resultType\", this.resultType);\n        }\n        if (this.maxRecordCountFactor !== undefined) {\n            url.searchParams.append(\"maxRecordCountFactor\", `${this.maxRecordCountFactor}`);\n        }\n        if (this.returnExceededLimitFeatures !== undefined) {\n            url.searchParams.append(\"returnExceededLimitFeatures\", this.returnExceededLimitFeatures ? \"true\" : \"false\");\n        }\n        url.searchParams.append(\"outSR\", `${this.outSR}`);\n        if (this.geometry || this.spatialRel) {\n            if (this.spatialRel) {\n                url.searchParams.append(\"spatialRel\", this.spatialRel);\n            }\n            if (this.geometry) {\n                url.searchParams.append(\"geometryType\", this.geometry.type);\n                const geomStr = JSON.stringify(this.geometry.geom);\n                url.searchParams.append(\"geometry\", geomStr);\n                url.searchParams.append(\"units\", \"esriSRUnit_Meter\"); // required on older server for get feature info\n                url.searchParams.append(\"inSR\", `${this.geometry.geom.spatialReference.wkid}`);\n            }\n        }\n        else {\n            // No custom params, fetch all geometries\n            url.searchParams.append(\"where\", \"1=1\");\n        }\n        if (this.quantizationParams) {\n            const quantizationParamsStr = JSON.stringify(this.quantizationParams);\n            url.searchParams.append(\"quantizationParameters\", quantizationParamsStr);\n        }\n        if (this.outFields) {\n            url.searchParams.append(\"outFields\", this.outFields);\n        }\n        if (this.distance) {\n            url.searchParams.append(\"distance\", `${this.distance}`);\n        }\n        if (this.maxAllowableOffset) {\n            url.searchParams.append(\"maxAllowableOffset\", `${this.maxAllowableOffset}`);\n        }\n        return url.toString();\n    }\n}\n//# sourceMappingURL=ArcGisFeatureQuery.js.map",
      "start": 1693508125119,
      "end": 1693508125190,
      "sourcemaps": null
    }
  ]
}
