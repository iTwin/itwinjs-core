{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/geometry/lib/esm/curve/Query/StrokeCountMap.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Curve\n */\nimport { Geometry } from \"../../Geometry\";\n/**\n * Data carrier interface for per-primitive stroke counts and distances used by PolyfaceBuilder.\n * * For a simple primitive (line segment or arc) that is stroked with uniform fraction, the members are:\n *   * `numStroke` = total number of strokes\n *   * `curveLength` = length of this curve\n *   * `a0` = external mapped coordinate for fraction 0 on this primitive or component\n *   * `a1` = external mapped coordinate for fraction 1 on this primitive or component\n *\n * * For linestring and bspline curve, those numbers are totals for the overall curve, and breakdown within\n * the components (line segments or bezier spans) is recorded on the optional array `componentData[]`\n *   * Members of the array are annotated with componentIndex within the linestring or bspline curve\n * @public\n */\nexport class StrokeCountMap {\n    /**\n     * Constructor.  Initialize all fields from arguments.\n     * * Callers that expect to announce numStroke and curveLength for multiple components send an empty componentData array.\n     * * Callers that do not have multiple components send undefined component data.\n     * @param numStroke\n     * @param curveLength\n     * @param a0\n     * @param a1\n     * @param componentData\n     */\n    constructor(numStroke, curveLength, a0, a1, componentData) {\n        this.numStroke = numStroke;\n        this.curveLength = curveLength;\n        this.a0 = a0;\n        this.a1 = a1;\n        this.componentData = componentData;\n    }\n    /**\n     * Create a `StrokeCountMap` with curve primitive and optional componentData array.\n     * @param primitive\n     * @param numStroke\n     * @param curveLength\n     * @param a0\n     * @param a1\n     * @param componentData\n     */\n    static createWithCurvePrimitive(primitive, numStroke, curveLength, a0, a1, componentData) {\n        const result = new StrokeCountMap(numStroke, curveLength, a0, a1, componentData);\n        result.primitive = primitive;\n        return result;\n    }\n    /**\n     * Create a `StrokeCountMap` with `componentIndex` (but no primitive or componentData array)\n     * @param index\n     * @param numStroke\n     * @param curveLength\n     * @param a0\n     * @param a1\n     */\n    static createWithComponentIndex(componentIndex = 0, numStroke = 0, curveLength = 0, a0 = 0, a1 = 0) {\n        const result = new StrokeCountMap(numStroke, curveLength, a0, a1);\n        result.componentIndex = componentIndex;\n        return result;\n    }\n    /**\n     * Create a StrokeCountMap, optionally\n     * * (a) use parent a1 as new a0\n     * * (b) attach a (usually empty) array for component counts.\n     * @param parentMap optional map whose a1 becomes a0 in the new map.\n     * @param componentData optional array of component StrokeCountMaps.\n     */\n    static createWithCurvePrimitiveAndOptionalParent(curvePrimitive, parentMap, componentData) {\n        const a0 = parentMap ? parentMap.a1 : 0.0;\n        const result = new StrokeCountMap(0, 0, a0, a0, componentData);\n        result.primitive = curvePrimitive;\n        return result;\n    }\n    /**\n     * Apply stroke count and curve length from a component to a parent map.\n     * If componentData is present, install the new count and length with distance limits\n     * @param parentMap map to be updated.\n     * @param numStroke number of strokes on new child curve\n     * @param curveLength curve length for new child curve.\n     */\n    addToCountAndLength(numStroke, curveLength) {\n        const a2 = this.a1 + curveLength;\n        if (this.componentData) {\n            this.componentData.push(new StrokeCountMap(numStroke, curveLength, this.a1, a2));\n        }\n        this.numStroke += numStroke;\n        this.curveLength += curveLength;\n        this.a1 = a2;\n    }\n    /**\n     * Return true if `other` has the same component structure as `this`\n     * * Testing recurses through corresponding members of componentData arrays.\n     */\n    isCompatibleComponentStructure(other, enforceCounts) {\n        if (enforceCounts && this.numStroke !== other.numStroke)\n            return false;\n        if (this.componentData === undefined && other.componentData === undefined)\n            return true;\n        if (this.componentData && other.componentData) {\n            // both have components. Recurse . . ..\n            if (this.componentData.length !== other.componentData.length)\n                return false;\n            const n = this.componentData.length;\n            for (let i = 0; i < n; i++)\n                if (!this.componentData[i].isCompatibleComponentStructure(other.componentData[i], enforceCounts))\n                    return false;\n            return true;\n        }\n        // one has componentData, the other not.\n        return false;\n    }\n    /**\n     * Clone all data from root.\n     * * clone componentData arrays recursively.\n     */\n    clone() {\n        const a = new StrokeCountMap(this.numStroke, this.curveLength, this.a0, this.a1);\n        if (this.componentData) {\n            a.componentData = [];\n            for (const child of this.componentData)\n                a.componentData.push(child.clone());\n        }\n        return a;\n    }\n    /**\n     * Interpolate in the a0,a1 mapping.\n     * @param fraction fractional position between a0 and a1\n     */\n    fractionToA(fraction) {\n        return Geometry.interpolate(this.a0, fraction, this.a1);\n    }\n}\n//# sourceMappingURL=StrokeCountMap.js.map",
      "start": 1693508123732,
      "end": 1693508123873,
      "sourcemaps": null
    }
  ]
}
