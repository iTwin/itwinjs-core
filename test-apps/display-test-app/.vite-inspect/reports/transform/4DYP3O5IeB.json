{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/LightingEditor.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { CheckBox, createButton, createCheckBox, createColorInput, createLabeledNumericInput } from \"@itwin/frontend-devtools\";\r\nimport { ColorDef, LightSettings, LightSettingsProps, RenderMode, RgbColor, SolarShadowSettings } from \"@itwin/core-common\";\r\nimport { Viewport, ViewState } from \"@itwin/core-frontend\";\r\n\r\n// cspell:ignore cels sundir textbox hemi lighteditor\r\n\r\ntype Update = (view: ViewState) => void;\r\n\r\nexport class LightingEditor {\r\n  private readonly _vp: Viewport;\r\n  private readonly _updates: Update[] = [];\r\n  private _id = 0;\r\n\r\n  public constructor(vp: Viewport, parent: HTMLElement) {\r\n    this._vp = vp;\r\n\r\n    this.addLightingToggle(parent);\r\n\r\n    const content = document.createElement(\"div\");\r\n    parent.appendChild(content);\r\n\r\n    this.addShadows(content);\r\n    this.addSolar(content);\r\n    this.addIntensities(content);\r\n    this.addAmbient(content);\r\n    this.addFresnel(content);\r\n    this.addHemisphere(content);\r\n\r\n    const celInput = createLabeledNumericInput({\r\n      parent: content,\r\n      min: 0,\r\n      max: 255,\r\n      step: 1,\r\n      display: \"block\",\r\n      name: \"Num Cels\",\r\n      id: this._nextId,\r\n      value: vp.view.displayStyle.is3d() ? vp.view.displayStyle.lights.numCels : 0,\r\n      handler: (value) => this.updateSettings({ numCels: value }),\r\n    });\r\n\r\n    const resetButton = createButton({\r\n      parent: content,\r\n      value: \"Reset\",\r\n      handler: () => {\r\n        this._vp.setLightSettings(LightSettings.fromJSON());\r\n        this.update(this._vp.view);\r\n      },\r\n    });\r\n    resetButton.div.style.textAlign = \"center\";\r\n\r\n    this._updates.push((view: ViewState) => {\r\n      const visible = view.is3d() && view.viewFlags.lighting;\r\n      content.style.display = visible ? \"\" : \"none\";\r\n      if (view.displayStyle.is3d())\r\n        celInput.input.value = view.displayStyle.lights.numCels.toString();\r\n    });\r\n  }\r\n\r\n  public update(view: ViewState): void {\r\n    for (const update of this._updates)\r\n      update(view);\r\n  }\r\n\r\n  private addShadows(parent: HTMLElement): void {\r\n    const span = document.createElement(\"span\");\r\n    span.style.display = \"flex\";\r\n    parent.appendChild(span);\r\n\r\n    const cb = this.addCheckBox(\"Shadows\", (enabled: boolean) => {\r\n      this._vp.viewFlags = this._vp.viewFlags.with(\"shadows\", enabled);\r\n    }, span).checkbox;\r\n\r\n    let color;\r\n    if (this._vp.view.is3d())\r\n      color = this._vp.view.getDisplayStyle3d().settings.solarShadows.color.toColorDef();\r\n\r\n    const input = createColorInput({\r\n      id: this._nextId,\r\n      parent: span,\r\n      display: \"inline\",\r\n      value: color?.toHexString() ?? \"#FFFFFF\",\r\n      handler: (newColor) => {\r\n        const props = { color: ColorDef.create(newColor).toJSON() };\r\n        const settings = this._vp.solarShadowSettings ? this._vp.solarShadowSettings.clone(props) : SolarShadowSettings.fromJSON(props);\r\n        this._vp.setSolarShadowSettings(settings);\r\n      },\r\n    }).input;\r\n\r\n    this._updates.push((view: ViewState) => {\r\n      cb.checked = view.viewFlags.shadows;\r\n      const shadowColor = view.displayStyle.is3d() ? view.displayStyle.solarShadows.color.toColorDef().toHexString() : \"#FFFFFF\";\r\n      input.value = shadowColor;\r\n    });\r\n  }\r\n\r\n  private addSolar(parent: HTMLElement): void {\r\n    const span = document.createElement(\"span\");\r\n    span.style.display = \"flex\";\r\n    parent.appendChild(span);\r\n    const intensityInput = this.addIntensityInput(span, \"Solar\", this._vp.lightSettings?.solar.intensity ?? 0, (intensity) => this.updateSettings({ solar: { intensity } }));\r\n    intensityInput.style.marginRight = \"0.67em\";\r\n\r\n    createButton({\r\n      parent: span,\r\n      value: \"Set direction from view\",\r\n      handler: () => {\r\n        const direction = this._vp.view.getZVector();\r\n        direction.negate(direction);\r\n        this.updateSettings({ solar: { direction } });\r\n      },\r\n    });\r\n\r\n    const cb = this.addCheckBox(\"Always\", (alwaysEnabled: boolean) => {\r\n      this.updateSettings({ solar: { alwaysEnabled } });\r\n    }, span);\r\n\r\n    this._updates.push((_view: ViewState) => {\r\n      const lights = this._vp.lightSettings;\r\n      if (!lights)\r\n        return;\r\n\r\n      intensityInput.value = lights.solar.intensity.toString();\r\n      cb.checkbox.checked = lights.solar.alwaysEnabled;\r\n    });\r\n  }\r\n\r\n  private addIntensities(parent: HTMLElement): void {\r\n    const span = document.createElement(\"span\");\r\n    span.style.display = \"flex\";\r\n    parent.appendChild(span);\r\n\r\n    const lights = this._vp.lightSettings;\r\n    const portrait = this.addIntensityInput(span, \"Portrait\", lights?.portraitIntensity ?? 0, (intensity) => this.updateSettings({ portrait: { intensity } }));\r\n    const specular = this.addIntensityInput(span, \"Specular\", lights?.specularIntensity ?? 0, (specularIntensity) => this.updateSettings({ specularIntensity }));\r\n    portrait.style.marginRight = \"0.67em\";\r\n\r\n    this._updates.push((_view: ViewState) => {\r\n      const settings = this._vp.lightSettings;\r\n      if (settings) {\r\n        portrait.value = settings.portraitIntensity.toString();\r\n        specular.value = settings.specularIntensity.toString();\r\n      }\r\n    });\r\n  }\r\n\r\n  private addFresnel(parent: HTMLElement): void {\r\n    const span = document.createElement(\"span\");\r\n    span.style.display = \"flex\";\r\n    parent.appendChild(span);\r\n\r\n    const intensityInput = this.addIntensityInput(span, \"Fresnel\", this._vp.lightSettings?.fresnel.intensity ?? 0, (intensity) => this.updateSettings({ fresnel: { intensity } }));\r\n    intensityInput.style.marginRight = \"0.67em\";\r\n\r\n    const cb = this.addCheckBox(\"Invert\", (invert: boolean) => this.updateSettings({ fresnel: { invert } }), span);\r\n    this._updates.push(() => {\r\n      const lights = this._vp.lightSettings;\r\n      if (lights) {\r\n        intensityInput.value = lights.fresnel.intensity.toString();\r\n        cb.checkbox.checked = lights.fresnel.invert;\r\n      }\r\n    });\r\n  }\r\n\r\n  private addAmbient(parent: HTMLElement): void {\r\n    const span = document.createElement(\"span\");\r\n    span.style.display = \"flex\";\r\n    parent.appendChild(span);\r\n\r\n    const amb = this._vp.lightSettings?.ambient;\r\n    const intensityInput = this.addIntensityInput(span, \"Ambient\", amb?.intensity ?? 0, (intensity) => this.updateSettings({ ambient: { intensity } }));\r\n    const colorInput = createColorInput({\r\n      parent: span,\r\n      display: \"inline\",\r\n      value: amb?.color.toColorDef().toHexString() ?? \"#000000\",\r\n      handler: (color) => {\r\n        this.updateSettings({ ambient: { color: RgbColor.fromColorDef(ColorDef.create(color)) } });\r\n      },\r\n    }).input;\r\n\r\n    this._updates.push((_view: ViewState) => {\r\n      const newAmb = this._vp.lightSettings?.ambient;\r\n      if (newAmb) {\r\n        intensityInput.value = newAmb.intensity.toString();\r\n        colorInput.value = newAmb.color.toColorDef().toHexString();\r\n      }\r\n    });\r\n  }\r\n\r\n  private addHemisphere(parent: HTMLElement): void {\r\n    const span = document.createElement(\"span\");\r\n    span.style.display = \"flex\";\r\n    parent.appendChild(span);\r\n\r\n    const hemi = this._vp.lightSettings?.hemisphere;\r\n    const intensityInput = this.addIntensityInput(span, \"Hemisphere\", hemi?.intensity ?? 0, (intensity) => this.updateSettings({ hemisphere: { intensity } }));\r\n    intensityInput.style.marginRight = \"0.67em\";\r\n\r\n    const skyInput = createColorInput({\r\n      parent: span,\r\n      label: \"Upper: \",\r\n      id: this._nextId,\r\n      display: \"inline\",\r\n      value: hemi?.upperColor.toColorDef().toHexString() ?? \"#FFFFFF\",\r\n      handler: (newSky) => {\r\n        this.updateSettings({ hemisphere: { upperColor: RgbColor.fromColorDef(ColorDef.create(newSky)) } });\r\n      },\r\n    }).input;\r\n    skyInput.style.marginRight = \"0.67em\";\r\n\r\n    const groundInput = createColorInput({\r\n      parent: span,\r\n      label: \"Lower: \",\r\n      id: this._nextId,\r\n      display: \"inline\",\r\n      value: hemi?.lowerColor.toColorDef().toHexString() ?? \"#FFFFFF\",\r\n      handler: (newGround) => {\r\n        this.updateSettings({ hemisphere: { lowerColor: RgbColor.fromColorDef(ColorDef.create(newGround)) } });\r\n      },\r\n    }).input;\r\n\r\n    this._updates.push((_view: ViewState) => {\r\n      const settings = this._vp.lightSettings?.hemisphere;\r\n      if (settings) {\r\n        intensityInput.value = settings.intensity.toString();\r\n        skyInput.value = settings.upperColor.toColorDef().toHexString();\r\n        groundInput.value = settings.lowerColor.toColorDef().toHexString();\r\n      }\r\n    });\r\n  }\r\n\r\n  private addIntensityInput(parent: HTMLElement, label: string, value: number, handler: (value: number) => void): HTMLInputElement {\r\n    return createLabeledNumericInput({\r\n      parent,\r\n      min: 0,\r\n      max: 5,\r\n      step: 0.05,\r\n      display: \"inline\",\r\n      name: `${label}: `,\r\n      id: this._nextId,\r\n      value,\r\n      parseAsFloat: true,\r\n      handler,\r\n    }).input;\r\n  }\r\n\r\n  private updateSettings(props: LightSettingsProps): void {\r\n    const lights = this._vp.lightSettings;\r\n    if (lights)\r\n      this._vp.setLightSettings(lights.clone(props));\r\n  }\r\n\r\n  private addLightingToggle(parent: HTMLElement): void {\r\n    const elems = this.addCheckBox(\"Lights\", (enabled: boolean) => {\r\n      this._vp.viewFlags = this._vp.viewFlags.with(\"lighting\", enabled);\r\n    }, parent);\r\n\r\n    this._updates.push((view: ViewState) => {\r\n      const vf = view.viewFlags;\r\n      const visible = view.is3d() && RenderMode.SmoothShade === vf.renderMode;\r\n      elems.div.style.display = visible ? \"\" : \"none\";\r\n      if (visible)\r\n        elems.checkbox.checked = vf.lighting;\r\n    });\r\n  }\r\n\r\n  private addCheckBox(name: string, handler: (enabled: boolean) => void, parent: HTMLElement): CheckBox {\r\n    return createCheckBox({\r\n      parent,\r\n      name,\r\n      id: this._nextId,\r\n      handler: (cb) => handler(cb.checked),\r\n    });\r\n  }\r\n\r\n  private get _nextId(): string {\r\n    return `lighteditor_${++this._id}`;\r\n  }\r\n}\r\n",
      "start": 1693508126661,
      "end": 1693508126731,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { createButton, createCheckBox, createColorInput, createLabeledNumericInput } from \"@itwin/frontend-devtools\";\nimport { ColorDef, LightSettings, RenderMode, RgbColor, SolarShadowSettings } from \"@itwin/core-common\";\nexport class LightingEditor {\n  constructor(vp, parent) {\n    this._updates = [];\n    this._id = 0;\n    this._vp = vp;\n    this.addLightingToggle(parent);\n    const content = document.createElement(\"div\");\n    parent.appendChild(content);\n    this.addShadows(content);\n    this.addSolar(content);\n    this.addIntensities(content);\n    this.addAmbient(content);\n    this.addFresnel(content);\n    this.addHemisphere(content);\n    const celInput = createLabeledNumericInput({\n      parent: content,\n      min: 0,\n      max: 255,\n      step: 1,\n      display: \"block\",\n      name: \"Num Cels\",\n      id: this._nextId,\n      value: vp.view.displayStyle.is3d() ? vp.view.displayStyle.lights.numCels : 0,\n      handler: (value) => this.updateSettings({ numCels: value })\n    });\n    const resetButton = createButton({\n      parent: content,\n      value: \"Reset\",\n      handler: () => {\n        this._vp.setLightSettings(LightSettings.fromJSON());\n        this.update(this._vp.view);\n      }\n    });\n    resetButton.div.style.textAlign = \"center\";\n    this._updates.push((view) => {\n      const visible = view.is3d() && view.viewFlags.lighting;\n      content.style.display = visible ? \"\" : \"none\";\n      if (view.displayStyle.is3d())\n        celInput.input.value = view.displayStyle.lights.numCels.toString();\n    });\n  }\n  update(view) {\n    for (const update of this._updates)\n      update(view);\n  }\n  addShadows(parent) {\n    const span = document.createElement(\"span\");\n    span.style.display = \"flex\";\n    parent.appendChild(span);\n    const cb = this.addCheckBox(\"Shadows\", (enabled) => {\n      this._vp.viewFlags = this._vp.viewFlags.with(\"shadows\", enabled);\n    }, span).checkbox;\n    let color;\n    if (this._vp.view.is3d())\n      color = this._vp.view.getDisplayStyle3d().settings.solarShadows.color.toColorDef();\n    const input = createColorInput({\n      id: this._nextId,\n      parent: span,\n      display: \"inline\",\n      value: color?.toHexString() ?? \"#FFFFFF\",\n      handler: (newColor) => {\n        const props = { color: ColorDef.create(newColor).toJSON() };\n        const settings = this._vp.solarShadowSettings ? this._vp.solarShadowSettings.clone(props) : SolarShadowSettings.fromJSON(props);\n        this._vp.setSolarShadowSettings(settings);\n      }\n    }).input;\n    this._updates.push((view) => {\n      cb.checked = view.viewFlags.shadows;\n      const shadowColor = view.displayStyle.is3d() ? view.displayStyle.solarShadows.color.toColorDef().toHexString() : \"#FFFFFF\";\n      input.value = shadowColor;\n    });\n  }\n  addSolar(parent) {\n    const span = document.createElement(\"span\");\n    span.style.display = \"flex\";\n    parent.appendChild(span);\n    const intensityInput = this.addIntensityInput(span, \"Solar\", this._vp.lightSettings?.solar.intensity ?? 0, (intensity) => this.updateSettings({ solar: { intensity } }));\n    intensityInput.style.marginRight = \"0.67em\";\n    createButton({\n      parent: span,\n      value: \"Set direction from view\",\n      handler: () => {\n        const direction = this._vp.view.getZVector();\n        direction.negate(direction);\n        this.updateSettings({ solar: { direction } });\n      }\n    });\n    const cb = this.addCheckBox(\"Always\", (alwaysEnabled) => {\n      this.updateSettings({ solar: { alwaysEnabled } });\n    }, span);\n    this._updates.push((_view) => {\n      const lights = this._vp.lightSettings;\n      if (!lights)\n        return;\n      intensityInput.value = lights.solar.intensity.toString();\n      cb.checkbox.checked = lights.solar.alwaysEnabled;\n    });\n  }\n  addIntensities(parent) {\n    const span = document.createElement(\"span\");\n    span.style.display = \"flex\";\n    parent.appendChild(span);\n    const lights = this._vp.lightSettings;\n    const portrait = this.addIntensityInput(span, \"Portrait\", lights?.portraitIntensity ?? 0, (intensity) => this.updateSettings({ portrait: { intensity } }));\n    const specular = this.addIntensityInput(span, \"Specular\", lights?.specularIntensity ?? 0, (specularIntensity) => this.updateSettings({ specularIntensity }));\n    portrait.style.marginRight = \"0.67em\";\n    this._updates.push((_view) => {\n      const settings = this._vp.lightSettings;\n      if (settings) {\n        portrait.value = settings.portraitIntensity.toString();\n        specular.value = settings.specularIntensity.toString();\n      }\n    });\n  }\n  addFresnel(parent) {\n    const span = document.createElement(\"span\");\n    span.style.display = \"flex\";\n    parent.appendChild(span);\n    const intensityInput = this.addIntensityInput(span, \"Fresnel\", this._vp.lightSettings?.fresnel.intensity ?? 0, (intensity) => this.updateSettings({ fresnel: { intensity } }));\n    intensityInput.style.marginRight = \"0.67em\";\n    const cb = this.addCheckBox(\"Invert\", (invert) => this.updateSettings({ fresnel: { invert } }), span);\n    this._updates.push(() => {\n      const lights = this._vp.lightSettings;\n      if (lights) {\n        intensityInput.value = lights.fresnel.intensity.toString();\n        cb.checkbox.checked = lights.fresnel.invert;\n      }\n    });\n  }\n  addAmbient(parent) {\n    const span = document.createElement(\"span\");\n    span.style.display = \"flex\";\n    parent.appendChild(span);\n    const amb = this._vp.lightSettings?.ambient;\n    const intensityInput = this.addIntensityInput(span, \"Ambient\", amb?.intensity ?? 0, (intensity) => this.updateSettings({ ambient: { intensity } }));\n    const colorInput = createColorInput({\n      parent: span,\n      display: \"inline\",\n      value: amb?.color.toColorDef().toHexString() ?? \"#000000\",\n      handler: (color) => {\n        this.updateSettings({ ambient: { color: RgbColor.fromColorDef(ColorDef.create(color)) } });\n      }\n    }).input;\n    this._updates.push((_view) => {\n      const newAmb = this._vp.lightSettings?.ambient;\n      if (newAmb) {\n        intensityInput.value = newAmb.intensity.toString();\n        colorInput.value = newAmb.color.toColorDef().toHexString();\n      }\n    });\n  }\n  addHemisphere(parent) {\n    const span = document.createElement(\"span\");\n    span.style.display = \"flex\";\n    parent.appendChild(span);\n    const hemi = this._vp.lightSettings?.hemisphere;\n    const intensityInput = this.addIntensityInput(span, \"Hemisphere\", hemi?.intensity ?? 0, (intensity) => this.updateSettings({ hemisphere: { intensity } }));\n    intensityInput.style.marginRight = \"0.67em\";\n    const skyInput = createColorInput({\n      parent: span,\n      label: \"Upper: \",\n      id: this._nextId,\n      display: \"inline\",\n      value: hemi?.upperColor.toColorDef().toHexString() ?? \"#FFFFFF\",\n      handler: (newSky) => {\n        this.updateSettings({ hemisphere: { upperColor: RgbColor.fromColorDef(ColorDef.create(newSky)) } });\n      }\n    }).input;\n    skyInput.style.marginRight = \"0.67em\";\n    const groundInput = createColorInput({\n      parent: span,\n      label: \"Lower: \",\n      id: this._nextId,\n      display: \"inline\",\n      value: hemi?.lowerColor.toColorDef().toHexString() ?? \"#FFFFFF\",\n      handler: (newGround) => {\n        this.updateSettings({ hemisphere: { lowerColor: RgbColor.fromColorDef(ColorDef.create(newGround)) } });\n      }\n    }).input;\n    this._updates.push((_view) => {\n      const settings = this._vp.lightSettings?.hemisphere;\n      if (settings) {\n        intensityInput.value = settings.intensity.toString();\n        skyInput.value = settings.upperColor.toColorDef().toHexString();\n        groundInput.value = settings.lowerColor.toColorDef().toHexString();\n      }\n    });\n  }\n  addIntensityInput(parent, label, value, handler) {\n    return createLabeledNumericInput({\n      parent,\n      min: 0,\n      max: 5,\n      step: 0.05,\n      display: \"inline\",\n      name: `${label}: `,\n      id: this._nextId,\n      value,\n      parseAsFloat: true,\n      handler\n    }).input;\n  }\n  updateSettings(props) {\n    const lights = this._vp.lightSettings;\n    if (lights)\n      this._vp.setLightSettings(lights.clone(props));\n  }\n  addLightingToggle(parent) {\n    const elems = this.addCheckBox(\"Lights\", (enabled) => {\n      this._vp.viewFlags = this._vp.viewFlags.with(\"lighting\", enabled);\n    }, parent);\n    this._updates.push((view) => {\n      const vf = view.viewFlags;\n      const visible = view.is3d() && RenderMode.SmoothShade === vf.renderMode;\n      elems.div.style.display = visible ? \"\" : \"none\";\n      if (visible)\n        elems.checkbox.checked = vf.lighting;\n    });\n  }\n  addCheckBox(name, handler, parent) {\n    return createCheckBox({\n      parent,\n      name,\n      id: this._nextId,\n      handler: (cb) => handler(cb.checked)\n    });\n  }\n  get _nextId() {\n    return `lighteditor_${++this._id}`;\n  }\n}\n",
      "start": 1693508126731,
      "end": 1693508126743,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/LightingEditor.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { CheckBox, createButton, createCheckBox, createColorInput, createLabeledNumericInput } from \"@itwin/frontend-devtools\";\r\nimport { ColorDef, LightSettings, LightSettingsProps, RenderMode, RgbColor, SolarShadowSettings } from \"@itwin/core-common\";\r\nimport { Viewport, ViewState } from \"@itwin/core-frontend\";\r\n\r\n// cspell:ignore cels sundir textbox hemi lighteditor\r\n\r\ntype Update = (view: ViewState) => void;\r\n\r\nexport class LightingEditor {\r\n  private readonly _vp: Viewport;\r\n  private readonly _updates: Update[] = [];\r\n  private _id = 0;\r\n\r\n  public constructor(vp: Viewport, parent: HTMLElement) {\r\n    this._vp = vp;\r\n\r\n    this.addLightingToggle(parent);\r\n\r\n    const content = document.createElement(\"div\");\r\n    parent.appendChild(content);\r\n\r\n    this.addShadows(content);\r\n    this.addSolar(content);\r\n    this.addIntensities(content);\r\n    this.addAmbient(content);\r\n    this.addFresnel(content);\r\n    this.addHemisphere(content);\r\n\r\n    const celInput = createLabeledNumericInput({\r\n      parent: content,\r\n      min: 0,\r\n      max: 255,\r\n      step: 1,\r\n      display: \"block\",\r\n      name: \"Num Cels\",\r\n      id: this._nextId,\r\n      value: vp.view.displayStyle.is3d() ? vp.view.displayStyle.lights.numCels : 0,\r\n      handler: (value) => this.updateSettings({ numCels: value }),\r\n    });\r\n\r\n    const resetButton = createButton({\r\n      parent: content,\r\n      value: \"Reset\",\r\n      handler: () => {\r\n        this._vp.setLightSettings(LightSettings.fromJSON());\r\n        this.update(this._vp.view);\r\n      },\r\n    });\r\n    resetButton.div.style.textAlign = \"center\";\r\n\r\n    this._updates.push((view: ViewState) => {\r\n      const visible = view.is3d() && view.viewFlags.lighting;\r\n      content.style.display = visible ? \"\" : \"none\";\r\n      if (view.displayStyle.is3d())\r\n        celInput.input.value = view.displayStyle.lights.numCels.toString();\r\n    });\r\n  }\r\n\r\n  public update(view: ViewState): void {\r\n    for (const update of this._updates)\r\n      update(view);\r\n  }\r\n\r\n  private addShadows(parent: HTMLElement): void {\r\n    const span = document.createElement(\"span\");\r\n    span.style.display = \"flex\";\r\n    parent.appendChild(span);\r\n\r\n    const cb = this.addCheckBox(\"Shadows\", (enabled: boolean) => {\r\n      this._vp.viewFlags = this._vp.viewFlags.with(\"shadows\", enabled);\r\n    }, span).checkbox;\r\n\r\n    let color;\r\n    if (this._vp.view.is3d())\r\n      color = this._vp.view.getDisplayStyle3d().settings.solarShadows.color.toColorDef();\r\n\r\n    const input = createColorInput({\r\n      id: this._nextId,\r\n      parent: span,\r\n      display: \"inline\",\r\n      value: color?.toHexString() ?? \"#FFFFFF\",\r\n      handler: (newColor) => {\r\n        const props = { color: ColorDef.create(newColor).toJSON() };\r\n        const settings = this._vp.solarShadowSettings ? this._vp.solarShadowSettings.clone(props) : SolarShadowSettings.fromJSON(props);\r\n        this._vp.setSolarShadowSettings(settings);\r\n      },\r\n    }).input;\r\n\r\n    this._updates.push((view: ViewState) => {\r\n      cb.checked = view.viewFlags.shadows;\r\n      const shadowColor = view.displayStyle.is3d() ? view.displayStyle.solarShadows.color.toColorDef().toHexString() : \"#FFFFFF\";\r\n      input.value = shadowColor;\r\n    });\r\n  }\r\n\r\n  private addSolar(parent: HTMLElement): void {\r\n    const span = document.createElement(\"span\");\r\n    span.style.display = \"flex\";\r\n    parent.appendChild(span);\r\n    const intensityInput = this.addIntensityInput(span, \"Solar\", this._vp.lightSettings?.solar.intensity ?? 0, (intensity) => this.updateSettings({ solar: { intensity } }));\r\n    intensityInput.style.marginRight = \"0.67em\";\r\n\r\n    createButton({\r\n      parent: span,\r\n      value: \"Set direction from view\",\r\n      handler: () => {\r\n        const direction = this._vp.view.getZVector();\r\n        direction.negate(direction);\r\n        this.updateSettings({ solar: { direction } });\r\n      },\r\n    });\r\n\r\n    const cb = this.addCheckBox(\"Always\", (alwaysEnabled: boolean) => {\r\n      this.updateSettings({ solar: { alwaysEnabled } });\r\n    }, span);\r\n\r\n    this._updates.push((_view: ViewState) => {\r\n      const lights = this._vp.lightSettings;\r\n      if (!lights)\r\n        return;\r\n\r\n      intensityInput.value = lights.solar.intensity.toString();\r\n      cb.checkbox.checked = lights.solar.alwaysEnabled;\r\n    });\r\n  }\r\n\r\n  private addIntensities(parent: HTMLElement): void {\r\n    const span = document.createElement(\"span\");\r\n    span.style.display = \"flex\";\r\n    parent.appendChild(span);\r\n\r\n    const lights = this._vp.lightSettings;\r\n    const portrait = this.addIntensityInput(span, \"Portrait\", lights?.portraitIntensity ?? 0, (intensity) => this.updateSettings({ portrait: { intensity } }));\r\n    const specular = this.addIntensityInput(span, \"Specular\", lights?.specularIntensity ?? 0, (specularIntensity) => this.updateSettings({ specularIntensity }));\r\n    portrait.style.marginRight = \"0.67em\";\r\n\r\n    this._updates.push((_view: ViewState) => {\r\n      const settings = this._vp.lightSettings;\r\n      if (settings) {\r\n        portrait.value = settings.portraitIntensity.toString();\r\n        specular.value = settings.specularIntensity.toString();\r\n      }\r\n    });\r\n  }\r\n\r\n  private addFresnel(parent: HTMLElement): void {\r\n    const span = document.createElement(\"span\");\r\n    span.style.display = \"flex\";\r\n    parent.appendChild(span);\r\n\r\n    const intensityInput = this.addIntensityInput(span, \"Fresnel\", this._vp.lightSettings?.fresnel.intensity ?? 0, (intensity) => this.updateSettings({ fresnel: { intensity } }));\r\n    intensityInput.style.marginRight = \"0.67em\";\r\n\r\n    const cb = this.addCheckBox(\"Invert\", (invert: boolean) => this.updateSettings({ fresnel: { invert } }), span);\r\n    this._updates.push(() => {\r\n      const lights = this._vp.lightSettings;\r\n      if (lights) {\r\n        intensityInput.value = lights.fresnel.intensity.toString();\r\n        cb.checkbox.checked = lights.fresnel.invert;\r\n      }\r\n    });\r\n  }\r\n\r\n  private addAmbient(parent: HTMLElement): void {\r\n    const span = document.createElement(\"span\");\r\n    span.style.display = \"flex\";\r\n    parent.appendChild(span);\r\n\r\n    const amb = this._vp.lightSettings?.ambient;\r\n    const intensityInput = this.addIntensityInput(span, \"Ambient\", amb?.intensity ?? 0, (intensity) => this.updateSettings({ ambient: { intensity } }));\r\n    const colorInput = createColorInput({\r\n      parent: span,\r\n      display: \"inline\",\r\n      value: amb?.color.toColorDef().toHexString() ?? \"#000000\",\r\n      handler: (color) => {\r\n        this.updateSettings({ ambient: { color: RgbColor.fromColorDef(ColorDef.create(color)) } });\r\n      },\r\n    }).input;\r\n\r\n    this._updates.push((_view: ViewState) => {\r\n      const newAmb = this._vp.lightSettings?.ambient;\r\n      if (newAmb) {\r\n        intensityInput.value = newAmb.intensity.toString();\r\n        colorInput.value = newAmb.color.toColorDef().toHexString();\r\n      }\r\n    });\r\n  }\r\n\r\n  private addHemisphere(parent: HTMLElement): void {\r\n    const span = document.createElement(\"span\");\r\n    span.style.display = \"flex\";\r\n    parent.appendChild(span);\r\n\r\n    const hemi = this._vp.lightSettings?.hemisphere;\r\n    const intensityInput = this.addIntensityInput(span, \"Hemisphere\", hemi?.intensity ?? 0, (intensity) => this.updateSettings({ hemisphere: { intensity } }));\r\n    intensityInput.style.marginRight = \"0.67em\";\r\n\r\n    const skyInput = createColorInput({\r\n      parent: span,\r\n      label: \"Upper: \",\r\n      id: this._nextId,\r\n      display: \"inline\",\r\n      value: hemi?.upperColor.toColorDef().toHexString() ?? \"#FFFFFF\",\r\n      handler: (newSky) => {\r\n        this.updateSettings({ hemisphere: { upperColor: RgbColor.fromColorDef(ColorDef.create(newSky)) } });\r\n      },\r\n    }).input;\r\n    skyInput.style.marginRight = \"0.67em\";\r\n\r\n    const groundInput = createColorInput({\r\n      parent: span,\r\n      label: \"Lower: \",\r\n      id: this._nextId,\r\n      display: \"inline\",\r\n      value: hemi?.lowerColor.toColorDef().toHexString() ?? \"#FFFFFF\",\r\n      handler: (newGround) => {\r\n        this.updateSettings({ hemisphere: { lowerColor: RgbColor.fromColorDef(ColorDef.create(newGround)) } });\r\n      },\r\n    }).input;\r\n\r\n    this._updates.push((_view: ViewState) => {\r\n      const settings = this._vp.lightSettings?.hemisphere;\r\n      if (settings) {\r\n        intensityInput.value = settings.intensity.toString();\r\n        skyInput.value = settings.upperColor.toColorDef().toHexString();\r\n        groundInput.value = settings.lowerColor.toColorDef().toHexString();\r\n      }\r\n    });\r\n  }\r\n\r\n  private addIntensityInput(parent: HTMLElement, label: string, value: number, handler: (value: number) => void): HTMLInputElement {\r\n    return createLabeledNumericInput({\r\n      parent,\r\n      min: 0,\r\n      max: 5,\r\n      step: 0.05,\r\n      display: \"inline\",\r\n      name: `${label}: `,\r\n      id: this._nextId,\r\n      value,\r\n      parseAsFloat: true,\r\n      handler,\r\n    }).input;\r\n  }\r\n\r\n  private updateSettings(props: LightSettingsProps): void {\r\n    const lights = this._vp.lightSettings;\r\n    if (lights)\r\n      this._vp.setLightSettings(lights.clone(props));\r\n  }\r\n\r\n  private addLightingToggle(parent: HTMLElement): void {\r\n    const elems = this.addCheckBox(\"Lights\", (enabled: boolean) => {\r\n      this._vp.viewFlags = this._vp.viewFlags.with(\"lighting\", enabled);\r\n    }, parent);\r\n\r\n    this._updates.push((view: ViewState) => {\r\n      const vf = view.viewFlags;\r\n      const visible = view.is3d() && RenderMode.SmoothShade === vf.renderMode;\r\n      elems.div.style.display = visible ? \"\" : \"none\";\r\n      if (visible)\r\n        elems.checkbox.checked = vf.lighting;\r\n    });\r\n  }\r\n\r\n  private addCheckBox(name: string, handler: (enabled: boolean) => void, parent: HTMLElement): CheckBox {\r\n    return createCheckBox({\r\n      parent,\r\n      name,\r\n      id: this._nextId,\r\n      handler: (cb) => handler(cb.checked),\r\n    });\r\n  }\r\n\r\n  private get _nextId(): string {\r\n    return `lighteditor_${++this._id}`;\r\n  }\r\n}\r\n"
        ],
        "mappings": "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",
        "names": []
      }
    }
  ]
}
