{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/FpsMonitor.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport {\r\n  IModelApp, NotifyMessageDetails, OutputMessagePriority, PerformanceMetrics, ScreenViewport, Target, Tool, Viewport,\r\n} from \"@itwin/core-frontend\";\r\n\r\nexport interface FpsMonitorProps {\r\n  checkbox: HTMLInputElement;\r\n  label: HTMLLabelElement;\r\n  output: HTMLSpanElement;\r\n}\r\n\r\nexport class FpsMonitor {\r\n  private readonly _checkbox: HTMLInputElement;\r\n  private readonly _label: HTMLLabelElement;\r\n  private readonly _output: HTMLSpanElement;\r\n  private _enabled = false;\r\n  private _prevTime = 0;\r\n  private _frameCount = 0;\r\n\r\n  public constructor(props: FpsMonitorProps) {\r\n    this._checkbox = props.checkbox;\r\n    this._label = props.label;\r\n    this._output = props.output;\r\n\r\n    IModelApp.viewManager.onViewOpen.addListener((vp: ScreenViewport) => this.onViewOpen(vp));\r\n    this._checkbox.addEventListener(\"click\", () => this.enabled = this._checkbox.checked);\r\n  }\r\n\r\n  private onViewOpen(vp: ScreenViewport): void {\r\n    if (this._enabled)\r\n      vp.continuousRendering = true;\r\n  }\r\n\r\n  public get enabled() { return this._enabled; }\r\n  public set enabled(enabled: boolean) {\r\n    if (enabled === this.enabled)\r\n      return;\r\n\r\n    this._enabled = enabled;\r\n    this._frameCount = 0;\r\n    for (const vp of IModelApp.viewManager)\r\n      vp.continuousRendering = enabled;\r\n\r\n    this._label.innerText = `FPS${this.enabled ? \":\" : \"\"}`;\r\n    this._output.innerText = \"\";\r\n    if (enabled) {\r\n      this._prevTime = performance.now();\r\n      requestAnimationFrame(() => this.update());\r\n    }\r\n  }\r\n\r\n  private update(): void {\r\n    if (!this.enabled)\r\n      return;\r\n\r\n    ++this._frameCount;\r\n    const curTime = performance.now();\r\n    if (curTime >= this._prevTime + 1000) {\r\n      const fps = (this._frameCount * 1000) / (curTime - this._prevTime);\r\n      this._output.innerText = fps.toFixed(2);\r\n\r\n      this._prevTime = curTime;\r\n      this._frameCount = 0;\r\n    }\r\n\r\n    requestAnimationFrame(() => this.update());\r\n  }\r\n}\r\n\r\nexport class RecordFpsTool extends Tool {\r\n  public static override toolId = \"RecordFps\";\r\n  public static override get minArgs() { return 0; }\r\n  public static override get maxArgs() { return 1; }\r\n\r\n  private _hadContinuousRendering = false;\r\n  private _numFramesToRecord = 0;\r\n  private _numFramesRecorded = 0;\r\n  private _metrics?: PerformanceMetrics;\r\n  private _dispose?: () => void;\r\n\r\n  public override async run(numFramesToRecord = 150): Promise<boolean> {\r\n    const vp = IModelApp.viewManager.selectedView;\r\n    if (undefined === vp || 0 >= numFramesToRecord)\r\n      return true;\r\n\r\n    this._numFramesToRecord = numFramesToRecord;\r\n    this._hadContinuousRendering = vp.continuousRendering;\r\n    vp.continuousRendering = true;\r\n\r\n    this._metrics = new PerformanceMetrics(false, true);\r\n    (vp.target as Target).performanceMetrics = this._metrics;\r\n\r\n    this._dispose = vp.onRender.addListener((viewport) => this.update(viewport));\r\n\r\n    IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Info, \"Recording...\"));\r\n    return true;\r\n  }\r\n\r\n  public override async parseAndRun(...args: string[]): Promise<boolean> {\r\n    let numFramesToRecord;\r\n    if (1 === args.length) {\r\n      numFramesToRecord = parseInt(args[0], 10);\r\n      if (Number.isNaN(numFramesToRecord))\r\n        return true;\r\n    }\r\n\r\n    return this.run(numFramesToRecord);\r\n  }\r\n\r\n  private update(vp: Viewport): void {\r\n    if (++this._numFramesRecorded < this._numFramesToRecord)\r\n      return;\r\n\r\n    if (undefined !== this._dispose)\r\n      this._dispose();\r\n\r\n    (vp.target as Target).performanceMetrics = undefined;\r\n    vp.continuousRendering = this._hadContinuousRendering;\r\n\r\n    const metrics = this._metrics!;\r\n    const fps = (metrics.spfTimes.length / metrics.spfSum).toFixed(2);\r\n\r\n    const msg = new NotifyMessageDetails(OutputMessagePriority.Info, `FPS ${fps}`);\r\n    IModelApp.notifications.outputMessage(msg);\r\n  }\r\n}\r\n",
      "start": 1693508121200,
      "end": 1693508121255,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport {\n  IModelApp,\n  NotifyMessageDetails,\n  OutputMessagePriority,\n  PerformanceMetrics,\n  Tool\n} from \"@itwin/core-frontend\";\nexport class FpsMonitor {\n  constructor(props) {\n    this._enabled = false;\n    this._prevTime = 0;\n    this._frameCount = 0;\n    this._checkbox = props.checkbox;\n    this._label = props.label;\n    this._output = props.output;\n    IModelApp.viewManager.onViewOpen.addListener((vp) => this.onViewOpen(vp));\n    this._checkbox.addEventListener(\"click\", () => this.enabled = this._checkbox.checked);\n  }\n  onViewOpen(vp) {\n    if (this._enabled)\n      vp.continuousRendering = true;\n  }\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(enabled) {\n    if (enabled === this.enabled)\n      return;\n    this._enabled = enabled;\n    this._frameCount = 0;\n    for (const vp of IModelApp.viewManager)\n      vp.continuousRendering = enabled;\n    this._label.innerText = `FPS${this.enabled ? \":\" : \"\"}`;\n    this._output.innerText = \"\";\n    if (enabled) {\n      this._prevTime = performance.now();\n      requestAnimationFrame(() => this.update());\n    }\n  }\n  update() {\n    if (!this.enabled)\n      return;\n    ++this._frameCount;\n    const curTime = performance.now();\n    if (curTime >= this._prevTime + 1e3) {\n      const fps = this._frameCount * 1e3 / (curTime - this._prevTime);\n      this._output.innerText = fps.toFixed(2);\n      this._prevTime = curTime;\n      this._frameCount = 0;\n    }\n    requestAnimationFrame(() => this.update());\n  }\n}\nexport class RecordFpsTool extends Tool {\n  constructor() {\n    super(...arguments);\n    this._hadContinuousRendering = false;\n    this._numFramesToRecord = 0;\n    this._numFramesRecorded = 0;\n  }\n  static get minArgs() {\n    return 0;\n  }\n  static get maxArgs() {\n    return 1;\n  }\n  async run(numFramesToRecord = 150) {\n    const vp = IModelApp.viewManager.selectedView;\n    if (void 0 === vp || 0 >= numFramesToRecord)\n      return true;\n    this._numFramesToRecord = numFramesToRecord;\n    this._hadContinuousRendering = vp.continuousRendering;\n    vp.continuousRendering = true;\n    this._metrics = new PerformanceMetrics(false, true);\n    vp.target.performanceMetrics = this._metrics;\n    this._dispose = vp.onRender.addListener((viewport) => this.update(viewport));\n    IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Info, \"Recording...\"));\n    return true;\n  }\n  async parseAndRun(...args) {\n    let numFramesToRecord;\n    if (1 === args.length) {\n      numFramesToRecord = parseInt(args[0], 10);\n      if (Number.isNaN(numFramesToRecord))\n        return true;\n    }\n    return this.run(numFramesToRecord);\n  }\n  update(vp) {\n    if (++this._numFramesRecorded < this._numFramesToRecord)\n      return;\n    if (void 0 !== this._dispose)\n      this._dispose();\n    vp.target.performanceMetrics = void 0;\n    vp.continuousRendering = this._hadContinuousRendering;\n    const metrics = this._metrics;\n    const fps = (metrics.spfTimes.length / metrics.spfSum).toFixed(2);\n    const msg = new NotifyMessageDetails(OutputMessagePriority.Info, `FPS ${fps}`);\n    IModelApp.notifications.outputMessage(msg);\n  }\n}\nRecordFpsTool.toolId = \"RecordFps\";\n",
      "start": 1693508121255,
      "end": 1693508121398,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/FpsMonitor.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport {\r\n  IModelApp, NotifyMessageDetails, OutputMessagePriority, PerformanceMetrics, ScreenViewport, Target, Tool, Viewport,\r\n} from \"@itwin/core-frontend\";\r\n\r\nexport interface FpsMonitorProps {\r\n  checkbox: HTMLInputElement;\r\n  label: HTMLLabelElement;\r\n  output: HTMLSpanElement;\r\n}\r\n\r\nexport class FpsMonitor {\r\n  private readonly _checkbox: HTMLInputElement;\r\n  private readonly _label: HTMLLabelElement;\r\n  private readonly _output: HTMLSpanElement;\r\n  private _enabled = false;\r\n  private _prevTime = 0;\r\n  private _frameCount = 0;\r\n\r\n  public constructor(props: FpsMonitorProps) {\r\n    this._checkbox = props.checkbox;\r\n    this._label = props.label;\r\n    this._output = props.output;\r\n\r\n    IModelApp.viewManager.onViewOpen.addListener((vp: ScreenViewport) => this.onViewOpen(vp));\r\n    this._checkbox.addEventListener(\"click\", () => this.enabled = this._checkbox.checked);\r\n  }\r\n\r\n  private onViewOpen(vp: ScreenViewport): void {\r\n    if (this._enabled)\r\n      vp.continuousRendering = true;\r\n  }\r\n\r\n  public get enabled() { return this._enabled; }\r\n  public set enabled(enabled: boolean) {\r\n    if (enabled === this.enabled)\r\n      return;\r\n\r\n    this._enabled = enabled;\r\n    this._frameCount = 0;\r\n    for (const vp of IModelApp.viewManager)\r\n      vp.continuousRendering = enabled;\r\n\r\n    this._label.innerText = `FPS${this.enabled ? \":\" : \"\"}`;\r\n    this._output.innerText = \"\";\r\n    if (enabled) {\r\n      this._prevTime = performance.now();\r\n      requestAnimationFrame(() => this.update());\r\n    }\r\n  }\r\n\r\n  private update(): void {\r\n    if (!this.enabled)\r\n      return;\r\n\r\n    ++this._frameCount;\r\n    const curTime = performance.now();\r\n    if (curTime >= this._prevTime + 1000) {\r\n      const fps = (this._frameCount * 1000) / (curTime - this._prevTime);\r\n      this._output.innerText = fps.toFixed(2);\r\n\r\n      this._prevTime = curTime;\r\n      this._frameCount = 0;\r\n    }\r\n\r\n    requestAnimationFrame(() => this.update());\r\n  }\r\n}\r\n\r\nexport class RecordFpsTool extends Tool {\r\n  public static override toolId = \"RecordFps\";\r\n  public static override get minArgs() { return 0; }\r\n  public static override get maxArgs() { return 1; }\r\n\r\n  private _hadContinuousRendering = false;\r\n  private _numFramesToRecord = 0;\r\n  private _numFramesRecorded = 0;\r\n  private _metrics?: PerformanceMetrics;\r\n  private _dispose?: () => void;\r\n\r\n  public override async run(numFramesToRecord = 150): Promise<boolean> {\r\n    const vp = IModelApp.viewManager.selectedView;\r\n    if (undefined === vp || 0 >= numFramesToRecord)\r\n      return true;\r\n\r\n    this._numFramesToRecord = numFramesToRecord;\r\n    this._hadContinuousRendering = vp.continuousRendering;\r\n    vp.continuousRendering = true;\r\n\r\n    this._metrics = new PerformanceMetrics(false, true);\r\n    (vp.target as Target).performanceMetrics = this._metrics;\r\n\r\n    this._dispose = vp.onRender.addListener((viewport) => this.update(viewport));\r\n\r\n    IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Info, \"Recording...\"));\r\n    return true;\r\n  }\r\n\r\n  public override async parseAndRun(...args: string[]): Promise<boolean> {\r\n    let numFramesToRecord;\r\n    if (1 === args.length) {\r\n      numFramesToRecord = parseInt(args[0], 10);\r\n      if (Number.isNaN(numFramesToRecord))\r\n        return true;\r\n    }\r\n\r\n    return this.run(numFramesToRecord);\r\n  }\r\n\r\n  private update(vp: Viewport): void {\r\n    if (++this._numFramesRecorded < this._numFramesToRecord)\r\n      return;\r\n\r\n    if (undefined !== this._dispose)\r\n      this._dispose();\r\n\r\n    (vp.target as Target).performanceMetrics = undefined;\r\n    vp.continuousRendering = this._hadContinuousRendering;\r\n\r\n    const metrics = this._metrics!;\r\n    const fps = (metrics.spfTimes.length / metrics.spfSum).toFixed(2);\r\n\r\n    const msg = new NotifyMessageDetails(OutputMessagePriority.Info, `FPS ${fps}`);\r\n    IModelApp.notifications.outputMessage(msg);\r\n  }\r\n}\r\n"
        ],
        "mappings": "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",
        "names": []
      }
    }
  ]
}
