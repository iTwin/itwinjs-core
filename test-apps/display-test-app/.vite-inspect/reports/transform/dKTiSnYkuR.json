{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend-devtools/lib/esm/tools/ModelAppearanceTools.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tools\n */\nimport { FeatureAppearance, LinePixels } from \"@itwin/core-common\";\nimport { IModelApp, NotifyMessageDetails, OutputMessagePriority, SpatialViewState, Tool } from \"@itwin/core-frontend\";\nimport { parseBoolean } from \"./parseBoolean\";\nfunction changeModelAppearanceOverrides(vp, overrides, name) {\n    let changed = false;\n    if (vp !== undefined && vp.view instanceof SpatialViewState)\n        vp.view.forEachModel((model) => {\n            if (name === undefined || model.name === name) {\n                changed = true;\n                const existingOverrides = vp.displayStyle.settings.getModelAppearanceOverride(model.id);\n                vp.overrideModelAppearance(model.id, existingOverrides ? existingOverrides.clone(overrides) : FeatureAppearance.fromJSON(overrides));\n            }\n        });\n    return changed;\n}\nfunction modelChangedString(name) {\n    return name === undefined ? `All Models` : `Model: ${name}`;\n}\n/** Set model appearance override for transparency in display style.\n * @beta\n */\nclass SetModelTransparencyTool extends Tool {\n    static get minArgs() { return 1; }\n    static get maxArgs() { return 2; }\n    async run(transparency, name) {\n        const changed = changeModelAppearanceOverrides(IModelApp.viewManager.selectedView, { transparency }, name);\n        if (changed)\n            IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Info, `${modelChangedString(name)} set to transparency: ${transparency}`));\n        return changed;\n    }\n    async parseAndRun(...args) {\n        return this.run(parseFloat(args[0]), args[1]);\n    }\n}\nSetModelTransparencyTool.toolId = \"SetModelTransparencyTool\";\nexport { SetModelTransparencyTool };\n/** Set model appearance override for line weight in display style.\n * @beta\n */\nclass SetModelLineWeightTool extends Tool {\n    static get minArgs() { return 1; }\n    static get maxArgs() { return 2; }\n    async run(weight, name) {\n        const changed = changeModelAppearanceOverrides(IModelApp.viewManager.selectedView, { weight }, name);\n        if (changed)\n            IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Info, `${modelChangedString(name)} set to line weight: ${weight}`));\n        return changed;\n    }\n    async parseAndRun(...args) {\n        return this.run(parseFloat(args[0]), args[1]);\n    }\n}\nSetModelLineWeightTool.toolId = \"SetModelLineWeightTool\";\nexport { SetModelLineWeightTool };\n/** Set model appearance override for line code in display style.\n * @beta\n */\nclass SetModelLineCodeTool extends Tool {\n    static get minArgs() { return 1; }\n    static get maxArgs() { return 2; }\n    async run(lineCode, name) {\n        if (lineCode < 0 || lineCode >= SetModelLineCodeTool.linePixels.length)\n            return false;\n        const changed = changeModelAppearanceOverrides(IModelApp.viewManager.selectedView, { linePixels: SetModelLineCodeTool.linePixels[lineCode] }, name);\n        if (changed)\n            IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Info, `${modelChangedString(name)} set to line code: ${lineCode}`));\n        return changed;\n    }\n    async parseAndRun(...args) {\n        return this.run(parseFloat(args[0]), args[1]);\n    }\n}\nSetModelLineCodeTool.toolId = \"SetModelLineCodeTool\";\nSetModelLineCodeTool.linePixels = [LinePixels.Code0, LinePixels.Code1, LinePixels.Code2, LinePixels.Code3, LinePixels.Code4, LinePixels.Code5, LinePixels.Code6, LinePixels.Code7];\nexport { SetModelLineCodeTool };\n/** Set model appearance override for nonLocatable in display style.\n * @beta\n */\nclass SetModelLocateTool extends Tool {\n    static get minArgs() { return 1; }\n    static get maxArgs() { return 2; }\n    async run(locate, name) {\n        const nonLocatable = locate ? undefined : true;\n        const changed = changeModelAppearanceOverrides(IModelApp.viewManager.selectedView, { nonLocatable }, name);\n        if (changed)\n            IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Info, `${modelChangedString(name)} set to locate: ${locate}`));\n        return changed;\n    }\n    async parseAndRun(...args) {\n        const locate = parseBoolean(args[0]);\n        return locate === undefined ? false : this.run(locate, args[1]);\n    }\n}\nSetModelLocateTool.toolId = \"SetModelLocateTool\";\nexport { SetModelLocateTool };\n/** Set model appearance override for emphasized in display style.\n * @beta\n */\nclass SetModelEmphasizedTool extends Tool {\n    static get minArgs() { return 1; }\n    static get maxArgs() { return 2; }\n    async run(emphasized, name) {\n        const changed = changeModelAppearanceOverrides(IModelApp.viewManager.selectedView, { emphasized }, name);\n        if (changed)\n            IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Info, `Mode: ${name} set to emphasized: ${emphasized}`));\n        return changed;\n    }\n    async parseAndRun(...args) {\n        const emphasized = parseBoolean(args[0]);\n        return emphasized === undefined ? false : this.run(emphasized ? true : undefined, args[1]);\n    }\n}\nSetModelEmphasizedTool.toolId = \"SetModelEmphasizedTool\";\nexport { SetModelEmphasizedTool };\n/** Set model appearance override for ignoreMaterials in display style.\n * @beta\n */\nclass SetModelIgnoresMaterialsTool extends Tool {\n    static get minArgs() { return 1; }\n    static get maxArgs() { return 2; }\n    async run(ignoresMaterial, name) {\n        const changed = changeModelAppearanceOverrides(IModelApp.viewManager.selectedView, { ignoresMaterial }, name);\n        if (changed)\n            IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Info, `Mode: ${name} set to ignore Materials: ${ignoresMaterial}`));\n        return changed;\n    }\n    async parseAndRun(...args) {\n        const ignoresMaterial = parseBoolean(args[0]);\n        return ignoresMaterial === undefined ? false : this.run(ignoresMaterial ? true : undefined, args[1]);\n    }\n}\nSetModelIgnoresMaterialsTool.toolId = \"SetModelIgnoresMaterialsTool\";\nexport { SetModelIgnoresMaterialsTool };\n/** Set model appearance override for color in display style.\n * @beta\n */\nclass SetModelColorTool extends Tool {\n    static get minArgs() { return 3; }\n    static get maxArgs() { return 4; }\n    async run(rgb, name) {\n        const changed = changeModelAppearanceOverrides(IModelApp.viewManager.selectedView, { rgb }, name);\n        if (changed)\n            IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Info, `${modelChangedString(name)} set to RGB color: (${rgb.r}, ${rgb.g}, ${rgb.b})`));\n        return true;\n    }\n    async parseAndRun(...args) {\n        return this.run({ r: parseFloat(args[0]), g: parseFloat(args[1]), b: parseFloat(args[2]) }, args[3]);\n    }\n}\nSetModelColorTool.toolId = \"SetModelColorTool\";\nexport { SetModelColorTool };\n/** clear model appearance overrides in display style.\n * @beta\n */\nclass ClearModelAppearanceOverrides extends Tool {\n    static get minArgs() { return 0; }\n    static get maxArgs() { return 1; }\n    async run(name) {\n        const vp = IModelApp.viewManager.selectedView;\n        if (vp !== undefined && vp.view instanceof SpatialViewState) {\n            vp.view.forEachModel((model) => {\n                if (name === undefined || model.name === name)\n                    vp.dropModelAppearanceOverride(model.id);\n            });\n        }\n        return true;\n    }\n    async parseAndRun(...args) {\n        return this.run(args[0]);\n    }\n}\nClearModelAppearanceOverrides.toolId = \"ClearModelAppearanceOverrides\";\nexport { ClearModelAppearanceOverrides };\n//# sourceMappingURL=ModelAppearanceTools.js.map",
      "start": 1693508122663,
      "end": 1693508122763,
      "sourcemaps": null
    }
  ]
}
