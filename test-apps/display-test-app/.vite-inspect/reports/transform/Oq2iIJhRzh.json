{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/FrameStats.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Rendering\n */\n/** @internal */\nexport class FrameStatsCollector {\n    static _createStats() {\n        return {\n            frameId: 0,\n            totalSceneTime: 0,\n            animationTime: 0,\n            setupViewTime: 0,\n            createChangeSceneTime: 0,\n            validateRenderPlanTime: 0,\n            decorationsTime: 0,\n            onBeforeRenderTime: 0,\n            totalFrameTime: 0,\n            opaqueTime: 0,\n            onRenderOpaqueTime: 0,\n            translucentTime: 0,\n            overlaysTime: 0,\n            shadowsTime: 0,\n            classifiersTime: 0,\n            screenspaceEffectsTime: 0,\n            backgroundTime: 0,\n        };\n    }\n    _clearStats() {\n        this._frameStats.totalSceneTime = 0;\n        this._frameStats.animationTime = 0;\n        this._frameStats.setupViewTime = 0;\n        this._frameStats.createChangeSceneTime = 0;\n        this._frameStats.validateRenderPlanTime = 0;\n        this._frameStats.decorationsTime = 0;\n        this._frameStats.onBeforeRenderTime = 0;\n        this._frameStats.totalFrameTime = 0;\n        this._frameStats.opaqueTime = 0;\n        this._frameStats.onRenderOpaqueTime = 0;\n        this._frameStats.translucentTime = 0;\n        this._frameStats.overlaysTime = 0;\n        this._frameStats.shadowsTime = 0;\n        this._frameStats.classifiersTime = 0;\n        this._frameStats.screenspaceEffectsTime = 0;\n        this._frameStats.backgroundTime = 0;\n    }\n    constructor(onFrameStatsReady) {\n        this._frameStats = FrameStatsCollector._createStats();\n        this._shouldRecordFrame = false;\n        this._onFrameStatsReady = onFrameStatsReady;\n    }\n    _begin(entry) {\n        const prevSpan = this._frameStats[entry];\n        this._frameStats[entry] = Date.now() - prevSpan;\n    }\n    _end(entry) {\n        const beginTime = this._frameStats[entry];\n        this._frameStats[entry] = Date.now() - beginTime;\n    }\n    beginFrame() {\n        this._shouldRecordFrame = undefined !== this._onFrameStatsReady && this._onFrameStatsReady.numberOfListeners > 0;\n    }\n    endFrame(wasFrameDrawn = false) {\n        if (this._shouldRecordFrame) {\n            if (wasFrameDrawn) {\n                if (undefined !== this._onFrameStatsReady)\n                    this._onFrameStatsReady.raiseEvent(this._frameStats); // transmit this frame's statistics to any listeners\n                this._frameStats.frameId++; // increment frame counter for next pending frame\n            }\n            this._clearStats();\n            this._shouldRecordFrame = false;\n        }\n    }\n    beginTime(entry) {\n        if (this._shouldRecordFrame)\n            this._begin(entry);\n    }\n    endTime(entry) {\n        if (this._shouldRecordFrame)\n            this._end(entry);\n    }\n}\n//# sourceMappingURL=FrameStats.js.map",
      "start": 1693508119738,
      "end": 1693508119907,
      "sourcemaps": null
    }
  ]
}
