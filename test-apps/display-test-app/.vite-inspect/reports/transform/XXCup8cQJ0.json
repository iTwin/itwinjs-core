{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend-devtools/lib/esm/effects/EffectTools.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Effects\n */\nimport { assert } from \"@itwin/core-bentley\";\nimport { IModelApp, Tool, } from \"@itwin/core-frontend\";\n/** Adds a screen-space effect to the selected viewport.\n * @beta\n */\nclass AddEffectTool extends Tool {\n    async run() {\n        // Avoid conflicts with the names of other registered screen-space effects.\n        const name = `fdt ${this.effectName}`;\n        if (!AddEffectTool._registeredEffects.has(name)) {\n            // Register the effect.\n            const builder = IModelApp.renderSystem.createScreenSpaceEffectBuilder({\n                name,\n                textureCoordFromPosition: this.textureCoordFromPosition,\n                source: this.source,\n            });\n            assert(undefined !== builder);\n            this.defineEffect(builder);\n            builder.finish();\n            AddEffectTool._registeredEffects.add(name);\n        }\n        const vp = IModelApp.viewManager.selectedView;\n        if (vp)\n            vp.addScreenSpaceEffect(name);\n        return true;\n    }\n}\nAddEffectTool._registeredEffects = new Set();\nexport { AddEffectTool };\n/** Removes all screen-space effects from the selected viewport.\n * @beta\n */\nclass ClearEffectsTool extends Tool {\n    static get minArgs() { return 0; }\n    static get maxArgs() { return 0; }\n    async run() {\n        IModelApp.viewManager.selectedView?.removeScreenSpaceEffects();\n        return true;\n    }\n}\nClearEffectsTool.toolId = \"ClearEffects\";\nexport { ClearEffectsTool };\n/** Requests that any viewport to which the specified effect has been applied redraw its contents.\n * Used by tools like [[VignetteConfig]] to update the view after the effect parameters are modified.\n * @beta\n */\nexport function refreshViewportsForEffect(effectName) {\n    for (const vp of IModelApp.viewManager) {\n        for (const vpEffectName of vp.screenSpaceEffects) {\n            if (vpEffectName === effectName) {\n                vp.requestRedraw();\n                break;\n            }\n        }\n    }\n}\n//# sourceMappingURL=EffectTools.js.map",
      "start": 1693508122582,
      "end": 1693508122691,
      "sourcemaps": null
    }
  ]
}
