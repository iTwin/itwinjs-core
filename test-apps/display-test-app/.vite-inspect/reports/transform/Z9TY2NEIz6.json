{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/tools/ToolAssistance.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tools\n */\nimport { IModelApp } from \"../IModelApp\";\nimport { CoreTools } from \"./Tool\";\n/** Tool Assistance known images\n * @public\n * @extensions\n */\nexport var ToolAssistanceImage;\n(function (ToolAssistanceImage) {\n    /** When Keyboard is specified, ToolAssistanceInstruction.keyboardInfo should be set. */\n    ToolAssistanceImage[ToolAssistanceImage[\"Keyboard\"] = 0] = \"Keyboard\";\n    /** Plus sign */\n    ToolAssistanceImage[ToolAssistanceImage[\"AcceptPoint\"] = 1] = \"AcceptPoint\";\n    /** Cursor image with click symbol */\n    ToolAssistanceImage[ToolAssistanceImage[\"CursorClick\"] = 2] = \"CursorClick\";\n    /** Mouse image with darkened left button */\n    ToolAssistanceImage[ToolAssistanceImage[\"LeftClick\"] = 3] = \"LeftClick\";\n    /** Mouse image with darkened right button */\n    ToolAssistanceImage[ToolAssistanceImage[\"RightClick\"] = 4] = \"RightClick\";\n    /** Mouse image with darkened scroll wheel */\n    ToolAssistanceImage[ToolAssistanceImage[\"MouseWheel\"] = 5] = \"MouseWheel\";\n    /** Mouse image with darkened left button and left/right arrows */\n    ToolAssistanceImage[ToolAssistanceImage[\"LeftClickDrag\"] = 6] = \"LeftClickDrag\";\n    /** Mouse image with darkened right button and left/right arrows */\n    ToolAssistanceImage[ToolAssistanceImage[\"RightClickDrag\"] = 7] = \"RightClickDrag\";\n    /** Mouse image with darkened scroll wheel and left/right arrows */\n    ToolAssistanceImage[ToolAssistanceImage[\"MouseWheelClickDrag\"] = 8] = \"MouseWheelClickDrag\";\n    /** Touch image with single finger tapping once */\n    ToolAssistanceImage[ToolAssistanceImage[\"OneTouchTap\"] = 9] = \"OneTouchTap\";\n    /** Touch image with single finger tapping twice */\n    ToolAssistanceImage[ToolAssistanceImage[\"OneTouchDoubleTap\"] = 10] = \"OneTouchDoubleTap\";\n    /** Touch image with single finger dragging */\n    ToolAssistanceImage[ToolAssistanceImage[\"OneTouchDrag\"] = 11] = \"OneTouchDrag\";\n    /** Touch image with two fingers tapping once */\n    ToolAssistanceImage[ToolAssistanceImage[\"TwoTouchTap\"] = 12] = \"TwoTouchTap\";\n    /** Touch image with two fingers dragging */\n    ToolAssistanceImage[ToolAssistanceImage[\"TwoTouchDrag\"] = 13] = \"TwoTouchDrag\";\n    /** Touch image with two fingers pinching */\n    ToolAssistanceImage[ToolAssistanceImage[\"TwoTouchPinch\"] = 14] = \"TwoTouchPinch\";\n    /** Touch cursor image with single finger tapping once */\n    ToolAssistanceImage[ToolAssistanceImage[\"TouchCursorTap\"] = 15] = \"TouchCursorTap\";\n    /** Touch cursor image with single finger dragging */\n    ToolAssistanceImage[ToolAssistanceImage[\"TouchCursorDrag\"] = 16] = \"TouchCursorDrag\";\n})(ToolAssistanceImage || (ToolAssistanceImage = {}));\n/** Input Method for Tool Assistance instruction\n * @public\n * @extensions\n */\nexport var ToolAssistanceInputMethod;\n(function (ToolAssistanceInputMethod) {\n    /** Instruction applies to both touch & mouse input methods */\n    ToolAssistanceInputMethod[ToolAssistanceInputMethod[\"Both\"] = 0] = \"Both\";\n    /** Instruction applies to only mouse input method */\n    ToolAssistanceInputMethod[ToolAssistanceInputMethod[\"Mouse\"] = 1] = \"Mouse\";\n    /** Instruction applies to only touch input method */\n    ToolAssistanceInputMethod[ToolAssistanceInputMethod[\"Touch\"] = 2] = \"Touch\";\n})(ToolAssistanceInputMethod || (ToolAssistanceInputMethod = {}));\n/** Tool Assistance helper methods.\n * @public\n * @extensions\n */\nclass ToolAssistance {\n    static translateKey(key) { return IModelApp.localization.getLocalizedString(`${CoreTools.namespace}:toolAssistance.${key}`); }\n    static translateTouch(cursor) { return IModelApp.localization.getLocalizedString(`${CoreTools.namespace}:touchCursor.${cursor}`); }\n    /** Return the translated string for the specified main instruction key */\n    static translatePrompt(key) {\n        return IModelApp.localization.getLocalizedString(`${CoreTools.tools}ElementSet.Prompts.${key}`);\n    }\n    /** Return the translated string for the specified input instruction key */\n    static translateInput(key) {\n        return IModelApp.localization.getLocalizedString(`${CoreTools.tools}ElementSet.Inputs.${key}`);\n    }\n    /** Alt key text. */\n    static get altKey() {\n        return this.translateKey(\"altKey\");\n    }\n    /** Ctrl key text. */\n    static get ctrlKey() {\n        return this.translateKey(\"ctrlKey\");\n    }\n    /** Shift key text. */\n    static get shiftKey() {\n        return this.translateKey(\"shiftKey\");\n    }\n    /** Inputs text. */\n    static get inputsLabel() {\n        return this.translateKey(\"inputs\");\n    }\n    /** Keyboard info for Alt key. */\n    static get altKeyboardInfo() {\n        return { keys: [ToolAssistance.altKey] };\n    }\n    /** Keyboard info for Ctrl key. */\n    static get ctrlKeyboardInfo() {\n        return { keys: [ToolAssistance.ctrlKey] };\n    }\n    /** Keyboard info for Shift key with symbol. */\n    static get shiftKeyboardInfo() {\n        return { keys: [`${ToolAssistance.shiftSymbol} ${ToolAssistance.shiftKey}`] };\n    }\n    /** Keyboard info for Shift key without symbol. */\n    static get shiftKeyboardInfoNoSymbol() {\n        return { keys: [ToolAssistance.shiftKey] };\n    }\n    /** Keyboard info for Shift key symbol. */\n    static get shiftSymbolKeyboardInfo() {\n        return { keys: [` ${ToolAssistance.shiftKey} `] };\n    }\n    /** Keyboard info for Ctrl key symbol. */\n    static get ctrlSymbolKeyboardInfo() {\n        return { keys: [ToolAssistance.ctrlSymbol] };\n    }\n    /** Keyboard info for Alt key symbol. */\n    static get altSymbolKeyboardInfo() {\n        return { keys: [ToolAssistance.altSymbol] };\n    }\n    /** Creates a [[ToolAssistanceInstruction]].\n     */\n    static createInstruction(image, text, isNew, inputMethod, keyboardInfo) {\n        if (inputMethod === undefined)\n            inputMethod = ToolAssistanceInputMethod.Both;\n        const instruction = {\n            image,\n            text,\n            keyboardInfo,\n            isNew,\n            inputMethod,\n        };\n        return instruction;\n    }\n    /** Creates a [[ToolAssistanceInstruction]] with a [[ToolAssistanceKeyboardInfo]].\n     */\n    static createKeyboardInstruction(keyboardInfo, text, isNew, inputMethod) {\n        if (inputMethod === undefined)\n            inputMethod = ToolAssistanceInputMethod.Mouse;\n        const instruction = {\n            image: ToolAssistanceImage.Keyboard,\n            text,\n            keyboardInfo,\n            isNew,\n            inputMethod,\n        };\n        return instruction;\n    }\n    /** Creates a [[ToolAssistanceInstruction]] with a modifier key and an image.\n     */\n    static createModifierKeyInstruction(modifierKey, image, text, isNew, inputMethod) {\n        if (inputMethod === undefined)\n            inputMethod = ToolAssistanceInputMethod.Both;\n        const keyboardInfo = { keys: [modifierKey] };\n        const instruction = {\n            image,\n            text,\n            keyboardInfo,\n            isNew,\n            inputMethod,\n        };\n        return instruction;\n    }\n    /** Creates a [[ToolAssistanceKeyboardInfo]].\n     */\n    static createKeyboardInfo(keys, bottomKeys) {\n        const keyboardInfo = {\n            keys,\n            bottomKeys,\n        };\n        return keyboardInfo;\n    }\n    /** Creates instructions for interaction with the touch cursor that are appended to the supplied [[ToolAssistanceInstruction]] array.\n     */\n    static createTouchCursorInstructions(instructions) {\n        const accuSnap = IModelApp.accuSnap;\n        if (undefined === accuSnap.touchCursor && accuSnap.wantVirtualCursor) {\n            instructions.push(ToolAssistance.createInstruction(ToolAssistanceImage.OneTouchTap, this.translateTouch(\"Activate\"), false, ToolAssistanceInputMethod.Touch));\n            return true;\n        }\n        else if (undefined !== accuSnap.touchCursor) {\n            instructions.push(ToolAssistance.createInstruction(ToolAssistanceImage.TouchCursorDrag, this.translateTouch(\"IdentifyPoint\"), false, ToolAssistanceInputMethod.Touch));\n            instructions.push(ToolAssistance.createInstruction(ToolAssistanceImage.TouchCursorTap, this.translateTouch(\"AcceptPoint\"), false, ToolAssistanceInputMethod.Touch));\n            return true;\n        }\n        return false;\n    }\n    /** Creates a [[ToolAssistanceSection]].\n     */\n    static createSection(instructions, label) {\n        const section = {\n            instructions,\n            label,\n        };\n        return section;\n    }\n    /** Creates a [[ToolAssistanceInstructions]].\n     */\n    static createInstructions(mainInstruction, sections) {\n        const instructions = {\n            mainInstruction,\n            sections,\n        };\n        return instructions;\n    }\n}\n/** Up key symbol. */\nToolAssistance.upSymbol = \"\\u2bc5\";\n/** Down key symbol. */\nToolAssistance.downSymbol = \"\\u2bc6\";\n/** Left key symbol. */\nToolAssistance.leftSymbol = \"\\u2bc7\";\n/** Right key symbol. */\nToolAssistance.rightSymbol = \"\\u2bc8\";\n/** Keyboard info for Arrow keys. */\nToolAssistance.arrowKeyboardInfo = {\n    keys: [ToolAssistance.upSymbol],\n    bottomKeys: [ToolAssistance.leftSymbol, ToolAssistance.downSymbol, ToolAssistance.rightSymbol],\n};\n/** Shift key symbol. */\nToolAssistance.shiftSymbol = \"\\u21e7\";\n/** Ctrl key symbol. */\nToolAssistance.ctrlSymbol = \"\\u2038\";\n/** Alt key symbol. */\nToolAssistance.altSymbol = \"\\u2387\";\nexport { ToolAssistance };\n//# sourceMappingURL=ToolAssistance.js.map",
      "start": 1693508120052,
      "end": 1693508120443,
      "sourcemaps": null
    }
  ]
}
