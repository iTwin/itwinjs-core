{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/Notifications.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { XAndY } from \"@itwin/core-geometry\";\r\nimport {\r\n  IModelApp, MessageBoxIconType, MessageBoxType, MessageBoxValue, NotificationManager, NotifyMessageDetails, ToolTipOptions,\r\n} from \"@itwin/core-frontend\";\r\nimport { Surface } from \"./Surface\";\r\nimport { showError, showStatus } from \"./Utils\";\r\nimport { Window, WindowProps } from \"./Window\";\r\n\r\n// cspell:ignore messagebox messageboxtext messageboxbutton\r\n\r\nexport interface NotificationsWindowProps extends WindowProps {\r\n  maxStoredMessages: number;\r\n}\r\n\r\nexport class NotificationsWindow extends Window {\r\n  private readonly _maxMessages: number;\r\n\r\n  public override get isCloseable() { return false; }\r\n  public get windowId() { return \"notifications\"; }\r\n\r\n  public constructor(surface: Surface, props: NotificationsWindowProps) {\r\n    super(surface, props);\r\n    this._maxMessages = props.maxStoredMessages;\r\n    this.contentDiv.id = \"notifications-window\";\r\n    surface.element.appendChild(this.container);\r\n  }\r\n\r\n  public addMessage(message: NotifyMessageDetails): void {\r\n    const toHtml = (msg: HTMLElement | string) => {\r\n      return (\"string\" !== typeof msg) ? msg : IModelApp.makeHTMLElement(\"div\", { innerText: msg });\r\n    };\r\n\r\n    const msgDiv = IModelApp.makeHTMLElement(\"div\", { parent: this.contentDiv });\r\n    msgDiv.appendChild(toHtml(message.briefMessage));\r\n    if (undefined !== message.detailedMessage)\r\n      msgDiv.appendChild(toHtml(message.detailedMessage));\r\n\r\n    IModelApp.makeHTMLElement(\"hr\", { parent: msgDiv });\r\n\r\n    while (this.contentDiv.childElementCount > this._maxMessages)\r\n      this.contentDiv.removeChild(this.contentDiv.firstChild!);\r\n\r\n    this.contentDiv.scrollTop = this.contentDiv.scrollHeight;\r\n  }\r\n}\r\n\r\nexport class Notifications extends NotificationManager {\r\n  private _tooltipDiv?: HTMLDivElement;\r\n\r\n  public override outputPrompt(prompt: string) { showStatus(prompt); }\r\n\r\n  /** Output a message and/or alert to the user. */\r\n  public override outputMessage(message: NotifyMessageDetails) {\r\n    showError(message.briefMessage);\r\n    Surface.instance.notifications.addMessage(message);\r\n  }\r\n\r\n  public override async openMessageBox(_mbType: MessageBoxType, message: HTMLElement | string, _icon: MessageBoxIconType): Promise<MessageBoxValue> {\r\n    const rootDiv = document.getElementById(\"root\") as HTMLDivElement;\r\n    if (!rootDiv)\r\n      return MessageBoxValue.Cancel;\r\n\r\n    // create a dialog element.\r\n    const dialog = IModelApp.makeHTMLElement(\"dialog\", { parent: rootDiv, className: \"notification-messagebox\" });\r\n\r\n    // set up the message\r\n    const span = IModelApp.makeHTMLElement(\"span\", { parent: dialog, className: \"notification-messageboxtext\" });\r\n    if (typeof message === \"string\")\r\n      span.innerHTML = message;\r\n    else\r\n      span.appendChild(message);\r\n\r\n    // make the ok button\r\n    const button = IModelApp.makeHTMLElement(\"button\", { parent: dialog, className: \"notification-messageboxbutton\" });\r\n    button.innerHTML = \"Ok\";\r\n\r\n    const promise = new Promise<MessageBoxValue>((resolve, _rej) => {\r\n      button.addEventListener(\"click\", () => {\r\n        (dialog as any).close();\r\n        rootDiv.removeChild(dialog);\r\n        resolve(MessageBoxValue.Ok);\r\n      });\r\n    });\r\n\r\n    // add the dialog to the root div element and show it.\r\n    (dialog as any).showModal();\r\n    return promise;\r\n  }\r\n\r\n  public override get isToolTipSupported() { return true; }\r\n  public override get isToolTipOpen() {\r\n    return undefined !== this._tooltipDiv;\r\n  }\r\n\r\n  public override clearToolTip(): void {\r\n    if (undefined !== this._tooltipDiv) {\r\n      this._tooltipDiv.remove();\r\n      this._tooltipDiv = undefined;\r\n    }\r\n  }\r\n\r\n  protected override _showToolTip(parent: HTMLElement, message: HTMLElement | string, pt?: XAndY, _options?: ToolTipOptions): void {\r\n    this.clearToolTip();\r\n\r\n    if (undefined === pt) {\r\n      const rect = parent.getBoundingClientRect();\r\n      pt = { x: rect.width / 2, y: rect.height / 2 };\r\n    }\r\n\r\n    const div = IModelApp.makeHTMLElement(\"div\", { parent, className: \"tooltip\" });\r\n    div.style.position = \"absolute\";\r\n    div.style.top = `${pt.y - 20}px`;\r\n    div.style.left = `${pt.x + 15}px`;\r\n\r\n    if (message instanceof HTMLElement)\r\n      div.appendChild(message);\r\n    else\r\n      div.innerText = message;\r\n\r\n    this._tooltipDiv = div;\r\n  }\r\n}\r\n",
      "start": 1693508121210,
      "end": 1693508121256,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport {\n  IModelApp,\n  MessageBoxValue,\n  NotificationManager\n} from \"@itwin/core-frontend\";\nimport { Surface } from \"./Surface\";\nimport { showError, showStatus } from \"./Utils\";\nimport { Window } from \"./Window\";\nexport class NotificationsWindow extends Window {\n  constructor(surface, props) {\n    super(surface, props);\n    this._maxMessages = props.maxStoredMessages;\n    this.contentDiv.id = \"notifications-window\";\n    surface.element.appendChild(this.container);\n  }\n  get isCloseable() {\n    return false;\n  }\n  get windowId() {\n    return \"notifications\";\n  }\n  addMessage(message) {\n    const toHtml = (msg) => {\n      return \"string\" !== typeof msg ? msg : IModelApp.makeHTMLElement(\"div\", { innerText: msg });\n    };\n    const msgDiv = IModelApp.makeHTMLElement(\"div\", { parent: this.contentDiv });\n    msgDiv.appendChild(toHtml(message.briefMessage));\n    if (void 0 !== message.detailedMessage)\n      msgDiv.appendChild(toHtml(message.detailedMessage));\n    IModelApp.makeHTMLElement(\"hr\", { parent: msgDiv });\n    while (this.contentDiv.childElementCount > this._maxMessages)\n      this.contentDiv.removeChild(this.contentDiv.firstChild);\n    this.contentDiv.scrollTop = this.contentDiv.scrollHeight;\n  }\n}\nexport class Notifications extends NotificationManager {\n  outputPrompt(prompt) {\n    showStatus(prompt);\n  }\n  /** Output a message and/or alert to the user. */\n  outputMessage(message) {\n    showError(message.briefMessage);\n    Surface.instance.notifications.addMessage(message);\n  }\n  async openMessageBox(_mbType, message, _icon) {\n    const rootDiv = document.getElementById(\"root\");\n    if (!rootDiv)\n      return MessageBoxValue.Cancel;\n    const dialog = IModelApp.makeHTMLElement(\"dialog\", { parent: rootDiv, className: \"notification-messagebox\" });\n    const span = IModelApp.makeHTMLElement(\"span\", { parent: dialog, className: \"notification-messageboxtext\" });\n    if (typeof message === \"string\")\n      span.innerHTML = message;\n    else\n      span.appendChild(message);\n    const button = IModelApp.makeHTMLElement(\"button\", { parent: dialog, className: \"notification-messageboxbutton\" });\n    button.innerHTML = \"Ok\";\n    const promise = new Promise((resolve, _rej) => {\n      button.addEventListener(\"click\", () => {\n        dialog.close();\n        rootDiv.removeChild(dialog);\n        resolve(MessageBoxValue.Ok);\n      });\n    });\n    dialog.showModal();\n    return promise;\n  }\n  get isToolTipSupported() {\n    return true;\n  }\n  get isToolTipOpen() {\n    return void 0 !== this._tooltipDiv;\n  }\n  clearToolTip() {\n    if (void 0 !== this._tooltipDiv) {\n      this._tooltipDiv.remove();\n      this._tooltipDiv = void 0;\n    }\n  }\n  _showToolTip(parent, message, pt, _options) {\n    this.clearToolTip();\n    if (void 0 === pt) {\n      const rect = parent.getBoundingClientRect();\n      pt = { x: rect.width / 2, y: rect.height / 2 };\n    }\n    const div = IModelApp.makeHTMLElement(\"div\", { parent, className: \"tooltip\" });\n    div.style.position = \"absolute\";\n    div.style.top = `${pt.y - 20}px`;\n    div.style.left = `${pt.x + 15}px`;\n    if (message instanceof HTMLElement)\n      div.appendChild(message);\n    else\n      div.innerText = message;\n    this._tooltipDiv = div;\n  }\n}\n",
      "start": 1693508121256,
      "end": 1693508121398,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/Notifications.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport { XAndY } from \"@itwin/core-geometry\";\r\nimport {\r\n  IModelApp, MessageBoxIconType, MessageBoxType, MessageBoxValue, NotificationManager, NotifyMessageDetails, ToolTipOptions,\r\n} from \"@itwin/core-frontend\";\r\nimport { Surface } from \"./Surface\";\r\nimport { showError, showStatus } from \"./Utils\";\r\nimport { Window, WindowProps } from \"./Window\";\r\n\r\n// cspell:ignore messagebox messageboxtext messageboxbutton\r\n\r\nexport interface NotificationsWindowProps extends WindowProps {\r\n  maxStoredMessages: number;\r\n}\r\n\r\nexport class NotificationsWindow extends Window {\r\n  private readonly _maxMessages: number;\r\n\r\n  public override get isCloseable() { return false; }\r\n  public get windowId() { return \"notifications\"; }\r\n\r\n  public constructor(surface: Surface, props: NotificationsWindowProps) {\r\n    super(surface, props);\r\n    this._maxMessages = props.maxStoredMessages;\r\n    this.contentDiv.id = \"notifications-window\";\r\n    surface.element.appendChild(this.container);\r\n  }\r\n\r\n  public addMessage(message: NotifyMessageDetails): void {\r\n    const toHtml = (msg: HTMLElement | string) => {\r\n      return (\"string\" !== typeof msg) ? msg : IModelApp.makeHTMLElement(\"div\", { innerText: msg });\r\n    };\r\n\r\n    const msgDiv = IModelApp.makeHTMLElement(\"div\", { parent: this.contentDiv });\r\n    msgDiv.appendChild(toHtml(message.briefMessage));\r\n    if (undefined !== message.detailedMessage)\r\n      msgDiv.appendChild(toHtml(message.detailedMessage));\r\n\r\n    IModelApp.makeHTMLElement(\"hr\", { parent: msgDiv });\r\n\r\n    while (this.contentDiv.childElementCount > this._maxMessages)\r\n      this.contentDiv.removeChild(this.contentDiv.firstChild!);\r\n\r\n    this.contentDiv.scrollTop = this.contentDiv.scrollHeight;\r\n  }\r\n}\r\n\r\nexport class Notifications extends NotificationManager {\r\n  private _tooltipDiv?: HTMLDivElement;\r\n\r\n  public override outputPrompt(prompt: string) { showStatus(prompt); }\r\n\r\n  /** Output a message and/or alert to the user. */\r\n  public override outputMessage(message: NotifyMessageDetails) {\r\n    showError(message.briefMessage);\r\n    Surface.instance.notifications.addMessage(message);\r\n  }\r\n\r\n  public override async openMessageBox(_mbType: MessageBoxType, message: HTMLElement | string, _icon: MessageBoxIconType): Promise<MessageBoxValue> {\r\n    const rootDiv = document.getElementById(\"root\") as HTMLDivElement;\r\n    if (!rootDiv)\r\n      return MessageBoxValue.Cancel;\r\n\r\n    // create a dialog element.\r\n    const dialog = IModelApp.makeHTMLElement(\"dialog\", { parent: rootDiv, className: \"notification-messagebox\" });\r\n\r\n    // set up the message\r\n    const span = IModelApp.makeHTMLElement(\"span\", { parent: dialog, className: \"notification-messageboxtext\" });\r\n    if (typeof message === \"string\")\r\n      span.innerHTML = message;\r\n    else\r\n      span.appendChild(message);\r\n\r\n    // make the ok button\r\n    const button = IModelApp.makeHTMLElement(\"button\", { parent: dialog, className: \"notification-messageboxbutton\" });\r\n    button.innerHTML = \"Ok\";\r\n\r\n    const promise = new Promise<MessageBoxValue>((resolve, _rej) => {\r\n      button.addEventListener(\"click\", () => {\r\n        (dialog as any).close();\r\n        rootDiv.removeChild(dialog);\r\n        resolve(MessageBoxValue.Ok);\r\n      });\r\n    });\r\n\r\n    // add the dialog to the root div element and show it.\r\n    (dialog as any).showModal();\r\n    return promise;\r\n  }\r\n\r\n  public override get isToolTipSupported() { return true; }\r\n  public override get isToolTipOpen() {\r\n    return undefined !== this._tooltipDiv;\r\n  }\r\n\r\n  public override clearToolTip(): void {\r\n    if (undefined !== this._tooltipDiv) {\r\n      this._tooltipDiv.remove();\r\n      this._tooltipDiv = undefined;\r\n    }\r\n  }\r\n\r\n  protected override _showToolTip(parent: HTMLElement, message: HTMLElement | string, pt?: XAndY, _options?: ToolTipOptions): void {\r\n    this.clearToolTip();\r\n\r\n    if (undefined === pt) {\r\n      const rect = parent.getBoundingClientRect();\r\n      pt = { x: rect.width / 2, y: rect.height / 2 };\r\n    }\r\n\r\n    const div = IModelApp.makeHTMLElement(\"div\", { parent, className: \"tooltip\" });\r\n    div.style.position = \"absolute\";\r\n    div.style.top = `${pt.y - 20}px`;\r\n    div.style.left = `${pt.x + 15}px`;\r\n\r\n    if (message instanceof HTMLElement)\r\n      div.appendChild(message);\r\n    else\r\n      div.innerText = message;\r\n\r\n    this._tooltipDiv = div;\r\n  }\r\n}\r\n"
        ],
        "mappings": "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",
        "names": []
      }
    }
  ]
}
