{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/Timeline.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { Point3d, Range1d } from \"@itwin/core-geometry\";\r\nimport { calculateSunriseOrSunset, Cartographic } from \"@itwin/core-common\";\r\nimport { Viewport } from \"@itwin/core-frontend\";\r\nimport { createToolButton, ToolBarDropDown } from \"./ToolBar\";\r\n\r\ninterface TimelineProvider {\r\n  /** Time range in any units. */\r\n  duration: Range1d;\r\n  /** Supply a description of the current time in same units as `this.duration`. */\r\n  getDescription(time: number): string;\r\n  /** Update state based on current time in same units as `this.duration`. */\r\n  update(time: number, vp: Viewport): void;\r\n  /** Get current time from viewport. */\r\n  getCurrentTime(vp: Viewport): number;\r\n  /** Called when user interacts with the timeline, by pressing Start or adjusting slider. */\r\n  onInteraction?: () => void;\r\n}\r\n\r\nclass AnalysisTimelineProvider {\r\n  public readonly duration = Range1d.createXX(0, 100);\r\n\r\n  public getDescription(time: number): string {\r\n    return `${time.toFixed(0)}%`;\r\n  }\r\n\r\n  public update(time: number, vp: Viewport): void {\r\n    vp.displayStyle.settings.analysisFraction = time / 100;\r\n  }\r\n\r\n  public getCurrentTime(vp: Viewport): number {\r\n    return vp.displayStyle.settings.analysisFraction * 100;\r\n  }\r\n}\r\n\r\nclass SolarTimelineProvider {\r\n  public readonly duration: Range1d;\r\n  private _active = false;\r\n\r\n  public constructor(vp: Viewport) {\r\n    let cartoCenter;\r\n    if (vp.iModel.isGeoLocated) {\r\n      const projectExtents = vp.iModel.projectExtents;\r\n      const projectCenter = Point3d.createAdd2Scaled(projectExtents.low, .5, projectExtents.high, .5);\r\n      cartoCenter = vp.iModel.spatialToCartographicFromEcef(projectCenter);\r\n    } else {\r\n      cartoCenter = Cartographic.fromDegrees({longitude: -75.17035, latitude: 39.954927, height: 0.0});\r\n    }\r\n\r\n    const today = new Date(Date.now());\r\n    const sunrise = calculateSunriseOrSunset(today, cartoCenter, true);\r\n    const sunset = calculateSunriseOrSunset(today, cartoCenter, false);\r\n    this.duration = Range1d.createXX(sunrise.getTime(), sunset.getTime());\r\n  }\r\n\r\n  public getDescription(time: number): string {\r\n    return new Date(time).toTimeString();\r\n  }\r\n\r\n  public update(time: number, vp: Viewport): void {\r\n    if (this._active && vp.displayStyle.is3d()) {\r\n      vp.displayStyle.setSunTime(time);\r\n      vp.invalidateRenderPlan();\r\n    }\r\n  }\r\n\r\n  public getCurrentTime(_vp: Viewport): number {\r\n    // NB: All we have is the solar direction - cannot compute date from that.\r\n    return this.duration.low;\r\n  }\r\n\r\n  public onInteraction(): void {\r\n    this._active = true;\r\n  }\r\n}\r\n\r\nclass ScheduleTimelineProvider {\r\n  public readonly duration: Range1d;\r\n\r\n  public constructor(duration: Range1d) {\r\n    this.duration = duration;\r\n  }\r\n\r\n  public getDescription(time: number): string {\r\n    return new Date(time * 1000).toString();\r\n  }\r\n\r\n  public update(time: number, vp: Viewport): void {\r\n    vp.timePoint = time;\r\n  }\r\n\r\n  public getCurrentTime(vp: Viewport): number {\r\n    return vp.timePoint ?? this.duration.low;\r\n  }\r\n}\r\n\r\nclass NoOpTimelineProvider {\r\n  public readonly duration = Range1d.createXX(0, 100);\r\n\r\n  public getDescription(_time: number): string {\r\n    return \"No animation available for this view.\";\r\n  }\r\n\r\n  public update(_time: number, _vp: Viewport): void { }\r\n\r\n  public getCurrentTime(_vp: Viewport): number {\r\n    return this.duration.low;\r\n  }\r\n}\r\n\r\nfunction createTimelineProvider(vp: Viewport): TimelineProvider {\r\n  if (vp.displayStyle.scheduleScript)\r\n    return new ScheduleTimelineProvider(vp.displayStyle.scheduleScript.duration);\r\n\r\n  if (vp.displayStyle.settings.analysisStyle)\r\n    return new AnalysisTimelineProvider();\r\n\r\n  if (vp.displayStyle.is3d())\r\n    return new SolarTimelineProvider(vp);\r\n\r\n  return new NoOpTimelineProvider();\r\n}\r\n\r\nclass TimelinePanel extends ToolBarDropDown {\r\n  private readonly _vp: Viewport;\r\n  private _provider: TimelineProvider;\r\n  private _totalMillis: number;\r\n  private _elapsedMillis = 0;\r\n  private _lastMillis = Date.now();\r\n  private _isPlaying = false;\r\n\r\n  private readonly _element: HTMLElement;\r\n  private readonly _messageElement: HTMLElement;\r\n  private readonly _durationElement: HTMLInputElement;\r\n  private readonly _slider: HTMLInputElement;\r\n  private readonly _playButton: HTMLElement;\r\n  private readonly _pauseButton: HTMLElement;\r\n\r\n  public constructor(vp: Viewport, parent: HTMLElement, durationInSeconds: number) {\r\n    super();\r\n    this._vp = vp;\r\n    this._totalMillis = 1000 * durationInSeconds;\r\n    this._provider = this.createProvider();\r\n\r\n    this._element = document.createElement(\"div\");\r\n    this._element.className = \"toolMenu\";\r\n    this._element.style.display = \"block\";\r\n    this._element.style.cssFloat = \"left\";\r\n\r\n    const controls = document.createElement(\"div\");\r\n    controls.style.display = \"flex\";\r\n    this._playButton = createToolButton({\r\n      iconUnicode: \"\\uea32\",\r\n      click: () => this.start(),\r\n    });\r\n    this._pauseButton = createToolButton({\r\n      iconUnicode: \"\\uea33\",\r\n      click: () => this.pause(),\r\n    });\r\n\r\n    controls.appendChild(this._playButton);\r\n    controls.appendChild(this._pauseButton);\r\n    this._pauseButton.style.display = \"none\";\r\n\r\n    const durationDiv = document.createElement(\"div\");\r\n    const durationLabel = document.createElement(\"label\");\r\n    durationLabel.innerText = \"Duration: \";\r\n    durationLabel.htmlFor = \"anim_duration\";\r\n    durationDiv.appendChild(durationLabel);\r\n\r\n    this._durationElement = document.createElement(\"input\");\r\n    this._durationElement.id = \"anim_duration\";\r\n    this._durationElement.type = \"number\";\r\n    this._durationElement.min = \"0\";\r\n    this._durationElement.step = \"0.1\";\r\n    this._durationElement.value = durationInSeconds.toString();\r\n    this._durationElement.style.width = \"4em\";\r\n    this._durationElement.innerHTML = \" second(s)\";\r\n    this._durationElement.onchange = () => this.updateDuration();\r\n    durationDiv.appendChild(this._durationElement);\r\n    controls.appendChild(durationDiv);\r\n\r\n    this._element.appendChild(controls);\r\n\r\n    this._slider = document.createElement(\"input\");\r\n    this._slider.type = \"range\";\r\n    this._slider.min = \"0\";\r\n    this._slider.max = \"1000\";\r\n    this._slider.value = \"0\";\r\n    this._slider.className = \"slider\";\r\n    this._slider.addEventListener(\"input\", () => this.processSliderAdjustment());\r\n    this._element.appendChild(this._slider);\r\n\r\n    this._messageElement = document.createElement(\"div\");\r\n    this._element.appendChild(this._messageElement);\r\n\r\n    parent.appendChild(this._element);\r\n\r\n    this.update();\r\n  }\r\n\r\n  public get isOpen() {\r\n    return \"none\" !== this._element.style.display;\r\n  }\r\n\r\n  protected _open(): void {\r\n    this._element.style.display = \"block\";\r\n  }\r\n\r\n  protected _close(): void {\r\n    this._element.style.display = \"none\";\r\n  }\r\n\r\n  public override get onViewChanged(): Promise<void> {\r\n    // Change the provider before invoking update\r\n    this._provider = this.createProvider();\r\n    if (this._isPlaying)\r\n      this.pause();\r\n    else\r\n      this.update();\r\n\r\n    return Promise.resolve();\r\n  }\r\n\r\n  private start(): void {\r\n    if (this._isPlaying)\r\n      return;\r\n\r\n    this.onInteraction();\r\n    this._isPlaying = true;\r\n    this._pauseButton.style.display = \"block\";\r\n    this._playButton.style.display = \"none\";\r\n\r\n    this.update();\r\n    this._lastMillis = Date.now();\r\n    this.queueAnimationFrame();\r\n  }\r\n\r\n  private pause(): void {\r\n    if (!this._isPlaying)\r\n      return;\r\n\r\n    this._isPlaying = false;\r\n    this._pauseButton.style.display = \"none\";\r\n    this._playButton.style.display = \"block\";\r\n\r\n    this._lastMillis = Date.now();\r\n    this.update();\r\n    this.queueAnimationFrame();\r\n  }\r\n\r\n  private onAnimationFrame(): void {\r\n    if (!this._isPlaying)\r\n      return;\r\n\r\n    const now = Date.now();\r\n    const elapsed = now - this._lastMillis;\r\n    this._lastMillis = now;\r\n    this._elapsedMillis += elapsed;\r\n\r\n    this.update();\r\n\r\n    if (this._elapsedMillis >= this._totalMillis)\r\n      this._elapsedMillis = 0;\r\n\r\n    this.queueAnimationFrame();\r\n  }\r\n\r\n  private queueAnimationFrame(): void {\r\n    requestAnimationFrame(() => this.onAnimationFrame());\r\n  }\r\n\r\n  private update(): void {\r\n    const fraction = Math.min(1, this._elapsedMillis / this._totalMillis);\r\n    this._slider.value = (fraction * 1000).toString();\r\n\r\n    const point = this._provider.duration.fractionToPoint(fraction);\r\n    this._provider.update(point, this._vp);\r\n\r\n    this._messageElement.innerText = this._provider.getDescription(point);\r\n  }\r\n\r\n  private processSliderAdjustment(): void {\r\n    this.onInteraction();\r\n    const sliderValue = parseInt(this._slider.value, 10);\r\n    const fraction = sliderValue / 1000;\r\n    this._elapsedMillis = fraction * this._totalMillis;\r\n    this._lastMillis = Date.now();\r\n    this.update();\r\n  }\r\n\r\n  private updateDuration(): void {\r\n    const seconds = parseInt(this._durationElement.value, 10);\r\n    if (Number.isNaN(seconds) || seconds <= 0)\r\n      return;\r\n\r\n    const fraction = Math.min(1, this._elapsedMillis / this._totalMillis);\r\n    this._totalMillis = seconds * 1000;\r\n    this._elapsedMillis = fraction * this._totalMillis;\r\n    this._lastMillis = Date.now();\r\n\r\n    this.update();\r\n  }\r\n\r\n  private onInteraction(): void {\r\n    if (this._provider.onInteraction)\r\n      this._provider.onInteraction();\r\n  }\r\n\r\n  private createProvider(): TimelineProvider {\r\n    const provider = createTimelineProvider(this._vp);\r\n\r\n    const time = provider.getCurrentTime(this._vp);\r\n    const timeFraction = (time - provider.duration.low) / provider.duration.length();\r\n    this._elapsedMillis = timeFraction * this._totalMillis;\r\n\r\n    return provider;\r\n  }\r\n}\r\n\r\nexport function createTimeline(vp: Viewport, parent: HTMLElement, durationInSeconds: number): ToolBarDropDown {\r\n  return new TimelinePanel(vp, parent, durationInSeconds);\r\n}\r\n",
      "start": 1693508124586,
      "end": 1693508124719,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { Point3d, Range1d } from \"@itwin/core-geometry\";\nimport { calculateSunriseOrSunset, Cartographic } from \"@itwin/core-common\";\nimport { createToolButton, ToolBarDropDown } from \"./ToolBar\";\nclass AnalysisTimelineProvider {\n  constructor() {\n    this.duration = Range1d.createXX(0, 100);\n  }\n  getDescription(time) {\n    return `${time.toFixed(0)}%`;\n  }\n  update(time, vp) {\n    vp.displayStyle.settings.analysisFraction = time / 100;\n  }\n  getCurrentTime(vp) {\n    return vp.displayStyle.settings.analysisFraction * 100;\n  }\n}\nclass SolarTimelineProvider {\n  constructor(vp) {\n    this._active = false;\n    let cartoCenter;\n    if (vp.iModel.isGeoLocated) {\n      const projectExtents = vp.iModel.projectExtents;\n      const projectCenter = Point3d.createAdd2Scaled(projectExtents.low, 0.5, projectExtents.high, 0.5);\n      cartoCenter = vp.iModel.spatialToCartographicFromEcef(projectCenter);\n    } else {\n      cartoCenter = Cartographic.fromDegrees({ longitude: -75.17035, latitude: 39.954927, height: 0 });\n    }\n    const today = new Date(Date.now());\n    const sunrise = calculateSunriseOrSunset(today, cartoCenter, true);\n    const sunset = calculateSunriseOrSunset(today, cartoCenter, false);\n    this.duration = Range1d.createXX(sunrise.getTime(), sunset.getTime());\n  }\n  getDescription(time) {\n    return new Date(time).toTimeString();\n  }\n  update(time, vp) {\n    if (this._active && vp.displayStyle.is3d()) {\n      vp.displayStyle.setSunTime(time);\n      vp.invalidateRenderPlan();\n    }\n  }\n  getCurrentTime(_vp) {\n    return this.duration.low;\n  }\n  onInteraction() {\n    this._active = true;\n  }\n}\nclass ScheduleTimelineProvider {\n  constructor(duration) {\n    this.duration = duration;\n  }\n  getDescription(time) {\n    return new Date(time * 1e3).toString();\n  }\n  update(time, vp) {\n    vp.timePoint = time;\n  }\n  getCurrentTime(vp) {\n    return vp.timePoint ?? this.duration.low;\n  }\n}\nclass NoOpTimelineProvider {\n  constructor() {\n    this.duration = Range1d.createXX(0, 100);\n  }\n  getDescription(_time) {\n    return \"No animation available for this view.\";\n  }\n  update(_time, _vp) {\n  }\n  getCurrentTime(_vp) {\n    return this.duration.low;\n  }\n}\nfunction createTimelineProvider(vp) {\n  if (vp.displayStyle.scheduleScript)\n    return new ScheduleTimelineProvider(vp.displayStyle.scheduleScript.duration);\n  if (vp.displayStyle.settings.analysisStyle)\n    return new AnalysisTimelineProvider();\n  if (vp.displayStyle.is3d())\n    return new SolarTimelineProvider(vp);\n  return new NoOpTimelineProvider();\n}\nclass TimelinePanel extends ToolBarDropDown {\n  constructor(vp, parent, durationInSeconds) {\n    super();\n    this._elapsedMillis = 0;\n    this._lastMillis = Date.now();\n    this._isPlaying = false;\n    this._vp = vp;\n    this._totalMillis = 1e3 * durationInSeconds;\n    this._provider = this.createProvider();\n    this._element = document.createElement(\"div\");\n    this._element.className = \"toolMenu\";\n    this._element.style.display = \"block\";\n    this._element.style.cssFloat = \"left\";\n    const controls = document.createElement(\"div\");\n    controls.style.display = \"flex\";\n    this._playButton = createToolButton({\n      iconUnicode: \"\",\n      click: () => this.start()\n    });\n    this._pauseButton = createToolButton({\n      iconUnicode: \"\",\n      click: () => this.pause()\n    });\n    controls.appendChild(this._playButton);\n    controls.appendChild(this._pauseButton);\n    this._pauseButton.style.display = \"none\";\n    const durationDiv = document.createElement(\"div\");\n    const durationLabel = document.createElement(\"label\");\n    durationLabel.innerText = \"Duration: \";\n    durationLabel.htmlFor = \"anim_duration\";\n    durationDiv.appendChild(durationLabel);\n    this._durationElement = document.createElement(\"input\");\n    this._durationElement.id = \"anim_duration\";\n    this._durationElement.type = \"number\";\n    this._durationElement.min = \"0\";\n    this._durationElement.step = \"0.1\";\n    this._durationElement.value = durationInSeconds.toString();\n    this._durationElement.style.width = \"4em\";\n    this._durationElement.innerHTML = \" second(s)\";\n    this._durationElement.onchange = () => this.updateDuration();\n    durationDiv.appendChild(this._durationElement);\n    controls.appendChild(durationDiv);\n    this._element.appendChild(controls);\n    this._slider = document.createElement(\"input\");\n    this._slider.type = \"range\";\n    this._slider.min = \"0\";\n    this._slider.max = \"1000\";\n    this._slider.value = \"0\";\n    this._slider.className = \"slider\";\n    this._slider.addEventListener(\"input\", () => this.processSliderAdjustment());\n    this._element.appendChild(this._slider);\n    this._messageElement = document.createElement(\"div\");\n    this._element.appendChild(this._messageElement);\n    parent.appendChild(this._element);\n    this.update();\n  }\n  get isOpen() {\n    return \"none\" !== this._element.style.display;\n  }\n  _open() {\n    this._element.style.display = \"block\";\n  }\n  _close() {\n    this._element.style.display = \"none\";\n  }\n  get onViewChanged() {\n    this._provider = this.createProvider();\n    if (this._isPlaying)\n      this.pause();\n    else\n      this.update();\n    return Promise.resolve();\n  }\n  start() {\n    if (this._isPlaying)\n      return;\n    this.onInteraction();\n    this._isPlaying = true;\n    this._pauseButton.style.display = \"block\";\n    this._playButton.style.display = \"none\";\n    this.update();\n    this._lastMillis = Date.now();\n    this.queueAnimationFrame();\n  }\n  pause() {\n    if (!this._isPlaying)\n      return;\n    this._isPlaying = false;\n    this._pauseButton.style.display = \"none\";\n    this._playButton.style.display = \"block\";\n    this._lastMillis = Date.now();\n    this.update();\n    this.queueAnimationFrame();\n  }\n  onAnimationFrame() {\n    if (!this._isPlaying)\n      return;\n    const now = Date.now();\n    const elapsed = now - this._lastMillis;\n    this._lastMillis = now;\n    this._elapsedMillis += elapsed;\n    this.update();\n    if (this._elapsedMillis >= this._totalMillis)\n      this._elapsedMillis = 0;\n    this.queueAnimationFrame();\n  }\n  queueAnimationFrame() {\n    requestAnimationFrame(() => this.onAnimationFrame());\n  }\n  update() {\n    const fraction = Math.min(1, this._elapsedMillis / this._totalMillis);\n    this._slider.value = (fraction * 1e3).toString();\n    const point = this._provider.duration.fractionToPoint(fraction);\n    this._provider.update(point, this._vp);\n    this._messageElement.innerText = this._provider.getDescription(point);\n  }\n  processSliderAdjustment() {\n    this.onInteraction();\n    const sliderValue = parseInt(this._slider.value, 10);\n    const fraction = sliderValue / 1e3;\n    this._elapsedMillis = fraction * this._totalMillis;\n    this._lastMillis = Date.now();\n    this.update();\n  }\n  updateDuration() {\n    const seconds = parseInt(this._durationElement.value, 10);\n    if (Number.isNaN(seconds) || seconds <= 0)\n      return;\n    const fraction = Math.min(1, this._elapsedMillis / this._totalMillis);\n    this._totalMillis = seconds * 1e3;\n    this._elapsedMillis = fraction * this._totalMillis;\n    this._lastMillis = Date.now();\n    this.update();\n  }\n  onInteraction() {\n    if (this._provider.onInteraction)\n      this._provider.onInteraction();\n  }\n  createProvider() {\n    const provider = createTimelineProvider(this._vp);\n    const time = provider.getCurrentTime(this._vp);\n    const timeFraction = (time - provider.duration.low) / provider.duration.length();\n    this._elapsedMillis = timeFraction * this._totalMillis;\n    return provider;\n  }\n}\nexport function createTimeline(vp, parent, durationInSeconds) {\n  return new TimelinePanel(vp, parent, durationInSeconds);\n}\n",
      "start": 1693508124719,
      "end": 1693508124833,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/Timeline.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { Point3d, Range1d } from \"@itwin/core-geometry\";\r\nimport { calculateSunriseOrSunset, Cartographic } from \"@itwin/core-common\";\r\nimport { Viewport } from \"@itwin/core-frontend\";\r\nimport { createToolButton, ToolBarDropDown } from \"./ToolBar\";\r\n\r\ninterface TimelineProvider {\r\n  /** Time range in any units. */\r\n  duration: Range1d;\r\n  /** Supply a description of the current time in same units as `this.duration`. */\r\n  getDescription(time: number): string;\r\n  /** Update state based on current time in same units as `this.duration`. */\r\n  update(time: number, vp: Viewport): void;\r\n  /** Get current time from viewport. */\r\n  getCurrentTime(vp: Viewport): number;\r\n  /** Called when user interacts with the timeline, by pressing Start or adjusting slider. */\r\n  onInteraction?: () => void;\r\n}\r\n\r\nclass AnalysisTimelineProvider {\r\n  public readonly duration = Range1d.createXX(0, 100);\r\n\r\n  public getDescription(time: number): string {\r\n    return `${time.toFixed(0)}%`;\r\n  }\r\n\r\n  public update(time: number, vp: Viewport): void {\r\n    vp.displayStyle.settings.analysisFraction = time / 100;\r\n  }\r\n\r\n  public getCurrentTime(vp: Viewport): number {\r\n    return vp.displayStyle.settings.analysisFraction * 100;\r\n  }\r\n}\r\n\r\nclass SolarTimelineProvider {\r\n  public readonly duration: Range1d;\r\n  private _active = false;\r\n\r\n  public constructor(vp: Viewport) {\r\n    let cartoCenter;\r\n    if (vp.iModel.isGeoLocated) {\r\n      const projectExtents = vp.iModel.projectExtents;\r\n      const projectCenter = Point3d.createAdd2Scaled(projectExtents.low, .5, projectExtents.high, .5);\r\n      cartoCenter = vp.iModel.spatialToCartographicFromEcef(projectCenter);\r\n    } else {\r\n      cartoCenter = Cartographic.fromDegrees({longitude: -75.17035, latitude: 39.954927, height: 0.0});\r\n    }\r\n\r\n    const today = new Date(Date.now());\r\n    const sunrise = calculateSunriseOrSunset(today, cartoCenter, true);\r\n    const sunset = calculateSunriseOrSunset(today, cartoCenter, false);\r\n    this.duration = Range1d.createXX(sunrise.getTime(), sunset.getTime());\r\n  }\r\n\r\n  public getDescription(time: number): string {\r\n    return new Date(time).toTimeString();\r\n  }\r\n\r\n  public update(time: number, vp: Viewport): void {\r\n    if (this._active && vp.displayStyle.is3d()) {\r\n      vp.displayStyle.setSunTime(time);\r\n      vp.invalidateRenderPlan();\r\n    }\r\n  }\r\n\r\n  public getCurrentTime(_vp: Viewport): number {\r\n    // NB: All we have is the solar direction - cannot compute date from that.\r\n    return this.duration.low;\r\n  }\r\n\r\n  public onInteraction(): void {\r\n    this._active = true;\r\n  }\r\n}\r\n\r\nclass ScheduleTimelineProvider {\r\n  public readonly duration: Range1d;\r\n\r\n  public constructor(duration: Range1d) {\r\n    this.duration = duration;\r\n  }\r\n\r\n  public getDescription(time: number): string {\r\n    return new Date(time * 1000).toString();\r\n  }\r\n\r\n  public update(time: number, vp: Viewport): void {\r\n    vp.timePoint = time;\r\n  }\r\n\r\n  public getCurrentTime(vp: Viewport): number {\r\n    return vp.timePoint ?? this.duration.low;\r\n  }\r\n}\r\n\r\nclass NoOpTimelineProvider {\r\n  public readonly duration = Range1d.createXX(0, 100);\r\n\r\n  public getDescription(_time: number): string {\r\n    return \"No animation available for this view.\";\r\n  }\r\n\r\n  public update(_time: number, _vp: Viewport): void { }\r\n\r\n  public getCurrentTime(_vp: Viewport): number {\r\n    return this.duration.low;\r\n  }\r\n}\r\n\r\nfunction createTimelineProvider(vp: Viewport): TimelineProvider {\r\n  if (vp.displayStyle.scheduleScript)\r\n    return new ScheduleTimelineProvider(vp.displayStyle.scheduleScript.duration);\r\n\r\n  if (vp.displayStyle.settings.analysisStyle)\r\n    return new AnalysisTimelineProvider();\r\n\r\n  if (vp.displayStyle.is3d())\r\n    return new SolarTimelineProvider(vp);\r\n\r\n  return new NoOpTimelineProvider();\r\n}\r\n\r\nclass TimelinePanel extends ToolBarDropDown {\r\n  private readonly _vp: Viewport;\r\n  private _provider: TimelineProvider;\r\n  private _totalMillis: number;\r\n  private _elapsedMillis = 0;\r\n  private _lastMillis = Date.now();\r\n  private _isPlaying = false;\r\n\r\n  private readonly _element: HTMLElement;\r\n  private readonly _messageElement: HTMLElement;\r\n  private readonly _durationElement: HTMLInputElement;\r\n  private readonly _slider: HTMLInputElement;\r\n  private readonly _playButton: HTMLElement;\r\n  private readonly _pauseButton: HTMLElement;\r\n\r\n  public constructor(vp: Viewport, parent: HTMLElement, durationInSeconds: number) {\r\n    super();\r\n    this._vp = vp;\r\n    this._totalMillis = 1000 * durationInSeconds;\r\n    this._provider = this.createProvider();\r\n\r\n    this._element = document.createElement(\"div\");\r\n    this._element.className = \"toolMenu\";\r\n    this._element.style.display = \"block\";\r\n    this._element.style.cssFloat = \"left\";\r\n\r\n    const controls = document.createElement(\"div\");\r\n    controls.style.display = \"flex\";\r\n    this._playButton = createToolButton({\r\n      iconUnicode: \"\\uea32\",\r\n      click: () => this.start(),\r\n    });\r\n    this._pauseButton = createToolButton({\r\n      iconUnicode: \"\\uea33\",\r\n      click: () => this.pause(),\r\n    });\r\n\r\n    controls.appendChild(this._playButton);\r\n    controls.appendChild(this._pauseButton);\r\n    this._pauseButton.style.display = \"none\";\r\n\r\n    const durationDiv = document.createElement(\"div\");\r\n    const durationLabel = document.createElement(\"label\");\r\n    durationLabel.innerText = \"Duration: \";\r\n    durationLabel.htmlFor = \"anim_duration\";\r\n    durationDiv.appendChild(durationLabel);\r\n\r\n    this._durationElement = document.createElement(\"input\");\r\n    this._durationElement.id = \"anim_duration\";\r\n    this._durationElement.type = \"number\";\r\n    this._durationElement.min = \"0\";\r\n    this._durationElement.step = \"0.1\";\r\n    this._durationElement.value = durationInSeconds.toString();\r\n    this._durationElement.style.width = \"4em\";\r\n    this._durationElement.innerHTML = \" second(s)\";\r\n    this._durationElement.onchange = () => this.updateDuration();\r\n    durationDiv.appendChild(this._durationElement);\r\n    controls.appendChild(durationDiv);\r\n\r\n    this._element.appendChild(controls);\r\n\r\n    this._slider = document.createElement(\"input\");\r\n    this._slider.type = \"range\";\r\n    this._slider.min = \"0\";\r\n    this._slider.max = \"1000\";\r\n    this._slider.value = \"0\";\r\n    this._slider.className = \"slider\";\r\n    this._slider.addEventListener(\"input\", () => this.processSliderAdjustment());\r\n    this._element.appendChild(this._slider);\r\n\r\n    this._messageElement = document.createElement(\"div\");\r\n    this._element.appendChild(this._messageElement);\r\n\r\n    parent.appendChild(this._element);\r\n\r\n    this.update();\r\n  }\r\n\r\n  public get isOpen() {\r\n    return \"none\" !== this._element.style.display;\r\n  }\r\n\r\n  protected _open(): void {\r\n    this._element.style.display = \"block\";\r\n  }\r\n\r\n  protected _close(): void {\r\n    this._element.style.display = \"none\";\r\n  }\r\n\r\n  public override get onViewChanged(): Promise<void> {\r\n    // Change the provider before invoking update\r\n    this._provider = this.createProvider();\r\n    if (this._isPlaying)\r\n      this.pause();\r\n    else\r\n      this.update();\r\n\r\n    return Promise.resolve();\r\n  }\r\n\r\n  private start(): void {\r\n    if (this._isPlaying)\r\n      return;\r\n\r\n    this.onInteraction();\r\n    this._isPlaying = true;\r\n    this._pauseButton.style.display = \"block\";\r\n    this._playButton.style.display = \"none\";\r\n\r\n    this.update();\r\n    this._lastMillis = Date.now();\r\n    this.queueAnimationFrame();\r\n  }\r\n\r\n  private pause(): void {\r\n    if (!this._isPlaying)\r\n      return;\r\n\r\n    this._isPlaying = false;\r\n    this._pauseButton.style.display = \"none\";\r\n    this._playButton.style.display = \"block\";\r\n\r\n    this._lastMillis = Date.now();\r\n    this.update();\r\n    this.queueAnimationFrame();\r\n  }\r\n\r\n  private onAnimationFrame(): void {\r\n    if (!this._isPlaying)\r\n      return;\r\n\r\n    const now = Date.now();\r\n    const elapsed = now - this._lastMillis;\r\n    this._lastMillis = now;\r\n    this._elapsedMillis += elapsed;\r\n\r\n    this.update();\r\n\r\n    if (this._elapsedMillis >= this._totalMillis)\r\n      this._elapsedMillis = 0;\r\n\r\n    this.queueAnimationFrame();\r\n  }\r\n\r\n  private queueAnimationFrame(): void {\r\n    requestAnimationFrame(() => this.onAnimationFrame());\r\n  }\r\n\r\n  private update(): void {\r\n    const fraction = Math.min(1, this._elapsedMillis / this._totalMillis);\r\n    this._slider.value = (fraction * 1000).toString();\r\n\r\n    const point = this._provider.duration.fractionToPoint(fraction);\r\n    this._provider.update(point, this._vp);\r\n\r\n    this._messageElement.innerText = this._provider.getDescription(point);\r\n  }\r\n\r\n  private processSliderAdjustment(): void {\r\n    this.onInteraction();\r\n    const sliderValue = parseInt(this._slider.value, 10);\r\n    const fraction = sliderValue / 1000;\r\n    this._elapsedMillis = fraction * this._totalMillis;\r\n    this._lastMillis = Date.now();\r\n    this.update();\r\n  }\r\n\r\n  private updateDuration(): void {\r\n    const seconds = parseInt(this._durationElement.value, 10);\r\n    if (Number.isNaN(seconds) || seconds <= 0)\r\n      return;\r\n\r\n    const fraction = Math.min(1, this._elapsedMillis / this._totalMillis);\r\n    this._totalMillis = seconds * 1000;\r\n    this._elapsedMillis = fraction * this._totalMillis;\r\n    this._lastMillis = Date.now();\r\n\r\n    this.update();\r\n  }\r\n\r\n  private onInteraction(): void {\r\n    if (this._provider.onInteraction)\r\n      this._provider.onInteraction();\r\n  }\r\n\r\n  private createProvider(): TimelineProvider {\r\n    const provider = createTimelineProvider(this._vp);\r\n\r\n    const time = provider.getCurrentTime(this._vp);\r\n    const timeFraction = (time - provider.duration.low) / provider.duration.length();\r\n    this._elapsedMillis = timeFraction * this._totalMillis;\r\n\r\n    return provider;\r\n  }\r\n}\r\n\r\nexport function createTimeline(vp: Viewport, parent: HTMLElement, durationInSeconds: number): ToolBarDropDown {\r\n  return new TimelinePanel(vp, parent, durationInSeconds);\r\n}\r\n"
        ],
        "mappings": "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",
        "names": []
      }
    }
  ]
}
