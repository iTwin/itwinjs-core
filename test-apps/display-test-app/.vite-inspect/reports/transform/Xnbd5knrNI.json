{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/webgl/GL.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module WebGL\n */\nif (typeof (WebGLRenderingContext) === \"undefined\") {\n    global.WebGLRenderingContext = new Proxy({}, { get: () => 0 });\n}\n/** @internal */\nexport var GL;\n(function (GL) {\n    let BlendEquation;\n    (function (BlendEquation) {\n        BlendEquation[BlendEquation[\"Add\"] = WebGLRenderingContext.FUNC_ADD] = \"Add\";\n        BlendEquation[BlendEquation[\"Subtract\"] = WebGLRenderingContext.FUNC_SUBTRACT] = \"Subtract\";\n        BlendEquation[BlendEquation[\"ReverseSubtract\"] = WebGLRenderingContext.FUNC_REVERSE_SUBTRACT] = \"ReverseSubtract\";\n        BlendEquation[BlendEquation[\"Default\"] = BlendEquation.Add] = \"Default\";\n    })(BlendEquation = GL.BlendEquation || (GL.BlendEquation = {}));\n    let BlendFactor;\n    (function (BlendFactor) {\n        BlendFactor[BlendFactor[\"Zero\"] = WebGLRenderingContext.ZERO] = \"Zero\";\n        BlendFactor[BlendFactor[\"One\"] = WebGLRenderingContext.ONE] = \"One\";\n        BlendFactor[BlendFactor[\"SrcColor\"] = WebGLRenderingContext.SRC_COLOR] = \"SrcColor\";\n        BlendFactor[BlendFactor[\"OneMinusSrcColor\"] = WebGLRenderingContext.ONE_MINUS_SRC_COLOR] = \"OneMinusSrcColor\";\n        BlendFactor[BlendFactor[\"DstColor\"] = WebGLRenderingContext.DST_COLOR] = \"DstColor\";\n        BlendFactor[BlendFactor[\"OneMinusDstColor\"] = WebGLRenderingContext.ONE_MINUS_DST_COLOR] = \"OneMinusDstColor\";\n        BlendFactor[BlendFactor[\"SrcAlpha\"] = WebGLRenderingContext.SRC_ALPHA] = \"SrcAlpha\";\n        BlendFactor[BlendFactor[\"OneMinusSrcAlpha\"] = WebGLRenderingContext.ONE_MINUS_SRC_ALPHA] = \"OneMinusSrcAlpha\";\n        BlendFactor[BlendFactor[\"DstAlpha\"] = WebGLRenderingContext.DST_ALPHA] = \"DstAlpha\";\n        BlendFactor[BlendFactor[\"OneMinusDstAlpha\"] = WebGLRenderingContext.ONE_MINUS_DST_ALPHA] = \"OneMinusDstAlpha\";\n        BlendFactor[BlendFactor[\"ConstColor\"] = WebGLRenderingContext.CONSTANT_COLOR] = \"ConstColor\";\n        BlendFactor[BlendFactor[\"OneMinusConstColor\"] = WebGLRenderingContext.ONE_MINUS_CONSTANT_COLOR] = \"OneMinusConstColor\";\n        BlendFactor[BlendFactor[\"ConstAlpha\"] = WebGLRenderingContext.CONSTANT_ALPHA] = \"ConstAlpha\";\n        BlendFactor[BlendFactor[\"OneMinusConstAlpha\"] = WebGLRenderingContext.ONE_MINUS_CONSTANT_ALPHA] = \"OneMinusConstAlpha\";\n        BlendFactor[BlendFactor[\"AlphaSaturate\"] = WebGLRenderingContext.SRC_ALPHA_SATURATE] = \"AlphaSaturate\";\n        BlendFactor[BlendFactor[\"DefaultSrc\"] = BlendFactor.One] = \"DefaultSrc\";\n        BlendFactor[BlendFactor[\"DefaultDst\"] = BlendFactor.Zero] = \"DefaultDst\";\n    })(BlendFactor = GL.BlendFactor || (GL.BlendFactor = {}));\n    let Buffer;\n    (function (Buffer) {\n        let Target;\n        (function (Target) {\n            Target[Target[\"ArrayBuffer\"] = WebGLRenderingContext.ARRAY_BUFFER] = \"ArrayBuffer\";\n            Target[Target[\"ElementArrayBuffer\"] = WebGLRenderingContext.ELEMENT_ARRAY_BUFFER] = \"ElementArrayBuffer\";\n        })(Target = Buffer.Target || (Buffer.Target = {}));\n        let Binding;\n        (function (Binding) {\n            Binding[Binding[\"ArrayBuffer\"] = WebGLRenderingContext.ARRAY_BUFFER_BINDING] = \"ArrayBuffer\";\n            Binding[Binding[\"ElementArrayBuffer\"] = WebGLRenderingContext.ELEMENT_ARRAY_BUFFER_BINDING] = \"ElementArrayBuffer\";\n        })(Binding = Buffer.Binding || (Buffer.Binding = {}));\n        let Parameter;\n        (function (Parameter) {\n            Parameter[Parameter[\"Size\"] = WebGLRenderingContext.BUFFER_SIZE] = \"Size\";\n            Parameter[Parameter[\"Usage\"] = WebGLRenderingContext.BUFFER_USAGE] = \"Usage\";\n        })(Parameter = Buffer.Parameter || (Buffer.Parameter = {}));\n        let Usage;\n        (function (Usage) {\n            Usage[Usage[\"DynamicDraw\"] = WebGLRenderingContext.DYNAMIC_DRAW] = \"DynamicDraw\";\n            Usage[Usage[\"StaticDraw\"] = WebGLRenderingContext.STATIC_DRAW] = \"StaticDraw\";\n            Usage[Usage[\"StreamDraw\"] = WebGLRenderingContext.STREAM_DRAW] = \"StreamDraw\";\n        })(Usage = Buffer.Usage || (Buffer.Usage = {}));\n    })(Buffer = GL.Buffer || (GL.Buffer = {}));\n    let StencilOperation;\n    (function (StencilOperation) {\n        StencilOperation[StencilOperation[\"Keep\"] = WebGLRenderingContext.KEEP] = \"Keep\";\n        StencilOperation[StencilOperation[\"Zero\"] = WebGLRenderingContext.ZERO] = \"Zero\";\n        StencilOperation[StencilOperation[\"Replace\"] = WebGLRenderingContext.REPLACE] = \"Replace\";\n        StencilOperation[StencilOperation[\"Incr\"] = WebGLRenderingContext.INCR] = \"Incr\";\n        StencilOperation[StencilOperation[\"IncrWrap\"] = WebGLRenderingContext.INCR_WRAP] = \"IncrWrap\";\n        StencilOperation[StencilOperation[\"Decr\"] = WebGLRenderingContext.DECR] = \"Decr\";\n        StencilOperation[StencilOperation[\"DecrWrap\"] = WebGLRenderingContext.DECR_WRAP] = \"DecrWrap\";\n        StencilOperation[StencilOperation[\"Invert\"] = WebGLRenderingContext.INVERT] = \"Invert\";\n        StencilOperation[StencilOperation[\"Default\"] = StencilOperation.Keep] = \"Default\";\n    })(StencilOperation = GL.StencilOperation || (GL.StencilOperation = {}));\n    let StencilFunction;\n    (function (StencilFunction) {\n        StencilFunction[StencilFunction[\"Never\"] = WebGLRenderingContext.NEVER] = \"Never\";\n        StencilFunction[StencilFunction[\"Less\"] = WebGLRenderingContext.LESS] = \"Less\";\n        StencilFunction[StencilFunction[\"LEqual\"] = WebGLRenderingContext.LEQUAL] = \"LEqual\";\n        StencilFunction[StencilFunction[\"Greater\"] = WebGLRenderingContext.GREATER] = \"Greater\";\n        StencilFunction[StencilFunction[\"GEqual\"] = WebGLRenderingContext.GEQUAL] = \"GEqual\";\n        StencilFunction[StencilFunction[\"Equal\"] = WebGLRenderingContext.EQUAL] = \"Equal\";\n        StencilFunction[StencilFunction[\"NotEqual\"] = WebGLRenderingContext.NOTEQUAL] = \"NotEqual\";\n        StencilFunction[StencilFunction[\"Always\"] = WebGLRenderingContext.ALWAYS] = \"Always\";\n        StencilFunction[StencilFunction[\"Default\"] = StencilFunction.Always] = \"Default\";\n    })(StencilFunction = GL.StencilFunction || (GL.StencilFunction = {}));\n    let CullFace;\n    (function (CullFace) {\n        CullFace[CullFace[\"Front\"] = WebGLRenderingContext.FRONT] = \"Front\";\n        CullFace[CullFace[\"Back\"] = WebGLRenderingContext.BACK] = \"Back\";\n        CullFace[CullFace[\"FrontAndBack\"] = WebGLRenderingContext.FRONT_AND_BACK] = \"FrontAndBack\";\n        CullFace[CullFace[\"Default\"] = CullFace.Back] = \"Default\";\n    })(CullFace = GL.CullFace || (GL.CullFace = {}));\n    let DataType;\n    (function (DataType) {\n        DataType[DataType[\"Byte\"] = WebGLRenderingContext.BYTE] = \"Byte\";\n        DataType[DataType[\"Short\"] = WebGLRenderingContext.SHORT] = \"Short\";\n        DataType[DataType[\"UnsignedByte\"] = WebGLRenderingContext.UNSIGNED_BYTE] = \"UnsignedByte\";\n        DataType[DataType[\"UnsignedShort\"] = WebGLRenderingContext.UNSIGNED_SHORT] = \"UnsignedShort\";\n        DataType[DataType[\"UnsignedInt\"] = WebGLRenderingContext.UNSIGNED_INT] = \"UnsignedInt\";\n        DataType[DataType[\"Float\"] = WebGLRenderingContext.FLOAT] = \"Float\";\n        // WebGL 2 has more data types\n        // HalfFloat = WebGLRenderingContext.HALF_FLOAT,\n    })(DataType = GL.DataType || (GL.DataType = {}));\n    let FrontFace;\n    (function (FrontFace) {\n        FrontFace[FrontFace[\"CounterClockwise\"] = WebGLRenderingContext.CCW] = \"CounterClockwise\";\n        FrontFace[FrontFace[\"Clockwise\"] = WebGLRenderingContext.CW] = \"Clockwise\";\n        FrontFace[FrontFace[\"Default\"] = FrontFace.CounterClockwise] = \"Default\";\n    })(FrontFace = GL.FrontFace || (GL.FrontFace = {}));\n    let DepthFunc;\n    (function (DepthFunc) {\n        DepthFunc[DepthFunc[\"Never\"] = WebGLRenderingContext.NEVER] = \"Never\";\n        DepthFunc[DepthFunc[\"Less\"] = WebGLRenderingContext.LESS] = \"Less\";\n        DepthFunc[DepthFunc[\"Equal\"] = WebGLRenderingContext.EQUAL] = \"Equal\";\n        DepthFunc[DepthFunc[\"LessOrEqual\"] = WebGLRenderingContext.LEQUAL] = \"LessOrEqual\";\n        DepthFunc[DepthFunc[\"Greater\"] = WebGLRenderingContext.GREATER] = \"Greater\";\n        DepthFunc[DepthFunc[\"NotEqual\"] = WebGLRenderingContext.NOTEQUAL] = \"NotEqual\";\n        DepthFunc[DepthFunc[\"GreaterOrEqual\"] = WebGLRenderingContext.GEQUAL] = \"GreaterOrEqual\";\n        DepthFunc[DepthFunc[\"Always\"] = WebGLRenderingContext.ALWAYS] = \"Always\";\n        DepthFunc[DepthFunc[\"Default\"] = DepthFunc.LessOrEqual] = \"Default\";\n    })(DepthFunc = GL.DepthFunc || (GL.DepthFunc = {}));\n    let Capability;\n    (function (Capability) {\n        Capability[Capability[\"Blend\"] = WebGLRenderingContext.BLEND] = \"Blend\";\n        Capability[Capability[\"BlendColor\"] = WebGLRenderingContext.BLEND_COLOR] = \"BlendColor\";\n        Capability[Capability[\"BlendEquationAlpha\"] = WebGLRenderingContext.BLEND_EQUATION_ALPHA] = \"BlendEquationAlpha\";\n        Capability[Capability[\"BlendEquationRGB\"] = WebGLRenderingContext.BLEND_EQUATION_RGB] = \"BlendEquationRGB\";\n        Capability[Capability[\"BlendSrcAlpha\"] = WebGLRenderingContext.BLEND_SRC_ALPHA] = \"BlendSrcAlpha\";\n        Capability[Capability[\"BlendSrcRgb\"] = WebGLRenderingContext.BLEND_SRC_RGB] = \"BlendSrcRgb\";\n        Capability[Capability[\"BlendDstAlpha\"] = WebGLRenderingContext.BLEND_DST_ALPHA] = \"BlendDstAlpha\";\n        Capability[Capability[\"BlendDstRgb\"] = WebGLRenderingContext.BLEND_DST_RGB] = \"BlendDstRgb\";\n        Capability[Capability[\"CullFace\"] = WebGLRenderingContext.CULL_FACE] = \"CullFace\";\n        Capability[Capability[\"CullFaceMode\"] = WebGLRenderingContext.CULL_FACE_MODE] = \"CullFaceMode\";\n        Capability[Capability[\"DepthFunc\"] = WebGLRenderingContext.DEPTH_FUNC] = \"DepthFunc\";\n        Capability[Capability[\"DepthTest\"] = WebGLRenderingContext.DEPTH_TEST] = \"DepthTest\";\n        Capability[Capability[\"DepthWriteMask\"] = WebGLRenderingContext.DEPTH_WRITEMASK] = \"DepthWriteMask\";\n        Capability[Capability[\"FrontFace\"] = WebGLRenderingContext.FRONT_FACE] = \"FrontFace\";\n        Capability[Capability[\"StencilFrontFunc\"] = WebGLRenderingContext.STENCIL_FUNC] = \"StencilFrontFunc\";\n        Capability[Capability[\"StencilFrontRef\"] = WebGLRenderingContext.STENCIL_REF] = \"StencilFrontRef\";\n        Capability[Capability[\"StencilFrontValueMask\"] = WebGLRenderingContext.STENCIL_VALUE_MASK] = \"StencilFrontValueMask\";\n        Capability[Capability[\"StencilFrontWriteMask\"] = WebGLRenderingContext.STENCIL_WRITEMASK] = \"StencilFrontWriteMask\";\n        Capability[Capability[\"StencilFrontOpFail\"] = WebGLRenderingContext.STENCIL_FAIL] = \"StencilFrontOpFail\";\n        Capability[Capability[\"StencilFrontOpZFail\"] = WebGLRenderingContext.STENCIL_PASS_DEPTH_FAIL] = \"StencilFrontOpZFail\";\n        Capability[Capability[\"StencilFrontOpZPass\"] = WebGLRenderingContext.STENCIL_PASS_DEPTH_PASS] = \"StencilFrontOpZPass\";\n        Capability[Capability[\"StencilBackFunc\"] = WebGLRenderingContext.STENCIL_BACK_FUNC] = \"StencilBackFunc\";\n        Capability[Capability[\"StencilBackRef\"] = WebGLRenderingContext.STENCIL_BACK_REF] = \"StencilBackRef\";\n        Capability[Capability[\"StencilBackValueMask\"] = WebGLRenderingContext.STENCIL_BACK_VALUE_MASK] = \"StencilBackValueMask\";\n        Capability[Capability[\"StencilBackWriteMask\"] = WebGLRenderingContext.STENCIL_BACK_WRITEMASK] = \"StencilBackWriteMask\";\n        Capability[Capability[\"StencilBackOpFail\"] = WebGLRenderingContext.STENCIL_BACK_FAIL] = \"StencilBackOpFail\";\n        Capability[Capability[\"StencilBackOpZFail\"] = WebGLRenderingContext.STENCIL_BACK_PASS_DEPTH_FAIL] = \"StencilBackOpZFail\";\n        Capability[Capability[\"StencilBackOpZPass\"] = WebGLRenderingContext.STENCIL_BACK_PASS_DEPTH_PASS] = \"StencilBackOpZPass\";\n        Capability[Capability[\"StencilTest\"] = WebGLRenderingContext.STENCIL_TEST] = \"StencilTest\";\n        Capability[Capability[\"StencilWriteMask\"] = WebGLRenderingContext.STENCIL_WRITEMASK] = \"StencilWriteMask\";\n    })(Capability = GL.Capability || (GL.Capability = {}));\n    let Texture;\n    (function (Texture) {\n        let Target;\n        (function (Target) {\n            Target[Target[\"TwoDee\"] = WebGLRenderingContext.TEXTURE_2D] = \"TwoDee\";\n            Target[Target[\"CubeMap\"] = WebGLRenderingContext.TEXTURE_CUBE_MAP] = \"CubeMap\";\n            Target[Target[\"CubeMapPositiveX\"] = WebGLRenderingContext.TEXTURE_CUBE_MAP_POSITIVE_X] = \"CubeMapPositiveX\";\n            Target[Target[\"CubeMapNegativeX\"] = WebGLRenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_X] = \"CubeMapNegativeX\";\n            Target[Target[\"CubeMapPositiveY\"] = WebGLRenderingContext.TEXTURE_CUBE_MAP_POSITIVE_Y] = \"CubeMapPositiveY\";\n            Target[Target[\"CubeMapNegativeY\"] = WebGLRenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_Y] = \"CubeMapNegativeY\";\n            Target[Target[\"CubeMapPositiveZ\"] = WebGLRenderingContext.TEXTURE_CUBE_MAP_POSITIVE_Z] = \"CubeMapPositiveZ\";\n            Target[Target[\"CubeMapNegativeZ\"] = WebGLRenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_Z] = \"CubeMapNegativeZ\";\n        })(Target = Texture.Target || (Texture.Target = {}));\n        let Format;\n        (function (Format) {\n            Format[Format[\"Rgb\"] = WebGLRenderingContext.RGB] = \"Rgb\";\n            Format[Format[\"Rgba\"] = WebGLRenderingContext.RGBA] = \"Rgba\";\n            Format[Format[\"DepthStencil\"] = WebGLRenderingContext.DEPTH_STENCIL] = \"DepthStencil\";\n            Format[Format[\"Luminance\"] = WebGLRenderingContext.LUMINANCE] = \"Luminance\";\n            Format[Format[\"DepthComponent\"] = WebGLRenderingContext.DEPTH_COMPONENT] = \"DepthComponent\";\n        })(Format = Texture.Format || (Texture.Format = {}));\n        // This name is unambiguous as it is qualified by the namespace...https://github.com/palantir/tslint/issues/3789\n        let DataType;\n        (function (DataType) {\n            DataType[DataType[\"Float\"] = WebGLRenderingContext.FLOAT] = \"Float\";\n            DataType[DataType[\"UnsignedByte\"] = WebGLRenderingContext.UNSIGNED_BYTE] = \"UnsignedByte\";\n            //    UnsignedInt24_8 = WebGLRenderingContext.UNSIGNED_INT_24_8,\n            DataType[DataType[\"UnsignedInt\"] = WebGLRenderingContext.UNSIGNED_INT] = \"UnsignedInt\";\n        })(DataType = Texture.DataType || (Texture.DataType = {}));\n        let WrapMode;\n        (function (WrapMode) {\n            WrapMode[WrapMode[\"Repeat\"] = WebGLRenderingContext.REPEAT] = \"Repeat\";\n            WrapMode[WrapMode[\"MirroredRepeat\"] = WebGLRenderingContext.MIRRORED_REPEAT] = \"MirroredRepeat\";\n            WrapMode[WrapMode[\"ClampToEdge\"] = WebGLRenderingContext.CLAMP_TO_EDGE] = \"ClampToEdge\";\n        })(WrapMode = Texture.WrapMode || (Texture.WrapMode = {}));\n    })(Texture = GL.Texture || (GL.Texture = {}));\n    let ShaderType;\n    (function (ShaderType) {\n        ShaderType[ShaderType[\"Fragment\"] = WebGLRenderingContext.FRAGMENT_SHADER] = \"Fragment\";\n        ShaderType[ShaderType[\"Vertex\"] = WebGLRenderingContext.VERTEX_SHADER] = \"Vertex\";\n    })(ShaderType = GL.ShaderType || (GL.ShaderType = {}));\n    let ShaderParameter;\n    (function (ShaderParameter) {\n        ShaderParameter[ShaderParameter[\"CompileStatus\"] = WebGLRenderingContext.COMPILE_STATUS] = \"CompileStatus\";\n    })(ShaderParameter = GL.ShaderParameter || (GL.ShaderParameter = {}));\n    let ProgramParameter;\n    (function (ProgramParameter) {\n        ProgramParameter[ProgramParameter[\"LinkStatus\"] = WebGLRenderingContext.LINK_STATUS] = \"LinkStatus\";\n    })(ProgramParameter = GL.ProgramParameter || (GL.ProgramParameter = {}));\n    let PrimitiveType;\n    (function (PrimitiveType) {\n        PrimitiveType[PrimitiveType[\"Points\"] = WebGLRenderingContext.POINTS] = \"Points\";\n        PrimitiveType[PrimitiveType[\"Lines\"] = WebGLRenderingContext.LINES] = \"Lines\";\n        PrimitiveType[PrimitiveType[\"Triangles\"] = WebGLRenderingContext.TRIANGLES] = \"Triangles\";\n    })(PrimitiveType = GL.PrimitiveType || (GL.PrimitiveType = {}));\n    let RenderBuffer;\n    (function (RenderBuffer) {\n        RenderBuffer.TARGET = WebGLRenderingContext.RENDERBUFFER;\n        let Format;\n        (function (Format) {\n            Format[Format[\"DepthComponent16\"] = WebGLRenderingContext.DEPTH_COMPONENT16] = \"DepthComponent16\";\n        })(Format = RenderBuffer.Format || (RenderBuffer.Format = {}));\n    })(RenderBuffer = GL.RenderBuffer || (GL.RenderBuffer = {}));\n    let FrameBuffer;\n    (function (FrameBuffer) {\n        FrameBuffer.TARGET = WebGLRenderingContext.FRAMEBUFFER;\n        let Status;\n        (function (Status) {\n            Status[Status[\"Complete\"] = WebGLRenderingContext.FRAMEBUFFER_COMPLETE] = \"Complete\";\n            Status[Status[\"IncompleteAttachment\"] = WebGLRenderingContext.FRAMEBUFFER_INCOMPLETE_ATTACHMENT] = \"IncompleteAttachment\";\n            Status[Status[\"IncompleteMissingAttachment\"] = WebGLRenderingContext.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT] = \"IncompleteMissingAttachment\";\n            Status[Status[\"IncompleteDimensions\"] = WebGLRenderingContext.FRAMEBUFFER_INCOMPLETE_DIMENSIONS] = \"IncompleteDimensions\";\n            Status[Status[\"Unsupported\"] = WebGLRenderingContext.FRAMEBUFFER_UNSUPPORTED] = \"Unsupported\";\n        })(Status = FrameBuffer.Status || (FrameBuffer.Status = {}));\n    })(FrameBuffer = GL.FrameBuffer || (GL.FrameBuffer = {}));\n    let BufferBit;\n    (function (BufferBit) {\n        BufferBit[BufferBit[\"Color\"] = WebGLRenderingContext.COLOR_BUFFER_BIT] = \"Color\";\n        BufferBit[BufferBit[\"Depth\"] = WebGLRenderingContext.DEPTH_BUFFER_BIT] = \"Depth\";\n        BufferBit[BufferBit[\"Stencil\"] = WebGLRenderingContext.STENCIL_BUFFER_BIT] = \"Stencil\";\n    })(BufferBit = GL.BufferBit || (GL.BufferBit = {}));\n    let MultiSampling;\n    (function (MultiSampling) {\n        let Filter;\n        (function (Filter) {\n            Filter[Filter[\"Nearest\"] = WebGLRenderingContext.NEAREST] = \"Nearest\";\n            Filter[Filter[\"Linear\"] = WebGLRenderingContext.LINEAR] = \"Linear\";\n        })(Filter = MultiSampling.Filter || (MultiSampling.Filter = {}));\n    })(MultiSampling = GL.MultiSampling || (GL.MultiSampling = {}));\n    GL.POLYGON_OFFSET_FILL = WebGLRenderingContext.POLYGON_OFFSET_FILL;\n})(GL || (GL = {}));\n//# sourceMappingURL=GL.js.map",
      "start": 1693508122201,
      "end": 1693508122358,
      "sourcemaps": null
    }
  ]
}
