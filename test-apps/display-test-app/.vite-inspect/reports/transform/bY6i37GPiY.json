{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/Grid.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { parseArgs } from \"@itwin/frontend-devtools\";\r\nimport { GridOrientationType } from \"@itwin/core-common\";\r\nimport { IModelApp, Tool } from \"@itwin/core-frontend\";\r\n\r\n/** Change grid settings for testing. */\r\nexport class ChangeGridSettingsTool extends Tool {\r\n  public static override toolId = \"GridSettings\";\r\n  public static override get minArgs() { return 0; }\r\n  public static override get maxArgs() { return 4; }\r\n\r\n  public override async run(spacing?: number, ratio?: number, gridsPerRef?: number, orientation?: GridOrientationType): Promise<boolean> {\r\n    const vp = IModelApp.viewManager.selectedView;\r\n    if (undefined === vp)\r\n      return false;\r\n\r\n    if (undefined !== spacing)\r\n      vp.view.details.gridSpacing = { x: spacing, y: spacing };\r\n\r\n    if (undefined !== ratio)\r\n      vp.view.details.gridSpacing = { x: vp.view.details.gridSpacing.x, y: vp.view.details.gridSpacing.x * ratio };\r\n\r\n    if (undefined !== gridsPerRef)\r\n      vp.view.details.gridsPerRef = gridsPerRef;\r\n\r\n    if (undefined !== orientation)\r\n      vp.view.details.gridOrientation = orientation;\r\n\r\n    vp.invalidateScene(); // Needed to clear cached grid decoration...\r\n    return true;\r\n  }\r\n\r\n  /** The keyin accepts the following arguments:\r\n   *  - `spacing=number` Specify x and y grid reference line spacing in meters.\r\n   *  - `ratio=number` Specify y spacing as current x * ratio.\r\n   *  - `gridsPerRef=number` Specify number of grid lines to display per reference line.\r\n   *  - `orientation=0|1|2|3|4` Value for GridOrientationType.\r\n   */\r\n  public override async parseAndRun(...inputArgs: string[]): Promise<boolean> {\r\n    let spacing;\r\n    let ratio;\r\n    let gridsPerRef;\r\n    let orientation;\r\n    const args = parseArgs(inputArgs);\r\n\r\n    const spacingArg = args.getFloat(\"s\");\r\n    if (undefined !== spacingArg)\r\n      spacing = spacingArg;\r\n\r\n    const ratioArg = args.getFloat(\"r\");\r\n    if (undefined !== ratioArg)\r\n      ratio = ratioArg;\r\n\r\n    const gridsPerRefArg = args.getInteger(\"g\");\r\n    if (undefined !== gridsPerRefArg)\r\n      gridsPerRef = gridsPerRefArg;\r\n\r\n    const orientationArg = args.getInteger(\"o\");\r\n    if (undefined !== orientationArg) {\r\n      switch (orientationArg) {\r\n        case 0:\r\n          orientation = GridOrientationType.View;\r\n          break;\r\n        case 1:\r\n          orientation = GridOrientationType.WorldXY;\r\n          break;\r\n        case 2:\r\n          orientation = GridOrientationType.WorldYZ;\r\n          break;\r\n        case 3:\r\n          orientation = GridOrientationType.WorldXZ;\r\n          break;\r\n        case 4:\r\n          orientation = GridOrientationType.AuxCoord;\r\n          break;\r\n      }\r\n    }\r\n\r\n    await this.run(spacing, ratio, gridsPerRef, orientation);\r\n    return true;\r\n  }\r\n}\r\n",
      "start": 1693508121204,
      "end": 1693508121255,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { parseArgs } from \"@itwin/frontend-devtools\";\nimport { GridOrientationType } from \"@itwin/core-common\";\nimport { IModelApp, Tool } from \"@itwin/core-frontend\";\nexport class ChangeGridSettingsTool extends Tool {\n  static get minArgs() {\n    return 0;\n  }\n  static get maxArgs() {\n    return 4;\n  }\n  async run(spacing, ratio, gridsPerRef, orientation) {\n    const vp = IModelApp.viewManager.selectedView;\n    if (void 0 === vp)\n      return false;\n    if (void 0 !== spacing)\n      vp.view.details.gridSpacing = { x: spacing, y: spacing };\n    if (void 0 !== ratio)\n      vp.view.details.gridSpacing = { x: vp.view.details.gridSpacing.x, y: vp.view.details.gridSpacing.x * ratio };\n    if (void 0 !== gridsPerRef)\n      vp.view.details.gridsPerRef = gridsPerRef;\n    if (void 0 !== orientation)\n      vp.view.details.gridOrientation = orientation;\n    vp.invalidateScene();\n    return true;\n  }\n  /** The keyin accepts the following arguments:\n   *  - `spacing=number` Specify x and y grid reference line spacing in meters.\n   *  - `ratio=number` Specify y spacing as current x * ratio.\n   *  - `gridsPerRef=number` Specify number of grid lines to display per reference line.\n   *  - `orientation=0|1|2|3|4` Value for GridOrientationType.\n   */\n  async parseAndRun(...inputArgs) {\n    let spacing;\n    let ratio;\n    let gridsPerRef;\n    let orientation;\n    const args = parseArgs(inputArgs);\n    const spacingArg = args.getFloat(\"s\");\n    if (void 0 !== spacingArg)\n      spacing = spacingArg;\n    const ratioArg = args.getFloat(\"r\");\n    if (void 0 !== ratioArg)\n      ratio = ratioArg;\n    const gridsPerRefArg = args.getInteger(\"g\");\n    if (void 0 !== gridsPerRefArg)\n      gridsPerRef = gridsPerRefArg;\n    const orientationArg = args.getInteger(\"o\");\n    if (void 0 !== orientationArg) {\n      switch (orientationArg) {\n        case 0:\n          orientation = GridOrientationType.View;\n          break;\n        case 1:\n          orientation = GridOrientationType.WorldXY;\n          break;\n        case 2:\n          orientation = GridOrientationType.WorldYZ;\n          break;\n        case 3:\n          orientation = GridOrientationType.WorldXZ;\n          break;\n        case 4:\n          orientation = GridOrientationType.AuxCoord;\n          break;\n      }\n    }\n    await this.run(spacing, ratio, gridsPerRef, orientation);\n    return true;\n  }\n}\nChangeGridSettingsTool.toolId = \"GridSettings\";\n",
      "start": 1693508121255,
      "end": 1693508121435,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/Grid.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { parseArgs } from \"@itwin/frontend-devtools\";\r\nimport { GridOrientationType } from \"@itwin/core-common\";\r\nimport { IModelApp, Tool } from \"@itwin/core-frontend\";\r\n\r\n/** Change grid settings for testing. */\r\nexport class ChangeGridSettingsTool extends Tool {\r\n  public static override toolId = \"GridSettings\";\r\n  public static override get minArgs() { return 0; }\r\n  public static override get maxArgs() { return 4; }\r\n\r\n  public override async run(spacing?: number, ratio?: number, gridsPerRef?: number, orientation?: GridOrientationType): Promise<boolean> {\r\n    const vp = IModelApp.viewManager.selectedView;\r\n    if (undefined === vp)\r\n      return false;\r\n\r\n    if (undefined !== spacing)\r\n      vp.view.details.gridSpacing = { x: spacing, y: spacing };\r\n\r\n    if (undefined !== ratio)\r\n      vp.view.details.gridSpacing = { x: vp.view.details.gridSpacing.x, y: vp.view.details.gridSpacing.x * ratio };\r\n\r\n    if (undefined !== gridsPerRef)\r\n      vp.view.details.gridsPerRef = gridsPerRef;\r\n\r\n    if (undefined !== orientation)\r\n      vp.view.details.gridOrientation = orientation;\r\n\r\n    vp.invalidateScene(); // Needed to clear cached grid decoration...\r\n    return true;\r\n  }\r\n\r\n  /** The keyin accepts the following arguments:\r\n   *  - `spacing=number` Specify x and y grid reference line spacing in meters.\r\n   *  - `ratio=number` Specify y spacing as current x * ratio.\r\n   *  - `gridsPerRef=number` Specify number of grid lines to display per reference line.\r\n   *  - `orientation=0|1|2|3|4` Value for GridOrientationType.\r\n   */\r\n  public override async parseAndRun(...inputArgs: string[]): Promise<boolean> {\r\n    let spacing;\r\n    let ratio;\r\n    let gridsPerRef;\r\n    let orientation;\r\n    const args = parseArgs(inputArgs);\r\n\r\n    const spacingArg = args.getFloat(\"s\");\r\n    if (undefined !== spacingArg)\r\n      spacing = spacingArg;\r\n\r\n    const ratioArg = args.getFloat(\"r\");\r\n    if (undefined !== ratioArg)\r\n      ratio = ratioArg;\r\n\r\n    const gridsPerRefArg = args.getInteger(\"g\");\r\n    if (undefined !== gridsPerRefArg)\r\n      gridsPerRef = gridsPerRefArg;\r\n\r\n    const orientationArg = args.getInteger(\"o\");\r\n    if (undefined !== orientationArg) {\r\n      switch (orientationArg) {\r\n        case 0:\r\n          orientation = GridOrientationType.View;\r\n          break;\r\n        case 1:\r\n          orientation = GridOrientationType.WorldXY;\r\n          break;\r\n        case 2:\r\n          orientation = GridOrientationType.WorldYZ;\r\n          break;\r\n        case 3:\r\n          orientation = GridOrientationType.WorldXZ;\r\n          break;\r\n        case 4:\r\n          orientation = GridOrientationType.AuxCoord;\r\n          break;\r\n      }\r\n    }\r\n\r\n    await this.run(spacing, ratio, gridsPerRef, orientation);\r\n    return true;\r\n  }\r\n}\r\n"
        ],
        "mappings": ";AAKA,SAAS,iBAAiB;AAC1B,SAAS,2BAA2B;AACpC,SAAS,WAAW,YAAY;AAGzB,aAAM,+BAA+B,KAAK;AAAA,EAE/C,WAA2B,UAAU;AAAE,WAAO;AAAA,EAAG;AAAA,EACjD,WAA2B,UAAU;AAAE,WAAO;AAAA,EAAG;AAAA,EAEjD,MAAsB,IAAI,SAAkB,OAAgB,aAAsB,aAAqD;AACrI,UAAM,KAAK,UAAU,YAAY;AACjC,QAAI,WAAc;AAChB,aAAO;AAET,QAAI,WAAc;AAChB,SAAG,KAAK,QAAQ,cAAc,EAAE,GAAG,SAAS,GAAG,QAAQ;AAEzD,QAAI,WAAc;AAChB,SAAG,KAAK,QAAQ,cAAc,EAAE,GAAG,GAAG,KAAK,QAAQ,YAAY,GAAG,GAAG,GAAG,KAAK,QAAQ,YAAY,IAAI,MAAM;AAE7G,QAAI,WAAc;AAChB,SAAG,KAAK,QAAQ,cAAc;AAEhC,QAAI,WAAc;AAChB,SAAG,KAAK,QAAQ,kBAAkB;AAEpC,OAAG,gBAAgB;AACnB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAsB,eAAe,WAAuC;AAC1E,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,UAAM,OAAO,UAAU,SAAS;AAEhC,UAAM,aAAa,KAAK,SAAS,GAAG;AACpC,QAAI,WAAc;AAChB,gBAAU;AAEZ,UAAM,WAAW,KAAK,SAAS,GAAG;AAClC,QAAI,WAAc;AAChB,cAAQ;AAEV,UAAM,iBAAiB,KAAK,WAAW,GAAG;AAC1C,QAAI,WAAc;AAChB,oBAAc;AAEhB,UAAM,iBAAiB,KAAK,WAAW,GAAG;AAC1C,QAAI,WAAc,gBAAgB;AAChC,cAAQ,gBAAgB;AAAA,QACtB,KAAK;AACH,wBAAc,oBAAoB;AAClC;AAAA,QACF,KAAK;AACH,wBAAc,oBAAoB;AAClC;AAAA,QACF,KAAK;AACH,wBAAc,oBAAoB;AAClC;AAAA,QACF,KAAK;AACH,wBAAc,oBAAoB;AAClC;AAAA,QACF,KAAK;AACH,wBAAc,oBAAoB;AAClC;AAAA,MACJ;AAAA,IACF;AAEA,UAAM,KAAK,IAAI,SAAS,OAAO,aAAa,WAAW;AACvD,WAAO;AAAA,EACT;AACF;AA3Ea,uBACY,SAAS;",
        "names": []
      }
    }
  ]
}
