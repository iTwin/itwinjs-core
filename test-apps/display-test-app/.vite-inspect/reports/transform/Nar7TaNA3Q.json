{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/geometry/lib/esm/curve/spiral/DirectHalfCosineSpiralEvaluator.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Curve\n */\nimport { Geometry } from \"../../Geometry\";\nimport { XYCurveEvaluator } from \"./XYCurveEvaluator\";\nimport { SimpleNewton } from \"../../numerics/Newton\";\n/**\n * @internal\n */\nexport class DirectHalfCosineSpiralEvaluator extends XYCurveEvaluator {\n    constructor(length1, radius1) {\n        super();\n        this.nominalLength1 = length1;\n        this.nominalRadius1 = radius1;\n        const pi = Math.PI;\n        this._c1 = 1.0 / (2.0 * pi * pi);\n        this._c2 = 0.25;\n        this._c = 0.0; // TO BE UPDATED BELOW\n        this.updateConstants();\n    }\n    updateConstants() {\n        this._c = this.nominalLength1 * this.nominalLength1 / this.nominalRadius1;\n    }\n    scaleInPlace(scaleFactor) {\n        this.nominalLength1 *= scaleFactor;\n        this.nominalRadius1 *= scaleFactor;\n        this.updateConstants();\n    }\n    /** return a deep copy of the evaluator */\n    clone() { return new DirectHalfCosineSpiralEvaluator(this.nominalLength1, this.nominalRadius1); }\n    /** Member by member matchup ... */\n    isAlmostEqual(other) {\n        if (other instanceof DirectHalfCosineSpiralEvaluator) {\n            return Geometry.isSameCoordinate(this.nominalLength1, other.nominalLength1)\n                && Geometry.isSameCoordinate(this.nominalRadius1, other.nominalRadius1);\n            // remark: c,c1,c2 are computed, need not be tested.\n        }\n        return false;\n    }\n    /** Evaluate X at fractional position. */\n    fractionToX(fraction) { return fraction * this.nominalLength1; }\n    /** Evaluate Y at fractional position. */\n    fractionToY(fraction) {\n        const theta = fraction * Math.PI;\n        return this._c * (this._c2 * fraction * fraction - this._c1 * (1.0 - Math.cos(theta)));\n    }\n    /** Evaluate derivative of X with respect to fraction at fractional position. */\n    fractionToDX(_fraction) { return this.nominalLength1; }\n    /** Evaluate derivative of Y with respect to fraction at fractional position. */\n    fractionToDY(fraction) {\n        const pi = Math.PI;\n        const theta = fraction * pi;\n        return this._c * (2.0 * this._c2 * fraction - this._c1 * pi * Math.sin(theta));\n    }\n    /** Evaluate second derivative of X with respect to fraction at fractional position. */\n    fractionToDDX(_fraction) { return 0.0; }\n    /** Evaluate third derivative of Y with respect to fraction at fractional position. */\n    fractionToDDY(fraction) {\n        const pi = Math.PI;\n        const theta = fraction * pi;\n        return this._c * (2.0 * this._c2 - this._c1 * pi * pi * Math.cos(theta));\n    }\n    /** Evaluate second derivative of X with respect to fraction at fractional position. */\n    fractionToD3X(_fraction) { return 0.0; }\n    /** Evaluate third derivative of Y with respect to fraction at fractional position. */\n    fractionToD3Y(fraction) {\n        const pi = Math.PI;\n        const theta = fraction * pi;\n        return this._c * this._c1 * pi * pi * pi * Math.sin(theta);\n    }\n    /** Return the magnitude of the first vector at fractional coordinate. */\n    fractionToTangentMagnitude(fraction) {\n        return Geometry.hypotenuseXY(this.fractionToDX(fraction), this.fractionToDY(fraction));\n    }\n    /** Invert the fractionToX function for given X. */\n    xToFraction(x) {\n        const fraction0 = x / this.nominalLength1;\n        const fraction1 = SimpleNewton.runNewton1D(fraction0, (f) => (this.fractionToX(f) - x), (f) => this.fractionToDX(f));\n        if (fraction1 === undefined)\n            return undefined;\n        return fraction1;\n    }\n}\n//# sourceMappingURL=DirectHalfCosineSpiralEvaluator.js.map",
      "start": 1693508125384,
      "end": 1693508125532,
      "sourcemaps": null
    }
  ]
}
