{
  "resolvedId": "D:/hub2023A/itwinjs-core/common/temp/node_modules/.pnpm/@itwin+browser-authorization@1.0.1_67wltvhdskk2oee2c3z2o4tfly/node_modules/@itwin/browser-authorization/lib/esm/Logger.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n/** @packageDocumentation\r\n * @module Logging\r\n */\r\nimport { Logger, LogLevel } from \"@itwin/core-bentley\";\r\nimport { Log as OidcClientLog } from \"oidc-client-ts\";\r\nimport { BrowserAuthorizationLoggerCategory } from \"./LoggerCategory\";\r\n/**\r\n * Utility to forward oidc-client logs to the Bentley logger\r\n * Because the logger used by the oidc-client library is static, we can't tie specific UserManager instances to different logging categories.\r\n * Thus, the best we can do is tie all logs originating from the library to a single logging category (derived from the name of this class).\r\n * @beta\r\n */\r\nexport class BrowserAuthorizationLogger {\r\n    constructor() {\r\n    }\r\n    debug(message, ...optionalParams) {\r\n        Logger.logTrace(BrowserAuthorizationLoggerCategory.Authorization, message, () => optionalParams);\r\n    }\r\n    info(message, ...optionalParams) {\r\n        Logger.logInfo(BrowserAuthorizationLoggerCategory.Authorization, message, () => optionalParams);\r\n    }\r\n    warn(message, ...optionalParams) {\r\n        Logger.logWarning(BrowserAuthorizationLoggerCategory.Authorization, message, () => optionalParams);\r\n    }\r\n    error(message, ...optionalParams) {\r\n        Logger.logError(BrowserAuthorizationLoggerCategory.Authorization, message, () => optionalParams);\r\n    }\r\n    static getLogLevel(loggerCategory) {\r\n        const logLevel = Logger.getLevel(loggerCategory);\r\n        switch (logLevel) {\r\n            case LogLevel.Error:\r\n                return OidcClientLog.ERROR;\r\n            case LogLevel.Warning:\r\n                return OidcClientLog.WARN;\r\n            case LogLevel.Info:\r\n                return OidcClientLog.INFO;\r\n            case LogLevel.Trace:\r\n                return OidcClientLog.DEBUG;\r\n            case LogLevel.None:\r\n                return OidcClientLog.NONE;\r\n            default:\r\n                return OidcClientLog.NONE;\r\n        }\r\n    }\r\n    /** Initializes forwarding of OidcClient logs to the Bentley Logger */\r\n    static initializeLogger() {\r\n        const logLevel = BrowserAuthorizationLogger.getLogLevel(BrowserAuthorizationLoggerCategory.Authorization);\r\n        if (!BrowserAuthorizationLogger.initialized) {\r\n            OidcClientLog.setLogger(new BrowserAuthorizationLogger());\r\n        }\r\n        OidcClientLog.setLevel(logLevel);\r\n        BrowserAuthorizationLogger.initialized = true;\r\n    }\r\n}\r\nBrowserAuthorizationLogger.initialized = false;\r\n//# sourceMappingURL=Logger.js.map",
      "start": 1693508124930,
      "end": 1693508125033,
      "sourcemaps": null
    }
  ]
}
