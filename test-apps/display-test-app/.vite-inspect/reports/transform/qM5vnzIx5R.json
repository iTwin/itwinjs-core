{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend-devtools/lib/esm/tools/SourceAspectIdTools.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tools\n */\nimport { BentleyError } from \"@itwin/core-bentley\";\nimport { QueryRowFormat } from \"@itwin/core-common\";\nimport { IModelApp, NotifyMessageDetails, OutputMessagePriority, Tool } from \"@itwin/core-frontend\";\nimport { copyStringToClipboard } from \"../ClipboardUtilities\";\nimport { parseArgs } from \"./parseArgs\";\n/** Base class for a tool that can convert between source aspect Ids and element Ids.\n * A \"source aspect Id\" is a string that identifies an object (such as an element) in the source document from which the iModel originated.\n * For example, if the iModel was produced by the MicroStation bridge, the source aspect Id is usually a V8 element Id.\n * @beta\n */\nexport class SourceAspectIdTool extends Tool {\n    static get minArgs() { return 1; }\n    static get maxArgs() { return 2; }\n    async run(idToQuery, copyToClipboard) {\n        if (typeof idToQuery === \"string\")\n            await this.doQuery(idToQuery, true === copyToClipboard);\n        return true;\n    }\n    async parseAndRun(...keyinArgs) {\n        const args = parseArgs(keyinArgs);\n        return this.run(args.get(\"i\"), args.getBoolean(\"c\"));\n    }\n    async doQuery(queryId, copyToClipboard) {\n        const imodel = IModelApp.viewManager.selectedView?.iModel;\n        if (undefined === imodel)\n            return;\n        let resultId;\n        try {\n            for await (const row of imodel.createQueryReader(this.getECSql(queryId), undefined, { rowFormat: QueryRowFormat.UseJsPropertyNames, limit: { count: 1 } }))\n                resultId = row.resultId;\n        }\n        catch (ex) {\n            resultId = BentleyError.getErrorMessage(ex);\n        }\n        if (typeof resultId !== \"string\")\n            resultId = \"NOT FOUND\";\n        if (copyToClipboard)\n            copyStringToClipboard(resultId);\n        const message = `${queryId} => ${resultId}`;\n        IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Info, message));\n    }\n}\n/** Given a source aspect Id, output the Id of the corresponding element in the iModel.\n * A \"source aspect Id\" is a string that identifies an object (such as an element) in the source document from which the iModel originated.\n * For example, if the iModel was produced by the MicroStation bridge, the source aspect Id is usually a V8 element Id.\n * Arguments:\n *  - `id=elementId` where `elementId` is the numeric Id of the element of interest (e.g., `0x13a6c`; decimal notation is also permitted).\n *  - `copy=0|1` where `1` indicates the source aspect Id should be copied to the clipboard.\n * The command outputs to the IModelApp.notifications the corresponding source aspect Id, or \"NOT FOUND\".\n * @beta\n */\nclass SourceAspectIdFromElementIdTool extends SourceAspectIdTool {\n    getECSql(queryId) {\n        return `SELECT Identifier as resultId FROM BisCore.ExternalSourceAspect WHERE Element.Id=${queryId} AND [Kind]='Element'`;\n    }\n}\nSourceAspectIdFromElementIdTool.toolId = \"SourceAspectIdFromElementId\";\nexport { SourceAspectIdFromElementIdTool };\n/** Given the Id of an element in the iModel, output the source aspect Id of the object in the source document from which the element originated.\n * A \"source aspect Id\" is a string that identifies an object (such as an element) in the source document from which the iModel originated.\n * For example, if the iModel was produced by the MicroStation bridge, the source aspect Id is usually a V8 element Id.\n * Arguments:\n *  - `id=sourceAspectId` where `sourceAspectId` is the string identifier of the object of interest.\n *  - `copy=0|1` where `1` indicates the element Id should be copied to the clipboard.\n * The command outputs to the IModelApp.notifications the corresponding element Id, or \"NOT FOUND\".\n * @beta\n */\nclass ElementIdFromSourceAspectIdTool extends SourceAspectIdTool {\n    getECSql(queryId) {\n        return `SELECT Element.Id as resultId FROM BisCore.ExternalSourceAspect WHERE Identifier='${queryId}' AND [Kind]='Element'`;\n    }\n}\nElementIdFromSourceAspectIdTool.toolId = \"ElementIdFromSourceAspectId\";\nexport { ElementIdFromSourceAspectIdTool };\n//# sourceMappingURL=SourceAspectIdTools.js.map",
      "start": 1693508122744,
      "end": 1693508122845,
      "sourcemaps": null
    }
  ]
}
