{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend-devtools/lib/esm/tools/ProjectExtents.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tools\n */\nimport { ColorDef, LinePixels } from \"@itwin/core-common\";\nimport { GraphicType, IModelApp, Tool } from \"@itwin/core-frontend\";\nimport { parseToggle } from \"./parseToggle\";\n/** @beta */\nexport class ProjectExtentsDecoration {\n    constructor(iModel) {\n        /** This will allow the render system to cache and reuse the decorations created by this decorator's decorate() method. */\n        this.useCachedDecorations = true;\n        this._extents = iModel.projectExtents;\n        this.updateDecorationListener(true);\n    }\n    stop() { this.updateDecorationListener(false); }\n    updateDecorationListener(add) {\n        if (this._removeDecorationListener) {\n            if (!add) {\n                this._removeDecorationListener();\n                this._removeDecorationListener = undefined;\n            }\n        }\n        else if (add) {\n            if (!this._removeDecorationListener)\n                this._removeDecorationListener = IModelApp.viewManager.addDecorator(this);\n        }\n    }\n    static get isActive() {\n        return undefined !== ProjectExtentsDecoration._decorator;\n    }\n    decorate(context) {\n        const vp = context.viewport;\n        if (!vp.view.isSpatialView())\n            return;\n        const builderAccVis = context.createGraphicBuilder(GraphicType.WorldDecoration);\n        const builderAccHid = context.createGraphicBuilder(GraphicType.WorldOverlay);\n        const colorAccVis = ColorDef.white.adjustedForContrast(context.viewport.view.backgroundColor);\n        const colorAccHid = colorAccVis.withAlpha(100);\n        builderAccVis.setSymbology(colorAccVis, ColorDef.black, 3);\n        builderAccHid.setSymbology(colorAccHid, ColorDef.black, 1, LinePixels.Code2);\n        builderAccVis.addRangeBox(this._extents);\n        builderAccHid.addRangeBox(this._extents);\n        context.addDecorationFromBuilder(builderAccVis);\n        context.addDecorationFromBuilder(builderAccHid);\n    }\n    // Returns true if extents become enabled.\n    static toggle(imodel, enabled) {\n        if (undefined !== enabled) {\n            const alreadyEnabled = undefined !== ProjectExtentsDecoration._decorator;\n            if (enabled === alreadyEnabled)\n                return alreadyEnabled;\n        }\n        if (undefined === ProjectExtentsDecoration._decorator) {\n            ProjectExtentsDecoration._decorator = new ProjectExtentsDecoration(imodel);\n            return true;\n        }\n        else {\n            ProjectExtentsDecoration._decorator.stop();\n            ProjectExtentsDecoration._decorator = undefined;\n            return false;\n        }\n    }\n}\n/** Enable or disable the project extents decoration. This decoration draws a box coinciding with the iModel's project extents.\n * @param imodel The iModel from which to obtain the extents.\n * @param enable If undefined, the current enabled state of the decoration will be inverted; otherwise it will be enabled if true, or disabled if false.\n * @returns true if the extents are now ON, false if they are now OFF.\n * @beta\n */\nexport function toggleProjectExtents(imodel, enabled) {\n    return ProjectExtentsDecoration.toggle(imodel, enabled);\n}\n/** Enable or disable project extents decoration.\n * The key-in takes at most 1 argument (case-insensitive):\n *  - \"ON\" => enable project extents\n *  - \"OFF\" => disable project extents\n *  - \"TOGGLE\" or omitted => toggle project extents\n * @see [toggleProjectExtents]\n * @beta\n */\nclass ToggleProjectExtentsTool extends Tool {\n    static get minArgs() { return 0; }\n    static get maxArgs() { return 1; }\n    async run(enable) {\n        const vp = IModelApp.viewManager.selectedView;\n        if (undefined !== vp && vp.view.isSpatialView()) {\n            const iModel = vp.iModel;\n            if (toggleProjectExtents(iModel, enable))\n                vp.onChangeView.addOnce(() => toggleProjectExtents(iModel, false));\n        }\n        return true;\n    }\n    async parseAndRun(...args) {\n        const enable = parseToggle(args[0]);\n        if (typeof enable !== \"string\")\n            await this.run(enable);\n        return true;\n    }\n}\nToggleProjectExtentsTool.toolId = \"ToggleProjectExtents\";\nexport { ToggleProjectExtentsTool };\n//# sourceMappingURL=ProjectExtents.js.map",
      "start": 1693508122700,
      "end": 1693508122777,
      "sourcemaps": null
    }
  ]
}
