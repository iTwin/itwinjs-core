{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/tile/map/MapCartoRectangle.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tiles\n */\nimport { Angle, Point2d, Range2d } from \"@itwin/core-geometry\";\nimport { Cartographic } from \"@itwin/core-common\";\nconst scratchMercatorFractionRange = Range2d.createNull();\nconst scratchPoint2d = Point2d.createZero();\n/** A specialization of [Range2d]($core-geometry) representing a [Cartographic]($common) region on the surface of the Earth,\n * used by [[MapTile]]s.\n * The `x` components of the `low` and `high` points refer to the western and eastern longitudes, respectively.\n * The `y` components of the `low` and `high` points refer to the southern and northern latitudes, respectively.\n * Longitudes are stored in radians in the range [-pi, pi].\n * Latitudes are stored in radians in the range [-pi/2, pi/2].\n * @public\n */\nexport class MapCartoRectangle extends Range2d {\n    /** Construct a new rectangle with angles specified in radians.\n     * @param west The western longitude in radians, in [-pi, pi].\n     * @param south The southern latitude in radians, in [-pi/2, pi/2].\n     * @param east The eastern latitude in radians, in [-pi, pi].\n     * @param north The northern latitude in radians, in [-pi/2, pi/2].\n     * @note If `north` is less than `south`, they will be swapped.\n     * @see [[fromRadians]], [[fromDegrees]], [[createZero]], and [[createMaximum]] to construct a new rectangle.\n     */\n    constructor(west, south, east, north) {\n        super(west, Math.min(south, north), east, Math.max(south, north));\n    }\n    /** Create a rectangle with all angles set to zero. */\n    static createZero() {\n        return new MapCartoRectangle(0, 0, 0, 0);\n    }\n    /** Create a rectangle encompassing all points on the surface of the Earth. */\n    static createMaximum() {\n        return new MapCartoRectangle(-Angle.piRadians, -Angle.piOver2Radians, Angle.piRadians, Angle.piOver2Radians);\n    }\n    /** Create a new rectangle with angles specified in radians.\n     * @param west The western longitude in radians, in [-pi, pi].\n     * @param south The southern latitude in radians, in [-pi/2, pi/2].\n     * @param east The eastern latitude in radians, in [-pi, pi].\n     * @param north The northern latitude in radians, in [-pi/2, pi/2].\n     * @param result An optional preallocated rectangle to hold the result.\n     * @note If `north` is less than `south`, they will be swapped.\n     */\n    static fromRadians(west, south, east, north, result) {\n        result = result ?? MapCartoRectangle.createZero();\n        result.setRadians(west, south, east, north);\n        return result;\n    }\n    /** Create a new rectangle with angles specified in degrees.\n     * @param west The western longitude in degrees, in [-180, 180].\n     * @param south The southern latitude in degrees, in [-90, 90].\n     * @param east The eastern latitude in degrees, in [-180, 180].\n     * @param north The northern latitude in degrees, in [-90, 90].\n     * @param result An optional preallocated rectangle to hold the result.\n     * @note If `north` is less than `south`, they will be swapped.\n     */\n    static fromDegrees(west, south, east, north, result) {\n        const mult = Angle.radiansPerDegree;\n        return MapCartoRectangle.fromRadians(west * mult, south * mult, east * mult, north * mult, result);\n    }\n    /** The western longitude in radians. */\n    get west() { return this.low.x; }\n    set west(x) { this.low.x = x; }\n    /** The southern latitude in radians. */\n    get south() { return this.low.y; }\n    set south(y) { this.low.y = y; }\n    /** The eastern longitude in radians. */\n    get east() { return this.high.x; }\n    set east(x) { this.high.x = x; }\n    /** The northern latitude in radians. */\n    get north() { return this.high.y; }\n    set north(y) { this.high.y = y; }\n    /** A non-localized string representation of this rectangle, for debugging purposes. */\n    get latLongString() {\n        return `Latitude: ${this.low.y * Angle.degreesPerRadian} - ${this.high.y * Angle.degreesPerRadian} Longitude: ${this.low.x * Angle.degreesPerRadian} - ${this.high.x * Angle.degreesPerRadian}`;\n    }\n    /** A pair of [[Cartographic]]s representing the same area as this rectangle. */\n    get globalLocationArea() {\n        return {\n            southwest: Cartographic.fromRadians({ longitude: this.west, latitude: this.south }),\n            northeast: Cartographic.fromRadians({ longitude: this.east, latitude: this.north }),\n        };\n    }\n    /** The cartographic center of this rectangle. */\n    get cartoCenter() {\n        return Cartographic.fromRadians({\n            longitude: (this.low.x + this.high.x) / 2,\n            latitude: (this.low.y + this.high.y) / 2,\n        });\n    }\n    /** The [[globalLocationArea]] and [[cartoCenter]] of this rectangle. */\n    get globalLocation() {\n        return {\n            center: this.cartoCenter,\n            area: this.globalLocationArea,\n        };\n    }\n    /** Reinitialize this rectangle using angles specified in radians.\n     * @param west The western longitude in radians, in [-pi, pi].\n     * @param south The southern latitude in radians, in [-pi/2, pi/2].\n     * @param east The eastern latitude in radians, in [-pi, pi].\n     * @param north The northern latitude in radians, in [-pi/2, pi/2].\n     * @note If `north` is less than `south`, they will be swapped.\n     */\n    setRadians(west = 0, south = 0, east = 0, north = 0) {\n        this.west = west;\n        this.south = south;\n        this.east = east;\n        this.north = north;\n    }\n    /** Returns true if the specified cartographic location is contained within this rectangle's area, ignoring elevation. */\n    containsCartographic(carto) {\n        return this.containsXY(carto.longitude, carto.latitude);\n    }\n    /** Returns the position at the center of this rectangle, at an elevation of zero.\n     * @param result An optional preallocated Cartographic to store the result.\n     * @returns the center of this rectangle.\n     */\n    getCenter(result) {\n        return Cartographic.fromRadians({\n            longitude: (this.west + this.east) / 2,\n            latitude: (this.north + this.south) / 2,\n            height: 0,\n        }, result);\n    }\n    /** Computes fractional coordinates of the specified position within this rectangle's area.\n     * @see [Range2d.worldToLocal]($core-geometry)\n     */\n    fractionFromCartographic(carto) {\n        const pt = Point2d.create(carto.longitude, carto.latitude, scratchPoint2d);\n        return this.worldToLocal(pt);\n    }\n    /** @internal */\n    getTileFractionRange(tilingScheme) {\n        scratchMercatorFractionRange.low.x = tilingScheme.longitudeToXFraction(this.low.x);\n        scratchMercatorFractionRange.high.x = tilingScheme.longitudeToXFraction(this.high.x);\n        scratchMercatorFractionRange.low.y = tilingScheme.latitudeToYFraction(this.low.y);\n        scratchMercatorFractionRange.high.y = tilingScheme.latitudeToYFraction(this.high.y);\n        return scratchMercatorFractionRange;\n    }\n}\n//# sourceMappingURL=MapCartoRectangle.js.map",
      "start": 1693508121328,
      "end": 1693508121644,
      "sourcemaps": null
    }
  ]
}
