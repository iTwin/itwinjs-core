{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/DisplayScale.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { Matrix3d, Point3d, Transform } from \"@itwin/core-geometry\";\r\nimport { IModelApp, ModelDisplayTransformProvider, Tool } from \"@itwin/core-frontend\";\r\nimport { parseArgs } from \"@itwin/frontend-devtools\";\r\n\r\nclass DisplayScaleTransformProvider implements ModelDisplayTransformProvider {\r\n  public constructor(private readonly _models: Set<string>, private readonly _scaleTransform: Transform) { }\r\n\r\n  public getModelDisplayTransform(modelId: string): Transform | undefined {\r\n    return this._models.has(modelId) ? this._scaleTransform.clone() : undefined;\r\n  }\r\n\r\n  public get transform(): Transform { return this._scaleTransform.clone(); }\r\n}\r\n\r\n/** Apply a display transform to all currently displayed models. */\r\nexport class ApplyModelDisplayScaleTool extends Tool {\r\n  public static override toolId = \"ApplyModelDisplayScale\";\r\n  public static override get minArgs() { return 0; }\r\n  public static override get maxArgs() { return 3; }\r\n\r\n  public override async run(scale: Point3d): Promise<boolean> {\r\n    const vp = IModelApp.viewManager.selectedView;\r\n    if (!vp)\r\n      return false;\r\n\r\n    const f = vp.getWorldFrustum();\r\n    // If there was already a transform then we need to undo it for the frustum.\r\n    if (undefined !== vp.view.modelDisplayTransformProvider && vp.view.modelDisplayTransformProvider instanceof DisplayScaleTransformProvider) {\r\n      const t = vp.view.modelDisplayTransformProvider.transform;\r\n      const sx = t.matrix.getColumn(0).magnitude();\r\n      const sy = t.matrix.getColumn(1).magnitude();\r\n      const sz = t.matrix.getColumn(2).magnitude();\r\n      const inverseMax = 1.0 / Math.max(sx, sy, sz);\r\n      const scaleFrustumInvTf = Transform.createRefs(Point3d.createZero(), Matrix3d.createScale(inverseMax, inverseMax, inverseMax));\r\n      f.multiply(scaleFrustumInvTf);\r\n    }\r\n\r\n    let scl;\r\n    let maxScale = 1.0;\r\n    if (scale.isAlmostEqual(Point3d.create(1.0, 1.0, 1.0))) {\r\n      if (undefined !== vp.view.modelDisplayTransformProvider) {\r\n        vp.view.modelDisplayTransformProvider = undefined;\r\n      } else {\r\n        return false;\r\n      }\r\n      scl = Matrix3d.createIdentity();\r\n    } else {\r\n      scl = Matrix3d.createScale(scale.x, scale.y, scale.z);\r\n      maxScale = Math.max(scale.y, scale.y, scale.z);\r\n    }\r\n\r\n    const models = new Set<string>();\r\n    vp.view.forEachModel((model) => models.add(model.id));\r\n\r\n    const sclTf = Transform.createRefs(Point3d.createZero(), scl);\r\n    const tp = new DisplayScaleTransformProvider(models, sclTf);\r\n    vp.setModelDisplayTransformProvider(tp);\r\n\r\n    // Scale frustum uniformly using the largest of the scale values.\r\n    const scaleFrustumTf = Transform.createRefs(Point3d.createZero(), Matrix3d.createScale(maxScale, maxScale, maxScale));\r\n    f.multiply(scaleFrustumTf);\r\n    vp.setupViewFromFrustum(f);\r\n\r\n    return true;\r\n  }\r\n\r\n  public override async parseAndRun(...input: string[]): Promise<boolean> {\r\n    const args = parseArgs(input);\r\n    const scale = new Point3d(args.getFloat(\"x\") ?? 1.0, args.getFloat(\"y\") ?? 1.0, args.getFloat(\"z\") ?? 1.0);\r\n    return this.run(scale);\r\n  }\r\n}\r\n",
      "start": 1693508121173,
      "end": 1693508121253,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { Matrix3d, Point3d, Transform } from \"@itwin/core-geometry\";\nimport { IModelApp, Tool } from \"@itwin/core-frontend\";\nimport { parseArgs } from \"@itwin/frontend-devtools\";\nclass DisplayScaleTransformProvider {\n  constructor(_models, _scaleTransform) {\n    this._models = _models;\n    this._scaleTransform = _scaleTransform;\n  }\n  getModelDisplayTransform(modelId) {\n    return this._models.has(modelId) ? this._scaleTransform.clone() : void 0;\n  }\n  get transform() {\n    return this._scaleTransform.clone();\n  }\n}\nexport class ApplyModelDisplayScaleTool extends Tool {\n  static get minArgs() {\n    return 0;\n  }\n  static get maxArgs() {\n    return 3;\n  }\n  async run(scale) {\n    const vp = IModelApp.viewManager.selectedView;\n    if (!vp)\n      return false;\n    const f = vp.getWorldFrustum();\n    if (void 0 !== vp.view.modelDisplayTransformProvider && vp.view.modelDisplayTransformProvider instanceof DisplayScaleTransformProvider) {\n      const t = vp.view.modelDisplayTransformProvider.transform;\n      const sx = t.matrix.getColumn(0).magnitude();\n      const sy = t.matrix.getColumn(1).magnitude();\n      const sz = t.matrix.getColumn(2).magnitude();\n      const inverseMax = 1 / Math.max(sx, sy, sz);\n      const scaleFrustumInvTf = Transform.createRefs(Point3d.createZero(), Matrix3d.createScale(inverseMax, inverseMax, inverseMax));\n      f.multiply(scaleFrustumInvTf);\n    }\n    let scl;\n    let maxScale = 1;\n    if (scale.isAlmostEqual(Point3d.create(1, 1, 1))) {\n      if (void 0 !== vp.view.modelDisplayTransformProvider) {\n        vp.view.modelDisplayTransformProvider = void 0;\n      } else {\n        return false;\n      }\n      scl = Matrix3d.createIdentity();\n    } else {\n      scl = Matrix3d.createScale(scale.x, scale.y, scale.z);\n      maxScale = Math.max(scale.y, scale.y, scale.z);\n    }\n    const models = /* @__PURE__ */ new Set();\n    vp.view.forEachModel((model) => models.add(model.id));\n    const sclTf = Transform.createRefs(Point3d.createZero(), scl);\n    const tp = new DisplayScaleTransformProvider(models, sclTf);\n    vp.setModelDisplayTransformProvider(tp);\n    const scaleFrustumTf = Transform.createRefs(Point3d.createZero(), Matrix3d.createScale(maxScale, maxScale, maxScale));\n    f.multiply(scaleFrustumTf);\n    vp.setupViewFromFrustum(f);\n    return true;\n  }\n  async parseAndRun(...input) {\n    const args = parseArgs(input);\n    const scale = new Point3d(args.getFloat(\"x\") ?? 1, args.getFloat(\"y\") ?? 1, args.getFloat(\"z\") ?? 1);\n    return this.run(scale);\n  }\n}\nApplyModelDisplayScaleTool.toolId = \"ApplyModelDisplayScale\";\n",
      "start": 1693508121253,
      "end": 1693508121435,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/DisplayScale.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { Matrix3d, Point3d, Transform } from \"@itwin/core-geometry\";\r\nimport { IModelApp, ModelDisplayTransformProvider, Tool } from \"@itwin/core-frontend\";\r\nimport { parseArgs } from \"@itwin/frontend-devtools\";\r\n\r\nclass DisplayScaleTransformProvider implements ModelDisplayTransformProvider {\r\n  public constructor(private readonly _models: Set<string>, private readonly _scaleTransform: Transform) { }\r\n\r\n  public getModelDisplayTransform(modelId: string): Transform | undefined {\r\n    return this._models.has(modelId) ? this._scaleTransform.clone() : undefined;\r\n  }\r\n\r\n  public get transform(): Transform { return this._scaleTransform.clone(); }\r\n}\r\n\r\n/** Apply a display transform to all currently displayed models. */\r\nexport class ApplyModelDisplayScaleTool extends Tool {\r\n  public static override toolId = \"ApplyModelDisplayScale\";\r\n  public static override get minArgs() { return 0; }\r\n  public static override get maxArgs() { return 3; }\r\n\r\n  public override async run(scale: Point3d): Promise<boolean> {\r\n    const vp = IModelApp.viewManager.selectedView;\r\n    if (!vp)\r\n      return false;\r\n\r\n    const f = vp.getWorldFrustum();\r\n    // If there was already a transform then we need to undo it for the frustum.\r\n    if (undefined !== vp.view.modelDisplayTransformProvider && vp.view.modelDisplayTransformProvider instanceof DisplayScaleTransformProvider) {\r\n      const t = vp.view.modelDisplayTransformProvider.transform;\r\n      const sx = t.matrix.getColumn(0).magnitude();\r\n      const sy = t.matrix.getColumn(1).magnitude();\r\n      const sz = t.matrix.getColumn(2).magnitude();\r\n      const inverseMax = 1.0 / Math.max(sx, sy, sz);\r\n      const scaleFrustumInvTf = Transform.createRefs(Point3d.createZero(), Matrix3d.createScale(inverseMax, inverseMax, inverseMax));\r\n      f.multiply(scaleFrustumInvTf);\r\n    }\r\n\r\n    let scl;\r\n    let maxScale = 1.0;\r\n    if (scale.isAlmostEqual(Point3d.create(1.0, 1.0, 1.0))) {\r\n      if (undefined !== vp.view.modelDisplayTransformProvider) {\r\n        vp.view.modelDisplayTransformProvider = undefined;\r\n      } else {\r\n        return false;\r\n      }\r\n      scl = Matrix3d.createIdentity();\r\n    } else {\r\n      scl = Matrix3d.createScale(scale.x, scale.y, scale.z);\r\n      maxScale = Math.max(scale.y, scale.y, scale.z);\r\n    }\r\n\r\n    const models = new Set<string>();\r\n    vp.view.forEachModel((model) => models.add(model.id));\r\n\r\n    const sclTf = Transform.createRefs(Point3d.createZero(), scl);\r\n    const tp = new DisplayScaleTransformProvider(models, sclTf);\r\n    vp.setModelDisplayTransformProvider(tp);\r\n\r\n    // Scale frustum uniformly using the largest of the scale values.\r\n    const scaleFrustumTf = Transform.createRefs(Point3d.createZero(), Matrix3d.createScale(maxScale, maxScale, maxScale));\r\n    f.multiply(scaleFrustumTf);\r\n    vp.setupViewFromFrustum(f);\r\n\r\n    return true;\r\n  }\r\n\r\n  public override async parseAndRun(...input: string[]): Promise<boolean> {\r\n    const args = parseArgs(input);\r\n    const scale = new Point3d(args.getFloat(\"x\") ?? 1.0, args.getFloat(\"y\") ?? 1.0, args.getFloat(\"z\") ?? 1.0);\r\n    return this.run(scale);\r\n  }\r\n}\r\n"
        ],
        "mappings": ";AAKA,SAAS,UAAU,SAAS,iBAAiB;AAC7C,SAAS,WAA0C,YAAY;AAC/D,SAAS,iBAAiB;AAE1B,MAAM,8BAAuE;AAAA,EACpE,YAA6B,SAAuC,iBAA4B;AAAnE;AAAuC;AAAA,EAA8B;AAAA,EAElG,yBAAyB,SAAwC;AACtE,WAAO,KAAK,QAAQ,IAAI,OAAO,IAAI,KAAK,gBAAgB,MAAM,IAAI;AAAA,EACpE;AAAA,EAEA,IAAW,YAAuB;AAAE,WAAO,KAAK,gBAAgB,MAAM;AAAA,EAAG;AAC3E;AAGO,aAAM,mCAAmC,KAAK;AAAA,EAEnD,WAA2B,UAAU;AAAE,WAAO;AAAA,EAAG;AAAA,EACjD,WAA2B,UAAU;AAAE,WAAO;AAAA,EAAG;AAAA,EAEjD,MAAsB,IAAI,OAAkC;AAC1D,UAAM,KAAK,UAAU,YAAY;AACjC,QAAI,CAAC;AACH,aAAO;AAET,UAAM,IAAI,GAAG,gBAAgB;AAE7B,QAAI,WAAc,GAAG,KAAK,iCAAiC,GAAG,KAAK,yCAAyC,+BAA+B;AACzI,YAAM,IAAI,GAAG,KAAK,8BAA8B;AAChD,YAAM,KAAK,EAAE,OAAO,UAAU,CAAC,EAAE,UAAU;AAC3C,YAAM,KAAK,EAAE,OAAO,UAAU,CAAC,EAAE,UAAU;AAC3C,YAAM,KAAK,EAAE,OAAO,UAAU,CAAC,EAAE,UAAU;AAC3C,YAAM,aAAa,IAAM,KAAK,IAAI,IAAI,IAAI,EAAE;AAC5C,YAAM,oBAAoB,UAAU,WAAW,QAAQ,WAAW,GAAG,SAAS,YAAY,YAAY,YAAY,UAAU,CAAC;AAC7H,QAAE,SAAS,iBAAiB;AAAA,IAC9B;AAEA,QAAI;AACJ,QAAI,WAAW;AACf,QAAI,MAAM,cAAc,QAAQ,OAAO,GAAK,GAAK,CAAG,CAAC,GAAG;AACtD,UAAI,WAAc,GAAG,KAAK,+BAA+B;AACvD,WAAG,KAAK,gCAAgC;AAAA,MAC1C,OAAO;AACL,eAAO;AAAA,MACT;AACA,YAAM,SAAS,eAAe;AAAA,IAChC,OAAO;AACL,YAAM,SAAS,YAAY,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC;AACpD,iBAAW,KAAK,IAAI,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC;AAAA,IAC/C;AAEA,UAAM,SAAS,oBAAI,IAAY;AAC/B,OAAG,KAAK,aAAa,CAAC,UAAU,OAAO,IAAI,MAAM,EAAE,CAAC;AAEpD,UAAM,QAAQ,UAAU,WAAW,QAAQ,WAAW,GAAG,GAAG;AAC5D,UAAM,KAAK,IAAI,8BAA8B,QAAQ,KAAK;AAC1D,OAAG,iCAAiC,EAAE;AAGtC,UAAM,iBAAiB,UAAU,WAAW,QAAQ,WAAW,GAAG,SAAS,YAAY,UAAU,UAAU,QAAQ,CAAC;AACpH,MAAE,SAAS,cAAc;AACzB,OAAG,qBAAqB,CAAC;AAEzB,WAAO;AAAA,EACT;AAAA,EAEA,MAAsB,eAAe,OAAmC;AACtE,UAAM,OAAO,UAAU,KAAK;AAC5B,UAAM,QAAQ,IAAI,QAAQ,KAAK,SAAS,GAAG,KAAK,GAAK,KAAK,SAAS,GAAG,KAAK,GAAK,KAAK,SAAS,GAAG,KAAK,CAAG;AACzG,WAAO,KAAK,IAAI,KAAK;AAAA,EACvB;AACF;AAxDa,2BACY,SAAS;",
        "names": []
      }
    }
  ]
}
