{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend-devtools/lib/esm/tools/SavedViews.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tools\n */\nimport { BentleyError } from \"@itwin/core-bentley\";\nimport { IModelApp, NotifyMessageDetails, OutputMessagePriority, Tool, } from \"@itwin/core-frontend\";\nimport { copyStringToClipboard } from \"../ClipboardUtilities\";\nimport { parseArgs } from \"./parseArgs\";\n/** Serialize a ViewState to JSON. The returned JSON can later be passed to [deserializeViewState] to reinstantiate the ViewState.\n * @beta\n */\nexport function serializeViewState(view) {\n    return view.toProps();\n}\n/** Instantiate a ViewState serialized by [serializeViewState].\n * @beta\n */\nexport async function deserializeViewState(props, iModel) {\n    const ctor = await iModel.findClassFor(props.viewDefinitionProps.classFullName, undefined);\n    if (undefined === ctor)\n        throw new Error(\"Class not found\");\n    const view = ctor.createFromProps(props, iModel);\n    if (undefined === view)\n        throw new Error(\"Failed to construct ViewState\");\n    await view.load();\n    return view;\n}\n/** Copies a JSON representation of the active viewport's view to the clipboard.\n *  * Arguments:\n *  * `quote`: format the JSON so it can be parsed directly by [ApplyViewTool].\n * @beta\n */\nclass SaveViewTool extends Tool {\n    constructor() {\n        super(...arguments);\n        this._quote = false;\n    }\n    static get minArgs() { return 0; }\n    static get maxArgs() { return 1; }\n    parse(inputArgs) {\n        const args = parseArgs(inputArgs);\n        function getArg(name) {\n            return args.getBoolean(name) ? true : undefined;\n        }\n        this._quote = true === getArg(\"q\");\n        return true;\n    }\n    async parseAndRun(...args) {\n        if (this.parse(args))\n            return this.run();\n        else\n            return false;\n    }\n    async run() {\n        const vp = IModelApp.viewManager.selectedView;\n        if (undefined === vp) {\n            IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Error, \"No viewport\"));\n            return true;\n        }\n        try {\n            let json = JSON.stringify(serializeViewState(vp.view));\n            if (this._quote)\n                json = `\"${json.replace(/\"/g, '\"\"')}\"`;\n            copyStringToClipboard(json);\n            IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Info, \"JSON copied to clipboard\"));\n        }\n        catch (err) {\n            IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Error, BentleyError.getErrorMessage(err) || \"An unknown error occurred.\"));\n        }\n        return true;\n    }\n}\nSaveViewTool.toolId = \"SaveView\";\nexport { SaveViewTool };\n/** Given a string containing a JSON representation of a ViewState, applies that ViewState to the active viewport.\n * The JSON string should be enclosed in double quotes and embedded double quote should be duplicated, example:\n * - \"{\"\"viewDefinitionProps\"\":{\"\"classFullName\"\":\"\"BisCore:SpatialViewDefinition\"\",\"\"id\"\":\"\"0x1a\"\"}}\"\n * @beta\n */\nclass ApplyViewTool extends Tool {\n    static get maxArgs() { return 1; }\n    static get minArgs() { return 1; }\n    async run(view) {\n        const vp = IModelApp.viewManager.selectedView;\n        if (undefined !== view && undefined !== vp)\n            vp.changeView(view);\n        return true;\n    }\n    async parseAndRun(...args) {\n        const vp = IModelApp.viewManager.selectedView;\n        if (undefined === vp || 0 === args.length)\n            return true;\n        try {\n            const json = JSON.parse(args[0]);\n            const view = await deserializeViewState(json, vp.iModel);\n            await this.run(view);\n        }\n        catch (err) {\n            IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Info, BentleyError.getErrorMessage(err) || \"An unknown error occurred.\"));\n        }\n        return true;\n    }\n}\nApplyViewTool.toolId = \"ApplyView\";\nexport { ApplyViewTool };\n/** Given the Id of a persistent ViewDefinition, applies that view to the active viewport.\n * @beta\n */\nclass ApplyViewByIdTool extends Tool {\n    static get minArgs() { return 1; }\n    static get maxArgs() { return 1; }\n    async parseAndRun(...args) {\n        return this.run(args[0]);\n    }\n    async run(viewId) {\n        if (typeof viewId !== \"string\")\n            return false;\n        const vp = IModelApp.viewManager.selectedView;\n        if (!vp)\n            return false;\n        vp.iModel.views.load(viewId).then((view) => {\n            vp.changeView(view);\n        }).catch(() => { });\n        return true;\n    }\n}\nApplyViewByIdTool.toolId = \"ApplyViewById\";\nexport { ApplyViewByIdTool };\n//# sourceMappingURL=SavedViews.js.map",
      "start": 1693508122718,
      "end": 1693508122822,
      "sourcemaps": null
    }
  ]
}
