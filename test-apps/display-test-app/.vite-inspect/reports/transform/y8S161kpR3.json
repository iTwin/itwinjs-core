{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/rpc/DevToolsRpcInterface.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module RpcInterface\n */\nimport { RpcInterface } from \"../RpcInterface\";\nimport { RpcManager } from \"../RpcManager\";\n/** Options to get the backend statistics\n * @internal\n */\nexport var DevToolsStatsOptions;\n(function (DevToolsStatsOptions) {\n    DevToolsStatsOptions[DevToolsStatsOptions[\"None\"] = 0] = \"None\";\n    /** All unitized values are setup as formatted strings with the appropriate units */\n    DevToolsStatsOptions[DevToolsStatsOptions[\"FormatUnits\"] = 1] = \"FormatUnits\";\n})(DevToolsStatsOptions || (DevToolsStatsOptions = {}));\n/** The purpose of this class is to house RPC methods for developer tools.\n * Note that this should NOT be used in production environments.\n * @internal\n */\nclass DevToolsRpcInterface extends RpcInterface {\n    /** Returns the IModelReadRpcInterface instance for the frontend. */\n    static getClient() { return RpcManager.getClientForInterface(DevToolsRpcInterface); }\n    /*===========================================================================================\n      NOTE: Any add/remove/change to the methods below requires an update of the interface version.\n      NOTE: Please consult the README in this folder for the semantic versioning rules.\n    ==========================================================================================*/\n    // Sends a ping and returns true if the backend received the ping\n    async ping(_iModelToken) { return this.forward(arguments); }\n    // Returns JSON object with backend performance and memory statistics\n    async stats(_iModelToken, _options) { return this.forward(arguments); }\n    // Returns JSON object with backend versions (application and iModelJs)\n    async versions(_iModelToken) {\n        const versions = await this.forward(arguments) || {};\n        versions.availableRpcs = await RpcManager.describeAvailableEndpoints();\n        return versions;\n    }\n    // Sets a new log level for the specified category and returns the old log level\n    async setLogLevel(_iModelToken, _loggerCategory, _logLevel) { return this.forward(arguments); }\n}\n/** The immutable name of the interface. */\nDevToolsRpcInterface.interfaceName = \"DevToolsRpcInterface\";\n/** The semantic version of the interface.\n * @note The DevToolsRpcInterface will remain at 0.x since it is for testing only and not intended for production.\n */\nDevToolsRpcInterface.interfaceVersion = \"0.7.0\";\nexport { DevToolsRpcInterface };\n//# sourceMappingURL=DevToolsRpcInterface.js.map",
      "start": 1693508121040,
      "end": 1693508121105,
      "sourcemaps": null
    }
  ]
}
