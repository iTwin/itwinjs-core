{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/spatial/ecrs/ParameterValueList.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { AList } from \"../../system/collection/AList\";\n/**\n * Class ParameterValueList defines a list of parameter values.\n *\n * @version 1.0 January 2007\n */\n/** @internal */\nexport class ParameterValueList {\n    /**\n     * Create a new list.\n     */\n    constructor() {\n        this._list = new AList();\n    }\n    /**\n     * Get the number of parameter values.\n     * @return the number of parameter values.\n     */\n    size() {\n        return this._list.size();\n    }\n    /**\n     * Get a certain parameter value.\n     * @param index the index of the parameter value.\n     * @return the requested parameter value.\n     */\n    get(index) {\n        return this._list.get(index);\n    }\n    /**\n     * Add a parameter value.\n     * @param value the parameter value to add.\n     */\n    add(value) {\n        this._list.add(value);\n    }\n    /**\n     * Remove a parameter value.\n     * @param value the parameter value to remove.\n     * @return true if the value was removed, false if not.\n     */\n    remove(value) {\n        let index = this._list.indexOf(value);\n        if (index < 0)\n            return false;\n        this._list.remove(index);\n        return true;\n    }\n    /**\n     * Clear the parameter list.\n     */\n    clear() {\n        this._list.clear();\n    }\n    /**\n     * Find a parameter.\n     * @param parameterCode the identification code of the parameter.\n     * @return a parameter value (null if not found).\n     */\n    find(parameterCode) {\n        /* Check all values */\n        for (let i = 0; i < this._list.size(); i++) {\n            /* Check the next value */\n            let value = this._list.get(i);\n            if (value.getParameterCode() == parameterCode)\n                return value;\n        }\n        /* Parameter not found */\n        return null;\n    }\n    /**\n     * Get the value of a parameter.\n     * @param parameterCode the identification code of the parameter.\n     * @return the (standard) value of the parameter.\n     */\n    getValue(parameterCode) {\n        let value = this.find(parameterCode);\n        if (value.getUnit() == null)\n            return value.getParameterValue();\n        return value.getUnit().toStandard(value.getParameterValue());\n    }\n    /**\n     * Get the value of a parameter.\n     * @param parameterCode the identification code of the parameter.\n     * @param defaultValue the default value in case the parameter is not found.\n     * @return the (standard) value of the parameter.\n     */\n    getValue2(parameterCode, defaultValue) {\n        let value = this.find(parameterCode);\n        if (value == null)\n            return defaultValue;\n        if (value.getUnit() == null)\n            return value.getParameterValue();\n        return value.getUnit().toStandard(value.getParameterValue());\n    }\n    /**\n     * Check if another parameter value list is compatible with this one.\n     * @param other the other parameter value list (same parameter value sequence is assumed).\n     * @return true if compatible.\n     */\n    isCompatible(other) {\n        if (other.size() != this.size())\n            return false;\n        for (let i = 0; i < this.size(); i++)\n            if (other.get(i).isCompatible(this.get(i)) == false)\n                return false;\n        return true;\n    }\n}\n//# sourceMappingURL=ParameterValueList.js.map",
      "start": 1693508127358,
      "end": 1693508127402,
      "sourcemaps": null
    }
  ]
}
