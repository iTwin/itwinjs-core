{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/webgl/EdgeSettings.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module WebGL\n */\nimport { ColorDef, RenderMode } from \"@itwin/core-common\";\nimport { FloatRgba } from \"./FloatRGBA\";\nimport { LineCode } from \"./LineCode\";\n/** Controls symbology of edges based on ViewFlags and HiddenLine.Settings. Typically these come from the Target's\n * RenderPlan, but a GraphicBranch may override those settings.\n * @internal\n */\nexport class EdgeSettings {\n    constructor() {\n        /** The color applies to both hidden and visible edges. */\n        this._color = FloatRgba.fromColorDef(ColorDef.white);\n        this._colorOverridden = false;\n        /** Controls how opaque a surface must be to be displayed in SolidFill or HiddenLine modes; or how opaque it must be to\n         * block shadow-casting lights in SmoothShade mode.\n         */\n        this._transparencyThreshold = 0;\n    }\n    static create(hline) {\n        const settings = new EdgeSettings();\n        settings.init(hline);\n        return settings;\n    }\n    init(hline) {\n        this.clear();\n        if (!hline)\n            return;\n        // The threshold is HiddenLine.Settings is a transparency value. Convert it to an alpha value and clamp to [0..1].\n        let threshold = hline.transparencyThreshold;\n        threshold = Math.min(1, Math.max(0, threshold));\n        this._transparencyThreshold = 1.0 - threshold;\n        const vis = hline.visible;\n        if (vis.color) {\n            this._colorOverridden = true;\n            this._color.setColorDef(vis.color);\n        }\n        this._visibleLineCode = (undefined !== vis.pattern ? LineCode.valueFromLinePixels(vis.pattern) : undefined);\n        this._visibleWeight = vis.width;\n        // Hidden edge settings default to matching visible edge settings.\n        const hid = hline.hidden;\n        this._hiddenLineCode = undefined !== hid.pattern ? LineCode.valueFromLinePixels(hid.pattern) : this._visibleLineCode;\n        this._hiddenWeight = undefined !== hid.width ? hid.width : this._visibleWeight;\n        if (undefined !== this._hiddenWeight && undefined !== this._visibleWeight) {\n            // Hidden edges cannot be wider than visible edges.\n            this._hiddenWeight = Math.min(this._visibleWeight, this._hiddenWeight);\n        }\n    }\n    computeOvrFlags(pass, vf) {\n        // Edge overrides never apply in wireframe mode\n        if (!this.isOverridden(vf))\n            return 0 /* OvrFlags.None */;\n        // Alpha always overridden - transparent edges only supported in wireframe mode.\n        let flags = this.getColor(vf) ? 6 /* OvrFlags.Rgba */ : 4 /* OvrFlags.Alpha */;\n        if (undefined !== this.getLineCode(pass, vf))\n            flags |= 64 /* OvrFlags.LineCode */;\n        if (undefined !== this.getWeight(pass, vf))\n            flags |= 128 /* OvrFlags.Weight */;\n        return flags;\n    }\n    get transparencyThreshold() {\n        return this._transparencyThreshold;\n    }\n    getColor(vf) {\n        return this._colorOverridden && this.isOverridden(vf) ? this._color : undefined;\n    }\n    getLineCode(pass, vf) {\n        if (!this.isOverridden(vf))\n            return undefined;\n        return 9 /* RenderPass.HiddenEdge */ === pass ? this._hiddenLineCode : this._visibleLineCode;\n    }\n    getWeight(pass, vf) {\n        if (!this.isOverridden(vf))\n            return undefined;\n        return 9 /* RenderPass.HiddenEdge */ === pass ? this._hiddenWeight : this._visibleWeight;\n    }\n    clear() {\n        this._colorOverridden = false;\n        this._visibleLineCode = this._visibleWeight = undefined;\n        this._hiddenLineCode = this._hiddenWeight = undefined;\n        this._transparencyThreshold = 0;\n    }\n    wantContrastingColor(renderMode) {\n        return !this._colorOverridden && RenderMode.SolidFill === renderMode;\n    }\n    isOverridden(vf) {\n        switch (vf.renderMode) {\n            case RenderMode.Wireframe:\n                return false; // edge overrides don't apply in wireframe mode\n            case RenderMode.SmoothShade:\n                return vf.visibleEdges;\n            default:\n                return true; // Edges always displayed in solid fill and hidden line modes\n        }\n    }\n}\n//# sourceMappingURL=EdgeSettings.js.map",
      "start": 1693508124642,
      "end": 1693508124738,
      "sourcemaps": null
    }
  ]
}
