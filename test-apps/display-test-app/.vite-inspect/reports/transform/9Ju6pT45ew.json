{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend-devtools/lib/esm/tools/MeasureTileLoadTime.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tools\n */\nimport { StopWatch } from \"@itwin/core-bentley\";\nimport { IModelApp, NotifyMessageDetails, OutputMessagePriority, Tool } from \"@itwin/core-frontend\";\nclass TileLoadTimer {\n    constructor(vp) {\n        this._vp = vp;\n        this._stopwatch = new StopWatch();\n        // Purge tile trees for all models.\n        IModelApp.viewManager.refreshForModifiedModels(undefined);\n        const removeOnRender = vp.onRender.addListener(() => this.onRender());\n        const removeOnClose = vp.iModel.onClose.addOnce(() => this.cancel());\n        this._cleanup = () => {\n            removeOnRender();\n            removeOnClose();\n        };\n        IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Info, \"Tile loading timer started.\"));\n        this._stopwatch.start();\n    }\n    cancel() {\n        IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Info, \"Tile loading timer canceled.\"));\n        this.stop();\n    }\n    stop() {\n        if (undefined !== this._cleanup) {\n            this._cleanup();\n            this._cleanup = undefined;\n        }\n    }\n    onRender() {\n        // ###TODO: May be intermediate frames during which children props have been asynchronously requested but no outstanding tile requests.\n        if (!this._vp.areAllTileTreesLoaded || 0 < this._vp.numRequestedTiles)\n            return;\n        this._stopwatch.stop();\n        IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Info, `Tiles loaded in ${this._stopwatch.elapsedSeconds.toFixed(4)} seconds.`));\n        this.stop();\n    }\n}\n/** Unloads all tile trees, then starts a timer that stops when all tile trees and tiles required for the view are ready.\n * Outputs the elapsed time to notifications manager.\n * @beta\n */\nclass MeasureTileLoadTimeTool extends Tool {\n    /** This method runs the tool, unloading all tile trees, then starts a timer that stops when all tile trees and tiles required for the view are ready. It will then output the elapsed time to notifications manager.\n     * @param _args this parameter is unused\n     */\n    async run(_args) {\n        const vp = IModelApp.viewManager.selectedView;\n        if (undefined !== vp)\n            new TileLoadTimer(vp);\n        return true;\n    }\n}\nMeasureTileLoadTimeTool.toolId = \"MeasureTileLoadTime\";\nexport { MeasureTileLoadTimeTool };\n//# sourceMappingURL=MeasureTileLoadTime.js.map",
      "start": 1693508122657,
      "end": 1693508122761,
      "sourcemaps": null
    }
  ]
}
