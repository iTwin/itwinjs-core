{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend-devtools/lib/esm/widgets/GpuProfiler.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Widgets\n */\nimport { saveAs } from \"file-saver\";\nimport { IModelApp } from \"@itwin/core-frontend\";\nimport { createCheckBox } from \"../ui/CheckBox\";\nconst dummyArgs = { 0: 0 }; // Reuse instead of allocating for each entry\n/**\n * @param name Label for the trace event\n * @param start Timestamp in microseconds of when trace event started\n * @param duration Duration in microseconds of trace event\n */\nfunction createTraceEvent(name, start, duration) {\n    return {\n        pid: 1,\n        ts: start,\n        dur: duration,\n        ph: \"X\",\n        name,\n        args: dummyArgs,\n    };\n}\nfunction createTraceFromTimerResults(timerResults) {\n    const traceEvents = [];\n    const addChildren = (startTime, children) => {\n        for (const child of children) {\n            if (child.nanoseconds < 100)\n                continue;\n            const microseconds = child.nanoseconds / 1E3;\n            traceEvents.push(createTraceEvent(child.label, startTime, microseconds));\n            if (child.children)\n                addChildren(startTime, child.children);\n            startTime += microseconds;\n        }\n    };\n    let frameStartTime = 0;\n    let frameNumber = 0;\n    for (const tr of timerResults) {\n        const microseconds = tr.nanoseconds / 1E3;\n        traceEvents.push(createTraceEvent(`Frame ${frameNumber}`, frameStartTime, microseconds));\n        if (tr.children)\n            addChildren(frameStartTime, tr.children);\n        frameStartTime += microseconds;\n        ++frameNumber;\n    }\n    return { traceEvents };\n}\n/** @alpha */\nexport class GpuProfiler {\n    constructor(parent) {\n        this._clickRecord = () => {\n            if (!this._isRecording) {\n                this._isRecording = true;\n                this._recordButton.innerText = \"Stop Recording\";\n                return;\n            }\n            this.stopRecording();\n        };\n        this._resultsCallback = (result) => {\n            if (this._isRecording)\n                this._recordedResults.push(result);\n            const fragment = document.createDocumentFragment();\n            const numSavedFrames = 120;\n            let lastValue;\n            const changedResults = new Array(this._results.length); // default values false\n            const printDepth = (depth, currentRes) => {\n                const index = this._results.findIndex((res) => res.label === currentRes.label);\n                if (index < 0) { // Add brand new entry\n                    const data = {\n                        label: currentRes.label,\n                        paddingLeft: `${depth}em`,\n                        sum: currentRes.nanoseconds,\n                        values: [currentRes.nanoseconds],\n                    };\n                    if (lastValue === undefined) {\n                        this._results.unshift(data);\n                        changedResults.unshift(true);\n                    }\n                    else if (currentRes.label === \"Read Pixels\") {\n                        this._results.push(data); // Read Pixels should go at the end of the list\n                        changedResults.push(true);\n                    }\n                    else {\n                        const prevIndex = this._results.findIndex((res) => res.label === lastValue);\n                        this._results.splice(prevIndex + 1, 0, data);\n                        changedResults.splice(prevIndex + 1, 0, true);\n                    }\n                }\n                else { // Edit old entry\n                    let oldVal = 0.0;\n                    const savedResults = this._results[index];\n                    if (savedResults.values.length >= numSavedFrames) { // keep up to numSavedFrames values to average between\n                        oldVal = savedResults.values.shift();\n                    }\n                    const newVal = currentRes.nanoseconds < 100 ? 0.0 : currentRes.nanoseconds; // high-pass filter, empty queries have some noise\n                    savedResults.sum += newVal - oldVal;\n                    savedResults.values.push(newVal);\n                    changedResults[index] = true;\n                }\n                lastValue = currentRes.label;\n                if (!currentRes.children)\n                    return;\n                for (const childRes of currentRes.children)\n                    printDepth(depth + 1, childRes);\n            };\n            printDepth(0, result);\n            this._results.forEach((value, index) => {\n                if (!changedResults[index]) { // if no data received on this item, add a value of 0.0 to the avg.\n                    const oldVal = value.values.length >= numSavedFrames ? value.values.shift() : 0.0;\n                    value.sum -= oldVal;\n                    value.values.push(0.0);\n                }\n                const div = document.createElement(\"div\");\n                div.style.display = \"flex\";\n                div.style.width = \"75%\";\n                const textLabel = document.createElement(\"text\");\n                textLabel.innerText = `${value.label}`;\n                textLabel.style.paddingLeft = value.paddingLeft;\n                div.appendChild(textLabel);\n                const divLine = document.createElement(\"div\");\n                divLine.style.flexGrow = \"1\";\n                divLine.style.borderBottom = \"dotted 1px\";\n                div.appendChild(divLine);\n                const textValue = document.createElement(\"text\");\n                textValue.innerText = `${(value.sum / value.values.length / 1.E6).toFixed(3)} ms\\n`;\n                div.appendChild(textValue);\n                fragment.appendChild(div);\n            });\n            this._resultsDiv.innerHTML = \"\";\n            this._resultsDiv.appendChild(fragment);\n        };\n        this._debugControl = IModelApp.renderSystem.debugControl;\n        const checkBox = createCheckBox({\n            parent,\n            name: \"Profile GPU\",\n            id: \"gpu-profiler-toggle\",\n            handler: (cb) => this.toggleProfileCheckBox(cb.checked),\n        });\n        if (!this._debugControl.isGLTimerSupported) {\n            checkBox.checkbox.disabled = true;\n            checkBox.div.title = \"EXT_disjoint_timer_query is not available in this browser\";\n        }\n        this._div = document.createElement(\"div\");\n        this._div.style.display = \"none\";\n        this._recordButton = document.createElement(\"button\");\n        this._recordButton.style.textAlign = \"center\";\n        this._isRecording = false;\n        this._recordButton.innerText = \"Record Profile\";\n        this._recordButton.title = \"Record a profile to open with chrome://tracing\";\n        this._recordedResults = [];\n        this._recordButton.addEventListener(\"click\", this._clickRecord);\n        this._div.appendChild(this._recordButton);\n        this._results = [];\n        this._resultsDiv = document.createElement(\"div\");\n        this._resultsDiv.style.textAlign = \"left\";\n        this._div.appendChild(this._resultsDiv);\n        parent.appendChild(this._div);\n    }\n    dispose() {\n        this._debugControl.resultsCallback = undefined;\n    }\n    toggleProfileCheckBox(isEnabled) {\n        if (isEnabled) {\n            this._debugControl.resultsCallback = this._resultsCallback;\n            this._resultsDiv.innerHTML = \"\";\n            this._div.style.display = \"block\";\n        }\n        else {\n            this._debugControl.resultsCallback = undefined;\n            this._div.style.display = \"none\";\n            this.stopRecording();\n        }\n    }\n    stopRecording() {\n        this._isRecording = false;\n        this._recordButton.innerText = \"Record Profile\";\n        if (this._recordedResults.length !== 0) {\n            const chromeTrace = createTraceFromTimerResults(this._recordedResults);\n            const blob = new Blob([JSON.stringify(chromeTrace)], { type: \"application/json;charset=utf-8\" });\n            saveAs(blob, \"gpu-profile.json\");\n            this._recordedResults = [];\n        }\n    }\n}\n//# sourceMappingURL=GpuProfiler.js.map",
      "start": 1693508122830,
      "end": 1693508122891,
      "sourcemaps": null
    }
  ]
}
