{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/RealityDataSource.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tiles\n */\nimport { BentleyError, Logger } from \"@itwin/core-bentley\";\nimport { RealityDataFormat, RealityDataProvider } from \"@itwin/core-common\";\nimport { FrontendLoggerCategory } from \"./common/FrontendLoggerCategory\";\nimport { CesiumIonAssetProvider, ContextShareProvider, getCesiumAssetUrl } from \"./tile/internal\";\nimport { RealityDataSourceTilesetUrlImpl } from \"./RealityDataSourceTilesetUrlImpl\";\nimport { RealityDataSourceContextShareImpl } from \"./RealityDataSourceContextShareImpl\";\nimport { RealityDataSourceCesiumIonAssetImpl } from \"./RealityDataSourceCesiumIonAssetImpl\";\nimport { IModelApp } from \"./IModelApp\";\nconst loggerCategory = FrontendLoggerCategory.RealityData;\n/**\n * Reality Data Operation error\n * @alpha\n */\nexport class RealityDataError extends BentleyError {\n    constructor(errorNumber, message, getMetaData) {\n        super(errorNumber, message, getMetaData);\n    }\n}\n/** Utility functions for RealityDataSource\n * @beta\n */\nexport var RealityDataSource;\n(function (RealityDataSource) {\n    /** Create a RealityDataSourceKey from a tilesetUrl.\n     * @param tilesetUrl the reality data attachment url\n     * @param inputProvider identify the RealityDataProvider if known, otherwise function will try to extract it from the tilesetUrl\n     * @param inputFormat identify the RealityDataFormat if known, otherwise function will try to extract it from the tilesetUrl\n     * @returns the RealityDataSourceKey that uniquely identify a reality data for a provider\n     */\n    function createKeyFromUrl(tilesetUrl, inputProvider, inputFormat) {\n        let format = inputFormat ? inputFormat : RealityDataFormat.fromUrl(tilesetUrl);\n        if (CesiumIonAssetProvider.isProviderUrl(tilesetUrl)) {\n            const provider = RealityDataProvider.CesiumIonAsset;\n            let cesiumIonAssetKey = { provider, format, id: CesiumIonAssetProvider.osmBuildingId }; // default OSM building\n            // Parse URL to extract possible asset id and key if provided\n            const cesiumAsset = CesiumIonAssetProvider.parseCesiumUrl(tilesetUrl);\n            if (cesiumAsset) {\n                cesiumIonAssetKey = RealityDataSource.createCesiumIonAssetKey(cesiumAsset.id, cesiumAsset.key);\n            }\n            return cesiumIonAssetKey;\n        }\n        // Try to extract realityDataId from URL and if not possible, use the url as the key\n        if (ContextShareProvider.isProviderUrl(tilesetUrl)) {\n            const info = ContextShareProvider.getInfoFromUrl(tilesetUrl);\n            const provider = inputProvider ? inputProvider : info.provider;\n            format = inputFormat ? inputFormat : info.format;\n            const contextShareKey = { provider, format, id: info.id, iTwinId: info.iTwinId };\n            return contextShareKey;\n        }\n        // default to tileSetUrl\n        const provider2 = inputProvider ? inputProvider : RealityDataProvider.TilesetUrl;\n        const urlKey = { provider: provider2, format, id: tilesetUrl };\n        return urlKey;\n    }\n    RealityDataSource.createKeyFromUrl = createKeyFromUrl;\n    /** @alpha - was used for a very specific case of point cloud (opc) attachment that should not be made public */\n    function createKeyFromBlobUrl(blobUrl, inputProvider, inputFormat) {\n        const info = ContextShareProvider.getInfoFromBlobUrl(blobUrl);\n        const format = inputFormat ? inputFormat : info.format;\n        const provider = inputProvider ? inputProvider : info.provider;\n        const contextShareKey = { provider, format, id: info.id };\n        return contextShareKey;\n    }\n    RealityDataSource.createKeyFromBlobUrl = createKeyFromBlobUrl;\n    /** @alpha - OrbitGtBlobProps is alpha */\n    function createKeyFromOrbitGtBlobProps(orbitGtBlob, inputProvider, inputFormat) {\n        const format = inputFormat ? inputFormat : RealityDataFormat.OPC;\n        if (orbitGtBlob.blobFileName && orbitGtBlob.blobFileName.toLowerCase().startsWith(\"http\")) {\n            return RealityDataSource.createKeyFromBlobUrl(orbitGtBlob.blobFileName, inputProvider, format);\n        }\n        else if (orbitGtBlob.rdsUrl) {\n            return RealityDataSource.createKeyFromUrl(orbitGtBlob.rdsUrl, inputProvider, format);\n        }\n        const provider = inputProvider ? inputProvider : RealityDataProvider.OrbitGtBlob;\n        const id = `${orbitGtBlob.accountName}:${orbitGtBlob.containerName}:${orbitGtBlob.blobFileName}:?${orbitGtBlob.sasToken}`;\n        return { provider, format, id };\n    }\n    RealityDataSource.createKeyFromOrbitGtBlobProps = createKeyFromOrbitGtBlobProps;\n    /** @alpha - OrbitGtBlobProps is alpha */\n    function createOrbitGtBlobPropsFromKey(rdSourceKey) {\n        if (rdSourceKey.provider !== RealityDataProvider.OrbitGtBlob)\n            return undefined;\n        const splitIds = rdSourceKey.id.split(\":\");\n        const sasTokenIndex = rdSourceKey.id.indexOf(\":?\");\n        const sasToken = rdSourceKey.id.substring(sasTokenIndex + 2);\n        const orbitGtBlob = {\n            accountName: splitIds[0],\n            containerName: splitIds[1],\n            blobFileName: splitIds[2],\n            sasToken,\n        };\n        return orbitGtBlob;\n    }\n    RealityDataSource.createOrbitGtBlobPropsFromKey = createOrbitGtBlobPropsFromKey;\n    /** @internal - Is used by \"fdt attach cesium asset\" keyin*/\n    function createCesiumIonAssetKey(osmAssetId, requestKey) {\n        const id = getCesiumAssetUrl(osmAssetId, requestKey);\n        return { provider: RealityDataProvider.CesiumIonAsset, format: RealityDataFormat.ThreeDTile, id };\n    }\n    RealityDataSource.createCesiumIonAssetKey = createCesiumIonAssetKey;\n    /** Return an instance of a RealityDataSource from a source key.\n     * There will aways be only one reality data RealityDataSource for a corresponding reality data source key.\n     * @alpha\n     */\n    async function fromKey(key, iTwinId) {\n        const provider = IModelApp.realityDataSourceProviders.find(key.provider);\n        if (!provider) {\n            Logger.logWarning(loggerCategory, `RealityDataSourceProvider \"${key.provider}\" is not registered`);\n            return undefined;\n        }\n        return provider.createRealityDataSource(key, iTwinId);\n    }\n    RealityDataSource.fromKey = fromKey;\n})(RealityDataSource || (RealityDataSource = {}));\n/** A registry of [[RealityDataSourceProvider]]s identified by their unique names. The registry can be accessed via [[IModelApp.realityDataSourceProviders]].\n * It includes a handful of built-in providers for sources like Cesium ION, ContextShare, OrbitGT, and arbitrary public-accessible URLs.\n * Any number of additional providers can be registered. They should typically be registered just after [[IModelAp.startup]].\n * @alpha\n */\nexport class RealityDataSourceProviderRegistry {\n    /** @internal */\n    constructor() {\n        this._providers = new Map();\n        this.register(RealityDataProvider.CesiumIonAsset, {\n            createRealityDataSource: async (key, iTwinId) => RealityDataSourceCesiumIonAssetImpl.createFromKey(key, iTwinId),\n        });\n        this.register(RealityDataProvider.TilesetUrl, {\n            createRealityDataSource: async (key, iTwinId) => RealityDataSourceTilesetUrlImpl.createFromKey(key, iTwinId),\n        });\n        this.register(RealityDataProvider.ContextShare, {\n            createRealityDataSource: async (key, iTwinId) => RealityDataSourceContextShareImpl.createFromKey(key, iTwinId),\n        });\n        this.register(RealityDataProvider.OrbitGtBlob, {\n            // ###TODO separate TilesetUrlImpl\n            createRealityDataSource: async (key, iTwinId) => RealityDataSourceTilesetUrlImpl.createFromKey(key, iTwinId),\n        });\n    }\n    /** Register `provider` to produce [[RealityDataSource]]s for the specified provider `name`. */\n    register(name, provider) {\n        this._providers.set(name, provider);\n    }\n    /** Look up the provider registered by the specified `name`. */\n    find(name) {\n        return this._providers.get(name);\n    }\n}\n//# sourceMappingURL=RealityDataSource.js.map",
      "start": 1693508120101,
      "end": 1693508120585,
      "sourcemaps": null
    }
  ]
}
