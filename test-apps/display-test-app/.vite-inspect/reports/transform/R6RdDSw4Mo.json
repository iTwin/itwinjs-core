{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend-devtools/lib/esm/tools/EmphasizeElementsTool.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tools\n */\nimport { Id64 } from \"@itwin/core-bentley\";\nimport { ColorDef } from \"@itwin/core-common\";\nimport { EmphasizeElements, IModelApp, Tool } from \"@itwin/core-frontend\";\nimport { parseArgs } from \"./parseArgs\";\n/** Applies the `EmphasizeElements` API in some way to the selected Viewport.\n * @beta\n */\nexport class EmphasizeElementsTool extends Tool {\n    get _wantCreate() { return true; }\n    get _wantClear() { return false; }\n    async run(_args) {\n        const vp = IModelApp.viewManager.selectedView;\n        if (undefined === vp)\n            return true;\n        if (this._wantClear)\n            EmphasizeElements.clear(vp);\n        const emph = this._wantCreate ? EmphasizeElements.getOrCreate(vp) : EmphasizeElements.get(vp);\n        if (undefined !== emph)\n            this.execute(emph, vp);\n        return true;\n    }\n}\n/** If any elements are selected, emphasize them all by overriding their color to be orange; and de-emphasize all other elements by drawing them transparent grey.\n * @beta\n */\nclass EmphasizeSelectedElementsTool extends EmphasizeElementsTool {\n    constructor() {\n        super(...arguments);\n        this._type = 0 /* OverrideType.None */;\n    }\n    static get minArgs() { return 0; }\n    static get maxArgs() { return 1; }\n    execute(emph, vp) {\n        if (0 /* OverrideType.None */ === (this._type & 1 /* OverrideType.Color */) || emph.overrideSelectedElements(vp, ColorDef.white, undefined, true, false)) {\n            emph.wantEmphasis = 0 /* OverrideType.None */ !== (this._type & 2 /* OverrideType.Emphasis */);\n            if (emph.emphasizeSelectedElements(vp, undefined, true)) {\n                vp.isFadeOutActive = true;\n                return;\n            }\n        }\n        // Empty selection set - clear any previous overrides.\n        EmphasizeElements.clear(vp);\n        emph.wantEmphasis = false;\n        vp.isFadeOutActive = false;\n    }\n    async parseAndRun(...args) {\n        if (1 === args.length) {\n            switch (args[0].toLowerCase()[0]) {\n                case \"n\":\n                    break;\n                case \"c\":\n                    this._type = 1 /* OverrideType.Color */;\n                    break;\n                case \"e\":\n                    this._type = 2 /* OverrideType.Emphasis */;\n                    break;\n                case \"b\":\n                    this._type = 3 /* OverrideType.Both */;\n                    break;\n            }\n        }\n        return this.run(args);\n    }\n}\nEmphasizeSelectedElementsTool.toolId = \"EmphasizeSelectedElements\";\nexport { EmphasizeSelectedElementsTool };\n/** Isolate all selected elements so that *only* those elements will be drawn.\n * @beta\n */\nclass IsolateSelectedElementsTool extends EmphasizeElementsTool {\n    execute(emph, vp) {\n        emph.isolateSelectedElements(vp, true, true);\n    }\n}\nIsolateSelectedElementsTool.toolId = \"IsolateSelectedElements\";\nexport { IsolateSelectedElementsTool };\n/** Clear the set of isolated elements.\n * @beta\n */\nclass ClearIsolatedElementsTool extends EmphasizeElementsTool {\n    get _wantCreate() { return false; }\n    execute(emph, vp) {\n        emph.clearIsolatedElements(vp);\n    }\n}\nClearIsolatedElementsTool.toolId = \"ClearIsolatedElements\";\nexport { ClearIsolatedElementsTool };\n/** Reset [EmphasizeElements]($frontend) for the active [Viewport]($frontend).\n * @beta\n */\nclass ClearEmphasizedElementsTool extends EmphasizeElementsTool {\n    get _wantCreate() { return false; }\n    get _wantClear() { return true; }\n    execute(emph, vp) {\n        emph.clearEmphasizedElements(vp);\n        vp.isFadeOutActive = false;\n    }\n}\nClearEmphasizedElementsTool.toolId = \"ClearEmphasizedElements\";\nexport { ClearEmphasizedElementsTool };\n/** Emphasize the set of elements currently visible in the view based on [Viewport.queryVisibleFeatures]($frontend).\n * @beta\n */\nclass EmphasizeVisibleElementsTool extends EmphasizeElementsTool {\n    constructor() {\n        super(...arguments);\n        this._options = { source: \"screen\" };\n    }\n    static get minArgs() { return 1; }\n    static get maxArgs() { return 2; }\n    get _wantClear() { return true; }\n    async parseAndRun(...input) {\n        const args = parseArgs(input);\n        const includeNonLocatable = args.getBoolean(\"n\");\n        let source;\n        switch (input[0].toLowerCase()) {\n            case \"screen\":\n                source = \"screen\";\n                break;\n            case \"tiles\":\n                source = \"tiles\";\n                break;\n            default:\n                return false;\n        }\n        this._options = { source, includeNonLocatable };\n        return this.run(input);\n    }\n    execute(emph, vp) {\n        const elementIds = new Set();\n        vp.queryVisibleFeatures(this._options, (features) => {\n            for (const feature of features) {\n                if (feature.iModel === vp.iModel && Id64.isValid(feature.elementId))\n                    elementIds.add(feature.elementId);\n            }\n        });\n        emph.wantEmphasis = true;\n        if (emph.emphasizeElements(elementIds, vp))\n            vp.isFadeOutActive = true;\n    }\n}\nEmphasizeVisibleElementsTool.toolId = \"EmphasizeVisibleElements\";\nexport { EmphasizeVisibleElementsTool };\n//# sourceMappingURL=EmphasizeElementsTool.js.map",
      "start": 1693508122638,
      "end": 1693508122734,
      "sourcemaps": null
    }
  ]
}
