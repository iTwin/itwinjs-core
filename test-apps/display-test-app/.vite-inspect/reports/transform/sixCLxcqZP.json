{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/BackgroundMapProvider.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module DisplayStyles\n */\n/** Enumerates the types of map imagery that can be supplied by a [[BackgroundMapProvider]].\n * @public\n * @extensions\n */\nexport var BackgroundMapType;\n(function (BackgroundMapType) {\n    BackgroundMapType[BackgroundMapType[\"Street\"] = 1] = \"Street\";\n    BackgroundMapType[BackgroundMapType[\"Aerial\"] = 2] = \"Aerial\";\n    BackgroundMapType[BackgroundMapType[\"Hybrid\"] = 3] = \"Hybrid\";\n})(BackgroundMapType || (BackgroundMapType = {}));\n/** Describes one of a small set of standard, known suppliers of background map imagery as part of a [[BaseMapLayerSettings]].\n * @public\n */\nexport class BackgroundMapProvider {\n    constructor(name, type) {\n        this.name = name;\n        this.type = type;\n    }\n    /** Create a provider from its JSON representation. */\n    static fromJSON(props) {\n        const name = props.name === \"MapBoxProvider\" ? props.name : \"BingProvider\";\n        let type;\n        switch (props.type) {\n            case BackgroundMapType.Street:\n            case BackgroundMapType.Aerial:\n                type = props.type;\n                break;\n            default:\n                type = BackgroundMapType.Hybrid;\n                break;\n        }\n        return new BackgroundMapProvider(name, type);\n    }\n    /** Convert this provider to its JSON representation. */\n    toJSON() {\n        return { name: this.name, type: this.type };\n    }\n    /** @internal */\n    static fromBackgroundMapProps(props) {\n        // eslint-disable-next-line deprecation/deprecation\n        return this.fromJSON({ name: props.providerName, type: props.providerData?.mapType });\n    }\n    /** Return true if this provider is equivalent to `other`. */\n    equals(other) {\n        return this.name === other.name && this.type === other.type;\n    }\n    /** Produce a copy of this provider with identical properties except for those explicitly specified by `changedProps`.\n     * Any properties explicitly set to `undefined` in `changedProps` will be reset to their default values.\n     */\n    clone(changedProps) {\n        return BackgroundMapProvider.fromJSON({\n            ...this.toJSON(),\n            ...changedProps,\n        });\n    }\n}\n//# sourceMappingURL=BackgroundMapProvider.js.map",
      "start": 1693508120664,
      "end": 1693508120715,
      "sourcemaps": null
    }
  ]
}
