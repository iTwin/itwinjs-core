{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/EntityProps.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Entities\n */\nimport { Id64 } from \"@itwin/core-bentley\";\nimport { Point2d, Point3d } from \"@itwin/core-geometry\";\nimport { RelatedElement } from \"./ElementProps\";\n/** The primitive types of an Entity property.\n * @beta\n */\nexport var PrimitiveTypeCode;\n(function (PrimitiveTypeCode) {\n    PrimitiveTypeCode[PrimitiveTypeCode[\"Uninitialized\"] = 0] = \"Uninitialized\";\n    PrimitiveTypeCode[PrimitiveTypeCode[\"Binary\"] = 257] = \"Binary\";\n    PrimitiveTypeCode[PrimitiveTypeCode[\"Boolean\"] = 513] = \"Boolean\";\n    PrimitiveTypeCode[PrimitiveTypeCode[\"DateTime\"] = 769] = \"DateTime\";\n    PrimitiveTypeCode[PrimitiveTypeCode[\"Double\"] = 1025] = \"Double\";\n    PrimitiveTypeCode[PrimitiveTypeCode[\"Integer\"] = 1281] = \"Integer\";\n    PrimitiveTypeCode[PrimitiveTypeCode[\"Long\"] = 1537] = \"Long\";\n    PrimitiveTypeCode[PrimitiveTypeCode[\"Point2d\"] = 1793] = \"Point2d\";\n    PrimitiveTypeCode[PrimitiveTypeCode[\"Point3d\"] = 2049] = \"Point3d\";\n    PrimitiveTypeCode[PrimitiveTypeCode[\"String\"] = 2305] = \"String\";\n    PrimitiveTypeCode[PrimitiveTypeCode[\"IGeometry\"] = 2561] = \"IGeometry\";\n})(PrimitiveTypeCode || (PrimitiveTypeCode = {}));\n/** Metadata for a property.\n * @beta\n */\nexport class PropertyMetaData {\n    constructor(jsonObj) {\n        this.primitiveType = jsonObj.primitiveType;\n        if (jsonObj.structName)\n            this.structName = jsonObj.structName;\n        this.extendedType = jsonObj.extendedType;\n        this.description = jsonObj.description;\n        this.displayLabel = jsonObj.displayLabel;\n        if (undefined !== jsonObj.minimumValue)\n            this.minimumValue = jsonObj.minimumValue;\n        if (undefined !== jsonObj.maximumValue)\n            this.maximumValue = jsonObj.maximumValue;\n        if (undefined !== jsonObj.minimumLength)\n            this.minimumLength = jsonObj.minimumLength;\n        if (undefined !== jsonObj.maximumLength)\n            this.maximumLength = jsonObj.maximumLength;\n        this.readOnly = jsonObj.readOnly;\n        this.kindOfQuantity = jsonObj.kindOfQuantity;\n        this.isCustomHandled = jsonObj.isCustomHandled;\n        if (undefined !== jsonObj.minOccurs)\n            this.minOccurs = jsonObj.minOccurs;\n        if (undefined !== jsonObj.maxOccurs)\n            this.maxOccurs = jsonObj.maxOccurs;\n        this.direction = jsonObj.direction;\n        this.relationshipClass = jsonObj.relationshipClass;\n        this.customAttributes = jsonObj.customAttributes;\n    }\n    /** Create a typed value, or array of values, from a factory and an input object */\n    createValueOrArray(func, jsonObj) {\n        if (undefined === this.minOccurs)\n            return func(jsonObj); // not an array\n        const val = [];\n        jsonObj.forEach((element) => val.push(func(element)));\n        return val;\n    }\n    /** construct a single property from an input object according to this metadata */\n    createProperty(jsonObj) {\n        if (jsonObj === undefined)\n            return undefined;\n        if (undefined !== this.primitiveType) {\n            switch (this.primitiveType) {\n                case PrimitiveTypeCode.Boolean:\n                case PrimitiveTypeCode.Double:\n                case PrimitiveTypeCode.Integer:\n                case PrimitiveTypeCode.String:\n                    return jsonObj; // this works even for arrays or strings that are JSON because the parsed JSON is already the right type\n                case PrimitiveTypeCode.Point2d:\n                    return this.createValueOrArray((obj) => Point2d.fromJSON(obj), jsonObj);\n                case PrimitiveTypeCode.Point3d:\n                    return this.createValueOrArray((obj) => Point3d.fromJSON(obj), jsonObj);\n            }\n        }\n        if (this.isNavigation)\n            return jsonObj.id !== undefined ? new RelatedElement(jsonObj) : Id64.fromJSON(jsonObj);\n        return jsonObj;\n    }\n    /** Return `true` if this property is a NavigationProperty. */\n    get isNavigation() {\n        return (this.direction !== undefined); // the presence of `direction` means it is a navigation property\n    }\n}\n/** Metadata for an Entity.\n * @beta\n */\nexport class EntityMetaData {\n    constructor(jsonObj) {\n        this.ecclass = jsonObj.ecclass;\n        this.description = jsonObj.description;\n        this.modifier = jsonObj.modifier;\n        this.displayLabel = jsonObj.displayLabel;\n        this.baseClasses = jsonObj.baseClasses;\n        this.customAttributes = jsonObj.customAttributes;\n        this.properties = {};\n        for (const propName in jsonObj.properties) { // eslint-disable-line guard-for-in\n            this.properties[propName] = new PropertyMetaData(jsonObj.properties[propName]);\n        }\n    }\n}\n//# sourceMappingURL=EntityProps.js.map",
      "start": 1693508120719,
      "end": 1693508120779,
      "sourcemaps": null
    }
  ]
}
