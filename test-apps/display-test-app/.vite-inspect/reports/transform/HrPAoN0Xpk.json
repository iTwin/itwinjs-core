{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/markup/lib/esm/MarkupTool.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module MarkupTools\n */\nimport { BeButton, CoordinateLockOverrides, EventHandled, IModelApp, PrimitiveTool } from \"@itwin/core-frontend\";\nimport { MarkupApp } from \"./Markup\";\n/** Base class for all tools that operate on Markup elements.\n * @public\n */\nclass MarkupTool extends PrimitiveTool {\n    requireWriteableTarget() { return false; }\n    isCompatibleViewport(vp, isSelectedViewChange) { return (super.isCompatibleViewport(vp, isSelectedViewChange) && undefined !== vp && vp === IModelApp.toolAdmin.markupView); }\n    async onInstall() {\n        if (undefined === MarkupApp.markup)\n            return false;\n        this.markup = MarkupApp.markup;\n        return super.onInstall();\n    }\n    async onPostInstall() {\n        await super.onPostInstall();\n        this.setupAndPromptForNextAction();\n    }\n    async onUnsuspend() { this.showPrompt(); }\n    async onRestartTool() { return this.exitTool(); }\n    showPrompt() { }\n    setupAndPromptForNextAction() {\n        IModelApp.toolAdmin.toolState.coordLockOvr = CoordinateLockOverrides.All; // Don't adjust point to ACS or grid...\n        this.showPrompt();\n    }\n    outputMarkupPrompt(msg) { IModelApp.notifications.outputPromptByKey(MarkupTool.toolKey + msg); }\n    async onTouchMoveStart(ev, startEv) {\n        if (startEv.isSingleTouch)\n            await IModelApp.toolAdmin.convertTouchMoveStartToButtonDownAndMotion(startEv, ev);\n        return EventHandled.Yes; // View tools are not allowed during redlining; use touch events to create markup and don't pass event to IdleTool...\n    }\n    async onTouchMove(ev) { return IModelApp.toolAdmin.convertTouchMoveToMotion(ev); }\n    async onTouchComplete(ev) { return IModelApp.toolAdmin.convertTouchEndToButtonUp(ev); }\n    async onTouchCancel(ev) { return IModelApp.toolAdmin.convertTouchEndToButtonUp(ev, BeButton.Reset); }\n    async undoPreviousStep() {\n        if (await this.onUndoPreviousStep()) // first see if this tool has an \"oops\" operation.\n            return true; // yes, we're done\n        this.markup.undo.doUndo(); // otherwise undo the last change by previous tools\n        return true;\n    }\n    async redoPreviousStep() {\n        if (await this.onRedoPreviousStep())\n            return true;\n        this.markup.undo.doRedo();\n        return true;\n    }\n    /** Find the topmost MarkupElement at the specified point in the markup view.\n     * @param pt the point in view coordinates\n     * @returns The topmost element, or undefined if no elements under pt.\n     */\n    pickElement(pt) {\n        const markup = this.markup;\n        const rect = markup.markupDiv.getBoundingClientRect();\n        const node = document.elementFromPoint(pt.x + rect.left, pt.y + rect.top);\n        if (!node || !node.instance)\n            return undefined;\n        const el = node.instance;\n        return el.getChildOrGroupOf(markup.svgMarkup);\n    }\n    setCurrentStyle(element, canBeFilled) {\n        element.css(MarkupApp.props.active.element);\n        if (!canBeFilled)\n            element.css({ fill: \"none\" });\n    }\n    setCurrentTextStyle(element) { element.css(MarkupApp.props.active.text); }\n    /** @internal */\n    createBoxedText(g, text) {\n        const boxedText = g.group().addClass(MarkupApp.boxedTextClass);\n        const outline = text.getOutline(3);\n        this.setCurrentStyle(outline, true);\n        outline.css({ \"stroke-width\": 1 });\n        outline.addTo(boxedText);\n        text.addTo(boxedText); // make sure the text is on top\n        return boxedText;\n    }\n}\nMarkupTool.toolKey = \"MarkupTools:tools.Markup.\";\nexport { MarkupTool };\n//# sourceMappingURL=MarkupTool.js.map",
      "start": 1693508125558,
      "end": 1693508125723,
      "sourcemaps": null
    }
  ]
}
