{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/tile/TileUserSet.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Utils\n */\nimport { ReadonlySortedArray, SortedArray } from \"@itwin/core-bentley\";\n/** An immutable set of [[TileUser]]s wherein uniqueness is determined by each TileUser's unique integer identifier.\n * @see [[UniqueTileUserSets]].\n * @internal\n */\nexport class ReadonlyTileUserSet extends ReadonlySortedArray {\n    constructor(user) {\n        super((lhs, rhs) => lhs.tileUserId - rhs.tileUserId);\n        if (undefined !== user)\n            this._array.push(user);\n    }\n}\nclass TileUserSet extends ReadonlyTileUserSet {\n    copyFrom(src) {\n        this._array.length = src.length;\n        let i = 0;\n        for (const user of src)\n            this._array[i++] = user;\n    }\n    clone() {\n        const clone = new TileUserSet();\n        clone.copyFrom(this);\n        return clone;\n    }\n    insert(user) { return this._insert(user); }\n    remove(user) { return this._remove(user); }\n    clear() { this._clear(); }\n}\nfunction compareTileUserSets(lhs, rhs) {\n    if (lhs === rhs)\n        return 0;\n    let diff = lhs.length - rhs.length;\n    if (0 === diff) {\n        for (let i = 0; i < lhs.length; i++) {\n            diff = lhs.get(i).tileUserId - rhs.get(i).tileUserId;\n            if (0 !== diff)\n                break;\n        }\n    }\n    return diff;\n}\nconst emptySet = new ReadonlyTileUserSet();\nconst scratchSet = new TileUserSet();\nclass TileUserSetSet extends SortedArray {\n    constructor() {\n        super((lhs, rhs) => compareTileUserSets(lhs, rhs));\n    }\n    getForUser(user) {\n        for (let i = 0; i < this.length; i++) {\n            const set = this._array[i];\n            if (1 === set.length && set.get(0) === user)\n                return set;\n        }\n        const newSet = new TileUserSet(user);\n        this.insert(newSet);\n        return newSet;\n    }\n    getTileUserSet(user, users) {\n        if (undefined === users || users.isEmpty)\n            return this.getForUser(user);\n        // Use the scratch set for equality comparison - only allocate if no equivalent set already exists.\n        const toFind = scratchSet;\n        toFind.copyFrom(users);\n        toFind.insert(user);\n        const found = this.findEqual(toFind);\n        if (undefined !== found) {\n            toFind.clear();\n            return found;\n        }\n        const newSet = toFind.clone();\n        toFind.clear();\n        this.insert(newSet);\n        return newSet;\n    }\n    clearAll() {\n        this.forEach((set) => set.clear());\n        this.clear();\n    }\n    forgetUser(user) {\n        for (const set of this)\n            set.remove(user);\n    }\n}\n/** Maintains a set of [[TileUserSets]] designed to minimize duplication.\n * For example, the tile request scheduler needs to associate with each [[TileRequest]] the set of [[TileUser]]s awaiting the request's response.\n * Using UniqueTileUserSets ensures all tiles requested by the same user use the same TileUserSet object.\n * Additionally, whenever a user is unregistered there is no need to track down every associated tile request - the user can just be removed from the TileUserSets managed by this object.\n * The TileUserSets managed by this object should be treated as immutable - \"adding\" a user to an existing set should be done using [[getTileUserSet]].\n * @internal\n */\nexport class UniqueTileUserSets {\n    constructor() {\n        this._sets = new TileUserSetSet();\n    }\n    getTileUserSet(user, users) {\n        return this._sets.getTileUserSet(user, users);\n    }\n    clearAll() {\n        this._sets.clearAll();\n    }\n    clear() {\n        this._sets.clear();\n    }\n    remove(user) {\n        this._sets.forgetUser(user);\n    }\n    static get emptySet() {\n        return emptySet;\n    }\n}\n//# sourceMappingURL=TileUserSet.js.map",
      "start": 1693508121753,
      "end": 1693508121829,
      "sourcemaps": null
    }
  ]
}
