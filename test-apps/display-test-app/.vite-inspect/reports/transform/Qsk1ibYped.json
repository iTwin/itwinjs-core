{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend-devtools/lib/esm/tools/ClipTools.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tools\n */\nimport { ClipStyle, ColorByName, ColorDef, LinePixels, RenderMode, RgbColor, } from \"@itwin/core-common\";\nimport { IModelApp, Tool } from \"@itwin/core-frontend\";\nimport { parseToggle } from \"./parseToggle\";\nimport { parseBoolean } from \"./parseBoolean\";\nimport { DisplayStyleTool } from \"./DisplayStyleTools\";\n/** This tool specifies or un-specifies a clip color to use for pixels inside or outside the clip region.\n * Arguments can be:\n * - clear\n * - inside   <color string> | clear\n * - outside  <color string> | clear\n * <color string> must be in one of the following forms:\n * \"rgb(255,0,0)\"\n * \"rgba(255,0,0,255)\"\n * \"rgb(100%,0%,0%)\"\n * \"hsl(120,50%,50%)\"\n * \"#rrbbgg\"\n * \"blanchedAlmond\" (see possible values from [[ColorByName]]). Case insensitive.\n * @see [ColorDef]\n * @beta\n */\nclass ClipColorTool extends Tool {\n    static get minArgs() { return 1; }\n    static get maxArgs() { return 2; }\n    _clearClipColors() {\n        const vp = IModelApp.viewManager.selectedView;\n        if (undefined !== vp) {\n            const props = vp.displayStyle.settings.clipStyle.toJSON() ?? {};\n            props.insideColor = props.outsideColor = undefined;\n            vp.displayStyle.settings.clipStyle = ClipStyle.fromJSON(props);\n        }\n    }\n    setClipColor(colStr, which) {\n        const vp = IModelApp.viewManager.selectedView;\n        if (vp) {\n            const props = vp.displayStyle.settings.clipStyle.toJSON() ?? {};\n            props[which] = colStr === \"clear\" ? undefined : RgbColor.fromColorDef(ColorDef.fromString(colStr));\n            vp.displayStyle.settings.clipStyle = ClipStyle.fromJSON(props);\n        }\n    }\n    /** This runs the tool using the given arguments, specifying or unspecifying a clip color to use for pixels inside or outside the clip region.\n     * Arguments can be:\n     * - clear\n     * - inside   <color string> | clear\n     * - outside  <color string> | clear\n     * <color string> must be in one of the following forms:\n     * \"rgb(255,0,0)\"\n     * \"rgba(255,0,0,255)\"\n     * \"rgb(100%,0%,0%)\"\n     * \"hsl(120,50%,50%)\"\n     * \"#rrbbgg\"\n     * \"blanchedAlmond\" (see possible values from [[ColorByName]]). Case insensitive.\n     * @beta\n     */\n    async parseAndRun(...args) {\n        if (1 === args.length) {\n            if (args[0] === \"clear\")\n                this._clearClipColors();\n            return true;\n        }\n        const which = args[0];\n        if (which === \"inside\" || which === \"outside\")\n            this.setClipColor(args[1], \"inside\" === which ? \"insideColor\" : \"outsideColor\");\n        return true;\n    }\n}\nClipColorTool.toolId = \"ClipColorTool\";\nexport { ClipColorTool };\n/** Controls a view state's view details' flag for producing cut geometry for a clip style.\n * @beta\n */\nclass ToggleSectionCutTool extends Tool {\n    static get minArgs() { return 0; }\n    static get maxArgs() { return 1; }\n    /** This method runs the tool, controlling a view state's view details' flag for producing cut geometry for a clip style.\n     * @param produceCutGeometry whether to produce cut geometry\n     */\n    async run(produceCutGeometry) {\n        const vp = IModelApp.viewManager.selectedView;\n        if (vp) {\n            const style = vp.view.displayStyle.settings.clipStyle;\n            produceCutGeometry = produceCutGeometry ?? !style.produceCutGeometry;\n            if (produceCutGeometry !== style.produceCutGeometry) {\n                const json = {\n                    ...vp.view.displayStyle.settings.clipStyle.toJSON(),\n                    produceCutGeometry,\n                };\n                vp.view.displayStyle.settings.clipStyle = ClipStyle.fromJSON(json);\n                vp.invalidateScene();\n            }\n        }\n        return true;\n    }\n    /** Executes this tool's run method with args[0] containing `produceCutGeometry`.\n     * @see [[run]]\n     */\n    async parseAndRun(...args) {\n        const enable = parseToggle(args[0]);\n        if (typeof enable !== \"string\")\n            await this.run(enable);\n        return true;\n    }\n}\nToggleSectionCutTool.toolId = \"ToggleSectionCut\";\nexport { ToggleSectionCutTool };\n/** Simple tool that toggles a hard-coded clip style overriding various aspects of the cut geometry appearance.\n * @beta\n */\nclass TestClipStyleTool extends DisplayStyleTool {\n    constructor() {\n        super(...arguments);\n        this._useStyle = false;\n    }\n    static get maxArgs() { return 1; }\n    static get minArgs() { return 1; }\n    get require3d() { return true; }\n    async parse(args) {\n        this._useStyle = parseBoolean(args[0]) ?? false;\n        return true;\n    }\n    async execute(vp) {\n        const props = { produceCutGeometry: true };\n        if (this._useStyle) {\n            props.cutStyle = {\n                viewflags: {\n                    renderMode: RenderMode.SmoothShade,\n                    visibleEdges: true,\n                    hiddenEdges: false,\n                },\n                appearance: {\n                    rgb: { r: 0xff, g: 0x7f, b: 0 },\n                    transparency: 0.5,\n                    nonLocatable: true,\n                },\n                hiddenLine: {\n                    visible: {\n                        ovrColor: true,\n                        color: ColorByName.blue,\n                        pattern: LinePixels.Solid,\n                        width: 3,\n                    },\n                },\n            };\n        }\n        vp.displayStyle.settings.clipStyle = ClipStyle.fromJSON(props);\n        vp.invalidateRenderPlan();\n        vp.setFeatureOverrideProviderChanged();\n        return true;\n    }\n}\nTestClipStyleTool.toolId = \"TestClipStyle\";\nexport { TestClipStyleTool };\n//# sourceMappingURL=ClipTools.js.map",
      "start": 1693508122625,
      "end": 1693508122719,
      "sourcemaps": null
    }
  ]
}
