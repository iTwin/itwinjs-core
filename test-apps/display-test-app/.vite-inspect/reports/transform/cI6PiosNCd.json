{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/RealityModelDisplaySettingsWidget.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport {\r\n  DisplayStyleSettings, FeatureAppearance, FeatureAppearanceProps, PointCloudDisplayProps, RealityModelDisplayProps, RealityModelDisplaySettings,\r\n} from \"@itwin/core-common\";\r\nimport {\r\n  ContextRealityModelState, IModelApp, ScreenViewport, SpatialModelState, Tool, Viewport,\r\n} from \"@itwin/core-frontend\";\r\nimport {\r\n  ComboBoxEntry,\r\n  convertHexToRgb, createCheckBox, createColorInput, createComboBox, createRadioBox, createSlider,\r\n} from \"@itwin/frontend-devtools\";\r\nimport { Surface } from \"./Surface\";\r\nimport { ToolBarDropDown } from \"./ToolBar\";\r\nimport { Window } from \"./Window\";\r\n\r\ninterface RealityModel {\r\n  readonly name: string;\r\n  settings: RealityModelDisplaySettings;\r\n  appearance: FeatureAppearance | undefined;\r\n}\r\n\r\nclass ContextModel implements RealityModel {\r\n  private readonly _state: ContextRealityModelState;\r\n\r\n  public constructor(state: ContextRealityModelState) {\r\n    this._state = state;\r\n  }\r\n\r\n  public get name() { return this._state.name || this._state.orbitGtBlob?.blobFileName || this._state.url; }\r\n\r\n  public get settings() { return this._state.displaySettings; }\r\n  public set settings(value: RealityModelDisplaySettings) { this._state.displaySettings = value; }\r\n\r\n  public get appearance() { return this._state.appearanceOverrides; }\r\n  public set appearance(value: FeatureAppearance | undefined) { this._state.appearanceOverrides = value; }\r\n}\r\n\r\nclass PersistentModel implements RealityModel {\r\n  private readonly _model: SpatialModelState;\r\n  private readonly _settings: DisplayStyleSettings;\r\n\r\n  public constructor(model: SpatialModelState, settings: DisplayStyleSettings) {\r\n    this._model = model;\r\n    this._settings = settings;\r\n  }\r\n\r\n  public get name() { return this._model.name ?? this._model.jsonProperties.tilesetUrl; }\r\n\r\n  public get settings() { return this._settings.getRealityModelDisplaySettings(this._model.id) ?? RealityModelDisplaySettings.defaults; }\r\n  public set settings(value: RealityModelDisplaySettings) { this._settings.setRealityModelDisplaySettings(this._model.id, value); }\r\n\r\n  public get appearance() { return this._settings.getModelAppearanceOverride(this._model.id); }\r\n  public set appearance(value: FeatureAppearance | undefined) {\r\n    if (value)\r\n      this._settings.overrideModelAppearance(this._model.id, value);\r\n    else\r\n      this._settings.dropModelAppearanceOverride(this._model.id);\r\n  }\r\n}\r\n\r\nfunction createRealityModelSettingsPanel(model: RealityModel, element: HTMLElement) {\r\n  const updateSettings = (props: RealityModelDisplayProps) => model.settings = model.settings.clone(props);\r\n  const updateAppearance = (props: FeatureAppearanceProps | undefined) => {\r\n    if (!props)\r\n      model.appearance = undefined;\r\n    else if (!model.appearance)\r\n      model.appearance = FeatureAppearance.fromJSON(props);\r\n    else\r\n      model.appearance = model.appearance.clone(props);\r\n  };\r\n\r\n  // Color\r\n  const colorDiv = document.createElement(\"div\");\r\n  element.appendChild(colorDiv);\r\n\r\n  const colorCb = document.createElement(\"input\");\r\n  colorCb.type = \"checkbox\";\r\n  colorCb.id = \"rms_cbColor\";\r\n  colorDiv.appendChild(colorCb);\r\n\r\n  const updateColor = () => updateAppearance(colorCb.checked ? { rgb: convertHexToRgb(colorInput.value) } : undefined);\r\n  const colorInput = createColorInput({\r\n    parent: colorDiv,\r\n    id: \"rms_color\",\r\n    label: \"Color\",\r\n    value: model.appearance?.rgb?.toHexString() ?? \"#ffffff\",\r\n    display: \"inline\",\r\n    disabled: !colorCb.checked,\r\n    handler: updateColor,\r\n  }).input;\r\n\r\n  colorCb.addEventListener(\"click\", () => {\r\n    colorInput.disabled = !colorCb.checked;\r\n    colorRatio.slider.disabled = !colorCb.checked;\r\n    updateColor();\r\n  });\r\n\r\n  const colorRatio = createSlider({\r\n    parent: colorDiv, id: \"rms_ratio\", name: \" Ratio \",\r\n    min: \"0\", max: \"1\", step: \"0.05\",\r\n    value: model.settings.overrideColorRatio.toString(),\r\n    readout: \"right\", verticalAlign: false, textAlign: false,\r\n    handler: (slider) => {\r\n      const overrideColorRatio = Number.parseFloat(slider.value);\r\n      if (!Number.isNaN(overrideColorRatio))\r\n        updateSettings({ overrideColorRatio });\r\n    },\r\n  });\r\n  colorRatio.div.style.display = \"inline\";\r\n  colorRatio.slider.disabled = !colorCb.checked;\r\n\r\n  // Point shape\r\n  const updatePointCloud = (props: PointCloudDisplayProps) => updateSettings(model.settings.clone({ pointCloud: props }));\r\n  createCheckBox({\r\n    name: \"Square points:\", id: \"rms_square\",\r\n    parent: element,\r\n    isChecked: model.settings.pointCloud.shape === \"square\",\r\n    handler: (cb) => updatePointCloud({ shape: cb.checked ? \"square\" : \"round\" }),\r\n  });\r\n\r\n  // Point size mode\r\n  const setSizeMode = (mode: string) => {\r\n    const isPixel = mode === \"pixel\";\r\n    updatePointCloud({ sizeMode: isPixel ? \"pixel\" : \"voxel\" });\r\n    pixelSizeSlider.style.display = isPixel ? \"inline\" : \"none\";\r\n    voxelSizeSlider.style.display = isPixel ? \"none\" : \"inline\";\r\n  };\r\n\r\n  const sizeMode = createRadioBox({\r\n    id: \"rms_sizeMode\",\r\n    defaultValue: model.settings.pointCloud.sizeMode,\r\n    entries: [\r\n      { value: \"voxel\", label: \"Voxel\" },\r\n      { value: \"pixel\", label: \"Pixel\" },\r\n    ],\r\n    parent: element,\r\n    handler: (value) => setSizeMode(value),\r\n  });\r\n  sizeMode.form.style.display = \"inline\";\r\n\r\n  // Pixel size\r\n  const voxelSizeSlider = createSlider({\r\n    name: \" Size \", id: \"rms_scale\", parent: sizeMode.div,\r\n    min: \"0.25\", max: \"10\", step: \"0.25\",\r\n    value: model.settings.pointCloud.voxelScale.toString(),\r\n    readout: \"right\", verticalAlign: false, textAlign: false,\r\n    handler: (slider) => {\r\n      const scale = Number.parseFloat(slider.value);\r\n      if (!Number.isNaN(scale))\r\n        updatePointCloud({ voxelScale: scale });\r\n    },\r\n  }).div;\r\n\r\n  const pixelSizeSlider = createSlider({\r\n    name: \" Size \", id: \"rms_size\", parent: sizeMode.div,\r\n    min: \"1\", max: \"64\", step: \"1\",\r\n    value: model.settings.pointCloud.pixelSize.toString(),\r\n    readout: \"right\", verticalAlign: false, textAlign: false,\r\n    handler: (slider) => {\r\n      const pixelSize = Number.parseInt(slider.value, 10);\r\n      if (!Number.isNaN(pixelSize))\r\n        updatePointCloud({ pixelSize });\r\n    },\r\n  }).div;\r\n\r\n  setSizeMode(model.settings.pointCloud.sizeMode);\r\n\r\n  //  ----------------- EDL -----------------\r\n  const setEDLMode = (mode: string) => {\r\n    const isOn = mode !== \"off\";\r\n    const isFull = mode === \"full\";\r\n    updatePointCloud({ edlMode: isOn ? (isFull ? \"full\" : \"on\") : \"off\" });\r\n    edlFilter.style.display = isFull ? \"\" : \"none\";\r\n    edlMixWt1Slider.style.display = isFull ? \"\" : \"none\";\r\n    edlMixWt2Slider.style.display = isFull ? \"\" : \"none\";\r\n    edlMixWt4Slider.style.display = isFull ? \"\" : \"none\";\r\n  };\r\n\r\n  const hr = document.createElement(\"hr\");\r\n  hr.style.borderColor = \"grey\";\r\n  element.appendChild(hr);\r\n\r\n  const edlDiv = document.createElement(\"div\");\r\n  element.appendChild(edlDiv);\r\n  edlDiv.style.display = \"inline\";\r\n\r\n  const label1 = document.createElement(\"label\");\r\n  label1.innerText = \"EDL \";\r\n  label1.style.display = \"inline\";\r\n  edlDiv.appendChild(label1);\r\n\r\n  const edlMode = createRadioBox({\r\n    id: \"pcs_edlMode\",\r\n    defaultValue: model.settings.pointCloud.edlMode,\r\n    entries: [\r\n      { value: \"off\", label: \"Off \" },\r\n      { value: \"on\", label: \"On \" },\r\n      { value: \"full\", label: \"Full \" },\r\n    ],\r\n    parent: edlDiv,\r\n    handler: (value) => setEDLMode(value),\r\n  });\r\n  edlMode.div.style.display = edlMode.form.style.display = \"inline\";\r\n\r\n  // EDL strength\r\n  const edlStrengthSlider = createSlider({\r\n    name: \" Strength \", id: \"pcs_strength\", parent: element,\r\n    min: \"0.0\", max: \"25\", step: \"0.25\",\r\n    value: model.settings.pointCloud.edlStrength.toString(),\r\n    readout: \"right\", verticalAlign: false, textAlign: false,\r\n    handler: (slider) => {\r\n      const scale = Number.parseFloat(slider.value);\r\n      if (!Number.isNaN(scale))\r\n        updatePointCloud({ edlStrength: scale });\r\n    },\r\n  }).div;\r\n  edlStrengthSlider.style.display = \"\";\r\n\r\n  // EDL radius\r\n  const edlRadiusSlider = createSlider({\r\n    name: \" Radius \", id: \"pcs_radius\", parent: element,\r\n    min: \"0.0\", max: \"25\", step: \"0.25\",\r\n    value: model.settings.pointCloud.edlRadius.toString(),\r\n    readout: \"right\", verticalAlign: false, textAlign: false,\r\n    handler: (slider) => {\r\n      const scale = Number.parseFloat(slider.value);\r\n      if (!Number.isNaN(scale))\r\n        updatePointCloud({ edlRadius: scale });\r\n    },\r\n  }).div;\r\n  edlRadiusSlider.style.display = \"\";\r\n\r\n  const edlFilter = createCheckBox({\r\n    name: \" Filter\", id: \"pcs_filter\",\r\n    parent: element,\r\n    isChecked: model.settings.pointCloud.edlFilter === 1,\r\n    handler: (cb) => updatePointCloud({ edlFilter: cb.checked ? 1 : 0 }),\r\n  }).div;\r\n\r\n  const edlMixWt1Slider = createSlider({\r\n    name: \" Mix Wt 1 \", id: \"pcs_mixwt1\", parent: element,\r\n    min: \"0.0\", max: \"1\", step: \"0.01\",\r\n    value: model.settings.pointCloud.edlMixWts1?.toString() ?? \"1\",\r\n    readout: \"right\", verticalAlign: false, textAlign: false,\r\n    handler: (slider) => {\r\n      const scale = Number.parseFloat(slider.value);\r\n      if (!Number.isNaN(scale))\r\n        updatePointCloud({ edlMixWts1: scale });\r\n    },\r\n  }).div;\r\n  edlMixWt1Slider.style.display = \"\";\r\n\r\n  const edlMixWt2Slider = createSlider({\r\n    name: \" Mix Wt 2 \", id: \"pcs_mixwt2\", parent: element,\r\n    min: \"0.0\", max: \"1\", step: \"0.01\",\r\n    value: model.settings.pointCloud.edlMixWts2?.toString() ?? \"0.5\",\r\n    readout: \"right\", verticalAlign: false, textAlign: false,\r\n    handler: (slider) => {\r\n      const scale = Number.parseFloat(slider.value);\r\n      if (!Number.isNaN(scale))\r\n        updatePointCloud({ edlMixWts2: scale });\r\n    },\r\n  }).div;\r\n  edlMixWt2Slider.style.display = \"\";\r\n\r\n  const edlMixWt4Slider = createSlider({\r\n    name: \" Mix Wt 4 \", id: \"pcs_mixwt4\", parent: element,\r\n    min: \"0.0\", max: \"1\", step: \"0.01\",\r\n    value: model.settings.pointCloud.edlMixWts4?.toString() ?? \"0.25\",\r\n    readout: \"right\", verticalAlign: false, textAlign: false,\r\n    handler: (slider) => {\r\n      const scale = Number.parseFloat(slider.value);\r\n      if (!Number.isNaN(scale))\r\n        updatePointCloud({ edlMixWts4: scale });\r\n    },\r\n  }).div;\r\n  edlMixWt4Slider.style.display = \"\";\r\n\r\n  setEDLMode(model.settings.pointCloud.edlMode);\r\n}\r\n\r\nconst viewportIdsWithOpenWidgets = new Set<number>();\r\n\r\n// size of widget or panel\r\nconst winSize = { top: 0, left: 0, width: 408, height: 300 };\r\n\r\nclass RealityModelSettingsWidget extends Window {\r\n  private readonly _windowId: string;\r\n  private readonly _viewport: Viewport;\r\n  private readonly _dispose: () => void;\r\n\r\n  public constructor(viewport: Viewport, model: RealityModel) {\r\n    super(Surface.instance, winSize);\r\n    this._viewport = viewport;\r\n\r\n    this._windowId = `realityModelSettings-${viewport.viewportId}-${model.name}`;\r\n    this.isPinned = true;\r\n    this.title = model.name;\r\n\r\n    const element = document.createElement(\"div\");\r\n    element.className = \"debugPanel\";\r\n    element.style.height = \"96%\";\r\n    element.style.width = \"98%\";\r\n    element.style.top = \"0px\";\r\n    element.style.left = \"0px\";\r\n    element.style.zIndex = \"inherit\";\r\n    this.contentDiv.appendChild(element);\r\n\r\n    createRealityModelSettingsPanel(model, element);\r\n    this.container.style.display = \"flex\";\r\n\r\n    const removals = [\r\n      viewport.onChangeView.addOnce(() => this.close()),\r\n      viewport.onDisposed.addOnce(() => this.close()),\r\n    ];\r\n\r\n    this._dispose = () => removals.forEach((removal) => removal());\r\n  }\r\n\r\n  private close(): void {\r\n    this.surface.close(this);\r\n  }\r\n\r\n  public override onClosed(): void {\r\n    this._dispose();\r\n    viewportIdsWithOpenWidgets.delete(this._viewport.viewportId);\r\n  }\r\n\r\n  public get windowId() { return this._windowId; }\r\n  public override get isResizable() { return false; }\r\n}\r\n\r\nexport class OpenRealityModelSettingsTool extends Tool {\r\n  public static override toolId = \"OpenRealityModelSettings\";\r\n  public static override get minArgs() { return 0; }\r\n  public static override get maxArgs() { return 1; }\r\n\r\n  public override async run(vp?: Viewport, model?: RealityModel): Promise<boolean> {\r\n    if (!vp || !model)\r\n      return false;\r\n\r\n    const win = new RealityModelSettingsWidget(vp, model);\r\n    win.surface.addWindow(win);\r\n    win.surface.element.appendChild(win.container);\r\n\r\n    return true;\r\n  }\r\n\r\n  public override async parseAndRun(): Promise<boolean> {\r\n    const vp = IModelApp.viewManager.selectedView;\r\n    if (!vp || !vp.view.isSpatialView())\r\n      return false;\r\n\r\n    if (viewportIdsWithOpenWidgets.has(vp.viewportId))\r\n      return true;\r\n\r\n    // ###TODO permit specific reality model to be specified in args.\r\n    // For now use first one we can find.\r\n    let realityModel: RealityModel | undefined;\r\n    vp.view.displayStyle.forEachRealityModel((x) => {\r\n      realityModel = realityModel ?? new ContextModel(x);\r\n    });\r\n\r\n    if (!realityModel) {\r\n      for (const modelId of vp.view.modelSelector.models) {\r\n        const model = vp.iModel.models.getLoaded(modelId);\r\n        if (model instanceof SpatialModelState && model.isRealityModel) {\r\n          realityModel = new PersistentModel(model, vp.view.displayStyle.settings);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return realityModel ? this.run(vp, realityModel) : false;\r\n  }\r\n}\r\n\r\nfunction clearElement(element: HTMLElement): void {\r\n  while (element.hasChildNodes())\r\n    element.removeChild(element.firstChild!);\r\n}\r\n\r\nexport class RealityModelSettingsPanel extends ToolBarDropDown {\r\n  private readonly _vp: ScreenViewport;\r\n  private readonly _parent: HTMLElement;\r\n  private readonly _element: HTMLElement;\r\n  private _realityModelListDiv: HTMLDivElement;\r\n  private _selectedRealityModelIndex: number = 0;\r\n  private _realityModels: Array<{ realityModel: RealityModel, modelName: string }> = [];\r\n\r\n  public constructor(vp: ScreenViewport, parent: HTMLElement) {\r\n    super();\r\n    this._vp = vp;\r\n    this._parent = parent;\r\n\r\n    this._realityModelListDiv = document.createElement(\"div\");\r\n    this._realityModelListDiv.style.display = \"block\";\r\n\r\n    this._element = document.createElement(\"div\");\r\n    this._element.className = \"toolMenu\";\r\n    this._element.style.display = \"block\";\r\n    this._element.style.overflowX = \"none\";\r\n    this._element.style.overflowY = \"none\";\r\n    const width = winSize.width * 0.98;\r\n    this._element.style.width = `${width}px`;\r\n    parent.appendChild(this._element);\r\n    this._element.appendChild(this._realityModelListDiv);\r\n  }\r\n\r\n  public override get onViewChanged(): Promise<void> | undefined {\r\n    return this.remakePanelWithSelection(0);\r\n  }\r\n\r\n  private async remakePanelWithSelection(ndx: number) {\r\n    while (this._element.hasChildNodes())\r\n      this._element.removeChild(this._element.firstChild!);\r\n    this._selectedRealityModelIndex = ndx;\r\n    this._realityModelListDiv = document.createElement(\"div\");\r\n    this._realityModelListDiv.style.display = \"block\";\r\n    this._element.appendChild(this._realityModelListDiv);\r\n    return this.populate();\r\n  }\r\n\r\n  private populateRealityModelList(): void {\r\n    this._realityModels = [];\r\n    this._vp.view.displayStyle.forEachRealityModel((x) => {\r\n      const realityModel = new ContextModel(x);\r\n      this._realityModels.push({ realityModel, modelName: realityModel.name });\r\n    });\r\n    if (this._vp.view.isSpatialView()) {\r\n      for (const modelId of this._vp.view.modelSelector.models) {\r\n        const model = this._vp.iModel.models.getLoaded(modelId);\r\n        if (model instanceof SpatialModelState && model.isRealityModel) {\r\n          const realityModel = new PersistentModel(model, this._vp.view.displayStyle.settings);\r\n          this._realityModels.push({ realityModel, modelName: realityModel.name });\r\n        }\r\n      }\r\n    }\r\n    // create list of entries\r\n    const entries = this._realityModels.map((realityModel, i) => {\r\n      return ({ name: realityModel.modelName, value: i } as ComboBoxEntry);\r\n    });\r\n\r\n    clearElement(this._realityModelListDiv);\r\n    const activeIndex = this._selectedRealityModelIndex;\r\n    createComboBox({\r\n      parent: this._realityModelListDiv,\r\n      id: \"Point Cloud Selection Box\",\r\n      name: \"Reality Models: \",\r\n      value: activeIndex,\r\n      handler: (select) => {\r\n        const valueIndex = Number.parseInt(select.value, 10);\r\n        void this.remakePanelWithSelection(valueIndex);\r\n      },\r\n      entries,\r\n    });\r\n  }\r\n\r\n  public async populate(): Promise<void> {\r\n    if (!this._vp || !this._vp.view.isSpatialView())\r\n      return;\r\n    this.populateRealityModelList();\r\n    const realityModel = this._realityModels.at(this._selectedRealityModelIndex)?.realityModel;\r\n    if (undefined === realityModel)\r\n      return;\r\n\r\n    createRealityModelSettingsPanel(realityModel, this._element);\r\n  }\r\n\r\n  public get isOpen(): boolean { return \"none\" !== this._element.style.display; }\r\n  protected _open(): void { this._element.style.display = \"block\"; }\r\n  protected _close(): void { this._element.style.display = \"none\"; }\r\n}\r\n",
      "start": 1693508121255,
      "end": 1693508121432,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport {\n  FeatureAppearance,\n  RealityModelDisplaySettings\n} from \"@itwin/core-common\";\nimport {\n  IModelApp,\n  SpatialModelState,\n  Tool\n} from \"@itwin/core-frontend\";\nimport {\n  convertHexToRgb,\n  createCheckBox,\n  createColorInput,\n  createComboBox,\n  createRadioBox,\n  createSlider\n} from \"@itwin/frontend-devtools\";\nimport { Surface } from \"./Surface\";\nimport { ToolBarDropDown } from \"./ToolBar\";\nimport { Window } from \"./Window\";\nclass ContextModel {\n  constructor(state) {\n    this._state = state;\n  }\n  get name() {\n    return this._state.name || this._state.orbitGtBlob?.blobFileName || this._state.url;\n  }\n  get settings() {\n    return this._state.displaySettings;\n  }\n  set settings(value) {\n    this._state.displaySettings = value;\n  }\n  get appearance() {\n    return this._state.appearanceOverrides;\n  }\n  set appearance(value) {\n    this._state.appearanceOverrides = value;\n  }\n}\nclass PersistentModel {\n  constructor(model, settings) {\n    this._model = model;\n    this._settings = settings;\n  }\n  get name() {\n    return this._model.name ?? this._model.jsonProperties.tilesetUrl;\n  }\n  get settings() {\n    return this._settings.getRealityModelDisplaySettings(this._model.id) ?? RealityModelDisplaySettings.defaults;\n  }\n  set settings(value) {\n    this._settings.setRealityModelDisplaySettings(this._model.id, value);\n  }\n  get appearance() {\n    return this._settings.getModelAppearanceOverride(this._model.id);\n  }\n  set appearance(value) {\n    if (value)\n      this._settings.overrideModelAppearance(this._model.id, value);\n    else\n      this._settings.dropModelAppearanceOverride(this._model.id);\n  }\n}\nfunction createRealityModelSettingsPanel(model, element) {\n  const updateSettings = (props) => model.settings = model.settings.clone(props);\n  const updateAppearance = (props) => {\n    if (!props)\n      model.appearance = void 0;\n    else if (!model.appearance)\n      model.appearance = FeatureAppearance.fromJSON(props);\n    else\n      model.appearance = model.appearance.clone(props);\n  };\n  const colorDiv = document.createElement(\"div\");\n  element.appendChild(colorDiv);\n  const colorCb = document.createElement(\"input\");\n  colorCb.type = \"checkbox\";\n  colorCb.id = \"rms_cbColor\";\n  colorDiv.appendChild(colorCb);\n  const updateColor = () => updateAppearance(colorCb.checked ? { rgb: convertHexToRgb(colorInput.value) } : void 0);\n  const colorInput = createColorInput({\n    parent: colorDiv,\n    id: \"rms_color\",\n    label: \"Color\",\n    value: model.appearance?.rgb?.toHexString() ?? \"#ffffff\",\n    display: \"inline\",\n    disabled: !colorCb.checked,\n    handler: updateColor\n  }).input;\n  colorCb.addEventListener(\"click\", () => {\n    colorInput.disabled = !colorCb.checked;\n    colorRatio.slider.disabled = !colorCb.checked;\n    updateColor();\n  });\n  const colorRatio = createSlider({\n    parent: colorDiv,\n    id: \"rms_ratio\",\n    name: \" Ratio \",\n    min: \"0\",\n    max: \"1\",\n    step: \"0.05\",\n    value: model.settings.overrideColorRatio.toString(),\n    readout: \"right\",\n    verticalAlign: false,\n    textAlign: false,\n    handler: (slider) => {\n      const overrideColorRatio = Number.parseFloat(slider.value);\n      if (!Number.isNaN(overrideColorRatio))\n        updateSettings({ overrideColorRatio });\n    }\n  });\n  colorRatio.div.style.display = \"inline\";\n  colorRatio.slider.disabled = !colorCb.checked;\n  const updatePointCloud = (props) => updateSettings(model.settings.clone({ pointCloud: props }));\n  createCheckBox({\n    name: \"Square points:\",\n    id: \"rms_square\",\n    parent: element,\n    isChecked: model.settings.pointCloud.shape === \"square\",\n    handler: (cb) => updatePointCloud({ shape: cb.checked ? \"square\" : \"round\" })\n  });\n  const setSizeMode = (mode) => {\n    const isPixel = mode === \"pixel\";\n    updatePointCloud({ sizeMode: isPixel ? \"pixel\" : \"voxel\" });\n    pixelSizeSlider.style.display = isPixel ? \"inline\" : \"none\";\n    voxelSizeSlider.style.display = isPixel ? \"none\" : \"inline\";\n  };\n  const sizeMode = createRadioBox({\n    id: \"rms_sizeMode\",\n    defaultValue: model.settings.pointCloud.sizeMode,\n    entries: [\n      { value: \"voxel\", label: \"Voxel\" },\n      { value: \"pixel\", label: \"Pixel\" }\n    ],\n    parent: element,\n    handler: (value) => setSizeMode(value)\n  });\n  sizeMode.form.style.display = \"inline\";\n  const voxelSizeSlider = createSlider({\n    name: \" Size \",\n    id: \"rms_scale\",\n    parent: sizeMode.div,\n    min: \"0.25\",\n    max: \"10\",\n    step: \"0.25\",\n    value: model.settings.pointCloud.voxelScale.toString(),\n    readout: \"right\",\n    verticalAlign: false,\n    textAlign: false,\n    handler: (slider) => {\n      const scale = Number.parseFloat(slider.value);\n      if (!Number.isNaN(scale))\n        updatePointCloud({ voxelScale: scale });\n    }\n  }).div;\n  const pixelSizeSlider = createSlider({\n    name: \" Size \",\n    id: \"rms_size\",\n    parent: sizeMode.div,\n    min: \"1\",\n    max: \"64\",\n    step: \"1\",\n    value: model.settings.pointCloud.pixelSize.toString(),\n    readout: \"right\",\n    verticalAlign: false,\n    textAlign: false,\n    handler: (slider) => {\n      const pixelSize = Number.parseInt(slider.value, 10);\n      if (!Number.isNaN(pixelSize))\n        updatePointCloud({ pixelSize });\n    }\n  }).div;\n  setSizeMode(model.settings.pointCloud.sizeMode);\n  const setEDLMode = (mode) => {\n    const isOn = mode !== \"off\";\n    const isFull = mode === \"full\";\n    updatePointCloud({ edlMode: isOn ? isFull ? \"full\" : \"on\" : \"off\" });\n    edlFilter.style.display = isFull ? \"\" : \"none\";\n    edlMixWt1Slider.style.display = isFull ? \"\" : \"none\";\n    edlMixWt2Slider.style.display = isFull ? \"\" : \"none\";\n    edlMixWt4Slider.style.display = isFull ? \"\" : \"none\";\n  };\n  const hr = document.createElement(\"hr\");\n  hr.style.borderColor = \"grey\";\n  element.appendChild(hr);\n  const edlDiv = document.createElement(\"div\");\n  element.appendChild(edlDiv);\n  edlDiv.style.display = \"inline\";\n  const label1 = document.createElement(\"label\");\n  label1.innerText = \"EDL \";\n  label1.style.display = \"inline\";\n  edlDiv.appendChild(label1);\n  const edlMode = createRadioBox({\n    id: \"pcs_edlMode\",\n    defaultValue: model.settings.pointCloud.edlMode,\n    entries: [\n      { value: \"off\", label: \"Off \" },\n      { value: \"on\", label: \"On \" },\n      { value: \"full\", label: \"Full \" }\n    ],\n    parent: edlDiv,\n    handler: (value) => setEDLMode(value)\n  });\n  edlMode.div.style.display = edlMode.form.style.display = \"inline\";\n  const edlStrengthSlider = createSlider({\n    name: \" Strength \",\n    id: \"pcs_strength\",\n    parent: element,\n    min: \"0.0\",\n    max: \"25\",\n    step: \"0.25\",\n    value: model.settings.pointCloud.edlStrength.toString(),\n    readout: \"right\",\n    verticalAlign: false,\n    textAlign: false,\n    handler: (slider) => {\n      const scale = Number.parseFloat(slider.value);\n      if (!Number.isNaN(scale))\n        updatePointCloud({ edlStrength: scale });\n    }\n  }).div;\n  edlStrengthSlider.style.display = \"\";\n  const edlRadiusSlider = createSlider({\n    name: \" Radius \",\n    id: \"pcs_radius\",\n    parent: element,\n    min: \"0.0\",\n    max: \"25\",\n    step: \"0.25\",\n    value: model.settings.pointCloud.edlRadius.toString(),\n    readout: \"right\",\n    verticalAlign: false,\n    textAlign: false,\n    handler: (slider) => {\n      const scale = Number.parseFloat(slider.value);\n      if (!Number.isNaN(scale))\n        updatePointCloud({ edlRadius: scale });\n    }\n  }).div;\n  edlRadiusSlider.style.display = \"\";\n  const edlFilter = createCheckBox({\n    name: \" Filter\",\n    id: \"pcs_filter\",\n    parent: element,\n    isChecked: model.settings.pointCloud.edlFilter === 1,\n    handler: (cb) => updatePointCloud({ edlFilter: cb.checked ? 1 : 0 })\n  }).div;\n  const edlMixWt1Slider = createSlider({\n    name: \" Mix Wt 1 \",\n    id: \"pcs_mixwt1\",\n    parent: element,\n    min: \"0.0\",\n    max: \"1\",\n    step: \"0.01\",\n    value: model.settings.pointCloud.edlMixWts1?.toString() ?? \"1\",\n    readout: \"right\",\n    verticalAlign: false,\n    textAlign: false,\n    handler: (slider) => {\n      const scale = Number.parseFloat(slider.value);\n      if (!Number.isNaN(scale))\n        updatePointCloud({ edlMixWts1: scale });\n    }\n  }).div;\n  edlMixWt1Slider.style.display = \"\";\n  const edlMixWt2Slider = createSlider({\n    name: \" Mix Wt 2 \",\n    id: \"pcs_mixwt2\",\n    parent: element,\n    min: \"0.0\",\n    max: \"1\",\n    step: \"0.01\",\n    value: model.settings.pointCloud.edlMixWts2?.toString() ?? \"0.5\",\n    readout: \"right\",\n    verticalAlign: false,\n    textAlign: false,\n    handler: (slider) => {\n      const scale = Number.parseFloat(slider.value);\n      if (!Number.isNaN(scale))\n        updatePointCloud({ edlMixWts2: scale });\n    }\n  }).div;\n  edlMixWt2Slider.style.display = \"\";\n  const edlMixWt4Slider = createSlider({\n    name: \" Mix Wt 4 \",\n    id: \"pcs_mixwt4\",\n    parent: element,\n    min: \"0.0\",\n    max: \"1\",\n    step: \"0.01\",\n    value: model.settings.pointCloud.edlMixWts4?.toString() ?? \"0.25\",\n    readout: \"right\",\n    verticalAlign: false,\n    textAlign: false,\n    handler: (slider) => {\n      const scale = Number.parseFloat(slider.value);\n      if (!Number.isNaN(scale))\n        updatePointCloud({ edlMixWts4: scale });\n    }\n  }).div;\n  edlMixWt4Slider.style.display = \"\";\n  setEDLMode(model.settings.pointCloud.edlMode);\n}\nconst viewportIdsWithOpenWidgets = /* @__PURE__ */ new Set();\nconst winSize = { top: 0, left: 0, width: 408, height: 300 };\nclass RealityModelSettingsWidget extends Window {\n  constructor(viewport, model) {\n    super(Surface.instance, winSize);\n    this._viewport = viewport;\n    this._windowId = `realityModelSettings-${viewport.viewportId}-${model.name}`;\n    this.isPinned = true;\n    this.title = model.name;\n    const element = document.createElement(\"div\");\n    element.className = \"debugPanel\";\n    element.style.height = \"96%\";\n    element.style.width = \"98%\";\n    element.style.top = \"0px\";\n    element.style.left = \"0px\";\n    element.style.zIndex = \"inherit\";\n    this.contentDiv.appendChild(element);\n    createRealityModelSettingsPanel(model, element);\n    this.container.style.display = \"flex\";\n    const removals = [\n      viewport.onChangeView.addOnce(() => this.close()),\n      viewport.onDisposed.addOnce(() => this.close())\n    ];\n    this._dispose = () => removals.forEach((removal) => removal());\n  }\n  close() {\n    this.surface.close(this);\n  }\n  onClosed() {\n    this._dispose();\n    viewportIdsWithOpenWidgets.delete(this._viewport.viewportId);\n  }\n  get windowId() {\n    return this._windowId;\n  }\n  get isResizable() {\n    return false;\n  }\n}\nexport class OpenRealityModelSettingsTool extends Tool {\n  static get minArgs() {\n    return 0;\n  }\n  static get maxArgs() {\n    return 1;\n  }\n  async run(vp, model) {\n    if (!vp || !model)\n      return false;\n    const win = new RealityModelSettingsWidget(vp, model);\n    win.surface.addWindow(win);\n    win.surface.element.appendChild(win.container);\n    return true;\n  }\n  async parseAndRun() {\n    const vp = IModelApp.viewManager.selectedView;\n    if (!vp || !vp.view.isSpatialView())\n      return false;\n    if (viewportIdsWithOpenWidgets.has(vp.viewportId))\n      return true;\n    let realityModel;\n    vp.view.displayStyle.forEachRealityModel((x) => {\n      realityModel = realityModel ?? new ContextModel(x);\n    });\n    if (!realityModel) {\n      for (const modelId of vp.view.modelSelector.models) {\n        const model = vp.iModel.models.getLoaded(modelId);\n        if (model instanceof SpatialModelState && model.isRealityModel) {\n          realityModel = new PersistentModel(model, vp.view.displayStyle.settings);\n          break;\n        }\n      }\n    }\n    return realityModel ? this.run(vp, realityModel) : false;\n  }\n}\nOpenRealityModelSettingsTool.toolId = \"OpenRealityModelSettings\";\nfunction clearElement(element) {\n  while (element.hasChildNodes())\n    element.removeChild(element.firstChild);\n}\nexport class RealityModelSettingsPanel extends ToolBarDropDown {\n  constructor(vp, parent) {\n    super();\n    this._selectedRealityModelIndex = 0;\n    this._realityModels = [];\n    this._vp = vp;\n    this._parent = parent;\n    this._realityModelListDiv = document.createElement(\"div\");\n    this._realityModelListDiv.style.display = \"block\";\n    this._element = document.createElement(\"div\");\n    this._element.className = \"toolMenu\";\n    this._element.style.display = \"block\";\n    this._element.style.overflowX = \"none\";\n    this._element.style.overflowY = \"none\";\n    const width = winSize.width * 0.98;\n    this._element.style.width = `${width}px`;\n    parent.appendChild(this._element);\n    this._element.appendChild(this._realityModelListDiv);\n  }\n  get onViewChanged() {\n    return this.remakePanelWithSelection(0);\n  }\n  async remakePanelWithSelection(ndx) {\n    while (this._element.hasChildNodes())\n      this._element.removeChild(this._element.firstChild);\n    this._selectedRealityModelIndex = ndx;\n    this._realityModelListDiv = document.createElement(\"div\");\n    this._realityModelListDiv.style.display = \"block\";\n    this._element.appendChild(this._realityModelListDiv);\n    return this.populate();\n  }\n  populateRealityModelList() {\n    this._realityModels = [];\n    this._vp.view.displayStyle.forEachRealityModel((x) => {\n      const realityModel = new ContextModel(x);\n      this._realityModels.push({ realityModel, modelName: realityModel.name });\n    });\n    if (this._vp.view.isSpatialView()) {\n      for (const modelId of this._vp.view.modelSelector.models) {\n        const model = this._vp.iModel.models.getLoaded(modelId);\n        if (model instanceof SpatialModelState && model.isRealityModel) {\n          const realityModel = new PersistentModel(model, this._vp.view.displayStyle.settings);\n          this._realityModels.push({ realityModel, modelName: realityModel.name });\n        }\n      }\n    }\n    const entries = this._realityModels.map((realityModel, i) => {\n      return { name: realityModel.modelName, value: i };\n    });\n    clearElement(this._realityModelListDiv);\n    const activeIndex = this._selectedRealityModelIndex;\n    createComboBox({\n      parent: this._realityModelListDiv,\n      id: \"Point Cloud Selection Box\",\n      name: \"Reality Models: \",\n      value: activeIndex,\n      handler: (select) => {\n        const valueIndex = Number.parseInt(select.value, 10);\n        void this.remakePanelWithSelection(valueIndex);\n      },\n      entries\n    });\n  }\n  async populate() {\n    if (!this._vp || !this._vp.view.isSpatialView())\n      return;\n    this.populateRealityModelList();\n    const realityModel = this._realityModels.at(this._selectedRealityModelIndex)?.realityModel;\n    if (void 0 === realityModel)\n      return;\n    createRealityModelSettingsPanel(realityModel, this._element);\n  }\n  get isOpen() {\n    return \"none\" !== this._element.style.display;\n  }\n  _open() {\n    this._element.style.display = \"block\";\n  }\n  _close() {\n    this._element.style.display = \"none\";\n  }\n}\n",
      "start": 1693508121433,
      "end": 1693508121720,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/RealityModelDisplaySettingsWidget.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport {\r\n  DisplayStyleSettings, FeatureAppearance, FeatureAppearanceProps, PointCloudDisplayProps, RealityModelDisplayProps, RealityModelDisplaySettings,\r\n} from \"@itwin/core-common\";\r\nimport {\r\n  ContextRealityModelState, IModelApp, ScreenViewport, SpatialModelState, Tool, Viewport,\r\n} from \"@itwin/core-frontend\";\r\nimport {\r\n  ComboBoxEntry,\r\n  convertHexToRgb, createCheckBox, createColorInput, createComboBox, createRadioBox, createSlider,\r\n} from \"@itwin/frontend-devtools\";\r\nimport { Surface } from \"./Surface\";\r\nimport { ToolBarDropDown } from \"./ToolBar\";\r\nimport { Window } from \"./Window\";\r\n\r\ninterface RealityModel {\r\n  readonly name: string;\r\n  settings: RealityModelDisplaySettings;\r\n  appearance: FeatureAppearance | undefined;\r\n}\r\n\r\nclass ContextModel implements RealityModel {\r\n  private readonly _state: ContextRealityModelState;\r\n\r\n  public constructor(state: ContextRealityModelState) {\r\n    this._state = state;\r\n  }\r\n\r\n  public get name() { return this._state.name || this._state.orbitGtBlob?.blobFileName || this._state.url; }\r\n\r\n  public get settings() { return this._state.displaySettings; }\r\n  public set settings(value: RealityModelDisplaySettings) { this._state.displaySettings = value; }\r\n\r\n  public get appearance() { return this._state.appearanceOverrides; }\r\n  public set appearance(value: FeatureAppearance | undefined) { this._state.appearanceOverrides = value; }\r\n}\r\n\r\nclass PersistentModel implements RealityModel {\r\n  private readonly _model: SpatialModelState;\r\n  private readonly _settings: DisplayStyleSettings;\r\n\r\n  public constructor(model: SpatialModelState, settings: DisplayStyleSettings) {\r\n    this._model = model;\r\n    this._settings = settings;\r\n  }\r\n\r\n  public get name() { return this._model.name ?? this._model.jsonProperties.tilesetUrl; }\r\n\r\n  public get settings() { return this._settings.getRealityModelDisplaySettings(this._model.id) ?? RealityModelDisplaySettings.defaults; }\r\n  public set settings(value: RealityModelDisplaySettings) { this._settings.setRealityModelDisplaySettings(this._model.id, value); }\r\n\r\n  public get appearance() { return this._settings.getModelAppearanceOverride(this._model.id); }\r\n  public set appearance(value: FeatureAppearance | undefined) {\r\n    if (value)\r\n      this._settings.overrideModelAppearance(this._model.id, value);\r\n    else\r\n      this._settings.dropModelAppearanceOverride(this._model.id);\r\n  }\r\n}\r\n\r\nfunction createRealityModelSettingsPanel(model: RealityModel, element: HTMLElement) {\r\n  const updateSettings = (props: RealityModelDisplayProps) => model.settings = model.settings.clone(props);\r\n  const updateAppearance = (props: FeatureAppearanceProps | undefined) => {\r\n    if (!props)\r\n      model.appearance = undefined;\r\n    else if (!model.appearance)\r\n      model.appearance = FeatureAppearance.fromJSON(props);\r\n    else\r\n      model.appearance = model.appearance.clone(props);\r\n  };\r\n\r\n  // Color\r\n  const colorDiv = document.createElement(\"div\");\r\n  element.appendChild(colorDiv);\r\n\r\n  const colorCb = document.createElement(\"input\");\r\n  colorCb.type = \"checkbox\";\r\n  colorCb.id = \"rms_cbColor\";\r\n  colorDiv.appendChild(colorCb);\r\n\r\n  const updateColor = () => updateAppearance(colorCb.checked ? { rgb: convertHexToRgb(colorInput.value) } : undefined);\r\n  const colorInput = createColorInput({\r\n    parent: colorDiv,\r\n    id: \"rms_color\",\r\n    label: \"Color\",\r\n    value: model.appearance?.rgb?.toHexString() ?? \"#ffffff\",\r\n    display: \"inline\",\r\n    disabled: !colorCb.checked,\r\n    handler: updateColor,\r\n  }).input;\r\n\r\n  colorCb.addEventListener(\"click\", () => {\r\n    colorInput.disabled = !colorCb.checked;\r\n    colorRatio.slider.disabled = !colorCb.checked;\r\n    updateColor();\r\n  });\r\n\r\n  const colorRatio = createSlider({\r\n    parent: colorDiv, id: \"rms_ratio\", name: \" Ratio \",\r\n    min: \"0\", max: \"1\", step: \"0.05\",\r\n    value: model.settings.overrideColorRatio.toString(),\r\n    readout: \"right\", verticalAlign: false, textAlign: false,\r\n    handler: (slider) => {\r\n      const overrideColorRatio = Number.parseFloat(slider.value);\r\n      if (!Number.isNaN(overrideColorRatio))\r\n        updateSettings({ overrideColorRatio });\r\n    },\r\n  });\r\n  colorRatio.div.style.display = \"inline\";\r\n  colorRatio.slider.disabled = !colorCb.checked;\r\n\r\n  // Point shape\r\n  const updatePointCloud = (props: PointCloudDisplayProps) => updateSettings(model.settings.clone({ pointCloud: props }));\r\n  createCheckBox({\r\n    name: \"Square points:\", id: \"rms_square\",\r\n    parent: element,\r\n    isChecked: model.settings.pointCloud.shape === \"square\",\r\n    handler: (cb) => updatePointCloud({ shape: cb.checked ? \"square\" : \"round\" }),\r\n  });\r\n\r\n  // Point size mode\r\n  const setSizeMode = (mode: string) => {\r\n    const isPixel = mode === \"pixel\";\r\n    updatePointCloud({ sizeMode: isPixel ? \"pixel\" : \"voxel\" });\r\n    pixelSizeSlider.style.display = isPixel ? \"inline\" : \"none\";\r\n    voxelSizeSlider.style.display = isPixel ? \"none\" : \"inline\";\r\n  };\r\n\r\n  const sizeMode = createRadioBox({\r\n    id: \"rms_sizeMode\",\r\n    defaultValue: model.settings.pointCloud.sizeMode,\r\n    entries: [\r\n      { value: \"voxel\", label: \"Voxel\" },\r\n      { value: \"pixel\", label: \"Pixel\" },\r\n    ],\r\n    parent: element,\r\n    handler: (value) => setSizeMode(value),\r\n  });\r\n  sizeMode.form.style.display = \"inline\";\r\n\r\n  // Pixel size\r\n  const voxelSizeSlider = createSlider({\r\n    name: \" Size \", id: \"rms_scale\", parent: sizeMode.div,\r\n    min: \"0.25\", max: \"10\", step: \"0.25\",\r\n    value: model.settings.pointCloud.voxelScale.toString(),\r\n    readout: \"right\", verticalAlign: false, textAlign: false,\r\n    handler: (slider) => {\r\n      const scale = Number.parseFloat(slider.value);\r\n      if (!Number.isNaN(scale))\r\n        updatePointCloud({ voxelScale: scale });\r\n    },\r\n  }).div;\r\n\r\n  const pixelSizeSlider = createSlider({\r\n    name: \" Size \", id: \"rms_size\", parent: sizeMode.div,\r\n    min: \"1\", max: \"64\", step: \"1\",\r\n    value: model.settings.pointCloud.pixelSize.toString(),\r\n    readout: \"right\", verticalAlign: false, textAlign: false,\r\n    handler: (slider) => {\r\n      const pixelSize = Number.parseInt(slider.value, 10);\r\n      if (!Number.isNaN(pixelSize))\r\n        updatePointCloud({ pixelSize });\r\n    },\r\n  }).div;\r\n\r\n  setSizeMode(model.settings.pointCloud.sizeMode);\r\n\r\n  //  ----------------- EDL -----------------\r\n  const setEDLMode = (mode: string) => {\r\n    const isOn = mode !== \"off\";\r\n    const isFull = mode === \"full\";\r\n    updatePointCloud({ edlMode: isOn ? (isFull ? \"full\" : \"on\") : \"off\" });\r\n    edlFilter.style.display = isFull ? \"\" : \"none\";\r\n    edlMixWt1Slider.style.display = isFull ? \"\" : \"none\";\r\n    edlMixWt2Slider.style.display = isFull ? \"\" : \"none\";\r\n    edlMixWt4Slider.style.display = isFull ? \"\" : \"none\";\r\n  };\r\n\r\n  const hr = document.createElement(\"hr\");\r\n  hr.style.borderColor = \"grey\";\r\n  element.appendChild(hr);\r\n\r\n  const edlDiv = document.createElement(\"div\");\r\n  element.appendChild(edlDiv);\r\n  edlDiv.style.display = \"inline\";\r\n\r\n  const label1 = document.createElement(\"label\");\r\n  label1.innerText = \"EDL \";\r\n  label1.style.display = \"inline\";\r\n  edlDiv.appendChild(label1);\r\n\r\n  const edlMode = createRadioBox({\r\n    id: \"pcs_edlMode\",\r\n    defaultValue: model.settings.pointCloud.edlMode,\r\n    entries: [\r\n      { value: \"off\", label: \"Off \" },\r\n      { value: \"on\", label: \"On \" },\r\n      { value: \"full\", label: \"Full \" },\r\n    ],\r\n    parent: edlDiv,\r\n    handler: (value) => setEDLMode(value),\r\n  });\r\n  edlMode.div.style.display = edlMode.form.style.display = \"inline\";\r\n\r\n  // EDL strength\r\n  const edlStrengthSlider = createSlider({\r\n    name: \" Strength \", id: \"pcs_strength\", parent: element,\r\n    min: \"0.0\", max: \"25\", step: \"0.25\",\r\n    value: model.settings.pointCloud.edlStrength.toString(),\r\n    readout: \"right\", verticalAlign: false, textAlign: false,\r\n    handler: (slider) => {\r\n      const scale = Number.parseFloat(slider.value);\r\n      if (!Number.isNaN(scale))\r\n        updatePointCloud({ edlStrength: scale });\r\n    },\r\n  }).div;\r\n  edlStrengthSlider.style.display = \"\";\r\n\r\n  // EDL radius\r\n  const edlRadiusSlider = createSlider({\r\n    name: \" Radius \", id: \"pcs_radius\", parent: element,\r\n    min: \"0.0\", max: \"25\", step: \"0.25\",\r\n    value: model.settings.pointCloud.edlRadius.toString(),\r\n    readout: \"right\", verticalAlign: false, textAlign: false,\r\n    handler: (slider) => {\r\n      const scale = Number.parseFloat(slider.value);\r\n      if (!Number.isNaN(scale))\r\n        updatePointCloud({ edlRadius: scale });\r\n    },\r\n  }).div;\r\n  edlRadiusSlider.style.display = \"\";\r\n\r\n  const edlFilter = createCheckBox({\r\n    name: \" Filter\", id: \"pcs_filter\",\r\n    parent: element,\r\n    isChecked: model.settings.pointCloud.edlFilter === 1,\r\n    handler: (cb) => updatePointCloud({ edlFilter: cb.checked ? 1 : 0 }),\r\n  }).div;\r\n\r\n  const edlMixWt1Slider = createSlider({\r\n    name: \" Mix Wt 1 \", id: \"pcs_mixwt1\", parent: element,\r\n    min: \"0.0\", max: \"1\", step: \"0.01\",\r\n    value: model.settings.pointCloud.edlMixWts1?.toString() ?? \"1\",\r\n    readout: \"right\", verticalAlign: false, textAlign: false,\r\n    handler: (slider) => {\r\n      const scale = Number.parseFloat(slider.value);\r\n      if (!Number.isNaN(scale))\r\n        updatePointCloud({ edlMixWts1: scale });\r\n    },\r\n  }).div;\r\n  edlMixWt1Slider.style.display = \"\";\r\n\r\n  const edlMixWt2Slider = createSlider({\r\n    name: \" Mix Wt 2 \", id: \"pcs_mixwt2\", parent: element,\r\n    min: \"0.0\", max: \"1\", step: \"0.01\",\r\n    value: model.settings.pointCloud.edlMixWts2?.toString() ?? \"0.5\",\r\n    readout: \"right\", verticalAlign: false, textAlign: false,\r\n    handler: (slider) => {\r\n      const scale = Number.parseFloat(slider.value);\r\n      if (!Number.isNaN(scale))\r\n        updatePointCloud({ edlMixWts2: scale });\r\n    },\r\n  }).div;\r\n  edlMixWt2Slider.style.display = \"\";\r\n\r\n  const edlMixWt4Slider = createSlider({\r\n    name: \" Mix Wt 4 \", id: \"pcs_mixwt4\", parent: element,\r\n    min: \"0.0\", max: \"1\", step: \"0.01\",\r\n    value: model.settings.pointCloud.edlMixWts4?.toString() ?? \"0.25\",\r\n    readout: \"right\", verticalAlign: false, textAlign: false,\r\n    handler: (slider) => {\r\n      const scale = Number.parseFloat(slider.value);\r\n      if (!Number.isNaN(scale))\r\n        updatePointCloud({ edlMixWts4: scale });\r\n    },\r\n  }).div;\r\n  edlMixWt4Slider.style.display = \"\";\r\n\r\n  setEDLMode(model.settings.pointCloud.edlMode);\r\n}\r\n\r\nconst viewportIdsWithOpenWidgets = new Set<number>();\r\n\r\n// size of widget or panel\r\nconst winSize = { top: 0, left: 0, width: 408, height: 300 };\r\n\r\nclass RealityModelSettingsWidget extends Window {\r\n  private readonly _windowId: string;\r\n  private readonly _viewport: Viewport;\r\n  private readonly _dispose: () => void;\r\n\r\n  public constructor(viewport: Viewport, model: RealityModel) {\r\n    super(Surface.instance, winSize);\r\n    this._viewport = viewport;\r\n\r\n    this._windowId = `realityModelSettings-${viewport.viewportId}-${model.name}`;\r\n    this.isPinned = true;\r\n    this.title = model.name;\r\n\r\n    const element = document.createElement(\"div\");\r\n    element.className = \"debugPanel\";\r\n    element.style.height = \"96%\";\r\n    element.style.width = \"98%\";\r\n    element.style.top = \"0px\";\r\n    element.style.left = \"0px\";\r\n    element.style.zIndex = \"inherit\";\r\n    this.contentDiv.appendChild(element);\r\n\r\n    createRealityModelSettingsPanel(model, element);\r\n    this.container.style.display = \"flex\";\r\n\r\n    const removals = [\r\n      viewport.onChangeView.addOnce(() => this.close()),\r\n      viewport.onDisposed.addOnce(() => this.close()),\r\n    ];\r\n\r\n    this._dispose = () => removals.forEach((removal) => removal());\r\n  }\r\n\r\n  private close(): void {\r\n    this.surface.close(this);\r\n  }\r\n\r\n  public override onClosed(): void {\r\n    this._dispose();\r\n    viewportIdsWithOpenWidgets.delete(this._viewport.viewportId);\r\n  }\r\n\r\n  public get windowId() { return this._windowId; }\r\n  public override get isResizable() { return false; }\r\n}\r\n\r\nexport class OpenRealityModelSettingsTool extends Tool {\r\n  public static override toolId = \"OpenRealityModelSettings\";\r\n  public static override get minArgs() { return 0; }\r\n  public static override get maxArgs() { return 1; }\r\n\r\n  public override async run(vp?: Viewport, model?: RealityModel): Promise<boolean> {\r\n    if (!vp || !model)\r\n      return false;\r\n\r\n    const win = new RealityModelSettingsWidget(vp, model);\r\n    win.surface.addWindow(win);\r\n    win.surface.element.appendChild(win.container);\r\n\r\n    return true;\r\n  }\r\n\r\n  public override async parseAndRun(): Promise<boolean> {\r\n    const vp = IModelApp.viewManager.selectedView;\r\n    if (!vp || !vp.view.isSpatialView())\r\n      return false;\r\n\r\n    if (viewportIdsWithOpenWidgets.has(vp.viewportId))\r\n      return true;\r\n\r\n    // ###TODO permit specific reality model to be specified in args.\r\n    // For now use first one we can find.\r\n    let realityModel: RealityModel | undefined;\r\n    vp.view.displayStyle.forEachRealityModel((x) => {\r\n      realityModel = realityModel ?? new ContextModel(x);\r\n    });\r\n\r\n    if (!realityModel) {\r\n      for (const modelId of vp.view.modelSelector.models) {\r\n        const model = vp.iModel.models.getLoaded(modelId);\r\n        if (model instanceof SpatialModelState && model.isRealityModel) {\r\n          realityModel = new PersistentModel(model, vp.view.displayStyle.settings);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return realityModel ? this.run(vp, realityModel) : false;\r\n  }\r\n}\r\n\r\nfunction clearElement(element: HTMLElement): void {\r\n  while (element.hasChildNodes())\r\n    element.removeChild(element.firstChild!);\r\n}\r\n\r\nexport class RealityModelSettingsPanel extends ToolBarDropDown {\r\n  private readonly _vp: ScreenViewport;\r\n  private readonly _parent: HTMLElement;\r\n  private readonly _element: HTMLElement;\r\n  private _realityModelListDiv: HTMLDivElement;\r\n  private _selectedRealityModelIndex: number = 0;\r\n  private _realityModels: Array<{ realityModel: RealityModel, modelName: string }> = [];\r\n\r\n  public constructor(vp: ScreenViewport, parent: HTMLElement) {\r\n    super();\r\n    this._vp = vp;\r\n    this._parent = parent;\r\n\r\n    this._realityModelListDiv = document.createElement(\"div\");\r\n    this._realityModelListDiv.style.display = \"block\";\r\n\r\n    this._element = document.createElement(\"div\");\r\n    this._element.className = \"toolMenu\";\r\n    this._element.style.display = \"block\";\r\n    this._element.style.overflowX = \"none\";\r\n    this._element.style.overflowY = \"none\";\r\n    const width = winSize.width * 0.98;\r\n    this._element.style.width = `${width}px`;\r\n    parent.appendChild(this._element);\r\n    this._element.appendChild(this._realityModelListDiv);\r\n  }\r\n\r\n  public override get onViewChanged(): Promise<void> | undefined {\r\n    return this.remakePanelWithSelection(0);\r\n  }\r\n\r\n  private async remakePanelWithSelection(ndx: number) {\r\n    while (this._element.hasChildNodes())\r\n      this._element.removeChild(this._element.firstChild!);\r\n    this._selectedRealityModelIndex = ndx;\r\n    this._realityModelListDiv = document.createElement(\"div\");\r\n    this._realityModelListDiv.style.display = \"block\";\r\n    this._element.appendChild(this._realityModelListDiv);\r\n    return this.populate();\r\n  }\r\n\r\n  private populateRealityModelList(): void {\r\n    this._realityModels = [];\r\n    this._vp.view.displayStyle.forEachRealityModel((x) => {\r\n      const realityModel = new ContextModel(x);\r\n      this._realityModels.push({ realityModel, modelName: realityModel.name });\r\n    });\r\n    if (this._vp.view.isSpatialView()) {\r\n      for (const modelId of this._vp.view.modelSelector.models) {\r\n        const model = this._vp.iModel.models.getLoaded(modelId);\r\n        if (model instanceof SpatialModelState && model.isRealityModel) {\r\n          const realityModel = new PersistentModel(model, this._vp.view.displayStyle.settings);\r\n          this._realityModels.push({ realityModel, modelName: realityModel.name });\r\n        }\r\n      }\r\n    }\r\n    // create list of entries\r\n    const entries = this._realityModels.map((realityModel, i) => {\r\n      return ({ name: realityModel.modelName, value: i } as ComboBoxEntry);\r\n    });\r\n\r\n    clearElement(this._realityModelListDiv);\r\n    const activeIndex = this._selectedRealityModelIndex;\r\n    createComboBox({\r\n      parent: this._realityModelListDiv,\r\n      id: \"Point Cloud Selection Box\",\r\n      name: \"Reality Models: \",\r\n      value: activeIndex,\r\n      handler: (select) => {\r\n        const valueIndex = Number.parseInt(select.value, 10);\r\n        void this.remakePanelWithSelection(valueIndex);\r\n      },\r\n      entries,\r\n    });\r\n  }\r\n\r\n  public async populate(): Promise<void> {\r\n    if (!this._vp || !this._vp.view.isSpatialView())\r\n      return;\r\n    this.populateRealityModelList();\r\n    const realityModel = this._realityModels.at(this._selectedRealityModelIndex)?.realityModel;\r\n    if (undefined === realityModel)\r\n      return;\r\n\r\n    createRealityModelSettingsPanel(realityModel, this._element);\r\n  }\r\n\r\n  public get isOpen(): boolean { return \"none\" !== this._element.style.display; }\r\n  protected _open(): void { this._element.style.display = \"block\"; }\r\n  protected _close(): void { this._element.style.display = \"none\"; }\r\n}\r\n"
        ],
        "mappings": "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",
        "names": []
      }
    }
  ]
}
