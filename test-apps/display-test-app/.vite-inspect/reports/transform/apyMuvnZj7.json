{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/GraphicParams.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Symbology\n */\nimport { ColorDef } from \"./ColorDef\";\nimport { LinePixels } from \"./LinePixels\";\n/** Flags indicating whether and how the interiors of closed planar regions is displayed within a view.\n * @public\n * @extensions\n */\nexport var FillFlags;\n(function (FillFlags) {\n    /** No fill */\n    FillFlags[FillFlags[\"None\"] = 0] = \"None\";\n    /** Use the element's fill color when fill is enabled in the view's [[ViewFlags]]. */\n    FillFlags[FillFlags[\"ByView\"] = 1] = \"ByView\";\n    /** Use the element's fill color even when fill is disabled in the view's [[ViewFlags]]. */\n    FillFlags[FillFlags[\"Always\"] = 2] = \"Always\";\n    /** Render the fill behind other geometry belonging to the same element.\n     * For example if an element's geometry contains text with background fill, the text always renders in front of the fill.\n     */\n    FillFlags[FillFlags[\"Behind\"] = 4] = \"Behind\";\n    /** Combines Behind and Always flags. */\n    FillFlags[FillFlags[\"Blanking\"] = 6] = \"Blanking\";\n    /** Use the view's background color instead of the element's fill color. */\n    FillFlags[FillFlags[\"Background\"] = 8] = \"Background\";\n})(FillFlags || (FillFlags = {}));\n/** The \"cooked\" material and symbology for a [[RenderGraphic]]. This determines the appearance\n * (e.g. texture, color, width, linestyle, etc.) used to draw Geometry.\n * @public\n */\nexport class GraphicParams {\n    constructor() {\n        /** Describes how fill is applied to planar regions in wireframe mode. */\n        this.fillFlags = FillFlags.None;\n        /** The line pattern applied to curves and edges. */\n        this.linePixels = LinePixels.Solid;\n        /** The width, in pixels, of curves and edges. Values are clamped to [1..31] at display time. */\n        this.rasterWidth = 1;\n        /** The color of curves and edges. */\n        this.lineColor = ColorDef.black;\n        /** The color of surfaces. */\n        this.fillColor = ColorDef.black;\n    }\n    /** Set the transparency of the line color, where 0=fully opaque and 255=full transparent. */\n    setLineTransparency(transparency) { this.lineColor = this.lineColor.withTransparency(transparency); }\n    /** Set the transparency of the fill color, where 0=fully opaque and 255=full transparent. */\n    setFillTransparency(transparency) { this.fillColor = this.fillColor.withTransparency(transparency); }\n    clone(out) {\n        out = out ?? new GraphicParams();\n        out.fillFlags = this.fillFlags;\n        out.linePixels = this.linePixels;\n        out.rasterWidth = this.rasterWidth;\n        out.lineColor = this.lineColor;\n        out.fillColor = this.fillColor;\n        out.material = this.material;\n        out.gradient = this.gradient;\n        return out;\n    }\n    /** Conveniently create a GraphicParams the most commonly-used properties. */\n    static fromSymbology(lineColor, fillColor, lineWidth, linePixels = LinePixels.Solid) {\n        const graphicParams = new GraphicParams();\n        graphicParams.lineColor = lineColor;\n        graphicParams.fillColor = fillColor;\n        graphicParams.rasterWidth = lineWidth;\n        graphicParams.linePixels = linePixels;\n        return graphicParams;\n    }\n    /** Create a GraphicParams with blanking fill of the specified color.\n     * @see [[FillFlags.Blanking]].\n     */\n    static fromBlankingFill(fillColor) {\n        const graphicParams = new GraphicParams();\n        graphicParams.fillColor = fillColor;\n        graphicParams.fillFlags = FillFlags.Blanking;\n        return graphicParams;\n    }\n}\n//# sourceMappingURL=GraphicParams.js.map",
      "start": 1693508120805,
      "end": 1693508120900,
      "sourcemaps": null
    }
  ]
}
