{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/webgl/ClipVolume.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module WebGL\n */\nimport { assert } from \"@itwin/core-bentley\";\nimport { Point3d, Transform, Vector3d, } from \"@itwin/core-geometry\";\nimport { RenderClipVolume } from \"../RenderClipVolume\";\nconst scratch = {\n    normal: new Vector3d(),\n    dir: new Vector3d(),\n    pos: new Point3d(),\n    v0: new Vector3d(),\n};\n/** Maintains an ArrayBuffer to serve as texture data for a ClipVector.\n * The clip planes are in view coordinates, so the data must be updated whenever the view\n * matrix changes.\n */\nclass ClipPlanesBuffer {\n    getData(viewMatrix) {\n        if (!viewMatrix.isAlmostEqual(this._viewMatrix))\n            this.updateData(viewMatrix);\n        return this._data;\n    }\n    get byteLength() {\n        return this._view.buffer.byteLength;\n    }\n    static create(clips, numRows) {\n        assert(numRows > 1); // at least one plane, plus a union boundary.\n        return new ClipPlanesBuffer(clips, numRows);\n    }\n    constructor(clips, numRows) {\n        /** Most recently-applied view matrix. */\n        this._viewMatrix = Transform.createZero();\n        /** The current write position. */\n        this._curPos = 0;\n        this._data = new Uint8Array(numRows * 4 * 4);\n        this._view = new DataView(this._data.buffer);\n        this._clips = clips;\n        this.numRows = numRows;\n        this._append = (value) => this.appendFloat(value);\n    }\n    appendFloat(value) {\n        this._view.setFloat32(this._curPos, value, true);\n        this.advance(4);\n    }\n    appendUint8(value) {\n        this._view.setUint8(this._curPos, value);\n        this.advance(1);\n    }\n    appendValues(a, b, c, d) {\n        this._append(a);\n        this._append(b);\n        this._append(c);\n        this._append(d);\n    }\n    appendPlane(normal, distance) {\n        this.appendValues(normal.x, normal.y, normal.z, distance);\n    }\n    appendSetBoundary() {\n        this.appendValues(0, 0, 0, 0);\n    }\n    appendUnionBoundary() {\n        this.appendValues(2, 2, 2, 0);\n    }\n    appendEncodedFloat(value) {\n        const sign = value < 0 ? 1 : 0;\n        value = Math.abs(value);\n        const exponent = Math.floor(Math.log10(value)) + 1;\n        value = value / Math.pow(10, exponent);\n        const bias = 38;\n        let temp = value * 256;\n        const b0 = Math.floor(temp);\n        temp = (temp - b0) * 256;\n        const b1 = Math.floor(temp);\n        temp = (temp - b1) * 256;\n        const b2 = Math.floor(temp);\n        const b3 = (exponent + bias) * 2 + sign;\n        this.appendUint8(b0);\n        this.appendUint8(b1);\n        this.appendUint8(b2);\n        this.appendUint8(b3);\n    }\n    advance(numBytes) {\n        this._curPos += numBytes;\n    }\n    reset() {\n        this._curPos = 0;\n    }\n    updateData(transform) {\n        this.reset();\n        transform.clone(this._viewMatrix);\n        const { normal, dir, pos, v0 } = { ...scratch };\n        for (const clip of this._clips) {\n            for (let j = 0; j < clip.convexSets.length; j++) {\n                const set = clip.convexSets[j];\n                if (0 === set.planes.length)\n                    continue;\n                if (j > 0)\n                    this.appendSetBoundary();\n                for (const plane of set.planes) {\n                    plane.inwardNormalRef.clone(normal);\n                    let distance = plane.distance;\n                    const norm = normal;\n                    transform.matrix.multiplyVector(norm, dir);\n                    dir.normalizeInPlace();\n                    transform.multiplyPoint3d(norm.scale(distance, v0), pos);\n                    v0.setFromPoint3d(pos);\n                    normal.set(dir.x, dir.y, dir.z);\n                    distance = -v0.dotProduct(dir);\n                    this.appendPlane(normal, distance);\n                }\n            }\n            this.appendUnionBoundary();\n        }\n    }\n}\n/** A ClipVector encoded for transmission to the GPU as a texture.\n * @internal\n */\nexport class ClipVolume extends RenderClipVolume {\n    get numRows() {\n        return this._buffer.numRows;\n    }\n    get byteLength() {\n        return this._buffer.byteLength;\n    }\n    getData(viewMatrix) {\n        return this._buffer.getData(viewMatrix);\n    }\n    static create(clip) {\n        if (!clip.isValid)\n            return undefined;\n        // Compute how many rows of data we need.\n        const unions = [];\n        let numRows = 0;\n        for (const primitive of clip.clips) {\n            const union = primitive.fetchClipPlanesRef();\n            if (!union)\n                continue;\n            let numSets = 0;\n            for (const set of union.convexSets) {\n                const setLength = set.planes.length;\n                if (setLength > 0) {\n                    ++numSets;\n                    numRows += setLength;\n                }\n            }\n            if (numSets > 0) {\n                unions.push(union);\n                numRows += numSets - 1; // Additional boundary rows between sets.\n            }\n        }\n        if (unions.length === 0)\n            return undefined;\n        numRows += unions.length; // Additional boundary row after each union - *including* the last union.\n        const buffer = ClipPlanesBuffer.create(unions, numRows);\n        return new ClipVolume(clip, buffer);\n    }\n    constructor(clip, buffer) {\n        super(clip);\n        this._buffer = buffer;\n    }\n}\n//# sourceMappingURL=ClipVolume.js.map",
      "start": 1693508124511,
      "end": 1693508124557,
      "sourcemaps": null
    }
  ]
}
