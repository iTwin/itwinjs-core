{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/webgl/glsl/RenderPass.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module WebGL\n */\n// render passes actually used in shader code.\nconst renderPasses = [\n    [0 /* RenderPass.Background */, \"Background\"],\n    [1 /* RenderPass.OpaqueLayers */, \"Layers\"],\n    [2 /* RenderPass.OpaqueLinear */, \"OpaqueLinear\"],\n    [3 /* RenderPass.OpaquePlanar */, \"OpaquePlanar\"],\n    [5 /* RenderPass.OpaqueGeneral */, \"OpaqueGeneral\"],\n    [6 /* RenderPass.Classification */, \"Classification\"],\n    [8 /* RenderPass.Translucent */, \"Translucent\"],\n    [9 /* RenderPass.HiddenEdge */, \"HiddenEdge\"],\n    [10 /* RenderPass.Hilite */, \"Hilite\"],\n    [12 /* RenderPass.WorldOverlay */, \"WorldOverlay\"],\n    [13 /* RenderPass.ViewOverlay */, \"ViewOverlay\"],\n    [19 /* RenderPass.PlanarClassification */, \"PlanarClassification\"],\n];\n/**\n * Adds a uniform holding the current render pass and a set of kRenderPass_* constants\n * uniform float u_renderPass\n * @internal\n */\nexport function addRenderPass(builder) {\n    builder.addUniform(\"u_renderPass\", 2 /* VariableType.Float */, (prog) => {\n        prog.addProgramUniform(\"u_renderPass\", (uniform, params) => {\n            let renderPass = params.renderPass;\n            switch (renderPass) {\n                case 9 /* RenderPass.HiddenEdge */:\n                    renderPass = 5 /* RenderPass.OpaqueGeneral */; // no distinction from shader POV...\n                    break;\n                case 11 /* RenderPass.OverlayLayers */:\n                case 7 /* RenderPass.TranslucentLayers */:\n                    renderPass = 1 /* RenderPass.OpaqueLayers */; // no distinction from shader POV...\n                    break;\n            }\n            uniform.setUniform1f(renderPass);\n        });\n    });\n    for (const renderPass of renderPasses)\n        builder.addGlobal(`kRenderPass_${renderPass[1]}`, 2 /* VariableType.Float */, `${renderPass[0].toString()}.0`, true);\n}\n//# sourceMappingURL=RenderPass.js.map",
      "start": 1693508126516,
      "end": 1693508126589,
      "sourcemaps": null
    }
  ]
}
