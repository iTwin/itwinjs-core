{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/BackgroundMapSettings.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module DisplayStyles\n */\nimport { BackgroundMapProvider, BackgroundMapType } from \"./BackgroundMapProvider\";\nimport { PlanarClipMaskSettings } from \"./PlanarClipMask\";\nimport { TerrainSettings } from \"./TerrainSettings\";\n/** Describes the projection of the background map\n * @see [[BackgroundMapProps]]\n * @see [[DisplayStyleSettingsProps]]\n * @public\n * @extensions\n */\nexport var GlobeMode;\n(function (GlobeMode) {\n    /** Display Earth as 3d ellipsoid */\n    GlobeMode[GlobeMode[\"Ellipsoid\"] = 0] = \"Ellipsoid\";\n    /** Display Earth as plane. */\n    GlobeMode[GlobeMode[\"Plane\"] = 1] = \"Plane\";\n})(GlobeMode || (GlobeMode = {}));\nfunction normalizeGlobeMode(mode) {\n    return GlobeMode.Plane === mode ? mode : GlobeMode.Ellipsoid;\n}\nfunction normalizeTransparency(trans) {\n    if (\"number\" === typeof trans)\n        return Math.min(1, Math.max(0, trans));\n    return false;\n}\n/** As part of a [[DisplayStyleSettings]], controls aspects of how the background map is displayed.\n * @see [[DisplayStyleSettings.backgroundMap]] to query or change these settings for a display style.\n * @see [[MapImagerySettings]] to control the type of imagery applied to the background map.\n * @public\n */\nexport class BackgroundMapSettings {\n    /** If false, the map will be treated as non-locatable - i.e., tools will not interact with it. This is particularly useful when the map is transparent - it\n     * allows the user to select elements that are behind the map.\n     */\n    get locatable() {\n        // Handle legacy TerrainProps.nonLocatable:\n        // - If TerrainProps.nonLocatable=true and terrain is on, terrain is not locatable.\n        // - Otherwise, use BackgroundMapProps.nonLocatable.\n        if (this.applyTerrain && this.terrainSettings.nonLocatable)\n            return false;\n        return this._locatable;\n    }\n    /** If transparency is overridden, the transparency to apply; otherwise, undefined. */\n    get transparencyOverride() { return false !== this.transparency ? this.transparency : undefined; }\n    constructor(props) {\n        this.groundBias = props.groundBias ?? 0;\n        this.transparency = normalizeTransparency(props.transparency);\n        this.useDepthBuffer = props.useDepthBuffer ?? false;\n        this.applyTerrain = props.applyTerrain ?? false;\n        this.terrainSettings = TerrainSettings.fromJSON(props.terrainSettings);\n        this.globeMode = normalizeGlobeMode(props.globeMode);\n        this._locatable = true !== props.nonLocatable;\n        this.planarClipMask = PlanarClipMaskSettings.fromJSON(props.planarClipMask);\n        this._provider = BackgroundMapProvider.fromBackgroundMapProps(props);\n    }\n    /** Create settings from their persistent representation. In general, this method should only be used when reading the settings directly from\n     * the iModel - otherwise, prefer [[fromJSON]].\n     */\n    static fromPersistentJSON(json) {\n        return new this(json ?? {});\n    }\n    /** Construct from JSON, performing validation and applying default values for undefined fields.\n     * @see [[fromPersistentJSON]] if you are reading the settings directly from the iModel.\n     */\n    static fromJSON(json) {\n        return new BackgroundMapSettings(json ?? {});\n    }\n    /** Convert these settings to their in-memory JSON representation.\n     * @see [[toPersistentJSON]] if you intend to write the JSON directly to an iModel.\n     */\n    toJSON() {\n        const props = {};\n        if (0 !== this.groundBias)\n            props.groundBias = this.groundBias;\n        if (this.applyTerrain)\n            props.applyTerrain = true;\n        if (false !== this.transparency)\n            props.transparency = this.transparency;\n        if (GlobeMode.Ellipsoid !== this.globeMode)\n            props.globeMode = this.globeMode;\n        if (this.useDepthBuffer)\n            props.useDepthBuffer = true;\n        if (!this._locatable)\n            props.nonLocatable = true;\n        const terrainSettings = this.terrainSettings.toJSON();\n        for (const prop of Object.values(terrainSettings)) {\n            if (undefined !== prop) {\n                props.terrainSettings = terrainSettings;\n                break;\n            }\n        }\n        if (this.planarClipMask.isValid)\n            props.planarClipMask = this.planarClipMask.toJSON();\n        return props;\n    }\n    /** Convert these settings to their persistent representation. In general, this method should only be used when writing the settings directly to\n     * the iModel - otherwise, prefer [[toJSON]].\n     */\n    toPersistentJSON() {\n        const props = this.toJSON();\n        // Preserve deprecated imagery provider properties.\n        if (\"BingProvider\" !== this._provider.name)\n            props.providerName = this._provider.name; // eslint-disable-line deprecation/deprecation\n        if (BackgroundMapType.Hybrid !== this._provider.type)\n            props.providerData = { mapType: this._provider.type }; // eslint-disable-line deprecation/deprecation\n        return props;\n    }\n    /** Returns true if these settings are equivalent to the supplied JSON settings. */\n    equalsJSON(json) {\n        return this.equals(BackgroundMapSettings.fromJSON(json));\n    }\n    /** Returns true if the persistent representation of these settings is equivalent to `json`. */\n    equalsPersistentJSON(json) {\n        return this.equals(BackgroundMapSettings.fromPersistentJSON(json));\n    }\n    /** Returns true if these settings are equivalent to `other`. */\n    equals(other) {\n        return this.groundBias === other.groundBias && this.useDepthBuffer === other.useDepthBuffer && this.transparency === other.transparency\n            && this.globeMode === other.globeMode && this._locatable === other._locatable && this.applyTerrain === other.applyTerrain\n            && this.terrainSettings.equals(other.terrainSettings) && this.planarClipMask.equals(other.planarClipMask)\n            && this._provider.name === other._provider.name && this._provider.type === other._provider.type;\n    }\n    /** Create a copy of this BackgroundMapSettings, optionally modifying some of its properties.\n     * @param changedProps JSON representation of the properties to change.\n     * @returns A BackgroundMapSettings with all of its properties set to match those of `this`, except those explicitly defined in `changedProps`.\n     */\n    clone(changedProps) {\n        if (undefined === changedProps)\n            return this;\n        const props = {\n            groundBias: changedProps.groundBias ?? this.groundBias,\n            transparency: changedProps.transparency ?? this.transparency,\n            useDepthBuffer: changedProps.useDepthBuffer ?? this.useDepthBuffer,\n            globeMode: changedProps.globeMode ?? this.globeMode,\n            nonLocatable: changedProps.nonLocatable ?? !this._locatable,\n            applyTerrain: changedProps.applyTerrain ?? this.applyTerrain,\n            terrainSettings: changedProps.terrainSettings ? this.terrainSettings.clone(changedProps.terrainSettings).toJSON() : this.terrainSettings.toJSON(),\n            planarClipMask: changedProps.planarClipMask ? this.planarClipMask.clone(changedProps.planarClipMask).toJSON() : this.planarClipMask.toJSON(),\n            providerName: this._provider.name,\n            providerData: { mapType: this._provider.type },\n        };\n        return BackgroundMapSettings.fromPersistentJSON(props);\n    }\n}\n//# sourceMappingURL=BackgroundMapSettings.js.map",
      "start": 1693508120669,
      "end": 1693508120718,
      "sourcemaps": null
    }
  ]
}
