{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/DisplayTransform.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { Matrix3d, Point3d, Transform, YawPitchRollAngles } from \"@itwin/core-geometry\";\r\nimport { IModelApp, Tool } from \"@itwin/core-frontend\";\r\nimport { parseArgs } from \"@itwin/frontend-devtools\";\r\n\r\nclass TransformProvider {\r\n  public constructor(private readonly _models: Set<string>, private readonly _transform: Transform) { }\r\n\r\n  public getModelDisplayTransform(modelId: string): Transform | undefined{\r\n    return this._models.has(modelId) ? this._transform.clone() : undefined;\r\n  }\r\n}\r\n\r\n/** Apply a display transform to all currently displayed models. */\r\nexport class ApplyModelTransformTool extends Tool {\r\n  public static override toolId = \"ApplyModelTransform\";\r\n  public static override get minArgs() { return 0; }\r\n  public static override get maxArgs() { return 5; }\r\n\r\n  public override async run(origin?: Point3d, ypr?: YawPitchRollAngles): Promise<boolean> {\r\n    const vp = IModelApp.viewManager.selectedView;\r\n    if (!vp)\r\n      return false;\r\n\r\n    if (!origin || origin.isAlmostZero)\r\n      if (!ypr || ypr.isIdentity())\r\n        return false;\r\n\r\n    const models = new Set<string>();\r\n    vp.view.forEachModel((model) => models.add(model.id));\r\n\r\n    const mat = ypr ? ypr.toMatrix3d() : Matrix3d.createIdentity();\r\n    const tf = Transform.createRefs(origin, mat);\r\n    vp.setModelDisplayTransformProvider(new TransformProvider(models, tf));\r\n    return true;\r\n  }\r\n\r\n  public override async parseAndRun(...input: string[]): Promise<boolean> {\r\n    const args = parseArgs(input);\r\n    const origin = new Point3d(args.getInteger(\"x\") ?? 0, args.getInteger(\"y\") ?? 0, args.getInteger(\"z\") ?? 0);\r\n    const ypr = YawPitchRollAngles.createDegrees(0, args.getFloat(\"p\") ?? 0, args.getFloat(\"r\") ?? 0);\r\n    return this.run(origin, ypr);\r\n  }\r\n}\r\n",
      "start": 1693508121175,
      "end": 1693508121253,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { Matrix3d, Point3d, Transform, YawPitchRollAngles } from \"@itwin/core-geometry\";\nimport { IModelApp, Tool } from \"@itwin/core-frontend\";\nimport { parseArgs } from \"@itwin/frontend-devtools\";\nclass TransformProvider {\n  constructor(_models, _transform) {\n    this._models = _models;\n    this._transform = _transform;\n  }\n  getModelDisplayTransform(modelId) {\n    return this._models.has(modelId) ? this._transform.clone() : void 0;\n  }\n}\nexport class ApplyModelTransformTool extends Tool {\n  static get minArgs() {\n    return 0;\n  }\n  static get maxArgs() {\n    return 5;\n  }\n  async run(origin, ypr) {\n    const vp = IModelApp.viewManager.selectedView;\n    if (!vp)\n      return false;\n    if (!origin || origin.isAlmostZero) {\n      if (!ypr || ypr.isIdentity())\n        return false;\n    }\n    const models = /* @__PURE__ */ new Set();\n    vp.view.forEachModel((model) => models.add(model.id));\n    const mat = ypr ? ypr.toMatrix3d() : Matrix3d.createIdentity();\n    const tf = Transform.createRefs(origin, mat);\n    vp.setModelDisplayTransformProvider(new TransformProvider(models, tf));\n    return true;\n  }\n  async parseAndRun(...input) {\n    const args = parseArgs(input);\n    const origin = new Point3d(args.getInteger(\"x\") ?? 0, args.getInteger(\"y\") ?? 0, args.getInteger(\"z\") ?? 0);\n    const ypr = YawPitchRollAngles.createDegrees(0, args.getFloat(\"p\") ?? 0, args.getFloat(\"r\") ?? 0);\n    return this.run(origin, ypr);\n  }\n}\nApplyModelTransformTool.toolId = \"ApplyModelTransform\";\n",
      "start": 1693508121253,
      "end": 1693508121398,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-test-app/src/frontend/DisplayTransform.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { Matrix3d, Point3d, Transform, YawPitchRollAngles } from \"@itwin/core-geometry\";\r\nimport { IModelApp, Tool } from \"@itwin/core-frontend\";\r\nimport { parseArgs } from \"@itwin/frontend-devtools\";\r\n\r\nclass TransformProvider {\r\n  public constructor(private readonly _models: Set<string>, private readonly _transform: Transform) { }\r\n\r\n  public getModelDisplayTransform(modelId: string): Transform | undefined{\r\n    return this._models.has(modelId) ? this._transform.clone() : undefined;\r\n  }\r\n}\r\n\r\n/** Apply a display transform to all currently displayed models. */\r\nexport class ApplyModelTransformTool extends Tool {\r\n  public static override toolId = \"ApplyModelTransform\";\r\n  public static override get minArgs() { return 0; }\r\n  public static override get maxArgs() { return 5; }\r\n\r\n  public override async run(origin?: Point3d, ypr?: YawPitchRollAngles): Promise<boolean> {\r\n    const vp = IModelApp.viewManager.selectedView;\r\n    if (!vp)\r\n      return false;\r\n\r\n    if (!origin || origin.isAlmostZero)\r\n      if (!ypr || ypr.isIdentity())\r\n        return false;\r\n\r\n    const models = new Set<string>();\r\n    vp.view.forEachModel((model) => models.add(model.id));\r\n\r\n    const mat = ypr ? ypr.toMatrix3d() : Matrix3d.createIdentity();\r\n    const tf = Transform.createRefs(origin, mat);\r\n    vp.setModelDisplayTransformProvider(new TransformProvider(models, tf));\r\n    return true;\r\n  }\r\n\r\n  public override async parseAndRun(...input: string[]): Promise<boolean> {\r\n    const args = parseArgs(input);\r\n    const origin = new Point3d(args.getInteger(\"x\") ?? 0, args.getInteger(\"y\") ?? 0, args.getInteger(\"z\") ?? 0);\r\n    const ypr = YawPitchRollAngles.createDegrees(0, args.getFloat(\"p\") ?? 0, args.getFloat(\"r\") ?? 0);\r\n    return this.run(origin, ypr);\r\n  }\r\n}\r\n"
        ],
        "mappings": ";AAKA,SAAS,UAAU,SAAS,WAAW,0BAA0B;AACjE,SAAS,WAAW,YAAY;AAChC,SAAS,iBAAiB;AAE1B,MAAM,kBAAkB;AAAA,EACf,YAA6B,SAAuC,YAAuB;AAA9D;AAAuC;AAAA,EAAyB;AAAA,EAE7F,yBAAyB,SAAuC;AACrE,WAAO,KAAK,QAAQ,IAAI,OAAO,IAAI,KAAK,WAAW,MAAM,IAAI;AAAA,EAC/D;AACF;AAGO,aAAM,gCAAgC,KAAK;AAAA,EAEhD,WAA2B,UAAU;AAAE,WAAO;AAAA,EAAG;AAAA,EACjD,WAA2B,UAAU;AAAE,WAAO;AAAA,EAAG;AAAA,EAEjD,MAAsB,IAAI,QAAkB,KAA4C;AACtF,UAAM,KAAK,UAAU,YAAY;AACjC,QAAI,CAAC;AACH,aAAO;AAET,QAAI,CAAC,UAAU,OAAO;AACpB,UAAI,CAAC,OAAO,IAAI,WAAW;AACzB,eAAO;AAAA;AAEX,UAAM,SAAS,oBAAI,IAAY;AAC/B,OAAG,KAAK,aAAa,CAAC,UAAU,OAAO,IAAI,MAAM,EAAE,CAAC;AAEpD,UAAM,MAAM,MAAM,IAAI,WAAW,IAAI,SAAS,eAAe;AAC7D,UAAM,KAAK,UAAU,WAAW,QAAQ,GAAG;AAC3C,OAAG,iCAAiC,IAAI,kBAAkB,QAAQ,EAAE,CAAC;AACrE,WAAO;AAAA,EACT;AAAA,EAEA,MAAsB,eAAe,OAAmC;AACtE,UAAM,OAAO,UAAU,KAAK;AAC5B,UAAM,SAAS,IAAI,QAAQ,KAAK,WAAW,GAAG,KAAK,GAAG,KAAK,WAAW,GAAG,KAAK,GAAG,KAAK,WAAW,GAAG,KAAK,CAAC;AAC1G,UAAM,MAAM,mBAAmB,cAAc,GAAG,KAAK,SAAS,GAAG,KAAK,GAAG,KAAK,SAAS,GAAG,KAAK,CAAC;AAChG,WAAO,KAAK,IAAI,QAAQ,GAAG;AAAA,EAC7B;AACF;AA7Ba,wBACY,SAAS;",
        "names": []
      }
    }
  ]
}
