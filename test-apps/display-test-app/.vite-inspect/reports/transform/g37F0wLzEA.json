{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend-devtools/lib/esm/widgets/TileStatisticsTracker.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Widgets\n */\nimport { IModelApp } from \"@itwin/core-frontend\";\nimport { createButton } from \"../ui/Button\";\nimport { createCheckBox } from \"../ui/CheckBox\";\nimport { createNumericInput } from \"../ui/NumericInput\";\nfunction computeProgress(vp) {\n    const ready = vp.numReadyTiles;\n    const requested = vp.numRequestedTiles;\n    const total = ready + requested;\n    const ratio = (total > 0) ? (ready / total) : 1.0;\n    return Math.round(ratio * 100);\n}\nconst statEntries = [\n    { getValue: (stats, vp) => stats.numActiveRequests + (IModelApp.tileAdmin.getTilesForUser(vp)?.external.requested ?? 0), label: \"Active\" },\n    { getValue: (stats, _vp) => stats.numPendingRequests, label: \"Pending\" },\n    { getValue: (stats, _vp) => stats.numCanceled, label: \"Canceled\" },\n    { getValue: (stats, _vp) => stats.numActiveRequests + stats.numPendingRequests, label: \"Total\" },\n    { getValue: (_stats, vp) => vp.numSelectedTiles, label: \"Selected\" },\n    { getValue: (_stats, vp) => vp.numReadyTiles, label: \"Ready\" },\n    { getValue: (_stats, vp) => computeProgress(vp), label: \"Progress\" },\n    { getValue: (stats, _vp) => stats.totalCompletedRequests, label: \"Completed\" },\n    { getValue: (stats, _vp) => stats.totalTimedOutRequests, label: \"Timed Out\" },\n    { getValue: (stats, _vp) => stats.totalFailedRequests, label: \"Failed\" },\n    { getValue: (stats, _vp) => stats.totalEmptyTiles, label: \"Empty\" },\n    { getValue: (stats, _vp) => stats.totalUndisplayableTiles, label: \"Undisplayable\" },\n    { getValue: (stats, _vp) => stats.totalElidedTiles, label: \"Elided\" },\n    { getValue: (stats, _vp) => stats.totalCacheMisses, label: \"Cache Misses\" },\n    { getValue: (stats, _vp) => stats.totalDispatchedRequests, label: \"Dispatched\" },\n    { getValue: (stats, _vp) => stats.totalAbortedRequests, label: \"Aborted\" },\n    { getValue: (stats) => Math.round(stats.decoding.mean), label: \"Decoding mean time (ms)\" },\n    { getValue: (stats) => stats.decoding.max, label: \"Decoding max time (ms)\" },\n];\nconst indexOfFirstGlobalStatistic = 7; // \"Completed\"\n/** Outputs statistics related to tile requests including the current number of active, pending, selected, and ready tile requests; as well as cumulative statistics for the session including the number of failed, timed-out, empty, and elided tile requests.\n * @beta\n */\nexport class TileStatisticsTracker {\n    constructor(parent, vp) {\n        this._statElements = [];\n        this._vp = vp;\n        this.addMaxActive(parent);\n        createCheckBox({\n            parent,\n            name: \"Track Tile Requests\",\n            id: \"stats_trackMemory\",\n            handler: (_cb) => this.toggle(),\n        });\n        this._div = document.createElement(\"div\");\n        this._div.style.display = \"none\";\n        this._div.style.textAlign = \"right\";\n        const table = document.createElement(\"table\");\n        table.style.width = \"100%\";\n        table.setAttribute(\"border\", \"1\");\n        this._div.appendChild(table);\n        const row = document.createElement(\"tr\");\n        const frameColumn = document.createElement(\"td\");\n        const globalColumn = document.createElement(\"td\");\n        frameColumn.style.width = globalColumn.style.width = \"50%\";\n        row.appendChild(frameColumn);\n        row.appendChild(globalColumn);\n        table.appendChild(row);\n        for (let i = 0; i < statEntries.length; i++) {\n            const div = document.createElement(\"div\");\n            const elem = document.createElement(\"text\");\n            this._statElements[i] = elem;\n            div.appendChild(elem);\n            const column = i >= indexOfFirstGlobalStatistic ? globalColumn : frameColumn;\n            column.appendChild(div);\n        }\n        const resetButton = createButton({\n            parent: this._div,\n            value: \"Reset\",\n            tooltip: \"Reset all cumulative statistics\",\n            handler: () => this.reset(),\n        });\n        resetButton.div.style.textAlign = \"center\";\n        parent.appendChild(this._div);\n    }\n    dispose() {\n        this.clearInterval();\n    }\n    addMaxActive(parent) {\n        const div = document.createElement(\"div\");\n        const label = document.createElement(\"label\");\n        label.style.display = \"inline\";\n        label.htmlFor = \"maxActiveRequests\";\n        label.innerText = \"Max Active Requests: \";\n        div.appendChild(label);\n        createNumericInput({\n            parent: div,\n            id: \"maxActiveRequests\",\n            display: \"inline\",\n            min: 0,\n            step: 1,\n            value: IModelApp.tileAdmin.channels.rpcConcurrency,\n            handler: (value, _input) => this.updateMaxActive(value),\n        });\n        parent.appendChild(div);\n    }\n    updateMaxActive(value) {\n        IModelApp.tileAdmin.channels.setRpcConcurrency(value);\n    }\n    clearInterval() {\n        if (undefined !== this._curIntervalId) {\n            clearInterval(this._curIntervalId);\n            this._curIntervalId = undefined;\n        }\n    }\n    toggle() {\n        if (undefined !== this._curIntervalId) {\n            // Currently on - turn off.\n            this._div.style.display = \"none\";\n            this.clearInterval();\n        }\n        else {\n            // Currently off - turn on.\n            this._div.style.display = \"block\";\n            this.update();\n            this._curIntervalId = setInterval(() => this.update(), 500);\n        }\n    }\n    update() {\n        const stats = IModelApp.tileAdmin.statistics;\n        for (let i = 0; i < statEntries.length; i++) {\n            const stat = statEntries[i];\n            const label = `${stat.label}: ${stat.getValue(stats, this._vp)}`;\n            this._statElements[i].innerText = label;\n        }\n    }\n    reset() {\n        IModelApp.tileAdmin.resetStatistics();\n        this.update();\n    }\n}\n//# sourceMappingURL=TileStatisticsTracker.js.map",
      "start": 1693508122849,
      "end": 1693508122927,
      "sourcemaps": null
    }
  ]
}
