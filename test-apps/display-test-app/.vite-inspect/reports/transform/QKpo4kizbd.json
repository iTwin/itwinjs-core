{
  "resolvedId": "D:/hub2023A/itwinjs-core/common/temp/node_modules/.pnpm/@itwin+imodels-client-management@3.1.0/node_modules/@itwin/imodels-client-management/lib/esm/operations/changeset/ChangesetOperations.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n * Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n * See LICENSE.md in the project root for license terms and full copyright notice.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { EntityListIteratorImpl, OperationsBase } from \"../../base/internal\";\r\nimport { PreferReturn } from \"../../base/types\";\r\nimport { getUser } from \"../SharedFunctions\";\r\nexport class ChangesetOperations extends OperationsBase {\r\n    constructor(options, _iModelsClient) {\r\n        super(options);\r\n        this._iModelsClient = _iModelsClient;\r\n    }\r\n    /**\r\n     * Gets Changesets for a specific iModel. This method returns Changesets in their minimal representation. The\r\n     * returned iterator internally queries entities in pages. Wraps the\r\n     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-changesets/ Get iModel Changesets}\r\n     * operation from iModels API.\r\n     * @param {GetChangesetListParams} params parameters for this operation. See {@link GetChangesetListParams}.\r\n     * @returns {EntityListIterator<MinimalChangeset>} iterator for Changeset list. See {@link EntityListIterator},\r\n     * {@link MinimalChangeset}.\r\n     */\r\n    getMinimalList(params) {\r\n        const entityCollectionAccessor = (response) => {\r\n            const changesets = response.changesets;\r\n            const mappedChangesets = changesets.map((changeset) => this.appendRelatedMinimalEntityCallbacks(params.authorization, changeset));\r\n            return mappedChangesets;\r\n        };\r\n        return new EntityListIteratorImpl(async () => this.getEntityCollectionPage({\r\n            authorization: params.authorization,\r\n            url: this._options.urlFormatter.getChangesetListUrl({ iModelId: params.iModelId, urlParams: params.urlParams }),\r\n            preferReturn: PreferReturn.Minimal,\r\n            entityCollectionAccessor\r\n        }));\r\n    }\r\n    /**\r\n     * Gets Changesets for a specific iModel. This method returns Changesets in their full representation. The returned\r\n     * iterator internally queries entities in pages. Wraps the\r\n     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-changesets/ Get iModel Changesets}\r\n     * operation from iModels API.\r\n     * @param {GetChangesetListParams} params parameters for this operation. See {@link GetChangesetListParams}.\r\n     * @returns {EntityListIterator<Changeset>} iterator for Changeset list. See {@link EntityListIterator},\r\n     * {@link Changeset}.\r\n     */\r\n    getRepresentationList(params) {\r\n        const entityCollectionAccessor = (response) => {\r\n            const changesets = response.changesets;\r\n            const mappedChangesets = changesets.map((changeset) => this.appendRelatedEntityCallbacks(params.authorization, changeset));\r\n            return mappedChangesets;\r\n        };\r\n        return new EntityListIteratorImpl(async () => this.getEntityCollectionPage({\r\n            authorization: params.authorization,\r\n            url: this._options.urlFormatter.getChangesetListUrl({ iModelId: params.iModelId, urlParams: params.urlParams }),\r\n            preferReturn: PreferReturn.Representation,\r\n            entityCollectionAccessor\r\n        }));\r\n    }\r\n    /**\r\n     * Gets a single Changeset identified by either index or id. This method returns a Changeset in its full\r\n     * representation. Wraps the {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-changeset-details/\r\n     * Get iModel Changeset} operation from iModels API.\r\n     * @param {GetSingleChangesetParams} params parameters for this operation. See {@link GetSingleChangesetParams}.\r\n     * @returns {Promise<Changeset>} a Changeset with specified id or index. See {@link Changeset}.\r\n     */\r\n    async getSingle(params) {\r\n        const changeset = await this.querySingleInternal(params);\r\n        return changeset;\r\n    }\r\n    async querySingleInternal(params) {\r\n        const { authorization, iModelId, ...changesetIdOrIndex } = params;\r\n        const response = await this.sendGetRequest({\r\n            authorization,\r\n            url: this._options.urlFormatter.getSingleChangesetUrl({ iModelId, ...changesetIdOrIndex })\r\n        });\r\n        const result = this.appendRelatedEntityCallbacks(params.authorization, response.changeset);\r\n        return result;\r\n    }\r\n    appendRelatedMinimalEntityCallbacks(authorization, changeset) {\r\n        const getCreator = async () => {\r\n            var _a;\r\n            return getUser(authorization, this._iModelsClient.users, this._options.urlFormatter, (_a = changeset._links.creator) === null || _a === void 0 ? void 0 : _a.href);\r\n        };\r\n        const result = {\r\n            ...changeset,\r\n            getCreator\r\n        };\r\n        return result;\r\n    }\r\n    appendRelatedEntityCallbacks(authorization, changeset) {\r\n        const getNamedVersion = async () => { var _a; return this.getNamedVersion(authorization, (_a = changeset._links.namedVersion) === null || _a === void 0 ? void 0 : _a.href); };\r\n        const getCurrentOrPrecedingCheckpoint = async () => { var _a; return this.getCurrentOrPrecedingCheckpoint(authorization, (_a = changeset._links.currentOrPrecedingCheckpoint) === null || _a === void 0 ? void 0 : _a.href); };\r\n        const changesetWithMinimalCallbacks = this.appendRelatedMinimalEntityCallbacks(authorization, changeset);\r\n        const result = {\r\n            ...changesetWithMinimalCallbacks,\r\n            getNamedVersion,\r\n            getCurrentOrPrecedingCheckpoint\r\n        };\r\n        return result;\r\n    }\r\n    async getNamedVersion(authorization, namedVersionLink) {\r\n        if (!namedVersionLink)\r\n            return undefined;\r\n        const { iModelId, namedVersionId } = this._options.urlFormatter.parseNamedVersionUrl(namedVersionLink);\r\n        return this._iModelsClient.namedVersions.getSingle({\r\n            authorization,\r\n            iModelId,\r\n            namedVersionId\r\n        });\r\n    }\r\n    async getCurrentOrPrecedingCheckpoint(authorization, currentOrPrecedingCheckpointLink) {\r\n        if (!currentOrPrecedingCheckpointLink)\r\n            return undefined;\r\n        const entityIds = this._options.urlFormatter.parseCheckpointUrl(currentOrPrecedingCheckpointLink);\r\n        return this._iModelsClient.checkpoints.getSingle({\r\n            authorization,\r\n            ...entityIds\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=ChangesetOperations.js.map",
      "start": 1693508126645,
      "end": 1693508126706,
      "sourcemaps": null
    }
  ]
}
