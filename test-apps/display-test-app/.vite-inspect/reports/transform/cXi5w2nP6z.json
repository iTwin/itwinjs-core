{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/tile/map/MapTileLoader.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tiles\n */\nimport { assert } from \"@itwin/core-bentley\";\nimport { Feature, FeatureTable } from \"@itwin/core-common\";\nimport { IModelApp } from \"../../IModelApp\";\nimport { MapTile, RealityTileLoader, TileLoadPriority } from \"../internal\";\n/** Specialization of map tile loader that includes terrain geometry with map imagery draped on it.\n * @internal\n */\nexport class MapTileLoader extends RealityTileLoader {\n    get priority() { return TileLoadPriority.Terrain; }\n    get clipLowResolutionTiles() { return true; }\n    get isContentUnbounded() { return true; }\n    isTileAvailable(quadId) { return this.terrainProvider.isTileAvailable(quadId); }\n    constructor(_iModel, _modelId, _groundBias, _terrainProvider) {\n        super();\n        this._iModel = _iModel;\n        this._modelId = _modelId;\n        this._groundBias = _groundBias;\n        this._terrainProvider = _terrainProvider;\n        this._applyLights = false;\n        this.featureTable = new FeatureTable(0xffff, this._modelId);\n        this.featureTable.insert(new Feature(this._modelId));\n    }\n    getFeatureIndex(layerModelId) {\n        return this.featureTable.insert(new Feature(layerModelId));\n    }\n    get maxDepth() { return this._terrainProvider.maxDepth; }\n    get minDepth() { return 0; }\n    get terrainProvider() { return this._terrainProvider; }\n    getRequestChannel(_tile) {\n        // ###TODO use hostname from url - but so many layers to go through to get that...\n        return IModelApp.tileAdmin.channels.getForHttp(\"itwinjs-imagery\");\n    }\n    async requestTileContent(tile, isCanceled) {\n        assert(tile instanceof MapTile);\n        try {\n            const data = await this.terrainProvider.requestMeshData({ tile, isCanceled });\n            return undefined !== data ? { data } : undefined;\n        }\n        catch (_) {\n            return undefined;\n        }\n    }\n    forceTileLoad(tile) {\n        return this._terrainProvider.forceTileLoad(tile);\n    }\n    async loadTileContent(tile, data, system, isCanceled) {\n        assert(\"data\" in data);\n        isCanceled = isCanceled ?? (() => !tile.isLoading);\n        const mesh = await this._terrainProvider.readMesh({ data: data.data, isCanceled, tile });\n        if (!mesh || isCanceled())\n            return {};\n        const projection = tile.getProjection(tile.heightRange);\n        const terrainGeometry = system.createTerrainMesh(mesh, projection.transformFromLocal, true);\n        return {\n            contentRange: projection.transformFromLocal.multiplyRange(projection.localRange),\n            terrain: { mesh, renderGeometry: terrainGeometry },\n        };\n    }\n    loadPolyfaces() {\n        assert(false, \"load polyFaces not implmented for map tiles\");\n    }\n    getChildHeightRange(quadId, rectangle, parent) {\n        return this._terrainProvider.getChildHeightRange(quadId, rectangle, parent);\n    }\n    async loadChildren(_tile) {\n        assert(false); // children are generated synchronously in MapTile....\n        return undefined;\n    }\n}\n//# sourceMappingURL=MapTileLoader.js.map",
      "start": 1693508122023,
      "end": 1693508122163,
      "sourcemaps": null
    }
  ]
}
