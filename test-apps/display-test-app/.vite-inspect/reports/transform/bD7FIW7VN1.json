{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/hypermodeling/lib/esm/Tools.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module HyperModeling\n */\nimport { SectionType } from \"@itwin/core-common\";\nimport { IModelApp, Tool } from \"@itwin/core-frontend\";\nimport { HyperModeling } from \"./HyperModeling\";\nimport { HyperModelingDecorator } from \"./HyperModelingDecorator\";\n/** Parses a string case-insensitively returning true for \"ON\", false for \"OFF\", undefined for \"TOGGLE\" or undefined, and the input string for anything else. */\nfunction parseToggle(arg) {\n    if (undefined === arg)\n        return undefined;\n    switch (arg.toLowerCase()) {\n        case \"on\": return true;\n        case \"off\": return false;\n        case \"toggle\": return undefined;\n        default: return arg;\n    }\n}\nclass HyperModelingTool extends Tool {\n    static get minArgs() { return 0; }\n    static get maxArgs() { return 1; }\n    async run(enable, vp) {\n        vp = vp ?? IModelApp.viewManager.selectedView;\n        if (vp)\n            await HyperModeling.startOrStop(vp, enable);\n        return true;\n    }\n    async parseAndRun(...args) {\n        const enable = parseToggle(args[0]);\n        return typeof enable !== \"string\" && this.run(enable);\n    }\n}\nHyperModelingTool.toolId = \"HyperModeling\";\n/** Configures how section graphics are displayed. These are global settings. If no arguments are supplied, the defaults are restored.\n * Otherwise, each argument is of the form \"name=value\" where value is 0 (disable) or 1 (enable). Only the first letter of each argument matters.\n *  - drawings: Whether to display the section drawing graphics. Default: 1.\n *  - sheets: Whether to display the sheet annotation graphics. Default: 1.\n *  - clip: Whether to apply clip volumes to the 2d graphics. Default: 1.\n *  - boundaries: Whether to display clip volumes as boundary shapes for debugging purposes. Default: 0.\n */\nclass SectionGraphicsConfigTool extends Tool {\n    static get minArgs() { return 0; }\n    static get maxArgs() { return 4; }\n    async run(config) {\n        if (!config) {\n            config = {\n                ignoreClip: false,\n                debugClipVolumes: false,\n                hideSectionGraphics: false,\n                hideSheetAnnotations: false,\n            };\n        }\n        HyperModeling.updateConfiguration({ graphics: config });\n        return true;\n    }\n    async parseAndRun(...args) {\n        if (0 === args.length)\n            return this.run(); // restore defaults...\n        const config = {};\n        for (const arg of args) {\n            const parts = arg.toLowerCase().split(\"=\");\n            if (2 !== parts.length)\n                continue;\n            const value = Number.parseInt(parts[1], 10);\n            if (Number.isNaN(value) || (0 !== value && 1 !== value))\n                continue;\n            const enable = 1 === value;\n            switch (parts[0][0]) {\n                case \"d\":\n                    config.hideSectionGraphics = !enable;\n                    break;\n                case \"s\":\n                    config.hideSheetAnnotations = !enable;\n                    break;\n                case \"c\":\n                    config.ignoreClip = !enable;\n                    break;\n                case \"b\":\n                    config.debugClipVolumes = enable;\n                    break;\n            }\n        }\n        return this.run(config);\n    }\n}\nSectionGraphicsConfigTool.toolId = \"HyperModeling.Graphics.Config\";\nclass SectionMarkerConfigTool extends Tool {\n    static get minArgs() { return 0; }\n    static get maxArgs() { return 3; }\n    async run(config) {\n        config = config ?? { ignoreModelSelector: false, ignoreCategorySelector: false, hiddenSectionTypes: [] };\n        this.update(config);\n        return true;\n    }\n    async parseAndRun(...args) {\n        if (0 === args.length)\n            return this.run(); // restore defaults...\n        const config = {};\n        for (const arg of args) {\n            const parts = arg.toLowerCase().split(\"=\");\n            if (2 !== parts.length)\n                continue;\n            const setting = parts[0][0];\n            switch (setting) {\n                case \"h\": {\n                    config.hiddenSectionTypes = [];\n                    for (const c of parts[1]) {\n                        switch (c) {\n                            case \"s\":\n                                config.hiddenSectionTypes.push(SectionType.Section);\n                                break;\n                            case \"d\":\n                                config.hiddenSectionTypes.push(SectionType.Detail);\n                                break;\n                            case \"e\":\n                                config.hiddenSectionTypes.push(SectionType.Elevation);\n                                break;\n                            case \"p\":\n                                config.hiddenSectionTypes.push(SectionType.Plan);\n                                break;\n                        }\n                    }\n                    break;\n                }\n                default: {\n                    const intVal = Number.parseInt(parts[1], 10);\n                    if (!Number.isNaN(intVal) && (0 === intVal || 1 === intVal)) {\n                        if (\"c\" === setting)\n                            config.ignoreCategorySelector = 0 === intVal;\n                        else if (\"m\" === setting)\n                            config.ignoreModelSelector = 0 === intVal;\n                    }\n                    break;\n                }\n            }\n        }\n        return this.run(config);\n    }\n}\nclass SectionMarkerDefaultConfigTool extends SectionMarkerConfigTool {\n    update(config) {\n        HyperModeling.updateConfiguration({ markers: config });\n    }\n}\nSectionMarkerDefaultConfigTool.toolId = \"HyperModeling.Marker.Default.Config\";\nclass SectionMarkerDecoratorConfigTool extends SectionMarkerConfigTool {\n    update(config) {\n        const vp = IModelApp.viewManager.selectedView;\n        const decorator = vp ? HyperModelingDecorator.getForViewport(vp) : undefined;\n        if (decorator)\n            decorator.updateConfiguration(config);\n    }\n}\nSectionMarkerDecoratorConfigTool.toolId = \"HyperModeling.Marker.Config\";\n/** @internal */\nexport function registerTools(namespace) {\n    const register = (tool) => IModelApp.tools.register(tool, namespace);\n    register(HyperModelingTool);\n    register(SectionGraphicsConfigTool);\n    register(SectionMarkerDecoratorConfigTool);\n    register(SectionMarkerDefaultConfigTool);\n}\n//# sourceMappingURL=Tools.js.map",
      "start": 1693508125117,
      "end": 1693508125180,
      "sourcemaps": null
    }
  ]
}
