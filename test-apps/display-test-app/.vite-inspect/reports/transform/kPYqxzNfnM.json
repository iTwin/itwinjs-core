{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/bentley/lib/esm/JsonUtils.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Json\n */\n/** Utility functions for converting from JSON objects, with default values.\n * @public\n */\nexport var JsonUtils;\n(function (JsonUtils) {\n    /** Get a value as a boolean.\n     * @param json the input JSON object\n     * @param defaultVal default value if json cannot be converted to boolean\n     * @returns the value of json as a boolean, or default value\n     */\n    function asBool(json, defaultVal = false) {\n        return isNullOrUndefined(json) ? defaultVal : !!json;\n    }\n    JsonUtils.asBool = asBool;\n    /** Get a value as an integer.\n     * @param json the input JSON object\n     * @param defaultVal default value if json cannot be converted to integer\n     * @returns the value of json as an integer, or default value\n     */\n    function asInt(json, defaultVal = 0) {\n        return (typeof json === \"number\") ? Math.trunc(json) : defaultVal;\n    }\n    JsonUtils.asInt = asInt;\n    /** Get a value as a double.\n     * @param json the input JSON object\n     * @param defaultVal default value if json cannot be converted to double\n     * @returns the value of json as a double, or default value\n     */\n    function asDouble(json, defaultVal = 0) {\n        return (typeof json === \"number\") ? json : defaultVal;\n    }\n    JsonUtils.asDouble = asDouble;\n    /** Get a value as a string.\n     * @param json the input JSON object\n     * @param defaultVal default value if json cannot be converted to string\n     * @returns the value of json as a string, or default value\n     */\n    function asString(json, defaultVal = \"\") {\n        return isNullOrUndefined(json) ? defaultVal : json.toString();\n    }\n    JsonUtils.asString = asString;\n    /** Get a value as an array.\n     * @param json the input JSON object\n     * @returns the input JSON object if it is an array, otherwise undefined\n     */\n    function asArray(json) {\n        return Array.isArray(json) ? json : undefined;\n    }\n    JsonUtils.asArray = asArray;\n    /** Get a value as an object.\n     * @param json the input JSON object\n     * @returns the input JSON object if it is an object, otherwise undefined\n     */\n    function asObject(json) {\n        return \"object\" === typeof json ? json : undefined;\n    }\n    JsonUtils.asObject = asObject;\n    /** Set or remove a number on a json object, given a key name, a value, and a default value. Sets `json[key] = val` if val is *not* equal to the default,\n     * otherwise `delete json[key]`. This is used to omit values from JSON strings that are of known defaults.\n     * @param json the JSON object to affect\n     * @param key the name of the member to set or remove\n     * @param val the value to set\n     * @param defaultVal the default value.\n     */\n    function setOrRemoveNumber(json, key, val, defaultVal) {\n        if (val === defaultVal)\n            delete json[key];\n        else\n            json[key] = val;\n    }\n    JsonUtils.setOrRemoveNumber = setOrRemoveNumber;\n    /** Set or remove a boolean on a json object, given a key name, a value, and a default value. Sets `json[key] = val` if val is *not* equal to the default,\n     * otherwise `delete json[key]`. This is used to omit values from JSON strings that are of known defaults.\n     * @param json the JSON object to affect\n     * @param key the name of the member to set or remove\n     * @param val the value to set\n     * @param defaultVal the default value.\n     */\n    function setOrRemoveBoolean(json, key, val, defaultVal) {\n        if (val === defaultVal)\n            delete json[key];\n        else\n            json[key] = val;\n    }\n    JsonUtils.setOrRemoveBoolean = setOrRemoveBoolean;\n    /** Determine if a Javascript object is equivalent to `{}`.\n     * @param json The JSON object to test.\n     * @returns true if `json` is an Object with no keys.\n     */\n    function isEmptyObject(json) {\n        return \"object\" === typeof json && 0 === Object.keys(json).length;\n    }\n    JsonUtils.isEmptyObject = isEmptyObject;\n    /** Determine if the input is undefined or an empty Javascript object.\n     * @param json The JSON object to test.\n     * @returns true if `json` is undefined or is an Object with no keys (equivalent to `{}`).\n     */\n    function isEmptyObjectOrUndefined(json) {\n        return undefined === json || isEmptyObject(json);\n    }\n    JsonUtils.isEmptyObjectOrUndefined = isEmptyObjectOrUndefined;\n    function isNullOrUndefined(json) {\n        return null === json || undefined === json;\n    }\n    /** Determine if the input is a non-empty Javascript object.\n     * @param value The value to test.\n     * @returns true if `value` is an Object with at least one key.\n     */\n    function isNonEmptyObject(value) {\n        return !isEmptyObjectOrUndefined(value);\n    }\n    JsonUtils.isNonEmptyObject = isNonEmptyObject;\n    /**\n     * Convert the input object into a \"pure\" JavaScript object, with only instances of \"object\" or primitives in the returned value.\n     * Works recursively for object members, and over arrays entries. Calls \"toJSON\" on any members that implement it.\n     */\n    function toObject(val) {\n        if (typeof val === \"boolean\" || typeof val === \"number\" || typeof val === \"string\")\n            return val;\n        if (typeof val !== \"object\")\n            return undefined;\n        // See if the object has toJSON() function defined.\n        if (typeof val.toJSON !== \"undefined\")\n            return toObject(val.toJSON());\n        // if it's an array, convert each member.\n        if (Array.isArray(val)) {\n            const arr = new Array(val.length);\n            val.forEach((el, i) => arr[i] = toObject(el));\n            return arr;\n        }\n        // Convert each property\n        const out = {};\n        Object.getOwnPropertyNames(val).forEach((prop) => {\n            const transformVal = toObject(val[prop]);\n            if (transformVal !== undefined)\n                out[prop] = transformVal;\n        });\n        return out;\n    }\n    JsonUtils.toObject = toObject;\n})(JsonUtils || (JsonUtils = {}));\n//# sourceMappingURL=JsonUtils.js.map",
      "start": 1693508120578,
      "end": 1693508120651,
      "sourcemaps": null
    }
  ]
}
