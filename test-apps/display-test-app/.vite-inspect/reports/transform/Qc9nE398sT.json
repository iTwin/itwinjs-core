{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend-devtools/lib/esm/tools/ScheduleScriptTools.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tools\n */\nimport { assert, CompressedId64Set } from \"@itwin/core-bentley\";\nimport { RenderSchedule, } from \"@itwin/core-common\";\nimport { copyStringToClipboard } from \"../ClipboardUtilities\";\nimport { parseArgs } from \"./parseArgs\";\nimport { DisplayStyleTool } from \"./DisplayStyleTools\";\n/** Query the schedule script JSON from an element.\n * @beta\n */\nclass QueryScheduleScriptTool extends DisplayStyleTool {\n    constructor() {\n        super(...arguments);\n        this._action = \"copy\";\n        this._includeElementIds = false;\n        this._countElementIds = false;\n        this._expandElementIds = false;\n    }\n    static get minArgs() { return 0; }\n    static get maxArgs() { return 3; }\n    async parse(input, vp) {\n        const args = parseArgs(input);\n        // eslint-disable-next-line deprecation/deprecation\n        this._sourceId = args.get(\"i\") ?? vp.displayStyle.scheduleScriptReference?.sourceId;\n        if (!this._sourceId)\n            return false;\n        const action = args.get(\"a\") ?? \"\";\n        this._action = action.length > 0 && \"b\" === action[0].toLowerCase() ? \"break\" : \"copy\";\n        this._includeElementIds = this._countElementIds = this._expandElementIds = false;\n        const ids = args.get(\"e\");\n        if (ids && ids.length > 0) {\n            switch (ids[0].toLowerCase()) {\n                case \"i\":\n                    this._includeElementIds = true;\n                    break;\n                case \"c\":\n                    this._includeElementIds = this._countElementIds = true;\n                    break;\n                case \"e\":\n                    this._includeElementIds = this._expandElementIds = true;\n                    break;\n            }\n        }\n        return true;\n    }\n    async execute(vp) {\n        if (!this._sourceId || !this._action)\n            return false;\n        const opts = {\n            displayStyle: { omitScheduleScriptElementIds: !this._includeElementIds },\n            renderTimeline: { omitScriptElementIds: !this._includeElementIds },\n        };\n        let script;\n        const props = await vp.iModel.elements.loadProps(this._sourceId, opts);\n        if (props.script)\n            script = JSON.parse(props.script.script);\n        else if (props.jsonProperties?.styles?.scheduleScript)\n            script = props.jsonProperties.styles.scheduleScript;\n        if (!script)\n            return false;\n        if (this._countElementIds || this._expandElementIds) {\n            for (const model of script) {\n                for (const elem of model.elementTimelines) {\n                    const elemIds = typeof elem.elementIds === \"string\" ? CompressedId64Set.decompressArray(elem.elementIds) : elem.elementIds;\n                    if (this._countElementIds)\n                        elem.elementIds = elemIds.length;\n                    else\n                        elem.elementIds = elemIds;\n                }\n            }\n        }\n        if (this._action === \"break\")\n            debugger; // eslint-disable-line no-debugger\n        else\n            copyStringToClipboard(JSON.stringify(script, null, 2));\n        return true;\n    }\n}\nQueryScheduleScriptTool.toolId = \"QueryScheduleScript\";\nexport { QueryScheduleScriptTool };\nfunction reverseTimeline(timeline, accept) {\n    if (!timeline)\n        return;\n    const len = timeline.length;\n    for (let i = 0; i < len; i++) {\n        const timeEntry = timeline.getEntry(i);\n        const valueEntry = timeline.getEntry(len - i - 1);\n        assert(undefined !== timeEntry);\n        assert(undefined !== valueEntry);\n        accept(timeEntry.time, valueEntry);\n    }\n}\n/** A tool that modifies the [RenderSchedule.Script]($common), if any, associated with the selected [Viewport]($frontend) such that the entries in each\n * of its [RenderSchedule.ElementTimeline]($common)s are reversed.\n * @beta\n */\nclass ReverseScheduleScriptTool extends DisplayStyleTool {\n    async execute(vp) {\n        const script = vp?.displayStyle.scheduleScript;\n        if (!script || script.modelTimelines.some((x) => x.omitsElementIds))\n            return false;\n        const builder = new RenderSchedule.ScriptBuilder();\n        for (const modelTimeline of script.modelTimelines) {\n            const modelBuilder = builder.addModelTimeline(modelTimeline.modelId);\n            for (const elemTimeline of modelTimeline.elementTimelines) {\n                const elemBuilder = modelBuilder.addElementTimeline(elemTimeline.elementIds);\n                reverseTimeline(elemTimeline.visibility, (time, entry) => elemBuilder.addVisibility(time, entry.value, entry.interpolation));\n                reverseTimeline(elemTimeline.color, (time, entry) => elemBuilder.addColor(time, entry.value, entry.interpolation));\n                reverseTimeline(elemTimeline.transform, (time, entry) => elemBuilder.addTransform(time, entry.value, entry.components, entry.interpolation));\n                reverseTimeline(elemTimeline.cuttingPlane, (time, entry) => elemBuilder.addCuttingPlane(time, entry.value, entry.interpolation));\n            }\n        }\n        const scriptProps = builder.finish();\n        const newScript = RenderSchedule.Script.fromJSON(scriptProps);\n        assert(undefined !== newScript);\n        vp.displayStyle.scheduleScript = newScript;\n        return true;\n    }\n    async parse() {\n        return true;\n    }\n}\nReverseScheduleScriptTool.toolId = \"ReverseScheduleScript\";\nexport { ReverseScheduleScriptTool };\n/** A tool that changes or removes the [RenderSchedule.Script]($common) associated with the selected [Viewport]($frontend).\n * @beta\n */\nclass SetScheduleScriptTool extends DisplayStyleTool {\n    static get minArgs() { return 0; }\n    static get maxArgs() { return 1; }\n    async parse(args) {\n        if (args.length === 0)\n            return true; // clear schedule script.\n        try {\n            this._script = RenderSchedule.Script.fromJSON(JSON.parse(args[0]));\n        }\n        catch (ex) {\n            if (ex instanceof Error)\n                alert(ex.toString());\n        }\n        return undefined !== this._script;\n    }\n    async execute(vp) {\n        vp.displayStyle.scheduleScript = this._script;\n        return true;\n    }\n}\nSetScheduleScriptTool.toolId = \"SetScheduleScript\";\nexport { SetScheduleScriptTool };\n//# sourceMappingURL=ScheduleScriptTools.js.map",
      "start": 1693508122727,
      "end": 1693508122832,
      "sourcemaps": null
    }
  ]
}
