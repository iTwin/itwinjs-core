{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/webgl/ViewRectUniforms.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module WebGL\n */\nimport { Matrix4d } from \"@itwin/core-geometry\";\nimport { Matrix4 } from \"./Matrix\";\nimport { desync, sync } from \"./Sync\";\n/** Maintains uniform variable state associated with a Target's ViewRect.\n * @internal\n */\nexport class ViewRectUniforms {\n    constructor() {\n        this.syncKey = 0;\n        this.projectionMatrix = Matrix4d.createIdentity();\n        this.projectionMatrix32 = new Matrix4();\n        this._dimensions = [0, 0];\n        this._inverseDimensions = [0, 0];\n        this._viewportMatrix = new Matrix4();\n    }\n    update(width, height) {\n        if (width === this.width && height === this.height)\n            return;\n        desync(this);\n        this._dimensions[0] = width;\n        this._dimensions[1] = height;\n        Matrix4.fromOrtho(0.0, width, height, 0.0, -1.0, 1.0, this.projectionMatrix32);\n        this.projectionMatrix32.toMatrix4d(this.projectionMatrix);\n        this._inverseDimensions[0] = 1 / width;\n        this._inverseDimensions[1] = 1 / height;\n        const nearDepthRange = 0.0;\n        const farDepthRange = 1.0;\n        const x = 0;\n        const y = 0;\n        const halfWidth = width * 0.5;\n        const halfHeight = height * 0.5;\n        const halfDepth = (farDepthRange - nearDepthRange) * 0.5;\n        const column0Row0 = halfWidth;\n        const column1Row1 = halfHeight;\n        const column2Row2 = halfDepth;\n        const column3Row0 = x + halfWidth;\n        const column3Row1 = y + halfHeight;\n        const column3Row2 = nearDepthRange + halfDepth;\n        const column3Row3 = 1.0;\n        Matrix4.fromValues(column0Row0, 0.0, 0.0, column3Row0, 0.0, column1Row1, 0.0, column3Row1, 0.0, 0.0, column2Row2, column3Row2, 0.0, 0.0, 0.0, column3Row3, this._viewportMatrix);\n    }\n    get width() { return this._dimensions[0]; }\n    get height() { return this._dimensions[1]; }\n    bindProjectionMatrix(uniform) {\n        if (!sync(this, uniform))\n            uniform.setMatrix4(this.projectionMatrix32);\n    }\n    bindDimensions(uniform) {\n        if (!sync(this, uniform))\n            uniform.setUniform2fv(this._dimensions);\n    }\n    bindInverseDimensions(uniform) {\n        if (!sync(this, uniform))\n            uniform.setUniform2fv(this._inverseDimensions);\n    }\n    bindViewportMatrix(uniform) {\n        if (!sync(this, uniform))\n            uniform.setMatrix4(this._viewportMatrix);\n    }\n}\n//# sourceMappingURL=ViewRectUniforms.js.map",
      "start": 1693508124798,
      "end": 1693508125006,
      "sourcemaps": null
    }
  ]
}
