{
  "resolvedId": "D:/hub2023A/itwinjs-core/editor/common/lib/esm/EditorBuiltInIpc.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Editing\n */\n/** Command ids for built in EditCommandIpc classes.\n * @beta\n */\nexport const editorBuiltInCmdIds = {\n    cmdBasicManipulation: \"basicManipulation\",\n    /** @alpha */\n    cmdSolidModeling: \"solidModeling\",\n};\n/** @alpha */\nexport var BRepEntityType;\n(function (BRepEntityType) {\n    /** Body consisting of at least one solid region */\n    BRepEntityType[BRepEntityType[\"Solid\"] = 0] = \"Solid\";\n    /** Body consisting of connected sets of faces having edges that are shared by a maximum of two faces */\n    BRepEntityType[BRepEntityType[\"Sheet\"] = 1] = \"Sheet\";\n    /** Body consisting of connected sets of edges having vertices that are shared by a maximum of two edges */\n    BRepEntityType[BRepEntityType[\"Wire\"] = 2] = \"Wire\";\n    /** Body can not be used to represent this geometric entry */\n    BRepEntityType[BRepEntityType[\"Invalid\"] = 3] = \"Invalid\";\n})(BRepEntityType || (BRepEntityType = {}));\n/** @alpha */\nexport var SubEntityType;\n(function (SubEntityType) {\n    /** A single bounded part of a surface */\n    SubEntityType[SubEntityType[\"Face\"] = 0] = \"Face\";\n    /** A single bounded part of a curve */\n    SubEntityType[SubEntityType[\"Edge\"] = 1] = \"Edge\";\n    /** A single point */\n    SubEntityType[SubEntityType[\"Vertex\"] = 2] = \"Vertex\";\n})(SubEntityType || (SubEntityType = {}));\n/** @alpha */\nexport var BooleanMode;\n(function (BooleanMode) {\n    /** Unite target with one or more tool entities */\n    BooleanMode[BooleanMode[\"Unite\"] = 0] = \"Unite\";\n    /** Subtract one or more tool entities from target entity */\n    BooleanMode[BooleanMode[\"Subtract\"] = 1] = \"Subtract\";\n    /** Intersect target with one or more tool entities */\n    BooleanMode[BooleanMode[\"Intersect\"] = 2] = \"Intersect\";\n})(BooleanMode || (BooleanMode = {}));\n/** @alpha */\nexport var ChamferMode;\n(function (ChamferMode) {\n    /** Chamfer ranges */\n    ChamferMode[ChamferMode[\"Ranges\"] = 0] = \"Ranges\";\n    /** Chamfer length. Specify lengths using values1, values2 is unused. */\n    ChamferMode[ChamferMode[\"Length\"] = 1] = \"Length\";\n    /** Right/Left distances. Equal distance if values2 is undefined. */\n    ChamferMode[ChamferMode[\"Distances\"] = 2] = \"Distances\";\n    /** Right distance and angle (radians) */\n    ChamferMode[ChamferMode[\"DistanceAngle\"] = 3] = \"DistanceAngle\";\n    /** Angle (radians) and left distance */\n    ChamferMode[ChamferMode[\"AngleDistance\"] = 4] = \"AngleDistance\";\n})(ChamferMode || (ChamferMode = {}));\n/** @alpha */\nexport var CutDirectionMode;\n(function (CutDirectionMode) {\n    /** Remove material in direction of surface normal */\n    CutDirectionMode[CutDirectionMode[\"Forward\"] = 0] = \"Forward\";\n    /** Remove material in opposite direction of surface normal */\n    CutDirectionMode[CutDirectionMode[\"Backward\"] = 1] = \"Backward\";\n    /** Remove material in both directions */\n    CutDirectionMode[CutDirectionMode[\"Both\"] = 2] = \"Both\";\n    /** Choose forward or backward from tool and target hint points */\n    CutDirectionMode[CutDirectionMode[\"Auto\"] = 3] = \"Auto\";\n})(CutDirectionMode || (CutDirectionMode = {}));\n/** @alpha */\nexport var CutDepthMode;\n(function (CutDepthMode) {\n    /** Cut extends through entire solid */\n    CutDepthMode[CutDepthMode[\"All\"] = 0] = \"All\";\n    /** Cut extends to a specified depth */\n    CutDepthMode[CutDepthMode[\"Blind\"] = 1] = \"Blind\";\n})(CutDepthMode || (CutDepthMode = {}));\n/** @alpha */\nexport var ProfileClosure;\n(function (ProfileClosure) {\n    /** Close by extending end tangents to point of intersection or outside range of target */\n    ProfileClosure[ProfileClosure[\"Natural\"] = 0] = \"Natural\";\n    /** Whether to reverse the natural closure direction */\n    ProfileClosure[ProfileClosure[\"Reverse\"] = 1] = \"Reverse\";\n    /** Choose natural or reverse closure direction based on tool and target hint points */\n    ProfileClosure[ProfileClosure[\"Auto\"] = 2] = \"Auto\";\n})(ProfileClosure || (ProfileClosure = {}));\n/** @alpha */\nexport var EmbossDirectionMode;\n(function (EmbossDirectionMode) {\n    /** Material is added in the direction of surface normal when creating a pad. */\n    EmbossDirectionMode[EmbossDirectionMode[\"Forward\"] = 0] = \"Forward\";\n    /** Material is added in the opposite direction of surface normal when creating a pad. */\n    EmbossDirectionMode[EmbossDirectionMode[\"Backward\"] = 1] = \"Backward\";\n    /** Choose forward or backward from target hint point */\n    EmbossDirectionMode[EmbossDirectionMode[\"Auto\"] = 2] = \"Auto\";\n})(EmbossDirectionMode || (EmbossDirectionMode = {}));\n//# sourceMappingURL=EditorBuiltInIpc.js.map",
      "start": 1693508125607,
      "end": 1693508125794,
      "sourcemaps": null
    }
  ]
}
