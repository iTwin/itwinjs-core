{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/bentley/lib/esm/Disposable.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Utils\n */\n/**\n * A type guard that checks whether the given argument implements `IDisposable` interface\n * @public\n */\nexport function isIDisposable(obj) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    return !!obj && (obj instanceof Object) && !!obj.dispose && (typeof obj.dispose === \"function\");\n}\n/** Convenience function for disposing of a disposable object that may be undefined.\n * This is primarily used to simplify implementations of [[IDisposable.dispose]].\n * As a simple example:\n * ```ts\n *  class Disposable implements IDisposable {\n *    public member1?: DisposableType1;\n *    public member2?: DisposableType2;\n *\n *    public dispose() {\n *      this.member1 = dispose(this.member1); // If member1 is defined, dispose of it and set it to undefined.\n *      this.member2 = dispose(this.member2); // Likewise for member2.\n *    }\n *  }\n * ```\n * @param disposable The object to be disposed of.\n * @returns undefined\n * @public\n */\nexport function dispose(disposable) {\n    if (undefined !== disposable)\n        disposable.dispose();\n    return undefined;\n}\n/** Disposes of and empties a list of disposable objects.\n * @param list The list of disposable objects.\n * @returns undefined\n * @public\n */\nexport function disposeArray(list) {\n    if (undefined === list)\n        return undefined;\n    for (const entry of list)\n        dispose(entry);\n    list.length = 0;\n    return undefined;\n}\n/** A 'using' function which is a substitution for .NET's using statement. It makes sure that 'dispose'\n * is called on the resource no matter if the func returns or throws. If func returns, the return value\n * of this function is equal to return value of func. If func throws, this function also throws (after\n * disposing the resource).\n * @public\n */\nexport function using(resources, func) {\n    if (!Array.isArray(resources))\n        return using([resources], func);\n    const doDispose = () => resources.forEach((disposable) => disposable.dispose());\n    let shouldDisposeImmediately = true;\n    try {\n        const result = func(...resources);\n        if (result instanceof Promise) {\n            shouldDisposeImmediately = false;\n            result.then(doDispose, doDispose);\n        }\n        return result;\n    }\n    finally {\n        if (shouldDisposeImmediately)\n            doDispose();\n    }\n}\nclass FuncDisposable {\n    constructor(disposeFunc) { this._disposeFunc = disposeFunc; }\n    dispose() { this._disposeFunc(); }\n}\n/** A disposable container of disposable objects.\n * @public\n */\nexport class DisposableList {\n    /** Creates a disposable list. */\n    constructor(disposables = []) {\n        this._disposables = [];\n        disposables.forEach((disposable) => {\n            this.add(disposable);\n        });\n    }\n    isDisposable(x) {\n        return x.dispose !== undefined;\n    }\n    /** Register an object for disposal. */\n    add(disposable) {\n        if (this.isDisposable(disposable))\n            this._disposables.push(disposable);\n        else\n            this._disposables.push(new FuncDisposable(disposable));\n    }\n    /** Unregister disposable object. */\n    remove(disposable) {\n        const idx = this._disposables.indexOf(disposable);\n        if (-1 !== idx)\n            this._disposables.splice(idx, 1);\n    }\n    /** Disposes all registered objects. */\n    dispose() {\n        for (const disposable of this._disposables)\n            disposable.dispose();\n    }\n}\n//# sourceMappingURL=Disposable.js.map",
      "start": 1693508120445,
      "end": 1693508120632,
      "sourcemaps": null
    }
  ]
}
