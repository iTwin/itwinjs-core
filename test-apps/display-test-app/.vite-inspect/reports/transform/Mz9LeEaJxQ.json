{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/primitives/VertexKey.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Rendering\n */\nimport { assert, comparePossiblyUndefined, compareWithTolerance, IndexMap } from \"@itwin/core-bentley\";\nfunction comparePositions(p0, p1, tolerance) {\n    let diff = compareWithTolerance(p0.x, p1.x, tolerance.x);\n    if (0 === diff) {\n        diff = compareWithTolerance(p0.y, p1.y, tolerance.y);\n        if (0 === diff)\n            diff = compareWithTolerance(p0.z, p1.z, tolerance.z);\n    }\n    return diff;\n}\nfunction compareFeatures(f0, f1) {\n    return comparePossiblyUndefined((lhs, rhs) => lhs.compare(rhs), f0, f1);\n}\n/** @internal */\nexport class VertexKey {\n    constructor(position, fillColor, normal, uvParam, feature) {\n        this.position = position.clone();\n        this.fillColor = fillColor;\n        this.normal = normal;\n        this.uvParam = uvParam?.clone();\n        this.feature = feature;\n    }\n    static create(props) {\n        return new VertexKey(props.position, props.fillColor, props.normal, props.uvParam, props.feature);\n    }\n    equals(rhs, tolerance) {\n        if (this.fillColor !== rhs.fillColor)\n            return false;\n        if (0 !== compareFeatures(this.feature, rhs.feature))\n            return false;\n        if (undefined !== this.normal) {\n            assert(undefined !== rhs.normal);\n            if (this.normal.value !== rhs.normal.value)\n                return false;\n        }\n        if (0 !== comparePositions(this.position, rhs.position, tolerance))\n            return false;\n        if (undefined !== this.uvParam) {\n            assert(undefined !== rhs.uvParam);\n            return this.uvParam.isAlmostEqual(rhs.uvParam, 0.0001);\n        }\n        return true;\n    }\n    compare(rhs, tolerance) {\n        if (this === rhs)\n            return 0;\n        let diff = this.fillColor - rhs.fillColor;\n        if (0 === diff) {\n            diff = comparePositions(this.position, rhs.position, tolerance);\n            if (0 === diff) {\n                diff = compareFeatures(this.feature, rhs.feature);\n                if (0 === diff) {\n                    if (undefined !== this.normal) {\n                        assert(undefined !== rhs.normal);\n                        diff = this.normal.value - rhs.normal.value;\n                    }\n                    if (0 === diff && undefined !== this.uvParam) {\n                        assert(undefined !== rhs.uvParam);\n                        diff = compareWithTolerance(this.uvParam.x, rhs.uvParam.x);\n                        if (0 === diff)\n                            diff = compareWithTolerance(this.uvParam.x, rhs.uvParam.y);\n                    }\n                }\n            }\n        }\n        return diff;\n    }\n}\n/** @internal */\nexport class VertexMap extends IndexMap {\n    constructor(tolerance) {\n        super((lhs, rhs) => lhs.compare(rhs, tolerance));\n        this._tolerance = tolerance;\n    }\n    insertKey(props, onInsert) {\n        return this.insert(VertexKey.create(props), onInsert);\n    }\n    arePositionsAlmostEqual(p0, p1) {\n        return 0 === this.comparePositions(p0, p1);\n    }\n    comparePositions(p0, p1) {\n        return comparePositions(p0.position, p1.position, this._tolerance);\n    }\n}\n//# sourceMappingURL=VertexKey.js.map",
      "start": 1693508119949,
      "end": 1693508120021,
      "sourcemaps": null
    }
  ]
}
