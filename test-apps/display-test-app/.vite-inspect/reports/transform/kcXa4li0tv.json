{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/RenderTarget.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Rendering\n */\n/** Used for debugging purposes, to toggle display of instanced or batched primitives.\n * @see [[RenderTargetDebugControl]].\n * @internal\n */\nexport var PrimitiveVisibility;\n(function (PrimitiveVisibility) {\n    /** Draw all primitives. */\n    PrimitiveVisibility[PrimitiveVisibility[\"All\"] = 0] = \"All\";\n    /** Only draw instanced primitives. */\n    PrimitiveVisibility[PrimitiveVisibility[\"Instanced\"] = 1] = \"Instanced\";\n    /** Only draw un-instanced primitives. */\n    PrimitiveVisibility[PrimitiveVisibility[\"Uninstanced\"] = 2] = \"Uninstanced\";\n})(PrimitiveVisibility || (PrimitiveVisibility = {}));\n/** A RenderTarget connects a [[Viewport]] to a WebGLRenderingContext to enable the viewport's contents to be displayed on the screen.\n * Application code rarely interacts directly with a RenderTarget - instead, it interacts with a Viewport which forwards requests to the implementation\n * of the RenderTarget.\n * @internal\n */\nexport class RenderTarget {\n    pickOverlayDecoration(_pt) { return undefined; }\n    get devicePixelRatio() { return 1; }\n    cssPixelsToDevicePixels(cssPixels, floor = true) {\n        const pix = cssPixels * this.devicePixelRatio;\n        return floor ? Math.floor(pix) : pix;\n    }\n    /** Given the size of a logical pixel in meters, convert it to the size of a physical pixel in meters, if [[RenderSystem.dpiAwareLOD]] is `true`.\n     * Used when computing LOD for graphics.\n     */\n    adjustPixelSizeForLOD(cssPixelSize) {\n        return this.renderSystem.dpiAwareLOD ? this.cssPixelsToDevicePixels(cssPixelSize, false) : cssPixelSize;\n    }\n    get animationBranches() { return undefined; }\n    set animationBranches(_transforms) { }\n    get antialiasSamples() { return 1; }\n    set antialiasSamples(_numSamples) { }\n    assignFrameStatsCollector(_collector) { }\n    /** Update the solar shadow map. If a SceneContext is supplied, shadows are enabled; otherwise, shadows are disabled. */\n    updateSolarShadows(_context) { }\n    getPlanarClassifier(_id) { return undefined; }\n    createPlanarClassifier(_properties) { return undefined; }\n    getTextureDrape(_id) { return undefined; }\n    createGraphicBuilder(options) {\n        return this.renderSystem.createGraphic(options);\n    }\n    dispose() { }\n    reset() { }\n    overrideFeatureSymbology(_ovr) { }\n    setHiliteSet(_hilited) { }\n    setFlashed(_elementId, _intensity) { }\n    onBeforeRender(_viewport, _setSceneNeedRedraw) { }\n    onResized() { }\n    /** @deprecated in 3.x. use readImageBuffer */\n    readImage(_rect, _targetSize, _flipVertically) { return undefined; }\n    readImageBuffer(_args) { return undefined; }\n    readImageToCanvas() { return document.createElement(\"canvas\"); }\n    collectStatistics(_stats) { }\n    /** Specify whether webgl content should be rendered directly to the screen.\n     * If rendering to screen becomes enabled, returns the canvas to which to render the webgl content.\n     * Returns undefined if rendering to screen becomes disabled, or is not supported by this RenderTarget.\n     */\n    setRenderToScreen(_toScreen) { return undefined; }\n    get debugControl() { return undefined; }\n    /** Implementation for [[Viewport.queryVisibleFeatures]]. Not intended for direct usage. The returned iterable remains valid only for the duration of the\n     * Viewport.queryVisibleFeatures call.\n     */\n    queryVisibleTileFeatures(_options, _iModel, callback) {\n        callback([]);\n    }\n}\n//# sourceMappingURL=RenderTarget.js.map",
      "start": 1693508119900,
      "end": 1693508119986,
      "sourcemaps": null
    }
  ]
}
