{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/EntityReference.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Schema\n */\n/**\n * Types of concrete entities. Used for storing strings in JavaScript reference-equality containers which encode\n * low-level entity information.\n * @note the values of this enum are unstable, do not depend upon their values between versions of iTwin.js\n *       (e.g. do not serialize them and load them in another version of iTwin.js and expect them to work)\n * CodeSpecs are excepted since their JavaScript representation does not derive from [Entity]($backend)\n * @note the string value of each variant is required/guaranteed to be 1 character\n * @see EntityReference\n * @alpha\n */\nexport var ConcreteEntityTypes;\n(function (ConcreteEntityTypes) {\n    ConcreteEntityTypes[\"Model\"] = \"m\";\n    ConcreteEntityTypes[\"Element\"] = \"e\";\n    ConcreteEntityTypes[\"ElementAspect\"] = \"a\";\n    ConcreteEntityTypes[\"Relationship\"] = \"r\";\n})(ConcreteEntityTypes || (ConcreteEntityTypes = {}));\n/**\n * Adds some utilities to the [[ConcreteEntityTypes]] enum\n * @alpha\n */\n(function (ConcreteEntityTypes) {\n    const toBisCoreRootClassFullNameMap = {\n        [ConcreteEntityTypes.Model]: \"BisCore:Model\",\n        [ConcreteEntityTypes.Element]: \"BisCore:Element\",\n        [ConcreteEntityTypes.ElementAspect]: \"BisCore:ElementAspect\",\n        [ConcreteEntityTypes.Relationship]: \"BisCore:Relationship\",\n    };\n    /** used by the transformer to figure out where to check for the existence in a db of a concrete element id\n     * @internal\n     */\n    function toBisCoreRootClassFullName(type) {\n        return toBisCoreRootClassFullNameMap[type];\n    }\n    ConcreteEntityTypes.toBisCoreRootClassFullName = toBisCoreRootClassFullName;\n})(ConcreteEntityTypes || (ConcreteEntityTypes = {}));\n/** A set of concrete entity ids, with additional functions to more literately add ids where you have the raw id and know what type it is\n * @alpha\n */\nexport class EntityReferenceSet extends Set {\n    addElement(id) { this.add(`e${id}`); }\n    addModel(id) { this.add(`m${id}`); }\n    addAspect(id) { this.add(`a${id}`); }\n    addRelationship(id) { this.add(`r${id}`); }\n}\n//# sourceMappingURL=EntityReference.js.map",
      "start": 1693508120723,
      "end": 1693508120781,
      "sourcemaps": null
    }
  ]
}
