{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend-devtools/lib/esm/tools/RenderTargetTools.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tools\n */\nimport { IModelApp, PrimitiveVisibility, Tool } from \"@itwin/core-frontend\";\nimport { parseToggle } from \"./parseToggle\";\n/** Executes some code against a RenderTargetDebugControl obtained from the selected viewport.\n * @beta\n */\nexport class RenderTargetDebugControlTool extends Tool {\n    async run(_args) {\n        const view = IModelApp.viewManager.selectedView;\n        const control = undefined !== view ? view.target.debugControl : undefined;\n        if (undefined !== control)\n            this.execute(control, view);\n        return true;\n    }\n}\n/** Toggles some aspect of a RenderTargetDebugControl for the selected viewport.\n * @beta\n */\nexport class RenderTargetDebugControlToggleTool extends RenderTargetDebugControlTool {\n    static get minArgs() { return 0; }\n    static get maxArgs() { return 1; }\n    execute(control, vp) {\n        const value = undefined !== this._enable ? this._enable : !control[this.aspect];\n        control[this.aspect] = value;\n        vp.invalidateRenderPlan();\n    }\n    async parseAndRun(...args) {\n        const enable = parseToggle(args[0]);\n        if (typeof enable !== \"string\") {\n            this._enable = enable;\n            await this.run([]);\n        }\n        return true;\n    }\n}\n/** Toggles between normal rendering and rendering as if drawing to an off-screen framebuffer for element locate. Useful for debugging locate issues.\n * @beta\n */\nclass ToggleReadPixelsTool extends RenderTargetDebugControlToggleTool {\n    get aspect() { return \"drawForReadPixels\"; }\n}\nToggleReadPixelsTool.toolId = \"ToggleReadPixels\";\nexport { ToggleReadPixelsTool };\n/** Turn on the display of the draping frustum.\n * @beta\n */\nclass ToggleDrapeFrustumTool extends RenderTargetDebugControlToggleTool {\n    get aspect() { return \"displayDrapeFrustum\"; }\n}\nToggleDrapeFrustumTool.toolId = \"ToggleDrapeFrustum\";\nexport { ToggleDrapeFrustumTool };\n/** Control whether all geometry renders, or only instanced or batched geometry.\n * Allowed argument: \"instanced\", \"batched\", \"all\". Defaults to \"all\" if no arguments supplied.\n * @beta\n */\nclass TogglePrimitiveVisibilityTool extends RenderTargetDebugControlTool {\n    constructor() {\n        super(...arguments);\n        this._visibility = PrimitiveVisibility.All;\n    }\n    static get minArgs() { return 0; }\n    static get maxArgs() { return 1; }\n    execute(control, vp) {\n        control.primitiveVisibility = this._visibility;\n        vp.invalidateScene();\n    }\n    async parseAndRun(...args) {\n        if (0 < args.length) {\n            switch (args[0].toLowerCase()) {\n                case \"instanced\":\n                    this._visibility = PrimitiveVisibility.Instanced;\n                    break;\n                case \"batched\":\n                    this._visibility = PrimitiveVisibility.Uninstanced;\n                    break;\n                case \"all\":\n                    break;\n                default:\n                    return true;\n            }\n        }\n        return this.run(args);\n    }\n}\nTogglePrimitiveVisibilityTool.toolId = \"TogglePrimitiveVisibility\";\nexport { TogglePrimitiveVisibilityTool };\n/** Turn on display of reality tile boundaries.\n * @beta\n */\nclass ToggleRealityTileBounds extends RenderTargetDebugControlToggleTool {\n    get aspect() { return \"displayRealityTileRanges\"; }\n}\nToggleRealityTileBounds.toolId = \"ToggleRealityTileBounds\";\nexport { ToggleRealityTileBounds };\n/** Turn on display of reality tile preload debugging.\n * @beta\n */\nclass ToggleRealityTilePreload extends RenderTargetDebugControlToggleTool {\n    get aspect() { return \"displayRealityTilePreload\"; }\n}\nToggleRealityTilePreload.toolId = \"ToggleRealityTilePreload\";\nexport { ToggleRealityTilePreload };\n/** Freeze loading of reality tiles.\n * @beta\n */\nclass ToggleRealityTileFreeze extends RenderTargetDebugControlToggleTool {\n    get aspect() { return \"freezeRealityTiles\"; }\n}\nToggleRealityTileFreeze.toolId = \"ToggleRealityTileFreeze\";\nexport { ToggleRealityTileFreeze };\n/** Turn on logging of console tile selection and loading (to console).\n * @beta\n */\nclass ToggleRealityTileLogging extends RenderTargetDebugControlToggleTool {\n    get aspect() { return \"logRealityTiles\"; }\n}\nToggleRealityTileLogging.toolId = \"ToggleRealityTileLogging\";\nexport { ToggleRealityTileLogging };\n/** Toggles support for intersecting volume classifiers.\n * @beta\n */\nclass ToggleVolClassIntersect extends RenderTargetDebugControlToggleTool {\n    get aspect() { return \"vcSupportIntersectingVolumes\"; }\n}\nToggleVolClassIntersect.toolId = \"ToggleVCIntersect\";\nexport { ToggleVolClassIntersect };\n/** Set the number of antialiasing samples to use (<=1 for no antialiasing).\n * @beta\n */\nclass SetAASamplesTool extends RenderTargetDebugControlTool {\n    constructor() {\n        super(...arguments);\n        this._aaSamples = 1;\n        this._changeAll = false;\n    }\n    static get minArgs() { return 1; }\n    static get maxArgs() { return 2; }\n    execute(_control, vp) {\n        if (this._changeAll)\n            IModelApp.viewManager.setAntialiasingAllViews(this._aaSamples);\n        else\n            vp.antialiasSamples = this._aaSamples;\n    }\n    /** Runs this tool, setting the number of antialiasing samples to use (<=1 for no antialiasing).\n     * @param args contains the arguments used by the tool's run method: args[0] contains the number of samples; optionally args[1] can contain the word \"all\" in order to set those number of samples for all viewports.\n     */\n    async parseAndRun(...args) {\n        if (0 < args.length)\n            this._aaSamples = parseInt(args[0], 10);\n        this._changeAll = (1 < args.length && args[1].toLowerCase() === \"all\");\n        return this.run(args);\n    }\n}\nSetAASamplesTool.toolId = \"SetAASamples\";\nexport { SetAASamplesTool };\n/** Toggles support for normal maps.\n * @beta\n */\nclass ToggleNormalMaps extends RenderTargetDebugControlToggleTool {\n    get aspect() { return \"displayNormalMaps\"; }\n}\nToggleNormalMaps.toolId = \"ToggleNormalMaps\";\nexport { ToggleNormalMaps };\n//# sourceMappingURL=RenderTargetTools.js.map",
      "start": 1693508122713,
      "end": 1693508122814,
      "sourcemaps": null
    }
  ]
}
