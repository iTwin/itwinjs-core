{
  "resolvedId": "D:/hub2023A/itwinjs-core/ui/appui-abstract/lib/esm/appui-abstract/UiItemsManager.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/* eslint-disable deprecation/deprecation */\n/** @packageDocumentation\n * @module UiItemsProvider\n */\nimport { BeEvent, Logger } from \"@itwin/core-bentley\";\nimport { loggerCategory } from \"./utils/misc\";\n/** Action taken by the application on item provided by a UiItemsProvider\n * @public @deprecated in 3.2. This was only used by the previously removed UiItemsArbiter.\n */\nexport var UiItemsApplicationAction;\n(function (UiItemsApplicationAction) {\n    /** Allow the change to the item */\n    UiItemsApplicationAction[UiItemsApplicationAction[\"Allow\"] = 0] = \"Allow\";\n    /** Disallow the change to the item */\n    UiItemsApplicationAction[UiItemsApplicationAction[\"Disallow\"] = 1] = \"Disallow\";\n    /** Update the item during the change */\n    UiItemsApplicationAction[UiItemsApplicationAction[\"Update\"] = 2] = \"Update\";\n})(UiItemsApplicationAction || (UiItemsApplicationAction = {}));\n/** Controls registering of UiItemsProviders and calls the provider's methods when populating different parts of the User Interface.\n * @deprecated in 3.6. Use [UiItemsManager]($appui-react) instead.\n * @public\n */\nclass UiItemsManager {\n    /** For use in unit testing\n     * @internal */\n    static clearAllProviders() {\n        UiItemsManager._registeredUiItemsProviders.clear();\n    }\n    /** Return number of registered UiProvider. */\n    static get registeredProviderIds() {\n        const ids = [...UiItemsManager._registeredUiItemsProviders.keys()];\n        return ids;\n    }\n    /** Return true if there is any registered UiProvider. */\n    static get hasRegisteredProviders() {\n        return this._registeredUiItemsProviders.size > 0;\n    }\n    /**\n     * Retrieves a previously loaded UiItemsProvider.\n     * @param providerId id of the UiItemsProvider to get\n     */\n    static getUiItemsProvider(providerId) {\n        return UiItemsManager._registeredUiItemsProviders.get(providerId)?.provider;\n    }\n    static sendRegisteredEvent(ev) {\n        UiItemsManager.onUiProviderRegisteredEvent.raiseEvent(ev);\n    }\n    /**\n     * Registers a UiItemsProvider with the UiItemsManager.\n     * @param uiProvider the UI items provider to register.\n     */\n    static register(uiProvider, overrides) {\n        const providerId = overrides?.providerId ?? uiProvider.id;\n        if (UiItemsManager.getUiItemsProvider(providerId)) {\n            Logger.logInfo(loggerCategory(this), `UiItemsProvider (${providerId}) is already loaded`);\n        }\n        else {\n            UiItemsManager._registeredUiItemsProviders.set(providerId, { provider: uiProvider, overrides });\n            Logger.logInfo(loggerCategory(this), `UiItemsProvider ${uiProvider.id} registered as ${providerId} `);\n            UiItemsManager.sendRegisteredEvent({ providerId });\n        }\n    }\n    /** Remove a specific UiItemsProvider from the list of available providers. */\n    static unregister(uiProviderId) {\n        const provider = UiItemsManager.getUiItemsProvider(uiProviderId);\n        if (!provider)\n            return;\n        provider.onUnregister && provider.onUnregister();\n        UiItemsManager._registeredUiItemsProviders.delete(uiProviderId);\n        Logger.logInfo(loggerCategory(this), `UiItemsProvider (${uiProviderId}) unloaded`);\n        // trigger a refresh of the ui\n        UiItemsManager.sendRegisteredEvent({ providerId: uiProviderId });\n    }\n    static allowItemsFromProvider(entry, stageId, stageUsage) {\n        // istanbul ignore else\n        const overrides = entry.overrides;\n        if (undefined !== stageId && overrides?.stageIds && !(overrides.stageIds.some((value) => value === stageId)))\n            return false;\n        if (undefined !== stageUsage && overrides?.stageUsages && !(overrides.stageUsages.some((value) => value === stageUsage)))\n            return false;\n        return true;\n    }\n    /** Called when the application is populating a toolbar so that any registered UiItemsProvider can add tool buttons that either either execute\n     * an action or specify a registered ToolId into toolbar.\n     * @param stageId a string identifier the active stage.\n     * @param stageUsage the StageUsage of the active stage.\n     * @param toolbarUsage usage of the toolbar\n     * @param toolbarOrientation orientation of the toolbar\n     * @returns an array of error messages. The array will be empty if the load is successful, otherwise it is a list of one or more problems.\n     */\n    static getToolbarButtonItems(stageId, stageUsage, toolbarUsage, toolbarOrientation, stageAppData) {\n        const buttonItems = [];\n        if (0 === UiItemsManager._registeredUiItemsProviders.size)\n            return buttonItems;\n        UiItemsManager._registeredUiItemsProviders.forEach((entry) => {\n            const uiProvider = entry.provider;\n            const providerId = entry.overrides?.providerId ?? uiProvider.id;\n            // istanbul ignore else\n            if (uiProvider.provideToolbarButtonItems && this.allowItemsFromProvider(entry, stageId, stageUsage)) {\n                uiProvider.provideToolbarButtonItems(stageId, stageUsage, toolbarUsage, toolbarOrientation, stageAppData)\n                    .forEach((spec) => {\n                    // ignore duplicate ids\n                    if (-1 === buttonItems.findIndex((existingItem) => spec.id === existingItem.id))\n                        buttonItems.push({ ...spec, providerId });\n                });\n            }\n        });\n        return buttonItems;\n    }\n    /** Called when the application is populating the statusbar so that any registered UiItemsProvider can add status fields\n     * @param stageId a string identifier the active stage.\n     * @param stageUsage the StageUsage of the active stage.\n     * @returns An array of CommonStatusBarItem that will be used to create controls for the status bar.\n     */\n    static getStatusBarItems(stageId, stageUsage, stageAppData) {\n        const statusBarItems = [];\n        if (0 === UiItemsManager._registeredUiItemsProviders.size)\n            return statusBarItems;\n        UiItemsManager._registeredUiItemsProviders.forEach((entry) => {\n            const uiProvider = entry.provider;\n            const providerId = entry.overrides?.providerId ?? uiProvider.id;\n            // istanbul ignore else\n            if (uiProvider.provideStatusBarItems && this.allowItemsFromProvider(entry, stageId, stageUsage)) {\n                uiProvider.provideStatusBarItems(stageId, stageUsage, stageAppData)\n                    .forEach((item) => {\n                    // ignore duplicate ids\n                    if (-1 === statusBarItems.findIndex((existingItem) => item.id === existingItem.id))\n                        statusBarItems.push({ ...item, providerId });\n                });\n            }\n        });\n        return statusBarItems;\n    }\n    /** Called when the application is populating the statusbar so that any registered UiItemsProvider can add status fields\n     * @returns An array of BackstageItem that will be used to create controls for the backstage menu.\n     */\n    static getBackstageItems() {\n        const backstageItems = [];\n        if (0 === UiItemsManager._registeredUiItemsProviders.size)\n            return backstageItems;\n        UiItemsManager._registeredUiItemsProviders.forEach((entry) => {\n            const uiProvider = entry.provider;\n            const providerId = entry.overrides?.providerId ?? uiProvider.id;\n            // istanbul ignore else\n            if (uiProvider.provideBackstageItems) { // Note: We do not call this.allowItemsFromProvider here as backstage items\n                uiProvider.provideBackstageItems() //       should not be considered stage specific. If they need to be hidden\n                    .forEach((item) => {\n                    // ignore duplicate ids\n                    if (-1 === backstageItems.findIndex((existingItem) => item.id === existingItem.id))\n                        backstageItems.push({ ...item, providerId });\n                });\n            }\n        });\n        return backstageItems;\n    }\n    /** Called when the application is populating the Stage Panels so that any registered UiItemsProvider can add widgets\n     * @param stageId a string identifier the active stage.\n     * @param stageUsage the StageUsage of the active stage.\n     * @param location the location within the stage.\n     * @param section the section within location.\n     * @returns An array of AbstractWidgetProps that will be used to create widgets.\n     */\n    static getWidgets(stageId, stageUsage, location, section, zoneLocation, stageAppData) {\n        const widgets = [];\n        if (0 === UiItemsManager._registeredUiItemsProviders.size)\n            return widgets;\n        UiItemsManager._registeredUiItemsProviders.forEach((entry) => {\n            const uiProvider = entry.provider;\n            const providerId = entry.overrides?.providerId ?? uiProvider.id;\n            // istanbul ignore else\n            if (uiProvider.provideWidgets && this.allowItemsFromProvider(entry, stageId, stageUsage)) {\n                uiProvider.provideWidgets(stageId, stageUsage, location, section, zoneLocation, stageAppData)\n                    .forEach((widget) => {\n                    // ignore duplicate ids\n                    if (-1 === widgets.findIndex((existingItem) => widget.id === existingItem.id))\n                        widgets.push({ ...widget, providerId });\n                });\n            }\n        });\n        return widgets;\n    }\n}\nUiItemsManager._registeredUiItemsProviders = new Map();\n/** Event raised any time a UiProvider is registered or unregistered. */\nUiItemsManager.onUiProviderRegisteredEvent = new BeEvent();\nexport { UiItemsManager };\n//# sourceMappingURL=UiItemsManager.js.map",
      "start": 1693508124373,
      "end": 1693508124442,
      "sourcemaps": null
    }
  ]
}
