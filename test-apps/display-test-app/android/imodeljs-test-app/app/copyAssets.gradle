//file:noinspection GroovyGStringKey
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption

static def copyDirectory(srcDir, destDir) {
    Files.walk(srcDir).forEach(srcPath -> {
        def destinationPath = Paths.get(destDir.toString(), srcDir.relativize(srcPath).toString())
        // skip copying directories that already exist
        if (!Files.exists(destinationPath) || !Files.isDirectory(destinationPath))
            Files.copy(srcPath, destinationPath, StandardCopyOption.REPLACE_EXISTING)
    })
}

static def copyFile(srcFile, destDir) {
    def destFile = Paths.get(destDir.toString(), srcFile.getFileName().toString())
    Files.copy(srcFile, destFile, StandardCopyOption.REPLACE_EXISTING)
}

task copyAssets {
    doLast {
        def dtaDir = "${rootDir}/../.."
        def assetsDir = "${rootDir}/app/src/main/assets"

        Map itemsToCopy = [
            "${dtaDir}/lib": "${assetsDir}/www",
            "${assetsDir}/www/locales/en": "${assetsDir}/www/locales/en-US"
        ]

        for (def entry in itemsToCopy) {
            def srcPath = Paths.get(entry.key)
            def destDir = Paths.get(entry.value)

            if (!Files.exists(srcPath))
                throw new IOException("${srcPath.toAbsolutePath()} does not exist. Make sure the front and back ends have been built prior to building the Android project.")

            if (!Files.exists(destDir))
                Files.createDirectories(destDir)

            if (Files.isDirectory(srcPath))
                copyDirectory(srcPath, destDir)
            else
                copyFile(srcPath, destDir)
        }
    }
}
