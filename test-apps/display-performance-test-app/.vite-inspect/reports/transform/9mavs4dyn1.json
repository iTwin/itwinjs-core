{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/pointcloud/model/PointDataRaw.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { PointData } from \"./PointData\";\n/**\n * Class PointDataRaw stores point data with 8 or 16-bit XYZ geometry and 24-bit BGR color precision.\n */\n/** @internal */\nclass PointDataRaw extends PointData {\n    /**\n     * Create new point data.\n     */\n    constructor(tileIndex, bounds, points16, points8, colors) {\n        super(tileIndex, bounds);\n        this.bounds = bounds;\n        this.points16 = points16;\n        this.points8 = points8;\n        this.colors = colors;\n    }\n    getRawX(pointIndex) {\n        if (this.points16 == null)\n            return this.points8.get(3 * pointIndex + 0);\n        return this.points16.get(3 * pointIndex + 0);\n    }\n    getRawY(pointIndex) {\n        if (this.points16 == null)\n            return this.points8.get(3 * pointIndex + 1);\n        return this.points16.get(3 * pointIndex + 1);\n    }\n    getRawZ(pointIndex) {\n        if (this.points16 == null)\n            return this.points8.get(3 * pointIndex + 2);\n        return this.points16.get(3 * pointIndex + 2);\n    }\n    getX(pointIndex) {\n        let range = (this.points16 == null) ? 256.0 : 65536.0;\n        let bias = (this.points16 == null) ? 0.5 : 0.0;\n        return this.bounds.min.x + ((this.getRawX(pointIndex) + bias) / range) * (this.bounds.max.x - this.bounds.min.x);\n    }\n    getY(pointIndex) {\n        let range = (this.points16 == null) ? 256.0 : 65536.0;\n        let bias = (this.points16 == null) ? 0.5 : 0.0;\n        return this.bounds.min.y + ((this.getRawY(pointIndex) + bias) / range) * (this.bounds.max.y - this.bounds.min.y);\n    }\n    getZ(pointIndex) {\n        let range = (this.points16 == null) ? 256.0 : 65536.0;\n        let bias = (this.points16 == null) ? 0.5 : 0.0;\n        return this.bounds.min.z + ((this.getRawZ(pointIndex) + bias) / range) * (this.bounds.max.z - this.bounds.min.z);\n    }\n    getRed(pointIndex) {\n        return this.colors.get(3 * pointIndex + 2);\n    }\n    getGreen(pointIndex) {\n        return this.colors.get(3 * pointIndex + 1);\n    }\n    getBlue(pointIndex) {\n        return this.colors.get(3 * pointIndex + 0);\n    }\n}\n// the identifier of this data format\nPointDataRaw.TYPE = 1;\nexport { PointDataRaw };\n//# sourceMappingURL=PointDataRaw.js.map",
      "start": 1693508124873,
      "end": 1693508124961,
      "sourcemaps": null
    }
  ]
}
