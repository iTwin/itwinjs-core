{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/spatial/ecrs/Datum.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { ASystem } from \"../../system/runtime/ASystem\";\nimport { Strings } from \"../../system/runtime/Strings\";\n/**\n * Class Datum defines the parameters of a Datum.\n *\n * Based on the following document:\n *\n * Coordinate Conversions and Transformations including Formulas\n * Guidance Note Number 7, part 2\n * Revised May 2005\n * Available at: http://www.epsg.org/\n *\n * @version 1.0 July 2005\n */\n/** @internal */\nclass Datum {\n    /**\n     * Create a new datum.\n     * @param code the code.\n     * @param name the name.\n     * @param type the type.\n     * @param ellipsoid the ellipsoid.\n     * @param primeMeridian the prime meridian.\n     */\n    constructor(code, name, type, ellipsoid, primeMeridian) {\n        /* Check the parameters */\n        ASystem.assertNot(name == null, \"A datum needs a name\");\n        ASystem.assertNot(type == null, \"A datum needs a type\");\n        /* Store the parameters */\n        this._code = code;\n        this._name = name;\n        this._type = type;\n        this._ellipsoid = ellipsoid;\n        this._primeMeridian = primeMeridian;\n        this._toWGS84 = null;\n        /* Check the parameters */\n        if (this.isTypeGeodetic()) {\n            /* Check ellipsoid and prime meridian */\n            ASystem.assertNot(ellipsoid == null, \"A geodetic datum needs an ellipsoid\");\n            ASystem.assertNot(primeMeridian == null, \"A geodetic datum needs a prime meridian\");\n        }\n        else if (this.isTypeVertical()) {\n            /* No ellipsoid and prime meridian */\n            ASystem.assertNot(ellipsoid != null, \"A vertical datum does not have an ellipsoid\");\n            ASystem.assertNot(primeMeridian != null, \"A vertical datum does not have a prime meridian\");\n        }\n        else {\n            /* Invalid type */\n            ASystem.assertNot(true, \"Invalid datum type '\" + type + \"'\");\n        }\n    }\n    /**\n     * Get the code.\n     * @return the code.\n     */\n    getCode() {\n        return this._code;\n    }\n    /**\n     * Get the name.\n     * @return the name.\n     */\n    getName() {\n        return this._name;\n    }\n    /**\n     * Get the type.\n     * @return the type.\n     */\n    getType() {\n        return this._type;\n    }\n    /**\n     * Is this a geodetic datum?\n     * @return true for a geodetic datum.\n     */\n    isTypeGeodetic() {\n        return (Strings.equalsIgnoreCase(this._type, Datum.TYPE_GEODETIC));\n    }\n    /**\n     * Is this a vertical datum?\n     * @return true for a vertical datum.\n     */\n    isTypeVertical() {\n        return (Strings.equalsIgnoreCase(this._type, Datum.TYPE_VERTICAL));\n    }\n    /**\n     * Get the ellipsoid.\n     * @return the ellipsoid.\n     */\n    getEllipsoid() {\n        return this._ellipsoid;\n    }\n    /**\n     * Get the prime meridian.\n     * @return the prime meridian.\n     */\n    getPrimeMeridian() {\n        return this._primeMeridian;\n    }\n    /**\n     * Get the optional toWGS84 datum transformation.\n     * @return the optional toWGS84 datum transformation.\n     */\n    getToWGS84() {\n        return this._toWGS84;\n    }\n    /**\n     * Set the optional toWGS84 datum transformation.\n     * @param toWGS84 the optional toWGS84 datum transformation.\n     */\n    setToWGS84(toWGS84) {\n        this._toWGS84 = toWGS84;\n    }\n    /**\n     * Check if another datum is compatible with this one.\n     * @param other the other datum.\n     * @return true if compatible.\n     */\n    isCompatible(other) {\n        if (other._code == this._code)\n            return true;\n        if (Strings.equalsIgnoreCase(other._type, this._type) == false)\n            return false;\n        if (other._ellipsoid.isCompatible(this._ellipsoid) == false)\n            return false;\n        if (other._primeMeridian.isCompatible(this._primeMeridian) == false)\n            return false;\n        return true;\n    }\n    /**\n     * Check if two datums are compatible.\n     * @param datum1 the first datum.\n     * @param datum2 the second datum.\n     * @return true if compatible.\n     */\n    static areCompatible(datum1, datum2) {\n        if (datum1 == null)\n            return (datum2 == null);\n        if (datum2 == null)\n            return false;\n        return (datum1.isCompatible(datum2));\n    }\n    /**\n     * The standard toString method.\n     * @see Object#toString\n     */\n    toString() {\n        return \"[Datum:code=\" + this._code + \",name='\" + this._name + \"',ellipsoid=\" + this._ellipsoid + \",primeMeridian=\" + this._primeMeridian + \"]\";\n    }\n}\n/** The type of a geodetic datum */\nDatum.TYPE_GEODETIC = \"geodetic\";\n/** The type of a vertical datum */\nDatum.TYPE_VERTICAL = \"vertical\";\nexport { Datum };\n//# sourceMappingURL=Datum.js.map",
      "start": 1693508125612,
      "end": 1693508125648,
      "sourcemaps": null
    }
  ]
}
