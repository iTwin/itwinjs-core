{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/geometry/lib/esm/curve/Loop.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\nimport { CurveChain } from \"./CurveCollection\";\nimport { LineString3d } from \"./LineString3d\";\n/**\n * A `Loop` is a curve chain that is the boundary of a closed (planar) loop.\n * @see [Curve Collections]($docs/learning/geometry/CurveCollection.md) learning article.\n * @public\n */\nexport class Loop extends CurveChain {\n    /** Test if `other` is a `Loop` */\n    isSameGeometryClass(other) {\n        return other instanceof Loop;\n    }\n    /** Test if `other` is an instance of `Loop` */\n    constructor() {\n        super();\n        /** String name for schema properties */\n        this.curveCollectionType = \"loop\";\n        /** Tag value that can be set to true for user code to mark inner and outer loops. */\n        this.isInner = false;\n    }\n    /**\n     * Create a loop from variable length list of CurvePrimitives\n     * @param curves array of individual curve primitives\n     */\n    static create(...curves) {\n        const result = new Loop();\n        for (const curve of curves) {\n            result.children.push(curve);\n        }\n        return result;\n    }\n    /**\n     * Create a loop from an array of curve primitives\n     * @param curves array of individual curve primitives\n     */\n    static createArray(curves) {\n        const result = new Loop();\n        for (const curve of curves) {\n            result.children.push(curve);\n        }\n        return result;\n    }\n    /** Create a loop from an array of points */\n    static createPolygon(points) {\n        const linestring = LineString3d.create(points);\n        linestring.addClosurePoint();\n        return Loop.create(linestring);\n    }\n    /** Create a loop with the stroked form of this loop. */\n    cloneStroked(options) {\n        const strokes = LineString3d.create();\n        for (const curve of this.children)\n            curve.emitStrokes(strokes, options);\n        // eliminate near-duplicate points between children\n        strokes.removeDuplicatePoints();\n        if (strokes.isPhysicallyClosed) {\n            strokes.popPoint();\n            strokes.addClosurePoint();\n        }\n        return Loop.create(strokes);\n    }\n    /** Return the boundary type (2) of a corresponding  MicroStation CurveVector */\n    dgnBoundaryType() {\n        /**\n         * All \"Loop\" become \"outer\". TypeScript Loop object is equivalent to a native CurveVector with\n         * boundaryType = BOUNDARY_TYPE_Outer.Â In other words, TypeScript has no flavor of Loop that\n         * carries \"hole\" semantics.\n         */\n        return 2;\n    }\n    /** Invoke `processor.announceLoop(this, indexInParent)` */\n    announceToCurveProcessor(processor, indexInParent = -1) {\n        return processor.announceLoop(this, indexInParent);\n    }\n    /** Create a new `Loop` with no children */\n    cloneEmptyPeer() {\n        return new Loop();\n    }\n    /** Second step of double dispatch:  call `handler.handleLoop(this)` */\n    dispatchToGeometryHandler(handler) {\n        return handler.handleLoop(this);\n    }\n}\n/**\n * Structure carrying a pair of loops with curve geometry.\n * @public\n */\nexport class LoopCurveLoopCurve {\n    /** Constructor */\n    constructor(loopA, curveA, loopB, curveB) {\n        this.loopA = loopA;\n        this.curveA = curveA;\n        this.loopB = loopB;\n        this.curveB = curveB;\n    }\n    /** Set the loopA and curveA members */\n    setA(loop, curve) {\n        this.loopA = loop;\n        this.curveA = curve;\n    }\n    /** Set the loopB and curveB members */\n    setB(loop, curve) {\n        this.loopB = loop;\n        this.curveB = curve;\n    }\n}\n//# sourceMappingURL=Loop.js.map",
      "start": 1693508122769,
      "end": 1693508122919,
      "sourcemaps": null
    }
  ]
}
