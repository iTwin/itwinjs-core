{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/tools/AccuDrawTool.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tools\n */\nimport { BentleyStatus } from \"@itwin/core-bentley\";\nimport { Geometry, Matrix3d, Point3d, Transform, Vector3d } from \"@itwin/core-geometry\";\nimport { AccuDraw, AccuDrawFlags, CompassMode, ContextMode, ItemField, KeyinStatus, LockedStates, RotationMode, ThreeAxes } from \"../AccuDraw\";\nimport { TentativeOrAccuSnap } from \"../AccuSnap\";\nimport { ACSDisplayOptions } from \"../AuxCoordSys\";\nimport { IModelApp } from \"../IModelApp\";\nimport { BeButtonEvent, CoordinateLockOverrides, CoreTools, EventHandled, InputCollector, Tool } from \"./Tool\";\n// cSpell:ignore dont unlockedz\nfunction normalizedDifference(point1, point2, out) {\n    return point2.vectorTo(point1).normalizeWithLength(out).mag;\n}\nfunction normalizedCrossProduct(vec1, vec2, out) {\n    return vec1.crossProduct(vec2, out).normalizeWithLength(out).mag;\n}\n/**\n * A shortcut may require no user input (immediate) or it may install a tool to collect the needed input. AccuDrawShortcuts are how users control AccuDraw.\n * A tool implementor should not use this class to setup AccuDraw, instead use AccuDrawHintBuilder to provide hints.\n * @alpha\n */\nexport class AccuDrawShortcuts {\n    static rotateAxesByPoint(isSnapped, aboutCurrentZ) {\n        const accudraw = IModelApp.accuDraw;\n        if (!accudraw.isEnabled)\n            return false;\n        const vp = accudraw.currentView;\n        if (!vp)\n            return false;\n        const point = accudraw.point;\n        if (!vp.view.is3d())\n            point.z = 0.0;\n        if (aboutCurrentZ)\n            accudraw.hardConstructionPlane(point, point, accudraw.planePt, accudraw.axes.z, vp, isSnapped);\n        else\n            accudraw.softConstructionPlane(point, point, accudraw.planePt, accudraw.axes.z, vp, isSnapped);\n        // Snap point and compass origin coincide...\n        const xVec = new Vector3d();\n        if (normalizedDifference(point, accudraw.planePt, xVec) < Geometry.smallAngleRadians)\n            return false;\n        accudraw.axes.x.setFrom(xVec);\n        if (RotationMode.Context !== accudraw.rotationMode)\n            accudraw.setRotationMode(RotationMode.Context);\n        accudraw.flags.contextRotMode = ContextMode.XAxis;\n        accudraw.flags.lockedRotation = false;\n        accudraw.updateRotation();\n        // Always want index line to display for x-Axis...changing rotation clears this...so it flashes...\n        accudraw.indexed |= LockedStates.X_BM;\n        return true;\n    }\n    static updateACSByPoints(acs, vp, points, isDynamics) {\n        const accudraw = IModelApp.accuDraw;\n        if (!accudraw.isEnabled)\n            return false;\n        let accept = false;\n        const vec = [new Vector3d(), new Vector3d(), new Vector3d()];\n        acs.setOrigin(points[0]);\n        switch (points.length) {\n            case 1:\n                acs.setRotation(vp.rotation);\n                if (!isDynamics) {\n                    accudraw.published.origin.setFrom(points[0]);\n                    accudraw.published.flags = AccuDrawFlags.SetOrigin;\n                    accudraw.flags.fixedOrg = true;\n                }\n                break;\n            case 2:\n                if (normalizedDifference(points[1], points[0], vec[0]) < 0.00001) {\n                    accept = true;\n                    break;\n                }\n                if (vp.view.is3d()) {\n                    if (normalizedCrossProduct(accudraw.axes.y, vec[0], vec[1]) < 0.00001) {\n                        vec[2].set(0.0, 0.0, 1.0);\n                        if (normalizedCrossProduct(vec[2], vec[0], vec[1]) < 0.00001) {\n                            vec[2].set(0.0, 1.0, 0.0);\n                            normalizedCrossProduct(vec[2], vec[0], vec[1]);\n                        }\n                    }\n                    normalizedCrossProduct(vec[0], vec[1], vec[2]);\n                    acs.setRotation(Matrix3d.createRows(vec[0], vec[1], vec[2]));\n                    if (!isDynamics) {\n                        accudraw.published.origin.setFrom(points[0]);\n                        accudraw.published.flags = AccuDrawFlags.SetOrigin | AccuDrawFlags.SetNormal;\n                        accudraw.published.vector.setFrom(vec[0]);\n                    }\n                    break;\n                }\n                vec[2].set(0.0, 0.0, 1.0);\n                normalizedCrossProduct(vec[2], vec[0], vec[1]);\n                acs.setRotation(Matrix3d.createRows(vec[0], vec[1], vec[2]));\n                accept = true;\n                break;\n            case 3:\n                if (normalizedDifference(points[1], points[0], vec[0]) < 0.00001 ||\n                    normalizedDifference(points[2], points[0], vec[1]) < 0.00001 ||\n                    normalizedCrossProduct(vec[0], vec[1], vec[2]) < 0.00001) {\n                    accept = true;\n                    break;\n                }\n                normalizedCrossProduct(vec[2], vec[0], vec[1]);\n                acs.setRotation(Matrix3d.createRows(vec[0], vec[1], vec[2]));\n                accept = true;\n                break;\n        }\n        return accept;\n    }\n    static processPendingHints() { IModelApp.accuDraw.processHints(); }\n    static requestInputFocus() {\n        const accudraw = IModelApp.accuDraw;\n        if (!accudraw.isEnabled)\n            return;\n        accudraw.grabInputFocus();\n        accudraw.refreshDecorationsAndDynamics();\n    }\n    // Helper method for GUI implementation...\n    static async itemFieldNavigate(index, str, forward) {\n        const accudraw = IModelApp.accuDraw;\n        if (!accudraw.isEnabled)\n            return;\n        if (accudraw.getFieldLock(index))\n            accudraw.saveCoordinate(index, accudraw.getValueByIndex(index));\n        if (!accudraw.isActive && KeyinStatus.Partial === accudraw.getKeyinStatus(index)) {\n            await accudraw.processFieldInput(index, str, true);\n        }\n        else {\n            accudraw.setKeyinStatus(index, KeyinStatus.Dynamic);\n            accudraw.onFieldValueChange(index);\n        }\n        const vp = accudraw.currentView;\n        const is3d = vp ? vp.view.is3d() : false;\n        const isPolar = (CompassMode.Polar === accudraw.compassMode);\n        switch (index) {\n            case ItemField.DIST_Item:\n                index = ((is3d && !forward) ? ItemField.Z_Item : ItemField.ANGLE_Item);\n                break;\n            case ItemField.ANGLE_Item:\n                index = ((is3d && forward) ? ItemField.Z_Item : ItemField.DIST_Item);\n                break;\n            case ItemField.X_Item:\n                index = ((is3d && !forward) ? ItemField.Z_Item : ItemField.Y_Item);\n                break;\n            case ItemField.Y_Item:\n                index = ((is3d && forward) ? ItemField.Z_Item : ItemField.X_Item);\n                break;\n            case ItemField.Z_Item:\n                index = (forward ? (isPolar ? ItemField.DIST_Item : ItemField.X_Item) : (isPolar ? ItemField.ANGLE_Item : ItemField.Y_Item));\n                break;\n        }\n        accudraw.setKeyinStatus(index, KeyinStatus.Partial);\n        accudraw.setFocusItem(index);\n        accudraw.dontMoveFocus = true;\n    }\n    static itemFieldNewInput(index) { IModelApp.accuDraw.setKeyinStatus(index, KeyinStatus.Partial); }\n    static async itemFieldAcceptInput(index, str) {\n        const accudraw = IModelApp.accuDraw;\n        await accudraw.processFieldInput(index, str, true);\n        accudraw.setKeyinStatus(index, KeyinStatus.Dynamic);\n        if (accudraw.getFieldLock(index))\n            accudraw.saveCoordinate(index, accudraw.getValueByIndex(index));\n        const vp = accudraw.currentView;\n        if (accudraw.isActive) {\n            if (!vp)\n                return;\n            if (CompassMode.Polar === accudraw.compassMode)\n                accudraw.fixPointPolar(vp);\n            else\n                accudraw.fixPointRectangular(vp);\n            accudraw.flags.dialogNeedsUpdate = true;\n            return;\n        }\n        const is3d = vp ? vp.view.is3d() : false;\n        const isPolar = (CompassMode.Polar === accudraw.compassMode);\n        switch (index) {\n            case ItemField.DIST_Item:\n                index = ItemField.ANGLE_Item;\n                break;\n            case ItemField.ANGLE_Item:\n                index = (is3d ? ItemField.Z_Item : ItemField.DIST_Item);\n                break;\n            case ItemField.X_Item:\n                index = ItemField.Y_Item;\n                break;\n            case ItemField.Y_Item:\n                index = (is3d ? ItemField.Z_Item : ItemField.X_Item);\n                break;\n            case ItemField.Z_Item:\n                index = (isPolar ? ItemField.DIST_Item : ItemField.X_Item);\n                break;\n        }\n        accudraw.setFocusItem(index);\n    }\n    static itemFieldLockToggle(index) {\n        const accudraw = IModelApp.accuDraw;\n        if (!accudraw.isEnabled)\n            return;\n        if (accudraw.getFieldLock(index)) {\n            switch (index) {\n                case ItemField.DIST_Item:\n                    accudraw.distanceLock(true, false);\n                    break;\n                case ItemField.ANGLE_Item:\n                    accudraw.angleLock();\n                    break;\n                case ItemField.X_Item:\n                    accudraw.clearTentative();\n                    accudraw.locked |= LockedStates.X_BM;\n                    break;\n                case ItemField.Y_Item:\n                    accudraw.clearTentative();\n                    accudraw.locked |= LockedStates.Y_BM;\n                    break;\n                case ItemField.Z_Item:\n                    accudraw.clearTentative();\n                    break;\n            }\n            return;\n        }\n        switch (index) {\n            case ItemField.DIST_Item:\n                accudraw.locked &= ~LockedStates.DIST_BM;\n                break;\n            case ItemField.ANGLE_Item:\n                accudraw.locked &= ~LockedStates.ANGLE_BM;\n                break;\n            case ItemField.X_Item:\n                accudraw.locked &= ~LockedStates.X_BM;\n                break;\n            case ItemField.Y_Item:\n                accudraw.locked &= ~LockedStates.Y_BM;\n                break;\n            case ItemField.Z_Item:\n                break;\n        }\n        accudraw.dontMoveFocus = false;\n        accudraw.clearTentative();\n    }\n    static itemRotationModeChange(rotation) {\n        const accudraw = IModelApp.accuDraw;\n        const vp = accudraw.currentView;\n        const is3d = vp ? vp.view.is3d() : true;\n        if (!is3d && (RotationMode.Front === rotation || RotationMode.Side === rotation))\n            accudraw.setRotationMode(RotationMode.Top);\n        accudraw.flags.baseRotation = rotation;\n        accudraw.updateRotation(true);\n    }\n    // Shortcut implementations for GUI entry points...\n    static setOrigin(explicitOrigin) {\n        const accudraw = IModelApp.accuDraw;\n        if (!accudraw.isEnabled)\n            return;\n        if (explicitOrigin) {\n            accudraw.published.origin.setFrom(explicitOrigin);\n            accudraw.flags.haveValidOrigin = true;\n        }\n        else if (accudraw.isInactive || accudraw.isDeactivated) {\n            // If AccuSnap is active use adjusted snap point, otherwise use last data point...\n            const snap = TentativeOrAccuSnap.getCurrentSnap(false);\n            if (undefined !== snap) {\n                accudraw.published.origin.setFrom(snap.isPointAdjusted ? snap.adjustedPoint : snap.getPoint());\n                accudraw.flags.haveValidOrigin = true;\n            }\n            else {\n                const ev = new BeButtonEvent();\n                IModelApp.toolAdmin.fillEventFromLastDataButton(ev);\n                if (ev.viewport) {\n                    accudraw.published.origin.setFrom(ev.point);\n                    accudraw.flags.haveValidOrigin = true;\n                }\n                else {\n                    // NOTE: If current point isn't valid setDefaultOrigin will be called...\n                    accudraw.published.origin.setFrom(accudraw.point);\n                }\n            }\n        }\n        else {\n            accudraw.published.origin.setFrom(accudraw.point);\n            accudraw.flags.haveValidOrigin = true;\n            accudraw.setLastPoint(accudraw.published.origin);\n        }\n        accudraw.clearTentative();\n        const vp = accudraw.currentView;\n        // NOTE: _AdjustPoint should have been called to have setup currentView...\n        if (vp && !vp.view.is3d())\n            accudraw.published.origin.z = 0.0;\n        accudraw.origin.setFrom(accudraw.published.origin);\n        accudraw.point.setFrom(accudraw.published.origin);\n        accudraw.planePt.setFrom(accudraw.published.origin);\n        accudraw.published.flags |= AccuDrawFlags.SetOrigin;\n        accudraw.activate();\n        accudraw.refreshDecorationsAndDynamics();\n    }\n    static changeCompassMode() {\n        const accudraw = IModelApp.accuDraw;\n        if (!accudraw.isEnabled)\n            return;\n        let axisLockStatus = accudraw.locked & LockedStates.XY_BM;\n        if (axisLockStatus) {\n            if (CompassMode.Rectangular === accudraw.compassMode) {\n                if (axisLockStatus & LockedStates.X_BM && accudraw.delta.x !== 0.0)\n                    axisLockStatus &= ~LockedStates.X_BM;\n                if (axisLockStatus & LockedStates.Y_BM && accudraw.delta.y !== 0.0)\n                    axisLockStatus &= ~LockedStates.Y_BM;\n            }\n        }\n        accudraw.changeCompassMode(true);\n        if (axisLockStatus) {\n            if (CompassMode.Rectangular === accudraw.compassMode) {\n                accudraw.delta.x = accudraw.delta.y = 0.0;\n                if (axisLockStatus & LockedStates.X_BM)\n                    accudraw.setFieldLock(ItemField.X_Item, true);\n                else if (axisLockStatus & LockedStates.Y_BM)\n                    accudraw.setFieldLock(ItemField.Y_Item, true);\n            }\n            else {\n                accudraw.setFieldLock(ItemField.ANGLE_Item, true);\n            }\n            accudraw.locked = axisLockStatus;\n        }\n        accudraw.flags.baseMode = accudraw.compassMode;\n        accudraw.refreshDecorationsAndDynamics();\n    }\n    static lockSmart() {\n        const accudraw = IModelApp.accuDraw;\n        if (!accudraw.isEnabled)\n            return;\n        const accuSnap = IModelApp.accuSnap;\n        // Don't want AccuSnap to influence axis or Z...\n        if (accuSnap.isHot) {\n            accuSnap.clear();\n            const vp = accudraw.currentView;\n            if (vp) {\n                if (CompassMode.Polar === accudraw.compassMode)\n                    accudraw.fixPointPolar(vp);\n                else\n                    accudraw.fixPointRectangular(vp);\n            }\n        }\n        if (CompassMode.Polar === accudraw.compassMode) {\n            const isSnapped = accudraw.clearTentative();\n            if (accudraw.locked & LockedStates.ANGLE_BM) { // angle locked (unlock it)\n                accudraw.setFieldLock(ItemField.ANGLE_Item, false);\n                accudraw.locked &= ~LockedStates.ANGLE_BM;\n            }\n            else if (accudraw.getFieldLock(ItemField.DIST_Item)) { // distance locked (unlock it)\n                accudraw.setFieldLock(ItemField.DIST_Item, false);\n                accudraw.locked &= ~LockedStates.DIST_BM;\n            }\n            else if (isSnapped) {\n                accudraw.doLockAngle(isSnapped);\n            }\n            else if (accudraw.indexed & LockedStates.ANGLE_BM) { // angle indexed (lock it)\n                accudraw.angleLock();\n            }\n            else {\n                if (Math.abs(accudraw.vector.dotProduct(accudraw.axes.x)) > Math.abs(accudraw.vector.dotProduct(accudraw.axes.y)))\n                    accudraw.indexed |= LockedStates.Y_BM;\n                else\n                    accudraw.indexed |= LockedStates.X_BM;\n                accudraw.angleLock();\n            }\n            accudraw.refreshDecorationsAndDynamics();\n            return;\n        }\n        if (accudraw.locked) { // if locked, unlock\n            accudraw.clearTentative();\n            accudraw.locked &= ~LockedStates.XY_BM;\n            accudraw.setFieldLock(ItemField.X_Item, false);\n            accudraw.setFieldLock(ItemField.Y_Item, false);\n            if (accudraw.getFieldLock(ItemField.Z_Item) && accudraw.delta.z === 0.0 && !accudraw.stickyZLock)\n                accudraw.setFieldLock(ItemField.Z_Item, false);\n        }\n        else { // lock to nearest axis\n            if (accudraw.clearTentative()) {\n                if (Math.abs(accudraw.delta.x) >= Geometry.smallAngleRadians && Math.abs(accudraw.delta.y) >= Geometry.smallAngleRadians) {\n                    accudraw.doLockAngle(false);\n                    return;\n                }\n            }\n            const vp = accudraw.currentView;\n            if (Math.abs(accudraw.delta.x) > Math.abs(accudraw.delta.y)) {\n                accudraw.delta.y = 0.0;\n                accudraw.onFieldValueChange(ItemField.Y_Item);\n                accudraw.locked |= LockedStates.Y_BM;\n                accudraw.locked &= ~LockedStates.X_BM;\n                accudraw.setFieldLock(ItemField.X_Item, false);\n                accudraw.setFieldLock(ItemField.Y_Item, true);\n                accudraw.setFieldLock(ItemField.Z_Item, vp ? vp.view.is3d() : false);\n            }\n            else {\n                accudraw.delta.x = 0.0;\n                accudraw.onFieldValueChange(ItemField.X_Item);\n                accudraw.locked |= LockedStates.X_BM;\n                accudraw.locked &= ~LockedStates.Y_BM;\n                accudraw.setFieldLock(ItemField.Y_Item, false);\n                accudraw.setFieldLock(ItemField.X_Item, true);\n                accudraw.setFieldLock(ItemField.Z_Item, vp ? vp.view.is3d() : false);\n            }\n            if (!accudraw.flags.lockedRotation) {\n                accudraw.flags.lockedRotation = true;\n                accudraw.flags.contextRotMode = ContextMode.Locked;\n                accudraw.setRotationMode(RotationMode.Context);\n            }\n        }\n        accudraw.refreshDecorationsAndDynamics();\n    }\n    static lockX() {\n        const accudraw = IModelApp.accuDraw;\n        if (!accudraw.isEnabled)\n            return;\n        accudraw.clearTentative();\n        if (CompassMode.Rectangular !== accudraw.compassMode) {\n            const vp = accudraw.currentView;\n            if (!vp)\n                return;\n            accudraw.fixPointRectangular(vp);\n            accudraw.changeCompassMode(true);\n        }\n        if (accudraw.getFieldLock(ItemField.X_Item)) {\n            accudraw.setFieldLock(ItemField.X_Item, false);\n            accudraw.locked = accudraw.locked & ~LockedStates.X_BM;\n        }\n        else {\n            accudraw.saveCoordinate(ItemField.X_Item, accudraw.delta.x);\n            accudraw.setFieldLock(ItemField.X_Item, true);\n            accudraw.locked = accudraw.locked | LockedStates.X_BM;\n        }\n        accudraw.refreshDecorationsAndDynamics();\n    }\n    static lockY() {\n        const accudraw = IModelApp.accuDraw;\n        if (!accudraw.isEnabled)\n            return;\n        accudraw.clearTentative();\n        if (CompassMode.Rectangular !== accudraw.compassMode) {\n            const vp = accudraw.currentView;\n            if (!vp)\n                return;\n            accudraw.fixPointRectangular(vp);\n            accudraw.changeCompassMode(true);\n        }\n        if (accudraw.getFieldLock(ItemField.Y_Item)) {\n            accudraw.setFieldLock(ItemField.Y_Item, false);\n            accudraw.locked = accudraw.locked & ~LockedStates.Y_BM;\n        }\n        else {\n            accudraw.saveCoordinate(ItemField.Y_Item, accudraw.delta.y);\n            accudraw.setFieldLock(ItemField.Y_Item, true);\n            accudraw.locked = accudraw.locked | LockedStates.Y_BM;\n        }\n        accudraw.refreshDecorationsAndDynamics();\n    }\n    static lockZ() {\n        const accudraw = IModelApp.accuDraw;\n        if (!accudraw.isEnabled)\n            return;\n        const vp = accudraw.currentView;\n        if (!vp || !vp.view.is3d())\n            return;\n        const isSnapped = accudraw.clearTentative();\n        if (accudraw.getFieldLock(ItemField.Z_Item)) {\n            accudraw.setFieldLock(ItemField.Z_Item, false);\n        }\n        else {\n            // Move focus to Z field...\n            if (!isSnapped && accudraw.autoFocusFields) {\n                accudraw.setFocusItem(ItemField.Z_Item);\n                accudraw.dontMoveFocus = true;\n            }\n            accudraw.setFieldLock(ItemField.Z_Item, true);\n        }\n        accudraw.refreshDecorationsAndDynamics();\n    }\n    static lockDistance() {\n        const accudraw = IModelApp.accuDraw;\n        if (!accudraw.isEnabled)\n            return;\n        const isSnapped = accudraw.clearTentative();\n        if (CompassMode.Polar !== accudraw.compassMode) {\n            const vp = accudraw.currentView;\n            if (!vp)\n                return;\n            accudraw.locked = 0;\n            accudraw.fixPointPolar(vp);\n            accudraw.changeCompassMode(true);\n        }\n        if (accudraw.getFieldLock(ItemField.DIST_Item)) {\n            accudraw.setFieldLock(ItemField.DIST_Item, false);\n            accudraw.locked &= ~LockedStates.DIST_BM;\n            accudraw.setKeyinStatus(ItemField.DIST_Item, KeyinStatus.Dynamic); // Need to clear partial status if locked by entering distance since focus stays in distance field...\n        }\n        else {\n            // Move focus to distance field...\n            if (!isSnapped && accudraw.autoFocusFields)\n                accudraw.setFocusItem(ItemField.DIST_Item);\n            accudraw.distanceLock(true, true);\n        }\n        accudraw.refreshDecorationsAndDynamics();\n    }\n    static lockAngle() {\n        const accudraw = IModelApp.accuDraw;\n        if (!accudraw.isEnabled)\n            return;\n        accudraw.doLockAngle(accudraw.clearTentative());\n        accudraw.refreshDecorationsAndDynamics();\n    }\n    lockIndex() {\n        const accudraw = IModelApp.accuDraw;\n        if (!accudraw.isEnabled)\n            return;\n        if (accudraw.flags.indexLocked) {\n            if (accudraw.locked)\n                AccuDrawShortcuts.lockSmart();\n            accudraw.flags.indexLocked = false;\n        }\n        else {\n            if (CompassMode.Polar === accudraw.compassMode) {\n                if (accudraw.indexed & LockedStates.XY_BM) {\n                    accudraw.setFieldLock(ItemField.ANGLE_Item, true);\n                    accudraw.angleLock();\n                }\n                if (accudraw.indexed & LockedStates.DIST_BM)\n                    AccuDrawShortcuts.lockDistance();\n            }\n            else {\n                if (accudraw.indexed & LockedStates.X_BM) {\n                    AccuDrawShortcuts.lockX();\n                    if (accudraw.indexed & LockedStates.DIST_BM)\n                        AccuDrawShortcuts.lockY();\n                }\n                if (accudraw.indexed & LockedStates.Y_BM) {\n                    AccuDrawShortcuts.lockY();\n                    if (accudraw.indexed & LockedStates.DIST_BM)\n                        AccuDrawShortcuts.lockX();\n                }\n                if (accudraw.indexed & LockedStates.DIST_BM && !(accudraw.indexed & LockedStates.XY_BM)) {\n                    if (accudraw.locked & LockedStates.X_BM)\n                        AccuDrawShortcuts.lockY();\n                    else\n                        AccuDrawShortcuts.lockX();\n                }\n            }\n            accudraw.flags.indexLocked = true;\n        }\n        accudraw.refreshDecorationsAndDynamics();\n    }\n    static setStandardRotation(rotation) {\n        const accudraw = IModelApp.accuDraw;\n        if (!accudraw.isEnabled)\n            return;\n        if (RotationMode.Context === rotation) {\n            const axes = accudraw.baseAxes.clone();\n            accudraw.accountForAuxRotationPlane(axes, accudraw.flags.auxRotationPlane);\n            accudraw.setContextRotation(axes.toMatrix3d(), false, true);\n            accudraw.refreshDecorationsAndDynamics();\n            return;\n        }\n        else {\n            accudraw.flags.baseRotation = rotation;\n            accudraw.setRotationMode(rotation);\n        }\n        accudraw.updateRotation(true);\n        accudraw.refreshDecorationsAndDynamics();\n    }\n    static alignView() {\n        const accudraw = IModelApp.accuDraw;\n        if (!accudraw.isEnabled)\n            return;\n        const vp = accudraw.currentView;\n        if (!vp)\n            return;\n        const newMatrix = accudraw.getRotation();\n        if (newMatrix.isExactEqual(vp.rotation))\n            return;\n        const targetMatrix = newMatrix.multiplyMatrixMatrix(vp.rotation);\n        const rotateTransform = Transform.createFixedPointAndMatrix(vp.view.getTargetPoint(), targetMatrix);\n        const newFrustum = vp.getFrustum();\n        newFrustum.multiply(rotateTransform);\n        vp.view.setupFromFrustum(newFrustum);\n        vp.synchWithView();\n        vp.animateFrustumChange();\n        accudraw.refreshDecorationsAndDynamics();\n    }\n    static rotateToBase() { this.setStandardRotation(IModelApp.accuDraw.flags.baseRotation); }\n    static rotateToACS() {\n        const accudraw = IModelApp.accuDraw;\n        if (!accudraw.isEnabled)\n            return;\n        // NOTE: Match current ACS orientation..reset auxRotationPlane to top!\n        accudraw.flags.auxRotationPlane = RotationMode.Top;\n        this.setStandardRotation(RotationMode.ACS);\n    }\n    static rotateCycle() {\n        const accudraw = IModelApp.accuDraw;\n        if (!accudraw.isEnabled)\n            return;\n        const vp = accudraw.currentView;\n        if (!vp || !vp.view.is3d())\n            return;\n        let rotation;\n        switch (accudraw.rotationMode) {\n            case RotationMode.View:\n            case RotationMode.Side:\n                rotation = RotationMode.Top;\n                break;\n            case RotationMode.Top:\n                rotation = RotationMode.Front;\n                break;\n            case RotationMode.Front:\n                rotation = RotationMode.Side;\n                break;\n            case RotationMode.Context:\n                rotation = RotationMode.Context;\n                if (rotation !== accudraw.flags.baseRotation) {\n                    accudraw.baseAxes.setFrom(accudraw.axes);\n                    accudraw.flags.auxRotationPlane = RotationMode.Top;\n                    accudraw.flags.baseRotation = rotation;\n                }\n                else {\n                    const axes = accudraw.baseAxes.clone();\n                    accudraw.accountForAuxRotationPlane(axes, accudraw.flags.auxRotationPlane);\n                    if (!accudraw.axes.equals(axes))\n                        accudraw.changeBaseRotationMode(rotation);\n                }\n                switch (accudraw.flags.auxRotationPlane) {\n                    case RotationMode.Front:\n                        accudraw.flags.auxRotationPlane = RotationMode.Side;\n                        break;\n                    case RotationMode.Side:\n                        accudraw.flags.auxRotationPlane = RotationMode.Top;\n                        break;\n                    case RotationMode.Top:\n                        accudraw.flags.auxRotationPlane = RotationMode.Front;\n                        break;\n                }\n                break;\n            case RotationMode.ACS:\n                rotation = RotationMode.ACS;\n                switch (accudraw.flags.auxRotationPlane) {\n                    case RotationMode.Front:\n                        accudraw.flags.auxRotationPlane = RotationMode.Side;\n                        break;\n                    case RotationMode.Side:\n                        accudraw.flags.auxRotationPlane = RotationMode.Top;\n                        break;\n                    case RotationMode.Top:\n                        accudraw.flags.auxRotationPlane = RotationMode.Front;\n                        break;\n                }\n                break;\n            default:\n                return;\n        }\n        this.setStandardRotation(rotation);\n    }\n    static rotate90(axis) {\n        const accudraw = IModelApp.accuDraw;\n        if (!accudraw.isEnabled)\n            return;\n        const newRotation = new ThreeAxes();\n        accudraw.locked = accudraw.indexed = 0;\n        accudraw.unlockAllFields();\n        switch (axis) {\n            case 0:\n                newRotation.x.setFrom(accudraw.axes.x);\n                newRotation.z.setFrom(accudraw.axes.y);\n                newRotation.z.crossProduct(newRotation.x, newRotation.y);\n                break;\n            case 1:\n                newRotation.x.setFrom(accudraw.axes.z);\n                newRotation.y.setFrom(accudraw.axes.y);\n                newRotation.x.crossProduct(newRotation.y, newRotation.z);\n                break;\n            case 2:\n                newRotation.x.setFrom(accudraw.axes.y);\n                newRotation.z.setFrom(accudraw.axes.z);\n                newRotation.z.crossProduct(newRotation.x, newRotation.y);\n                break;\n        }\n        accudraw.setContextRotation(newRotation.toMatrix3d(), true, true);\n        accudraw.refreshDecorationsAndDynamics();\n    }\n    static async rotateAxes(aboutCurrentZ) {\n        return IModelApp.tools.run(\"AccuDraw.RotateAxes\", aboutCurrentZ);\n    }\n    static async rotateToElement() {\n        return IModelApp.tools.run(\"AccuDraw.RotateElement\");\n    }\n    static async defineACSByElement() {\n        return IModelApp.tools.run(\"AccuDraw.DefineACSByElement\");\n    }\n    static async defineACSByPoints() {\n        return IModelApp.tools.run(\"AccuDraw.DefineACSByPoints\");\n    }\n    static getACS(acsName, useOrigin, useRotation) {\n        const accudraw = IModelApp.accuDraw;\n        if (!accudraw.isEnabled)\n            return BentleyStatus.ERROR;\n        const vp = accudraw.currentView;\n        if (!vp)\n            return BentleyStatus.ERROR;\n        let currRotation = 0, currBaseRotation = 0;\n        const axes = new ThreeAxes();\n        if (!useRotation) {\n            // Save current rotation, event listener on ACS change will orient AccuDraw to ACS...\n            currRotation = accudraw.rotationMode;\n            currBaseRotation = accudraw.flags.baseRotation;\n            axes.setFrom(accudraw.axes);\n        }\n        if (acsName && \"\" !== acsName) {\n            //   // See if this ACS already exists...\n            //   DgnCode acsCode = AuxCoordSystem:: CreateCode(vp -> GetViewControllerR().GetViewDefinition(), acsName);\n            //   DgnElementId acsId = vp -> GetViewController().GetDgnDb().Elements().QueryElementIdByCode(acsCode);\n            //   if (!acsId.IsValid())\n            //     return ERROR;\n            //   AuxCoordSystemCPtr auxElm = vp -> GetViewController().GetDgnDb().Elements().Get<AuxCoordSystem>(acsId);\n            //   if (!auxElm.IsValid())\n            //     return ERROR;\n            //   AuxCoordSystemPtr acsPtr = auxElm -> MakeCopy<AuxCoordSystem>();\n            //   if (!acsPtr.IsValid())\n            //     return ERROR;\n            //   AuxCoordSystemCR oldACS = vp -> GetViewController().GetAuxCoordinateSystem();\n            //   if (!useOrigin)\n            //     acsPtr -> SetOrigin(oldACS.GetOrigin());\n            //   if (!useRotation)\n            //     acsPtr -> SetRotation(oldACS.GetRotation());\n            //   AccuDraw:: UpdateAuxCoordinateSystem(* acsPtr, * vp);\n        }\n        const currentACS = vp.view.auxiliaryCoordinateSystem;\n        if (useOrigin) {\n            accudraw.origin.setFrom(currentACS.getOrigin());\n            accudraw.point.setFrom(accudraw.origin);\n            accudraw.planePt.setFrom(accudraw.origin);\n        }\n        if (useRotation) {\n            accudraw.flags.auxRotationPlane = RotationMode.Top;\n            this.setStandardRotation(RotationMode.ACS);\n        }\n        else {\n            this.itemFieldUnlockAll();\n            accudraw.setRotationMode(currRotation);\n            accudraw.flags.baseRotation = currBaseRotation;\n            accudraw.axes.setFrom(axes);\n            if (RotationMode.ACS === accudraw.flags.baseRotation) {\n                const acs = currentACS.clone();\n                const rMatrix = accudraw.getRotation();\n                acs.setRotation(rMatrix);\n                AccuDraw.updateAuxCoordinateSystem(acs, vp);\n            }\n            accudraw.published.flags &= ~AccuDrawFlags.OrientACS;\n        }\n        return BentleyStatus.SUCCESS;\n    }\n    static writeACS(_acsName) {\n        const accudraw = IModelApp.accuDraw;\n        if (!accudraw.isEnabled)\n            return BentleyStatus.ERROR;\n        const vp = accudraw.currentView;\n        if (!vp)\n            return BentleyStatus.ERROR;\n        // const origin = accudraw.origin;\n        // const rMatrix = accudraw.getRotation();\n        // AuxCoordSystemPtr acsPtr = AuxCoordSystem:: CreateFrom(vp -> GetViewController().GetAuxCoordinateSystem());\n        // acsPtr -> SetOrigin(origin);\n        // acsPtr -> SetRotation(rMatrix);\n        // acsPtr -> SetType(CompassMode.Polar == accudraw.getCompassMode() ? ACSType :: Cylindrical : ACSType:: Rectangular);\n        // acsPtr -> SetCode(AuxCoordSystem:: CreateCode(vp -> GetViewControllerR().GetViewDefinition(), nullptr != acsName ? acsName : \"\"));\n        // acsPtr -> SetDescription(\"\");\n        // if (acsName && '\\0' != acsName[0]) {\n        //   DgnDbStatus status;\n        //   acsPtr -> Insert(& status);\n        //   if (DgnDbStatus:: Success != status)\n        //   return BentleyStatus.ERROR;\n        // }\n        // AccuDraw:: UpdateAuxCoordinateSystem(* acsPtr, * vp);\n        // accudraw.flags.baseRotation = RotationMode.ACS;\n        // accudraw.SetRotationMode(RotationMode.ACS);\n        return BentleyStatus.SUCCESS;\n    }\n    static itemFieldUnlockAll() {\n        const accudraw = IModelApp.accuDraw;\n        if (accudraw.isEnabled)\n            accudraw.unlockAllFields();\n    }\n    /** @internal Temporary keyboard shortcuts. */\n    static async processShortcutKey(keyEvent) {\n        switch (keyEvent.key.toLowerCase()) {\n            case \"enter\":\n                AccuDrawShortcuts.lockSmart();\n                return true;\n            case \"x\":\n                AccuDrawShortcuts.lockX();\n                return true;\n            case \"y\":\n                AccuDrawShortcuts.lockY();\n                return true;\n            case \"z\":\n                AccuDrawShortcuts.lockZ();\n                return true;\n            case \"a\":\n                AccuDrawShortcuts.lockAngle();\n                return true;\n            case \"d\":\n                AccuDrawShortcuts.lockDistance();\n                return true;\n            case \"m\":\n                AccuDrawShortcuts.changeCompassMode();\n                return true;\n            case \"t\":\n                AccuDrawShortcuts.setStandardRotation(RotationMode.Top);\n                return true;\n            case \"f\":\n                AccuDrawShortcuts.setStandardRotation(RotationMode.Front);\n                return true;\n            case \"s\":\n                AccuDrawShortcuts.setStandardRotation(RotationMode.Side);\n                return true;\n            case \"v\":\n                AccuDrawShortcuts.setStandardRotation(RotationMode.View);\n                return true;\n            case \"o\":\n                AccuDrawShortcuts.setOrigin();\n                return true;\n            case \"c\":\n                AccuDrawShortcuts.rotateCycle();\n                return true;\n            case \"q\":\n                return AccuDrawShortcuts.rotateAxes(true);\n            case \"e\":\n                return AccuDrawShortcuts.rotateToElement();\n            case \"r\":\n                return AccuDrawShortcuts.defineACSByPoints();\n        }\n        return false;\n    }\n}\n/** @internal */\nclass AccuDrawSetOriginTool extends Tool {\n    async run() {\n        AccuDrawShortcuts.setOrigin();\n        return true;\n    }\n}\nAccuDrawSetOriginTool.toolId = \"AccuDraw.SetOrigin\";\nexport { AccuDrawSetOriginTool };\n/** @internal */\nclass AccuDrawSetLockSmartTool extends Tool {\n    async run() {\n        AccuDrawShortcuts.lockSmart();\n        return true;\n    }\n}\nAccuDrawSetLockSmartTool.toolId = \"AccuDraw.LockSmart\";\nexport { AccuDrawSetLockSmartTool };\n/** @internal */\nclass AccuDrawSetLockXTool extends Tool {\n    async run() {\n        AccuDrawShortcuts.lockX();\n        return true;\n    }\n}\nAccuDrawSetLockXTool.toolId = \"AccuDraw.LockX\";\nexport { AccuDrawSetLockXTool };\n/** @internal */\nclass AccuDrawSetLockYTool extends Tool {\n    async run() {\n        AccuDrawShortcuts.lockY();\n        return true;\n    }\n}\nAccuDrawSetLockYTool.toolId = \"AccuDraw.LockY\";\nexport { AccuDrawSetLockYTool };\n/** @internal */\nclass AccuDrawSetLockZTool extends Tool {\n    async run() {\n        AccuDrawShortcuts.lockZ();\n        return true;\n    }\n}\nAccuDrawSetLockZTool.toolId = \"AccuDraw.LockZ\";\nexport { AccuDrawSetLockZTool };\n/** @internal */\nclass AccuDrawSetLockDistanceTool extends Tool {\n    async run() {\n        AccuDrawShortcuts.lockDistance();\n        return true;\n    }\n}\nAccuDrawSetLockDistanceTool.toolId = \"AccuDraw.LockDistance\";\nexport { AccuDrawSetLockDistanceTool };\n/** @internal */\nclass AccuDrawSetLockAngleTool extends Tool {\n    async run() {\n        AccuDrawShortcuts.lockAngle();\n        return true;\n    }\n}\nAccuDrawSetLockAngleTool.toolId = \"AccuDraw.LockAngle\";\nexport { AccuDrawSetLockAngleTool };\n/** @internal */\nclass AccuDrawChangeModeTool extends Tool {\n    async run() {\n        AccuDrawShortcuts.changeCompassMode();\n        return true;\n    }\n}\nAccuDrawChangeModeTool.toolId = \"AccuDraw.ChangeMode\";\nexport { AccuDrawChangeModeTool };\n/** @internal */\nclass AccuDrawRotateCycleTool extends Tool {\n    async run() {\n        AccuDrawShortcuts.rotateCycle();\n        return true;\n    }\n}\nAccuDrawRotateCycleTool.toolId = \"AccuDraw.RotateCycle\";\nexport { AccuDrawRotateCycleTool };\n/** @internal */\nclass AccuDrawRotateTopTool extends Tool {\n    async run() {\n        AccuDrawShortcuts.setStandardRotation(RotationMode.Top);\n        return true;\n    }\n}\nAccuDrawRotateTopTool.toolId = \"AccuDraw.RotateTop\";\nexport { AccuDrawRotateTopTool };\n/** @internal */\nclass AccuDrawRotateFrontTool extends Tool {\n    async run() {\n        AccuDrawShortcuts.setStandardRotation(RotationMode.Front);\n        return true;\n    }\n}\nAccuDrawRotateFrontTool.toolId = \"AccuDraw.RotateFront\";\nexport { AccuDrawRotateFrontTool };\n/** @internal */\nclass AccuDrawRotateSideTool extends Tool {\n    async run() {\n        AccuDrawShortcuts.setStandardRotation(RotationMode.Side);\n        return true;\n    }\n}\nAccuDrawRotateSideTool.toolId = \"AccuDraw.RotateSide\";\nexport { AccuDrawRotateSideTool };\n/** @internal */\nclass AccuDrawRotateViewTool extends Tool {\n    async run() {\n        AccuDrawShortcuts.setStandardRotation(RotationMode.View);\n        return true;\n    }\n}\nAccuDrawRotateViewTool.toolId = \"AccuDraw.RotateView\";\nexport { AccuDrawRotateViewTool };\n/** @internal */\nclass AccuDrawShortcutsTool extends InputCollector {\n    constructor() {\n        super();\n        this._cancel = true;\n    }\n    async onPostInstall() {\n        await super.onPostInstall();\n        this.initLocateElements(false, true, undefined, CoordinateLockOverrides.None);\n        this.doManipulationStart();\n    } // NOTE: InputCollector inherits suspended primitive's state, set everything...\n    async onCleanup() { this.doManipulationStop(this._cancel); }\n    async onDataButtonDown(ev) {\n        if (this.doManipulation(ev, false)) {\n            this._cancel = false;\n            await this.exitTool();\n        }\n        return EventHandled.No;\n    }\n    async onMouseMotion(ev) { this.doManipulation(ev, true); }\n    async exitTool() {\n        await super.exitTool();\n        AccuDrawShortcuts.requestInputFocus();\n    } // re-grab focus when auto-focus tool setting set...\n    activateAccuDrawOnStart() { return true; }\n    doManipulationStart() {\n        if (this.activateAccuDrawOnStart())\n            IModelApp.accuDraw.activate();\n        this.doManipulation(undefined, true);\n    }\n    doManipulationStop(cancel) {\n        if (!cancel)\n            IModelApp.accuDraw.savedStateInputCollector.ignoreFlags = this.onManipulationComplete();\n    }\n    onManipulationComplete() { return 0; }\n}\n/** @internal */\nclass AccuDrawRotateAxesTool extends AccuDrawShortcutsTool {\n    static get maxArgs() { return 1; }\n    constructor(aboutCurrentZ = true) {\n        super();\n        this.aboutCurrentZ = aboutCurrentZ;\n        this._immediateMode = false;\n    }\n    async onInstall() {\n        const accudraw = IModelApp.accuDraw;\n        if (!accudraw.isActive)\n            return false; // Require compass to already be active for this shortcut...\n        if (this.aboutCurrentZ)\n            accudraw.changeBaseRotationMode(RotationMode.Context); // Establish current orientation as base; base Z is used when defining compass rotation by x axis...\n        if (accudraw.clearTentative() || IModelApp.accuSnap.isHot ||\n            (CompassMode.Polar === accudraw.compassMode && accudraw.getFieldLock(ItemField.ANGLE_Item)) ||\n            (CompassMode.Polar !== accudraw.compassMode && accudraw.getFieldLock(ItemField.X_Item) && accudraw.getFieldLock(ItemField.Y_Item))) {\n            if (AccuDrawShortcuts.rotateAxesByPoint(true, this.aboutCurrentZ)) {\n                AccuDrawShortcuts.itemFieldUnlockAll();\n                accudraw.refreshDecorationsAndDynamics();\n                this._immediateMode = true;\n            }\n        }\n        return true;\n    }\n    async onPostInstall() {\n        if (this._immediateMode) {\n            await this.exitTool();\n            return;\n        }\n        return super.onPostInstall();\n    }\n    onManipulationComplete() { return AccuDrawFlags.SetRMatrix; }\n    doManipulationStart() {\n        super.doManipulationStart();\n        CoreTools.outputPromptByKey(\"AccuDraw.RotateAxes.Prompts.FirstPoint\");\n    }\n    doManipulation(ev, isMotion) {\n        const vp = ev ? ev.viewport : IModelApp.accuDraw.currentView;\n        if (!vp)\n            return true;\n        AccuDrawShortcuts.rotateAxesByPoint(TentativeOrAccuSnap.isHot, this.aboutCurrentZ);\n        vp.invalidateDecorations();\n        if (!isMotion)\n            AccuDrawShortcuts.itemFieldUnlockAll();\n        return true;\n    }\n    async parseAndRun(...args) {\n        for (const arg of args) {\n            if (arg.toLowerCase() === \"unlockedz\")\n                this.aboutCurrentZ = false;\n        }\n        return this.run(args);\n    }\n}\nAccuDrawRotateAxesTool.toolId = \"AccuDraw.RotateAxes\";\nexport { AccuDrawRotateAxesTool };\n/** @internal */\nclass AccuDrawRotateElementTool extends AccuDrawShortcutsTool {\n    constructor() {\n        super(...arguments);\n        this.moveOrigin = !IModelApp.accuDraw.isActive; // By default use current origin if AccuDraw is already enabled...\n    }\n    async onInstall() { return IModelApp.accuDraw.isEnabled; } // Require compass to be enabled for this session...\n    onManipulationComplete() {\n        let ignoreFlags = AccuDrawFlags.SetRMatrix | AccuDrawFlags.Disable; // If AccuDraw wasn't active when the shortcut started, let it remain active for suspended tool when shortcut completes...\n        if (this.moveOrigin)\n            ignoreFlags |= AccuDrawFlags.SetOrigin;\n        return ignoreFlags;\n    }\n    doManipulationStart() {\n        super.doManipulationStart();\n        CoreTools.outputPromptByKey(\"AccuDraw.RotateElement.Prompts.FirstPoint\");\n    }\n    updateOrientation(snap, vp) {\n        const accudraw = IModelApp.accuDraw;\n        const rMatrix = AccuDraw.getSnapRotation(snap, vp);\n        if (undefined === rMatrix)\n            return false;\n        const origin = this.moveOrigin ? snap.snapPoint : accudraw.origin;\n        accudraw.setContext(AccuDrawFlags.AlwaysSetOrigin | AccuDrawFlags.SetRMatrix, origin, rMatrix);\n        return true;\n    }\n    doManipulation(ev, isMotion) {\n        const vp = ev ? ev.viewport : IModelApp.accuDraw.currentView;\n        if (!vp)\n            return true;\n        const snapDetail = TentativeOrAccuSnap.getCurrentSnap(false);\n        if (undefined === snapDetail || !this.updateOrientation(snapDetail, vp))\n            return true;\n        if (undefined === ev)\n            AccuDrawShortcuts.processPendingHints();\n        if (!isMotion)\n            IModelApp.accuDraw.changeBaseRotationMode(RotationMode.Context); // Hold temporary rotation for tool duration when not updating ACS...\n        return true;\n    }\n}\nAccuDrawRotateElementTool.toolId = \"AccuDraw.RotateElement\";\nexport { AccuDrawRotateElementTool };\n/** @internal */\nclass DefineACSByElementTool extends AccuDrawShortcutsTool {\n    constructor() {\n        super(...arguments);\n        this._origin = Point3d.create();\n        this._rMatrix = Matrix3d.createIdentity();\n    }\n    activateAccuDrawOnStart() { return false; }\n    onManipulationComplete() { return AccuDrawFlags.SetRMatrix; }\n    doManipulationStart() {\n        super.doManipulationStart();\n        CoreTools.outputPromptByKey(\"AccuDraw.DefineACSByElement.Prompts.FirstPoint\");\n    }\n    updateOrientation(snap, vp) {\n        const rMatrix = AccuDraw.getSnapRotation(snap, vp);\n        if (undefined === rMatrix)\n            return false;\n        this._origin = snap.snapPoint;\n        this._rMatrix = rMatrix;\n        return true;\n    }\n    doManipulation(ev, isMotion) {\n        const vp = ev ? ev.viewport : undefined;\n        if (!vp)\n            return true;\n        const snapDetail = TentativeOrAccuSnap.getCurrentSnap(false);\n        if (undefined === snapDetail || !this.updateOrientation(snapDetail, vp))\n            return true;\n        IModelApp.viewManager.invalidateDecorationsAllViews();\n        if (isMotion)\n            return true;\n        if (!this._acs)\n            this._acs = vp.view.auxiliaryCoordinateSystem.clone();\n        this._acs.setOrigin(this._origin);\n        this._acs.setRotation(this._rMatrix);\n        AccuDraw.updateAuxCoordinateSystem(this._acs, vp);\n        AccuDrawShortcuts.rotateToACS();\n        return true;\n    }\n    decorate(context) {\n        const vp = context.viewport;\n        if (!this._acs)\n            this._acs = vp.view.auxiliaryCoordinateSystem.clone();\n        this._acs.setOrigin(this._origin);\n        this._acs.setRotation(this._rMatrix);\n        this._acs.display(context, ACSDisplayOptions.Active | ACSDisplayOptions.Dynamics);\n    }\n}\nDefineACSByElementTool.toolId = \"AccuDraw.DefineACSByElement\";\nexport { DefineACSByElementTool };\n/** @internal */\nclass DefineACSByPointsTool extends AccuDrawShortcutsTool {\n    constructor() {\n        super(...arguments);\n        this._points = [];\n    }\n    activateAccuDrawOnStart() { return false; }\n    onManipulationComplete() { return AccuDrawFlags.SetRMatrix; }\n    doManipulationStart() {\n        super.doManipulationStart();\n        const tentativePoint = IModelApp.tentativePoint;\n        if (!tentativePoint.isActive) {\n            CoreTools.outputPromptByKey(\"AccuDraw.DefineACSByPoints.Prompts.FirstPoint\");\n            return;\n        }\n        const origin = tentativePoint.getPoint().clone();\n        CoreTools.outputPromptByKey(\"AccuDraw.DefineACSByPoints.Prompts.SecondPoint\");\n        IModelApp.accuDraw.setContext(AccuDrawFlags.SetOrigin | AccuDrawFlags.FixedOrigin, origin);\n        this._points.push(origin);\n        tentativePoint.clear(true);\n    }\n    doManipulation(ev, isMotion) {\n        if (!ev || !ev.viewport)\n            return true;\n        IModelApp.viewManager.invalidateDecorationsAllViews();\n        if (isMotion)\n            return false;\n        IModelApp.accuDraw.activate();\n        this._points.push(ev.point.clone());\n        const vp = ev.viewport;\n        if (!this._acs)\n            this._acs = vp.view.auxiliaryCoordinateSystem.clone();\n        if (AccuDrawShortcuts.updateACSByPoints(this._acs, vp, this._points, false)) {\n            AccuDraw.updateAuxCoordinateSystem(this._acs, vp);\n            AccuDrawShortcuts.rotateToACS();\n            return true;\n        }\n        CoreTools.outputPromptByKey(`AccuDraw.DefineACSByPoints.Prompts${1 === this._points.length ? \".SecondPoint\" : \".NextPoint\"}`);\n        return false;\n    }\n    decorate(context) {\n        const tmpPoints = [];\n        this._points.forEach((pt) => tmpPoints.push(pt));\n        const ev = new BeButtonEvent();\n        IModelApp.toolAdmin.fillEventFromCursorLocation(ev);\n        tmpPoints.push(ev.point);\n        const vp = context.viewport;\n        if (!this._acs)\n            this._acs = vp.view.auxiliaryCoordinateSystem.clone();\n        AccuDrawShortcuts.updateACSByPoints(this._acs, vp, tmpPoints, true);\n        this._acs.display(context, ACSDisplayOptions.Active | ACSDisplayOptions.Dynamics);\n    }\n}\nDefineACSByPointsTool.toolId = \"AccuDraw.DefineACSByPoints\";\nexport { DefineACSByPointsTool };\n//# sourceMappingURL=AccuDrawTool.js.map",
      "start": 1693508119716,
      "end": 1693508119891,
      "sourcemaps": null
    }
  ]
}
