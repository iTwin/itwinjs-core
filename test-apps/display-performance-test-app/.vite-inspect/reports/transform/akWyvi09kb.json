{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/tile/map/WmsCapabilities.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Views\n */\nimport { request } from \"../../request/Request\";\nimport WMS from \"wms-capabilities\";\nimport { MapCartoRectangle, WmsUtilities } from \"../internal\";\n/**\n * fetch XML from HTTP request\n * @param url server URL to address the request\n * @internal\n */\nasync function getXml(url, credentials) {\n    const options = {\n        timeout: 20000,\n        retryCount: 2,\n        auth: credentials,\n    };\n    return request(url, \"text\", options);\n}\nfunction rangeFromJSONArray(json) {\n    return (Array.isArray(json) && json.length === 4) ? MapCartoRectangle.fromDegrees(json[0], json[1], json[2], json[3]) : undefined;\n}\nfunction rangeFromJSON(json) {\n    if (undefined !== json.LatLonBoundingBox)\n        return rangeFromJSONArray(json.LatLonBoundingBox);\n    else if (Array.isArray(json.EX_GeographicBoundingBox)) {\n        return rangeFromJSONArray(json.EX_GeographicBoundingBox);\n    }\n    else {\n        if (Array.isArray(json.BoundingBox))\n            for (const boundingBox of json.BoundingBox) {\n                if (boundingBox.crs === \"CRS:84\" || boundingBox.crs === \"EPSG:4326\") {\n                    return rangeFromJSONArray(boundingBox.extent);\n                }\n            }\n        return undefined;\n    }\n}\nfunction initArray(input) {\n    return Array.isArray(input) ? input.slice() : undefined;\n}\n/** Encapsulation of the capabilities for an WMS server\n * @internal\n */\nexport var WmsCapability;\n(function (WmsCapability) {\n    class Service {\n        constructor(json) {\n            this.name = json.Name ? json.Name : \"\";\n            this.title = json.Title;\n            this.abstract = json.Abstract;\n            this.onlineResource = json.OnlineResource;\n            this.contactInformation = json.ContactInformation;\n            this.accessConstraints = json.AccessConstraints;\n        }\n    }\n    WmsCapability.Service = Service;\n    class Layer {\n        constructor(json, capabilities) {\n            this.subLayers = new Array();\n            this.queryable = json.queryable;\n            this.title = json.title;\n            this.srs = initArray(capabilities.isVersion13 ? json.CRS : json.SRS);\n            this.cartoRange = rangeFromJSON(json);\n            this.subLayers.push(new SubLayer(json, capabilities));\n        }\n        getSubLayers(visible = true) {\n            const subLayers = new Array();\n            let index = 1;\n            let childrenFound = false;\n            const pushSubLayer = ((subLayer, parent) => {\n                let children;\n                const id = index++;\n                if (subLayer.children) {\n                    childrenFound = false;\n                    children = new Array();\n                    subLayer.children.forEach((child) => {\n                        children.push(index);\n                        pushSubLayer(child, id);\n                    });\n                }\n                subLayers.push({ name: subLayer.name, title: subLayer.title, visible, parent, children, id });\n            });\n            this.subLayers.forEach((subLayer) => pushSubLayer(subLayer));\n            if (!childrenFound) {\n                const prefixed = new Map();\n                subLayers.forEach((subLayer) => {\n                    if (subLayer.name && subLayer.name.indexOf(Layer.PREFIX_SEPARATOR) > 0) {\n                        const prefix = subLayer.name.slice(0, subLayer.name.indexOf(Layer.PREFIX_SEPARATOR));\n                        const found = prefixed.get(prefix);\n                        if (found)\n                            found.push(subLayer);\n                        else\n                            prefixed.set(prefix, [subLayer]);\n                    }\n                });\n                if (prefixed.size > 1) {\n                    // Preserve the root node if any.\n                    const rootNode = (this.subLayers.length === 1 && this.subLayers[0].children && this.subLayers[0].children.length > 1) ? subLayers.find((curSubLayer) => this.subLayers[0].name === curSubLayer.name)?.id : undefined;\n                    prefixed.forEach((children, parent) => {\n                        children.forEach((child) => {\n                            child.parent = index;\n                            // Remove the prefix from the title if present.\n                            if (child.title && child.title.indexOf(parent + Layer.PREFIX_SEPARATOR) === 0)\n                                child.title = child.title.slice(parent.length + Layer.PREFIX_SEPARATOR.length);\n                        });\n                        subLayers.push({ name: \"\", title: parent, parent: rootNode, id: index++, children: children.map((child) => child.id), visible });\n                    });\n                }\n            }\n            return subLayers;\n        }\n        getSubLayersCrs(layerNameFilter) {\n            const subLayerCrs = new Map();\n            const processSubLayer = ((subLayer) => {\n                if (layerNameFilter.includes(subLayer.name)) {\n                    subLayerCrs.set(subLayer.name, subLayer.crs);\n                }\n                if (subLayer.children) {\n                    subLayer.children.forEach((child) => {\n                        processSubLayer(child);\n                    });\n                }\n            });\n            this.subLayers.forEach((subLayer) => processSubLayer(subLayer));\n            return subLayerCrs;\n        }\n    }\n    Layer.PREFIX_SEPARATOR = \":\";\n    WmsCapability.Layer = Layer;\n    /** @internal */\n    class SubLayer {\n        constructor(_json, capabilities, parent) {\n            this.parent = parent;\n            const getParentCrs = (parentLayer, crsSet) => {\n                parentLayer.crs.forEach((parentCrs) => crsSet.add(parentCrs));\n                if (parentLayer.parent) {\n                    getParentCrs(parentLayer.parent, crsSet);\n                }\n            };\n            this.name = _json.Name ? _json.Name : \"\";\n            this.title = _json.Title;\n            this.queryable = _json.queryable ? true : false;\n            this.cartoRange = rangeFromJSON(_json);\n            this.ownCrs = capabilities.isVersion13 ? _json.CRS : _json.SRS;\n            const crs = new Set(this.ownCrs);\n            if (parent) {\n                getParentCrs(parent, crs);\n            }\n            this.crs = [...crs];\n            if (Array.isArray(_json.Layer)) {\n                this.children = new Array();\n                for (const childLayer of _json.Layer) {\n                    this.children.push(new SubLayer(childLayer, capabilities, this));\n                }\n            }\n        }\n    }\n    WmsCapability.SubLayer = SubLayer;\n})(WmsCapability || (WmsCapability = {}));\n/** @internal */\nclass WmsCapabilities {\n    get json() { return this._json; }\n    get maxLevel() { return this.layer ? this.layer.subLayers.length : -1; }\n    get cartoRange() { return this.layer?.cartoRange; }\n    get featureInfoSupported() { return undefined !== this._json.Capability?.Request?.GetFeatureInfo; }\n    get featureInfoFormats() { return Array.isArray(this._json.Capability?.Request?.GetFeatureInfo?.Format) ? this._json.Capability?.Request?.GetFeatureInfo?.Format : undefined; }\n    constructor(_json) {\n        this._json = _json;\n        this.version = _json.version;\n        this.isVersion13 = _json.version !== undefined && 0 === _json.version.indexOf(\"1.3\");\n        this.service = new WmsCapability.Service(_json.Service);\n        if (_json.Capability)\n            this.layer = new WmsCapability.Layer(_json.Capability.Layer, this);\n    }\n    static async create(url, credentials, ignoreCache) {\n        if (!ignoreCache) {\n            const cached = WmsCapabilities._capabilitiesCache.get(url);\n            if (cached !== undefined)\n                return cached;\n        }\n        const xmlCapabilities = await getXml(`${WmsUtilities.getBaseUrl(url)}?request=GetCapabilities&service=WMS`, credentials);\n        if (!xmlCapabilities)\n            return undefined;\n        const capabilities = new WmsCapabilities(new WMS().parse(xmlCapabilities));\n        if (!credentials) {\n            // Avoid caching protected data\n            WmsCapabilities._capabilitiesCache.set(url, capabilities);\n        }\n        return capabilities;\n    }\n    getSubLayers(visible = true) {\n        return this.layer ? this.layer.getSubLayers(visible) : undefined;\n    }\n    getSubLayersCrs(subLayerNames) {\n        return this.layer ? this.layer.getSubLayersCrs(subLayerNames) : undefined;\n    }\n}\nWmsCapabilities._capabilitiesCache = new Map();\nexport { WmsCapabilities };\n//# sourceMappingURL=WmsCapabilities.js.map",
      "start": 1693508121716,
      "end": 1693508121836,
      "sourcemaps": null
    }
  ]
}
