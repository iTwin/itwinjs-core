{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/tile/map/ImageryProviders/ArcGisGeometryReaderJSON.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/** @internal */\nexport class ArcGisGeometryReaderJSON {\n    constructor(geometryType, renderer, relativeCoords = false) {\n        this._ringsOrPaths = geometryType === \"esriGeometryPolyline\" || geometryType === \"esriGeometryPolygon\";\n        this._points = geometryType === \"esriGeometryPoint\" || geometryType === \"esriGeometryMultiPoint\";\n        this._fill = geometryType === \"esriGeometryPolygon\";\n        this._renderer = renderer;\n        this._relativeCoords = relativeCoords;\n    }\n    async readGeometry(geometry) {\n        if (this._ringsOrPaths) {\n            await this.readRingsAndPaths(geometry, this._renderer, this._fill, this._relativeCoords);\n        }\n        else if (this._points) {\n            await this.readPoints(geometry, this._renderer, this._relativeCoords);\n        }\n    }\n    async readRingsAndPaths(geometry, renderer, fill, relativeCoords) {\n        let offset = 0;\n        const lengths = [];\n        const coords = [];\n        if (geometry?.rings) {\n            for (const ring of geometry?.rings) {\n                offset = ArcGisGeometryReaderJSON.deflateCoordinates(ring, coords, 2, offset);\n                lengths.push(ring.length);\n            }\n        }\n        else if (geometry?.paths) {\n            for (const path of geometry?.paths) {\n                offset = ArcGisGeometryReaderJSON.deflateCoordinates(path, coords, 2, offset);\n                lengths.push(path.length);\n            }\n        }\n        await renderer.renderPath(lengths, coords, fill, 2, relativeCoords);\n    }\n    async readPoints(geometry, renderer, relativeCoords) {\n        if (geometry) {\n            const lengths = [];\n            const coords = [geometry.x, geometry.y];\n            await renderer.renderPoint(lengths, coords, 2, relativeCoords);\n        }\n    }\n    // Converts an [[x1,y1], [x2,y2], ...] to [x1,y1,x2,y2, ...]\n    // stride is the number of dimensions\n    // https://github.com/openlayers/openlayers/blob/7a2f87caca9ddc1912d910f56eb5637445fc11f6/src/ol/geom/flat/deflate.js#L26\n    static deflateCoordinates(coordinates, flatCoordinates, stride, offset) {\n        for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n            const coordinate = coordinates[i];\n            for (let j = 0; j < stride; ++j)\n                flatCoordinates[offset++] = coordinate[j];\n        }\n        return offset;\n    }\n}\n//# sourceMappingURL=ArcGisGeometryReaderJSON.js.map",
      "start": 1693508121783,
      "end": 1693508121881,
      "sourcemaps": null
    }
  ]
}
