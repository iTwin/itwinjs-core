{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/FlashSettings.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Rendering\n */\nimport { BeDuration } from \"@itwin/core-bentley\";\n/** As part of [[FlashSettings]], describes how geometry is flashed.\n * @public\n * @extensions\n */\nexport var FlashMode;\n(function (FlashMode) {\n    /** The color of the geometry is mixed with the hilite color. */\n    FlashMode[FlashMode[\"Hilite\"] = 0] = \"Hilite\";\n    /** The color of the geometry is brightened. Applicable only to lit geometry - i.e., meshes displayed in a view with [RenderMode.SmoothShade]($common)\n     * and lighting enabled.\n     */\n    FlashMode[FlashMode[\"Brighten\"] = 1] = \"Brighten\";\n})(FlashMode || (FlashMode = {}));\n/** Settings that control how geometry is \"flashed\" when hovered over in a [[Viewport]].\n * When the user hovers the mouse cursor over an element (or other piece of geometry, like a reality mesh), a [[Tool]] visually indicates\n * that it can interact with that geometry by \"flashing\" it. Flashed geometry changes color in one of the following two ways:\n *  - By mixing the viewport's hilite color as specified by [[Viewport.hilite]] with the geometry's own color; or\n *  - By brightening the geometry's own color (for lit geometry only - i.e., meshes displayed in a view with lighting enabled).\n * The flash effect starts out at an intensity of zero and increases linearly over the period of time specified by [[duration]] until\n * [[maxIntensity]] is reached.\n * @see [[Viewport.flashSettings]] to customize the flash behavior for a viewport.\n * @see [[Viewport.hilite]] to customize the hilite color used by [[FlashMode.Hilite]].\n * @public\n * @extensions\n */\nexport class FlashSettings {\n    /** Construct new flash settings.\n     * @param options If supplied, overrides specified default values.\n     * Example: to change [[duration]] to 1 second and use default [[maxIntensity]] and [[litMode]]:\n     * ```ts\n     *  const settings = new FlashSettings({ duration: BeDuration.fromSeconds(1) });\n     * ```\n     */\n    constructor(options) {\n        this.litMode = options?.litMode === FlashMode.Hilite ? FlashMode.Hilite : FlashMode.Brighten;\n        const maxIntensity = options?.maxIntensity ?? 1;\n        this.maxIntensity = Math.min(1, Math.max(0, maxIntensity));\n        let duration = options?.duration;\n        if (duration) {\n            const ms = Math.max(0, Math.min(10 * 1000, duration.milliseconds));\n            if (ms !== duration.milliseconds)\n                duration = BeDuration.fromMilliseconds(ms);\n        }\n        else {\n            duration = BeDuration.fromSeconds(0.25);\n        }\n        this.duration = duration;\n    }\n    /** Create a copy of these settings identical except for properties explicitly specified by `options`.\n     * @param options Overrides selected properties of these settings. Any property not supplied will retain its current value. Any property\n     * explicitly set to `undefined` will receive its default value.\n     * @returns A copy of these settings identical except as specified by `options`.\n     */\n    clone(options) {\n        if (!options)\n            return this;\n        return new FlashSettings({ ...this, ...options });\n    }\n}\n//# sourceMappingURL=FlashSettings.js.map",
      "start": 1693508118948,
      "end": 1693508119113,
      "sourcemaps": null
    }
  ]
}
