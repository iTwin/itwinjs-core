{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/NotificationManager.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Notifications\n */\nimport { BeDuration } from \"@itwin/core-bentley\";\nimport { Point2d } from \"@itwin/core-geometry\";\nimport { DisplayMessageType, MessageSeverity, RelativePosition } from \"@itwin/appui-abstract\";\nimport { IModelApp } from \"./IModelApp\";\n// cSpell:words messagebox\n/** Describes the type and behavior of a [[NotifyMessageDetails]].\n * @public\n * @extensions\n */\nexport var OutputMessageType;\n(function (OutputMessageType) {\n    /** Temporary message box displays at the top or bottom of the screen then disappears automatically. */\n    OutputMessageType[OutputMessageType[\"Toast\"] = 0] = \"Toast\";\n    /** Message box displays near the cursor over a Viewport and is closed by calling `closePointerMessage`. */\n    OutputMessageType[OutputMessageType[\"Pointer\"] = 1] = \"Pointer\";\n    /** Message box displays at the top or bottom of the screen and contains a Close button. */\n    OutputMessageType[OutputMessageType[\"Sticky\"] = 2] = \"Sticky\";\n    /** Message box displays near an input field and contains a Close button. */\n    OutputMessageType[OutputMessageType[\"InputField\"] = 3] = \"InputField\";\n    /** Modal message box. */\n    OutputMessageType[OutputMessageType[\"Alert\"] = 4] = \"Alert\";\n})(OutputMessageType || (OutputMessageType = {}));\n/** Classifies a [[NotifyMessageDetails]] by its level of importance.\n * @public\n * @extensions\n */\nexport var OutputMessagePriority;\n(function (OutputMessagePriority) {\n    OutputMessagePriority[OutputMessagePriority[\"None\"] = 0] = \"None\";\n    OutputMessagePriority[OutputMessagePriority[\"Success\"] = 1] = \"Success\";\n    OutputMessagePriority[OutputMessagePriority[\"Error\"] = 10] = \"Error\";\n    OutputMessagePriority[OutputMessagePriority[\"Warning\"] = 11] = \"Warning\";\n    OutputMessagePriority[OutputMessagePriority[\"Info\"] = 12] = \"Info\";\n    OutputMessagePriority[OutputMessagePriority[\"Debug\"] = 13] = \"Debug\";\n    OutputMessagePriority[OutputMessagePriority[\"Fatal\"] = 17] = \"Fatal\";\n})(OutputMessagePriority || (OutputMessagePriority = {}));\n/** Describes the alert behavior of a [[NotifyMessageDetails]].\n * @public\n * @extensions\n */\nexport var OutputMessageAlert;\n(function (OutputMessageAlert) {\n    OutputMessageAlert[OutputMessageAlert[\"None\"] = 0] = \"None\";\n    OutputMessageAlert[OutputMessageAlert[\"Dialog\"] = 1] = \"Dialog\";\n    OutputMessageAlert[OutputMessageAlert[\"Balloon\"] = 2] = \"Balloon\";\n})(OutputMessageAlert || (OutputMessageAlert = {}));\n/** Reason for ending the activity message via endActivityMessage\n * @public\n * @extensions\n */\nexport var ActivityMessageEndReason;\n(function (ActivityMessageEndReason) {\n    ActivityMessageEndReason[ActivityMessageEndReason[\"Completed\"] = 0] = \"Completed\";\n    ActivityMessageEndReason[ActivityMessageEndReason[\"Cancelled\"] = 1] = \"Cancelled\";\n})(ActivityMessageEndReason || (ActivityMessageEndReason = {}));\n/** Describes the set of buttons displayed in a message box opened using [[NotificationManager.openMessageBox]].\n * @public\n * @extensions\n */\nexport var MessageBoxType;\n(function (MessageBoxType) {\n    MessageBoxType[MessageBoxType[\"OkCancel\"] = 0] = \"OkCancel\";\n    MessageBoxType[MessageBoxType[\"Ok\"] = 1] = \"Ok\";\n    MessageBoxType[MessageBoxType[\"LargeOk\"] = 2] = \"LargeOk\";\n    MessageBoxType[MessageBoxType[\"MediumAlert\"] = 3] = \"MediumAlert\";\n    MessageBoxType[MessageBoxType[\"YesNoCancel\"] = 4] = \"YesNoCancel\";\n    MessageBoxType[MessageBoxType[\"YesNo\"] = 5] = \"YesNo\";\n})(MessageBoxType || (MessageBoxType = {}));\n/** Describes the icon displayed in a messagebox opened using [[NotificationManager.openMessageBox]].\n * @public\n * @extensions\n */\nexport var MessageBoxIconType;\n(function (MessageBoxIconType) {\n    MessageBoxIconType[MessageBoxIconType[\"NoSymbol\"] = 0] = \"NoSymbol\";\n    MessageBoxIconType[MessageBoxIconType[\"Information\"] = 1] = \"Information\";\n    MessageBoxIconType[MessageBoxIconType[\"Question\"] = 2] = \"Question\";\n    MessageBoxIconType[MessageBoxIconType[\"Warning\"] = 3] = \"Warning\";\n    MessageBoxIconType[MessageBoxIconType[\"Critical\"] = 4] = \"Critical\";\n    MessageBoxIconType[MessageBoxIconType[\"Success\"] = 5] = \"Success\";\n})(MessageBoxIconType || (MessageBoxIconType = {}));\n/** Describes the possible return values produced when the user clicks a button in a messagebox opened using [[NotificationManager.openMessageBox]].\n * @public\n * @extensions\n */\nexport var MessageBoxValue;\n(function (MessageBoxValue) {\n    MessageBoxValue[MessageBoxValue[\"Apply\"] = 1] = \"Apply\";\n    MessageBoxValue[MessageBoxValue[\"Reset\"] = 2] = \"Reset\";\n    MessageBoxValue[MessageBoxValue[\"Ok\"] = 3] = \"Ok\";\n    MessageBoxValue[MessageBoxValue[\"Cancel\"] = 4] = \"Cancel\";\n    MessageBoxValue[MessageBoxValue[\"Default\"] = 5] = \"Default\";\n    MessageBoxValue[MessageBoxValue[\"Yes\"] = 6] = \"Yes\";\n    MessageBoxValue[MessageBoxValue[\"No\"] = 7] = \"No\";\n    MessageBoxValue[MessageBoxValue[\"Retry\"] = 8] = \"Retry\";\n    MessageBoxValue[MessageBoxValue[\"Stop\"] = 9] = \"Stop\";\n    MessageBoxValue[MessageBoxValue[\"Help\"] = 10] = \"Help\";\n    MessageBoxValue[MessageBoxValue[\"YesToAll\"] = 11] = \"YesToAll\";\n    MessageBoxValue[MessageBoxValue[\"NoToAll\"] = 12] = \"NoToAll\";\n})(MessageBoxValue || (MessageBoxValue = {}));\n/** Describes a message to be displayed to the user.\n * @public\n * @extensions\n */\nexport class NotifyMessageDetails {\n    /** Constructor\n     * @param priority          The priority this message should be accorded by the NotificationManager.\n     * @param briefMessage      A short message that conveys the simplest explanation of the issue.\n     * @param detailedMessage   An optional comprehensive message that explains the issue in detail and potentially offers a solution.\n     * @param msgType           The type of message. Defaults to Toast.\n     * @param openAlert         Whether an alert box should be displayed or not, and if so what kind.\n     */\n    constructor(priority, briefMessage, detailedMessage, msgType = OutputMessageType.Toast, openAlert = OutputMessageAlert.None) {\n        this.priority = priority;\n        this.briefMessage = briefMessage;\n        this.detailedMessage = detailedMessage;\n        this.msgType = msgType;\n        this.openAlert = openAlert;\n        this.displayTime = BeDuration.fromSeconds(5);\n        this.relativePosition = RelativePosition.TopRight;\n    }\n    /** Set OutputMessageType.Pointer message details.\n     * @param viewport          Viewport over which to display the Pointer type message.\n     * @param displayPoint      Point at which to display the Pointer type message.\n     * @param relativePosition  Position relative to displayPoint at which to display the Pointer type message.\n     */\n    setPointerTypeDetails(viewport, displayPoint, relativePosition = RelativePosition.TopRight) {\n        this.viewport = viewport;\n        this.displayPoint = Point2d.fromJSON(displayPoint);\n        this.relativePosition = relativePosition;\n        this.msgType = OutputMessageType.Pointer;\n    }\n    /** Set OutputMessageType.InputField message details.\n     * @param inputField        Input field to which the message pertains. The message will be shown just below this input field element.\n     */\n    setInputFieldTypeDetails(inputField) {\n        this.inputField = inputField;\n        this.msgType = OutputMessageType.InputField;\n    }\n}\n/** Specifies the details of an activity message to be displayed to the user.\n * @public\n * @extensions\n */\nexport class ActivityMessageDetails {\n    /**\n     * @param showProgressBar         Indicates whether to show the progress bar in the activity message dialog.\n     * @param showPercentInMessage    Indicates whether to show the percentage complete in the activity message text.\n     * @param supportsCancellation    Indicates whether to show the Cancel button, giving the user the ability to cancel the operation.\n     * @param showDialogInitially     Indicates whether to show the activity message dialog initially. User can click status bar to open it.\n     */\n    constructor(showProgressBar, showPercentInMessage, supportsCancellation, showDialogInitially = true) {\n        this.showProgressBar = showProgressBar;\n        this.showPercentInMessage = showPercentInMessage;\n        this.supportsCancellation = supportsCancellation;\n        this.showDialogInitially = showDialogInitially;\n        this.wasCancelled = false;\n    }\n    /** Called from NotificationAdmin when the user cancels the activity. */\n    onActivityCancelled() { this.wasCancelled = true; }\n    /** Called from NotificationAdmin when the activity completes successfully. */\n    onActivityCompleted() { this.wasCancelled = false; }\n}\n/** The NotificationManager controls the interaction with the user for prompts, error messages, and alert dialogs.\n * Implementations of the NotificationManager may present the information in different ways. For example, in\n * non-interactive sessions, these messages may be saved to a log file or simply discarded.\n * @public\n * @extensions\n */\nexport class NotificationManager {\n    constructor() {\n        this.toolTipLocation = new Point2d();\n    }\n    /** Output a prompt, given a localization key.\n     * @param key The key of the localized string with the prompt message.\n     */\n    outputPromptByKey(key) { this.outputPrompt(IModelApp.localization.getLocalizedString(key)); }\n    /** Output a localized prompt to the user. A 'prompt' indicates an action the user should take to proceed.\n     * @param _prompt The localized string with the prompt message.\n     */\n    outputPrompt(_prompt) { }\n    /** Output a message and/or alert to the user.  */\n    outputMessage(_message) { }\n    /** Output a MessageBox and wait for response from the user.\n     * @param _mbType       The MessageBox type.\n     * @param _message      The message to display.\n     * @param _icon         The MessageBox icon type.\n     * @return the response from the user.\n     */\n    async openMessageBox(_mbType, _message, _icon) { return MessageBoxValue.Ok; }\n    /**\n     * Set up for activity messages.\n     * @param _details  The activity message details.\n     * @return true if the message was displayed, false if an invalid priority is specified.\n     */\n    setupActivityMessage(_details) { return true; }\n    /**\n     * Output an activity message to the user.\n     * @param _messageText The message text.\n     * @param _percentComplete The percentage of completion.\n     * @return true if the message was displayed, false if the message could not be displayed.\n     */\n    outputActivityMessage(_messageText, _percentComplete) { return true; }\n    /**\n     * End an activity message.\n     * @param _reason The reason for the end of the Activity Message.\n     * @return true if the message was ended successfully, false if the activityMessage could not be ended.\n     */\n    endActivityMessage(_reason) { return true; }\n    /** Return true if _showTooltip has an implementation and will display a tooltip. */\n    get isToolTipSupported() { return false; }\n    /** Return true if the tooltip is currently open. */\n    get isToolTipOpen() { return false; }\n    /** Implement to display a tooltip message at the specified location. */\n    _showToolTip(_htmlElement, _message, _location, _options) { }\n    /** Show a tooltip window. Saves tooltip location for AccuSnap to test if cursor has moved far enough away to close tooltip.\n     * @param htmlElement The HTMLElement that anchors the toolTip.\n     * @param message What to display inside the ToolTip. May be a string or an HTMLElement.\n     * @param location An optional location, relative to the origin of _htmlElement, for the ToolTip. If undefined, center of `htmlElement`\n     * @param options Options that supply additional information about how the ToolTip should function.\n     * @note If message is an HTMLElement, the notification manager will display the HTMLElement verbatim. This can represent a security\n     * risk if any part the element is created from user input. Applications should be careful to *sanitize* any such input before\n     * creating an HTMLElement to pass to this method.\n     */\n    openToolTip(htmlElement, message, location, options) {\n        this.toolTipLocation.setFrom(location);\n        this._showToolTip(htmlElement, message, location, options);\n    }\n    /** Clear the tooltip if it is currently open. */\n    clearToolTip() { }\n    /** Update message position created with [[OutputMessageType.Pointer]].\n     * @param displayPoint        Point at which to display the Pointer type message.\n     * @param relativePosition    Position relative to displayPoint at which to display the Pointer type message.\n     */\n    updatePointerMessage(_displayPoint, _relativePosition = RelativePosition.TopRight) { }\n    /** Close message created with [[OutputMessageType.Pointer]]. */\n    closePointerMessage() { }\n    /** Close message created with [[OutputMessageType.InputField]]. */\n    closeInputFieldMessage() { }\n    /** Setup tool assistance instructions for a tool. The instructions include the main instruction, which includes the current prompt.\n     * @param instructions The tool assistance instructions.\n     */\n    setToolAssistance(instructions) {\n        this.outputPrompt(instructions ? instructions.mainInstruction.text : \"\");\n    }\n    /**\n     * Displays a notification message.\n     * @param severity          The severity of the message.\n     * @param briefMessage      A short message that conveys the simplest explanation of the issue.\n     * @param detailedMessage   An optional comprehensive message that explains the issue in detail and potentially offers a solution.\n     * @param messageType       The type of message. Defaults to Toast.\n     */\n    displayMessage(severity, briefMessage, detailedMessage, messageType) {\n        const details = new NotifyMessageDetails(this.convertSeverityToPriority(severity), briefMessage, detailedMessage, this.convertMessageType(messageType));\n        this.outputMessage(details);\n    }\n    /**\n     * Displays an input field notification message.\n     * @param inputField        Input field to which the message pertains. The message will be shown just below this input field element.\n     * @param severity          The severity of the message.\n     * @param briefMessage      A short message that conveys the simplest explanation of the issue.\n     * @param detailedMessage   An optional comprehensive message that explains the issue in detail and potentially offers a solution.\n     */\n    displayInputFieldMessage(inputField, severity, briefMessage, detailedMessage) {\n        const details = new NotifyMessageDetails(this.convertSeverityToPriority(severity), briefMessage, detailedMessage);\n        details.setInputFieldTypeDetails(inputField);\n        this.outputMessage(details);\n    }\n    convertSeverityToPriority(severity) {\n        switch (severity) {\n            case MessageSeverity.Information:\n                return OutputMessagePriority.Info;\n            case MessageSeverity.Warning:\n                return OutputMessagePriority.Warning;\n            case MessageSeverity.Error:\n                return OutputMessagePriority.Error;\n            case MessageSeverity.Fatal:\n                return OutputMessagePriority.Fatal;\n            case MessageSeverity.None:\n            default:\n                return OutputMessagePriority.None;\n        }\n    }\n    convertMessageType(inMessageType) {\n        switch (inMessageType) {\n            case DisplayMessageType.Alert:\n                return OutputMessageType.Alert;\n            case DisplayMessageType.InputField:\n                return OutputMessageType.InputField;\n            case DisplayMessageType.Sticky:\n                return OutputMessageType.Sticky;\n            case DisplayMessageType.Toast:\n                return OutputMessageType.Toast;\n            default:\n                return undefined;\n        }\n    }\n}\n//# sourceMappingURL=NotificationManager.js.map",
      "start": 1693508119114,
      "end": 1693508119333,
      "sourcemaps": null
    }
  ]
}
