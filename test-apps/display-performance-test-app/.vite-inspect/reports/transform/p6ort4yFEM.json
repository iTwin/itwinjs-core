{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/pointcloud/format/opc/FileRecord.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { LittleEndian } from \"../../../system/buffer/LittleEndian\";\n/**\n * Class FileRecord defines the global file record.\n *\n * @version 1.0 January 2014\n */\n/** @internal */\nexport class FileRecord {\n    /**\n     * Create a new record.\n     */\n    constructor(options, crs, levelCount, attributeCount, blockSize, metricCellSize, creationTime) {\n        this._options = options;\n        this._crs = crs;\n        this._levelCount = levelCount;\n        this._attributeCount = attributeCount;\n        this._blockSize = blockSize;\n        this._metricCellSize = metricCellSize;\n        this._creationTime = creationTime;\n    }\n    /**\n     * Get the options.\n     * @return the options.\n     */\n    getOptions() {\n        return this._options;\n    }\n    /**\n     * Get the CRS.\n     * @return the CRS.\n     */\n    getCRS() {\n        return this._crs;\n    }\n    /**\n     * Get the number of levels.\n     * @return the number.\n     */\n    getLevelCount() {\n        return this._levelCount;\n    }\n    /**\n     * Get the number of attributes.\n     * @return the number.\n     */\n    getAttributeCount() {\n        return this._attributeCount;\n    }\n    /**\n     * Get the size of blocks.\n     * @return the number.\n     */\n    getBlockSize() {\n        return this._blockSize;\n    }\n    /**\n     * Get the metric cell size.\n     * @return the metric cell size.\n     */\n    getMetricCellSize() {\n        return this._metricCellSize;\n    }\n    /**\n     * Get the creation timestamp.\n     * @return the creation timestamp.\n     */\n    getCreationTime() {\n        return this._creationTime;\n    }\n    /**\n     * Read a record.\n     * @param data the record data.\n     * @return the record.\n     */\n    static readFromBuffer(data) {\n        /* Get the record fields */\n        let options = LittleEndian.readBufferInt(data, 0);\n        let crs = LittleEndian.readBufferString(data, 4);\n        let dataOffset = 4 + LittleEndian.getStringByteCount(crs);\n        let levelCount = LittleEndian.readBufferInt(data, dataOffset + 0);\n        let attributeCount = LittleEndian.readBufferInt(data, dataOffset + 4);\n        let blockSize = LittleEndian.readBufferInt(data, dataOffset + 8);\n        let metricCellSize = LittleEndian.readBufferDouble(data, dataOffset + 12);\n        let creationTime = LittleEndian.readBufferLong(data, dataOffset + 20);\n        /* Return the record */\n        return new FileRecord(options, crs, levelCount, attributeCount, blockSize, metricCellSize, creationTime);\n    }\n    /**\n     * Read a record.\n     * @param fileAccess the access to the file.\n     * @param offset the file offset to the record.\n     * @param size the file size to the record.\n     * @return the record.\n     */\n    static async readNew(fileStorage, fileName, offset, size) {\n        /* Read the record */\n        let data = await fileStorage.readFilePart(fileName, offset, size.toInt());\n        /* Parse the record */\n        return FileRecord.readFromBuffer(data);\n    }\n    /**\n     * Write the record.\n     * @param output the output stream.\n     */\n    write(output) {\n        LittleEndian.writeStreamInt(output, this._options);\n        LittleEndian.writeStreamString(output, this._crs);\n        LittleEndian.writeStreamInt(output, this._levelCount);\n        LittleEndian.writeStreamInt(output, this._attributeCount);\n        LittleEndian.writeStreamInt(output, this._blockSize);\n        LittleEndian.writeStreamDouble(output, this._metricCellSize);\n        LittleEndian.writeStreamLong(output, this._creationTime);\n    }\n}\n//# sourceMappingURL=FileRecord.js.map",
      "start": 1693508125492,
      "end": 1693508125530,
      "sourcemaps": null
    }
  ]
}
