{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/RpcManager.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module RpcInterface\n */\nimport { RpcOperation } from \"./rpc/core/RpcOperation\";\nimport { RpcRegistry } from \"./rpc/core/RpcRegistry\";\nimport { RpcRoutingToken } from \"./rpc/core/RpcRoutingToken\";\n/** RPC interface management is concerned with coordination of access and configuration for RPC interfaces.\n * @beta\n */\nexport class RpcManager {\n    /** Initializes an RPC interface class.\n     * @note This function must be called on the frontend and on the backend for each RPC interface class used by an application.\n     */\n    static initializeInterface(definition) {\n        RpcRegistry.instance.initializeRpcInterface(definition);\n    }\n    /** Terminates an RPC interface class. */\n    static terminateInterface(definition) {\n        RpcRegistry.instance.terminateRpcInterface(definition);\n    }\n    /** Returns the RPC client instance for the frontend. */\n    static getClientForInterface(definition, routing = RpcRoutingToken.default) {\n        return RpcRegistry.instance.getClientForInterface(definition, routing);\n    }\n    /** Register the RPC implementation class for the backend. */\n    static registerImpl(definition, implementation) {\n        RpcRegistry.instance.registerImpl(definition, implementation);\n    }\n    /** Supply the instance of the RPC interface implementation class for the backend (optional). */\n    static supplyImplInstance(definition, instance) {\n        RpcRegistry.instance.supplyImplInstance(definition, instance);\n    }\n    /** Unregister the RPC implementation class for the backend. */\n    static unregisterImpl(definition) {\n        RpcRegistry.instance.unregisterImpl(definition);\n    }\n    /** Describes the RPC interfaces and endpoints that are currently available from the backend.\n     * @note Some endpoints may be marked incompatible if the frontend expected a different interface declaration than the backend supplied. RPC operations against an incompatible interface will fail.\n     */\n    static async describeAvailableEndpoints() {\n        return RpcRegistry.instance.describeAvailableEndpoints();\n    }\n    /** Configures RPC protocols that employ iModel-based routing infrastructure. */\n    static setIModel(props) {\n        RpcOperation.fallbackToken = props;\n    }\n}\n//# sourceMappingURL=RpcManager.js.map",
      "start": 1693508120752,
      "end": 1693508120802,
      "sourcemaps": null
    }
  ]
}
