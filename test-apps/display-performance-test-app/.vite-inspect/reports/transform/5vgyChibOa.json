{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/pointcloud/render/Block.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { IntMap } from \"../../system/collection/IntMap\";\n/**\n * Class Block defines a block of tiles.\n *\n * @version 1.0 November 2015\n */\n/** @internal */\nexport class Block {\n    /**\n     * Create a new block.\n     * @param index the index of the block.\n     */\n    constructor(index) {\n        this._index = index;\n        this._tileList = null;\n        this._tileMap = null;\n    }\n    /**\n     * Get the index of the block.\n     * @return the index of the block.\n     */\n    getBlockIndex() {\n        return this._index;\n    }\n    /**\n     * Get the spatial bounds of the block.\n     * @param level the level to which the block belongs.\n     * @return the spatial bounds of the block.\n     */\n    getBlockBounds(level) {\n        return level.getBlockGrid().getCellBounds(this._index.gridIndex);\n    }\n    /**\n     * Add a block to the list of blocks to load.\n     * @param blocksToLoad the list of blocks to load.\n     * @param block the block to add.\n     */\n    static addToLoadList(blocksToLoad, block) {\n        for (let i = 0; i < blocksToLoad.size(); i++)\n            if (blocksToLoad.get(i).same(block))\n                return;\n        blocksToLoad.add(block);\n    }\n    /**\n     * Set the tiles in the block.\n     * @param tileList the list of tiles.\n     */\n    setTiles(tileList) {\n        /* Store the list */\n        this._tileList = tileList;\n        /* Make the map */\n        this._tileMap = new IntMap();\n        for (let tile of this._tileList) {\n            let tileX = tile.gridIndex.x;\n            let yzMap = this._tileMap.get(tileX);\n            if (yzMap == null) {\n                yzMap = new IntMap();\n                this._tileMap.set(tileX, yzMap);\n            }\n            let tileY = tile.gridIndex.y;\n            let zMap = yzMap.get(tileY);\n            if (zMap == null) {\n                zMap = new IntMap();\n                yzMap.set(tileY, zMap);\n            }\n            let tileZ = tile.gridIndex.z;\n            zMap.set(tileZ, tile);\n        }\n    }\n    /**\n     * Have the tiles been set?\n     * @return true if the tiles have been set.\n     */\n    hasTiles() {\n        return (this._tileList != null);\n    }\n    /**\n     * List all tiles.\n     * @param blocksToLoad the list of blocks to load.\n     * @return all tiles (null if tiles are not loaded).\n     */\n    getTiles(blocksToLoad) {\n        if (this._tileList == null) {\n            Block.addToLoadList(blocksToLoad, this._index);\n            return null;\n        }\n        return this._tileList;\n    }\n    /**\n     * Find a tile.\n     * @param tileGridIndex the grid index of the tile.\n     * @return the tile (null if not found).\n     */\n    findTile(tileGridIndex) {\n        if (this._tileMap == null)\n            return null;\n        let tileX = tileGridIndex.x;\n        let yzMap = this._tileMap.get(tileX);\n        if (yzMap == null)\n            return null;\n        let tileY = tileGridIndex.y;\n        let zMap = yzMap.get(tileY);\n        if (zMap == null)\n            return null;\n        let tileZ = tileGridIndex.z;\n        return zMap.get(tileZ);\n    }\n}\n//# sourceMappingURL=Block.js.map",
      "start": 1693508125296,
      "end": 1693508125373,
      "sourcemaps": null
    }
  ]
}
