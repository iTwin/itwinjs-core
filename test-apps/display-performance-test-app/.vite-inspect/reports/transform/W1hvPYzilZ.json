{
  "resolvedId": "D:/hub2023A/itwinjs-core/ui/appui-abstract/lib/esm/appui-abstract/dialogs/DialogItem.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Dialog\n */\n/** [[DialogProperty]] is a generic helper class that assists working with properties used by UiLayoutDataProvider implementations (i.e. Tool Settings and Dynamic Dialogs).\n * @public\n */\nexport class DialogProperty {\n    constructor(description, _value, _displayValue, _isDisabled) {\n        this.description = description;\n        this._value = _value;\n        this._displayValue = _displayValue;\n        this._isDisabled = _isDisabled;\n    }\n    get isDisabled() {\n        return !!this._isDisabled;\n    }\n    set isDisabled(val) {\n        this._isDisabled = val;\n    }\n    get value() {\n        return this._value;\n    }\n    set value(val) {\n        this._value = val;\n    }\n    get name() {\n        return this.description.name;\n    }\n    set displayValue(val) {\n        this._displayValue = val;\n    }\n    get displayValue() {\n        return this._displayValue;\n    }\n    get dialogItemValue() {\n        // istanbul ignore else\n        if (typeof this._value === \"string\" || typeof this._value === \"number\" || typeof this._value === \"undefined\" || typeof this._value === \"boolean\" || this._value instanceof Date)\n            return {\n                value: this._value,\n                displayValue: this._displayValue,\n            };\n        // istanbul ignore next\n        throw new Error(\"Not valid primitive type\");\n    }\n    set dialogItemValue(val) {\n        this._value = val.value;\n        this._displayValue = val.displayValue;\n    }\n    get syncItem() {\n        const isDisabled = this._isDisabled;\n        return { propertyName: this.name, value: this.dialogItemValue, isDisabled };\n    }\n    get item() {\n        return { propertyName: this.name, value: this.dialogItemValue };\n    }\n    toDialogItem(editorPosition, lockProperty) {\n        return { value: this.dialogItemValue, property: this.description, editorPosition, isDisabled: this._isDisabled, lockProperty };\n    }\n}\n//# sourceMappingURL=DialogItem.js.map",
      "start": 1693508123528,
      "end": 1693508123598,
      "sourcemaps": null
    }
  ]
}
