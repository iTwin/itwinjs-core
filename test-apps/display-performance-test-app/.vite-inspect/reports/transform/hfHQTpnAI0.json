{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/MapImagerySettings.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module MapLayers\n */\nimport { ColorDef } from \"./ColorDef\";\nimport { BaseMapLayerSettings, MapLayerSettings } from \"./MapLayerSettings\";\n/** @public */\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport var BaseLayerSettings;\n(function (BaseLayerSettings) {\n    /** Create a base layer from its JSON representation. */\n    function fromJSON(props) {\n        return typeof props === \"number\" ? ColorDef.fromJSON(props) : BaseMapLayerSettings.fromJSON(props);\n    }\n    BaseLayerSettings.fromJSON = fromJSON;\n})(BaseLayerSettings || (BaseLayerSettings = {}));\n/** Provides access to the map imagery settings (Base and layers).\n * In earlier versions only a background map was supported as specified by the providerName and mapType members of [[BackgroundMapSettings]] object.\n * In order to provide backward compatibility the original [[BackgroundMapSettings]] are synchronized with the [[MapImagerySettings]] base layer as long as\n * the settings are compatible.\n * @public\n */\nexport class MapImagerySettings {\n    constructor(base, backgroundLayerProps, overlayLayersProps) {\n        this._backgroundLayers = new Array();\n        this._overlayLayers = new Array();\n        this._backgroundBase = base;\n        if (backgroundLayerProps) {\n            for (const layerProps of backgroundLayerProps) {\n                const layer = MapLayerSettings.fromJSON(layerProps);\n                if (layer)\n                    this._backgroundLayers.push(layer);\n            }\n        }\n        if (overlayLayersProps) {\n            for (const overlayLayerProps of overlayLayersProps) {\n                const overlayLayer = MapLayerSettings.fromJSON(overlayLayerProps);\n                if (overlayLayer)\n                    this._overlayLayers.push(overlayLayer);\n            }\n        }\n    }\n    /** The settings for the base layer.\n     *  @note If changing the base provider it is currently necessary to also update the background map settings.\n     */\n    get backgroundBase() { return this._backgroundBase; }\n    set backgroundBase(base) { this._backgroundBase = base; }\n    get backgroundLayers() { return this._backgroundLayers; }\n    get overlayLayers() { return this._overlayLayers; }\n    /** Return base transparency as a number between 0 and 1.\n     * @internal\n     */\n    get baseTransparency() {\n        return (this._backgroundBase instanceof ColorDef) ? (this._backgroundBase.getTransparency() / 255) : this._backgroundBase.transparency;\n    }\n    /** Construct from JSON, performing validation and applying default values for undefined fields. */\n    static fromJSON(imageryJson) {\n        return this.createFromJSON(imageryJson, undefined);\n    }\n    /** @internal */\n    static createFromJSON(imageryJson, mapProps) {\n        const baseLayer = imageryJson?.backgroundBase ? BaseLayerSettings.fromJSON(imageryJson.backgroundBase) : BaseMapLayerSettings.fromBackgroundMapProps(mapProps ?? {});\n        return new MapImagerySettings(baseLayer, imageryJson?.backgroundLayers, imageryJson?.overlayLayers);\n    }\n    toJSON() {\n        const props = { backgroundBase: this._backgroundBase.toJSON() };\n        if (this._backgroundLayers.length > 0)\n            props.backgroundLayers = this._backgroundLayers.map((layer) => layer.toJSON());\n        if (this._overlayLayers.length > 0)\n            props.overlayLayers = this._overlayLayers.map((layer) => layer.toJSON());\n        return props;\n    }\n}\n//# sourceMappingURL=MapImagerySettings.js.map",
      "start": 1693508120699,
      "end": 1693508120745,
      "sourcemaps": null
    }
  ]
}
