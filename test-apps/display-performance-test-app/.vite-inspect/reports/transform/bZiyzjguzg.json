{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/ECSqlTypes.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module ECSQL\n */\nimport { assert } from \"@itwin/core-bentley\";\n/** Describes the different data types an ECSQL value can be of.\n * See also [ECSQL]($docs/learning/ECSQL).\n * @public\n * @extensions\n */\nexport var ECSqlValueType;\n(function (ECSqlValueType) {\n    // do not change the values of the enum as it must match its counterpart in the addon\n    ECSqlValueType[ECSqlValueType[\"Blob\"] = 1] = \"Blob\";\n    ECSqlValueType[ECSqlValueType[\"Boolean\"] = 2] = \"Boolean\";\n    ECSqlValueType[ECSqlValueType[\"DateTime\"] = 3] = \"DateTime\";\n    ECSqlValueType[ECSqlValueType[\"Double\"] = 4] = \"Double\";\n    ECSqlValueType[ECSqlValueType[\"Geometry\"] = 5] = \"Geometry\";\n    ECSqlValueType[ECSqlValueType[\"Id\"] = 6] = \"Id\";\n    ECSqlValueType[ECSqlValueType[\"Int\"] = 7] = \"Int\";\n    ECSqlValueType[ECSqlValueType[\"Int64\"] = 8] = \"Int64\";\n    ECSqlValueType[ECSqlValueType[\"Point2d\"] = 9] = \"Point2d\";\n    ECSqlValueType[ECSqlValueType[\"Point3d\"] = 10] = \"Point3d\";\n    ECSqlValueType[ECSqlValueType[\"String\"] = 11] = \"String\";\n    ECSqlValueType[ECSqlValueType[\"Navigation\"] = 12] = \"Navigation\";\n    ECSqlValueType[ECSqlValueType[\"Struct\"] = 13] = \"Struct\";\n    ECSqlValueType[ECSqlValueType[\"PrimitiveArray\"] = 14] = \"PrimitiveArray\";\n    ECSqlValueType[ECSqlValueType[\"StructArray\"] = 15] = \"StructArray\";\n    ECSqlValueType[ECSqlValueType[\"Guid\"] = 16] = \"Guid\";\n})(ECSqlValueType || (ECSqlValueType = {}));\n/** Equivalent of the ECEnumeration OpCode in the **ECDbChange** ECSchema.\n * The enum can be used when programmatically binding values to the InstanceChange.OpCode property of\n * the ECDbChange ECSchema.\n *\n * See also\n * - [ChangeSummary Overview]($docs/learning/ChangeSummaries)\n * @public\n * @extensions\n */\nexport var ChangeOpCode;\n(function (ChangeOpCode) {\n    ChangeOpCode[ChangeOpCode[\"Insert\"] = 1] = \"Insert\";\n    ChangeOpCode[ChangeOpCode[\"Update\"] = 2] = \"Update\";\n    ChangeOpCode[ChangeOpCode[\"Delete\"] = 4] = \"Delete\";\n})(ChangeOpCode || (ChangeOpCode = {}));\n/** The enum represents the values for the ChangedValueState argument of the ECSQL function **Changes**.\n * The enum can be used when programmatically binding values to the ChangedValueState argument\n * in an ECSQL using the **Changes** ECSQL function.\n *\n * See also\n * - [ChangeSummary Overview]($docs/learning/ChangeSummaries)\n * @public\n * @extensions\n */\nexport var ChangedValueState;\n(function (ChangedValueState) {\n    ChangedValueState[ChangedValueState[\"AfterInsert\"] = 1] = \"AfterInsert\";\n    ChangedValueState[ChangedValueState[\"BeforeUpdate\"] = 2] = \"BeforeUpdate\";\n    ChangedValueState[ChangedValueState[\"AfterUpdate\"] = 3] = \"AfterUpdate\";\n    ChangedValueState[ChangedValueState[\"BeforeDelete\"] = 4] = \"BeforeDelete\";\n})(ChangedValueState || (ChangedValueState = {}));\n/** Defines the ECSQL system properties.\n * See also [ECSQL]($docs/learning/ECSQL).\n * @public\n * @extensions\n */\nexport var ECSqlSystemProperty;\n(function (ECSqlSystemProperty) {\n    ECSqlSystemProperty[ECSqlSystemProperty[\"ECInstanceId\"] = 0] = \"ECInstanceId\";\n    ECSqlSystemProperty[ECSqlSystemProperty[\"ECClassId\"] = 1] = \"ECClassId\";\n    ECSqlSystemProperty[ECSqlSystemProperty[\"SourceECInstanceId\"] = 2] = \"SourceECInstanceId\";\n    ECSqlSystemProperty[ECSqlSystemProperty[\"SourceECClassId\"] = 3] = \"SourceECClassId\";\n    ECSqlSystemProperty[ECSqlSystemProperty[\"TargetECInstanceId\"] = 4] = \"TargetECInstanceId\";\n    ECSqlSystemProperty[ECSqlSystemProperty[\"TargetECClassId\"] = 5] = \"TargetECClassId\";\n    ECSqlSystemProperty[ECSqlSystemProperty[\"NavigationId\"] = 6] = \"NavigationId\";\n    ECSqlSystemProperty[ECSqlSystemProperty[\"NavigationRelClassId\"] = 7] = \"NavigationRelClassId\";\n    ECSqlSystemProperty[ECSqlSystemProperty[\"PointX\"] = 8] = \"PointX\";\n    ECSqlSystemProperty[ECSqlSystemProperty[\"PointY\"] = 9] = \"PointY\";\n    ECSqlSystemProperty[ECSqlSystemProperty[\"PointZ\"] = 10] = \"PointZ\";\n})(ECSqlSystemProperty || (ECSqlSystemProperty = {}));\n/** Utility to format ECProperty names according to the iTwin.js formatting rules.\n * See also [ECSQL Row Format]($docs/learning/ECSQLRowFormat).\n * @public\n */\nexport class ECJsNames {\n    /** Formats the specified ECProperty name according to the iTwin.js formatting rules.\n     *\n     *  See [ECSQL Row Format]($docs/learning/ECSQLRowFormat) which describes the formatting rules.\n     *\n     * @param ecProperty Property name as defined in the ECSchema for regular ECProperties\n     *        or the name of an ECSQL system properties\n     * @param isSystemProperty if omitted, the method will try to find out whether the given property\n     *        is a system property or not. If true is specified, the method will throw if the property name\n     *        is not a known system property. If false is specified, the method will not attempt to recognize\n     *        the property name as system property.\n     */\n    static toJsName(propName, isSystemProperty) {\n        assert(propName !== undefined, \"propName must not be undefined\");\n        const propTypeUnknown = isSystemProperty === undefined || isSystemProperty === null;\n        const accessStringTokens = propName.split(\".\");\n        const tokenCount = accessStringTokens.length;\n        assert(tokenCount > 0);\n        if (tokenCount === 1) {\n            if (propTypeUnknown || isSystemProperty) {\n                if (propName === \"ECInstanceId\")\n                    return ECJsNames.systemPropertyToJsName(ECSqlSystemProperty.ECInstanceId);\n                if (propName === \"ECClassId\")\n                    return ECJsNames.systemPropertyToJsName(ECSqlSystemProperty.ECClassId);\n                if (propName === \"SourceECInstanceId\")\n                    return ECJsNames.systemPropertyToJsName(ECSqlSystemProperty.SourceECInstanceId);\n                if (propName === \"TargetECInstanceId\")\n                    return ECJsNames.systemPropertyToJsName(ECSqlSystemProperty.TargetECInstanceId);\n                if (propName === \"SourceECClassId\")\n                    return ECJsNames.systemPropertyToJsName(ECSqlSystemProperty.SourceECClassId);\n                if (propName === \"TargetECClassId\")\n                    return ECJsNames.systemPropertyToJsName(ECSqlSystemProperty.TargetECClassId);\n                return ECJsNames.lowerFirstChar(propName);\n            }\n            return ECJsNames.lowerFirstChar(propName);\n        }\n        // parse access string and convert the leaf tokens if they are system props\n        // The first char of the access string is lowered.\n        let jsName = ECJsNames.lowerFirstChar(`${accessStringTokens[0]}.`);\n        for (let j = 1; j < tokenCount - 1; j++) {\n            jsName += `${accessStringTokens[j]}.`;\n        }\n        const leafToken = accessStringTokens[tokenCount - 1];\n        if (propTypeUnknown || isSystemProperty) {\n            if (leafToken === \"Id\")\n                jsName += ECJsNames.systemPropertyToJsName(ECSqlSystemProperty.NavigationId);\n            else if (leafToken === \"RelECClassId\")\n                jsName += ECJsNames.systemPropertyToJsName(ECSqlSystemProperty.NavigationRelClassId);\n            else if (leafToken === \"X\")\n                jsName += ECJsNames.systemPropertyToJsName(ECSqlSystemProperty.PointX);\n            else if (leafToken === \"Y\")\n                jsName += ECJsNames.systemPropertyToJsName(ECSqlSystemProperty.PointY);\n            else if (leafToken === \"Z\")\n                jsName += ECJsNames.systemPropertyToJsName(ECSqlSystemProperty.PointZ);\n            else if (propTypeUnknown)\n                jsName += ECJsNames.lowerFirstChar(leafToken);\n            else\n                throw new Error(`Property ${leafToken} of access string ${propName} is no ECSQL system property.`);\n        }\n        else\n            jsName += leafToken;\n        return jsName;\n    }\n    /** Returns the name of the specified ECSQL system property according to the\n     *  iTwin.js formatting rules.\n     *\n     *  See [ECSQL Row Format]($docs/learning/ECSQLRowFormat) which describes the formatting rules.\n     * @param systemPropertyType System property type\n     */\n    static systemPropertyToJsName(systemPropertyType) {\n        switch (systemPropertyType) {\n            case ECSqlSystemProperty.ECInstanceId:\n            case ECSqlSystemProperty.NavigationId:\n                return \"id\";\n            case ECSqlSystemProperty.ECClassId:\n                return \"className\";\n            case ECSqlSystemProperty.SourceECInstanceId:\n                return \"sourceId\";\n            case ECSqlSystemProperty.SourceECClassId:\n                return \"sourceClassName\";\n            case ECSqlSystemProperty.TargetECInstanceId:\n                return \"targetId\";\n            case ECSqlSystemProperty.TargetECClassId:\n                return \"targetClassName\";\n            case ECSqlSystemProperty.NavigationRelClassId:\n                return \"relClassName\";\n            case ECSqlSystemProperty.PointX:\n                return \"x\";\n            case ECSqlSystemProperty.PointY:\n                return \"y\";\n            case ECSqlSystemProperty.PointZ:\n                return \"z\";\n            default:\n                throw new Error(`Unknown ECSqlSystemProperty enum value ${systemPropertyType}.`);\n        }\n    }\n    static lowerFirstChar(name) { return name[0].toLowerCase() + name.substring(1); }\n}\n//# sourceMappingURL=ECSqlTypes.js.map",
      "start": 1693508120503,
      "end": 1693508120571,
      "sourcemaps": null
    }
  ]
}
