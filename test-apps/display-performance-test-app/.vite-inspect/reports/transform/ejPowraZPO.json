{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/DevTools.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { DevToolsRpcInterface, DevToolsStatsOptions } from \"@itwin/core-common\";\n/**\n * Internal diagnostic utility for backends\n * @internal\n */\nexport class DevTools {\n    /** Create a new connection with a specific backend instance.\n     * @param tokenProps The iModelToken that identifies that backend instance.\n     * Supply a dummy token if contacting the backend without the Orchestrator.\n     */\n    static connectToBackendInstance(tokenProps) {\n        return new DevTools(tokenProps);\n    }\n    /** Constructor */\n    constructor(_tokenProps) {\n        this._tokenProps = _tokenProps;\n    }\n    /** Measures the round trip times for one or more pings to the backend\n     * @param count Number of pings to send to the backend\n     * @return Result of ping test.\n     */\n    async ping(count) {\n        const pings = new Array(count);\n        const pingFn = async () => {\n            const start = Date.now();\n            await DevToolsRpcInterface.getClient().ping(this._tokenProps);\n            return Date.now() - start;\n        };\n        for (let ii = 0; ii < count; ii++)\n            pings[ii] = pingFn().catch(async () => undefined);\n        const pingTimes = await Promise.all(pings);\n        const min = pingTimes.reduce((acc, curr) => {\n            if (!acc)\n                return curr;\n            if (!curr)\n                return acc;\n            return Math.min(acc, curr);\n        }, undefined);\n        const max = pingTimes.reduce((acc, curr) => {\n            if (typeof acc === \"undefined\")\n                return undefined;\n            if (!curr)\n                return curr;\n            return Math.max(acc, curr);\n        }, 0);\n        const total = pingTimes.reduce((acc, curr) => {\n            if (typeof acc === \"undefined\")\n                return undefined;\n            if (!curr)\n                return undefined;\n            return acc + curr;\n        }, 0);\n        const avg = total ? total / count : undefined;\n        return { min, max, avg };\n    }\n    /** Returns JSON object with backend statistics */\n    async stats(options = DevToolsStatsOptions.FormatUnits) {\n        return DevToolsRpcInterface.getClient().stats(this._tokenProps, options);\n    }\n    // Returns JSON object with backend versions (application and iModelJs)\n    async versions() {\n        return DevToolsRpcInterface.getClient().versions(this._tokenProps);\n    }\n    /** Sets up a log level at the backend and returns the old log level */\n    async setLogLevel(inLoggerCategory, newLevel) {\n        return DevToolsRpcInterface.getClient().setLogLevel(this._tokenProps, inLoggerCategory, newLevel);\n    }\n}\n//# sourceMappingURL=DevTools.js.map",
      "start": 1693508118801,
      "end": 1693508119002,
      "sourcemaps": null
    }
  ]
}
