{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/tile/TileGeometryCollector.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tiles\n */\nimport { IModelApp } from \"../IModelApp\";\n/** Collects geoemtry from a [[GeometryTileTreeReference]] within a specified volume at a specified level of detail.\n * Subclasses can refine the collection criterion.\n * The tile geometry is obtained asynchronously, so successive collections over multiple frames may be required before all of the geometry\n * is collected.\n * @beta\n */\nexport class TileGeometryCollector {\n    /** Create a new collector. */\n    constructor(options) {\n        /** The list of accumulated polyfaces, populated during [[GeometryTileTreeReference.collectTileGeometry]].\n         * The polyfaces belong to the [[Tile]]s - they should not be modified.\n         * If [[isAllGeometryLoaded]] is `false`, then this list is incomplete - another geometry collection should be performed with a new collector on a subsequent frame.\n         */\n        this.polyfaces = [];\n        this._missing = new Set();\n        this._loading = false;\n        this._options = options;\n    }\n    /** Allows an implementation of [[GeometryTileTreeReference.collectTileGeoemtry]] to indicate that further loading is required before\n     * the collection can be completed.\n     * This will cause [[isAllGeometryLoaded]] to return `false`.\n     */\n    markLoading() {\n        this._loading = true;\n    }\n    /** Enqueues requests to obtain the content of any tiles whose content is required to complete the geometry collection.\n     * @see [[isAllGeometryLoaded]] to determine if geometry collection is complete.\n     */\n    requestMissingTiles() {\n        IModelApp.tileAdmin.requestTiles(this._options.user, this._missing);\n    }\n    /** Allows an implementation of [[GeometryTileTreeReference.collectTileGeometry]] to indicate that the specified tile's content must be loaded\n     * before geometry collection can be completed.\n     * This will cause [[isAllGeometryLoaded]] to return `false`.\n     */\n    addMissingTile(tile) {\n        this._missing.add(tile);\n    }\n    /** Returns true if [[polyfaces]] has been fully populated with all the geometry satisfying this collector's criteria.\n     * If it returns false, another collection using a new collector should be performed on a subsequent frame to load more geometry.\n     */\n    get isAllGeometryLoaded() {\n        return !this._loading && this._missing.size === 0;\n    }\n    /** Determine whether to collect the specified tile's geometry, reject it, or to evaluate the geometry of its child tiles for collection.\n     * This base implementation makes that determination based on the collector's range and chord tolerance. Subclasses should typically call `super.collectTile` and, if\n     * it returns \"accept\" or \"continue\", apply their own criteria to the tile.\n     */\n    collectTile(tile) {\n        const range = this._options.transform ? this._options.transform.multiplyRange(tile.range) : tile.range;\n        if (!range.intersectsRange(this._options.range))\n            return \"reject\";\n        if (tile.maximumSize === 0 || !tile.isDisplayable)\n            return \"continue\";\n        const tolerance = tile.radius / tile.maximumSize;\n        return tolerance < this._options.chordTolerance ? \"accept\" : \"continue\";\n    }\n}\n//# sourceMappingURL=TileGeometryCollector.js.map",
      "start": 1693508121561,
      "end": 1693508121660,
      "sourcemaps": null
    }
  ]
}
