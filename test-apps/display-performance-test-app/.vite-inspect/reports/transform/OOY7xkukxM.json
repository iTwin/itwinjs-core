{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/IModelApp.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module IModelApp\n */\nvar _a;\n/** @public */\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nexport const ITWINJS_CORE_VERSION = require(\"../../package.json\").version; // require resolves from the lib/{cjs,esm} dir\nconst COPYRIGHT_NOTICE = 'Copyright Â© 2017-2023 <a href=\"https://www.bentley.com\" target=\"_blank\" rel=\"noopener noreferrer\">Bentley Systems, Inc.</a>';\nimport { UiAdmin } from \"@itwin/appui-abstract\";\nimport { BeDuration, BeEvent, BentleyStatus, DbResult, dispose, Guid, Logger, ProcessDetector } from \"@itwin/core-bentley\";\nimport { IModelStatus, RpcConfiguration, } from \"@itwin/core-common\";\nimport { ITwinLocalization } from \"@itwin/core-i18n\";\nimport { TelemetryManager } from \"@itwin/core-telemetry\";\nimport { queryRenderCompatibility } from \"@itwin/webgl-compatibility\";\nimport { AccuDraw } from \"./AccuDraw\";\nimport { AccuSnap } from \"./AccuSnap\";\nimport * as auxCoordState from \"./AuxCoordSys\";\nimport * as categorySelectorState from \"./CategorySelectorState\";\nimport { ExtensionAdmin } from \"./extension/ExtensionAdmin\";\nimport * as displayStyleState from \"./DisplayStyleState\";\nimport * as drawingViewState from \"./DrawingViewState\";\nimport { ElementLocateManager } from \"./ElementLocateManager\";\nimport { EntityState } from \"./EntityState\";\nimport { FrontendLoggerCategory } from \"./common/FrontendLoggerCategory\";\nimport * as modelselector from \"./ModelSelectorState\";\nimport * as modelState from \"./ModelState\";\nimport { NotificationManager } from \"./NotificationManager\";\nimport { QuantityFormatter } from \"./quantity-formatting/QuantityFormatter\";\nimport { RenderSystem } from \"./render/RenderSystem\";\nimport { System } from \"./render/webgl/System\";\nimport * as sheetState from \"./SheetViewState\";\nimport * as spatialViewState from \"./SpatialViewState\";\nimport { TentativePoint } from \"./TentativePoint\";\nimport { RealityDataSourceProviderRegistry } from \"./RealityDataSource\";\nimport { MapLayerFormatRegistry, TerrainProviderRegistry, TileAdmin } from \"./tile/internal\";\nimport * as accudrawTool from \"./tools/AccuDrawTool\";\nimport * as clipViewTool from \"./tools/ClipViewTool\";\nimport * as idleTool from \"./tools/IdleTool\";\nimport * as measureTool from \"./tools/MeasureTool\";\nimport * as selectTool from \"./tools/SelectTool\";\nimport { ToolRegistry } from \"./tools/Tool\";\nimport { ToolAdmin } from \"./tools/ToolAdmin\";\nimport * as viewTool from \"./tools/ViewTool\";\nimport { ViewManager } from \"./ViewManager\";\nimport * as viewState from \"./ViewState\";\nimport \"./IModeljs-css\";\n/**\n * Global singleton that connects the user interface with the iTwin.js services. There can be only one IModelApp active in a session. All\n * members of IModelApp are static, and it serves as a singleton object for gaining access to session information.\n *\n * Before any interactive operations may be performed by the `@itwin/core-frontend package`, [[IModelApp.startup]] must be called and awaited.\n * Applications may customize the frontend behavior of iTwin.js by supplying options to [[IModelApp.startup]].\n *\n * @public\n */\nclass IModelApp {\n    // No instances of IModelApp may be created. All members are static and must be on the singleton object IModelApp.\n    constructor() { }\n    /** The [[MapLayerFormatRegistry]] for this session. */\n    static get mapLayerFormatRegistry() { return this._mapLayerFormatRegistry; }\n    /** The [[TerrainProviderRegistry]] for this session. */\n    static get terrainProviderRegistry() { return this._terrainProviderRegistry; }\n    /** The [[RealityDataSourceProviderRegistry]] for this session.\n     * @alpha\n     */\n    static get realityDataSourceProviders() { return this._realityDataSourceProviders; }\n    /** The [[RenderSystem]] for this session. */\n    static get renderSystem() { return this._renderSystem; }\n    /** The [[ViewManager]] for this session. */\n    static get viewManager() { return this._viewManager; }\n    /** The [[NotificationManager]] for this session. */\n    static get notifications() { return this._notifications; }\n    /** The [[TileAdmin]] for this session. */\n    static get tileAdmin() { return this._tileAdmin; }\n    /** The [[QuantityFormatter]] for this session. */\n    static get quantityFormatter() { return this._quantityFormatter; }\n    /** The [[ToolAdmin]] for this session. */\n    static get toolAdmin() { return this._toolAdmin; }\n    /** The [[AccuDraw]] for this session. */\n    static get accuDraw() { return this._accuDraw; }\n    /** The [[AccuSnap]] for this session. */\n    static get accuSnap() { return this._accuSnap; }\n    static get locateManager() { return this._locateManager; }\n    /** The [[TentativePoint]] for this session]]. */\n    static get tentativePoint() { return this._tentativePoint; }\n    /** The [[Localization]] for this session. */\n    static get localization() { return this._localization; }\n    /** The [[UserPreferencesAccess]] for this session.\n     * @beta\n     */\n    static get userPreferences() { return this._userPreferences; }\n    /** The Id of this application. Applications must set this to the Global Product Registry ID (GPRID) for usage logging. */\n    static get applicationId() { return this._applicationId; }\n    /** The version of this application. Must be set for usage logging. */\n    static get applicationVersion() { return this._applicationVersion; }\n    /** True after [[startup]] has been called, until [[shutdown]] is called. */\n    static get initialized() { return this._initialized; }\n    /** Provides access to IModelHub services. */\n    static get hubAccess() { return this._hubAccess; }\n    /** Provides access to the RealityData service implementation for this IModelApp\n     * @beta\n     */\n    static get realityDataAccess() { return this._realityDataAccess; }\n    /** Whether the [renderSystem[]] has been successfully initialized.\n     * This will always be `false` before calling [[startup]] and after calling [[shutdown]].\n     * In rare circumstances (e.g., while executing in a headless test environment) it may remain `false` due to a failure to\n     * obtain a [WebGL rendering context](https://www.google.com/search?channel=fs&client=ubuntu-sn&q=mdn+webglrenderingcontext).\n     * As long as you have called [[startup]], you can generally assume it to be `true`.\n     */\n    static get hasRenderSystem() {\n        return this._renderSystem !== undefined && this._renderSystem.isValid;\n    }\n    /** The [[UiAdmin]] for this session. */\n    static get uiAdmin() { return this._uiAdmin; }\n    /** The requested security options for the frontend. */\n    static get securityOptions() { return this._securityOptions; }\n    /** The root URL for the assets 'public' folder.\n     * @beta\n     */\n    static get publicPath() { return this._publicPath; }\n    /** Register all of the subclasses of EntityState from a module.\n     * @internal\n     */\n    static registerModuleEntities(moduleObj) {\n        for (const thisMember in moduleObj) { // eslint-disable-line guard-for-in\n            const thisEntityState = moduleObj[thisMember];\n            if (thisEntityState.prototype instanceof EntityState) {\n                this.registerEntityState(thisEntityState.classFullName, thisEntityState);\n            }\n        }\n    }\n    /** Register an EntityState class by its classFullName\n     * @internal\n     */\n    static registerEntityState(classFullName, classType) {\n        const lowerName = classFullName.toLowerCase();\n        if (this._entityClasses.has(lowerName)) {\n            const errMsg = `Class ${classFullName} is already registered. Make sure static schemaName and className members are correct on class ${classType.name}`;\n            Logger.logError(FrontendLoggerCategory.IModelConnection, errMsg);\n            throw new Error(errMsg);\n        }\n        this._entityClasses.set(lowerName, classType);\n    }\n    /** @internal */\n    static lookupEntityClass(classFullName) { return this._entityClasses.get(classFullName.toLowerCase()); }\n    /**\n     * Obtain WebGL rendering compatibility information for the client system.  This information describes whether the client meets the\n     * minimum rendering capabilities.  It also describes whether the system lacks any optional capabilities that could improve quality\n     * and/or performance.\n     * @note As of 4.x, iTwin.js requires WebGL 2. If the client does not support WebGL 2, the `status` field of the returned compatibility info will be [WebGLRenderCompatibilityStatus.CannotCreateContext]($webgl-compatibility).\n     */\n    static queryRenderCompatibility() {\n        return queryRenderCompatibility(true, (canvas, useWebGL2, inputContextAttributes) => System.createContext(canvas, useWebGL2, inputContextAttributes));\n    }\n    /**\n     * This method must be called before any other `@itwin/core-frontend` methods are used.\n     * Somewhere in your startup code, call [[IModelApp.startup]]. E.g.:\n     * ``` ts\n     * await IModelApp.startup( {applicationId: myAppId} );\n     * ```\n     * @param opts The options for configuring IModelApp\n     */\n    static async startup(opts) {\n        if (this._initialized)\n            return; // we're already initialized, do nothing.\n        this._initialized = true;\n        opts = opts ?? {};\n        this._securityOptions = opts.security ?? {};\n        if (process.env.NODE_ENV === \"development\") {\n            // Make IModelApp globally accessible for debugging purposes. We'll remove it on shutdown.\n            window.iModelAppForDebugger = this;\n        }\n        this.sessionId = opts.sessionId ?? Guid.createValue();\n        this._applicationId = opts.applicationId ?? \"2686\"; // Default to product id of iTwin.js\n        this._applicationVersion = opts.applicationVersion ?? \"1.0.0\";\n        this.authorizationClient = opts.authorizationClient;\n        this._hubAccess = opts.hubAccess;\n        this._noRender = opts.noRender ?? false;\n        this._setupRpcRequestContext();\n        this._localization = opts.localization ?? new ITwinLocalization();\n        const toolsNs = \"CoreTools\";\n        await this.localization.initialize([\"iModelJs\", toolsNs]);\n        [\n            selectTool,\n            idleTool,\n            viewTool,\n            clipViewTool,\n            measureTool,\n            accudrawTool,\n        ].forEach((tool) => this.tools.registerModule(tool, toolsNs));\n        this.registerEntityState(EntityState.classFullName, EntityState);\n        [\n            modelState,\n            sheetState,\n            viewState,\n            drawingViewState,\n            spatialViewState,\n            displayStyleState,\n            modelselector,\n            categorySelectorState,\n            auxCoordState,\n        ].forEach((module) => this.registerModuleEntities(module));\n        this._renderSystem = (opts.renderSys instanceof RenderSystem) ? opts.renderSys : this.createRenderSys(opts.renderSys);\n        if (opts.userPreferences)\n            this._userPreferences = opts.userPreferences;\n        this._viewManager = opts.viewManager ?? new ViewManager();\n        this._tileAdmin = await TileAdmin.create(opts.tileAdmin);\n        this._notifications = opts.notifications ?? new NotificationManager();\n        this._toolAdmin = opts.toolAdmin ?? new ToolAdmin();\n        this._accuDraw = opts.accuDraw ?? new AccuDraw();\n        this._accuSnap = opts.accuSnap ?? new AccuSnap();\n        this._locateManager = opts.locateManager ?? new ElementLocateManager();\n        this._tentativePoint = opts.tentativePoint ?? new TentativePoint();\n        this._quantityFormatter = opts.quantityFormatter ?? new QuantityFormatter();\n        this._uiAdmin = opts.uiAdmin ?? new UiAdmin();\n        this._mapLayerFormatRegistry = new MapLayerFormatRegistry(opts.mapLayerOptions);\n        this._terrainProviderRegistry = new TerrainProviderRegistry();\n        this._realityDataSourceProviders = new RealityDataSourceProviderRegistry();\n        this._realityDataAccess = opts.realityDataAccess;\n        this._publicPath = opts.publicPath ?? \"\";\n        [\n            this.renderSystem,\n            this.viewManager,\n            this.toolAdmin,\n            this.accuDraw,\n            this.accuSnap,\n            this.locateManager,\n            this.tentativePoint,\n            this.uiAdmin,\n        ].forEach((sys) => sys.onInitialized());\n        await this.quantityFormatter.onInitialized();\n        this.onAfterStartup.raiseEvent();\n    }\n    /** Must be called before the application exits to release any held resources. */\n    static async shutdown() {\n        if (!this._initialized)\n            return;\n        // notify listeners that this IModelApp is about to be shut down.\n        this.onBeforeShutdown.raiseEvent();\n        this.onBeforeShutdown.clear();\n        if (process.env.NODE_ENV === \"development\") {\n            window.iModelAppForDebugger = undefined;\n        }\n        this._wantEventLoop = false;\n        window.removeEventListener(\"resize\", () => IModelApp.requestNextAnimation());\n        this.clearIntervalAnimation();\n        [this.toolAdmin, this.viewManager, this.tileAdmin].forEach((sys) => sys.onShutDown());\n        this.tools.shutdown();\n        this._renderSystem = dispose(this._renderSystem);\n        this._entityClasses.clear();\n        this.authorizationClient = undefined;\n        this._initialized = false;\n        this.onAfterStartup.clear();\n    }\n    /** Controls how frequently the application polls for changes that may require a new animation frame to be requested.\n     * Such changes include resizing a Viewport or changing the device pixel ratio by zooming in or out in the browser.\n     * The default interval is 1 second. It may be desirable to override the default for specific apps and/or devices.\n     *  - Increasing the interval can conserve battery life on battery-powered devices at the expense of slower response to resize events.\n     *  - An application that only displays a single Viewport whose dimensions only change when the dimensions of the application window change, and which does not support changing application zoom level, could disable the interval altogether.\n     * @param interval The interval at which to poll for changes. If undefined (or negative), the application will never poll. If zero, the application will poll as frequently as possible.\n     * @beta\n     */\n    static get animationInterval() { return IModelApp._animationInterval; }\n    static set animationInterval(interval) {\n        if (undefined !== interval && interval.isTowardsPast)\n            interval = undefined;\n        if (interval !== IModelApp._animationInterval) {\n            IModelApp._animationInterval = interval;\n            if (IModelApp._wantEventLoop)\n                IModelApp.requestIntervalAnimation();\n        }\n    }\n    /** Request that the event loop execute on the next [animation frame](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame).\n     * There is generally no reason for applications to invoke this method directly.\n     */\n    static requestNextAnimation() {\n        // Only want to call requestAnimationFrame if it is defined. Need to check whether current iModelApp is a NoRenderApp.\n        if (IModelApp._noRender)\n            return;\n        if (!IModelApp._animationRequested) {\n            IModelApp._animationRequested = true;\n            requestAnimationFrame(() => IModelApp.eventLoop());\n        }\n    }\n    /** @internal */\n    static clearIntervalAnimation() {\n        if (undefined !== IModelApp._animationIntervalId) {\n            window.clearInterval(IModelApp._animationIntervalId);\n            IModelApp._animationIntervalId = undefined;\n        }\n    }\n    /** @internal */\n    static requestIntervalAnimation() {\n        IModelApp.clearIntervalAnimation();\n        if (undefined !== IModelApp.animationInterval)\n            IModelApp._animationIntervalId = window.setInterval(() => {\n                IModelApp.requestNextAnimation();\n            }, IModelApp.animationInterval.milliseconds);\n    }\n    /** @internal */\n    static startEventLoop() {\n        if (!IModelApp._wantEventLoop) {\n            IModelApp._wantEventLoop = true;\n            window.addEventListener(\"resize\", () => IModelApp.requestNextAnimation());\n            IModelApp.requestIntervalAnimation();\n            IModelApp.requestNextAnimation();\n        }\n    }\n    /** Strictly for tests. @internal */\n    static stopEventLoop() {\n        this._wantEventLoop = false;\n    }\n    /** The main event processing loop for Tools and rendering. */\n    static eventLoop() {\n        IModelApp._animationRequested = false;\n        if (!IModelApp._wantEventLoop) // flag turned on at startup\n            return;\n        try {\n            IModelApp.toolAdmin.processEvent(); // eslint-disable-line @typescript-eslint/no-floating-promises\n            IModelApp.viewManager.renderLoop();\n            IModelApp.tileAdmin.process();\n        }\n        catch (exception) {\n            ToolAdmin.exceptionHandler(exception); // eslint-disable-line @typescript-eslint/no-floating-promises\n            IModelApp._wantEventLoop = false;\n            IModelApp._animationRequested = true; // unrecoverable after exception, don't request any further frames.\n            window.removeEventListener(\"resize\", () => IModelApp.requestNextAnimation());\n        }\n    }\n    /** Get the user's access token for this IModelApp, or a blank string if none is available.\n     * @note Access tokens expire periodically and are automatically refreshed, if possible. Therefore tokens should not be saved, and the value\n     * returned by this method may change over time throughout the course of a session.\n     */\n    static async getAccessToken() {\n        try {\n            return (await this.authorizationClient?.getAccessToken()) ?? \"\";\n        }\n        catch (e) {\n            return \"\";\n        }\n    }\n    /** @internal */\n    static createRenderSys(opts) { return System.create(opts); }\n    static _setupRpcRequestContext() {\n        RpcConfiguration.requestContext.getId = (_request) => {\n            return Guid.createValue();\n        };\n        RpcConfiguration.requestContext.serialize = async (_request) => {\n            const id = _request.id;\n            const serialized = {\n                id,\n                applicationId: this.applicationId,\n                applicationVersion: this.applicationVersion,\n                sessionId: this.sessionId,\n                authorization: ProcessDetector.isMobileAppFrontend ? \"\" : await this.getAccessToken(),\n            };\n            const csrf = IModelApp.securityOptions.csrfProtection;\n            if (csrf && csrf.enabled) {\n                const cookieName = csrf.cookieName || \"XSRF-TOKEN\";\n                const cookieValue = document.cookie.split(\"; \").find((r) => r.startsWith(`${cookieName}=`));\n                if (cookieValue) {\n                    const headerName = csrf.headerName || \"X-XSRF-TOKEN\";\n                    const headerValue = cookieValue.split(\"=\")[1];\n                    serialized.csrfToken = { headerName, headerValue };\n                }\n            }\n            return serialized;\n        };\n    }\n    /** Shortcut for creating an HTMLElement with optional parent, className, id, innerHTML, innerText. */\n    static makeHTMLElement(type, opt) {\n        const el = document.createElement(type);\n        if (undefined !== opt) {\n            if (undefined !== opt.className)\n                el.className = opt.className;\n            if (undefined !== opt.id)\n                el.id = opt.id;\n            if (undefined !== opt.innerHTML)\n                el.innerHTML = opt.innerHTML;\n            if (undefined !== opt.innerText)\n                el.innerText = opt.innerText;\n            if (undefined !== opt.parent)\n                opt.parent.appendChild(el);\n        }\n        return el;\n    }\n    /** Shortcut for making a modal dialog on top of the root of the application. The returned HTMLDivElement will be placed topmost, all other application\n     * windows will be covered with a semi-transparent background that intercepts all key/mouse/touch events until the modal is dismissed.\n     * @param options The options that describe how the modal should work.\n     */\n    static makeModalDiv(options) {\n        const root = options.rootDiv ? options.rootDiv : document.body;\n        // create the overlay div to \"black out\" the application to indicate everything is inactive until the modal has been dismissed.\n        const overlay = IModelApp.makeHTMLElement(\"div\", { parent: root, className: \"imodeljs-modal-overlay\" });\n        overlay.tabIndex = -1; // so we can catch keystroke events\n        // function to remove modal dialog\n        const stop = (ev) => {\n            root.removeChild(overlay);\n            ev.stopPropagation();\n        };\n        if (options.autoClose) {\n            overlay.onclick = overlay.oncontextmenu = stop;\n            overlay.onkeydown = overlay.onkeyup = (ev) => {\n                switch (ev.key) {\n                    case \"Enter\":\n                    case \"Escape\":\n                        stop(ev);\n                        return;\n                }\n                ev.stopPropagation();\n            };\n            overlay.focus();\n        }\n        const modal = IModelApp.makeHTMLElement(\"div\", { parent: overlay, className: \"imodeljs-modal\" });\n        if (undefined !== options.width) {\n            modal.style.width = `${options.width}px`;\n            // allow the dialog to be smaller than the width\n            modal.style.maxWidth = `min(100% - (2 * var(--width-border)), ${options.width}px)`;\n        }\n        if (options.closeBox) {\n            const close = IModelApp.makeHTMLElement(\"p\", { parent: modal, className: \"imodeljs-modal-close\" });\n            close.innerText = \"\\u00d7\"; // unicode \"times\" symbol\n            close.onclick = stop;\n        }\n        return { modal, stop };\n    }\n    /** Make a new Logo Card. Call this method from your implementation of [[IModelApp.applicationLogoCard]]\n     * @param opts Options for Logo Card\n     * @beta\n     */\n    static makeLogoCard(opts) {\n        const card = IModelApp.makeHTMLElement(\"tr\");\n        const iconCell = IModelApp.makeHTMLElement(\"td\", { parent: card, className: \"logo-card-logo\" });\n        if (undefined !== opts.iconSrc) {\n            if (typeof opts.iconSrc === \"string\") {\n                const logo = IModelApp.makeHTMLElement(\"img\");\n                logo.src = opts.iconSrc;\n                logo.width = opts.iconWidth ? opts.iconWidth : 64;\n                opts.iconSrc = logo;\n            }\n            iconCell.appendChild(opts.iconSrc);\n        }\n        const noticeCell = IModelApp.makeHTMLElement(\"td\", { parent: card, className: \"logo-card-message\" });\n        if (undefined !== opts.heading) {\n            if (typeof opts.heading === \"string\")\n                IModelApp.makeHTMLElement(\"h2\", { parent: noticeCell, innerHTML: opts.heading, className: \"logo-card-header\" });\n            else\n                noticeCell.appendChild(opts.heading);\n        }\n        if (undefined !== opts.notice) {\n            if (typeof opts.notice === \"string\")\n                IModelApp.makeHTMLElement(\"p\", { parent: noticeCell, innerHTML: opts.notice, className: \"logo-cards\" });\n            else\n                noticeCell.appendChild(opts.notice);\n        }\n        return card;\n    }\n    /** Make the logo card for the library itself. This card gets placed at the top of the stack.\n     *  @internal\n     */\n    static makeIModelJsLogoCard() {\n        return this.makeLogoCard({\n            iconSrc: `${this.publicPath}images/about-imodeljs.svg`,\n            heading: `<span style=\"font-weight:normal\">${this.localization.getLocalizedString(\"iModelJs:Notices.PoweredBy\")}</span>&nbsp;iTwin.js`,\n            notice: `${ITWINJS_CORE_VERSION}<br>${COPYRIGHT_NOTICE}`,\n        });\n    }\n    /** Format the tooltip strings returned by [[IModelConnection.getToolTipMessage]].\n     * @alpha\n     */\n    static formatElementToolTip(msg) {\n        let out = \"\";\n        msg.forEach((line) => out += `${IModelApp.localization?.getLocalizedKeys(line)}<br>`);\n        const div = document.createElement(\"div\");\n        div.innerHTML = out;\n        return div;\n    }\n    /** Localize an error status\n     * @param status one of the status values from [BentleyStatus]($core-bentley), [IModelStatus]($core-bentley) or [DbResult]($core-bentley)\n     * @returns a localized error message\n     * @beta\n     */\n    static translateStatus(status) {\n        let key;\n        if (typeof status !== \"number\") {\n            key = { scope: \"Errors\", val: \"IllegalValue\" };\n        }\n        else {\n            key = { scope: \"BentleyStatus\", val: BentleyStatus[status] };\n            if (!key.val)\n                key = { scope: \"IModelStatus\", val: IModelStatus[status] };\n            if (!key.val)\n                key = { scope: \"DbResult\", val: DbResult[status] };\n            if (!key.val)\n                key = { scope: \"Errors\", val: \"Status\", status: status.toString() };\n        }\n        return this.localization.getLocalizedString(`iModelJs:${key.scope}.${key.val}`, key);\n    }\n    /**\n     * Creates an instance of the ExtensionAdmin\n     * and registers an event to execute after startup is complete\n     * @returns an instance of ExtensionAdmin\n     */\n    static _createExtensionAdmin() {\n        const extensionAdmin = new ExtensionAdmin();\n        IModelApp.onAfterStartup.addListener(extensionAdmin.onStartup);\n        return extensionAdmin;\n    }\n}\n_a = IModelApp;\nIModelApp._initialized = false;\nIModelApp._wantEventLoop = false;\nIModelApp._animationRequested = false;\nIModelApp._animationInterval = BeDuration.fromSeconds(1);\n/** Event raised just before the frontend IModelApp is to be [[shutdown]]. */\nIModelApp.onBeforeShutdown = new BeEvent();\n/** Event raised after IModelApp [[startup]] completes. */\nIModelApp.onAfterStartup = new BeEvent();\n/** The [[ToolRegistry]] for this session. */\nIModelApp.tools = new ToolRegistry();\n/** The [[TelemetryManager]] for this session\n * @internal\n */\nIModelApp.telemetry = new TelemetryManager();\n/** @alpha */\nIModelApp.extensionAdmin = _a._createExtensionAdmin();\n/** Map of classFullName to EntityState class */\nIModelApp._entityClasses = new Map();\nexport { IModelApp };\n//# sourceMappingURL=IModelApp.js.map",
      "start": 1693508118996,
      "end": 1693508119199,
      "sourcemaps": null
    },
    {
      "name": "vite:define",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module IModelApp\n */\nvar _a;\n/** @public */\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nexport const ITWINJS_CORE_VERSION = require(\"../../package.json\").version; // require resolves from the lib/{cjs,esm} dir\nconst COPYRIGHT_NOTICE = 'Copyright Â© 2017-2023 <a href=\"https://www.bentley.com\" target=\"_blank\" rel=\"noopener noreferrer\">Bentley Systems, Inc.</a>';\nimport { UiAdmin } from \"@itwin/appui-abstract\";\nimport { BeDuration, BeEvent, BentleyStatus, DbResult, dispose, Guid, Logger, ProcessDetector } from \"@itwin/core-bentley\";\nimport { IModelStatus, RpcConfiguration, } from \"@itwin/core-common\";\nimport { ITwinLocalization } from \"@itwin/core-i18n\";\nimport { TelemetryManager } from \"@itwin/core-telemetry\";\nimport { queryRenderCompatibility } from \"@itwin/webgl-compatibility\";\nimport { AccuDraw } from \"./AccuDraw\";\nimport { AccuSnap } from \"./AccuSnap\";\nimport * as auxCoordState from \"./AuxCoordSys\";\nimport * as categorySelectorState from \"./CategorySelectorState\";\nimport { ExtensionAdmin } from \"./extension/ExtensionAdmin\";\nimport * as displayStyleState from \"./DisplayStyleState\";\nimport * as drawingViewState from \"./DrawingViewState\";\nimport { ElementLocateManager } from \"./ElementLocateManager\";\nimport { EntityState } from \"./EntityState\";\nimport { FrontendLoggerCategory } from \"./common/FrontendLoggerCategory\";\nimport * as modelselector from \"./ModelSelectorState\";\nimport * as modelState from \"./ModelState\";\nimport { NotificationManager } from \"./NotificationManager\";\nimport { QuantityFormatter } from \"./quantity-formatting/QuantityFormatter\";\nimport { RenderSystem } from \"./render/RenderSystem\";\nimport { System } from \"./render/webgl/System\";\nimport * as sheetState from \"./SheetViewState\";\nimport * as spatialViewState from \"./SpatialViewState\";\nimport { TentativePoint } from \"./TentativePoint\";\nimport { RealityDataSourceProviderRegistry } from \"./RealityDataSource\";\nimport { MapLayerFormatRegistry, TerrainProviderRegistry, TileAdmin } from \"./tile/internal\";\nimport * as accudrawTool from \"./tools/AccuDrawTool\";\nimport * as clipViewTool from \"./tools/ClipViewTool\";\nimport * as idleTool from \"./tools/IdleTool\";\nimport * as measureTool from \"./tools/MeasureTool\";\nimport * as selectTool from \"./tools/SelectTool\";\nimport { ToolRegistry } from \"./tools/Tool\";\nimport { ToolAdmin } from \"./tools/ToolAdmin\";\nimport * as viewTool from \"./tools/ViewTool\";\nimport { ViewManager } from \"./ViewManager\";\nimport * as viewState from \"./ViewState\";\nimport \"./IModeljs-css\";\n/**\n * Global singleton that connects the user interface with the iTwin.js services. There can be only one IModelApp active in a session. All\n * members of IModelApp are static, and it serves as a singleton object for gaining access to session information.\n *\n * Before any interactive operations may be performed by the `@itwin/core-frontend package`, [[IModelApp.startup]] must be called and awaited.\n * Applications may customize the frontend behavior of iTwin.js by supplying options to [[IModelApp.startup]].\n *\n * @public\n */\nclass IModelApp {\n    // No instances of IModelApp may be created. All members are static and must be on the singleton object IModelApp.\n    constructor() { }\n    /** The [[MapLayerFormatRegistry]] for this session. */\n    static get mapLayerFormatRegistry() { return this._mapLayerFormatRegistry; }\n    /** The [[TerrainProviderRegistry]] for this session. */\n    static get terrainProviderRegistry() { return this._terrainProviderRegistry; }\n    /** The [[RealityDataSourceProviderRegistry]] for this session.\n     * @alpha\n     */\n    static get realityDataSourceProviders() { return this._realityDataSourceProviders; }\n    /** The [[RenderSystem]] for this session. */\n    static get renderSystem() { return this._renderSystem; }\n    /** The [[ViewManager]] for this session. */\n    static get viewManager() { return this._viewManager; }\n    /** The [[NotificationManager]] for this session. */\n    static get notifications() { return this._notifications; }\n    /** The [[TileAdmin]] for this session. */\n    static get tileAdmin() { return this._tileAdmin; }\n    /** The [[QuantityFormatter]] for this session. */\n    static get quantityFormatter() { return this._quantityFormatter; }\n    /** The [[ToolAdmin]] for this session. */\n    static get toolAdmin() { return this._toolAdmin; }\n    /** The [[AccuDraw]] for this session. */\n    static get accuDraw() { return this._accuDraw; }\n    /** The [[AccuSnap]] for this session. */\n    static get accuSnap() { return this._accuSnap; }\n    static get locateManager() { return this._locateManager; }\n    /** The [[TentativePoint]] for this session]]. */\n    static get tentativePoint() { return this._tentativePoint; }\n    /** The [[Localization]] for this session. */\n    static get localization() { return this._localization; }\n    /** The [[UserPreferencesAccess]] for this session.\n     * @beta\n     */\n    static get userPreferences() { return this._userPreferences; }\n    /** The Id of this application. Applications must set this to the Global Product Registry ID (GPRID) for usage logging. */\n    static get applicationId() { return this._applicationId; }\n    /** The version of this application. Must be set for usage logging. */\n    static get applicationVersion() { return this._applicationVersion; }\n    /** True after [[startup]] has been called, until [[shutdown]] is called. */\n    static get initialized() { return this._initialized; }\n    /** Provides access to IModelHub services. */\n    static get hubAccess() { return this._hubAccess; }\n    /** Provides access to the RealityData service implementation for this IModelApp\n     * @beta\n     */\n    static get realityDataAccess() { return this._realityDataAccess; }\n    /** Whether the [renderSystem[]] has been successfully initialized.\n     * This will always be `false` before calling [[startup]] and after calling [[shutdown]].\n     * In rare circumstances (e.g., while executing in a headless test environment) it may remain `false` due to a failure to\n     * obtain a [WebGL rendering context](https://www.google.com/search?channel=fs&client=ubuntu-sn&q=mdn+webglrenderingcontext).\n     * As long as you have called [[startup]], you can generally assume it to be `true`.\n     */\n    static get hasRenderSystem() {\n        return this._renderSystem !== undefined && this._renderSystem.isValid;\n    }\n    /** The [[UiAdmin]] for this session. */\n    static get uiAdmin() { return this._uiAdmin; }\n    /** The requested security options for the frontend. */\n    static get securityOptions() { return this._securityOptions; }\n    /** The root URL for the assets 'public' folder.\n     * @beta\n     */\n    static get publicPath() { return this._publicPath; }\n    /** Register all of the subclasses of EntityState from a module.\n     * @internal\n     */\n    static registerModuleEntities(moduleObj) {\n        for (const thisMember in moduleObj) { // eslint-disable-line guard-for-in\n            const thisEntityState = moduleObj[thisMember];\n            if (thisEntityState.prototype instanceof EntityState) {\n                this.registerEntityState(thisEntityState.classFullName, thisEntityState);\n            }\n        }\n    }\n    /** Register an EntityState class by its classFullName\n     * @internal\n     */\n    static registerEntityState(classFullName, classType) {\n        const lowerName = classFullName.toLowerCase();\n        if (this._entityClasses.has(lowerName)) {\n            const errMsg = `Class ${classFullName} is already registered. Make sure static schemaName and className members are correct on class ${classType.name}`;\n            Logger.logError(FrontendLoggerCategory.IModelConnection, errMsg);\n            throw new Error(errMsg);\n        }\n        this._entityClasses.set(lowerName, classType);\n    }\n    /** @internal */\n    static lookupEntityClass(classFullName) { return this._entityClasses.get(classFullName.toLowerCase()); }\n    /**\n     * Obtain WebGL rendering compatibility information for the client system.  This information describes whether the client meets the\n     * minimum rendering capabilities.  It also describes whether the system lacks any optional capabilities that could improve quality\n     * and/or performance.\n     * @note As of 4.x, iTwin.js requires WebGL 2. If the client does not support WebGL 2, the `status` field of the returned compatibility info will be [WebGLRenderCompatibilityStatus.CannotCreateContext]($webgl-compatibility).\n     */\n    static queryRenderCompatibility() {\n        return queryRenderCompatibility(true, (canvas, useWebGL2, inputContextAttributes) => System.createContext(canvas, useWebGL2, inputContextAttributes));\n    }\n    /**\n     * This method must be called before any other `@itwin/core-frontend` methods are used.\n     * Somewhere in your startup code, call [[IModelApp.startup]]. E.g.:\n     * ``` ts\n     * await IModelApp.startup( {applicationId: myAppId} );\n     * ```\n     * @param opts The options for configuring IModelApp\n     */\n    static async startup(opts) {\n        if (this._initialized)\n            return; // we're already initialized, do nothing.\n        this._initialized = true;\n        opts = opts ?? {};\n        this._securityOptions = opts.security ?? {};\n        if (\"development\" === \"development\") {\n            // Make IModelApp globally accessible for debugging purposes. We'll remove it on shutdown.\n            window.iModelAppForDebugger = this;\n        }\n        this.sessionId = opts.sessionId ?? Guid.createValue();\n        this._applicationId = opts.applicationId ?? \"2686\"; // Default to product id of iTwin.js\n        this._applicationVersion = opts.applicationVersion ?? \"1.0.0\";\n        this.authorizationClient = opts.authorizationClient;\n        this._hubAccess = opts.hubAccess;\n        this._noRender = opts.noRender ?? false;\n        this._setupRpcRequestContext();\n        this._localization = opts.localization ?? new ITwinLocalization();\n        const toolsNs = \"CoreTools\";\n        await this.localization.initialize([\"iModelJs\", toolsNs]);\n        [\n            selectTool,\n            idleTool,\n            viewTool,\n            clipViewTool,\n            measureTool,\n            accudrawTool,\n        ].forEach((tool) => this.tools.registerModule(tool, toolsNs));\n        this.registerEntityState(EntityState.classFullName, EntityState);\n        [\n            modelState,\n            sheetState,\n            viewState,\n            drawingViewState,\n            spatialViewState,\n            displayStyleState,\n            modelselector,\n            categorySelectorState,\n            auxCoordState,\n        ].forEach((module) => this.registerModuleEntities(module));\n        this._renderSystem = (opts.renderSys instanceof RenderSystem) ? opts.renderSys : this.createRenderSys(opts.renderSys);\n        if (opts.userPreferences)\n            this._userPreferences = opts.userPreferences;\n        this._viewManager = opts.viewManager ?? new ViewManager();\n        this._tileAdmin = await TileAdmin.create(opts.tileAdmin);\n        this._notifications = opts.notifications ?? new NotificationManager();\n        this._toolAdmin = opts.toolAdmin ?? new ToolAdmin();\n        this._accuDraw = opts.accuDraw ?? new AccuDraw();\n        this._accuSnap = opts.accuSnap ?? new AccuSnap();\n        this._locateManager = opts.locateManager ?? new ElementLocateManager();\n        this._tentativePoint = opts.tentativePoint ?? new TentativePoint();\n        this._quantityFormatter = opts.quantityFormatter ?? new QuantityFormatter();\n        this._uiAdmin = opts.uiAdmin ?? new UiAdmin();\n        this._mapLayerFormatRegistry = new MapLayerFormatRegistry(opts.mapLayerOptions);\n        this._terrainProviderRegistry = new TerrainProviderRegistry();\n        this._realityDataSourceProviders = new RealityDataSourceProviderRegistry();\n        this._realityDataAccess = opts.realityDataAccess;\n        this._publicPath = opts.publicPath ?? \"\";\n        [\n            this.renderSystem,\n            this.viewManager,\n            this.toolAdmin,\n            this.accuDraw,\n            this.accuSnap,\n            this.locateManager,\n            this.tentativePoint,\n            this.uiAdmin,\n        ].forEach((sys) => sys.onInitialized());\n        await this.quantityFormatter.onInitialized();\n        this.onAfterStartup.raiseEvent();\n    }\n    /** Must be called before the application exits to release any held resources. */\n    static async shutdown() {\n        if (!this._initialized)\n            return;\n        // notify listeners that this IModelApp is about to be shut down.\n        this.onBeforeShutdown.raiseEvent();\n        this.onBeforeShutdown.clear();\n        if (\"development\" === \"development\") {\n            window.iModelAppForDebugger = undefined;\n        }\n        this._wantEventLoop = false;\n        window.removeEventListener(\"resize\", () => IModelApp.requestNextAnimation());\n        this.clearIntervalAnimation();\n        [this.toolAdmin, this.viewManager, this.tileAdmin].forEach((sys) => sys.onShutDown());\n        this.tools.shutdown();\n        this._renderSystem = dispose(this._renderSystem);\n        this._entityClasses.clear();\n        this.authorizationClient = undefined;\n        this._initialized = false;\n        this.onAfterStartup.clear();\n    }\n    /** Controls how frequently the application polls for changes that may require a new animation frame to be requested.\n     * Such changes include resizing a Viewport or changing the device pixel ratio by zooming in or out in the browser.\n     * The default interval is 1 second. It may be desirable to override the default for specific apps and/or devices.\n     *  - Increasing the interval can conserve battery life on battery-powered devices at the expense of slower response to resize events.\n     *  - An application that only displays a single Viewport whose dimensions only change when the dimensions of the application window change, and which does not support changing application zoom level, could disable the interval altogether.\n     * @param interval The interval at which to poll for changes. If undefined (or negative), the application will never poll. If zero, the application will poll as frequently as possible.\n     * @beta\n     */\n    static get animationInterval() { return IModelApp._animationInterval; }\n    static set animationInterval(interval) {\n        if (undefined !== interval && interval.isTowardsPast)\n            interval = undefined;\n        if (interval !== IModelApp._animationInterval) {\n            IModelApp._animationInterval = interval;\n            if (IModelApp._wantEventLoop)\n                IModelApp.requestIntervalAnimation();\n        }\n    }\n    /** Request that the event loop execute on the next [animation frame](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame).\n     * There is generally no reason for applications to invoke this method directly.\n     */\n    static requestNextAnimation() {\n        // Only want to call requestAnimationFrame if it is defined. Need to check whether current iModelApp is a NoRenderApp.\n        if (IModelApp._noRender)\n            return;\n        if (!IModelApp._animationRequested) {\n            IModelApp._animationRequested = true;\n            requestAnimationFrame(() => IModelApp.eventLoop());\n        }\n    }\n    /** @internal */\n    static clearIntervalAnimation() {\n        if (undefined !== IModelApp._animationIntervalId) {\n            window.clearInterval(IModelApp._animationIntervalId);\n            IModelApp._animationIntervalId = undefined;\n        }\n    }\n    /** @internal */\n    static requestIntervalAnimation() {\n        IModelApp.clearIntervalAnimation();\n        if (undefined !== IModelApp.animationInterval)\n            IModelApp._animationIntervalId = window.setInterval(() => {\n                IModelApp.requestNextAnimation();\n            }, IModelApp.animationInterval.milliseconds);\n    }\n    /** @internal */\n    static startEventLoop() {\n        if (!IModelApp._wantEventLoop) {\n            IModelApp._wantEventLoop = true;\n            window.addEventListener(\"resize\", () => IModelApp.requestNextAnimation());\n            IModelApp.requestIntervalAnimation();\n            IModelApp.requestNextAnimation();\n        }\n    }\n    /** Strictly for tests. @internal */\n    static stopEventLoop() {\n        this._wantEventLoop = false;\n    }\n    /** The main event processing loop for Tools and rendering. */\n    static eventLoop() {\n        IModelApp._animationRequested = false;\n        if (!IModelApp._wantEventLoop) // flag turned on at startup\n            return;\n        try {\n            IModelApp.toolAdmin.processEvent(); // eslint-disable-line @typescript-eslint/no-floating-promises\n            IModelApp.viewManager.renderLoop();\n            IModelApp.tileAdmin.process();\n        }\n        catch (exception) {\n            ToolAdmin.exceptionHandler(exception); // eslint-disable-line @typescript-eslint/no-floating-promises\n            IModelApp._wantEventLoop = false;\n            IModelApp._animationRequested = true; // unrecoverable after exception, don't request any further frames.\n            window.removeEventListener(\"resize\", () => IModelApp.requestNextAnimation());\n        }\n    }\n    /** Get the user's access token for this IModelApp, or a blank string if none is available.\n     * @note Access tokens expire periodically and are automatically refreshed, if possible. Therefore tokens should not be saved, and the value\n     * returned by this method may change over time throughout the course of a session.\n     */\n    static async getAccessToken() {\n        try {\n            return (await this.authorizationClient?.getAccessToken()) ?? \"\";\n        }\n        catch (e) {\n            return \"\";\n        }\n    }\n    /** @internal */\n    static createRenderSys(opts) { return System.create(opts); }\n    static _setupRpcRequestContext() {\n        RpcConfiguration.requestContext.getId = (_request) => {\n            return Guid.createValue();\n        };\n        RpcConfiguration.requestContext.serialize = async (_request) => {\n            const id = _request.id;\n            const serialized = {\n                id,\n                applicationId: this.applicationId,\n                applicationVersion: this.applicationVersion,\n                sessionId: this.sessionId,\n                authorization: ProcessDetector.isMobileAppFrontend ? \"\" : await this.getAccessToken(),\n            };\n            const csrf = IModelApp.securityOptions.csrfProtection;\n            if (csrf && csrf.enabled) {\n                const cookieName = csrf.cookieName || \"XSRF-TOKEN\";\n                const cookieValue = document.cookie.split(\"; \").find((r) => r.startsWith(`${cookieName}=`));\n                if (cookieValue) {\n                    const headerName = csrf.headerName || \"X-XSRF-TOKEN\";\n                    const headerValue = cookieValue.split(\"=\")[1];\n                    serialized.csrfToken = { headerName, headerValue };\n                }\n            }\n            return serialized;\n        };\n    }\n    /** Shortcut for creating an HTMLElement with optional parent, className, id, innerHTML, innerText. */\n    static makeHTMLElement(type, opt) {\n        const el = document.createElement(type);\n        if (undefined !== opt) {\n            if (undefined !== opt.className)\n                el.className = opt.className;\n            if (undefined !== opt.id)\n                el.id = opt.id;\n            if (undefined !== opt.innerHTML)\n                el.innerHTML = opt.innerHTML;\n            if (undefined !== opt.innerText)\n                el.innerText = opt.innerText;\n            if (undefined !== opt.parent)\n                opt.parent.appendChild(el);\n        }\n        return el;\n    }\n    /** Shortcut for making a modal dialog on top of the root of the application. The returned HTMLDivElement will be placed topmost, all other application\n     * windows will be covered with a semi-transparent background that intercepts all key/mouse/touch events until the modal is dismissed.\n     * @param options The options that describe how the modal should work.\n     */\n    static makeModalDiv(options) {\n        const root = options.rootDiv ? options.rootDiv : document.body;\n        // create the overlay div to \"black out\" the application to indicate everything is inactive until the modal has been dismissed.\n        const overlay = IModelApp.makeHTMLElement(\"div\", { parent: root, className: \"imodeljs-modal-overlay\" });\n        overlay.tabIndex = -1; // so we can catch keystroke events\n        // function to remove modal dialog\n        const stop = (ev) => {\n            root.removeChild(overlay);\n            ev.stopPropagation();\n        };\n        if (options.autoClose) {\n            overlay.onclick = overlay.oncontextmenu = stop;\n            overlay.onkeydown = overlay.onkeyup = (ev) => {\n                switch (ev.key) {\n                    case \"Enter\":\n                    case \"Escape\":\n                        stop(ev);\n                        return;\n                }\n                ev.stopPropagation();\n            };\n            overlay.focus();\n        }\n        const modal = IModelApp.makeHTMLElement(\"div\", { parent: overlay, className: \"imodeljs-modal\" });\n        if (undefined !== options.width) {\n            modal.style.width = `${options.width}px`;\n            // allow the dialog to be smaller than the width\n            modal.style.maxWidth = `min(100% - (2 * var(--width-border)), ${options.width}px)`;\n        }\n        if (options.closeBox) {\n            const close = IModelApp.makeHTMLElement(\"p\", { parent: modal, className: \"imodeljs-modal-close\" });\n            close.innerText = \"\\u00d7\"; // unicode \"times\" symbol\n            close.onclick = stop;\n        }\n        return { modal, stop };\n    }\n    /** Make a new Logo Card. Call this method from your implementation of [[IModelApp.applicationLogoCard]]\n     * @param opts Options for Logo Card\n     * @beta\n     */\n    static makeLogoCard(opts) {\n        const card = IModelApp.makeHTMLElement(\"tr\");\n        const iconCell = IModelApp.makeHTMLElement(\"td\", { parent: card, className: \"logo-card-logo\" });\n        if (undefined !== opts.iconSrc) {\n            if (typeof opts.iconSrc === \"string\") {\n                const logo = IModelApp.makeHTMLElement(\"img\");\n                logo.src = opts.iconSrc;\n                logo.width = opts.iconWidth ? opts.iconWidth : 64;\n                opts.iconSrc = logo;\n            }\n            iconCell.appendChild(opts.iconSrc);\n        }\n        const noticeCell = IModelApp.makeHTMLElement(\"td\", { parent: card, className: \"logo-card-message\" });\n        if (undefined !== opts.heading) {\n            if (typeof opts.heading === \"string\")\n                IModelApp.makeHTMLElement(\"h2\", { parent: noticeCell, innerHTML: opts.heading, className: \"logo-card-header\" });\n            else\n                noticeCell.appendChild(opts.heading);\n        }\n        if (undefined !== opts.notice) {\n            if (typeof opts.notice === \"string\")\n                IModelApp.makeHTMLElement(\"p\", { parent: noticeCell, innerHTML: opts.notice, className: \"logo-cards\" });\n            else\n                noticeCell.appendChild(opts.notice);\n        }\n        return card;\n    }\n    /** Make the logo card for the library itself. This card gets placed at the top of the stack.\n     *  @internal\n     */\n    static makeIModelJsLogoCard() {\n        return this.makeLogoCard({\n            iconSrc: `${this.publicPath}images/about-imodeljs.svg`,\n            heading: `<span style=\"font-weight:normal\">${this.localization.getLocalizedString(\"iModelJs:Notices.PoweredBy\")}</span>&nbsp;iTwin.js`,\n            notice: `${ITWINJS_CORE_VERSION}<br>${COPYRIGHT_NOTICE}`,\n        });\n    }\n    /** Format the tooltip strings returned by [[IModelConnection.getToolTipMessage]].\n     * @alpha\n     */\n    static formatElementToolTip(msg) {\n        let out = \"\";\n        msg.forEach((line) => out += `${IModelApp.localization?.getLocalizedKeys(line)}<br>`);\n        const div = document.createElement(\"div\");\n        div.innerHTML = out;\n        return div;\n    }\n    /** Localize an error status\n     * @param status one of the status values from [BentleyStatus]($core-bentley), [IModelStatus]($core-bentley) or [DbResult]($core-bentley)\n     * @returns a localized error message\n     * @beta\n     */\n    static translateStatus(status) {\n        let key;\n        if (typeof status !== \"number\") {\n            key = { scope: \"Errors\", val: \"IllegalValue\" };\n        }\n        else {\n            key = { scope: \"BentleyStatus\", val: BentleyStatus[status] };\n            if (!key.val)\n                key = { scope: \"IModelStatus\", val: IModelStatus[status] };\n            if (!key.val)\n                key = { scope: \"DbResult\", val: DbResult[status] };\n            if (!key.val)\n                key = { scope: \"Errors\", val: \"Status\", status: status.toString() };\n        }\n        return this.localization.getLocalizedString(`iModelJs:${key.scope}.${key.val}`, key);\n    }\n    /**\n     * Creates an instance of the ExtensionAdmin\n     * and registers an event to execute after startup is complete\n     * @returns an instance of ExtensionAdmin\n     */\n    static _createExtensionAdmin() {\n        const extensionAdmin = new ExtensionAdmin();\n        IModelApp.onAfterStartup.addListener(extensionAdmin.onStartup);\n        return extensionAdmin;\n    }\n}\n_a = IModelApp;\nIModelApp._initialized = false;\nIModelApp._wantEventLoop = false;\nIModelApp._animationRequested = false;\nIModelApp._animationInterval = BeDuration.fromSeconds(1);\n/** Event raised just before the frontend IModelApp is to be [[shutdown]]. */\nIModelApp.onBeforeShutdown = new BeEvent();\n/** Event raised after IModelApp [[startup]] completes. */\nIModelApp.onAfterStartup = new BeEvent();\n/** The [[ToolRegistry]] for this session. */\nIModelApp.tools = new ToolRegistry();\n/** The [[TelemetryManager]] for this session\n * @internal\n */\nIModelApp.telemetry = new TelemetryManager();\n/** @alpha */\nIModelApp.extensionAdmin = _a._createExtensionAdmin();\n/** Map of classFullName to EntityState class */\nIModelApp._entityClasses = new Map();\nexport { IModelApp };\n//# sourceMappingURL=IModelApp.js.map",
      "start": 1693508119199,
      "end": 1693508119199,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "commonjs",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000D:/hub2023A/itwinjs-core/core/frontend/package.json?commonjs-proxy\";\n\n/** @packageDocumentation\n * @module IModelApp\n */\nvar _a;\n/** @public */\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nexport const ITWINJS_CORE_VERSION = require$$0.version; // require resolves from the lib/{cjs,esm} dir\nconst COPYRIGHT_NOTICE = 'Copyright Â© 2017-2023 <a href=\"https://www.bentley.com\" target=\"_blank\" rel=\"noopener noreferrer\">Bentley Systems, Inc.</a>';\nimport { UiAdmin } from \"@itwin/appui-abstract\";\nimport { BeDuration, BeEvent, BentleyStatus, DbResult, dispose, Guid, Logger, ProcessDetector } from \"@itwin/core-bentley\";\nimport { IModelStatus, RpcConfiguration, } from \"@itwin/core-common\";\nimport { ITwinLocalization } from \"@itwin/core-i18n\";\nimport { TelemetryManager } from \"@itwin/core-telemetry\";\nimport { queryRenderCompatibility } from \"@itwin/webgl-compatibility\";\nimport { AccuDraw } from \"./AccuDraw\";\nimport { AccuSnap } from \"./AccuSnap\";\nimport * as auxCoordState from \"./AuxCoordSys\";\nimport * as categorySelectorState from \"./CategorySelectorState\";\nimport { ExtensionAdmin } from \"./extension/ExtensionAdmin\";\nimport * as displayStyleState from \"./DisplayStyleState\";\nimport * as drawingViewState from \"./DrawingViewState\";\nimport { ElementLocateManager } from \"./ElementLocateManager\";\nimport { EntityState } from \"./EntityState\";\nimport { FrontendLoggerCategory } from \"./common/FrontendLoggerCategory\";\nimport * as modelselector from \"./ModelSelectorState\";\nimport * as modelState from \"./ModelState\";\nimport { NotificationManager } from \"./NotificationManager\";\nimport { QuantityFormatter } from \"./quantity-formatting/QuantityFormatter\";\nimport { RenderSystem } from \"./render/RenderSystem\";\nimport { System } from \"./render/webgl/System\";\nimport * as sheetState from \"./SheetViewState\";\nimport * as spatialViewState from \"./SpatialViewState\";\nimport { TentativePoint } from \"./TentativePoint\";\nimport { RealityDataSourceProviderRegistry } from \"./RealityDataSource\";\nimport { MapLayerFormatRegistry, TerrainProviderRegistry, TileAdmin } from \"./tile/internal\";\nimport * as accudrawTool from \"./tools/AccuDrawTool\";\nimport * as clipViewTool from \"./tools/ClipViewTool\";\nimport * as idleTool from \"./tools/IdleTool\";\nimport * as measureTool from \"./tools/MeasureTool\";\nimport * as selectTool from \"./tools/SelectTool\";\nimport { ToolRegistry } from \"./tools/Tool\";\nimport { ToolAdmin } from \"./tools/ToolAdmin\";\nimport * as viewTool from \"./tools/ViewTool\";\nimport { ViewManager } from \"./ViewManager\";\nimport * as viewState from \"./ViewState\";\nimport \"./IModeljs-css\";\n/**\n * Global singleton that connects the user interface with the iTwin.js services. There can be only one IModelApp active in a session. All\n * members of IModelApp are static, and it serves as a singleton object for gaining access to session information.\n *\n * Before any interactive operations may be performed by the `@itwin/core-frontend package`, [[IModelApp.startup]] must be called and awaited.\n * Applications may customize the frontend behavior of iTwin.js by supplying options to [[IModelApp.startup]].\n *\n * @public\n */\nclass IModelApp {\n    // No instances of IModelApp may be created. All members are static and must be on the singleton object IModelApp.\n    constructor() { }\n    /** The [[MapLayerFormatRegistry]] for this session. */\n    static get mapLayerFormatRegistry() { return this._mapLayerFormatRegistry; }\n    /** The [[TerrainProviderRegistry]] for this session. */\n    static get terrainProviderRegistry() { return this._terrainProviderRegistry; }\n    /** The [[RealityDataSourceProviderRegistry]] for this session.\n     * @alpha\n     */\n    static get realityDataSourceProviders() { return this._realityDataSourceProviders; }\n    /** The [[RenderSystem]] for this session. */\n    static get renderSystem() { return this._renderSystem; }\n    /** The [[ViewManager]] for this session. */\n    static get viewManager() { return this._viewManager; }\n    /** The [[NotificationManager]] for this session. */\n    static get notifications() { return this._notifications; }\n    /** The [[TileAdmin]] for this session. */\n    static get tileAdmin() { return this._tileAdmin; }\n    /** The [[QuantityFormatter]] for this session. */\n    static get quantityFormatter() { return this._quantityFormatter; }\n    /** The [[ToolAdmin]] for this session. */\n    static get toolAdmin() { return this._toolAdmin; }\n    /** The [[AccuDraw]] for this session. */\n    static get accuDraw() { return this._accuDraw; }\n    /** The [[AccuSnap]] for this session. */\n    static get accuSnap() { return this._accuSnap; }\n    static get locateManager() { return this._locateManager; }\n    /** The [[TentativePoint]] for this session]]. */\n    static get tentativePoint() { return this._tentativePoint; }\n    /** The [[Localization]] for this session. */\n    static get localization() { return this._localization; }\n    /** The [[UserPreferencesAccess]] for this session.\n     * @beta\n     */\n    static get userPreferences() { return this._userPreferences; }\n    /** The Id of this application. Applications must set this to the Global Product Registry ID (GPRID) for usage logging. */\n    static get applicationId() { return this._applicationId; }\n    /** The version of this application. Must be set for usage logging. */\n    static get applicationVersion() { return this._applicationVersion; }\n    /** True after [[startup]] has been called, until [[shutdown]] is called. */\n    static get initialized() { return this._initialized; }\n    /** Provides access to IModelHub services. */\n    static get hubAccess() { return this._hubAccess; }\n    /** Provides access to the RealityData service implementation for this IModelApp\n     * @beta\n     */\n    static get realityDataAccess() { return this._realityDataAccess; }\n    /** Whether the [renderSystem[]] has been successfully initialized.\n     * This will always be `false` before calling [[startup]] and after calling [[shutdown]].\n     * In rare circumstances (e.g., while executing in a headless test environment) it may remain `false` due to a failure to\n     * obtain a [WebGL rendering context](https://www.google.com/search?channel=fs&client=ubuntu-sn&q=mdn+webglrenderingcontext).\n     * As long as you have called [[startup]], you can generally assume it to be `true`.\n     */\n    static get hasRenderSystem() {\n        return this._renderSystem !== undefined && this._renderSystem.isValid;\n    }\n    /** The [[UiAdmin]] for this session. */\n    static get uiAdmin() { return this._uiAdmin; }\n    /** The requested security options for the frontend. */\n    static get securityOptions() { return this._securityOptions; }\n    /** The root URL for the assets 'public' folder.\n     * @beta\n     */\n    static get publicPath() { return this._publicPath; }\n    /** Register all of the subclasses of EntityState from a module.\n     * @internal\n     */\n    static registerModuleEntities(moduleObj) {\n        for (const thisMember in moduleObj) { // eslint-disable-line guard-for-in\n            const thisEntityState = moduleObj[thisMember];\n            if (thisEntityState.prototype instanceof EntityState) {\n                this.registerEntityState(thisEntityState.classFullName, thisEntityState);\n            }\n        }\n    }\n    /** Register an EntityState class by its classFullName\n     * @internal\n     */\n    static registerEntityState(classFullName, classType) {\n        const lowerName = classFullName.toLowerCase();\n        if (this._entityClasses.has(lowerName)) {\n            const errMsg = `Class ${classFullName} is already registered. Make sure static schemaName and className members are correct on class ${classType.name}`;\n            Logger.logError(FrontendLoggerCategory.IModelConnection, errMsg);\n            throw new Error(errMsg);\n        }\n        this._entityClasses.set(lowerName, classType);\n    }\n    /** @internal */\n    static lookupEntityClass(classFullName) { return this._entityClasses.get(classFullName.toLowerCase()); }\n    /**\n     * Obtain WebGL rendering compatibility information for the client system.  This information describes whether the client meets the\n     * minimum rendering capabilities.  It also describes whether the system lacks any optional capabilities that could improve quality\n     * and/or performance.\n     * @note As of 4.x, iTwin.js requires WebGL 2. If the client does not support WebGL 2, the `status` field of the returned compatibility info will be [WebGLRenderCompatibilityStatus.CannotCreateContext]($webgl-compatibility).\n     */\n    static queryRenderCompatibility() {\n        return queryRenderCompatibility(true, (canvas, useWebGL2, inputContextAttributes) => System.createContext(canvas, useWebGL2, inputContextAttributes));\n    }\n    /**\n     * This method must be called before any other `@itwin/core-frontend` methods are used.\n     * Somewhere in your startup code, call [[IModelApp.startup]]. E.g.:\n     * ``` ts\n     * await IModelApp.startup( {applicationId: myAppId} );\n     * ```\n     * @param opts The options for configuring IModelApp\n     */\n    static async startup(opts) {\n        if (this._initialized)\n            return; // we're already initialized, do nothing.\n        this._initialized = true;\n        opts = opts ?? {};\n        this._securityOptions = opts.security ?? {};\n        if (\"development\" === \"development\") {\n            // Make IModelApp globally accessible for debugging purposes. We'll remove it on shutdown.\n            window.iModelAppForDebugger = this;\n        }\n        this.sessionId = opts.sessionId ?? Guid.createValue();\n        this._applicationId = opts.applicationId ?? \"2686\"; // Default to product id of iTwin.js\n        this._applicationVersion = opts.applicationVersion ?? \"1.0.0\";\n        this.authorizationClient = opts.authorizationClient;\n        this._hubAccess = opts.hubAccess;\n        this._noRender = opts.noRender ?? false;\n        this._setupRpcRequestContext();\n        this._localization = opts.localization ?? new ITwinLocalization();\n        const toolsNs = \"CoreTools\";\n        await this.localization.initialize([\"iModelJs\", toolsNs]);\n        [\n            selectTool,\n            idleTool,\n            viewTool,\n            clipViewTool,\n            measureTool,\n            accudrawTool,\n        ].forEach((tool) => this.tools.registerModule(tool, toolsNs));\n        this.registerEntityState(EntityState.classFullName, EntityState);\n        [\n            modelState,\n            sheetState,\n            viewState,\n            drawingViewState,\n            spatialViewState,\n            displayStyleState,\n            modelselector,\n            categorySelectorState,\n            auxCoordState,\n        ].forEach((module) => this.registerModuleEntities(module));\n        this._renderSystem = (opts.renderSys instanceof RenderSystem) ? opts.renderSys : this.createRenderSys(opts.renderSys);\n        if (opts.userPreferences)\n            this._userPreferences = opts.userPreferences;\n        this._viewManager = opts.viewManager ?? new ViewManager();\n        this._tileAdmin = await TileAdmin.create(opts.tileAdmin);\n        this._notifications = opts.notifications ?? new NotificationManager();\n        this._toolAdmin = opts.toolAdmin ?? new ToolAdmin();\n        this._accuDraw = opts.accuDraw ?? new AccuDraw();\n        this._accuSnap = opts.accuSnap ?? new AccuSnap();\n        this._locateManager = opts.locateManager ?? new ElementLocateManager();\n        this._tentativePoint = opts.tentativePoint ?? new TentativePoint();\n        this._quantityFormatter = opts.quantityFormatter ?? new QuantityFormatter();\n        this._uiAdmin = opts.uiAdmin ?? new UiAdmin();\n        this._mapLayerFormatRegistry = new MapLayerFormatRegistry(opts.mapLayerOptions);\n        this._terrainProviderRegistry = new TerrainProviderRegistry();\n        this._realityDataSourceProviders = new RealityDataSourceProviderRegistry();\n        this._realityDataAccess = opts.realityDataAccess;\n        this._publicPath = opts.publicPath ?? \"\";\n        [\n            this.renderSystem,\n            this.viewManager,\n            this.toolAdmin,\n            this.accuDraw,\n            this.accuSnap,\n            this.locateManager,\n            this.tentativePoint,\n            this.uiAdmin,\n        ].forEach((sys) => sys.onInitialized());\n        await this.quantityFormatter.onInitialized();\n        this.onAfterStartup.raiseEvent();\n    }\n    /** Must be called before the application exits to release any held resources. */\n    static async shutdown() {\n        if (!this._initialized)\n            return;\n        // notify listeners that this IModelApp is about to be shut down.\n        this.onBeforeShutdown.raiseEvent();\n        this.onBeforeShutdown.clear();\n        if (\"development\" === \"development\") {\n            window.iModelAppForDebugger = undefined;\n        }\n        this._wantEventLoop = false;\n        window.removeEventListener(\"resize\", () => IModelApp.requestNextAnimation());\n        this.clearIntervalAnimation();\n        [this.toolAdmin, this.viewManager, this.tileAdmin].forEach((sys) => sys.onShutDown());\n        this.tools.shutdown();\n        this._renderSystem = dispose(this._renderSystem);\n        this._entityClasses.clear();\n        this.authorizationClient = undefined;\n        this._initialized = false;\n        this.onAfterStartup.clear();\n    }\n    /** Controls how frequently the application polls for changes that may require a new animation frame to be requested.\n     * Such changes include resizing a Viewport or changing the device pixel ratio by zooming in or out in the browser.\n     * The default interval is 1 second. It may be desirable to override the default for specific apps and/or devices.\n     *  - Increasing the interval can conserve battery life on battery-powered devices at the expense of slower response to resize events.\n     *  - An application that only displays a single Viewport whose dimensions only change when the dimensions of the application window change, and which does not support changing application zoom level, could disable the interval altogether.\n     * @param interval The interval at which to poll for changes. If undefined (or negative), the application will never poll. If zero, the application will poll as frequently as possible.\n     * @beta\n     */\n    static get animationInterval() { return IModelApp._animationInterval; }\n    static set animationInterval(interval) {\n        if (undefined !== interval && interval.isTowardsPast)\n            interval = undefined;\n        if (interval !== IModelApp._animationInterval) {\n            IModelApp._animationInterval = interval;\n            if (IModelApp._wantEventLoop)\n                IModelApp.requestIntervalAnimation();\n        }\n    }\n    /** Request that the event loop execute on the next [animation frame](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame).\n     * There is generally no reason for applications to invoke this method directly.\n     */\n    static requestNextAnimation() {\n        // Only want to call requestAnimationFrame if it is defined. Need to check whether current iModelApp is a NoRenderApp.\n        if (IModelApp._noRender)\n            return;\n        if (!IModelApp._animationRequested) {\n            IModelApp._animationRequested = true;\n            requestAnimationFrame(() => IModelApp.eventLoop());\n        }\n    }\n    /** @internal */\n    static clearIntervalAnimation() {\n        if (undefined !== IModelApp._animationIntervalId) {\n            window.clearInterval(IModelApp._animationIntervalId);\n            IModelApp._animationIntervalId = undefined;\n        }\n    }\n    /** @internal */\n    static requestIntervalAnimation() {\n        IModelApp.clearIntervalAnimation();\n        if (undefined !== IModelApp.animationInterval)\n            IModelApp._animationIntervalId = window.setInterval(() => {\n                IModelApp.requestNextAnimation();\n            }, IModelApp.animationInterval.milliseconds);\n    }\n    /** @internal */\n    static startEventLoop() {\n        if (!IModelApp._wantEventLoop) {\n            IModelApp._wantEventLoop = true;\n            window.addEventListener(\"resize\", () => IModelApp.requestNextAnimation());\n            IModelApp.requestIntervalAnimation();\n            IModelApp.requestNextAnimation();\n        }\n    }\n    /** Strictly for tests. @internal */\n    static stopEventLoop() {\n        this._wantEventLoop = false;\n    }\n    /** The main event processing loop for Tools and rendering. */\n    static eventLoop() {\n        IModelApp._animationRequested = false;\n        if (!IModelApp._wantEventLoop) // flag turned on at startup\n            return;\n        try {\n            IModelApp.toolAdmin.processEvent(); // eslint-disable-line @typescript-eslint/no-floating-promises\n            IModelApp.viewManager.renderLoop();\n            IModelApp.tileAdmin.process();\n        }\n        catch (exception) {\n            ToolAdmin.exceptionHandler(exception); // eslint-disable-line @typescript-eslint/no-floating-promises\n            IModelApp._wantEventLoop = false;\n            IModelApp._animationRequested = true; // unrecoverable after exception, don't request any further frames.\n            window.removeEventListener(\"resize\", () => IModelApp.requestNextAnimation());\n        }\n    }\n    /** Get the user's access token for this IModelApp, or a blank string if none is available.\n     * @note Access tokens expire periodically and are automatically refreshed, if possible. Therefore tokens should not be saved, and the value\n     * returned by this method may change over time throughout the course of a session.\n     */\n    static async getAccessToken() {\n        try {\n            return (await this.authorizationClient?.getAccessToken()) ?? \"\";\n        }\n        catch (e) {\n            return \"\";\n        }\n    }\n    /** @internal */\n    static createRenderSys(opts) { return System.create(opts); }\n    static _setupRpcRequestContext() {\n        RpcConfiguration.requestContext.getId = (_request) => {\n            return Guid.createValue();\n        };\n        RpcConfiguration.requestContext.serialize = async (_request) => {\n            const id = _request.id;\n            const serialized = {\n                id,\n                applicationId: this.applicationId,\n                applicationVersion: this.applicationVersion,\n                sessionId: this.sessionId,\n                authorization: ProcessDetector.isMobileAppFrontend ? \"\" : await this.getAccessToken(),\n            };\n            const csrf = IModelApp.securityOptions.csrfProtection;\n            if (csrf && csrf.enabled) {\n                const cookieName = csrf.cookieName || \"XSRF-TOKEN\";\n                const cookieValue = document.cookie.split(\"; \").find((r) => r.startsWith(`${cookieName}=`));\n                if (cookieValue) {\n                    const headerName = csrf.headerName || \"X-XSRF-TOKEN\";\n                    const headerValue = cookieValue.split(\"=\")[1];\n                    serialized.csrfToken = { headerName, headerValue };\n                }\n            }\n            return serialized;\n        };\n    }\n    /** Shortcut for creating an HTMLElement with optional parent, className, id, innerHTML, innerText. */\n    static makeHTMLElement(type, opt) {\n        const el = document.createElement(type);\n        if (undefined !== opt) {\n            if (undefined !== opt.className)\n                el.className = opt.className;\n            if (undefined !== opt.id)\n                el.id = opt.id;\n            if (undefined !== opt.innerHTML)\n                el.innerHTML = opt.innerHTML;\n            if (undefined !== opt.innerText)\n                el.innerText = opt.innerText;\n            if (undefined !== opt.parent)\n                opt.parent.appendChild(el);\n        }\n        return el;\n    }\n    /** Shortcut for making a modal dialog on top of the root of the application. The returned HTMLDivElement will be placed topmost, all other application\n     * windows will be covered with a semi-transparent background that intercepts all key/mouse/touch events until the modal is dismissed.\n     * @param options The options that describe how the modal should work.\n     */\n    static makeModalDiv(options) {\n        const root = options.rootDiv ? options.rootDiv : document.body;\n        // create the overlay div to \"black out\" the application to indicate everything is inactive until the modal has been dismissed.\n        const overlay = IModelApp.makeHTMLElement(\"div\", { parent: root, className: \"imodeljs-modal-overlay\" });\n        overlay.tabIndex = -1; // so we can catch keystroke events\n        // function to remove modal dialog\n        const stop = (ev) => {\n            root.removeChild(overlay);\n            ev.stopPropagation();\n        };\n        if (options.autoClose) {\n            overlay.onclick = overlay.oncontextmenu = stop;\n            overlay.onkeydown = overlay.onkeyup = (ev) => {\n                switch (ev.key) {\n                    case \"Enter\":\n                    case \"Escape\":\n                        stop(ev);\n                        return;\n                }\n                ev.stopPropagation();\n            };\n            overlay.focus();\n        }\n        const modal = IModelApp.makeHTMLElement(\"div\", { parent: overlay, className: \"imodeljs-modal\" });\n        if (undefined !== options.width) {\n            modal.style.width = `${options.width}px`;\n            // allow the dialog to be smaller than the width\n            modal.style.maxWidth = `min(100% - (2 * var(--width-border)), ${options.width}px)`;\n        }\n        if (options.closeBox) {\n            const close = IModelApp.makeHTMLElement(\"p\", { parent: modal, className: \"imodeljs-modal-close\" });\n            close.innerText = \"\\u00d7\"; // unicode \"times\" symbol\n            close.onclick = stop;\n        }\n        return { modal, stop };\n    }\n    /** Make a new Logo Card. Call this method from your implementation of [[IModelApp.applicationLogoCard]]\n     * @param opts Options for Logo Card\n     * @beta\n     */\n    static makeLogoCard(opts) {\n        const card = IModelApp.makeHTMLElement(\"tr\");\n        const iconCell = IModelApp.makeHTMLElement(\"td\", { parent: card, className: \"logo-card-logo\" });\n        if (undefined !== opts.iconSrc) {\n            if (typeof opts.iconSrc === \"string\") {\n                const logo = IModelApp.makeHTMLElement(\"img\");\n                logo.src = opts.iconSrc;\n                logo.width = opts.iconWidth ? opts.iconWidth : 64;\n                opts.iconSrc = logo;\n            }\n            iconCell.appendChild(opts.iconSrc);\n        }\n        const noticeCell = IModelApp.makeHTMLElement(\"td\", { parent: card, className: \"logo-card-message\" });\n        if (undefined !== opts.heading) {\n            if (typeof opts.heading === \"string\")\n                IModelApp.makeHTMLElement(\"h2\", { parent: noticeCell, innerHTML: opts.heading, className: \"logo-card-header\" });\n            else\n                noticeCell.appendChild(opts.heading);\n        }\n        if (undefined !== opts.notice) {\n            if (typeof opts.notice === \"string\")\n                IModelApp.makeHTMLElement(\"p\", { parent: noticeCell, innerHTML: opts.notice, className: \"logo-cards\" });\n            else\n                noticeCell.appendChild(opts.notice);\n        }\n        return card;\n    }\n    /** Make the logo card for the library itself. This card gets placed at the top of the stack.\n     *  @internal\n     */\n    static makeIModelJsLogoCard() {\n        return this.makeLogoCard({\n            iconSrc: `${this.publicPath}images/about-imodeljs.svg`,\n            heading: `<span style=\"font-weight:normal\">${this.localization.getLocalizedString(\"iModelJs:Notices.PoweredBy\")}</span>&nbsp;iTwin.js`,\n            notice: `${ITWINJS_CORE_VERSION}<br>${COPYRIGHT_NOTICE}`,\n        });\n    }\n    /** Format the tooltip strings returned by [[IModelConnection.getToolTipMessage]].\n     * @alpha\n     */\n    static formatElementToolTip(msg) {\n        let out = \"\";\n        msg.forEach((line) => out += `${IModelApp.localization?.getLocalizedKeys(line)}<br>`);\n        const div = document.createElement(\"div\");\n        div.innerHTML = out;\n        return div;\n    }\n    /** Localize an error status\n     * @param status one of the status values from [BentleyStatus]($core-bentley), [IModelStatus]($core-bentley) or [DbResult]($core-bentley)\n     * @returns a localized error message\n     * @beta\n     */\n    static translateStatus(status) {\n        let key;\n        if (typeof status !== \"number\") {\n            key = { scope: \"Errors\", val: \"IllegalValue\" };\n        }\n        else {\n            key = { scope: \"BentleyStatus\", val: BentleyStatus[status] };\n            if (!key.val)\n                key = { scope: \"IModelStatus\", val: IModelStatus[status] };\n            if (!key.val)\n                key = { scope: \"DbResult\", val: DbResult[status] };\n            if (!key.val)\n                key = { scope: \"Errors\", val: \"Status\", status: status.toString() };\n        }\n        return this.localization.getLocalizedString(`iModelJs:${key.scope}.${key.val}`, key);\n    }\n    /**\n     * Creates an instance of the ExtensionAdmin\n     * and registers an event to execute after startup is complete\n     * @returns an instance of ExtensionAdmin\n     */\n    static _createExtensionAdmin() {\n        const extensionAdmin = new ExtensionAdmin();\n        IModelApp.onAfterStartup.addListener(extensionAdmin.onStartup);\n        return extensionAdmin;\n    }\n}\n_a = IModelApp;\nIModelApp._initialized = false;\nIModelApp._wantEventLoop = false;\nIModelApp._animationRequested = false;\nIModelApp._animationInterval = BeDuration.fromSeconds(1);\n/** Event raised just before the frontend IModelApp is to be [[shutdown]]. */\nIModelApp.onBeforeShutdown = new BeEvent();\n/** Event raised after IModelApp [[startup]] completes. */\nIModelApp.onAfterStartup = new BeEvent();\n/** The [[ToolRegistry]] for this session. */\nIModelApp.tools = new ToolRegistry();\n/** The [[TelemetryManager]] for this session\n * @internal\n */\nIModelApp.telemetry = new TelemetryManager();\n/** @alpha */\nIModelApp.extensionAdmin = _a._createExtensionAdmin();\n/** Map of classFullName to EntityState class */\nIModelApp._entityClasses = new Map();\nexport { IModelApp };\n//# sourceMappingURL=IModelApp.js.map",
      "start": 1693508119199,
      "end": 1693508121230,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "file": null,
        "sources": [
          null
        ],
        "sourcesContent": [
          null
        ],
        "names": [],
        "mappings": "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"
      }
    }
  ]
}
