{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/GroundPlane.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module DisplayStyles\n */\nimport { ColorByName } from \"./ColorByName\";\nimport { ColorDef } from \"./ColorDef\";\nconst defaultAboveColor = ColorDef.fromTbgr(ColorByName.darkGreen);\nconst defaultBelowColor = ColorDef.fromTbgr(ColorByName.darkBrown);\n/** A circle drawn at a Z elevation, whose diameter is the the XY diagonal of the project extents, used to represent the ground as a reference point within a spatial view.\n * @see [[Environment.ground]].\n * @public\n */\nclass GroundPlane {\n    constructor(props) {\n        this.elevation = props.elevation ?? -0.01;\n        this.aboveColor = props.aboveColor ?? defaultAboveColor;\n        this.belowColor = props.belowColor ?? defaultBelowColor;\n    }\n    /** Create a new GroundPlane. Any properties not specified by `props` will be initialized to their default values. */\n    static create(props) {\n        return props ? new this(props) : this.defaults;\n    }\n    /** Create a copy of this ground plane, identical except for any properties explicitly specified by `changedProps`.\n     * Any properties of `changedProps` explicitly set to `undefined` will be initialized to their default values.\n     */\n    clone(changedProps) {\n        if (!changedProps)\n            return this;\n        return GroundPlane.create({ ...this, ...changedProps });\n    }\n    /** Create from JSON representation. */\n    static fromJSON(props) {\n        if (!props)\n            return this.defaults;\n        return new this({\n            elevation: props.elevation,\n            aboveColor: undefined !== props.aboveColor ? ColorDef.fromJSON(props.aboveColor) : undefined,\n            belowColor: undefined !== props.belowColor ? ColorDef.fromJSON(props.belowColor) : undefined,\n        });\n    }\n    /** Convert to JSON representation.\n     * @param display If defined, the value to use for [[GroundPlaneProps.display]]; otherwise, that property will be left undefined.\n     */\n    toJSON(display) {\n        const props = {\n            elevation: this.elevation,\n            aboveColor: this.aboveColor.toJSON(),\n            belowColor: this.belowColor.toJSON(),\n        };\n        if (undefined !== display)\n            props.display = display;\n        return props;\n    }\n}\n/** Default settings with a dark green \"above\" color, dark brown \"below\" color, and elevation of -0.01 meters. */\nGroundPlane.defaults = new GroundPlane({});\nexport { GroundPlane };\n//# sourceMappingURL=GroundPlane.js.map",
      "start": 1693508120613,
      "end": 1693508120703,
      "sourcemaps": null
    }
  ]
}
