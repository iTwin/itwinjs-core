{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/SkyBox.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module DisplayStyles\n */\nimport { Id64 } from \"@itwin/core-bentley\";\nimport { ColorDef } from \"./ColorDef\";\n/** Supported types of [[SkyBox]] images.\n * @see [[SkyBoxImageProps]].\n * @public\n * @extensions\n */\nexport var SkyBoxImageType;\n(function (SkyBoxImageType) {\n    /** No image, indicating a [[SkyGradient]] should be displayed. */\n    SkyBoxImageType[SkyBoxImageType[\"None\"] = 0] = \"None\";\n    /** A single image mapped to the surface of a sphere.\n     * @see [[SkySphere]].\n     */\n    SkyBoxImageType[SkyBoxImageType[\"Spherical\"] = 1] = \"Spherical\";\n    /** @internal not yet supported */\n    SkyBoxImageType[SkyBoxImageType[\"Cylindrical\"] = 2] = \"Cylindrical\";\n    /** Six images mapped to the faces of a cube.\n     * @see [[SkyCube]].\n     */\n    SkyBoxImageType[SkyBoxImageType[\"Cube\"] = 3] = \"Cube\";\n})(SkyBoxImageType || (SkyBoxImageType = {}));\nconst defaultGroundColor = ColorDef.from(143, 205, 125);\nconst defaultZenithColor = ColorDef.from(54, 117, 255);\nconst defaultNadirColor = ColorDef.from(40, 125, 0);\nconst defaultSkyColor = ColorDef.from(142, 205, 255);\nconst defaultExponent = 4.0;\nfunction colorDefFromJson(props) {\n    return undefined !== props ? ColorDef.fromJSON(props) : undefined;\n}\n/** Describes how to map a two- or four-color [[Gradient]] to the interior of a sphere to produce a [[SkyBox]].\n * @see [[SkyBox.gradient]].\n * @public\n */\nclass SkyGradient {\n    constructor(args) {\n        this.twoColor = args.twoColor ?? false;\n        this.skyColor = args.skyColor ?? defaultSkyColor;\n        this.groundColor = args.groundColor ?? defaultGroundColor;\n        this.nadirColor = args.nadirColor ?? defaultNadirColor;\n        this.zenithColor = args.zenithColor ?? defaultZenithColor;\n        this.skyExponent = args.skyExponent ?? defaultExponent;\n        this.groundExponent = args.groundExponent ?? defaultExponent;\n    }\n    /** Create a new gradient. Any properties not specified by `props` are initialized to their default values. */\n    static create(props) {\n        return props ? new this(props) : this.defaults;\n    }\n    /** Create from JSON representation. */\n    static fromJSON(props) {\n        if (!props)\n            return this.defaults;\n        return new this({\n            twoColor: props.twoColor,\n            skyExponent: props.skyExponent,\n            groundExponent: props.groundExponent,\n            skyColor: colorDefFromJson(props.skyColor),\n            groundColor: colorDefFromJson(props.groundColor),\n            nadirColor: colorDefFromJson(props.nadirColor),\n            zenithColor: colorDefFromJson(props.zenithColor),\n        });\n    }\n    /** Create ea copy of this gradient, identical except for any properties explicitly specified by `changedProps`.\n     * Any properties of `changedProps` explicitly set to `undefined` will be reset to their default values.\n     */\n    clone(changedProps) {\n        return new SkyGradient({ ...this, ...changedProps });\n    }\n    /** Convert to JSON representation. */\n    toJSON() {\n        const props = {\n            skyColor: this.skyColor.toJSON(),\n            groundColor: this.groundColor.toJSON(),\n            nadirColor: this.nadirColor.toJSON(),\n            zenithColor: this.zenithColor.toJSON(),\n        };\n        if (this.groundExponent !== defaultExponent)\n            props.groundExponent = this.groundExponent;\n        if (this.skyExponent !== defaultExponent)\n            props.skyExponent = this.skyExponent;\n        if (this.twoColor)\n            props.twoColor = this.twoColor;\n        return props;\n    }\n    /** Returns true if this gradient is equivalent to the supplied gradient. */\n    equals(other) {\n        if (this === other)\n            return true;\n        return this.twoColor === other.twoColor && this.skyColor.equals(other.skyColor) && this.groundColor.equals(other.groundColor) &&\n            this.zenithColor.equals(other.zenithColor) && this.nadirColor.equals(other.nadirColor);\n    }\n}\n/** Default settings for a four-color gradient. */\nSkyGradient.defaults = new SkyGradient({});\nexport { SkyGradient };\n/** Describes how to draw a representation of a sky, as part of an [[Environment]].\n * @see [[SkyBoxProps]].\n * @public\n */\nclass SkyBox {\n    constructor(gradient) {\n        this.gradient = gradient;\n    }\n    /** Create a skybox that displays the specified gradient, or the default gradient if none is supplied. */\n    static createGradient(gradient) {\n        return gradient ? new this(gradient) : this.defaults;\n    }\n    /** Create from JSON representation. */\n    static fromJSON(props) {\n        const gradient = SkyGradient.fromJSON(props);\n        if (props?.image) {\n            switch (props.image.type) {\n                case SkyBoxImageType.Spherical:\n                    if (undefined !== props.image.texture)\n                        return new SkySphere(props.image.texture, gradient);\n                    break;\n                case SkyBoxImageType.Cube: {\n                    const tx = props.image.textures;\n                    if (tx && undefined !== tx.top && undefined !== tx.bottom && undefined !== tx.right && undefined !== tx.left && undefined !== tx.front && undefined !== tx.back)\n                        return new SkyCube(tx, gradient);\n                    break;\n                }\n            }\n        }\n        return this.createGradient(gradient);\n    }\n    /** Convert to JSON representation.\n     * @param display If defined, the value to use for [[SkyBoxProps.display]]; otherwise, that property will be left undefined.\n     */\n    toJSON(display) {\n        const props = this.gradient.toJSON();\n        if (undefined !== display)\n            props.display = display;\n        return props;\n    }\n    /** @internal */\n    get textureIds() {\n        return [];\n    }\n}\n/** Default settings for a four-color gradient. */\nSkyBox.defaults = new SkyBox(SkyGradient.defaults);\nexport { SkyBox };\n/** Describes how to draw a representation of a sky by mapping a single image to the interior of a sphere.\n * @public\n */\nexport class SkySphere extends SkyBox {\n    /** Create a new sky sphere using the specified image.\n     * @param image The image to map to the interior of the sphere.\n     * @param gradient Optionally overrides the default gradient settings used if the image cannot be obtained.\n     */\n    constructor(image, gradient) {\n        super(gradient ?? SkyGradient.defaults);\n        this.image = image;\n    }\n    /** See [[SkyBox.toJSON]]. */\n    toJSON(display) {\n        const props = super.toJSON(display);\n        props.image = {\n            type: SkyBoxImageType.Spherical,\n            texture: this.image,\n        };\n        return props;\n    }\n    /** @internal */\n    get textureIds() {\n        return Id64.isValidId64(this.image) ? [this.image] : [];\n    }\n}\n/** Describes how to draw a representation of a sky by mapping images to the interior faces of a cube.\n * The images are required to be *square*, and each image must have the same dimensions as the other images.\n * @public\n */\nexport class SkyCube extends SkyBox {\n    /** Create a new sky cube using the specified images.\n     * @param images The images to map to each face of the cube.\n     * @param gradient Optionally overrides  the default gradient settings used if the images cannot be obtained.\n     */\n    constructor(images, gradient) {\n        super(gradient ?? SkyGradient.defaults);\n        this.images = { ...images };\n    }\n    /** See [[SkyBox.toJSON]]. */\n    toJSON(display) {\n        const props = super.toJSON(display);\n        props.image = {\n            type: SkyBoxImageType.Cube,\n            textures: { ...this.images },\n        };\n        return props;\n    }\n    /** @internal */\n    get textureIds() {\n        const imgs = this.images;\n        return [imgs.front, imgs.back, imgs.top, imgs.bottom, imgs.left, imgs.right].filter((x) => Id64.isValidId64(x));\n    }\n}\n//# sourceMappingURL=SkyBox.js.map",
      "start": 1693508120754,
      "end": 1693508120809,
      "sourcemaps": null
    }
  ]
}
