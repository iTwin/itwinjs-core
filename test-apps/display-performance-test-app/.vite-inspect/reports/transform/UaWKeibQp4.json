{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/SubCategoryOverride.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module DisplayStyles\n */\nimport { Id64, JsonUtils } from \"@itwin/core-bentley\";\nimport { ColorDef } from \"./ColorDef\";\nimport { SubCategoryAppearance } from \"./SubCategoryAppearance\";\n/** Overrides selected aspects of a [[SubCategoryAppearance]] in the context of a [[DisplayStyleState]].\n * When determining how geometry belonging to a [[SubCategory]] will appear when drawn within a view:\n *  1. The base [[SubCategoryAppearance]] associated with that subcategory is obtained.\n *  2. The [[SubCategoryOverride]] associated with that subcategory in the [[DisplayStyleState]] is obtained.\n *  3. Any aspects of the appearance overridden by the SubCategoryOverride are replaced with the values from the SubCategoryOverride.\n * An aspect is overridden by virtue of not being set to \"undefined\" in the SubCategoryOverride.\n * @see [[DisplayStyleState.overrideSubCategory]]\n * @public\n */\nclass SubCategoryOverride {\n    /** Returns true if any aspect of the appearance is overridden (i.e., if any member is not undefined). */\n    get anyOverridden() {\n        return undefined !== this.invisible || undefined !== this.color || undefined !== this.weight || undefined !== this.style || undefined !== this.priority || undefined !== this.material || undefined !== this.transparency;\n    }\n    /** Returns a SubCategoryAppearance overridden to match the properties defined by this SubCategoryOverride. */\n    override(appearance) {\n        if (!this.anyOverridden)\n            return appearance;\n        const props = appearance.toJSON();\n        const ovrProps = this.toJSON();\n        if (undefined !== ovrProps.invisible)\n            props.invisible = ovrProps.invisible;\n        if (undefined !== ovrProps.weight)\n            props.weight = ovrProps.weight;\n        if (undefined !== ovrProps.style)\n            props.style = ovrProps.style;\n        if (undefined !== ovrProps.material)\n            props.material = ovrProps.material;\n        if (undefined !== ovrProps.priority)\n            props.priority = ovrProps.priority;\n        if (undefined !== ovrProps.transp)\n            props.transp = ovrProps.transp;\n        if (undefined !== ovrProps.color)\n            props.color = ovrProps.color;\n        return new SubCategoryAppearance(props);\n    }\n    /** Convert this SubCategoryOverride to a JSON object\n     * @internal\n     */\n    toJSON() {\n        const props = {};\n        if (undefined !== this.invisible)\n            props.invisible = this.invisible;\n        if (undefined !== this.weight)\n            props.weight = this.weight;\n        if (undefined !== this.style)\n            props.style = this.style;\n        if (undefined !== this.material)\n            props.material = this.material;\n        if (undefined !== this.priority)\n            props.priority = this.priority;\n        if (undefined !== this.transparency)\n            props.transp = this.transparency;\n        if (undefined !== this.color)\n            props.color = this.color.toJSON();\n        return props;\n    }\n    /** Perform equality comparison against another SubCategoryOverride. */\n    equals(other) {\n        if (this.invisible !== other.invisible || this.weight !== other.weight || this.style !== other.style\n            || this.priority !== other.priority || this.material !== other.material || this.transparency !== other.transparency)\n            return false;\n        if (undefined !== this.color && undefined !== other.color)\n            return this.color.tbgr === other.color.tbgr;\n        else\n            return undefined === this.color && undefined === other.color;\n    }\n    /** Create a new SubCategoryOverride from a JSON object */\n    static fromJSON(json) {\n        return undefined !== json ? new SubCategoryOverride(json) : this.defaults;\n    }\n    constructor(props) {\n        if (undefined !== props.invisible)\n            this.invisible = JsonUtils.asBool(props.invisible);\n        if (undefined !== props.color)\n            this.color = ColorDef.fromJSON(props.color);\n        if (undefined !== props.weight)\n            this.weight = JsonUtils.asInt(props.weight);\n        if (undefined !== props.style)\n            this.style = Id64.fromJSON(props.style);\n        if (undefined !== props.material)\n            this.material = Id64.fromJSON(props.material);\n        if (undefined !== props.priority)\n            this.priority = JsonUtils.asInt(props.priority);\n        if (undefined !== props.transp)\n            this.transparency = JsonUtils.asDouble(props.transp);\n    }\n}\n/** A default SubCategoryOverride which overrides nothing. */\nSubCategoryOverride.defaults = new SubCategoryOverride({});\nexport { SubCategoryOverride };\n//# sourceMappingURL=SubCategoryOverride.js.map",
      "start": 1693508120765,
      "end": 1693508120818,
      "sourcemaps": null
    }
  ]
}
