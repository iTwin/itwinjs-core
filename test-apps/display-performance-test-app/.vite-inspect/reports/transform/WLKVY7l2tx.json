{
  "resolvedId": "D:/hub2023A/itwinjs-core/ui/appui-abstract/lib/esm/appui-abstract/dialogs/UiLayoutDataProvider.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Dialog\n */\nimport { BeUiEvent } from \"@itwin/core-bentley\";\nimport { PropertyEditorParamTypes } from \"../properties/EditorParams\";\nimport { PropertyRecord } from \"../properties/Record\";\nimport { PropertyValueFormat } from \"../properties/Value\";\nimport { PropertyChangeStatus, UiDataProvider } from \"./UiDataProvider\";\n/** Enum for button types. Determines button label, and default button style.\n * @public\n */\nexport var DialogButtonType;\n(function (DialogButtonType) {\n    DialogButtonType[\"None\"] = \"\";\n    DialogButtonType[\"Close\"] = \"close\";\n    DialogButtonType[\"OK\"] = \"ok\";\n    DialogButtonType[\"Cancel\"] = \"cancel\";\n    DialogButtonType[\"Yes\"] = \"yes\";\n    DialogButtonType[\"No\"] = \"no\";\n    DialogButtonType[\"Retry\"] = \"retry\";\n    DialogButtonType[\"Next\"] = \"next\";\n    DialogButtonType[\"Previous\"] = \"previous\";\n})(DialogButtonType || (DialogButtonType = {}));\n/** Enum for button style.\n * @public\n */\nexport var DialogButtonStyle;\n(function (DialogButtonStyle) {\n    DialogButtonStyle[\"None\"] = \"\";\n    DialogButtonStyle[\"Primary\"] = \"iui-cta\";\n    DialogButtonStyle[\"Hollow\"] = \"iui-default\";\n    DialogButtonStyle[\"Blue\"] = \"iui-high-visibility\";\n})(DialogButtonStyle || (DialogButtonStyle = {}));\n/**\n * @public\n */\nclass UiLayoutDataProvider extends UiDataProvider {\n    constructor() {\n        super(...arguments);\n        /** Applies change of a single property - this is the default method used when property editors are dynamically generated. */\n        // istanbul ignore next\n        this.applyUiPropertyChange = (_updatedValue) => {\n            throw (new Error(\"Derived UiDataProvider should implement this to apply change to a single property.\"));\n        };\n    }\n    /** Applies changes from one or more properties - some dialogs will use this to send a bulk set of changes back to the provider */\n    processChangesInUi(properties) {\n        // Default implementation is to just pass each property to applyUiPropertyChange\n        properties.forEach((property) => this.applyUiPropertyChange(property));\n        return { status: PropertyChangeStatus.Success };\n    }\n    /** Array of dialog rows */\n    get rows() {\n        if (!this._rows) {\n            this._rows = this.layoutDialogRows();\n        }\n        return this._rows;\n    }\n    loadItemsInternal(items) {\n        this._items = items ? items : [];\n        this._rows = this.layoutDialogRows();\n    }\n    /** Called by UI to request available properties that can be bound to user supplied UI components (See Tool1UiProvider for example). */\n    // istanbul ignore next\n    supplyDialogItems() {\n        throw (new Error(\"Derived UiDataProvider must implement this method to supply set of properties.\"));\n    }\n    get items() {\n        if (undefined === this._items) {\n            this.loadItemsInternal(this.supplyDialogItems());\n        }\n        return this._items;\n    }\n    /** Called to inform listeners that new properties are ready for display in UI. */\n    reloadDialogItems(emitEvent = true) {\n        this.loadItemsInternal(this.supplyDialogItems());\n        // istanbul ignore else\n        if (emitEvent)\n            this.fireItemsReloadedEvent();\n    }\n    /**\n     * @internal\n     */\n    layoutDialogRows() {\n        const rows = [];\n        this.items.forEach((item) => {\n            const row = rows.find((value) => value.priority === item.editorPosition.rowPriority);\n            if (row) {\n                row.items.push(item);\n            }\n            else {\n                rows.push({ priority: item.editorPosition.rowPriority, items: [item] });\n            }\n        });\n        // sort rows\n        rows.sort((a, b) => a.priority - b.priority);\n        // sort records\n        rows.forEach((row) => row.items.sort((a, b) => a.editorPosition.columnIndex - b.editorPosition.columnIndex));\n        return rows;\n    }\n    /** Determines if a dialog item editor wants a label */\n    static editorWantsLabel(item) {\n        if (item.property.editor && item.property.editor.params) {\n            const params = item.property.editor.params.find((param) => param.type === PropertyEditorParamTypes.SuppressEditorLabel);\n            // istanbul ignore else\n            if (params)\n                return false;\n        }\n        return true;\n    }\n    /** Determines if a dialog items has an associated lock property */\n    static hasAssociatedLockProperty(item) {\n        return !!item.lockProperty;\n    }\n    /** Gets the disabled state for a given dialog item */\n    static getItemDisabledState(baseDialogItem) {\n        const dialogItem = baseDialogItem;\n        // istanbul ignore else\n        if (dialogItem === undefined || dialogItem.lockProperty === undefined)\n            return !!baseDialogItem.isDisabled;\n        const value = dialogItem.lockProperty.value;\n        // istanbul ignore next\n        if (value === undefined)\n            return !!baseDialogItem.isDisabled;\n        return !value.value;\n    }\n    /** Determines if a dialog row only contains button group editors */\n    static onlyContainButtonGroupEditors(row) {\n        for (const item of row.items) {\n            // istanbul ignore else\n            if (UiLayoutDataProvider.hasAssociatedLockProperty(item) || undefined === item.property.editor || \"enum-buttongroup\" !== item.property.editor.name || UiLayoutDataProvider.editorWantsLabel(item))\n                return false;\n        }\n        return true;\n    }\n}\n/** Gets a property record for a given dialog item */\nUiLayoutDataProvider.getPropertyRecord = (dialogItem) => {\n    const propertyValue = { valueFormat: PropertyValueFormat.Primitive, value: dialogItem.value.value, displayValue: dialogItem.value.displayValue };\n    const record = new PropertyRecord(propertyValue, dialogItem.property);\n    record.isDisabled = UiLayoutDataProvider.getItemDisabledState(dialogItem);\n    return record;\n};\nexport { UiLayoutDataProvider };\n/** [[DialogLayoutDataProvider]] Abstract class that allows property values to be passed between hosting API and Dialog that generates and arranges components dynamically\n * including the buttons at the bottom of the dialog.\n * @public\n */\nexport class DialogLayoutDataProvider extends UiLayoutDataProvider {\n    constructor() {\n        super(...arguments);\n        this.onButtonsReloadedEvent = new BeUiEvent();\n    }\n    /** Called to inform listeners that modal dialog button data needs to be refreshed. */\n    fireDialogButtonsReloadEvent() {\n        this.onButtonsReloadedEvent.emit();\n    }\n    supplyButtonData() {\n        // Derived class should override\n        const buttons = [];\n        // istanbul ignore next\n        buttons.push({ type: DialogButtonType.OK, onClick: () => { } });\n        // istanbul ignore next\n        buttons.push({ type: DialogButtonType.Cancel, onClick: () => { } });\n        return buttons;\n    }\n}\n//# sourceMappingURL=UiLayoutDataProvider.js.map",
      "start": 1693508123541,
      "end": 1693508123599,
      "sourcemaps": null
    }
  ]
}
