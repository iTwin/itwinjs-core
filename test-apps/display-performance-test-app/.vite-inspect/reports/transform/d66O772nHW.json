{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/spatial/ecrs/PrimeMeridian.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { Registry } from \"./Registry\";\nimport { Unit } from \"./Unit\";\n/**\n * Class PrimeMeridian defines the parameters of a prime meridian.\n *\n * Based on the following document:\n *\n * Coordinate Conversions and Transformations including Formulas\n * Guidance Note Number 7, part 2\n * Revised May 2005\n * Available at: http://www.epsg.org/\n *\n * @version 1.0 July 2005\n */\n/** @internal */\nexport class PrimeMeridian {\n    /**\n     * Create a new prime meridian.\n     * @param code the code.\n     * @param name the name.\n     * @param lonFromGreenwich the longitude from Greenwich.\n     * @param unitCode the code of the unit of longitude.\n     */\n    constructor(code, name, lonFromGreenwich, unitCode) {\n        /* Store parameters */\n        this._code = code;\n        this._name = name;\n        this._lonFromGreenwich = lonFromGreenwich;\n        this._unitCode = unitCode;\n    }\n    /**\n     * Get the code.\n     * @return the code.\n     */\n    getCode() {\n        return this._code;\n    }\n    /**\n     * Get the name.\n     * @return the name.\n     */\n    getName() {\n        return this._name;\n    }\n    /**\n     * Get the longitude from Greenwich.\n     * @return the longitude from Greenwich.\n     */\n    getLonFromGreenwich() {\n        return this._lonFromGreenwich;\n    }\n    /**\n     * Get the longitude from Greenwich in radians.\n     * @return the longitude from Greenwich in radians.\n     */\n    getLonFromGreenwichRad() {\n        let unit = Registry.getUnit(this._unitCode);\n        return unit.toStandard(this._lonFromGreenwich);\n    }\n    /**\n     * Get the longitude from Greenwich in degrees.\n     * @return the longitude from Greenwich in degrees.\n     */\n    getLonFromGreenwichDeg() {\n        if (this._unitCode == Unit.DEGREE)\n            return this._lonFromGreenwich;\n        return this.getLonFromGreenwichRad() / Math.PI * 180.0;\n    }\n    /**\n     * Get the code of the unit of longitude.\n     * @return the code of the unit of longitude.\n     */\n    getUnitCode() {\n        return this._unitCode;\n    }\n    /**\n     * Check if another prime meridian is compatible with this one.\n     * @param other the other prime meridian.\n     * @return true if compatible.\n     */\n    isCompatible(other) {\n        if (other._code == this._code)\n            return true;\n        if (other._unitCode != this._unitCode)\n            return false;\n        if (other._lonFromGreenwich != this._lonFromGreenwich)\n            return false;\n        return true;\n    }\n    /**\n     * The standard toString method.\n     * @see Object#toString\n     */\n    toString() {\n        return \"[PrimeMeridian:code=\" + this._code + \",name='\" + this._name + \"']\";\n    }\n}\n//# sourceMappingURL=PrimeMeridian.js.map",
      "start": 1693508125626,
      "end": 1693508125658,
      "sourcemaps": null
    }
  ]
}
