{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/webgl/AtmosphereUniforms.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { Matrix3d, Point3d } from \"@itwin/core-geometry\";\nimport { Matrix3, Matrix4 } from \"./Matrix\";\nimport { desync, sync } from \"./Sync\";\nexport const MAX_SAMPLE_POINTS = 40; // Maximum number of sample points to be used for the in-scattering and out-scattering computations.\nexport class AtmosphereUniforms {\n    constructor() {\n        // Main shader uniforms\n        this._earthScaleMatrix = new Matrix3d(new Float64Array([1, 0, 0, 0, 1, 0, 0, 0, 1]));\n        this._inverseEllipsoidRotationMatrix = new Matrix3d(new Float64Array([1, 0, 0, 0, 1, 0, 0, 0, 1]));\n        this._atmosphereScaleMatrix = new Matrix3d(new Float64Array([1, 0, 0, 0, 1, 0, 0, 0, 1]));\n        this._atmosphereData = new Matrix4();\n        // Fragment shader uniforms\n        this._exposure = 0.0;\n        // utility\n        this.syncKey = 0;\n        this._scratchMatrix3d = new Matrix3d();\n        this._scratchPoint3d = new Point3d();\n    }\n    /**\n     * uniform mat3 u_atmosphereData;\n     *   { { atmosphereRadiusScaleFactor, atmosphereMaxDensityThresholdScaleFactor, densityFalloff, 0 },\n     *   { numViewRaySamples, numSunRaySamples, 0, 0 },\n     *   { earthCenter.x, earthCenter.y, earthCenter.z, 0 },\n     *   { scatteringCoefficients.x, scatteringCoefficients.y, scatteringCoefficients.z, 0 } }\n     */\n    get atmosphereData() { return this._atmosphereData; }\n    update(target) {\n        const atmosphereHasNotChanged = this._atmosphere && target.plan.atmosphere && this._atmosphere.equals(target.plan.atmosphere);\n        const ellipsoidHasNotChanged = this._ellipsoid && target.plan.ellipsoid && this._ellipsoid.equals(target.plan.ellipsoid);\n        if (atmosphereHasNotChanged && ellipsoidHasNotChanged) {\n            return;\n        }\n        this._atmosphere = target.plan.atmosphere;\n        this._ellipsoid = target.plan.ellipsoid;\n        desync(this);\n        if (!this._atmosphere || !this._ellipsoid) {\n            return;\n        }\n        this._updateAtmosphereScaleMatrix(this._atmosphere.atmosphereHeightAboveEarth);\n        this._updateExposure(this._atmosphere.exposure);\n        this._updateDensityFalloff(this._atmosphere.densityFalloff);\n        this._updateEarthCenter(this._ellipsoid.ellipsoidCenter, target.uniforms.frustum.viewMatrix);\n        this._updateEarthScaleMatrix(this._ellipsoid.ellipsoidRadii);\n        this._updateInverseEllipsoidRotationMatrix(this._ellipsoid.ellipsoidRotation, target.uniforms.frustum.viewMatrix.matrix);\n        this._updateAtmosphereRadiusScaleFactor(this._atmosphere.atmosphereHeightAboveEarth);\n        this._updateAtmosphereMaxDensityThresholdScaleFactor(this._atmosphere.depthBelowEarthForMaxDensity);\n        this._updateNumViewRaySamples(this._atmosphere.numViewRaySamples);\n        this._updateNumSunRaySamples(this._atmosphere.numSunRaySamples);\n        this._updateScatteringCoefficients(this._atmosphere.scatteringStrength, this._atmosphere.wavelengths);\n    }\n    _updateEarthCenter(earthCenter, viewMatrix) {\n        viewMatrix.multiplyPoint3d(earthCenter, this._scratchPoint3d);\n        this._atmosphereData.data[8] = this._scratchPoint3d.x;\n        this._atmosphereData.data[9] = this._scratchPoint3d.y;\n        this._atmosphereData.data[10] = this._scratchPoint3d.z;\n    }\n    _updateInverseEllipsoidRotationMatrix(ellipsoidRotation, viewRotation) {\n        viewRotation.inverse(this._scratchMatrix3d);\n        ellipsoidRotation.multiplyMatrixInverseMatrix(this._scratchMatrix3d, this._inverseEllipsoidRotationMatrix);\n    }\n    _updateEarthScaleMatrix(earthRadii) {\n        this._earthScaleMatrix.setAt(0, 0, earthRadii.x);\n        this._earthScaleMatrix.setAt(1, 1, earthRadii.y);\n        this._earthScaleMatrix.setAt(2, 2, earthRadii.z);\n    }\n    _updateAtmosphereScaleMatrix(heightAboveSurface) {\n        const earthPolarRadius = this._earthScaleMatrix.at(2, 2);\n        const scaleFactor = earthPolarRadius === 0 ? 1.0 : (earthPolarRadius + heightAboveSurface) / earthPolarRadius;\n        this._earthScaleMatrix.scale(scaleFactor, this._atmosphereScaleMatrix);\n    }\n    _updateAtmosphereRadiusScaleFactor(atmosphereHeightAboveEarth) {\n        const earthPolarRadius = this._earthScaleMatrix.at(2, 2);\n        const minDensityThresholdRadius = earthPolarRadius + atmosphereHeightAboveEarth;\n        const atmosphereRadiusScaleFactor = (earthPolarRadius === 0)\n            ? 1\n            : (minDensityThresholdRadius / earthPolarRadius);\n        this.atmosphereData.data[0] = atmosphereRadiusScaleFactor;\n    }\n    _updateAtmosphereMaxDensityThresholdScaleFactor(maxDensityDepthBelowEarth) {\n        const earthPolarRadius = this._earthScaleMatrix.at(2, 2);\n        const maxDensityThresholdRadius = earthPolarRadius - maxDensityDepthBelowEarth;\n        const atmosphereMaxDensityThresholdScaleFactor = (earthPolarRadius === 0)\n            ? 1\n            : (maxDensityThresholdRadius / earthPolarRadius);\n        this.atmosphereData.data[1] = atmosphereMaxDensityThresholdScaleFactor;\n    }\n    _updateDensityFalloff(densityFalloff) {\n        this.atmosphereData.data[2] = densityFalloff;\n    }\n    _updateScatteringCoefficients(scatteringStrength, wavelengths) {\n        // Rayleigh scattering strength is inversely related to the 4th power of the wavelength -> 1/pow(wavelength, 4)\n        // Because this produces very small values when the wavelengths are taken in nanometers,\n        //   we attempt to normalize them around 1 by taking the smallest wavelength of visible light as a baseline (violet light - 400nm)\n        const violetLightWavelength = 400.0;\n        this.atmosphereData.data[12] = ((violetLightWavelength / wavelengths.r) ** 4.0) * scatteringStrength;\n        this.atmosphereData.data[13] = ((violetLightWavelength / wavelengths.g) ** 4.0) * scatteringStrength;\n        this.atmosphereData.data[14] = ((violetLightWavelength / wavelengths.b) ** 4.0) * scatteringStrength;\n    }\n    _updateExposure(exposure) {\n        this._exposure = exposure;\n    }\n    bindExposure(uniform) {\n        if (!sync(this, uniform)) {\n            uniform.setUniform1f(this._exposure);\n        }\n    }\n    _updateNumViewRaySamples(_numViewRaySamples) {\n        const numViewRaySamples = Math.max(0, Math.min(MAX_SAMPLE_POINTS, _numViewRaySamples));\n        this.atmosphereData.data[4] = numViewRaySamples;\n    }\n    _updateNumSunRaySamples(_numSunRaySamples) {\n        const numSunRaySamples = Math.max(0, Math.min(MAX_SAMPLE_POINTS, _numSunRaySamples));\n        this.atmosphereData.data[5] = numSunRaySamples;\n    }\n    bindInverseRotationInverseEarthScaleMatrix(uniform) {\n        if (!sync(this, uniform)) {\n            this._earthScaleMatrix.multiplyMatrixInverseMatrix(this._inverseEllipsoidRotationMatrix, this._scratchMatrix3d);\n            uniform.setMatrix3(Matrix3.fromMatrix3d(this._scratchMatrix3d));\n        }\n    }\n    bindInverseRotationInverseAtmosphereScaleMatrix(uniform) {\n        if (!sync(this, uniform)) {\n            this._atmosphereScaleMatrix.multiplyMatrixInverseMatrix(this._inverseEllipsoidRotationMatrix, this._scratchMatrix3d);\n            uniform.setMatrix3(Matrix3.fromMatrix3d(this._scratchMatrix3d));\n        }\n    }\n    bindEarthScaleMatrix(uniform) {\n        if (!sync(this, uniform))\n            uniform.setMatrix3(Matrix3.fromMatrix3d(this._earthScaleMatrix));\n    }\n    bindAtmosphereScaleMatrix(uniform) {\n        if (!sync(this, uniform))\n            uniform.setMatrix3(Matrix3.fromMatrix3d(this._atmosphereScaleMatrix));\n    }\n    bindInverseEarthScaleMatrix(uniform) {\n        if (!sync(this, uniform))\n            uniform.setMatrix3(Matrix3.fromMatrix3d(this._earthScaleMatrix.inverse()));\n    }\n    bindInverseAtmosphereScaleMatrix(uniform) {\n        if (!sync(this, uniform))\n            uniform.setMatrix3(Matrix3.fromMatrix3d(this._atmosphereScaleMatrix.inverse()));\n    }\n    get isDisposed() {\n        return true;\n    }\n    dispose() { }\n}\n//# sourceMappingURL=AtmosphereUniforms.js.map",
      "start": 1693508123839,
      "end": 1693508124069,
      "sourcemaps": null
    }
  ]
}
