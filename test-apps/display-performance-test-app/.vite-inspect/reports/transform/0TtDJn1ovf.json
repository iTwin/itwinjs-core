{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/pointcloud/model/GridIndex.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { Numbers } from \"../../system/runtime/Numbers\";\n/** @internal */\nexport class GridIndex {\n    /**\n     * Create a new point.\n     * @param x the x index.\n     * @param y the y index.\n     * @param z the z index.\n     */\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    /**\n     * Get the square distance to another cell.\n     * @param other the other cell.\n     * @return the square distance.\n     */\n    distanceSq(other) {\n        let dx = (other.x - this.x);\n        let dy = (other.y - this.y);\n        let dz = (other.z - this.z);\n        return (dx * dx) + (dy * dy) + (dz * dz);\n    }\n    /**\n     * Get the distance to another cell.\n     * @param other the other cell.\n     * @return the distance.\n     */\n    distance(other) {\n        return Numbers.sqrt(this.distanceSq(other));\n    }\n    /**\n     * Get a next-level index.\n     * @param index the index at the current level.\n     * @return the next-level index.\n     */\n    static getNextLevelIndex1(index) {\n        if (index < 0)\n            return Numbers.divInt(index - 1, 2);\n        return Numbers.divInt(index, 2);\n    }\n    /**\n     * Get a next-level index.\n     * @param nextLevel the index at the next level.\n     */\n    getNextLevelIndex(nextLevel) {\n        nextLevel.x = GridIndex.getNextLevelIndex1(this.x);\n        nextLevel.y = GridIndex.getNextLevelIndex1(this.y);\n        nextLevel.z = GridIndex.getNextLevelIndex1(this.z);\n    }\n    /**\n     * Does this point equal another?\n     * @param other the other point.\n     * @return true if equal.\n     */\n    same(other) {\n        return (other.x == this.x && other.y == this.y && other.z == this.z);\n    }\n    /**\n     * Create a copy.\n     * @return a copy.\n     */\n    copy() {\n        return new GridIndex(this.x, this.y, this.z);\n    }\n    /**\n     * Get the unique key.\n     * @return the unique key.\n     */\n    getKey() {\n        return \"{x:\" + this.x + \",y:\" + this.y + \",z:\" + this.z + \"}\";\n    }\n    /**\n     * The standard toString method.\n     * @see Object#toString\n     */\n    toString() {\n        return \"[GridPoint3D:\" + this.x + \",\" + this.y + \",\" + this.z + \"]\";\n    }\n}\n//# sourceMappingURL=GridIndex.js.map",
      "start": 1693508125304,
      "end": 1693508125374,
      "sourcemaps": null
    }
  ]
}
