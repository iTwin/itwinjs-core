{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/geometry/lib/esm/serialization/BGFBAccessors.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Serialization\n */\nimport { flatbuffers } from \"flatbuffers\";\n/* eslint-disable @typescript-eslint/naming-convention */\n/* eslint-disable @typescript-eslint/explicit-member-accessibility */\n// cspell:word flatbuffers\n// cspell:word Akima\n/* eslint-disable @itwin/prefer-get */\n// cspell:word flatbuffers\n/** @packageDocumentation\n * @module Serialization\n */\nexport var BGFBAccessors;\n(function (BGFBAccessors) {\n    // automatically generated by the FlatBuffers compiler, do not modify\n    /**\n     * @enum {number}\n     */\n    let LoopTypeEnum;\n    (function (LoopTypeEnum) {\n        LoopTypeEnum[LoopTypeEnum[\"Parity\"] = 1] = \"Parity\";\n        LoopTypeEnum[LoopTypeEnum[\"InteriorToLeft\"] = 2] = \"InteriorToLeft\";\n    })(LoopTypeEnum = BGFBAccessors.LoopTypeEnum || (BGFBAccessors.LoopTypeEnum = {}));\n    /**\n     * @enum {number}\n     */\n    let VariantGeometryUnion;\n    (function (VariantGeometryUnion) {\n        VariantGeometryUnion[VariantGeometryUnion[\"tagNONE\"] = 0] = \"tagNONE\";\n        VariantGeometryUnion[VariantGeometryUnion[\"tagLineSegment\"] = 1] = \"tagLineSegment\";\n        VariantGeometryUnion[VariantGeometryUnion[\"tagEllipticArc\"] = 2] = \"tagEllipticArc\";\n        VariantGeometryUnion[VariantGeometryUnion[\"tagBsplineCurve\"] = 3] = \"tagBsplineCurve\";\n        VariantGeometryUnion[VariantGeometryUnion[\"tagLineString\"] = 4] = \"tagLineString\";\n        VariantGeometryUnion[VariantGeometryUnion[\"tagCurveVector\"] = 5] = \"tagCurveVector\";\n        VariantGeometryUnion[VariantGeometryUnion[\"tagDgnCone\"] = 6] = \"tagDgnCone\";\n        VariantGeometryUnion[VariantGeometryUnion[\"tagDgnSphere\"] = 7] = \"tagDgnSphere\";\n        VariantGeometryUnion[VariantGeometryUnion[\"tagDgnTorusPipe\"] = 8] = \"tagDgnTorusPipe\";\n        VariantGeometryUnion[VariantGeometryUnion[\"tagDgnBox\"] = 9] = \"tagDgnBox\";\n        VariantGeometryUnion[VariantGeometryUnion[\"tagDgnExtrusion\"] = 10] = \"tagDgnExtrusion\";\n        VariantGeometryUnion[VariantGeometryUnion[\"tagDgnRotationalSweep\"] = 11] = \"tagDgnRotationalSweep\";\n        VariantGeometryUnion[VariantGeometryUnion[\"tagDgnRuledSweep\"] = 12] = \"tagDgnRuledSweep\";\n        VariantGeometryUnion[VariantGeometryUnion[\"tagPolyface\"] = 13] = \"tagPolyface\";\n        VariantGeometryUnion[VariantGeometryUnion[\"tagBsplineSurface\"] = 14] = \"tagBsplineSurface\";\n        VariantGeometryUnion[VariantGeometryUnion[\"tagVectorOfVariantGeometry\"] = 15] = \"tagVectorOfVariantGeometry\";\n        VariantGeometryUnion[VariantGeometryUnion[\"tagInterpolationCurve\"] = 16] = \"tagInterpolationCurve\";\n        VariantGeometryUnion[VariantGeometryUnion[\"tagTransitionSpiral\"] = 17] = \"tagTransitionSpiral\";\n        VariantGeometryUnion[VariantGeometryUnion[\"tagPointString\"] = 18] = \"tagPointString\";\n        VariantGeometryUnion[VariantGeometryUnion[\"tagAkimaCurve\"] = 19] = \"tagAkimaCurve\";\n        VariantGeometryUnion[VariantGeometryUnion[\"tagCatenaryCurve\"] = 20] = \"tagCatenaryCurve\";\n        VariantGeometryUnion[VariantGeometryUnion[\"tagPartialCurve\"] = 21] = \"tagPartialCurve\";\n    })(VariantGeometryUnion = BGFBAccessors.VariantGeometryUnion || (BGFBAccessors.VariantGeometryUnion = {}));\n    /**\n     * @constructor\n     */\n    class DPoint3d {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DPoint3d\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @returns number\n         */\n        x() {\n            return this.bb.readFloat64(this.bb_pos);\n        }\n        /**\n         * @returns number\n         */\n        y() {\n            return this.bb.readFloat64(this.bb_pos + 8);\n        }\n        /**\n         * @returns number\n         */\n        z() {\n            return this.bb.readFloat64(this.bb_pos + 16);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number x\n         * @param number y\n         * @param number z\n         * @returns flatbuffers.Offset\n         */\n        static createDPoint3d(builder, x, y, z) {\n            builder.prep(8, 24);\n            builder.writeFloat64(z);\n            builder.writeFloat64(y);\n            builder.writeFloat64(x);\n            return builder.offset();\n        }\n    }\n    BGFBAccessors.DPoint3d = DPoint3d;\n    /**\n     * @constructor\n     */\n    class DRay3d {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DRay3d\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @returns number\n         */\n        x() {\n            return this.bb.readFloat64(this.bb_pos);\n        }\n        /**\n         * @returns number\n         */\n        y() {\n            return this.bb.readFloat64(this.bb_pos + 8);\n        }\n        /**\n         * @returns number\n         */\n        z() {\n            return this.bb.readFloat64(this.bb_pos + 16);\n        }\n        /**\n         * @returns number\n         */\n        ux() {\n            return this.bb.readFloat64(this.bb_pos + 24);\n        }\n        /**\n         * @returns number\n         */\n        uy() {\n            return this.bb.readFloat64(this.bb_pos + 32);\n        }\n        /**\n         * @returns number\n         */\n        uz() {\n            return this.bb.readFloat64(this.bb_pos + 40);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number x\n         * @param number y\n         * @param number z\n         * @param number ux\n         * @param number uy\n         * @param number uz\n         * @returns flatbuffers.Offset\n         */\n        static createDRay3d(builder, x, y, z, ux, uy, uz) {\n            builder.prep(8, 48);\n            builder.writeFloat64(uz);\n            builder.writeFloat64(uy);\n            builder.writeFloat64(ux);\n            builder.writeFloat64(z);\n            builder.writeFloat64(y);\n            builder.writeFloat64(x);\n            return builder.offset();\n        }\n    }\n    BGFBAccessors.DRay3d = DRay3d;\n    /**\n     * @constructor\n     */\n    class DPoint2d {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DPoint2d\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @returns number\n         */\n        x() {\n            return this.bb.readFloat64(this.bb_pos);\n        }\n        /**\n         * @returns number\n         */\n        y() {\n            return this.bb.readFloat64(this.bb_pos + 8);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number x\n         * @param number y\n         * @returns flatbuffers.Offset\n         */\n        static createDPoint2d(builder, x, y) {\n            builder.prep(8, 16);\n            builder.writeFloat64(y);\n            builder.writeFloat64(x);\n            return builder.offset();\n        }\n    }\n    BGFBAccessors.DPoint2d = DPoint2d;\n    /**\n     * @constructor\n     */\n    class DVector3d {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DVector3d\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @returns number\n         */\n        x() {\n            return this.bb.readFloat64(this.bb_pos);\n        }\n        /**\n         * @returns number\n         */\n        y() {\n            return this.bb.readFloat64(this.bb_pos + 8);\n        }\n        /**\n         * @returns number\n         */\n        z() {\n            return this.bb.readFloat64(this.bb_pos + 16);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number x\n         * @param number y\n         * @param number z\n         * @returns flatbuffers.Offset\n         */\n        static createDVector3d(builder, x, y, z) {\n            builder.prep(8, 24);\n            builder.writeFloat64(z);\n            builder.writeFloat64(y);\n            builder.writeFloat64(x);\n            return builder.offset();\n        }\n    }\n    BGFBAccessors.DVector3d = DVector3d;\n    /**\n     * @constructor\n     */\n    class Angle {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Angle\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @returns number\n         */\n        degrees() {\n            return this.bb.readFloat64(this.bb_pos);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number degrees\n         * @returns flatbuffers.Offset\n         */\n        static createAngle(builder, degrees) {\n            builder.prep(8, 8);\n            builder.writeFloat64(degrees);\n            return builder.offset();\n        }\n    }\n    BGFBAccessors.Angle = Angle;\n    /**\n     * @constructor\n     */\n    class DEllipse3d {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DEllipse3d\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @returns number\n         */\n        centerX() {\n            return this.bb.readFloat64(this.bb_pos);\n        }\n        /**\n         * @returns number\n         */\n        centerY() {\n            return this.bb.readFloat64(this.bb_pos + 8);\n        }\n        /**\n         * @returns number\n         */\n        centerZ() {\n            return this.bb.readFloat64(this.bb_pos + 16);\n        }\n        /**\n         * @returns number\n         */\n        vector0X() {\n            return this.bb.readFloat64(this.bb_pos + 24);\n        }\n        /**\n         * @returns number\n         */\n        vector0Y() {\n            return this.bb.readFloat64(this.bb_pos + 32);\n        }\n        /**\n         * @returns number\n         */\n        vector0Z() {\n            return this.bb.readFloat64(this.bb_pos + 40);\n        }\n        /**\n         * @returns number\n         */\n        vector90X() {\n            return this.bb.readFloat64(this.bb_pos + 48);\n        }\n        /**\n         * @returns number\n         */\n        vector90Y() {\n            return this.bb.readFloat64(this.bb_pos + 56);\n        }\n        /**\n         * @returns number\n         */\n        vector90Z() {\n            return this.bb.readFloat64(this.bb_pos + 64);\n        }\n        /**\n         * @returns number\n         */\n        startRadians() {\n            return this.bb.readFloat64(this.bb_pos + 72);\n        }\n        /**\n         * @returns number\n         */\n        sweepRadians() {\n            return this.bb.readFloat64(this.bb_pos + 80);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number centerX\n         * @param number centerY\n         * @param number centerZ\n         * @param number vector0X\n         * @param number vector0Y\n         * @param number vector0Z\n         * @param number vector90X\n         * @param number vector90Y\n         * @param number vector90Z\n         * @param number startRadians\n         * @param number sweepRadians\n         * @returns flatbuffers.Offset\n         */\n        static createDEllipse3d(builder, centerX, centerY, centerZ, vector0X, vector0Y, vector0Z, vector90X, vector90Y, vector90Z, startRadians, sweepRadians) {\n            builder.prep(8, 88);\n            builder.writeFloat64(sweepRadians);\n            builder.writeFloat64(startRadians);\n            builder.writeFloat64(vector90Z);\n            builder.writeFloat64(vector90Y);\n            builder.writeFloat64(vector90X);\n            builder.writeFloat64(vector0Z);\n            builder.writeFloat64(vector0Y);\n            builder.writeFloat64(vector0X);\n            builder.writeFloat64(centerZ);\n            builder.writeFloat64(centerY);\n            builder.writeFloat64(centerX);\n            return builder.offset();\n        }\n    }\n    BGFBAccessors.DEllipse3d = DEllipse3d;\n    /**\n     * @constructor\n     */\n    class DSegment3d {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DSegment3d\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @returns number\n         */\n        point0X() {\n            return this.bb.readFloat64(this.bb_pos);\n        }\n        /**\n         * @returns number\n         */\n        point0Y() {\n            return this.bb.readFloat64(this.bb_pos + 8);\n        }\n        /**\n         * @returns number\n         */\n        point0Z() {\n            return this.bb.readFloat64(this.bb_pos + 16);\n        }\n        /**\n         * @returns number\n         */\n        point1X() {\n            return this.bb.readFloat64(this.bb_pos + 24);\n        }\n        /**\n         * @returns number\n         */\n        point1Y() {\n            return this.bb.readFloat64(this.bb_pos + 32);\n        }\n        /**\n         * @returns number\n         */\n        point1Z() {\n            return this.bb.readFloat64(this.bb_pos + 40);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number point0X\n         * @param number point0Y\n         * @param number point0Z\n         * @param number point1X\n         * @param number point1Y\n         * @param number point1Z\n         * @returns flatbuffers.Offset\n         */\n        static createDSegment3d(builder, point0X, point0Y, point0Z, point1X, point1Y, point1Z) {\n            builder.prep(8, 48);\n            builder.writeFloat64(point1Z);\n            builder.writeFloat64(point1Y);\n            builder.writeFloat64(point1X);\n            builder.writeFloat64(point0Z);\n            builder.writeFloat64(point0Y);\n            builder.writeFloat64(point0X);\n            return builder.offset();\n        }\n    }\n    BGFBAccessors.DSegment3d = DSegment3d;\n    /**\n     * @constructor\n     */\n    class DTransform3d {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DTransform3d\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @returns number\n         */\n        axx() {\n            return this.bb.readFloat64(this.bb_pos);\n        }\n        /**\n         * @returns number\n         */\n        axy() {\n            return this.bb.readFloat64(this.bb_pos + 8);\n        }\n        /**\n         * @returns number\n         */\n        axz() {\n            return this.bb.readFloat64(this.bb_pos + 16);\n        }\n        /**\n         * @returns number\n         */\n        axw() {\n            return this.bb.readFloat64(this.bb_pos + 24);\n        }\n        /**\n         * @returns number\n         */\n        ayx() {\n            return this.bb.readFloat64(this.bb_pos + 32);\n        }\n        /**\n         * @returns number\n         */\n        ayy() {\n            return this.bb.readFloat64(this.bb_pos + 40);\n        }\n        /**\n         * @returns number\n         */\n        ayz() {\n            return this.bb.readFloat64(this.bb_pos + 48);\n        }\n        /**\n         * @returns number\n         */\n        ayw() {\n            return this.bb.readFloat64(this.bb_pos + 56);\n        }\n        /**\n         * @returns number\n         */\n        azx() {\n            return this.bb.readFloat64(this.bb_pos + 64);\n        }\n        /**\n         * @returns number\n         */\n        azy() {\n            return this.bb.readFloat64(this.bb_pos + 72);\n        }\n        /**\n         * @returns number\n         */\n        azz() {\n            return this.bb.readFloat64(this.bb_pos + 80);\n        }\n        /**\n         * @returns number\n         */\n        azw() {\n            return this.bb.readFloat64(this.bb_pos + 88);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number axx\n         * @param number axy\n         * @param number axz\n         * @param number axw\n         * @param number ayx\n         * @param number ayy\n         * @param number ayz\n         * @param number ayw\n         * @param number azx\n         * @param number azy\n         * @param number azz\n         * @param number azw\n         * @returns flatbuffers.Offset\n         */\n        static createDTransform3d(builder, axx, axy, axz, axw, ayx, ayy, ayz, ayw, azx, azy, azz, azw) {\n            builder.prep(8, 96);\n            builder.writeFloat64(azw);\n            builder.writeFloat64(azz);\n            builder.writeFloat64(azy);\n            builder.writeFloat64(azx);\n            builder.writeFloat64(ayw);\n            builder.writeFloat64(ayz);\n            builder.writeFloat64(ayy);\n            builder.writeFloat64(ayx);\n            builder.writeFloat64(axw);\n            builder.writeFloat64(axz);\n            builder.writeFloat64(axy);\n            builder.writeFloat64(axx);\n            return builder.offset();\n        }\n    }\n    BGFBAccessors.DTransform3d = DTransform3d;\n    /**\n     * @constructor\n     */\n    class DgnBoxDetail {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DgnBoxDetail\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @returns number\n         */\n        baseOriginX() {\n            return this.bb.readFloat64(this.bb_pos);\n        }\n        /**\n         * @returns number\n         */\n        baseOriginY() {\n            return this.bb.readFloat64(this.bb_pos + 8);\n        }\n        /**\n         * @returns number\n         */\n        baseOriginZ() {\n            return this.bb.readFloat64(this.bb_pos + 16);\n        }\n        /**\n         * @returns number\n         */\n        topOriginX() {\n            return this.bb.readFloat64(this.bb_pos + 24);\n        }\n        /**\n         * @returns number\n         */\n        topOriginY() {\n            return this.bb.readFloat64(this.bb_pos + 32);\n        }\n        /**\n         * @returns number\n         */\n        topOriginZ() {\n            return this.bb.readFloat64(this.bb_pos + 40);\n        }\n        /**\n         * @returns number\n         */\n        vectorXX() {\n            return this.bb.readFloat64(this.bb_pos + 48);\n        }\n        /**\n         * @returns number\n         */\n        vectorXY() {\n            return this.bb.readFloat64(this.bb_pos + 56);\n        }\n        /**\n         * @returns number\n         */\n        vectorXZ() {\n            return this.bb.readFloat64(this.bb_pos + 64);\n        }\n        /**\n         * @returns number\n         */\n        vectorYX() {\n            return this.bb.readFloat64(this.bb_pos + 72);\n        }\n        /**\n         * @returns number\n         */\n        vectorYY() {\n            return this.bb.readFloat64(this.bb_pos + 80);\n        }\n        /**\n         * @returns number\n         */\n        vectorYZ() {\n            return this.bb.readFloat64(this.bb_pos + 88);\n        }\n        /**\n         * @returns number\n         */\n        baseX() {\n            return this.bb.readFloat64(this.bb_pos + 96);\n        }\n        /**\n         * @returns number\n         */\n        baseY() {\n            return this.bb.readFloat64(this.bb_pos + 104);\n        }\n        /**\n         * @returns number\n         */\n        topX() {\n            return this.bb.readFloat64(this.bb_pos + 112);\n        }\n        /**\n         * @returns number\n         */\n        topY() {\n            return this.bb.readFloat64(this.bb_pos + 120);\n        }\n        /**\n         * @returns boolean\n         */\n        capped() {\n            return !!this.bb.readInt8(this.bb_pos + 128);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number baseOriginX\n         * @param number baseOriginY\n         * @param number baseOriginZ\n         * @param number topOriginX\n         * @param number topOriginY\n         * @param number topOriginZ\n         * @param number vectorXX\n         * @param number vectorXY\n         * @param number vectorXZ\n         * @param number vectorYX\n         * @param number vectorYY\n         * @param number vectorYZ\n         * @param number baseX\n         * @param number baseY\n         * @param number topX\n         * @param number topY\n         * @param boolean capped\n         * @returns flatbuffers.Offset\n         */\n        static createDgnBoxDetail(builder, baseOriginX, baseOriginY, baseOriginZ, topOriginX, topOriginY, topOriginZ, vectorXX, vectorXY, vectorXZ, vectorYX, vectorYY, vectorYZ, baseX, baseY, topX, topY, capped) {\n            builder.prep(8, 136);\n            builder.pad(7);\n            builder.writeInt8(+capped);\n            builder.writeFloat64(topY);\n            builder.writeFloat64(topX);\n            builder.writeFloat64(baseY);\n            builder.writeFloat64(baseX);\n            builder.writeFloat64(vectorYZ);\n            builder.writeFloat64(vectorYY);\n            builder.writeFloat64(vectorYX);\n            builder.writeFloat64(vectorXZ);\n            builder.writeFloat64(vectorXY);\n            builder.writeFloat64(vectorXX);\n            builder.writeFloat64(topOriginZ);\n            builder.writeFloat64(topOriginY);\n            builder.writeFloat64(topOriginX);\n            builder.writeFloat64(baseOriginZ);\n            builder.writeFloat64(baseOriginY);\n            builder.writeFloat64(baseOriginX);\n            return builder.offset();\n        }\n    }\n    BGFBAccessors.DgnBoxDetail = DgnBoxDetail;\n    /**\n     * @constructor\n     */\n    class DgnSphereDetail {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DgnSphereDetail\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param DTransform3d= obj\n         * @returns DTransform3d|null\n         */\n        localToWorld(obj) {\n            return (obj || new DTransform3d()).__init(this.bb_pos, this.bb);\n        }\n        /**\n         * @returns number\n         */\n        startLatitudeRadians() {\n            return this.bb.readFloat64(this.bb_pos + 96);\n        }\n        /**\n         * @returns number\n         */\n        latitudeSweepRadians() {\n            return this.bb.readFloat64(this.bb_pos + 104);\n        }\n        /**\n         * @returns boolean\n         */\n        capped() {\n            return !!this.bb.readInt8(this.bb_pos + 112);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number localToWorld_axx\n         * @param number localToWorld_axy\n         * @param number localToWorld_axz\n         * @param number localToWorld_axw\n         * @param number localToWorld_ayx\n         * @param number localToWorld_ayy\n         * @param number localToWorld_ayz\n         * @param number localToWorld_ayw\n         * @param number localToWorld_azx\n         * @param number localToWorld_azy\n         * @param number localToWorld_azz\n         * @param number localToWorld_azw\n         * @param number startLatitudeRadians\n         * @param number latitudeSweepRadians\n         * @param boolean capped\n         * @returns flatbuffers.Offset\n         */\n        static createDgnSphereDetail(builder, localToWorld_axx, localToWorld_axy, localToWorld_axz, localToWorld_axw, localToWorld_ayx, localToWorld_ayy, localToWorld_ayz, localToWorld_ayw, localToWorld_azx, localToWorld_azy, localToWorld_azz, localToWorld_azw, startLatitudeRadians, latitudeSweepRadians, capped) {\n            builder.prep(8, 120);\n            builder.pad(7);\n            builder.writeInt8(+capped);\n            builder.writeFloat64(latitudeSweepRadians);\n            builder.writeFloat64(startLatitudeRadians);\n            builder.prep(8, 96);\n            builder.writeFloat64(localToWorld_azw);\n            builder.writeFloat64(localToWorld_azz);\n            builder.writeFloat64(localToWorld_azy);\n            builder.writeFloat64(localToWorld_azx);\n            builder.writeFloat64(localToWorld_ayw);\n            builder.writeFloat64(localToWorld_ayz);\n            builder.writeFloat64(localToWorld_ayy);\n            builder.writeFloat64(localToWorld_ayx);\n            builder.writeFloat64(localToWorld_axw);\n            builder.writeFloat64(localToWorld_axz);\n            builder.writeFloat64(localToWorld_axy);\n            builder.writeFloat64(localToWorld_axx);\n            return builder.offset();\n        }\n    }\n    BGFBAccessors.DgnSphereDetail = DgnSphereDetail;\n    /**\n     * @constructor\n     */\n    class DgnConeDetail {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DgnConeDetail\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @returns number\n         */\n        centerAX() {\n            return this.bb.readFloat64(this.bb_pos);\n        }\n        /**\n         * @returns number\n         */\n        centerAY() {\n            return this.bb.readFloat64(this.bb_pos + 8);\n        }\n        /**\n         * @returns number\n         */\n        centerAZ() {\n            return this.bb.readFloat64(this.bb_pos + 16);\n        }\n        /**\n         * @returns number\n         */\n        centerBX() {\n            return this.bb.readFloat64(this.bb_pos + 24);\n        }\n        /**\n         * @returns number\n         */\n        centerBY() {\n            return this.bb.readFloat64(this.bb_pos + 32);\n        }\n        /**\n         * @returns number\n         */\n        centerBZ() {\n            return this.bb.readFloat64(this.bb_pos + 40);\n        }\n        /**\n         * @returns number\n         */\n        vector0X() {\n            return this.bb.readFloat64(this.bb_pos + 48);\n        }\n        /**\n         * @returns number\n         */\n        vector0Y() {\n            return this.bb.readFloat64(this.bb_pos + 56);\n        }\n        /**\n         * @returns number\n         */\n        vector0Z() {\n            return this.bb.readFloat64(this.bb_pos + 64);\n        }\n        /**\n         * @returns number\n         */\n        vector90X() {\n            return this.bb.readFloat64(this.bb_pos + 72);\n        }\n        /**\n         * @returns number\n         */\n        vector90Y() {\n            return this.bb.readFloat64(this.bb_pos + 80);\n        }\n        /**\n         * @returns number\n         */\n        vector90Z() {\n            return this.bb.readFloat64(this.bb_pos + 88);\n        }\n        /**\n         * @returns number\n         */\n        radiusA() {\n            return this.bb.readFloat64(this.bb_pos + 96);\n        }\n        /**\n         * @returns number\n         */\n        radiusB() {\n            return this.bb.readFloat64(this.bb_pos + 104);\n        }\n        /**\n         * @returns boolean\n         */\n        capped() {\n            return !!this.bb.readInt8(this.bb_pos + 112);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number centerAX\n         * @param number centerAY\n         * @param number centerAZ\n         * @param number centerBX\n         * @param number centerBY\n         * @param number centerBZ\n         * @param number vector0X\n         * @param number vector0Y\n         * @param number vector0Z\n         * @param number vector90X\n         * @param number vector90Y\n         * @param number vector90Z\n         * @param number radiusA\n         * @param number radiusB\n         * @param boolean capped\n         * @returns flatbuffers.Offset\n         */\n        static createDgnConeDetail(builder, centerAX, centerAY, centerAZ, centerBX, centerBY, centerBZ, vector0X, vector0Y, vector0Z, vector90X, vector90Y, vector90Z, radiusA, radiusB, capped) {\n            builder.prep(8, 120);\n            builder.pad(7);\n            builder.writeInt8(+capped);\n            builder.writeFloat64(radiusB);\n            builder.writeFloat64(radiusA);\n            builder.writeFloat64(vector90Z);\n            builder.writeFloat64(vector90Y);\n            builder.writeFloat64(vector90X);\n            builder.writeFloat64(vector0Z);\n            builder.writeFloat64(vector0Y);\n            builder.writeFloat64(vector0X);\n            builder.writeFloat64(centerBZ);\n            builder.writeFloat64(centerBY);\n            builder.writeFloat64(centerBX);\n            builder.writeFloat64(centerAZ);\n            builder.writeFloat64(centerAY);\n            builder.writeFloat64(centerAX);\n            return builder.offset();\n        }\n    }\n    BGFBAccessors.DgnConeDetail = DgnConeDetail;\n    /**\n     * @constructor\n     */\n    class DgnTorusPipeDetail {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DgnTorusPipeDetail\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @returns number\n         */\n        centerX() {\n            return this.bb.readFloat64(this.bb_pos);\n        }\n        /**\n         * @returns number\n         */\n        centerY() {\n            return this.bb.readFloat64(this.bb_pos + 8);\n        }\n        /**\n         * @returns number\n         */\n        centerZ() {\n            return this.bb.readFloat64(this.bb_pos + 16);\n        }\n        /**\n         * @returns number\n         */\n        vectorXX() {\n            return this.bb.readFloat64(this.bb_pos + 24);\n        }\n        /**\n         * @returns number\n         */\n        vectorXY() {\n            return this.bb.readFloat64(this.bb_pos + 32);\n        }\n        /**\n         * @returns number\n         */\n        vectorXZ() {\n            return this.bb.readFloat64(this.bb_pos + 40);\n        }\n        /**\n         * @returns number\n         */\n        vectorYX() {\n            return this.bb.readFloat64(this.bb_pos + 48);\n        }\n        /**\n         * @returns number\n         */\n        vectorYY() {\n            return this.bb.readFloat64(this.bb_pos + 56);\n        }\n        /**\n         * @returns number\n         */\n        vectorYZ() {\n            return this.bb.readFloat64(this.bb_pos + 64);\n        }\n        /**\n         * @returns number\n         */\n        majorRadius() {\n            return this.bb.readFloat64(this.bb_pos + 72);\n        }\n        /**\n         * @returns number\n         */\n        minorRadius() {\n            return this.bb.readFloat64(this.bb_pos + 80);\n        }\n        /**\n         * @returns number\n         */\n        sweepRadians() {\n            return this.bb.readFloat64(this.bb_pos + 88);\n        }\n        /**\n         * @returns boolean\n         */\n        capped() {\n            return !!this.bb.readInt8(this.bb_pos + 96);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number centerX\n         * @param number centerY\n         * @param number centerZ\n         * @param number vectorXX\n         * @param number vectorXY\n         * @param number vectorXZ\n         * @param number vectorYX\n         * @param number vectorYY\n         * @param number vectorYZ\n         * @param number majorRadius\n         * @param number minorRadius\n         * @param number sweepRadians\n         * @param boolean capped\n         * @returns flatbuffers.Offset\n         */\n        static createDgnTorusPipeDetail(builder, centerX, centerY, centerZ, vectorXX, vectorXY, vectorXZ, vectorYX, vectorYY, vectorYZ, majorRadius, minorRadius, sweepRadians, capped) {\n            builder.prep(8, 104);\n            builder.pad(7);\n            builder.writeInt8(+capped);\n            builder.writeFloat64(sweepRadians);\n            builder.writeFloat64(minorRadius);\n            builder.writeFloat64(majorRadius);\n            builder.writeFloat64(vectorYZ);\n            builder.writeFloat64(vectorYY);\n            builder.writeFloat64(vectorYX);\n            builder.writeFloat64(vectorXZ);\n            builder.writeFloat64(vectorXY);\n            builder.writeFloat64(vectorXX);\n            builder.writeFloat64(centerZ);\n            builder.writeFloat64(centerY);\n            builder.writeFloat64(centerX);\n            return builder.offset();\n        }\n    }\n    BGFBAccessors.DgnTorusPipeDetail = DgnTorusPipeDetail;\n    /**\n     * @constructor\n     */\n    class LineSegment {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LineSegment\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LineSegment= obj\n         * @returns LineSegment\n         */\n        static getRootAsLineSegment(bb, obj) {\n            return (obj || new LineSegment()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LineSegment= obj\n         * @returns LineSegment\n         */\n        static getSizePrefixedRootAsLineSegment(bb, obj) {\n            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n            return (obj || new LineSegment()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param DSegment3d= obj\n         * @returns DSegment3d|null\n         */\n        segment(obj) {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? (obj || new DSegment3d()).__init(this.bb_pos + offset, this.bb) : null;\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLineSegment(builder) {\n            builder.startObject(1);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset segmentOffset\n         */\n        static addSegment(builder, segmentOffset) {\n            builder.addFieldStruct(0, segmentOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLineSegment(builder) {\n            const offset = builder.endObject();\n            return offset;\n        }\n        static createLineSegment(builder, segmentOffset) {\n            LineSegment.startLineSegment(builder);\n            LineSegment.addSegment(builder, segmentOffset);\n            return LineSegment.endLineSegment(builder);\n        }\n    }\n    BGFBAccessors.LineSegment = LineSegment;\n    /**\n     * @constructor\n     */\n    class LineString {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LineString\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LineString= obj\n         * @returns LineString\n         */\n        static getRootAsLineString(bb, obj) {\n            return (obj || new LineString()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LineString= obj\n         * @returns LineString\n         */\n        static getSizePrefixedRootAsLineString(bb, obj) {\n            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n            return (obj || new LineString()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        points(index) {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;\n        }\n        /**\n         * @returns number\n         */\n        pointsLength() {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Float64Array\n         */\n        pointsArray() {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLineString(builder) {\n            builder.startObject(1);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset pointsOffset\n         */\n        static addPoints(builder, pointsOffset) {\n            builder.addFieldOffset(0, pointsOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createPointsVector(builder, data) {\n            builder.startVector(8, data.length, 8);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addFloat64(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startPointsVector(builder, numElems) {\n            builder.startVector(8, numElems, 8);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLineString(builder) {\n            const offset = builder.endObject();\n            return offset;\n        }\n        static createLineString(builder, pointsOffset) {\n            LineString.startLineString(builder);\n            LineString.addPoints(builder, pointsOffset);\n            return LineString.endLineString(builder);\n        }\n    }\n    BGFBAccessors.LineString = LineString;\n    /**\n     * @constructor\n     */\n    class PointString {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns PointString\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param PointString= obj\n         * @returns PointString\n         */\n        static getRootAsPointString(bb, obj) {\n            return (obj || new PointString()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param PointString= obj\n         * @returns PointString\n         */\n        static getSizePrefixedRootAsPointString(bb, obj) {\n            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n            return (obj || new PointString()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        points(index) {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;\n        }\n        /**\n         * @returns number\n         */\n        pointsLength() {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Float64Array\n         */\n        pointsArray() {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startPointString(builder) {\n            builder.startObject(1);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset pointsOffset\n         */\n        static addPoints(builder, pointsOffset) {\n            builder.addFieldOffset(0, pointsOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createPointsVector(builder, data) {\n            builder.startVector(8, data.length, 8);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addFloat64(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startPointsVector(builder, numElems) {\n            builder.startVector(8, numElems, 8);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endPointString(builder) {\n            const offset = builder.endObject();\n            return offset;\n        }\n        static createPointString(builder, pointsOffset) {\n            PointString.startPointString(builder);\n            PointString.addPoints(builder, pointsOffset);\n            return PointString.endPointString(builder);\n        }\n    }\n    BGFBAccessors.PointString = PointString;\n    /**\n     * @constructor\n     */\n    class EllipticArc {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns EllipticArc\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param EllipticArc= obj\n         * @returns EllipticArc\n         */\n        static getRootAsEllipticArc(bb, obj) {\n            return (obj || new EllipticArc()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param EllipticArc= obj\n         * @returns EllipticArc\n         */\n        static getSizePrefixedRootAsEllipticArc(bb, obj) {\n            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n            return (obj || new EllipticArc()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param DEllipse3d= obj\n         * @returns DEllipse3d|null\n         */\n        arc(obj) {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? (obj || new DEllipse3d()).__init(this.bb_pos + offset, this.bb) : null;\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startEllipticArc(builder) {\n            builder.startObject(1);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset arcOffset\n         */\n        static addArc(builder, arcOffset) {\n            builder.addFieldStruct(0, arcOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endEllipticArc(builder) {\n            const offset = builder.endObject();\n            return offset;\n        }\n        static createEllipticArc(builder, arcOffset) {\n            EllipticArc.startEllipticArc(builder);\n            EllipticArc.addArc(builder, arcOffset);\n            return EllipticArc.endEllipticArc(builder);\n        }\n    }\n    BGFBAccessors.EllipticArc = EllipticArc;\n    /**\n     * @constructor\n     */\n    class BsplineCurve {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns BsplineCurve\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param BsplineCurve= obj\n         * @returns BsplineCurve\n         */\n        static getRootAsBsplineCurve(bb, obj) {\n            return (obj || new BsplineCurve()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param BsplineCurve= obj\n         * @returns BsplineCurve\n         */\n        static getSizePrefixedRootAsBsplineCurve(bb, obj) {\n            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n            return (obj || new BsplineCurve()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @returns number\n         */\n        order() {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns boolean\n         */\n        closed() {\n            const offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        poles(index) {\n            const offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;\n        }\n        /**\n         * @returns number\n         */\n        polesLength() {\n            const offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Float64Array\n         */\n        polesArray() {\n            const offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        weights(index) {\n            const offset = this.bb.__offset(this.bb_pos, 10);\n            return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;\n        }\n        /**\n         * @returns number\n         */\n        weightsLength() {\n            const offset = this.bb.__offset(this.bb_pos, 10);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Float64Array\n         */\n        weightsArray() {\n            const offset = this.bb.__offset(this.bb_pos, 10);\n            return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        knots(index) {\n            const offset = this.bb.__offset(this.bb_pos, 12);\n            return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;\n        }\n        /**\n         * @returns number\n         */\n        knotsLength() {\n            const offset = this.bb.__offset(this.bb_pos, 12);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Float64Array\n         */\n        knotsArray() {\n            const offset = this.bb.__offset(this.bb_pos, 12);\n            return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBsplineCurve(builder) {\n            builder.startObject(5);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number order\n         */\n        static addOrder(builder, order) {\n            builder.addFieldInt32(0, order, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean closed\n         */\n        static addClosed(builder, closed) {\n            builder.addFieldInt8(1, +closed, +false);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset polesOffset\n         */\n        static addPoles(builder, polesOffset) {\n            builder.addFieldOffset(2, polesOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createPolesVector(builder, data) {\n            builder.startVector(8, data.length, 8);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addFloat64(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startPolesVector(builder, numElems) {\n            builder.startVector(8, numElems, 8);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset weightsOffset\n         */\n        static addWeights(builder, weightsOffset) {\n            builder.addFieldOffset(3, weightsOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createWeightsVector(builder, data) {\n            builder.startVector(8, data.length, 8);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addFloat64(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startWeightsVector(builder, numElems) {\n            builder.startVector(8, numElems, 8);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset knotsOffset\n         */\n        static addKnots(builder, knotsOffset) {\n            builder.addFieldOffset(4, knotsOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createKnotsVector(builder, data) {\n            builder.startVector(8, data.length, 8);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addFloat64(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startKnotsVector(builder, numElems) {\n            builder.startVector(8, numElems, 8);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBsplineCurve(builder) {\n            const offset = builder.endObject();\n            return offset;\n        }\n        static createBsplineCurve(builder, order, closed, polesOffset, weightsOffset, knotsOffset) {\n            BsplineCurve.startBsplineCurve(builder);\n            BsplineCurve.addOrder(builder, order);\n            BsplineCurve.addClosed(builder, closed);\n            BsplineCurve.addPoles(builder, polesOffset);\n            BsplineCurve.addWeights(builder, weightsOffset);\n            BsplineCurve.addKnots(builder, knotsOffset);\n            return BsplineCurve.endBsplineCurve(builder);\n        }\n    }\n    BGFBAccessors.BsplineCurve = BsplineCurve;\n    /**\n     * @constructor\n     */\n    class InterpolationCurve {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns InterpolationCurve\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param InterpolationCurve= obj\n         * @returns InterpolationCurve\n         */\n        static getRootAsInterpolationCurve(bb, obj) {\n            return (obj || new InterpolationCurve()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param InterpolationCurve= obj\n         * @returns InterpolationCurve\n         */\n        static getSizePrefixedRootAsInterpolationCurve(bb, obj) {\n            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n            return (obj || new InterpolationCurve()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @returns number\n         */\n        order() {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns boolean\n         */\n        closed() {\n            const offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n        }\n        /**\n         * @returns number\n         */\n        isChordLenKnots() {\n            const offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns number\n         */\n        isColinearTangents() {\n            const offset = this.bb.__offset(this.bb_pos, 10);\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns number\n         */\n        isChordLenTangents() {\n            const offset = this.bb.__offset(this.bb_pos, 12);\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns number\n         */\n        isNaturalTangents() {\n            const offset = this.bb.__offset(this.bb_pos, 14);\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @param DPoint3d= obj\n         * @returns DPoint3d|null\n         */\n        startTangent(obj) {\n            const offset = this.bb.__offset(this.bb_pos, 16);\n            return offset ? (obj || new DPoint3d()).__init(this.bb_pos + offset, this.bb) : null;\n        }\n        /**\n         * @param DVector3d= obj\n         * @returns DVector3d|null\n         */\n        endTangent(obj) {\n            const offset = this.bb.__offset(this.bb_pos, 18);\n            return offset ? (obj || new DVector3d()).__init(this.bb_pos + offset, this.bb) : null;\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        fitPoints(index) {\n            const offset = this.bb.__offset(this.bb_pos, 20);\n            return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;\n        }\n        /**\n         * @returns number\n         */\n        fitPointsLength() {\n            const offset = this.bb.__offset(this.bb_pos, 20);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Float64Array\n         */\n        fitPointsArray() {\n            const offset = this.bb.__offset(this.bb_pos, 20);\n            return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        knots(index) {\n            const offset = this.bb.__offset(this.bb_pos, 22);\n            return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;\n        }\n        /**\n         * @returns number\n         */\n        knotsLength() {\n            const offset = this.bb.__offset(this.bb_pos, 22);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Float64Array\n         */\n        knotsArray() {\n            const offset = this.bb.__offset(this.bb_pos, 22);\n            return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInterpolationCurve(builder) {\n            builder.startObject(10);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number order\n         */\n        static addOrder(builder, order) {\n            builder.addFieldInt32(0, order, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean closed\n         */\n        static addClosed(builder, closed) {\n            builder.addFieldInt8(1, +closed, +false);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number isChordLenKnots\n         */\n        static addIsChordLenKnots(builder, isChordLenKnots) {\n            builder.addFieldInt32(2, isChordLenKnots, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number isColinearTangents\n         */\n        static addIsColinearTangents(builder, isColinearTangents) {\n            builder.addFieldInt32(3, isColinearTangents, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number isChordLenTangents\n         */\n        static addIsChordLenTangents(builder, isChordLenTangents) {\n            builder.addFieldInt32(4, isChordLenTangents, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number isNaturalTangents\n         */\n        static addIsNaturalTangents(builder, isNaturalTangents) {\n            builder.addFieldInt32(5, isNaturalTangents, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset startTangentOffset\n         */\n        static addStartTangent(builder, startTangentOffset) {\n            builder.addFieldStruct(6, startTangentOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset endTangentOffset\n         */\n        static addEndTangent(builder, endTangentOffset) {\n            builder.addFieldStruct(7, endTangentOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset fitPointsOffset\n         */\n        static addFitPoints(builder, fitPointsOffset) {\n            builder.addFieldOffset(8, fitPointsOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createFitPointsVector(builder, data) {\n            builder.startVector(8, data.length, 8);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addFloat64(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startFitPointsVector(builder, numElems) {\n            builder.startVector(8, numElems, 8);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset knotsOffset\n         */\n        static addKnots(builder, knotsOffset) {\n            builder.addFieldOffset(9, knotsOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createKnotsVector(builder, data) {\n            builder.startVector(8, data.length, 8);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addFloat64(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startKnotsVector(builder, numElems) {\n            builder.startVector(8, numElems, 8);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInterpolationCurve(builder) {\n            const offset = builder.endObject();\n            return offset;\n        }\n        static createInterpolationCurve(builder, order, closed, isChordLenKnots, isColinearTangents, isChordLenTangents, isNaturalTangents, startTangentOffset, endTangentOffset, fitPointsOffset, knotsOffset) {\n            InterpolationCurve.startInterpolationCurve(builder);\n            InterpolationCurve.addOrder(builder, order);\n            InterpolationCurve.addClosed(builder, closed);\n            InterpolationCurve.addIsChordLenKnots(builder, isChordLenKnots);\n            InterpolationCurve.addIsColinearTangents(builder, isColinearTangents);\n            InterpolationCurve.addIsChordLenTangents(builder, isChordLenTangents);\n            InterpolationCurve.addIsNaturalTangents(builder, isNaturalTangents);\n            InterpolationCurve.addStartTangent(builder, startTangentOffset);\n            InterpolationCurve.addEndTangent(builder, endTangentOffset);\n            InterpolationCurve.addFitPoints(builder, fitPointsOffset);\n            InterpolationCurve.addKnots(builder, knotsOffset);\n            return InterpolationCurve.endInterpolationCurve(builder);\n        }\n    }\n    BGFBAccessors.InterpolationCurve = InterpolationCurve;\n    /**\n     * @constructor\n     */\n    class AkimaCurve {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns AkimaCurve\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param AkimaCurve= obj\n         * @returns AkimaCurve\n         */\n        static getRootAsAkimaCurve(bb, obj) {\n            return (obj || new AkimaCurve()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param AkimaCurve= obj\n         * @returns AkimaCurve\n         */\n        static getSizePrefixedRootAsAkimaCurve(bb, obj) {\n            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n            return (obj || new AkimaCurve()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        points(index) {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;\n        }\n        /**\n         * @returns number\n         */\n        pointsLength() {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Float64Array\n         */\n        pointsArray() {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startAkimaCurve(builder) {\n            builder.startObject(1);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset pointsOffset\n         */\n        static addPoints(builder, pointsOffset) {\n            builder.addFieldOffset(0, pointsOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createPointsVector(builder, data) {\n            builder.startVector(8, data.length, 8);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addFloat64(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startPointsVector(builder, numElems) {\n            builder.startVector(8, numElems, 8);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endAkimaCurve(builder) {\n            const offset = builder.endObject();\n            return offset;\n        }\n        static createAkimaCurve(builder, pointsOffset) {\n            AkimaCurve.startAkimaCurve(builder);\n            AkimaCurve.addPoints(builder, pointsOffset);\n            return AkimaCurve.endAkimaCurve(builder);\n        }\n    }\n    BGFBAccessors.AkimaCurve = AkimaCurve;\n    /**\n     * @constructor\n     */\n    class CatenaryCurve {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns CatenaryCurve\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param CatenaryCurve= obj\n         * @returns CatenaryCurve\n         */\n        static getRootAsCatenaryCurve(bb, obj) {\n            return (obj || new CatenaryCurve()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param CatenaryCurve= obj\n         * @returns CatenaryCurve\n         */\n        static getSizePrefixedRootAsCatenaryCurve(bb, obj) {\n            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n            return (obj || new CatenaryCurve()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @returns number\n         */\n        a() {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;\n        }\n        /**\n         * @param DPoint3d= obj\n         * @returns DPoint3d|null\n         */\n        origin(obj) {\n            const offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? (obj || new DPoint3d()).__init(this.bb_pos + offset, this.bb) : null;\n        }\n        /**\n         * @param DVector3d= obj\n         * @returns DVector3d|null\n         */\n        vectorU(obj) {\n            const offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? (obj || new DVector3d()).__init(this.bb_pos + offset, this.bb) : null;\n        }\n        /**\n         * @param DVector3d= obj\n         * @returns DVector3d|null\n         */\n        vectorV(obj) {\n            const offset = this.bb.__offset(this.bb_pos, 10);\n            return offset ? (obj || new DVector3d()).__init(this.bb_pos + offset, this.bb) : null;\n        }\n        /**\n         * @returns number\n         */\n        x0() {\n            const offset = this.bb.__offset(this.bb_pos, 12);\n            return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;\n        }\n        /**\n         * @returns number\n         */\n        x1() {\n            const offset = this.bb.__offset(this.bb_pos, 14);\n            return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startCatenaryCurve(builder) {\n            builder.startObject(6);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number a\n         */\n        static addA(builder, a) {\n            builder.addFieldFloat64(0, a, 0.0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset originOffset\n         */\n        static addOrigin(builder, originOffset) {\n            builder.addFieldStruct(1, originOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset vectorUOffset\n         */\n        static addVectorU(builder, vectorUOffset) {\n            builder.addFieldStruct(2, vectorUOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset vectorVOffset\n         */\n        static addVectorV(builder, vectorVOffset) {\n            builder.addFieldStruct(3, vectorVOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number x0\n         */\n        static addX0(builder, x0) {\n            builder.addFieldFloat64(4, x0, 0.0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number x1\n         */\n        static addX1(builder, x1) {\n            builder.addFieldFloat64(5, x1, 0.0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endCatenaryCurve(builder) {\n            const offset = builder.endObject();\n            return offset;\n        }\n        static createCatenaryCurve(builder, a, originOffset, vectorUOffset, vectorVOffset, x0, x1) {\n            CatenaryCurve.startCatenaryCurve(builder);\n            CatenaryCurve.addA(builder, a);\n            CatenaryCurve.addOrigin(builder, originOffset);\n            CatenaryCurve.addVectorU(builder, vectorUOffset);\n            CatenaryCurve.addVectorV(builder, vectorVOffset);\n            CatenaryCurve.addX0(builder, x0);\n            CatenaryCurve.addX1(builder, x1);\n            return CatenaryCurve.endCatenaryCurve(builder);\n        }\n    }\n    BGFBAccessors.CatenaryCurve = CatenaryCurve;\n    /**\n     * @constructor\n     */\n    class PartialCurve {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns PartialCurve\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param PartialCurve= obj\n         * @returns PartialCurve\n         */\n        static getRootAsPartialCurve(bb, obj) {\n            return (obj || new PartialCurve()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param PartialCurve= obj\n         * @returns PartialCurve\n         */\n        static getSizePrefixedRootAsPartialCurve(bb, obj) {\n            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n            return (obj || new PartialCurve()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @returns number\n         */\n        fraction0() {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;\n        }\n        /**\n         * @returns number\n         */\n        fraction1() {\n            const offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;\n        }\n        /**\n         * @param VariantGeometry= obj\n         * @returns VariantGeometry|null\n         */\n        target(obj) {\n            const offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? (obj || new VariantGeometry()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startPartialCurve(builder) {\n            builder.startObject(3);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number fraction0\n         */\n        static addFraction0(builder, fraction0) {\n            builder.addFieldFloat64(0, fraction0, 0.0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number fraction1\n         */\n        static addFraction1(builder, fraction1) {\n            builder.addFieldFloat64(1, fraction1, 0.0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset targetOffset\n         */\n        static addTarget(builder, targetOffset) {\n            builder.addFieldOffset(2, targetOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endPartialCurve(builder) {\n            const offset = builder.endObject();\n            return offset;\n        }\n        static createPartialCurve(builder, fraction0, fraction1, targetOffset) {\n            PartialCurve.startPartialCurve(builder);\n            PartialCurve.addFraction0(builder, fraction0);\n            PartialCurve.addFraction1(builder, fraction1);\n            PartialCurve.addTarget(builder, targetOffset);\n            return PartialCurve.endPartialCurve(builder);\n        }\n    }\n    BGFBAccessors.PartialCurve = PartialCurve;\n    /**\n     * @constructor\n     */\n    class CurvePrimitiveId {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns CurvePrimitiveId\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param CurvePrimitiveId= obj\n         * @returns CurvePrimitiveId\n         */\n        static getRootAsCurvePrimitiveId(bb, obj) {\n            return (obj || new CurvePrimitiveId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param CurvePrimitiveId= obj\n         * @returns CurvePrimitiveId\n         */\n        static getSizePrefixedRootAsCurvePrimitiveId(bb, obj) {\n            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n            return (obj || new CurvePrimitiveId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @returns number\n         */\n        type() {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns number\n         */\n        geomIndex() {\n            const offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns number\n         */\n        partIndex() {\n            const offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        bytes(index) {\n            const offset = this.bb.__offset(this.bb_pos, 10);\n            return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;\n        }\n        /**\n         * @returns number\n         */\n        bytesLength() {\n            const offset = this.bb.__offset(this.bb_pos, 10);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Uint8Array\n         */\n        bytesArray() {\n            const offset = this.bb.__offset(this.bb_pos, 10);\n            return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startCurvePrimitiveId(builder) {\n            builder.startObject(4);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number type\n         */\n        static addType(builder, type) {\n            builder.addFieldInt16(0, type, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number geomIndex\n         */\n        static addGeomIndex(builder, geomIndex) {\n            builder.addFieldInt16(1, geomIndex, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number partIndex\n         */\n        static addPartIndex(builder, partIndex) {\n            builder.addFieldInt16(2, partIndex, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset bytesOffset\n         */\n        static addBytes(builder, bytesOffset) {\n            builder.addFieldOffset(3, bytesOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createBytesVector(builder, data) {\n            builder.startVector(1, data.length, 1);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addInt8(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startBytesVector(builder, numElems) {\n            builder.startVector(1, numElems, 1);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endCurvePrimitiveId(builder) {\n            const offset = builder.endObject();\n            return offset;\n        }\n        static createCurvePrimitiveId(builder, type, geomIndex, partIndex, bytesOffset) {\n            CurvePrimitiveId.startCurvePrimitiveId(builder);\n            CurvePrimitiveId.addType(builder, type);\n            CurvePrimitiveId.addGeomIndex(builder, geomIndex);\n            CurvePrimitiveId.addPartIndex(builder, partIndex);\n            CurvePrimitiveId.addBytes(builder, bytesOffset);\n            return CurvePrimitiveId.endCurvePrimitiveId(builder);\n        }\n    }\n    BGFBAccessors.CurvePrimitiveId = CurvePrimitiveId;\n    /**\n     * @constructor\n     */\n    class CurveVector {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns CurveVector\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param CurveVector= obj\n         * @returns CurveVector\n         */\n        static getRootAsCurveVector(bb, obj) {\n            return (obj || new CurveVector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param CurveVector= obj\n         * @returns CurveVector\n         */\n        static getSizePrefixedRootAsCurveVector(bb, obj) {\n            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n            return (obj || new CurveVector()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @returns number\n         */\n        type() {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @param number index\n         * @param VariantGeometry= obj\n         * @returns VariantGeometry\n         */\n        curves(index, obj) {\n            const offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? (obj || new VariantGeometry()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n        }\n        /**\n         * @returns number\n         */\n        curvesLength() {\n            const offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startCurveVector(builder) {\n            builder.startObject(2);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number type\n         */\n        static addType(builder, type) {\n            builder.addFieldInt32(0, type, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset curvesOffset\n         */\n        static addCurves(builder, curvesOffset) {\n            builder.addFieldOffset(1, curvesOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCurvesVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCurvesVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endCurveVector(builder) {\n            const offset = builder.endObject();\n            return offset;\n        }\n        static createCurveVector(builder, type, curvesOffset) {\n            CurveVector.startCurveVector(builder);\n            CurveVector.addType(builder, type);\n            CurveVector.addCurves(builder, curvesOffset);\n            return CurveVector.endCurveVector(builder);\n        }\n    }\n    BGFBAccessors.CurveVector = CurveVector;\n    /**\n     * @constructor\n     */\n    class VectorOfVariantGeometry {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns VectorOfVariantGeometry\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param VectorOfVariantGeometry= obj\n         * @returns VectorOfVariantGeometry\n         */\n        static getRootAsVectorOfVariantGeometry(bb, obj) {\n            return (obj || new VectorOfVariantGeometry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param VectorOfVariantGeometry= obj\n         * @returns VectorOfVariantGeometry\n         */\n        static getSizePrefixedRootAsVectorOfVariantGeometry(bb, obj) {\n            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n            return (obj || new VectorOfVariantGeometry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param number index\n         * @param VariantGeometry= obj\n         * @returns VariantGeometry\n         */\n        members(index, obj) {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? (obj || new VariantGeometry()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n        }\n        /**\n         * @returns number\n         */\n        membersLength() {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startVectorOfVariantGeometry(builder) {\n            builder.startObject(1);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset membersOffset\n         */\n        static addMembers(builder, membersOffset) {\n            builder.addFieldOffset(0, membersOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createMembersVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startMembersVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endVectorOfVariantGeometry(builder) {\n            const offset = builder.endObject();\n            return offset;\n        }\n        static createVectorOfVariantGeometry(builder, membersOffset) {\n            VectorOfVariantGeometry.startVectorOfVariantGeometry(builder);\n            VectorOfVariantGeometry.addMembers(builder, membersOffset);\n            return VectorOfVariantGeometry.endVectorOfVariantGeometry(builder);\n        }\n    }\n    BGFBAccessors.VectorOfVariantGeometry = VectorOfVariantGeometry;\n    /**\n     * @constructor\n     */\n    class BsplineSurface {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns BsplineSurface\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param BsplineSurface= obj\n         * @returns BsplineSurface\n         */\n        static getRootAsBsplineSurface(bb, obj) {\n            return (obj || new BsplineSurface()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param BsplineSurface= obj\n         * @returns BsplineSurface\n         */\n        static getSizePrefixedRootAsBsplineSurface(bb, obj) {\n            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n            return (obj || new BsplineSurface()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        poles(index) {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;\n        }\n        /**\n         * @returns number\n         */\n        polesLength() {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Float64Array\n         */\n        polesArray() {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        weights(index) {\n            const offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;\n        }\n        /**\n         * @returns number\n         */\n        weightsLength() {\n            const offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Float64Array\n         */\n        weightsArray() {\n            const offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        knotsU(index) {\n            const offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;\n        }\n        /**\n         * @returns number\n         */\n        knotsULength() {\n            const offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Float64Array\n         */\n        knotsUArray() {\n            const offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        knotsV(index) {\n            const offset = this.bb.__offset(this.bb_pos, 10);\n            return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;\n        }\n        /**\n         * @returns number\n         */\n        knotsVLength() {\n            const offset = this.bb.__offset(this.bb_pos, 10);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Float64Array\n         */\n        knotsVArray() {\n            const offset = this.bb.__offset(this.bb_pos, 10);\n            return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @returns number\n         */\n        numPolesU() {\n            const offset = this.bb.__offset(this.bb_pos, 12);\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns number\n         */\n        numPolesV() {\n            const offset = this.bb.__offset(this.bb_pos, 14);\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns number\n         */\n        orderU() {\n            const offset = this.bb.__offset(this.bb_pos, 16);\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns number\n         */\n        orderV() {\n            const offset = this.bb.__offset(this.bb_pos, 18);\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns number\n         */\n        numRulesU() {\n            const offset = this.bb.__offset(this.bb_pos, 20);\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns number\n         */\n        numRulesV() {\n            const offset = this.bb.__offset(this.bb_pos, 22);\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns number\n         */\n        holeOrigin() {\n            const offset = this.bb.__offset(this.bb_pos, 24);\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @param CurveVector= obj\n         * @returns CurveVector|null\n         */\n        boundaries(obj) {\n            const offset = this.bb.__offset(this.bb_pos, 26);\n            return offset ? (obj || new CurveVector()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n        }\n        /**\n         * @returns boolean\n         */\n        closedU() {\n            const offset = this.bb.__offset(this.bb_pos, 28);\n            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n        }\n        /**\n         * @returns boolean\n         */\n        closedV() {\n            const offset = this.bb.__offset(this.bb_pos, 30);\n            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBsplineSurface(builder) {\n            builder.startObject(14);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset polesOffset\n         */\n        static addPoles(builder, polesOffset) {\n            builder.addFieldOffset(0, polesOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createPolesVector(builder, data) {\n            builder.startVector(8, data.length, 8);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addFloat64(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startPolesVector(builder, numElems) {\n            builder.startVector(8, numElems, 8);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset weightsOffset\n         */\n        static addWeights(builder, weightsOffset) {\n            builder.addFieldOffset(1, weightsOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createWeightsVector(builder, data) {\n            builder.startVector(8, data.length, 8);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addFloat64(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startWeightsVector(builder, numElems) {\n            builder.startVector(8, numElems, 8);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset knotsUOffset\n         */\n        static addKnotsU(builder, knotsUOffset) {\n            builder.addFieldOffset(2, knotsUOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createKnotsUVector(builder, data) {\n            builder.startVector(8, data.length, 8);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addFloat64(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startKnotsUVector(builder, numElems) {\n            builder.startVector(8, numElems, 8);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset knotsVOffset\n         */\n        static addKnotsV(builder, knotsVOffset) {\n            builder.addFieldOffset(3, knotsVOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createKnotsVVector(builder, data) {\n            builder.startVector(8, data.length, 8);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addFloat64(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startKnotsVVector(builder, numElems) {\n            builder.startVector(8, numElems, 8);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numPolesU\n         */\n        static addNumPolesU(builder, numPolesU) {\n            builder.addFieldInt32(4, numPolesU, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numPolesV\n         */\n        static addNumPolesV(builder, numPolesV) {\n            builder.addFieldInt32(5, numPolesV, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number orderU\n         */\n        static addOrderU(builder, orderU) {\n            builder.addFieldInt32(6, orderU, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number orderV\n         */\n        static addOrderV(builder, orderV) {\n            builder.addFieldInt32(7, orderV, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numRulesU\n         */\n        static addNumRulesU(builder, numRulesU) {\n            builder.addFieldInt32(8, numRulesU, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numRulesV\n         */\n        static addNumRulesV(builder, numRulesV) {\n            builder.addFieldInt32(9, numRulesV, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number holeOrigin\n         */\n        static addHoleOrigin(builder, holeOrigin) {\n            builder.addFieldInt32(10, holeOrigin, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset boundariesOffset\n         */\n        static addBoundaries(builder, boundariesOffset) {\n            builder.addFieldOffset(11, boundariesOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean closedU\n         */\n        static addClosedU(builder, closedU) {\n            builder.addFieldInt8(12, +closedU, +false);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean closedV\n         */\n        static addClosedV(builder, closedV) {\n            builder.addFieldInt8(13, +closedV, +false);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBsplineSurface(builder) {\n            const offset = builder.endObject();\n            return offset;\n        }\n        static createBsplineSurface(builder, polesOffset, weightsOffset, knotsUOffset, knotsVOffset, numPolesU, numPolesV, orderU, orderV, numRulesU, numRulesV, holeOrigin, boundariesOffset, closedU, closedV) {\n            BsplineSurface.startBsplineSurface(builder);\n            BsplineSurface.addPoles(builder, polesOffset);\n            BsplineSurface.addWeights(builder, weightsOffset);\n            BsplineSurface.addKnotsU(builder, knotsUOffset);\n            BsplineSurface.addKnotsV(builder, knotsVOffset);\n            BsplineSurface.addNumPolesU(builder, numPolesU);\n            BsplineSurface.addNumPolesV(builder, numPolesV);\n            BsplineSurface.addOrderU(builder, orderU);\n            BsplineSurface.addOrderV(builder, orderV);\n            BsplineSurface.addNumRulesU(builder, numRulesU);\n            BsplineSurface.addNumRulesV(builder, numRulesV);\n            BsplineSurface.addHoleOrigin(builder, holeOrigin);\n            BsplineSurface.addBoundaries(builder, boundariesOffset);\n            BsplineSurface.addClosedU(builder, closedU);\n            BsplineSurface.addClosedV(builder, closedV);\n            return BsplineSurface.endBsplineSurface(builder);\n        }\n    }\n    BGFBAccessors.BsplineSurface = BsplineSurface;\n    /**\n     * @constructor\n     */\n    class DgnBox {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DgnBox\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DgnBox= obj\n         * @returns DgnBox\n         */\n        static getRootAsDgnBox(bb, obj) {\n            return (obj || new DgnBox()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DgnBox= obj\n         * @returns DgnBox\n         */\n        static getSizePrefixedRootAsDgnBox(bb, obj) {\n            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n            return (obj || new DgnBox()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param DgnBoxDetail= obj\n         * @returns DgnBoxDetail|null\n         */\n        detail(obj) {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? (obj || new DgnBoxDetail()).__init(this.bb_pos + offset, this.bb) : null;\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDgnBox(builder) {\n            builder.startObject(1);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset detailOffset\n         */\n        static addDetail(builder, detailOffset) {\n            builder.addFieldStruct(0, detailOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDgnBox(builder) {\n            const offset = builder.endObject();\n            return offset;\n        }\n        static createDgnBox(builder, detailOffset) {\n            DgnBox.startDgnBox(builder);\n            DgnBox.addDetail(builder, detailOffset);\n            return DgnBox.endDgnBox(builder);\n        }\n    }\n    BGFBAccessors.DgnBox = DgnBox;\n    /**\n     * @constructor\n     */\n    class DgnSphere {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DgnSphere\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DgnSphere= obj\n         * @returns DgnSphere\n         */\n        static getRootAsDgnSphere(bb, obj) {\n            return (obj || new DgnSphere()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DgnSphere= obj\n         * @returns DgnSphere\n         */\n        static getSizePrefixedRootAsDgnSphere(bb, obj) {\n            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n            return (obj || new DgnSphere()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param DgnSphereDetail= obj\n         * @returns DgnSphereDetail|null\n         */\n        detail(obj) {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? (obj || new DgnSphereDetail()).__init(this.bb_pos + offset, this.bb) : null;\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDgnSphere(builder) {\n            builder.startObject(1);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset detailOffset\n         */\n        static addDetail(builder, detailOffset) {\n            builder.addFieldStruct(0, detailOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDgnSphere(builder) {\n            const offset = builder.endObject();\n            return offset;\n        }\n        static createDgnSphere(builder, detailOffset) {\n            DgnSphere.startDgnSphere(builder);\n            DgnSphere.addDetail(builder, detailOffset);\n            return DgnSphere.endDgnSphere(builder);\n        }\n    }\n    BGFBAccessors.DgnSphere = DgnSphere;\n    /**\n     * @constructor\n     */\n    class DgnCone {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DgnCone\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DgnCone= obj\n         * @returns DgnCone\n         */\n        static getRootAsDgnCone(bb, obj) {\n            return (obj || new DgnCone()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DgnCone= obj\n         * @returns DgnCone\n         */\n        static getSizePrefixedRootAsDgnCone(bb, obj) {\n            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n            return (obj || new DgnCone()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param DgnConeDetail= obj\n         * @returns DgnConeDetail|null\n         */\n        detail(obj) {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? (obj || new DgnConeDetail()).__init(this.bb_pos + offset, this.bb) : null;\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDgnCone(builder) {\n            builder.startObject(1);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset detailOffset\n         */\n        static addDetail(builder, detailOffset) {\n            builder.addFieldStruct(0, detailOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDgnCone(builder) {\n            const offset = builder.endObject();\n            return offset;\n        }\n        static createDgnCone(builder, detailOffset) {\n            DgnCone.startDgnCone(builder);\n            DgnCone.addDetail(builder, detailOffset);\n            return DgnCone.endDgnCone(builder);\n        }\n    }\n    BGFBAccessors.DgnCone = DgnCone;\n    /**\n     * @constructor\n     */\n    class DgnTorusPipe {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DgnTorusPipe\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DgnTorusPipe= obj\n         * @returns DgnTorusPipe\n         */\n        static getRootAsDgnTorusPipe(bb, obj) {\n            return (obj || new DgnTorusPipe()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DgnTorusPipe= obj\n         * @returns DgnTorusPipe\n         */\n        static getSizePrefixedRootAsDgnTorusPipe(bb, obj) {\n            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n            return (obj || new DgnTorusPipe()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param DgnTorusPipeDetail= obj\n         * @returns DgnTorusPipeDetail|null\n         */\n        detail(obj) {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? (obj || new DgnTorusPipeDetail()).__init(this.bb_pos + offset, this.bb) : null;\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDgnTorusPipe(builder) {\n            builder.startObject(1);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset detailOffset\n         */\n        static addDetail(builder, detailOffset) {\n            builder.addFieldStruct(0, detailOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDgnTorusPipe(builder) {\n            const offset = builder.endObject();\n            return offset;\n        }\n        static createDgnTorusPipe(builder, detailOffset) {\n            DgnTorusPipe.startDgnTorusPipe(builder);\n            DgnTorusPipe.addDetail(builder, detailOffset);\n            return DgnTorusPipe.endDgnTorusPipe(builder);\n        }\n    }\n    BGFBAccessors.DgnTorusPipe = DgnTorusPipe;\n    /**\n     * @constructor\n     */\n    class DgnExtrusion {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DgnExtrusion\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DgnExtrusion= obj\n         * @returns DgnExtrusion\n         */\n        static getRootAsDgnExtrusion(bb, obj) {\n            return (obj || new DgnExtrusion()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DgnExtrusion= obj\n         * @returns DgnExtrusion\n         */\n        static getSizePrefixedRootAsDgnExtrusion(bb, obj) {\n            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n            return (obj || new DgnExtrusion()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param CurveVector= obj\n         * @returns CurveVector|null\n         */\n        baseCurve(obj) {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? (obj || new CurveVector()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n        }\n        /**\n         * @param DVector3d= obj\n         * @returns DVector3d|null\n         */\n        extrusionVector(obj) {\n            const offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? (obj || new DVector3d()).__init(this.bb_pos + offset, this.bb) : null;\n        }\n        /**\n         * @returns boolean\n         */\n        capped() {\n            const offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDgnExtrusion(builder) {\n            builder.startObject(3);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset baseCurveOffset\n         */\n        static addBaseCurve(builder, baseCurveOffset) {\n            builder.addFieldOffset(0, baseCurveOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset extrusionVectorOffset\n         */\n        static addExtrusionVector(builder, extrusionVectorOffset) {\n            builder.addFieldStruct(1, extrusionVectorOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean capped\n         */\n        static addCapped(builder, capped) {\n            builder.addFieldInt8(2, +capped, +false);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDgnExtrusion(builder) {\n            const offset = builder.endObject();\n            return offset;\n        }\n        static createDgnExtrusion(builder, baseCurveOffset, extrusionVectorOffset, capped) {\n            DgnExtrusion.startDgnExtrusion(builder);\n            DgnExtrusion.addBaseCurve(builder, baseCurveOffset);\n            DgnExtrusion.addExtrusionVector(builder, extrusionVectorOffset);\n            DgnExtrusion.addCapped(builder, capped);\n            return DgnExtrusion.endDgnExtrusion(builder);\n        }\n    }\n    BGFBAccessors.DgnExtrusion = DgnExtrusion;\n    /**\n     * @constructor\n     */\n    class DgnRotationalSweep {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DgnRotationalSweep\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DgnRotationalSweep= obj\n         * @returns DgnRotationalSweep\n         */\n        static getRootAsDgnRotationalSweep(bb, obj) {\n            return (obj || new DgnRotationalSweep()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DgnRotationalSweep= obj\n         * @returns DgnRotationalSweep\n         */\n        static getSizePrefixedRootAsDgnRotationalSweep(bb, obj) {\n            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n            return (obj || new DgnRotationalSweep()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param CurveVector= obj\n         * @returns CurveVector|null\n         */\n        baseCurve(obj) {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? (obj || new CurveVector()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n        }\n        /**\n         * @param DRay3d= obj\n         * @returns DRay3d|null\n         */\n        axis(obj) {\n            const offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? (obj || new DRay3d()).__init(this.bb_pos + offset, this.bb) : null;\n        }\n        /**\n         * @returns number\n         */\n        sweepRadians() {\n            const offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;\n        }\n        /**\n         * @returns number\n         */\n        numVRules() {\n            const offset = this.bb.__offset(this.bb_pos, 10);\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns boolean\n         */\n        capped() {\n            const offset = this.bb.__offset(this.bb_pos, 12);\n            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDgnRotationalSweep(builder) {\n            builder.startObject(5);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset baseCurveOffset\n         */\n        static addBaseCurve(builder, baseCurveOffset) {\n            builder.addFieldOffset(0, baseCurveOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset axisOffset\n         */\n        static addAxis(builder, axisOffset) {\n            builder.addFieldStruct(1, axisOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number sweepRadians\n         */\n        static addSweepRadians(builder, sweepRadians) {\n            builder.addFieldFloat64(2, sweepRadians, 0.0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numVRules\n         */\n        static addNumVRules(builder, numVRules) {\n            builder.addFieldInt32(3, numVRules, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean capped\n         */\n        static addCapped(builder, capped) {\n            builder.addFieldInt8(4, +capped, +false);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDgnRotationalSweep(builder) {\n            const offset = builder.endObject();\n            return offset;\n        }\n        static createDgnRotationalSweep(builder, baseCurveOffset, axisOffset, sweepRadians, numVRules, capped) {\n            DgnRotationalSweep.startDgnRotationalSweep(builder);\n            DgnRotationalSweep.addBaseCurve(builder, baseCurveOffset);\n            DgnRotationalSweep.addAxis(builder, axisOffset);\n            DgnRotationalSweep.addSweepRadians(builder, sweepRadians);\n            DgnRotationalSweep.addNumVRules(builder, numVRules);\n            DgnRotationalSweep.addCapped(builder, capped);\n            return DgnRotationalSweep.endDgnRotationalSweep(builder);\n        }\n    }\n    BGFBAccessors.DgnRotationalSweep = DgnRotationalSweep;\n    /**\n     * @constructor\n     */\n    class DgnRuledSweep {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DgnRuledSweep\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DgnRuledSweep= obj\n         * @returns DgnRuledSweep\n         */\n        static getRootAsDgnRuledSweep(bb, obj) {\n            return (obj || new DgnRuledSweep()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DgnRuledSweep= obj\n         * @returns DgnRuledSweep\n         */\n        static getSizePrefixedRootAsDgnRuledSweep(bb, obj) {\n            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n            return (obj || new DgnRuledSweep()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param number index\n         * @param CurveVector= obj\n         * @returns CurveVector\n         */\n        curves(index, obj) {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? (obj || new CurveVector()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n        }\n        /**\n         * @returns number\n         */\n        curvesLength() {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns boolean\n         */\n        capped() {\n            const offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDgnRuledSweep(builder) {\n            builder.startObject(2);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset curvesOffset\n         */\n        static addCurves(builder, curvesOffset) {\n            builder.addFieldOffset(0, curvesOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCurvesVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCurvesVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean capped\n         */\n        static addCapped(builder, capped) {\n            builder.addFieldInt8(1, +capped, +false);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDgnRuledSweep(builder) {\n            const offset = builder.endObject();\n            return offset;\n        }\n        static createDgnRuledSweep(builder, curvesOffset, capped) {\n            DgnRuledSweep.startDgnRuledSweep(builder);\n            DgnRuledSweep.addCurves(builder, curvesOffset);\n            DgnRuledSweep.addCapped(builder, capped);\n            return DgnRuledSweep.endDgnRuledSweep(builder);\n        }\n    }\n    BGFBAccessors.DgnRuledSweep = DgnRuledSweep;\n    /**\n     * @constructor\n     */\n    class PolyfaceAuxChannelData {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns PolyfaceAuxChannelData\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param PolyfaceAuxChannelData= obj\n         * @returns PolyfaceAuxChannelData\n         */\n        static getRootAsPolyfaceAuxChannelData(bb, obj) {\n            return (obj || new PolyfaceAuxChannelData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param PolyfaceAuxChannelData= obj\n         * @returns PolyfaceAuxChannelData\n         */\n        static getSizePrefixedRootAsPolyfaceAuxChannelData(bb, obj) {\n            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n            return (obj || new PolyfaceAuxChannelData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @returns number\n         */\n        input() {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        values(index) {\n            const offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;\n        }\n        /**\n         * @returns number\n         */\n        valuesLength() {\n            const offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Float64Array\n         */\n        valuesArray() {\n            const offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startPolyfaceAuxChannelData(builder) {\n            builder.startObject(2);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number input\n         */\n        static addInput(builder, input) {\n            builder.addFieldFloat64(0, input, 0.0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset valuesOffset\n         */\n        static addValues(builder, valuesOffset) {\n            builder.addFieldOffset(1, valuesOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createValuesVector(builder, data) {\n            builder.startVector(8, data.length, 8);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addFloat64(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startValuesVector(builder, numElems) {\n            builder.startVector(8, numElems, 8);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endPolyfaceAuxChannelData(builder) {\n            const offset = builder.endObject();\n            return offset;\n        }\n        static createPolyfaceAuxChannelData(builder, input, valuesOffset) {\n            PolyfaceAuxChannelData.startPolyfaceAuxChannelData(builder);\n            PolyfaceAuxChannelData.addInput(builder, input);\n            PolyfaceAuxChannelData.addValues(builder, valuesOffset);\n            return PolyfaceAuxChannelData.endPolyfaceAuxChannelData(builder);\n        }\n    }\n    BGFBAccessors.PolyfaceAuxChannelData = PolyfaceAuxChannelData;\n    /**\n     * @constructor\n     */\n    class PolyfaceAuxChannel {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns PolyfaceAuxChannel\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param PolyfaceAuxChannel= obj\n         * @returns PolyfaceAuxChannel\n         */\n        static getRootAsPolyfaceAuxChannel(bb, obj) {\n            return (obj || new PolyfaceAuxChannel()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param PolyfaceAuxChannel= obj\n         * @returns PolyfaceAuxChannel\n         */\n        static getSizePrefixedRootAsPolyfaceAuxChannel(bb, obj) {\n            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n            return (obj || new PolyfaceAuxChannel()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @returns number\n         */\n        dataType() {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n        }\n        name(optionalEncoding) {\n            const offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n        inputName(optionalEncoding) {\n            const offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n        /**\n         * @param number index\n         * @param PolyfaceAuxChannelData= obj\n         * @returns PolyfaceAuxChannelData\n         */\n        data(index, obj) {\n            const offset = this.bb.__offset(this.bb_pos, 10);\n            return offset ? (obj || new PolyfaceAuxChannelData()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n        }\n        /**\n         * @returns number\n         */\n        dataLength() {\n            const offset = this.bb.__offset(this.bb_pos, 10);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startPolyfaceAuxChannel(builder) {\n            builder.startObject(4);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number dataType\n         */\n        static addDataType(builder, dataType) {\n            builder.addFieldInt32(0, dataType, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nameOffset\n         */\n        static addName(builder, nameOffset) {\n            builder.addFieldOffset(1, nameOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset inputNameOffset\n         */\n        static addInputName(builder, inputNameOffset) {\n            builder.addFieldOffset(2, inputNameOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dataOffset\n         */\n        static addData(builder, dataOffset) {\n            builder.addFieldOffset(3, dataOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createDataVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startDataVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endPolyfaceAuxChannel(builder) {\n            const offset = builder.endObject();\n            return offset;\n        }\n        static createPolyfaceAuxChannel(builder, dataType, nameOffset, inputNameOffset, dataOffset) {\n            PolyfaceAuxChannel.startPolyfaceAuxChannel(builder);\n            PolyfaceAuxChannel.addDataType(builder, dataType);\n            PolyfaceAuxChannel.addName(builder, nameOffset);\n            PolyfaceAuxChannel.addInputName(builder, inputNameOffset);\n            PolyfaceAuxChannel.addData(builder, dataOffset);\n            return PolyfaceAuxChannel.endPolyfaceAuxChannel(builder);\n        }\n    }\n    BGFBAccessors.PolyfaceAuxChannel = PolyfaceAuxChannel;\n    /**\n     * @constructor\n     */\n    class PolyfaceAuxData {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns PolyfaceAuxData\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param PolyfaceAuxData= obj\n         * @returns PolyfaceAuxData\n         */\n        static getRootAsPolyfaceAuxData(bb, obj) {\n            return (obj || new PolyfaceAuxData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param PolyfaceAuxData= obj\n         * @returns PolyfaceAuxData\n         */\n        static getSizePrefixedRootAsPolyfaceAuxData(bb, obj) {\n            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n            return (obj || new PolyfaceAuxData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        indices(index) {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n        }\n        /**\n         * @returns number\n         */\n        indicesLength() {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Int32Array\n         */\n        indicesArray() {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @param number index\n         * @param PolyfaceAuxChannel= obj\n         * @returns PolyfaceAuxChannel\n         */\n        channels(index, obj) {\n            const offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? (obj || new PolyfaceAuxChannel()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n        }\n        /**\n         * @returns number\n         */\n        channelsLength() {\n            const offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startPolyfaceAuxData(builder) {\n            builder.startObject(2);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset indicesOffset\n         */\n        static addIndices(builder, indicesOffset) {\n            builder.addFieldOffset(0, indicesOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createIndicesVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addInt32(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startIndicesVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset channelsOffset\n         */\n        static addChannels(builder, channelsOffset) {\n            builder.addFieldOffset(1, channelsOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createChannelsVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startChannelsVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endPolyfaceAuxData(builder) {\n            const offset = builder.endObject();\n            return offset;\n        }\n        static createPolyfaceAuxData(builder, indicesOffset, channelsOffset) {\n            PolyfaceAuxData.startPolyfaceAuxData(builder);\n            PolyfaceAuxData.addIndices(builder, indicesOffset);\n            PolyfaceAuxData.addChannels(builder, channelsOffset);\n            return PolyfaceAuxData.endPolyfaceAuxData(builder);\n        }\n    }\n    BGFBAccessors.PolyfaceAuxData = PolyfaceAuxData;\n    /**\n     * @constructor\n     */\n    class TaggedNumericData {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns TaggedNumericData\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param TaggedNumericData= obj\n         * @returns TaggedNumericData\n         */\n        static getRootAsTaggedNumericData(bb, obj) {\n            return (obj || new TaggedNumericData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param TaggedNumericData= obj\n         * @returns TaggedNumericData\n         */\n        static getSizePrefixedRootAsTaggedNumericData(bb, obj) {\n            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n            return (obj || new TaggedNumericData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @returns number\n         */\n        tagA() {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns number\n         */\n        tagB() {\n            const offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        intData(index) {\n            const offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n        }\n        /**\n         * @returns number\n         */\n        intDataLength() {\n            const offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Int32Array\n         */\n        intDataArray() {\n            const offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        doubleData(index) {\n            const offset = this.bb.__offset(this.bb_pos, 10);\n            return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;\n        }\n        /**\n         * @returns number\n         */\n        doubleDataLength() {\n            const offset = this.bb.__offset(this.bb_pos, 10);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Float64Array\n         */\n        doubleDataArray() {\n            const offset = this.bb.__offset(this.bb_pos, 10);\n            return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTaggedNumericData(builder) {\n            builder.startObject(4);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number tagA\n         */\n        static addTagA(builder, tagA) {\n            builder.addFieldInt32(0, tagA, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number tagB\n         */\n        static addTagB(builder, tagB) {\n            builder.addFieldInt32(1, tagB, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset intDataOffset\n         */\n        static addIntData(builder, intDataOffset) {\n            builder.addFieldOffset(2, intDataOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createIntDataVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addInt32(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startIntDataVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset doubleDataOffset\n         */\n        static addDoubleData(builder, doubleDataOffset) {\n            builder.addFieldOffset(3, doubleDataOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createDoubleDataVector(builder, data) {\n            builder.startVector(8, data.length, 8);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addFloat64(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startDoubleDataVector(builder, numElems) {\n            builder.startVector(8, numElems, 8);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTaggedNumericData(builder) {\n            const offset = builder.endObject();\n            return offset;\n        }\n        static createTaggedNumericData(builder, tagA, tagB, intDataOffset, doubleDataOffset) {\n            TaggedNumericData.startTaggedNumericData(builder);\n            TaggedNumericData.addTagA(builder, tagA);\n            TaggedNumericData.addTagB(builder, tagB);\n            TaggedNumericData.addIntData(builder, intDataOffset);\n            TaggedNumericData.addDoubleData(builder, doubleDataOffset);\n            return TaggedNumericData.endTaggedNumericData(builder);\n        }\n    }\n    BGFBAccessors.TaggedNumericData = TaggedNumericData;\n    /**\n     * @constructor\n     */\n    class Polyface {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Polyface\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Polyface= obj\n         * @returns Polyface\n         */\n        static getRootAsPolyface(bb, obj) {\n            return (obj || new Polyface()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Polyface= obj\n         * @returns Polyface\n         */\n        static getSizePrefixedRootAsPolyface(bb, obj) {\n            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n            return (obj || new Polyface()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        point(index) {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;\n        }\n        /**\n         * @returns number\n         */\n        pointLength() {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Float64Array\n         */\n        pointArray() {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        param(index) {\n            const offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;\n        }\n        /**\n         * @returns number\n         */\n        paramLength() {\n            const offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Float64Array\n         */\n        paramArray() {\n            const offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        normal(index) {\n            const offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;\n        }\n        /**\n         * @returns number\n         */\n        normalLength() {\n            const offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Float64Array\n         */\n        normalArray() {\n            const offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        doubleColor(index) {\n            const offset = this.bb.__offset(this.bb_pos, 10);\n            return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;\n        }\n        /**\n         * @returns number\n         */\n        doubleColorLength() {\n            const offset = this.bb.__offset(this.bb_pos, 10);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Float64Array\n         */\n        doubleColorArray() {\n            const offset = this.bb.__offset(this.bb_pos, 10);\n            return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        intColor(index) {\n            const offset = this.bb.__offset(this.bb_pos, 12);\n            return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n        }\n        /**\n         * @returns number\n         */\n        intColorLength() {\n            const offset = this.bb.__offset(this.bb_pos, 12);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Uint32Array\n         */\n        intColorArray() {\n            const offset = this.bb.__offset(this.bb_pos, 12);\n            return offset ? new Uint32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        pointIndex(index) {\n            const offset = this.bb.__offset(this.bb_pos, 14);\n            return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n        }\n        /**\n         * @returns number\n         */\n        pointIndexLength() {\n            const offset = this.bb.__offset(this.bb_pos, 14);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Int32Array\n         */\n        pointIndexArray() {\n            const offset = this.bb.__offset(this.bb_pos, 14);\n            return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        paramIndex(index) {\n            const offset = this.bb.__offset(this.bb_pos, 16);\n            return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n        }\n        /**\n         * @returns number\n         */\n        paramIndexLength() {\n            const offset = this.bb.__offset(this.bb_pos, 16);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Int32Array\n         */\n        paramIndexArray() {\n            const offset = this.bb.__offset(this.bb_pos, 16);\n            return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        normalIndex(index) {\n            const offset = this.bb.__offset(this.bb_pos, 18);\n            return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n        }\n        /**\n         * @returns number\n         */\n        normalIndexLength() {\n            const offset = this.bb.__offset(this.bb_pos, 18);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Int32Array\n         */\n        normalIndexArray() {\n            const offset = this.bb.__offset(this.bb_pos, 18);\n            return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        colorIndex(index) {\n            const offset = this.bb.__offset(this.bb_pos, 20);\n            return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n        }\n        /**\n         * @returns number\n         */\n        colorIndexLength() {\n            const offset = this.bb.__offset(this.bb_pos, 20);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Int32Array\n         */\n        colorIndexArray() {\n            const offset = this.bb.__offset(this.bb_pos, 20);\n            return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        colorTable(index) {\n            const offset = this.bb.__offset(this.bb_pos, 22);\n            return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n        }\n        /**\n         * @returns number\n         */\n        colorTableLength() {\n            const offset = this.bb.__offset(this.bb_pos, 22);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Int32Array\n         */\n        colorTableArray() {\n            const offset = this.bb.__offset(this.bb_pos, 22);\n            return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @returns number\n         */\n        numPerFace() {\n            const offset = this.bb.__offset(this.bb_pos, 24);\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns number\n         */\n        numPerRow() {\n            const offset = this.bb.__offset(this.bb_pos, 26);\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns number\n         */\n        meshStyle() {\n            const offset = this.bb.__offset(this.bb_pos, 28);\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns boolean\n         */\n        twoSided() {\n            const offset = this.bb.__offset(this.bb_pos, 30);\n            return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        faceIndex(index) {\n            const offset = this.bb.__offset(this.bb_pos, 32);\n            return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n        }\n        /**\n         * @returns number\n         */\n        faceIndexLength() {\n            const offset = this.bb.__offset(this.bb_pos, 32);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Int32Array\n         */\n        faceIndexArray() {\n            const offset = this.bb.__offset(this.bb_pos, 32);\n            return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        faceData(index) {\n            const offset = this.bb.__offset(this.bb_pos, 34);\n            return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;\n        }\n        /**\n         * @returns number\n         */\n        faceDataLength() {\n            const offset = this.bb.__offset(this.bb_pos, 34);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Float64Array\n         */\n        faceDataArray() {\n            const offset = this.bb.__offset(this.bb_pos, 34);\n            return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @param PolyfaceAuxData= obj\n         * @returns PolyfaceAuxData|null\n         */\n        auxData(obj) {\n            const offset = this.bb.__offset(this.bb_pos, 36);\n            return offset ? (obj || new PolyfaceAuxData()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n        }\n        /**\n         * @returns number\n         */\n        expectedClosure() {\n            const offset = this.bb.__offset(this.bb_pos, 38);\n            return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @param TaggedNumericData= obj\n         * @returns TaggedNumericData|null\n         */\n        taggedNumericData(obj) {\n            const offset = this.bb.__offset(this.bb_pos, 40);\n            return offset ? (obj || new TaggedNumericData()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startPolyface(builder) {\n            builder.startObject(19);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset pointOffset\n         */\n        static addPoint(builder, pointOffset) {\n            builder.addFieldOffset(0, pointOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createPointVector(builder, data) {\n            builder.startVector(8, data.length, 8);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addFloat64(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startPointVector(builder, numElems) {\n            builder.startVector(8, numElems, 8);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset paramOffset\n         */\n        static addParam(builder, paramOffset) {\n            builder.addFieldOffset(1, paramOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createParamVector(builder, data) {\n            builder.startVector(8, data.length, 8);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addFloat64(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startParamVector(builder, numElems) {\n            builder.startVector(8, numElems, 8);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset normalOffset\n         */\n        static addNormal(builder, normalOffset) {\n            builder.addFieldOffset(2, normalOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createNormalVector(builder, data) {\n            builder.startVector(8, data.length, 8);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addFloat64(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startNormalVector(builder, numElems) {\n            builder.startVector(8, numElems, 8);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset doubleColorOffset\n         */\n        static addDoubleColor(builder, doubleColorOffset) {\n            builder.addFieldOffset(3, doubleColorOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createDoubleColorVector(builder, data) {\n            builder.startVector(8, data.length, 8);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addFloat64(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startDoubleColorVector(builder, numElems) {\n            builder.startVector(8, numElems, 8);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset intColorOffset\n         */\n        static addIntColor(builder, intColorOffset) {\n            builder.addFieldOffset(4, intColorOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createIntColorVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addInt32(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startIntColorVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset pointIndexOffset\n         */\n        static addPointIndex(builder, pointIndexOffset) {\n            builder.addFieldOffset(5, pointIndexOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createPointIndexVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addInt32(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startPointIndexVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset paramIndexOffset\n         */\n        static addParamIndex(builder, paramIndexOffset) {\n            builder.addFieldOffset(6, paramIndexOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createParamIndexVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addInt32(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startParamIndexVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset normalIndexOffset\n         */\n        static addNormalIndex(builder, normalIndexOffset) {\n            builder.addFieldOffset(7, normalIndexOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createNormalIndexVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addInt32(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startNormalIndexVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset colorIndexOffset\n         */\n        static addColorIndex(builder, colorIndexOffset) {\n            builder.addFieldOffset(8, colorIndexOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createColorIndexVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addInt32(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startColorIndexVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset colorTableOffset\n         */\n        static addColorTable(builder, colorTableOffset) {\n            builder.addFieldOffset(9, colorTableOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createColorTableVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addInt32(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startColorTableVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numPerFace\n         */\n        static addNumPerFace(builder, numPerFace) {\n            builder.addFieldInt32(10, numPerFace, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numPerRow\n         */\n        static addNumPerRow(builder, numPerRow) {\n            builder.addFieldInt32(11, numPerRow, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number meshStyle\n         */\n        static addMeshStyle(builder, meshStyle) {\n            builder.addFieldInt32(12, meshStyle, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean twoSided\n         */\n        static addTwoSided(builder, twoSided) {\n            builder.addFieldInt8(13, +twoSided, +false);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset faceIndexOffset\n         */\n        static addFaceIndex(builder, faceIndexOffset) {\n            builder.addFieldOffset(14, faceIndexOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createFaceIndexVector(builder, data) {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addInt32(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startFaceIndexVector(builder, numElems) {\n            builder.startVector(4, numElems, 4);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset faceDataOffset\n         */\n        static addFaceData(builder, faceDataOffset) {\n            builder.addFieldOffset(15, faceDataOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createFaceDataVector(builder, data) {\n            builder.startVector(8, data.length, 8);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addFloat64(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startFaceDataVector(builder, numElems) {\n            builder.startVector(8, numElems, 8);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset auxDataOffset\n         */\n        static addAuxData(builder, auxDataOffset) {\n            builder.addFieldOffset(16, auxDataOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number expectedClosure\n         */\n        static addExpectedClosure(builder, expectedClosure) {\n            builder.addFieldInt32(17, expectedClosure, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset taggedNumericDataOffset\n         */\n        static addTaggedNumericData(builder, taggedNumericDataOffset) {\n            builder.addFieldOffset(18, taggedNumericDataOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endPolyface(builder) {\n            const offset = builder.endObject();\n            return offset;\n        }\n        static createPolyface(builder, pointOffset, paramOffset, normalOffset, doubleColorOffset, intColorOffset, pointIndexOffset, paramIndexOffset, normalIndexOffset, colorIndexOffset, colorTableOffset, numPerFace, numPerRow, meshStyle, twoSided, faceIndexOffset, faceDataOffset, auxDataOffset, expectedClosure, taggedNumericDataOffset) {\n            Polyface.startPolyface(builder);\n            Polyface.addPoint(builder, pointOffset);\n            Polyface.addParam(builder, paramOffset);\n            Polyface.addNormal(builder, normalOffset);\n            Polyface.addDoubleColor(builder, doubleColorOffset);\n            Polyface.addIntColor(builder, intColorOffset);\n            Polyface.addPointIndex(builder, pointIndexOffset);\n            Polyface.addParamIndex(builder, paramIndexOffset);\n            Polyface.addNormalIndex(builder, normalIndexOffset);\n            Polyface.addColorIndex(builder, colorIndexOffset);\n            Polyface.addColorTable(builder, colorTableOffset);\n            Polyface.addNumPerFace(builder, numPerFace);\n            Polyface.addNumPerRow(builder, numPerRow);\n            Polyface.addMeshStyle(builder, meshStyle);\n            Polyface.addTwoSided(builder, twoSided);\n            Polyface.addFaceIndex(builder, faceIndexOffset);\n            Polyface.addFaceData(builder, faceDataOffset);\n            Polyface.addAuxData(builder, auxDataOffset);\n            Polyface.addExpectedClosure(builder, expectedClosure);\n            Polyface.addTaggedNumericData(builder, taggedNumericDataOffset);\n            return Polyface.endPolyface(builder);\n        }\n    }\n    BGFBAccessors.Polyface = Polyface;\n    /**\n     * @constructor\n     */\n    class TransitionSpiralDetail {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns TransitionSpiralDetail\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param DTransform3d= obj\n         * @returns DTransform3d|null\n         */\n        transform(obj) {\n            return (obj || new DTransform3d()).__init(this.bb_pos, this.bb);\n        }\n        /**\n         * @returns number\n         */\n        fractionA() {\n            return this.bb.readFloat64(this.bb_pos + 96);\n        }\n        /**\n         * @returns number\n         */\n        fractionB() {\n            return this.bb.readFloat64(this.bb_pos + 104);\n        }\n        /**\n         * @returns number\n         */\n        bearing0Radians() {\n            return this.bb.readFloat64(this.bb_pos + 112);\n        }\n        /**\n         * @returns number\n         */\n        bearing1Radians() {\n            return this.bb.readFloat64(this.bb_pos + 120);\n        }\n        /**\n         * @returns number\n         */\n        curvature0() {\n            return this.bb.readFloat64(this.bb_pos + 128);\n        }\n        /**\n         * @returns number\n         */\n        curvature1() {\n            return this.bb.readFloat64(this.bb_pos + 136);\n        }\n        /**\n         * @returns number\n         */\n        spiralType() {\n            return this.bb.readInt32(this.bb_pos + 144);\n        }\n        /**\n         * @returns number\n         */\n        constructionHint() {\n            return this.bb.readInt32(this.bb_pos + 148);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number transform_axx\n         * @param number transform_axy\n         * @param number transform_axz\n         * @param number transform_axw\n         * @param number transform_ayx\n         * @param number transform_ayy\n         * @param number transform_ayz\n         * @param number transform_ayw\n         * @param number transform_azx\n         * @param number transform_azy\n         * @param number transform_azz\n         * @param number transform_azw\n         * @param number fractionA\n         * @param number fractionB\n         * @param number bearing0Radians\n         * @param number bearing1Radians\n         * @param number curvature0\n         * @param number curvature1\n         * @param number spiralType\n         * @param number constructionHint\n         * @returns flatbuffers.Offset\n         */\n        static createTransitionSpiralDetail(builder, transform_axx, transform_axy, transform_axz, transform_axw, transform_ayx, transform_ayy, transform_ayz, transform_ayw, transform_azx, transform_azy, transform_azz, transform_azw, fractionA, fractionB, bearing0Radians, bearing1Radians, curvature0, curvature1, spiralType, constructionHint) {\n            builder.prep(8, 152);\n            builder.writeInt32(constructionHint);\n            builder.writeInt32(spiralType);\n            builder.writeFloat64(curvature1);\n            builder.writeFloat64(curvature0);\n            builder.writeFloat64(bearing1Radians);\n            builder.writeFloat64(bearing0Radians);\n            builder.writeFloat64(fractionB);\n            builder.writeFloat64(fractionA);\n            builder.prep(8, 96);\n            builder.writeFloat64(transform_azw);\n            builder.writeFloat64(transform_azz);\n            builder.writeFloat64(transform_azy);\n            builder.writeFloat64(transform_azx);\n            builder.writeFloat64(transform_ayw);\n            builder.writeFloat64(transform_ayz);\n            builder.writeFloat64(transform_ayy);\n            builder.writeFloat64(transform_ayx);\n            builder.writeFloat64(transform_axw);\n            builder.writeFloat64(transform_axz);\n            builder.writeFloat64(transform_axy);\n            builder.writeFloat64(transform_axx);\n            return builder.offset();\n        }\n    }\n    BGFBAccessors.TransitionSpiralDetail = TransitionSpiralDetail;\n    /**\n     * @constructor\n     */\n    class DirectSpiralDetail {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DirectSpiralDetail\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @returns number\n         */\n        nominalLength() {\n            return this.bb.readFloat64(this.bb_pos);\n        }\n        /**\n         * @returns number\n         */\n        trueLength() {\n            return this.bb.readFloat64(this.bb_pos + 8);\n        }\n        /**\n         * @returns number\n         */\n        doubleTag0() {\n            return this.bb.readFloat64(this.bb_pos + 16);\n        }\n        /**\n         * @returns number\n         */\n        doubleTag1() {\n            return this.bb.readFloat64(this.bb_pos + 24);\n        }\n        /**\n         * @returns number\n         */\n        intTag0() {\n            return this.bb.readFloat64(this.bb_pos + 32);\n        }\n        /**\n         * @returns number\n         */\n        intTag1() {\n            return this.bb.readFloat64(this.bb_pos + 40);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number nominalLength\n         * @param number trueLength\n         * @param number doubleTag0\n         * @param number doubleTag1\n         * @param number intTag0\n         * @param number intTag1\n         * @returns flatbuffers.Offset\n         */\n        static createDirectSpiralDetail(builder, nominalLength, trueLength, doubleTag0, doubleTag1, intTag0, intTag1) {\n            builder.prep(8, 48);\n            builder.writeFloat64(intTag1);\n            builder.writeFloat64(intTag0);\n            builder.writeFloat64(doubleTag1);\n            builder.writeFloat64(doubleTag0);\n            builder.writeFloat64(trueLength);\n            builder.writeFloat64(nominalLength);\n            return builder.offset();\n        }\n    }\n    BGFBAccessors.DirectSpiralDetail = DirectSpiralDetail;\n    /**\n     * @constructor\n     */\n    class TransitionSpiral {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns TransitionSpiral\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param TransitionSpiral= obj\n         * @returns TransitionSpiral\n         */\n        static getRootAsTransitionSpiral(bb, obj) {\n            return (obj || new TransitionSpiral()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param TransitionSpiral= obj\n         * @returns TransitionSpiral\n         */\n        static getSizePrefixedRootAsTransitionSpiral(bb, obj) {\n            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n            return (obj || new TransitionSpiral()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param TransitionSpiralDetail= obj\n         * @returns TransitionSpiralDetail|null\n         */\n        detail(obj) {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? (obj || new TransitionSpiralDetail()).__init(this.bb_pos + offset, this.bb) : null;\n        }\n        /**\n         * @param number index\n         * @returns number\n         */\n        extraData(index) {\n            const offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? this.bb.readFloat64(this.bb.__vector(this.bb_pos + offset) + index * 8) : 0;\n        }\n        /**\n         * @returns number\n         */\n        extraDataLength() {\n            const offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n        }\n        /**\n         * @returns Float64Array\n         */\n        extraDataArray() {\n            const offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? new Float64Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n        }\n        /**\n         * @param DirectSpiralDetail= obj\n         * @returns DirectSpiralDetail|null\n         */\n        directDetail(obj) {\n            const offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? (obj || new DirectSpiralDetail()).__init(this.bb_pos + offset, this.bb) : null;\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTransitionSpiral(builder) {\n            builder.startObject(3);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset detailOffset\n         */\n        static addDetail(builder, detailOffset) {\n            builder.addFieldStruct(0, detailOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset extraDataOffset\n         */\n        static addExtraData(builder, extraDataOffset) {\n            builder.addFieldOffset(1, extraDataOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createExtraDataVector(builder, data) {\n            builder.startVector(8, data.length, 8);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addFloat64(data[i]);\n            }\n            return builder.endVector();\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startExtraDataVector(builder, numElems) {\n            builder.startVector(8, numElems, 8);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset directDetailOffset\n         */\n        static addDirectDetail(builder, directDetailOffset) {\n            builder.addFieldStruct(2, directDetailOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTransitionSpiral(builder) {\n            const offset = builder.endObject();\n            return offset;\n        }\n        static createTransitionSpiral(builder, detailOffset, extraDataOffset, directDetailOffset) {\n            TransitionSpiral.startTransitionSpiral(builder);\n            TransitionSpiral.addDetail(builder, detailOffset);\n            TransitionSpiral.addExtraData(builder, extraDataOffset);\n            TransitionSpiral.addDirectDetail(builder, directDetailOffset);\n            return TransitionSpiral.endTransitionSpiral(builder);\n        }\n    }\n    BGFBAccessors.TransitionSpiral = TransitionSpiral;\n    /**\n     * @constructor\n     */\n    class VariantGeometry {\n        constructor() {\n            this.bb = null;\n            this.bb_pos = 0;\n        }\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns VariantGeometry\n         */\n        __init(i, bb) {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param VariantGeometry= obj\n         * @returns VariantGeometry\n         */\n        static getRootAsVariantGeometry(bb, obj) {\n            return (obj || new VariantGeometry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param VariantGeometry= obj\n         * @returns VariantGeometry\n         */\n        static getSizePrefixedRootAsVariantGeometry(bb, obj) {\n            bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n            return (obj || new VariantGeometry()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n        /**\n         * @returns VariantGeometryUnion\n         */\n        geometryType() {\n            const offset = this.bb.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb.readUint8(this.bb_pos + offset)) : VariantGeometryUnion.tagNONE;\n        }\n        /**\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        geometry(obj) {\n            const offset = this.bb.__offset(this.bb_pos, 6);\n            return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n        }\n        /**\n         * @param CurvePrimitiveId= obj\n         * @returns CurvePrimitiveId|null\n         */\n        tag(obj) {\n            const offset = this.bb.__offset(this.bb_pos, 8);\n            return offset ? (obj || new CurvePrimitiveId()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startVariantGeometry(builder) {\n            builder.startObject(3);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param VariantGeometryUnion geometryType\n         */\n        static addGeometryType(builder, geometryType) {\n            builder.addFieldInt8(0, geometryType, VariantGeometryUnion.tagNONE);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset geometryOffset\n         */\n        static addGeometry(builder, geometryOffset) {\n            builder.addFieldOffset(1, geometryOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset tagOffset\n         */\n        static addTag(builder, tagOffset) {\n            builder.addFieldOffset(2, tagOffset, 0);\n        }\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endVariantGeometry(builder) {\n            const offset = builder.endObject();\n            return offset;\n        }\n        static createVariantGeometry(builder, geometryType, geometryOffset, tagOffset) {\n            VariantGeometry.startVariantGeometry(builder);\n            VariantGeometry.addGeometryType(builder, geometryType);\n            VariantGeometry.addGeometry(builder, geometryOffset);\n            VariantGeometry.addTag(builder, tagOffset);\n            return VariantGeometry.endVariantGeometry(builder);\n        }\n    }\n    BGFBAccessors.VariantGeometry = VariantGeometry;\n})(BGFBAccessors || (BGFBAccessors = {}));\n//# sourceMappingURL=BGFBAccessors.js.map",
      "start": 1693508124992,
      "end": 1693508125070,
      "sourcemaps": null
    }
  ]
}
