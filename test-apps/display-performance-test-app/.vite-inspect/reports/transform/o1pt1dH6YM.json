{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/spatial/crs/CRSEngine.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { Bounds } from \"../geom/Bounds\";\nimport { Coordinate } from \"../geom/Coordinate\";\n/**\n * Abstract class CRSEngine provides a model for CRS transformation engines to implement.\n */\n/** @internal */\nexport class CRSEngine {\n    /**\n     * Create a new engine.\n     */\n    constructor() {\n    }\n    /**\n     * Prepare a CRS for making transforms in a certain area.\n     * @param crs the CRS to prepare.\n     * @param area the area to prepare for (can be invalid to prepare only for the crs).\n     */\n    async prepareForArea(crs, area) {\n        // subclasses should override this method if they need to download some part of a grid correction file, or the CRS declaration\n        return area;\n    }\n    /**\n     * Transform a coordinate from one CRS to another.\n     * @param point the point coordinate.\n     * @param sourceCRS the source CRS.\n     * @param targetCRS the target CRS.\n     * @return the transformed coordinate.\n     */\n    transformPoint(point, sourceCRS, targetCRS) {\n        // subclasses should override this method\n        return point;\n    }\n    /**\n     * Check if a CRS is geocentric.\n     * @param crs the CRS to check.\n     * @return true if geocentric.\n     */\n    isGeocentricCRS(crs) {\n        // subclasses should override this method\n        return false;\n    }\n    /**\n     * Check if a CRS is geographic.\n     * @param crs the CRS to check.\n     * @return true if geocentric.\n     */\n    isGeographicCRS(crs) {\n        // subclasses should override this method\n        return false;\n    }\n    /**\n     * Check if a CRS is projected.\n     * @param crs the CRS to check.\n     * @return true if geocentric.\n     */\n    isProjectedCRS(crs) {\n        // subclasses should override this method\n        return false;\n    }\n    /**\n     * Transform spatial bounds from one CRS to another.\n     * @param point the point coordinate.\n     * @param sourceCRS the source CRS.\n     * @param targetCRS the target CRS.\n     * @return the transformed bounds.\n     */\n    transformBounds(bounds, sourceCRS, targetCRS) {\n        // no real need to override this method in subclasses\n        /* Create new bounds */\n        let targetBounds = new Bounds();\n        if (bounds.isValid()) {\n            /* Transform all 8 corners */\n            let corner = Coordinate.create();\n            for (let i = 0; i < 8; i++) {\n                bounds.getCorner(i, corner);\n                targetBounds.add(this.transformPoint(corner, sourceCRS, targetCRS));\n            }\n        }\n        /* Return the target bounds */\n        return targetBounds;\n    }\n}\n//# sourceMappingURL=CRSEngine.js.map",
      "start": 1693508125358,
      "end": 1693508125403,
      "sourcemaps": null
    }
  ]
}
