{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/bentley/lib/esm/IndexMap.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Collections\n */\nimport { lowerBound, shallowClone } from \"./SortedArray\";\n/** Associates a value of type T with an index representing its insertion order in an IndexMap<T>\n * @public\n */\nexport class IndexedValue {\n    constructor(value, index) {\n        this.value = value;\n        this.index = index;\n    }\n}\n/**\n * Maintains a set of unique elements in sorted order and retains the insertion order of each.\n * The uniqueness of the elements is determined by a comparison routine supplied by the user.\n * The user may also supply a maximum size, beyond which insertions will fail.\n * @public\n */\nexport class IndexMap {\n    /**\n     * Construct a new IndexMap<T>.\n     * @param compare The function used to compare elements within the map.\n     * @param maximumSize The maximum number of elements permitted in the IndexMap. The maximum index of an element is maximumSize-1.\n     * @param clone The function invoked to clone a new element for insertion into the array. The default implementation simply returns its input.\n     */\n    constructor(compare, maximumSize = Number.MAX_SAFE_INTEGER, clone = shallowClone) {\n        this._array = [];\n        this._compareValues = compare;\n        this._clone = clone;\n        this._maximumSize = maximumSize;\n    }\n    /** The number of elements in the map. */\n    get length() { return this._array.length; }\n    /** Returns true if the maximum number of elements have been inserted. */\n    get isFull() { return this.length >= this._maximumSize; }\n    /** Returns true if the map contains no elements. */\n    get isEmpty() { return 0 === this.length; }\n    /** Removes all elements from the map. */\n    clear() { this._array = []; }\n    /** Attempt to insert a new value into the map.\n     * If an equivalent element already exists in the map, the corresponding index is returned.\n     * If the map is full, nothing is inserted and -1 is returned.\n     * Otherwise:\n     *  The new element is mapped to the next-available index (that is, the length of the map prior to insertion of this new element);\n     *  the value is cloned using the function supplied to the IndexMap constructor;\n     *  the cloned result is inserted into the map; and\n     *  the index of the new element is returned.\n     * @param value The value to insert\n     * @param onInsert The optional callback method to call if insertion occurs with the inserted value\n     * @returns the index of the equivalent element in the map, or -1 if the map is full and no equivalent element exists.\n     */\n    insert(value, onInsert) {\n        const bound = this.lowerBound(value);\n        if (bound.equal)\n            return this._array[bound.index].index;\n        else if (this.isFull)\n            return -1;\n        const entry = new IndexedValue(this._clone(value), this._array.length);\n        if (undefined !== onInsert)\n            onInsert(entry.value);\n        this._array.splice(bound.index, 0, entry);\n        return entry.index;\n    }\n    /**\n     * Finds the index of an element equivalent to the supplied value.\n     * @param value the value to find\n     * @returns the index of an equivalent element in the map, or -1 if no such element exists.\n     */\n    indexOf(value) {\n        const bound = this.lowerBound(value);\n        return bound.equal ? this._array[bound.index].index : -1;\n    }\n    lowerBound(value) { return lowerBound(value, this._array, (lhs, rhs) => this._compareValues(lhs, rhs.value)); }\n    /** Return an array of the elements in this map in which the array index of each element corresponds to the index assigned to it by the map. */\n    toArray() {\n        const array = [];\n        for (const entry of this._array)\n            array[entry.index] = entry.value;\n        return array;\n    }\n}\n//# sourceMappingURL=IndexMap.js.map",
      "start": 1693508120301,
      "end": 1693508120450,
      "sourcemaps": null
    }
  ]
}
