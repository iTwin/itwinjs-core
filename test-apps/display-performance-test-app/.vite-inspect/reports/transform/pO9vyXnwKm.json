{
  "resolvedId": "D:/hub2023A/itwinjs-core/common/temp/node_modules/.pnpm/@itwin+imodels-client-management@3.1.0/node_modules/@itwin/imodels-client-management/lib/esm/base/internal/IModelsErrorParser.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n * Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n * See LICENSE.md in the project root for license terms and full copyright notice.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { IModelsErrorCode } from \"../types\";\r\nexport class IModelsErrorBaseImpl extends Error {\r\n    constructor(params) {\r\n        super();\r\n        this.name = this.code = params.code;\r\n        this.message = params.message;\r\n    }\r\n}\r\nexport class IModelsErrorImpl extends IModelsErrorBaseImpl {\r\n    constructor(params) {\r\n        super(params);\r\n        this.details = params.details;\r\n    }\r\n}\r\nexport class IModelsErrorParser {\r\n    static parse(response, originalError) {\r\n        var _a, _b, _c;\r\n        if (!response.body)\r\n            return IModelsErrorParser.createUnrecognizedError(response, originalError);\r\n        if (response.statusCode === 401)\r\n            return IModelsErrorParser.createUnauthorizedError(response);\r\n        const errorFromApi = response.body;\r\n        const errorCode = IModelsErrorParser.parseCode((_a = errorFromApi === null || errorFromApi === void 0 ? void 0 : errorFromApi.error) === null || _a === void 0 ? void 0 : _a.code);\r\n        if (errorCode === IModelsErrorCode.Unrecognized)\r\n            return IModelsErrorParser.createUnrecognizedError(response, originalError);\r\n        const errorDetails = IModelsErrorParser.parseDetails((_b = errorFromApi.error) === null || _b === void 0 ? void 0 : _b.details);\r\n        const errorMessage = IModelsErrorParser.parseAndFormatMessage((_c = errorFromApi === null || errorFromApi === void 0 ? void 0 : errorFromApi.error) === null || _c === void 0 ? void 0 : _c.message, errorDetails);\r\n        return new IModelsErrorImpl({\r\n            code: errorCode,\r\n            message: errorMessage,\r\n            details: errorDetails\r\n        });\r\n    }\r\n    static parseCode(errorCode) {\r\n        if (!errorCode)\r\n            return IModelsErrorCode.Unrecognized;\r\n        const adjustedErrorCode = IModelsErrorParser.adjustErrorCodeCaseToMatchEnum(errorCode);\r\n        let parsedCode = IModelsErrorCode[adjustedErrorCode];\r\n        if (!parsedCode)\r\n            parsedCode = IModelsErrorCode.Unrecognized;\r\n        return parsedCode;\r\n    }\r\n    static adjustErrorCodeCaseToMatchEnum(errorCode) {\r\n        return errorCode.replace(\"iModel\", \"IModel\");\r\n    }\r\n    static parseDetails(details) {\r\n        if (!details)\r\n            return undefined;\r\n        return details.map((unparsedDetail) => {\r\n            return { ...unparsedDetail, code: this.parseCode(unparsedDetail.code) };\r\n        });\r\n    }\r\n    static parseAndFormatMessage(message, errorDetails) {\r\n        let result = message !== null && message !== void 0 ? message : IModelsErrorParser._defaultErrorMessage;\r\n        if (!errorDetails || errorDetails.length === 0)\r\n            return result;\r\n        result += \" Details:\\n\";\r\n        for (let i = 0; i < errorDetails.length; i++) {\r\n            result += `${i + 1}. ${errorDetails[i].code}: ${errorDetails[i].message}`;\r\n            if (errorDetails[i].target)\r\n                result += ` Target: ${errorDetails[i].target}.`;\r\n            result += \"\\n\";\r\n        }\r\n        return result;\r\n    }\r\n    static createUnrecognizedError(response, originalError) {\r\n        return new IModelsErrorImpl({\r\n            code: IModelsErrorCode.Unrecognized,\r\n            message: `${IModelsErrorParser._defaultErrorMessage}.\\n` +\r\n                `Original error message: ${originalError.message},\\n` +\r\n                `original error code: ${originalError.code},\\n` +\r\n                `response status code: ${response.statusCode},\\n` +\r\n                `response body: ${JSON.stringify(response.body)}`\r\n        });\r\n    }\r\n    static createUnauthorizedError(response) {\r\n        var _a, _b, _c, _d, _e;\r\n        const errorMessage = (_e = (_c = (_b = (_a = response.body) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.message) !== null && _c !== void 0 ? _c : (_d = response.body) === null || _d === void 0 ? void 0 : _d.message) !== null && _e !== void 0 ? _e : IModelsErrorParser._defaultUnauthorizedMessage;\r\n        return new IModelsErrorImpl({\r\n            code: IModelsErrorCode.Unauthorized,\r\n            message: errorMessage\r\n        });\r\n    }\r\n}\r\nIModelsErrorParser._defaultErrorMessage = \"Unknown error occurred\";\r\nIModelsErrorParser._defaultUnauthorizedMessage = \"Authorization failed\";\r\n//# sourceMappingURL=IModelsErrorParser.js.map",
      "start": 1693508123995,
      "end": 1693508124097,
      "sourcemaps": null
    }
  ]
}
