{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/webgl/VisibleTileFeatures.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module WebGL\n */\nimport { Id64 } from \"@itwin/core-bentley\";\nimport { BatchType, PackedFeature } from \"@itwin/core-common\";\nimport { ShaderProgramExecutor } from \"./ShaderProgram\";\n/** Iterates over features visible in tiles selected for display by a Target by inspecting its RenderCommands.\n * @internal\n */\nexport class VisibleTileFeatures {\n    constructor(commands, options, target, iModel) {\n        this.includeNonLocatable = true === options.includeNonLocatable;\n        this.renderCommands = commands;\n        this.target = target;\n        this.iModel = iModel;\n        target.compositor.preDraw();\n    }\n    [Symbol.iterator]() {\n        return iterator(this);\n    }\n}\nconst clippedPasses = [\n    15 /* RenderPass.BackgroundMap */,\n    1 /* RenderPass.OpaqueLayers */,\n    2 /* RenderPass.OpaqueLinear */,\n    3 /* RenderPass.OpaquePlanar */,\n    5 /* RenderPass.OpaqueGeneral */,\n    7 /* RenderPass.TranslucentLayers */,\n    8 /* RenderPass.Translucent */,\n    11 /* RenderPass.OverlayLayers */,\n];\nfunction isFeatureVisible(feature, target, includeNonLocatable) {\n    const ovrs = target.currentFeatureSymbologyOverrides;\n    if (!ovrs)\n        return true;\n    const app = target.currentBranch.getFeatureAppearance(ovrs, feature.elementId.lower, feature.elementId.upper, feature.subCategoryId.lower, feature.subCategoryId.upper, feature.geometryClass, feature.modelId.lower, feature.modelId.upper, BatchType.Primary, feature.animationNodeId);\n    return undefined !== app && (includeNonLocatable || !app.nonLocatable);\n}\nfunction* commandIterator(features, pass) {\n    const commands = features.renderCommands.getCommands(pass);\n    const executor = new ShaderProgramExecutor(features.target, pass);\n    try {\n        for (const command of commands) {\n            if (command.opcode !== \"drawPrimitive\")\n                command.execute(executor);\n            if (command.opcode !== \"pushBatch\")\n                continue;\n            const ovrs = command.batch.getOverrides(features.target);\n            if (ovrs.allHidden)\n                continue;\n            const scratchFeature = PackedFeature.createWithIndex();\n            const table = command.batch.featureTable;\n            for (const feature of table.iterable(scratchFeature)) {\n                if (!ovrs.anyOverridden || isFeatureVisible(feature, features.target, features.includeNonLocatable)) {\n                    yield {\n                        elementId: Id64.fromUint32PairObject(feature.elementId),\n                        subCategoryId: Id64.fromUint32PairObject(feature.subCategoryId),\n                        geometryClass: feature.geometryClass,\n                        modelId: Id64.fromUint32PairObject(feature.modelId),\n                        iModel: command.batch.batchIModel ?? features.iModel,\n                    };\n                }\n            }\n        }\n    }\n    finally {\n        executor.dispose();\n    }\n}\nfunction* iterator(features) {\n    try {\n        features.target.pushViewClip();\n        for (const pass of clippedPasses)\n            yield* commandIterator(features, pass);\n    }\n    finally {\n        features.target.popViewClip();\n    }\n}\n//# sourceMappingURL=VisibleTileFeatures.js.map",
      "start": 1693508121298,
      "end": 1693508121560,
      "sourcemaps": null
    }
  ]
}
