{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/pointcloud/format/opc/TileReadBuffer.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { ABuffer } from \"../../../system/buffer/ABuffer\";\n/**\n * Class TileReadBuffer defines a memory buffer for reading a sequence of tiles.\n *\n * @version 1.0 January 2014\n */\n/** @internal */\nexport class TileReadBuffer {\n    /**\n     * Create a new buffer.\n     * @param attributeCount the number of attributes.\n     */\n    constructor(attributeCount) {\n        this._geometryBuffer = null; //new ABuffer(1024);\n        this._attributeBuffers = new Array(attributeCount);\n        for (let i = 0; i < attributeCount; i++)\n            this._attributeBuffers[i] = null; //new ABuffer(1024);\n    }\n    /**\n     * Get the geometry buffer.\n     * @return the buffer.\n     */\n    getGeometryBuffer() {\n        return this._geometryBuffer;\n    }\n    /**\n     * Set the geometry buffer.\n     * @param buffer the buffer.\n     */\n    setGeometryBuffer(buffer) {\n        this._geometryBuffer = buffer;\n    }\n    /**\n     * Get the geometry buffer.\n     * @param size the mimumum size of the buffer.\n     * @return the buffer.\n     */\n    getSizedGeometryBuffer(size) {\n        if (this._geometryBuffer.size() < size) {\n            this._geometryBuffer = new ABuffer(size + 1024);\n        }\n        return this._geometryBuffer;\n    }\n    /**\n     * Get the attribute count.\n     * @return the attribute count.\n     */\n    getAttributeCount() {\n        return this._attributeBuffers.length;\n    }\n    /**\n     * Get an attribute buffer.\n     * @param attributeIndex the index of the attribute.\n     * @return the buffer.\n     */\n    getAttributeBuffer(attributeIndex) {\n        return this._attributeBuffers[attributeIndex];\n    }\n    /**\n     * Get an attribute buffer.\n     * @param attributeIndex the index of the attribute.\n     * @param size the mimumum size of the buffer.\n     * @return the buffer.\n     */\n    getSizedAttributeBuffer(attributeIndex, size) {\n        let attributeBuffer = this._attributeBuffers[attributeIndex];\n        if (attributeBuffer.size() < size) {\n            attributeBuffer = new ABuffer(size + 1024);\n            this._attributeBuffers[attributeIndex] = attributeBuffer;\n        }\n        return attributeBuffer;\n    }\n    /**\n     * Set an attribute buffer.\n     * @param attributeIndex the index of the attribute.\n     * @param buffer the buffer.\n     */\n    setAttributeBuffer(attributeIndex, buffer) {\n        this._attributeBuffers[attributeIndex] = buffer;\n    }\n}\n//# sourceMappingURL=TileReadBuffer.js.map",
      "start": 1693508125345,
      "end": 1693508125400,
      "sourcemaps": null
    }
  ]
}
