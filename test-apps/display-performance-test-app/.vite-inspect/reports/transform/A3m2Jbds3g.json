{
  "resolvedId": "D:/hub2023A/itwinjs-core/ui/appui-abstract/lib/esm/appui-abstract/properties/Record.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Properties\n */\nimport { StandardTypeNames } from \"./StandardTypeNames\";\nimport { PropertyValueFormat } from \"./Value\";\n/**\n * PropertyRecord contains instance information about a Property, including a\n * value that can be edited using a PropertyEditor and converted using a TypeConverter.\n * @public\n */\nexport class PropertyRecord {\n    /** Constructs a PropertyRecord instance */\n    constructor(value, property) {\n        this.value = value;\n        this.property = property;\n    }\n    /** Creates a copy of this PropertyRecord with a new value and optionally a new PropertyDescription */\n    copyWithNewValue(newValue, newDescription) {\n        const rec = new PropertyRecord(newValue, newDescription ? newDescription : this.property);\n        assignMemberIfExists(rec, this, \"description\");\n        assignMemberIfExists(rec, this, \"isReadonly\");\n        assignMemberIfExists(rec, this, \"isDisabled\");\n        assignMemberIfExists(rec, this, \"isMerged\");\n        assignMemberIfExists(rec, this, \"autoExpand\");\n        assignMemberIfExists(rec, this, \"extendedData\");\n        assignMemberIfExists(rec, this, \"links\");\n        return rec;\n    }\n    /** Gets this property record value children records */\n    getChildrenRecords() {\n        switch (this.value.valueFormat) {\n            case PropertyValueFormat.Primitive:\n                return [];\n            case PropertyValueFormat.Struct:\n                return Object.values(this.value.members);\n            case PropertyValueFormat.Array:\n                return this.value.items;\n        }\n    }\n    /** Creates a PropertyRecord based on a value string and an optional property description or name */\n    static fromString(value, descriptionOrName) {\n        let description;\n        if (descriptionOrName && typeof descriptionOrName === \"object\") {\n            description = descriptionOrName;\n        }\n        else if (descriptionOrName && typeof descriptionOrName === \"string\") {\n            description = {\n                name: descriptionOrName,\n                displayLabel: descriptionOrName,\n                typename: StandardTypeNames.String,\n            };\n        }\n        else {\n            description = {\n                name: \"string_value\",\n                displayLabel: \"String Value\",\n                typename: StandardTypeNames.String,\n            };\n        }\n        return new PropertyRecord({\n            valueFormat: PropertyValueFormat.Primitive,\n            value,\n            displayValue: value,\n        }, description);\n    }\n}\nfunction assignMemberIfExists(target, source, memberName) {\n    if (source.hasOwnProperty(memberName))\n        target[memberName] = source[memberName];\n}\n//# sourceMappingURL=Record.js.map",
      "start": 1693508123595,
      "end": 1693508123617,
      "sourcemaps": null
    }
  ]
}
