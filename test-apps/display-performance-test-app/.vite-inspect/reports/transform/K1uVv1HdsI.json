{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/spatial/ecrs/OnlineEngine.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { Numbers } from \"../../system/runtime/Numbers\";\nimport { CRSEngine } from \"../crs/CRSEngine\";\nimport { Coordinate } from \"../geom/Coordinate\";\nimport { OnlineRegistry } from \"./OnlineRegistry\";\nimport { Registry } from \"./Registry\";\nimport { Transform } from \"./Transform\";\n/**\n * Class OnlineEngine implements a CRS engine that reads CRS declarations from an online server.\n */\n/** @internal */\nexport class OnlineEngine extends CRSEngine {\n    /**\n       * Create a new online engine.\n       * @return the new engine.\n       */\n    static async create() {\n        const engine = new OnlineEngine();\n        await engine.setOnlineRegistry(OnlineRegistry.openOrbitGT());\n        return engine;\n    }\n    /**\n       * Create a new engine.\n       */\n    constructor() {\n        super();\n        this._onlineRegistry = null;\n    }\n    /**\n       * Set the online registry to the engine.\n       * @param onlineRegistry the registry to add.\n       */\n    async setOnlineRegistry(onlineRegistry) {\n        this._onlineRegistry = onlineRegistry;\n        await this._onlineRegistry.getCRS(4326); // WGS84, lon-lat\n        await this._onlineRegistry.getCRS(4978); // WGS84, geocentric\n        await this._onlineRegistry.getCRS(3395); // World Mercator\n        return this;\n    }\n    /**\n       * CRSEngine method.\n       */\n    async prepareForArea(crs, area) {\n        /* Online registry? */\n        if (this._onlineRegistry != null) {\n            /* Load the CRS */\n            const areaCRS = await this._onlineRegistry.getCRS(Numbers.getInteger(crs, 0));\n        }\n        /* Download small grid corrections for the area ... */\n        /* Return the area */\n        return area;\n    }\n    /**\n       * CRSEngine method.\n       */\n    transformPoint(point, sourceCRS, targetCRS) {\n        if (Registry.getCRS2(sourceCRS) == null)\n            return point;\n        if (Registry.getCRS2(targetCRS) == null)\n            return point;\n        const targetPoint = Coordinate.create();\n        Transform.transform(sourceCRS, point, targetCRS, targetPoint);\n        return targetPoint;\n    }\n    /**\n       * CRSEngine method.\n       */\n    isGeocentricCRS(crs) {\n        const acrs = Registry.getCRS2(crs);\n        if (acrs != null)\n            return acrs.isGeoCentric();\n        return false;\n    }\n    /**\n       * CRSEngine method.\n       */\n    isGeographicCRS(crs) {\n        const acrs = Registry.getCRS2(crs);\n        if (acrs != null)\n            return acrs.isGeoGraphic();\n        return false;\n    }\n    /**\n       * CRSEngine method.\n       */\n    isProjectedCRS(crs) {\n        const acrs = Registry.getCRS2(crs);\n        if (acrs != null)\n            return acrs.isProjected();\n        return false;\n    }\n}\n//# sourceMappingURL=OnlineEngine.js.map",
      "start": 1693508124888,
      "end": 1693508124966,
      "sourcemaps": null
    }
  ]
}
