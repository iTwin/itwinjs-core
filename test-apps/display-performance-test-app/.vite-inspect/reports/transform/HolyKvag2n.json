{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/rpc/web/multipart/RpcMultipartParser.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module RpcInterface\n */\n/*\nAdapted from https://github.com/pillarjs/multiparty. Multiparty license as follows:\n(The MIT License)\n\nCopyright (c) 2013 Felix Geisend√∂rfer\nCopyright (c) 2014 Andrew Kelley\nCopyright (c) 2014 Douglas Christopher Wilson\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\nimport { RpcSerializedValue } from \"../../core/RpcMarshaling\";\n/* eslint-disable deprecation/deprecation */\nconst START = 0;\nconst START_BOUNDARY = 1;\nconst HEADER_FIELD_START = 2;\nconst HEADER_FIELD = 3;\nconst HEADER_VALUE_START = 4;\nconst HEADER_VALUE = 5;\nconst HEADER_VALUE_ALMOST_DONE = 6;\nconst HEADERS_ALMOST_DONE = 7;\nconst PART_DATA_START = 8;\nconst PART_DATA = 9;\nconst CLOSE_BOUNDARY = 10;\nconst END = 11;\nconst LF = 10;\nconst CR = 13;\nconst SPACE = 32;\nconst HYPHEN = 45;\nconst COLON = 58;\nconst A = 97;\nconst Z = 122;\nconst CONTENT_TYPE_RE = /^multipart\\/(?:form-data|related)(?:;|$)/i;\nconst CONTENT_TYPE_PARAM_RE = /;\\s*([^=]+)=(?:\"([^\"]+)\"|([^;]+))/gi;\n/** @internal */\nexport class RpcMultipartParser {\n    constructor(contentType, buffer) {\n        let m = CONTENT_TYPE_RE.exec(contentType);\n        if (!m) {\n            throw new Error(\"unsupported content-type\");\n        }\n        let boundary = \"\";\n        CONTENT_TYPE_PARAM_RE.lastIndex = m.index + m[0].length - 1;\n        while ((m = CONTENT_TYPE_PARAM_RE.exec(contentType))) {\n            if (m[1].toLowerCase() !== \"boundary\")\n                continue;\n            boundary = m[2] || m[3];\n            break;\n        }\n        if (!boundary) {\n            throw new Error(\"content-type missing boundary\");\n        }\n        this._headerFieldDecoder = null;\n        this._headerValueDecoder = null;\n        this._headerField = \"\";\n        this._partHeaders = {};\n        this._partName = null;\n        this._partChunks = [];\n        this._headerValue = \"\";\n        this._headerFieldMark = null;\n        this._headerValueMark = null;\n        this._partDataMark = null;\n        this._partBoundaryFlag = false;\n        this._boundary = boundary;\n        this._buffer = buffer;\n        this._value = RpcSerializedValue.create();\n    }\n    parse() {\n        let i = 0;\n        const len = this._buffer.length;\n        let prevIndex = 0;\n        let index = 0;\n        let state = START;\n        const boundary = new Uint8Array(this._boundary.length + 4);\n        const boundaryEncoder = new TextEncoder(); // encodes utf8 only\n        boundaryEncoder.encodeInto(\"\\r\\n--\", boundary.subarray(0));\n        boundaryEncoder.encodeInto(this._boundary, boundary.subarray(4));\n        const boundaryChars = {};\n        for (const char of boundary) {\n            boundaryChars[char] = true;\n        }\n        const boundaryLength = boundary.length;\n        const boundaryEnd = boundaryLength - 1;\n        const bufferLength = this._buffer.length;\n        const lookbehind = new Uint8Array(boundaryLength + 8);\n        let c;\n        let cl;\n        for (i = 0; i < len; i++) {\n            c = this._buffer[i];\n            switch (state) {\n                case START:\n                    index = 0;\n                    state = START_BOUNDARY;\n                /* falls through */\n                case START_BOUNDARY:\n                    if (index === boundaryLength - 2 && c === HYPHEN) {\n                        index = 1;\n                        state = CLOSE_BOUNDARY;\n                        break;\n                    }\n                    else if (index === boundaryLength - 2) {\n                        if (c !== CR)\n                            throw new Error(`Expected CR Received ${c}`);\n                        index++;\n                        break;\n                    }\n                    else if (index === boundaryLength - 1) {\n                        if (c !== LF)\n                            throw new Error(`Expected LF Received ${c}`);\n                        index = 0;\n                        this._onParsePartBegin();\n                        state = HEADER_FIELD_START;\n                        break;\n                    }\n                    if (c !== boundary[index + 2])\n                        index = -2;\n                    if (c === boundary[index + 2])\n                        index++;\n                    break;\n                case HEADER_FIELD_START:\n                    state = HEADER_FIELD;\n                    this._headerFieldMark = i;\n                    index = 0;\n                /* falls through */\n                case HEADER_FIELD:\n                    if (c === CR) {\n                        this._headerFieldMark = null;\n                        state = HEADERS_ALMOST_DONE;\n                        break;\n                    }\n                    index++;\n                    if (c === HYPHEN)\n                        break;\n                    if (c === COLON) {\n                        if (index === 1) {\n                            // empty header field\n                            throw new Error(\"Empty header field\");\n                        }\n                        this._onParseHeaderField(this._buffer.subarray(this._headerFieldMark, i));\n                        this._headerFieldMark = null;\n                        state = HEADER_VALUE_START;\n                        break;\n                    }\n                    cl = c | 0x20;\n                    if (cl < A || cl > Z) {\n                        throw new Error(`Expected alphabetic character, received ${c}`);\n                    }\n                    break;\n                case HEADER_VALUE_START:\n                    if (c === SPACE)\n                        break;\n                    this._headerValueMark = i;\n                    state = HEADER_VALUE;\n                /* falls through */\n                case HEADER_VALUE:\n                    if (c === CR) {\n                        this._onParseHeaderValue(this._buffer.subarray(this._headerValueMark, i));\n                        this._headerValueMark = null;\n                        this._onParseHeaderEnd();\n                        state = HEADER_VALUE_ALMOST_DONE;\n                    }\n                    break;\n                case HEADER_VALUE_ALMOST_DONE:\n                    if (c !== LF)\n                        throw new Error(`Expected LF Received ${c}`);\n                    state = HEADER_FIELD_START;\n                    break;\n                case HEADERS_ALMOST_DONE:\n                    if (c !== LF)\n                        throw new Error(`Expected LF Received ${c}`);\n                    const err = this._onParseHeadersEnd(i + 1);\n                    if (err)\n                        throw err;\n                    state = PART_DATA_START;\n                    break;\n                case PART_DATA_START:\n                    state = PART_DATA;\n                    this._partDataMark = i;\n                /* falls through */\n                case PART_DATA:\n                    prevIndex = index;\n                    if (index === 0) {\n                        // boyer-moore derived algorithm to safely skip non-boundary data\n                        i += boundaryEnd;\n                        while (i < bufferLength && !(this._buffer[i] in boundaryChars)) {\n                            i += boundaryLength;\n                        }\n                        i -= boundaryEnd;\n                        c = this._buffer[i];\n                    }\n                    if (index < boundaryLength) {\n                        if (boundary[index] === c) {\n                            if (index === 0) {\n                                this._onParsePartData(this._buffer.subarray(this._partDataMark, i));\n                                this._partDataMark = null;\n                            }\n                            index++;\n                        }\n                        else {\n                            index = 0;\n                        }\n                    }\n                    else if (index === boundaryLength) {\n                        index++;\n                        if (c === CR) {\n                            // CR = part boundary\n                            this._partBoundaryFlag = true;\n                        }\n                        else if (c === HYPHEN) {\n                            index = 1;\n                            state = CLOSE_BOUNDARY;\n                            break;\n                        }\n                        else {\n                            index = 0;\n                        }\n                    }\n                    else if (index - 1 === boundaryLength) {\n                        if (this._partBoundaryFlag) {\n                            index = 0;\n                            if (c === LF) {\n                                this._partBoundaryFlag = false;\n                                this._onParsePartEnd();\n                                this._onParsePartBegin();\n                                state = HEADER_FIELD_START;\n                                break;\n                            }\n                        }\n                        else {\n                            index = 0;\n                        }\n                    }\n                    if (index > 0) {\n                        // when matching a possible boundary, keep a lookbehind reference\n                        // in case it turns out to be a false lead\n                        lookbehind[index - 1] = c;\n                    }\n                    else if (prevIndex > 0) {\n                        // if our boundary turned out to be rubbish, the captured lookbehind\n                        // belongs to partData\n                        this._onParsePartData(lookbehind.subarray(0, prevIndex));\n                        prevIndex = 0;\n                        this._partDataMark = i;\n                        // reconsider the current character even so it interrupted the sequence\n                        // it could be the beginning of a new sequence\n                        i--;\n                    }\n                    break;\n                case CLOSE_BOUNDARY:\n                    if (c !== HYPHEN)\n                        throw new Error(`Expected HYPHEN Received ${c}`);\n                    if (index === 1) {\n                        this._onParsePartEnd();\n                        state = END;\n                    }\n                    else if (index > 1) {\n                        throw new Error(\"Parser has invalid state.\");\n                    }\n                    index++;\n                    break;\n                case END:\n                    break;\n                default:\n                    throw new Error(\"Parser has invalid state.\");\n            }\n        }\n        if (this._headerFieldMark != null) {\n            this._onParseHeaderField(this._buffer.subarray(this._headerFieldMark));\n            this._headerFieldMark = 0;\n        }\n        if (this._headerValueMark != null) {\n            this._onParseHeaderValue(this._buffer.subarray(this._headerValueMark));\n            this._headerValueMark = 0;\n        }\n        if (this._partDataMark != null) {\n            this._onParsePartData(this._buffer.subarray(this._partDataMark));\n            this._partDataMark = 0;\n        }\n        return this._value;\n    }\n    _onParsePartBegin() {\n        this._clearPartVars();\n    }\n    _clearPartVars() {\n        this._partHeaders = {};\n        this._partName = null;\n        this._partChunks.length = 0;\n        this._headerFieldDecoder = new TextDecoder(\"utf8\");\n        this._headerField = \"\";\n        this._headerValueDecoder = new TextDecoder(\"utf8\");\n        this._headerValue = \"\";\n    }\n    _onParseHeaderField(b) {\n        this._headerField += this._headerFieldDecoder.decode(b);\n    }\n    _onParseHeaderValue(b) {\n        this._headerValue += this._headerValueDecoder.decode(b);\n    }\n    _onParseHeaderEnd() {\n        this._headerField = this._headerField.toLowerCase();\n        this._partHeaders[this._headerField] = this._headerValue;\n        let m;\n        if (this._headerField === \"content-disposition\") {\n            if (m = this._headerValue.match(/\\bname=\"([^\"]+)\"/i)) {\n                this._partName = m[1];\n            }\n            // this._partFilename = parseFilename(this._headerValue);\n        }\n        else if (this._headerField === \"content-transfer-encoding\") {\n            // this._partTransferEncoding = this._headerValue.toLowerCase();\n        }\n        this._headerFieldDecoder = new TextDecoder(\"utf8\");\n        this._headerField = \"\";\n        this._headerValueDecoder = new TextDecoder(\"utf8\");\n        this._headerValue = \"\";\n    }\n    _onParsePartData(b) {\n        this._partChunks.push(b);\n    }\n    _concatParts() {\n        let totalSize = 0;\n        for (const chunk of this._partChunks) {\n            totalSize += chunk.length;\n        }\n        const combined = new Uint8Array(totalSize);\n        let offset = 0;\n        for (const chunk of this._partChunks) {\n            combined.set(chunk, offset);\n            offset += chunk.length;\n        }\n        return combined;\n    }\n    _onParsePartEnd() {\n        const partValue = this._partChunks.length === 1 ? this._partChunks[0] : this._concatParts();\n        if (this._partName === \"objects\") {\n            const partDecoder = new TextDecoder();\n            this._value.objects = partDecoder.decode(partValue);\n        }\n        else {\n            this._value.data.push(partValue);\n        }\n        this._clearPartVars();\n    }\n    _onParseHeadersEnd(_offset) {\n    }\n}\n//# sourceMappingURL=RpcMultipartParser.js.map",
      "start": 1693508122116,
      "end": 1693508122210,
      "sourcemaps": null
    }
  ]
}
