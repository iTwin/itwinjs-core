{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/quantity/lib/esm/ParserSpec.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Quantity\n */\nimport { Parser } from \"./Parser\";\n/** A ParserSpec holds information needed to parse a string into a quantity synchronously.\n * @beta\n */\nexport class ParserSpec {\n    /** Constructor\n     *  @param outUnit     The name of a format specification.\n     *  @param format   Defines the output format for the quantity value.\n     *  @param conversions An array of conversion factors necessary to convert from an input unit to the units specified in the format..\n     */\n    constructor(outUnit, format, conversions) {\n        this._conversions = []; // max four entries\n        this._outUnit = outUnit;\n        this._format = format;\n        this._conversions = conversions;\n    }\n    /** Returns an array of UnitConversionSpecs for each unit label that may be used in the input string. */\n    get unitConversions() { return this._conversions; }\n    get format() { return this._format; }\n    get outUnit() { return this._outUnit; }\n    /** Static async method to create a ParserSpec given the format and unit of the quantity that will be passed to the Parser. The input unit will\n     * be used to generate conversion information for each unit specified in the Format. This method is async due to the fact that the units provider must make\n     * async calls to lookup unit definitions.\n     *  @param format     The format specification.\n     *  @param unitsProvider The units provider is used to look up unit definitions and provide conversion information for converting between units.\n     *  @param outUnit The unit the value to be formatted. This unit is often referred to as persistence unit.\n     */\n    static async create(format, unitsProvider, outUnit, altUnitLabelsProvider) {\n        const conversions = await Parser.createUnitConversionSpecsForUnit(unitsProvider, outUnit, altUnitLabelsProvider);\n        return new ParserSpec(outUnit, format, conversions);\n    }\n    /** Do the parsing. Done this way to allow Custom Parser Specs to parse custom formatted strings into their quantities. */\n    parseToQuantityValue(inString) {\n        return Parser.parseQuantityString(inString, this);\n    }\n}\n//# sourceMappingURL=ParserSpec.js.map",
      "start": 1693508123222,
      "end": 1693508123495,
      "sourcemaps": null
    }
  ]
}
