{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/Render.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Rendering\n */\n// cSpell:ignore vals\n/** Describes the semantics of a [PolylineArgs]($frontend).\n * @alpha\n */\nexport var PolylineTypeFlags;\n(function (PolylineTypeFlags) {\n    PolylineTypeFlags[PolylineTypeFlags[\"Normal\"] = 0] = \"Normal\";\n    PolylineTypeFlags[PolylineTypeFlags[\"Edge\"] = 1] = \"Edge\";\n    PolylineTypeFlags[PolylineTypeFlags[\"Outline\"] = 2] = \"Outline\";\n})(PolylineTypeFlags || (PolylineTypeFlags = {}));\n/** @internal */\nexport class MeshPolyline {\n    constructor(indices = []) {\n        this.indices = indices.slice();\n    }\n    addIndex(index) {\n        const { indices } = this;\n        if (indices.length === 0 || indices[indices.length - 1] !== index)\n            indices.push(index);\n    }\n    clear() { this.indices.length = 0; }\n}\n/** @internal */\nexport class MeshPolylineList extends Array {\n    constructor(...args) {\n        super(...args);\n    }\n}\n/** @internal */\nexport class MeshEdge {\n    constructor(index0, index1) {\n        this.indices = [0, 0];\n        if (undefined === index0 || undefined === index1)\n            return;\n        if (index0 < index1) {\n            this.indices[0] = index0;\n            this.indices[1] = index1;\n        }\n        else {\n            this.indices[0] = index1;\n            this.indices[1] = index0;\n        }\n    }\n    compareTo(other) {\n        let diff = this.indices[0] - other.indices[0];\n        if (0 === diff)\n            diff = this.indices[1] - other.indices[1];\n        return diff;\n    }\n}\n/** @internal */\nexport class MeshEdges {\n    constructor() {\n        this.visible = [];\n        this.silhouette = [];\n        this.polylines = new MeshPolylineList();\n        this.silhouetteNormals = [];\n    }\n}\n/** @internal */\nexport class EdgeArgs {\n    init(meshEdges) {\n        this.clear();\n        if (undefined !== meshEdges && 0 < meshEdges.visible.length)\n            this.edges = meshEdges.visible;\n        return this.isValid;\n    }\n    clear() { this.edges = undefined; }\n    get isValid() { return 0 < this.numEdges; }\n    get numEdges() { return undefined !== this.edges ? this.edges.length : 0; }\n}\n/** @internal */\nexport class SilhouetteEdgeArgs extends EdgeArgs {\n    init(meshEdges) {\n        this.clear();\n        if (undefined !== meshEdges && 0 < meshEdges.silhouette.length) {\n            this.edges = meshEdges.silhouette;\n            this.normals = meshEdges.silhouetteNormals;\n        }\n        return this.isValid;\n    }\n    clear() {\n        this.normals = undefined;\n        super.clear();\n    }\n}\n/** @internal */\nexport class PolylineEdgeArgs {\n    constructor(lines) { this.init(lines); }\n    init(lines) {\n        this.lines = undefined !== lines && 0 < lines.length ? lines : undefined;\n        return this.isValid;\n    }\n    get numLines() { return undefined !== this.lines ? this.lines.length : 0; }\n    get isValid() { return this.numLines > 0; }\n    clear() { this.lines = undefined; }\n}\n//# sourceMappingURL=Render.js.map",
      "start": 1693508120735,
      "end": 1693508120786,
      "sourcemaps": null
    }
  ]
}
