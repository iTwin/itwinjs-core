{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/pointcloud/render/Level.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { StringMap } from \"../../system/collection/StringMap\";\n/**\n * Class Level defines a resolution level of a pointcloud.\n *\n * @version 1.0 November 2015\n */\n/** @internal */\nexport class Level {\n    /**\n     * Create a new level.\n     * @param index the index of the level.\n     * @param blockGrid the grid of the blocks.\n     * @param tileGrid the grid of the tiles.\n     * @param blockList the list of blocks.\n     */\n    constructor(index, blockGrid, tileGrid, blockList) {\n        /* Store the parameters */\n        this._index = index;\n        this._key = (\"L\" + index);\n        this._blockGrid = blockGrid;\n        this._tileGrid = tileGrid;\n        this.setBlockList(blockList);\n    }\n    /**\n     * Set the block list.\n     * @param blockList the list of blocks.\n     */\n    setBlockList(blockList) {\n        this._blockList = blockList;\n        /* Map the blocks */\n        this._blockMap = new StringMap();\n        for (let block of this._blockList)\n            this._blockMap.set(block.getBlockIndex().gridIndex.getKey(), block);\n    }\n    /**\n     * Get the index of the level.\n     * @return the index of the level.\n     */\n    getIndex() {\n        return this._index;\n    }\n    /**\n     * Get the unique key of the level.\n     * @return the unique key of the level.\n     */\n    getKey() {\n        return this._key;\n    }\n    /**\n     * Get the block grid.\n     * @return the block grid.\n     */\n    getBlockGrid() {\n        return this._blockGrid;\n    }\n    /**\n     * Get the tile grid.\n     * @return the tile grid.\n     */\n    getTileGrid() {\n        return this._tileGrid;\n    }\n    /**\n     * List all blocks.\n     * @return all blocks.\n     */\n    getBlocks() {\n        return this._blockList;\n    }\n    /**\n     * Get the number of blocks.\n     * @return the number of blocks.\n     */\n    getBlockCount() {\n        return this._blockList.length;\n    }\n    /**\n     * Find a block.\n     * @param blockIndex the index of the block to find.\n     * @return the block.\n     */\n    findBlock(blockIndex) {\n        for (let block of this._blockList)\n            if (block.getBlockIndex().same(blockIndex))\n                return block;\n        return null;\n    }\n    /**\n     * Find a block index.\n     * @param blockIndex the index of the block to find.\n     * @return the block (can be null).\n     */\n    findBlockGridIndex(blockIndex) {\n        return this._blockMap.get(blockIndex.getKey());\n    }\n    /**\n     * Find the block for a tile.\n     * @param tileGridIndex the grid index of the tile.\n     * @return the block (can be null).\n     */\n    findBlockForTile(tileGridIndex) {\n        /* Get the block index */\n        let tileCenter = this._tileGrid.getCellCenter(tileGridIndex);\n        let blockGridIndex = this._blockGrid.getCellIndex(tileCenter);\n        /* Try to find the block */\n        return this._blockMap.get(blockGridIndex.getKey());\n    }\n}\n//# sourceMappingURL=Level.js.map",
      "start": 1693508124792,
      "end": 1693508124917,
      "sourcemaps": null
    }
  ]
}
