{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/ViewFlags.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module DisplayStyles\n */\n// cspell:ignore ovrs\nimport { JsonUtils } from \"@itwin/core-bentley\";\n/** Enumerates the available basic rendering modes, as part of a [DisplayStyle]($backend)'s [[ViewFlags]].\n * The rendering mode broadly affects various aspects of the display style - in particular, whether and how surfaces and their edges are drawn.\n * @public\n * @extensions\n */\nexport var RenderMode;\n(function (RenderMode) {\n    /** Renders only the edges of surfaces, with exceptions for planar regions based on their [[FillFlags]].\n     * Lighting (and by extension, shadows) is not applied.\n     * [[HiddenLine.Settings]] are not applied - edges use the elements' width, style, and color.\n     * [[ViewFlags.hiddenEdges]] is ignored - hidden edges are never displayed in wireframe mode.\n     */\n    RenderMode[RenderMode[\"Wireframe\"] = 0] = \"Wireframe\";\n    /** By default, renders surfaces without their edges.\n     * Lighting and shadows can be applied using [[ViewFlags.lighting]] and [[ViewFlags.shadows]].\n     * Edges can be enabled using [[ViewFlags.visibleEdges]] and [[ViewFlags.hiddenEdges]], and their appearance customized using [[HiddenLine.Settings]].\n     * Surfaces can be drawn with transparency, based on [[ViewFlags.transparency]].\n     */\n    RenderMode[RenderMode[\"SmoothShade\"] = 6] = \"SmoothShade\";\n    /** Renders surfaces and their edges. By default, edges are drawn in white; this can be overridden using [[HiddenLine.Settings]].\n     * All surfaces are rendered opaque. If a surface's transparency is below that specified by [[HiddenLine.Settings.transparencyThreshold]], it is not rendered.\n     * Materials and textures are not applied - surfaces are drawn in their actual colors.\n     * [[ViewFlags.visibleEdges]] is ignored - visible edges are always drawn. Hidden edges can be enabled using [[ViewFlags.hiddenEdges]].\n     * Lighting (and by extension, shadows) is not applied.\n     */\n    RenderMode[RenderMode[\"SolidFill\"] = 4] = \"SolidFill\";\n    /** Identical to [[RenderMode.SolidFill]], except:\n     *  - Surfaces are drawn using the [DisplayStyle]($backend)'s background color.\n     *  - Edges are drawn using their surface's colors; this can be overridden using [[HiddenLine.Settings]].\n     */\n    RenderMode[RenderMode[\"HiddenLine\"] = 3] = \"HiddenLine\";\n})(RenderMode || (RenderMode = {}));\nfunction edgesRequired(renderMode, visibleEdges) {\n    return visibleEdges || RenderMode.SmoothShade !== renderMode;\n}\n/** Flags controlling how graphics appear within a view.\n * A [[ViewFlags]] object is immutable. There are several ways to produce a modified copy of a ViewFlags object:\n * ```ts\n *  // Start with the default values for all properties.\n *  let vf = ViewFlags.defaults;\n *  // Change a single boolean property:\n *  vf = vf.with(\"visibleEdges\", true);\n *  // Change only the render mode:\n *  vf = vf.withRenderMode(RenderMode.HiddenLine);\n *  // Change multiple properties:\n *  vf = vf.copy({ renderMode: RenderMode.SmoothShade, visibleEdges: true });\n *  // Reset multiple properties to their default values:\n *  vf = vf.copy({ renderMode: undefined, visibleEdges: undefined });\n *\n * ```\n * [[with]] and [[withRenderMode]] should be preferred if you only need to change a single property, as they will not create a new object unless\n * the new value differs from the current value.\n * [[copy]] and [[override]] should be preferred if you need to change multiple properties, as they will create no more than one new object, vs\n * each call to [[with]] or [[withRenderMode]] potentially creating a new object.\n * @see [[DisplayStyleSettings.viewFlags]] to define the view flags for a [DisplayStyle]($backend).\n * @public\n */\nclass ViewFlags {\n    /** Create a new ViewFlags.\n     * @param flags The properties to initialize. Any properties not specified are initialized to their default values.\n     */\n    constructor(flags) {\n        this.renderMode = flags?.renderMode ?? RenderMode.Wireframe;\n        this.dimensions = flags?.dimensions ?? true;\n        this.patterns = flags?.patterns ?? true;\n        this.weights = flags?.weights ?? true;\n        this.styles = flags?.styles ?? true;\n        this.transparency = flags?.transparency ?? true;\n        this.fill = flags?.fill ?? true;\n        this.textures = flags?.textures ?? true;\n        this.materials = flags?.materials ?? true;\n        this.acsTriad = flags?.acsTriad ?? false;\n        this.grid = flags?.grid ?? false;\n        this.visibleEdges = flags?.visibleEdges ?? false;\n        this.hiddenEdges = flags?.hiddenEdges ?? false;\n        this.shadows = flags?.shadows ?? false;\n        this.clipVolume = flags?.clipVolume ?? true;\n        this.constructions = flags?.constructions ?? false;\n        this.monochrome = flags?.monochrome ?? false;\n        this.backgroundMap = flags?.backgroundMap ?? false;\n        this.ambientOcclusion = flags?.ambientOcclusion ?? false;\n        this.thematicDisplay = flags?.thematicDisplay ?? false;\n        this.wiremesh = flags?.wiremesh ?? false;\n        this.forceSurfaceDiscard = flags?.forceSurfaceDiscard ?? false;\n        this.whiteOnWhiteReversal = flags?.whiteOnWhiteReversal ?? true;\n        this.lighting = flags?.lighting ?? false;\n    }\n    /** Produce a copy of these ViewFlags with some modified properties. Any properties not explicitly specified by `changedFlags` will retain their current values.\n     * @param changedFlags Properties to modify.\n     * @returns A copy of these ViewFlags modified according to the supplied properties.\n     * @note Any explicitly `undefined` property of `changedFlags` will be set to its default value in the returned ViewFlags.\n     * @see [[override]] to have `undefined` properties retain their current values.\n     */\n    copy(changedFlags) {\n        return JsonUtils.isNonEmptyObject(changedFlags) ? new ViewFlags({ ...this, ...changedFlags }) : this;\n    }\n    /** Produce a copy of these ViewFlags, overriding some of its properties. Any properties not explicitly specified by `overrides` will retain their current values,\n     * as will any property explicitly set to `undefined`.\n     * @param overrides The properties to override.\n     * @see [[copy]] to have `undefined` properties reset to their default values.\n     */\n    override(overrides) {\n        // This method can get called very frequently when a RenderTimeline script is applied to the view. Often `overrides` will be an empty object.\n        // To optimize:\n        //  - Bail as quickly as possible if nothing is actually overridden, without allocating a new ViewFlags.\n        //  - Only make a copy of the input if at least one property is explicitly `undefined`.\n        let copied = false;\n        let anyOverridden = false;\n        for (const propName of Object.keys(overrides)) {\n            const key = propName;\n            const overrideValue = overrides[key];\n            if (undefined === overrideValue) {\n                if (!copied) {\n                    // Don't modify input...\n                    overrides = { ...overrides };\n                    copied = true;\n                }\n                // `undefined` means \"retain existing value\".\n                delete overrides[key];\n            }\n            else if (overrideValue !== this[key]) {\n                anyOverridden = true;\n            }\n        }\n        return anyOverridden ? this.copy(overrides) : this;\n    }\n    /** Produce a copy of these ViewFlags with a single boolean property changed.\n     * @param flag The name of the property.\n     * @param value The value to change the property to.\n     * @returns A new ViewFlags with the property changed as specified, or `this` if the property already has the specified value.\n     * @see [[withRenderMode]] to change the [[renderMode]] property.\n     * @see [[copy]] and [[override]] to change multiple properties.\n     */\n    with(flag, value) {\n        if (this[flag] === value)\n            return this;\n        const props = { ...this };\n        props[flag] = value;\n        return new ViewFlags(props);\n    }\n    /** Produce a copy of these ViewFlags with a different [[renderMode]].\n     * @param renderMode The new render mode.\n     * @returns A new ViewFlags with the render mode changed as specified, or `this` if the render mode is already set to the requested value.\n     * @see [[copy]] and [[override]] to change multiple properties.\n     */\n    withRenderMode(renderMode) {\n        return renderMode === this.renderMode ? this : this.copy({ renderMode });\n    }\n    /** Adjust view flags for renderer.\n     * @internal\n     */\n    normalize() {\n        switch (this.renderMode) {\n            case RenderMode.Wireframe:\n                if (this.visibleEdges || this.hiddenEdges)\n                    return this.copy({ visibleEdges: false, hiddenEdges: false });\n                break;\n            case RenderMode.SmoothShade:\n                if (!this.visibleEdges)\n                    return this.copy({ hiddenEdges: false });\n                break;\n            case RenderMode.HiddenLine:\n            case RenderMode.SolidFill:\n                if (!this.visibleEdges || this.transparency)\n                    return this.copy({ visibleEdges: true, transparency: false });\n                break;\n        }\n        return this;\n    }\n    /** @internal */\n    hiddenEdgesVisible() {\n        switch (this.renderMode) {\n            case RenderMode.SolidFill:\n            case RenderMode.HiddenLine:\n                return this.hiddenEdges;\n            case RenderMode.SmoothShade:\n                return this.visibleEdges && this.hiddenEdges;\n        }\n        return true;\n    }\n    /** Returns true if the edges of surfaces should be displayed, based on [[RenderMode]] and the [[visibleEdges]] flag. */\n    edgesRequired() {\n        return edgesRequired(this.renderMode, this.visibleEdges);\n    }\n    /** Convert to JSON representation.\n     * Properties are omitted if they match the default values.\n     */\n    toJSON() {\n        const out = {};\n        if (!this.constructions)\n            out.noConstruct = true;\n        if (!this.dimensions)\n            out.noDim = true;\n        if (!this.patterns)\n            out.noPattern = true;\n        if (!this.weights)\n            out.noWeight = true;\n        if (!this.styles)\n            out.noStyle = true;\n        if (!this.transparency)\n            out.noTransp = true;\n        if (!this.fill)\n            out.noFill = true;\n        if (this.grid)\n            out.grid = true;\n        if (this.acsTriad)\n            out.acs = true;\n        if (!this.textures)\n            out.noTexture = true;\n        if (!this.materials)\n            out.noMaterial = true;\n        if (!this.lighting)\n            out.noCameraLights = out.noSourceLights = out.noSolarLight = true;\n        if (this.visibleEdges)\n            out.visEdges = true;\n        if (this.hiddenEdges)\n            out.hidEdges = true;\n        if (this.shadows)\n            out.shadows = true;\n        if (this.clipVolume)\n            out.clipVol = true;\n        if (this.monochrome)\n            out.monochrome = true;\n        if (this.backgroundMap)\n            out.backgroundMap = true;\n        if (this.ambientOcclusion)\n            out.ambientOcclusion = true;\n        if (this.thematicDisplay)\n            out.thematicDisplay = true;\n        if (this.wiremesh)\n            out.wiremesh = true;\n        if (this.forceSurfaceDiscard)\n            out.forceSurfaceDiscard = true;\n        if (!this.whiteOnWhiteReversal)\n            out.noWhiteOnWhiteReversal = true;\n        out.renderMode = this.renderMode;\n        return out;\n    }\n    /** Like [[toJSON]], but no properties are omitted. */\n    toFullyDefinedJSON() {\n        return {\n            renderMode: this.renderMode,\n            noConstruct: !this.constructions,\n            noDim: !this.dimensions,\n            noPattern: !this.patterns,\n            noWeight: !this.weights,\n            noStyle: !this.styles,\n            noTransp: !this.transparency,\n            noFill: !this.fill,\n            grid: this.grid,\n            acs: this.acsTriad,\n            noTexture: !this.textures,\n            noMaterial: !this.materials,\n            noCameraLights: !this.lighting,\n            noSourceLights: !this.lighting,\n            noSolarLight: !this.lighting,\n            visEdges: this.visibleEdges,\n            hidEdges: this.hiddenEdges,\n            shadows: this.shadows,\n            clipVol: this.clipVolume,\n            monochrome: this.monochrome,\n            backgroundMap: this.backgroundMap,\n            ambientOcclusion: this.ambientOcclusion,\n            thematicDisplay: this.thematicDisplay,\n            wiremesh: this.wiremesh,\n            forceSurfaceDiscard: this.forceSurfaceDiscard,\n            noWhiteOnWhiteReversal: !this.whiteOnWhiteReversal,\n        };\n    }\n    /** Create a ViewFlags.\n     * @param flags The properties to initialize. Any properties not specified are initialized to their default values.\n     */\n    static create(flags) {\n        return flags && !JsonUtils.isEmptyObject(flags) ? new ViewFlags(flags) : this.defaults;\n    }\n    /** Create a ViewFlags from its JSON representation.\n     * @note As described in [[ViewFlagProps]], the JSON representation is awkward and error-prone. Prefer to use [[create]] unless you\n     * need to deal with the persistence format directly.\n     * @note The default values differ slightly from those used by the constructor and [[create]]:\n     *  - [[clipVolume]] defaults to false.\n     *  - [[constructions]] defaults to true.\n     *  - [[lighting]] defaults to true unless all of [[ViewFlagProps.noSolarLight]], [[ViewFlagProps.noCameraLights]], and [[ViewFlagProps.noSourceLights]] are true.\n     */\n    static fromJSON(json) {\n        if (!json)\n            return this.defaults;\n        let renderMode;\n        const renderModeValue = JsonUtils.asInt(json.renderMode);\n        if (renderModeValue < RenderMode.HiddenLine)\n            renderMode = RenderMode.Wireframe;\n        else if (renderModeValue > RenderMode.SolidFill)\n            renderMode = RenderMode.SmoothShade;\n        else\n            renderMode = renderModeValue;\n        const lighting = !JsonUtils.asBool(json.noCameraLights) || !JsonUtils.asBool(json.noSourceLights) || !JsonUtils.asBool(json.noSolarLight);\n        return new ViewFlags({\n            renderMode,\n            lighting,\n            constructions: !JsonUtils.asBool(json.noConstruct),\n            dimensions: !JsonUtils.asBool(json.noDim),\n            patterns: !JsonUtils.asBool(json.noPattern),\n            weights: !JsonUtils.asBool(json.noWeight),\n            styles: !JsonUtils.asBool(json.noStyle),\n            transparency: !JsonUtils.asBool(json.noTransp),\n            fill: !JsonUtils.asBool(json.noFill),\n            grid: JsonUtils.asBool(json.grid),\n            acsTriad: JsonUtils.asBool(json.acs),\n            textures: !JsonUtils.asBool(json.noTexture),\n            materials: !JsonUtils.asBool(json.noMaterial),\n            visibleEdges: JsonUtils.asBool(json.visEdges),\n            hiddenEdges: JsonUtils.asBool(json.hidEdges),\n            shadows: JsonUtils.asBool(json.shadows),\n            clipVolume: JsonUtils.asBool(json.clipVol),\n            monochrome: JsonUtils.asBool(json.monochrome),\n            backgroundMap: JsonUtils.asBool(json.backgroundMap),\n            ambientOcclusion: JsonUtils.asBool(json.ambientOcclusion),\n            thematicDisplay: JsonUtils.asBool(json.thematicDisplay),\n            wiremesh: JsonUtils.asBool(json.wiremesh),\n            forceSurfaceDiscard: JsonUtils.asBool(json.forceSurfaceDiscard),\n            whiteOnWhiteReversal: !JsonUtils.asBool(json.noWhiteOnWhiteReversal),\n        });\n    }\n    /** Returns true if `this` and `other` are equivalent. */\n    equals(other) {\n        if (this === other)\n            return true;\n        return this.renderMode === other.renderMode\n            && this.dimensions === other.dimensions\n            && this.patterns === other.patterns\n            && this.weights === other.weights\n            && this.styles === other.styles\n            && this.transparency === other.transparency\n            && this.fill === other.fill\n            && this.textures === other.textures\n            && this.materials === other.materials\n            && this.acsTriad === other.acsTriad\n            && this.grid === other.grid\n            && this.visibleEdges === other.visibleEdges\n            && this.hiddenEdges === other.hiddenEdges\n            && this.lighting === other.lighting\n            && this.shadows === other.shadows\n            && this.clipVolume === other.clipVolume\n            && this.constructions === other.constructions\n            && this.monochrome === other.monochrome\n            && this.backgroundMap === other.backgroundMap\n            && this.ambientOcclusion === other.ambientOcclusion\n            && this.thematicDisplay === other.thematicDisplay\n            && this.wiremesh === other.wiremesh\n            && this.forceSurfaceDiscard === other.forceSurfaceDiscard\n            && this.whiteOnWhiteReversal === other.whiteOnWhiteReversal;\n    }\n}\n/** A ViewFlags object with all properties initialized to their default values. */\nViewFlags.defaults = new ViewFlags();\nexport { ViewFlags };\n//# sourceMappingURL=ViewFlags.js.map",
      "start": 1693508120799,
      "end": 1693508120854,
      "sourcemaps": null
    }
  ]
}
