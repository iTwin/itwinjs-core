{
  "resolvedId": "D:/hub2023A/itwinjs-core/common/temp/node_modules/.pnpm/@loaders.gl+draco@3.4.7/node_modules/@loaders.gl/draco/dist/esm/lib/draco-module-loader.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { loadLibrary } from '@loaders.gl/worker-utils';\nconst DRACO_DECODER_VERSION = '1.5.5';\nconst DRACO_ENCODER_VERSION = '1.4.1';\nconst STATIC_DECODER_URL = \"https://www.gstatic.com/draco/versioned/decoders/\".concat(DRACO_DECODER_VERSION);\nconst DRACO_JS_DECODER_URL = \"\".concat(STATIC_DECODER_URL, \"/draco_decoder.js\");\nconst DRACO_WASM_WRAPPER_URL = \"\".concat(STATIC_DECODER_URL, \"/draco_wasm_wrapper.js\");\nconst DRACO_WASM_DECODER_URL = \"\".concat(STATIC_DECODER_URL, \"/draco_decoder.wasm\");\nconst DRACO_ENCODER_URL = \"https://raw.githubusercontent.com/google/draco/\".concat(DRACO_ENCODER_VERSION, \"/javascript/draco_encoder.js\");\nlet loadDecoderPromise;\nlet loadEncoderPromise;\nexport async function loadDracoDecoderModule(options) {\n  const modules = options.modules || {};\n  if (modules.draco3d) {\n    loadDecoderPromise = loadDecoderPromise || modules.draco3d.createDecoderModule({}).then(draco => {\n      return {\n        draco\n      };\n    });\n  } else {\n    loadDecoderPromise = loadDecoderPromise || loadDracoDecoder(options);\n  }\n  return await loadDecoderPromise;\n}\nexport async function loadDracoEncoderModule(options) {\n  const modules = options.modules || {};\n  if (modules.draco3d) {\n    loadEncoderPromise = loadEncoderPromise || modules.draco3d.createEncoderModule({}).then(draco => {\n      return {\n        draco\n      };\n    });\n  } else {\n    loadEncoderPromise = loadEncoderPromise || loadDracoEncoder(options);\n  }\n  return await loadEncoderPromise;\n}\nasync function loadDracoDecoder(options) {\n  let DracoDecoderModule;\n  let wasmBinary;\n  switch (options.draco && options.draco.decoderType) {\n    case 'js':\n      DracoDecoderModule = await loadLibrary(DRACO_JS_DECODER_URL, 'draco', options);\n      break;\n    case 'wasm':\n    default:\n      [DracoDecoderModule, wasmBinary] = await Promise.all([await loadLibrary(DRACO_WASM_WRAPPER_URL, 'draco', options), await loadLibrary(DRACO_WASM_DECODER_URL, 'draco', options)]);\n  }\n  DracoDecoderModule = DracoDecoderModule || globalThis.DracoDecoderModule;\n  return await initializeDracoDecoder(DracoDecoderModule, wasmBinary);\n}\nfunction initializeDracoDecoder(DracoDecoderModule, wasmBinary) {\n  const options = {};\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n  return new Promise(resolve => {\n    DracoDecoderModule({\n      ...options,\n      onModuleLoaded: draco => resolve({\n        draco\n      })\n    });\n  });\n}\nasync function loadDracoEncoder(options) {\n  let DracoEncoderModule = await loadLibrary(DRACO_ENCODER_URL, 'draco', options);\n  DracoEncoderModule = DracoEncoderModule || globalThis.DracoEncoderModule;\n  return new Promise(resolve => {\n    DracoEncoderModule({\n      onModuleLoaded: draco => resolve({\n        draco\n      })\n    });\n  });\n}\n//# sourceMappingURL=draco-module-loader.js.map",
      "start": 1693508123347,
      "end": 1693508123525,
      "sourcemaps": null
    }
  ]
}
