{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/tile/ImdlParser.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tiles\n */\nimport { assert, Dictionary } from \"@itwin/core-bentley\";\nimport { RenderSchedule } from \"@itwin/core-common\";\nimport { createWorkerProxy } from \"../common/WorkerProxy\";\nimport { parseImdlDocument } from \"../common/imdl/ParseImdlDocument\";\nimport { IModelApp } from \"../IModelApp\";\n/** @internal */\nexport function acquireImdlParser(args) {\n    const timeline = args.timeline;\n    if (args.noWorker) {\n        return {\n            parse: async (options) => Promise.resolve(parseImdlDocument({\n                ...options,\n                timeline,\n            })),\n            release: () => undefined,\n        };\n    }\n    if (!args.timeline) {\n        if (!defaultParser) {\n            const worker = createWorkerProxy(`${IModelApp.publicPath}scripts/parse-imdl-worker.js`);\n            defaultParser = {\n                parse: async (options) => worker.parse(options, [options.data.buffer]),\n                release: () => undefined,\n            };\n        }\n        return defaultParser;\n    }\n    let parser = parsersWithTimelines.get(args.timeline);\n    if (!parser)\n        parsersWithTimelines.set(args.timeline, parser = new ParserWithTimeline(args.timeline));\n    assert(parser.refCount >= 0);\n    ++parser.refCount;\n    return parser;\n}\nlet defaultParser;\nclass ParserWithTimeline {\n    constructor(timeline) {\n        this.refCount = 0;\n        this._timeline = timeline;\n        this._worker = createWorkerProxy(`${IModelApp.publicPath}scripts/parse-imdl-worker.js`);\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this._worker.setTimeline(timeline.toJSON());\n    }\n    async parse(options) {\n        return this._worker.parse(options, [options.data.buffer]);\n    }\n    release() {\n        assert(this.refCount > 0);\n        --this.refCount;\n        if (this.refCount === 0) {\n            parsersWithTimelines.delete(this._timeline);\n            this._worker.terminate();\n        }\n    }\n}\nconst parsersWithTimelines = new Dictionary((lhs, rhs) => {\n    if (lhs instanceof RenderSchedule.ModelTimeline)\n        return rhs instanceof RenderSchedule.ModelTimeline ? lhs.compareTo(rhs) : -1;\n    return rhs instanceof RenderSchedule.Script ? lhs.compareTo(rhs) : 1;\n});\n//# sourceMappingURL=ImdlParser.js.map",
      "start": 1693508121653,
      "end": 1693508121809,
      "sourcemaps": null
    }
  ]
}
