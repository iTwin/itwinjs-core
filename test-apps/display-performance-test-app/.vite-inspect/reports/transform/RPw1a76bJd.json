{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/webgl-compatibility/lib/esm/RenderCompatibility.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Compatibility\n */\nimport { Capabilities } from \"./Capabilities\";\n/** Enumerates the required and optional WebGL features used by the [RenderSystem]($frontend).\n * @public\n */\nexport var WebGLFeature;\n(function (WebGLFeature) {\n    /** This feature allows transparent geometry to be rendered more efficiently, using 1 pass instead of 2. */\n    WebGLFeature[\"MrtTransparency\"] = \"mrt transparency\";\n    /** This feature allows picking to occur more efficiently, using 1 pass instead of 3. */\n    WebGLFeature[\"MrtPick\"] = \"mrt pick\";\n    /** This feature ensures large meshes (with more than 21,845 triangles) can be rendered. */\n    WebGLFeature[\"UintElementIndex\"] = \"uint element index\";\n    /** This feature allows transparency to achieve the optimal quality. Without this feature, overlapping transparent geometry will \"wash out\" more easily. */\n    WebGLFeature[\"FloatRendering\"] = \"float rendering\";\n    /** This feature allows for the display of non-3D classification data and solar shadows. */\n    WebGLFeature[\"DepthTexture\"] = \"depth texture\";\n    /** This feature allows instancing of repeated geometry, which can reduce memory consumption. */\n    WebGLFeature[\"Instancing\"] = \"instancing\";\n    /** This feature indicates that the system has enough texture units available for the shaders to run properly. */\n    WebGLFeature[\"MinimalTextureUnits\"] = \"minimal texture units\";\n    /** Indicates that shadow maps are supported. Without this feature, shadows cannot be displayed. */\n    WebGLFeature[\"ShadowMaps\"] = \"shadow maps\";\n    /** This feature allows a logarithmic depth buffer to be used. Without this feature, z-fighting will be much more likely to occur. */\n    WebGLFeature[\"FragDepth\"] = \"fragment depth\";\n    /** This feature allows the renderer to achieve accurate contour lines for isoline and stepped delimiter modes of thematic display. */\n    WebGLFeature[\"StandardDerivatives\"] = \"standard derivatives\";\n    /** This feature allows the renderer to smooth curved lines. */\n    WebGLFeature[\"AntiAliasing\"] = \"anti-aliasing\";\n})(WebGLFeature || (WebGLFeature = {}));\n/** An enumeration that describes a general \"compatibility rating\" based on the contents of a [[WebGLRenderCompatibilityInfo]].\n * @public\n */\nexport var WebGLRenderCompatibilityStatus;\n(function (WebGLRenderCompatibilityStatus) {\n    /**\n     * Signifies that everything is ideal: context created successfully, all required and optional features are available,\n     * and browser did not signal a major performance caveat.\n     */\n    WebGLRenderCompatibilityStatus[WebGLRenderCompatibilityStatus[\"AllOkay\"] = 0] = \"AllOkay\";\n    /**\n     * Signifies that the base requirements of compatibility are met but at least some optional features are missing.\n     * Consult the contents of [[WebGLRenderCompatibilityInfo.missingOptionalFeatures]].\n     */\n    WebGLRenderCompatibilityStatus[WebGLRenderCompatibilityStatus[\"MissingOptionalFeatures\"] = 1] = \"MissingOptionalFeatures\";\n    /**\n     * Signifies that the base requirements of compatibility are met but WebGL reported a major performance caveat.  The browser\n     * has likely fallen back to software rendering due to lack of a usable GPU.\n     * Consult [[WebGLRenderCompatibilityInfo.contextErrorMessage]] for a possible description of what went wrong.\n     * There could also be some missing optional features; consult the contents of [[WebGLRenderCompatibilityInfo.missingOptionalFeatures]].\n     */\n    WebGLRenderCompatibilityStatus[WebGLRenderCompatibilityStatus[\"MajorPerformanceCaveat\"] = 2] = \"MajorPerformanceCaveat\";\n    /**\n     * Signifies that the base requirements of compatibility are not met; rendering cannot occur.\n     * Consult the contents of [[WebGLRenderCompatibilityInfo.missingRequiredFeatures]].\n     */\n    WebGLRenderCompatibilityStatus[WebGLRenderCompatibilityStatus[\"MissingRequiredFeatures\"] = 3] = \"MissingRequiredFeatures\";\n    /**\n     * Signifies an inability to create either a canvas or a WebGL rendering context; rendering cannot occur.  Consult\n     * [[WebGLRenderCompatibilityInfo.contextErrorMessage]] for a possible description of what went wrong.\n     */\n    WebGLRenderCompatibilityStatus[WebGLRenderCompatibilityStatus[\"CannotCreateContext\"] = 4] = \"CannotCreateContext\";\n})(WebGLRenderCompatibilityStatus || (WebGLRenderCompatibilityStatus = {}));\nfunction createDefaultContext(canvas, useWebGL2 = true, attributes) {\n    let context = useWebGL2 ? canvas.getContext(\"webgl2\", attributes) : canvas.getContext(\"webgl\", attributes);\n    if (context === null && useWebGL2)\n        context = canvas.getContext(\"webgl\", attributes);\n    return context ?? undefined;\n}\n/** This function returns information about the client system's level of compatibility with the iTwin.js rendering system, describing the client system's support for both optional and required features. It will also report if there is a major issue with the client system such as the browser falling back to software rendering or an inability to create a either a canvas or a WebGL rendering context.\n * @param useWebGL2 A boolean which will be passed to the createContext function in order to create the desired type of context; set this to `true` to use WebGL2, `false` to use WebGL1.\n * @param createContext A function of type [[ContextCreator]] that returns a WebGLContext. If not specified, this by default uses `canvas.getContext()` to create the WebGLContext.\n * @returns A [[WebGLRenderCompatibilityInfo]] object which contains a compatibility summary.\n * @see [[WebGLRenderCompatibilityInfo]]\n * @public\n */\nexport function queryRenderCompatibility(useWebGL2, createContext) {\n    const canvas = document.createElement(\"canvas\");\n    if (null === canvas)\n        return { status: WebGLRenderCompatibilityStatus.CannotCreateContext, missingOptionalFeatures: [], missingRequiredFeatures: [], userAgent: navigator.userAgent, driverBugs: {} };\n    let errorMessage;\n    canvas.addEventListener(\"webglcontextcreationerror\", (event) => {\n        errorMessage = event.statusMessage || \"webglcontextcreationerror was triggered with no error provided\";\n    }, false);\n    if (undefined === createContext)\n        createContext = createDefaultContext;\n    let hasMajorPerformanceCaveat = false;\n    let context = createContext(canvas, useWebGL2, { failIfMajorPerformanceCaveat: true });\n    if (undefined === context) {\n        hasMajorPerformanceCaveat = true;\n        context = createContext(canvas, useWebGL2); // try to create context without black-listed GPU\n        if (undefined === context)\n            return {\n                status: WebGLRenderCompatibilityStatus.CannotCreateContext,\n                missingOptionalFeatures: [],\n                missingRequiredFeatures: [],\n                userAgent: navigator.userAgent,\n                contextErrorMessage: errorMessage,\n                driverBugs: {},\n            };\n    }\n    const capabilities = new Capabilities();\n    const compatibility = capabilities.init(context, undefined);\n    compatibility.contextErrorMessage = errorMessage;\n    if (hasMajorPerformanceCaveat && compatibility.status !== WebGLRenderCompatibilityStatus.MissingRequiredFeatures)\n        compatibility.status = WebGLRenderCompatibilityStatus.MajorPerformanceCaveat;\n    return compatibility;\n}\n//# sourceMappingURL=RenderCompatibility.js.map",
      "start": 1693508124570,
      "end": 1693508124648,
      "sourcemaps": null
    }
  ]
}
