{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/IModelVersion.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module iModels\n */\n/** Option to specify the version of the iModel to be acquired and used\n * @public\n */\nexport class IModelVersion {\n    constructor() { }\n    /** Describes the first version of the iModel */\n    static first() {\n        const version = new IModelVersion();\n        version._first = true;\n        return version;\n    }\n    /** Describes the latest version of the iModel  */\n    static latest() {\n        const version = new IModelVersion();\n        version._latest = true;\n        return version;\n    }\n    /** Describes a version of the iModel by the last change set that needs\n     * to be applied or merged to the iModel.\n     * Note that all ChangeSets up to and and including the specified ChangeSet\n     * needs to be applied.\n     * If the changesetId is an empty string, it is assumed to be the first version\n     * before any change sets have been applied.\n     */\n    static asOfChangeSet(changesetId) {\n        const version = new IModelVersion();\n        if (changesetId === \"\") {\n            version._first = true;\n            return version;\n        }\n        version._afterChangeSetId = changesetId;\n        return version;\n    }\n    /** Describes a version of the iModel with the specified version name  */\n    static named(versionName) {\n        const version = new IModelVersion();\n        version._versionName = versionName;\n        return version;\n    }\n    toJSON() {\n        return this._versionName ? { versionName: this._versionName } :\n            this._afterChangeSetId ? { afterChangeSetId: this._afterChangeSetId } :\n                this._first ? { first: this._first } :\n                    { latest: true };\n    }\n    /** Creates a version from an IModelVersionProps */\n    static fromJSON(json) {\n        const version = new IModelVersion();\n        version._first = json.first;\n        version._afterChangeSetId = json.afterChangeSetId;\n        version._latest = json.latest;\n        version._versionName = json.versionName;\n        return version;\n    }\n    /** Returns true if this describes the first version */\n    get isFirst() { return !!this._first; }\n    /** Returns true if this describes the latest version */\n    get isLatest() { return !!this._latest; }\n    /** Returns the last change set id to be applied to the iModel\n     * to get to this specified version. @see asOfChangeSet().\n     * Note that this method does not attempt to resolve the change set\n     * if this describes the first version, last version, named version, etc.\n     * @see evaluateChangeSet() for those use cases.\n     */\n    getAsOfChangeSet() { return this._afterChangeSetId; }\n    /** Returns the name of the version if this describes a named version. @see named() */\n    getName() { return this._versionName; }\n}\n//# sourceMappingURL=IModelVersion.js.map",
      "start": 1693508120661,
      "end": 1693508120728,
      "sourcemaps": null
    }
  ]
}
