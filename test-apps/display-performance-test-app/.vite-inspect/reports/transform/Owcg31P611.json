{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/system/runtime/DownloaderXhr.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { ABuffer } from \"../buffer/ABuffer\";\nimport { StringMap } from \"../collection/StringMap\";\nimport { Downloader } from \"./Downloader\";\n/**\n * Class DownloaderXhr implements a downloader using an XmlHttpRequest (XHR).\n */\n/** @internal */\nexport class DownloaderXhr extends Downloader {\n    // create a new downloader\n    //\n    constructor() {\n        super();\n    }\n    // read the response headers\n    //\n    static readResponseHeaders(request, responseHeaders) {\n        // console.log(\"reading response headers\");\n        const headerLines = request.getAllResponseHeaders().trim().split(/[\\r\\n]+/);\n        for (const headerLine of headerLines) {\n            const parts = headerLine.split(\": \");\n            const name = parts[0];\n            const value = request.getResponseHeader(name);\n            responseHeaders.set(name, value);\n            // console.log(\"response header '\"+name+\"' value '\"+value+\"'\");\n        }\n    }\n    // make a generic download\n    //\n    download0(method, requestURL, responseType, requestHeaders, postText, postData, responseHeaders, callback, errorCallback) {\n        // set the defaults\n        if (method == null)\n            method = \"GET\";\n        if (requestHeaders == null)\n            requestHeaders = new StringMap();\n        // create the request\n        // console.log(\"connect method '\"+method+\"' to '\"+requestURL+\"'\");\n        const request = new XMLHttpRequest();\n        request.open(method, requestURL);\n        // set the request headers\n        for (const headerName of requestHeaders.keys()) {\n            const headerValue = requestHeaders.get(headerName);\n            request.setRequestHeader(headerName, headerValue);\n            // console.log(\"setting request header '\"+headerName+\"' value '\"+headerValue+\"'\");\n        }\n        // set the response type?\n        if (responseType != null) {\n            // either \"arraybuffer\" or \"blob\" or \"document\" or \"json\" or \"text\"\n            if (responseType == \"bytes\")\n                request.responseType = \"arraybuffer\";\n            if (responseType == \"arraybuffer\")\n                request.responseType = \"arraybuffer\";\n            if (responseType == \"blob\")\n                request.responseType = \"blob\";\n            if (responseType == \"json\")\n                request.responseType = \"json\";\n            if (responseType == \"text\")\n                request.responseType = \"text\";\n            // console.log(\"response type '\"+request.responseType+\"'\");\n        }\n        // set the response handler\n        request.onload = function () {\n            // valid response?\n            // console.log(\"download '\"+requestURL+\"' response code: \"+this.status);\n            if (this.status >= 200 && this.status < 400) {\n                // read the response headers?\n                if (responseHeaders != null)\n                    DownloaderXhr.readResponseHeaders(this, responseHeaders);\n                // read the reponse body\n                if (this.responseType == \"arraybuffer\")\n                    callback(ABuffer.wrap(this.response));\n                else\n                    callback(this.responseText);\n            }\n            else {\n                // invalid response\n                // console.log(\"> error code, so no response\");\n                callback(null);\n            }\n        };\n        // set the error handler\n        request.onerror = function (err) {\n            console.error(`download '${requestURL}' error: ${err}`);\n            errorCallback(err);\n        };\n        // post text?\n        if (postText != null) {\n            // send the request to the server\n            // console.log(\"posting text '\"+postText+\"'\");\n            request.setRequestHeader(\"Content-Type\", \"text/plain\");\n            request.send(postText);\n        }\n        // post data?\n        else if (postData != null) {\n            // send the request to the server\n            // console.log(\"posting binary data, size \"+postData.size());\n            request.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\n            request.send(postData.toNativeBuffer());\n        }\n        else {\n            // send the request to the server\n            // console.log(\"sending request\");\n            request.send(null);\n        }\n    }\n    // Downloader base class method override\n    //\n    async downloadBytes(method, requestURL, requestHeaders, postText, postData, responseHeaders) {\n        return new Promise((resolve, reject) => { this.download0(method, requestURL, \"arraybuffer\" /* responseType*/, requestHeaders, postText, postData, responseHeaders, resolve, reject); });\n    }\n    // Downloader base class method override\n    //\n    async downloadText(method, requestURL, requestHeaders, postText, postData, responseHeaders) {\n        return new Promise((resolve, reject) => { this.download0(method, requestURL, \"text\" /* responseType*/, requestHeaders, postText, postData, responseHeaders, resolve, reject); });\n    }\n    // Downloader base class method override\n    //\n    async downloadText2(requestURL) {\n        return await this.downloadText(\"GET\", requestURL, null, null, null, null);\n    }\n}\n//# sourceMappingURL=DownloaderXhr.js.map",
      "start": 1693508124906,
      "end": 1693508124979,
      "sourcemaps": null
    }
  ]
}
