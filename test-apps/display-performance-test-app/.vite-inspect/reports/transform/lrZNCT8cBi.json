{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/ContextRealityModel.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module DisplayStyles\n */\nimport { assert, BeEvent } from \"@itwin/core-bentley\";\nimport { FeatureAppearance } from \"./FeatureSymbology\";\nimport { PlanarClipMaskMode, PlanarClipMaskSettings } from \"./PlanarClipMask\";\nimport { SpatialClassifiers } from \"./SpatialClassification\";\nimport { RealityModelDisplaySettings } from \"./RealityModelDisplaySettings\";\n/** Identify the Reality Data service provider\n * @beta\n */\nexport var RealityDataProvider;\n(function (RealityDataProvider) {\n    /**\n     * This is the legacy mode where the access to the 3d tiles is harcoded in ContextRealityModelProps.tilesetUrl property.\n     * It was use to support RealityMesh3DTiles, Terrain3DTiles, Cesium3DTiles\n     * You should use other mode when possible\n     * @see [[RealityDataSource.createKeyFromUrl]] that will try to detect provider from an URL\n     */\n    RealityDataProvider[\"TilesetUrl\"] = \"TilesetUrl\";\n    /**\n     * This is the legacy mode where the access to the 3d tiles is harcoded in ContextRealityModelProps.OrbitGtBlob property.\n     * It was use to support OrbitPointCloud (OPC) from other server than ContextShare\n     * You should use other mode when possible\n     * @see [[RealityDataSource.createKeyFromOrbitGtBlobProps]] that will try to detect provider from an URL\n     */\n    RealityDataProvider[\"OrbitGtBlob\"] = \"OrbitGtBlob\";\n    /**\n     * Will provide access url from realityDataId and iTwinId on contextShare for 3dTile storage format or  OPC storage format\n     * This provider support all type of 3dTile storage fomat and OrbitPointCloud: RealityMesh3DTiles, Terrain3DTiles, Cesium3DTiles, OPC\n     * @see [[RealityDataFormat]].\n     */\n    RealityDataProvider[\"ContextShare\"] = \"ContextShare\";\n    /**\n     * Will provide Open Street Map Building (OSM) from Cesium Ion (in 3dTile format)\n     */\n    RealityDataProvider[\"CesiumIonAsset\"] = \"CesiumIonAsset\";\n})(RealityDataProvider || (RealityDataProvider = {}));\n/** Identify the Reality Data storage format\n * @beta\n */\nexport var RealityDataFormat;\n(function (RealityDataFormat) {\n    /**\n     * 3dTile supported formats; RealityMesh3DTiles, Terrain3DTiles, Cesium3DTiles\n     * */\n    RealityDataFormat[\"ThreeDTile\"] = \"ThreeDTile\";\n    /**\n     * Orbit Point Cloud (OPC) storage format (RealityDataType.OPC)\n    */\n    RealityDataFormat[\"OPC\"] = \"OPC\";\n})(RealityDataFormat || (RealityDataFormat = {}));\n/** Utility function for RealityDataFormat\n * @beta\n */\n(function (RealityDataFormat) {\n    /**\n     * Try to extract the RealityDataFormat from the url\n     * @param tilesetUrl the reality data attachment url\n     * @returns the extracted RealityDataFormat or ThreeDTile by default if not found\n     */\n    function fromUrl(tilesetUrl) {\n        let format = RealityDataFormat.ThreeDTile;\n        if (tilesetUrl.includes(\".opc\"))\n            format = RealityDataFormat.OPC;\n        return format;\n    }\n    RealityDataFormat.fromUrl = fromUrl;\n})(RealityDataFormat || (RealityDataFormat = {}));\n/**\n * RealityDataSourceKey utility functions\n * @beta */\nexport var RealityDataSourceKey;\n(function (RealityDataSourceKey) {\n    /** Utility function to convert a RealityDataSourceKey into its string representation */\n    function convertToString(rdSourceKey) {\n        return `${rdSourceKey.provider}:${rdSourceKey.format}:${rdSourceKey.id}:${rdSourceKey?.iTwinId}`;\n    }\n    RealityDataSourceKey.convertToString = convertToString;\n    /** Utility function to compare two RealityDataSourceKey, we consider it equal even if itwinId is different */\n    function isEqual(key1, key2) {\n        if ((key1.provider === RealityDataProvider.CesiumIonAsset) && key2.provider === RealityDataProvider.CesiumIonAsset)\n            return true; // ignore other properties for CesiumIonAsset, id is hidden\n        if ((key1.provider === key2.provider) && (key1.format === key2.format) && (key1.id === key2.id)) {\n            // && (key1?.iTwinId === key2?.iTwinId)) -> ignore iTwinId, consider it is the same reality data\n            return true;\n        }\n        return false;\n    }\n    RealityDataSourceKey.isEqual = isEqual;\n})(RealityDataSourceKey || (RealityDataSourceKey = {}));\n/** @public */\nexport var ContextRealityModelProps;\n(function (ContextRealityModelProps) {\n    /** Produce a deep copy of `input`. */\n    function clone(input) {\n        // Spread operator is shallow, and includes `undefined` properties and empty strings.\n        // We want to make deep copies, omit undefined properties and empty strings, and require tilesetUrl to be defined.\n        const output = { tilesetUrl: input.tilesetUrl ?? \"\" };\n        if (input.rdSourceKey)\n            output.rdSourceKey = { ...input.rdSourceKey };\n        if (input.name)\n            output.name = input.name;\n        if (input.realityDataId)\n            output.realityDataId = input.realityDataId;\n        if (input.description)\n            output.description = input.description;\n        if (input.orbitGtBlob)\n            output.orbitGtBlob = { ...input.orbitGtBlob };\n        if (input.appearanceOverrides) {\n            output.appearanceOverrides = { ...input.appearanceOverrides };\n            if (input.appearanceOverrides.rgb)\n                output.appearanceOverrides.rgb = { ...input.appearanceOverrides.rgb };\n        }\n        if (input.displaySettings) {\n            output.displaySettings = { ...input.displaySettings };\n            if (input.displaySettings.pointCloud)\n                output.displaySettings.pointCloud = { ...output.displaySettings.pointCloud };\n        }\n        if (input.planarClipMask)\n            output.planarClipMask = { ...input.planarClipMask };\n        if (input.classifiers)\n            output.classifiers = input.classifiers.map((x) => { return { ...x, flags: { ...x.flags } }; });\n        return output;\n    }\n    ContextRealityModelProps.clone = clone;\n})(ContextRealityModelProps || (ContextRealityModelProps = {}));\n/** A reality model not associated with a [GeometricModel]($backend) but instead defined in a [DisplayStyle]($backend) or [DisplayStyleState]($frontend).\n * Such reality models are displayed to provide context to the view and can be freely attached and detached at display time.\n * @see [this interactive example](https://www.itwinjs.org/sample-showcase/?group=Viewer&sample=reality-data-sample)\n * @see [[DisplayStyleSettings.contextRealityModels]] to define context reality models for a display style.\n * @public\n */\nexport class ContextRealityModel {\n    /** Construct a new context reality model.\n     * @param props JSON representation of the reality model, which will be kept in sync with changes made via the ContextRealityModel's methods.\n     */\n    constructor(props) {\n        /** Event dispatched just before assignment to [[planarClipMaskSettings]]. */\n        this.onPlanarClipMaskChanged = new BeEvent();\n        /** Event dispatched just before assignment to [[appearanceOverrides]]. */\n        this.onAppearanceOverridesChanged = new BeEvent();\n        /** Event dispatched just before assignment to [[displaySettings]].\n         * @beta\n         */\n        this.onDisplaySettingsChanged = new BeEvent();\n        this._props = props;\n        this.rdSourceKey = props.rdSourceKey;\n        this.name = props.name ?? \"\";\n        this.url = props.tilesetUrl ?? \"\";\n        this.orbitGtBlob = props.orbitGtBlob;\n        this.realityDataId = props.realityDataId;\n        this.description = props.description ?? \"\";\n        this._appearanceOverrides = props.appearanceOverrides ? FeatureAppearance.fromJSON(props.appearanceOverrides) : undefined;\n        this._displaySettings = RealityModelDisplaySettings.fromJSON(props.displaySettings);\n        if (props.planarClipMask && props.planarClipMask.mode !== PlanarClipMaskMode.None)\n            this._planarClipMask = PlanarClipMaskSettings.fromJSON(props.planarClipMask);\n        if (props.classifiers)\n            this.classifiers = new SpatialClassifiers(props);\n    }\n    /** Optionally describes how the geometry of the reality model can be masked by other models. */\n    get planarClipMaskSettings() {\n        return this._planarClipMask;\n    }\n    set planarClipMaskSettings(settings) {\n        this.onPlanarClipMaskChanged.raiseEvent(settings, this);\n        if (!settings)\n            delete this._props.planarClipMask;\n        else\n            this._props.planarClipMask = settings.toJSON();\n        this._planarClipMask = settings;\n    }\n    /** Overrides applied to the appearance of the reality model. Only the rgb, transparency, nonLocatable, and emphasized properties are applicable - the rest are ignored. */\n    get appearanceOverrides() {\n        return this._appearanceOverrides;\n    }\n    set appearanceOverrides(overrides) {\n        this.onAppearanceOverridesChanged.raiseEvent(overrides, this);\n        if (!overrides)\n            delete this._props.appearanceOverrides;\n        else\n            this._props.appearanceOverrides = overrides.toJSON();\n        this._appearanceOverrides = overrides;\n    }\n    /** Settings controlling how this reality model is displayed in a [Viewport]($frontend).\n     * @beta\n     */\n    get displaySettings() {\n        return this._displaySettings;\n    }\n    set displaySettings(settings) {\n        this.onDisplaySettingsChanged.raiseEvent(settings, this);\n        this._props.displaySettings = settings.toJSON();\n        this._displaySettings = settings;\n    }\n    /** Convert this model to its JSON representation. */\n    toJSON() {\n        return ContextRealityModelProps.clone(this._props);\n    }\n    /** Returns true if [[name]] and [[url]] match the specified name and url. */\n    matchesNameAndUrl(name, url) {\n        return this.name === name && this.url === url;\n    }\n}\n/** A list of [[ContextRealityModel]]s attached to a [[DisplayStyleSettings]]. The list may be presented to the user with the name and description of each model.\n * The list is automatically synchronized with the underlying JSON representation provided by the input [[ContextRealityModelsContainer]].\n * @see [this interactive example](https://www.itwinjs.org/sample-showcase/?group=Viewer&sample=reality-data-sample)\n * @see [[DisplayStyleSettings.contextRealityModels]].\n * @public\n */\nexport class ContextRealityModels {\n    /** @internal */\n    constructor(arg0, createContextRealityModel) {\n        this._models = [];\n        /** Event dispatched just before [[ContextRealityModel.planarClipMaskSettings]] is modified for one of the reality models. */\n        this.onPlanarClipMaskChanged = new BeEvent();\n        /** Event dispatched just before [[ContextRealityModel.appearanceOverrides]] is modified for one of the reality models. */\n        this.onAppearanceOverridesChanged = new BeEvent();\n        /** Event dispatched just before [[ContextRealityModel.displaySettings]] is modified for one of the reality models.\n         * @beta\n         */\n        this.onDisplaySettingsChanged = new BeEvent();\n        /** Event dispatched when a model is [[add]]ed, [[delete]]d, [[replace]]d, or [[update]]d. */\n        this.onChanged = new BeEvent();\n        let container;\n        let defer = false;\n        if (arg0.container) {\n            container = arg0.container;\n            createContextRealityModel = arg0.createContextRealityModel;\n            defer = true === arg0.deferPopulating;\n        }\n        else {\n            container = arg0;\n        }\n        this._container = container;\n        this._createModel = createContextRealityModel ?? ((props) => new ContextRealityModel(props));\n        if (!defer)\n            this.populate();\n    }\n    /** @internal needs to be invoked after DisplayStyleSettings constructor by DisplayStyleState constructor.*/\n    /** Populate the list of [[models]] from the container that was supplied to the constructor.\n     * This should only be invoked once, and only if [[ContextRealityModelsArgs.deferPopulating]] was specified as `true` when calling the constructor.\n     * @public\n     */\n    populate() {\n        assert(this._models.length === 0, \"do not call ContextRealityModels.populate more than once\");\n        const models = this._container.contextRealityModels;\n        if (models)\n            for (const model of models)\n                this._models.push(this.createModel(model));\n    }\n    /** The read-only list of reality models. */\n    get models() {\n        return this._models;\n    }\n    /** Append a new reality model to the list.\n     * @param The JSON representation of the reality model.\n     * @returns the newly-added reality model.\n     */\n    add(props) {\n        if (!this._container.contextRealityModels)\n            this._container.contextRealityModels = [];\n        props = ContextRealityModelProps.clone(props);\n        const model = this.createModel(props);\n        this.onChanged.raiseEvent(undefined, model);\n        this._models.push(model);\n        this._container.contextRealityModels.push(props);\n        return model;\n    }\n    /** Remove the specified reality model from the list.\n     * @param model The reality model to remove.\n     * @returns true if the model was removed, or false if the model was not present in the list.\n     */\n    delete(model) {\n        const index = this._models.indexOf(model);\n        if (-1 === index)\n            return false;\n        assert(undefined !== this._container.contextRealityModels);\n        assert(index < this._container.contextRealityModels.length);\n        this.dropEventListeners(model);\n        this.onChanged.raiseEvent(model, undefined);\n        this._models.splice(index, 1);\n        if (this.models.length === 0)\n            this._container.contextRealityModels = undefined;\n        else\n            this._container.contextRealityModels.splice(index, 1);\n        return true;\n    }\n    /** Remove all reality models from the list. */\n    clear() {\n        for (const model of this.models) {\n            this.dropEventListeners(model);\n            this.onChanged.raiseEvent(model, undefined);\n        }\n        this._container.contextRealityModels = undefined;\n        this._models.length = 0;\n    }\n    /** Replace a reality model in the list.\n     * @param toReplace The reality model to be replaced.\n     * @param replaceWith The JSON representation of the replacement reality model.\n     * @returns the newly-created reality model that replaced `toReplace`.\n     * @throws Error if `toReplace` is not present in the list\n     * @note The replacement occupies the same index in the list as `toReplace` did.\n     */\n    replace(toReplace, replaceWith) {\n        const index = this._models.indexOf(toReplace);\n        if (-1 === index)\n            throw new Error(\"ContextRealityModel not present in list.\");\n        assert(undefined !== this._container.contextRealityModels);\n        assert(index < this._container.contextRealityModels.length);\n        replaceWith = ContextRealityModelProps.clone(replaceWith);\n        const model = this.createModel(replaceWith);\n        this.onChanged.raiseEvent(toReplace, model);\n        this.dropEventListeners(toReplace);\n        this._models[index] = model;\n        this._container.contextRealityModels[index] = replaceWith;\n        return model;\n    }\n    /** Change selected properties of a reality model.\n     * @param toUpdate The reality model whose properties are to be modified.\n     * @param updateProps The properties to change.\n     * @returns The updated reality model, identical to `toUpdate` except for properties explicitly supplied by `updateProps`.\n     * @throws Error if `toUpdate` is not present in the list.\n     */\n    update(toUpdate, updateProps) {\n        const props = {\n            ...toUpdate.toJSON(),\n            ...updateProps,\n        };\n        // Partial<> makes it possible to pass `undefined` for tilesetUrl...preserve previous URL in that case.\n        if (undefined === props.tilesetUrl)\n            props.tilesetUrl = toUpdate.url;\n        return this.replace(toUpdate, props);\n    }\n    createModel(props) {\n        const model = this._createModel(props);\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        model.onPlanarClipMaskChanged.addListener(this.handlePlanarClipMaskChanged, this);\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        model.onAppearanceOverridesChanged.addListener(this.handleAppearanceOverridesChanged, this);\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        model.onDisplaySettingsChanged.addListener(this.handleDisplaySettingsChanged, this);\n        return model;\n    }\n    dropEventListeners(model) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        model.onPlanarClipMaskChanged.removeListener(this.handlePlanarClipMaskChanged, this);\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        model.onAppearanceOverridesChanged.removeListener(this.handleAppearanceOverridesChanged, this);\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        model.onDisplaySettingsChanged.removeListener(this.handleDisplaySettingsChanged, this);\n    }\n    handlePlanarClipMaskChanged(mask, model) {\n        this.onPlanarClipMaskChanged.raiseEvent(model, mask);\n    }\n    handleAppearanceOverridesChanged(app, model) {\n        this.onAppearanceOverridesChanged.raiseEvent(model, app);\n    }\n    handleDisplaySettingsChanged(settings, model) {\n        this.onDisplaySettingsChanged.raiseEvent(model, settings);\n    }\n}\n//# sourceMappingURL=ContextRealityModel.js.map",
      "start": 1693508120497,
      "end": 1693508120541,
      "sourcemaps": null
    }
  ]
}
