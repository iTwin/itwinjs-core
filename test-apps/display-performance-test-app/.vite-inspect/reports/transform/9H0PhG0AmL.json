{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/system/storage/CacheList.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { AList } from \"../collection/AList\";\nimport { ASystem } from \"../runtime/ASystem\";\nimport { Strings } from \"../runtime/Strings\";\nimport { CachedItem } from \"./CachedItem\";\n/**\n * Class CacheList caches a list of items based on last-recently-used order.\n */\n/** @internal */\nexport class CacheList {\n    /**\n     * Create a new cache, with an optional non-zero maximum number of entries.\n     */\n    constructor(maxEntries) {\n        this._maxEntries = maxEntries;\n        this._entries = new AList();\n        this.hitCount = 0;\n        this.missCount = 0;\n    }\n    /**\n     * Get the number of entries in the cache.\n     */\n    size() {\n        return this._entries.size();\n    }\n    /**\n     * Clear all entries.\n     */\n    clear() {\n        this._entries.clear();\n        this.hitCount = 0;\n        this.missCount = 0;\n    }\n    /**\n     * Find an entry in the cache, or return null if not found.\n     */\n    findEntry(key) {\n        /* Check all entries */\n        for (let i = 0; i < this._entries.size(); i++) {\n            /* Search back (most used) to front (least used) */\n            let entryIndex = (this._entries.size() - 1 - i);\n            /* Is this the requested entry? */\n            let entry = this._entries.get(entryIndex);\n            if (Strings.equals(entry.key, key)) {\n                /* Move the latest-used entry to the back of the list */\n                if (entryIndex < this._entries.size() - 1) {\n                    this._entries.remove(entryIndex);\n                    this._entries.add(entry);\n                }\n                /* Update the access time */\n                entry.accessTime = ASystem.time();\n                /* The entry was found */\n                this.hitCount++;\n                return entry.element;\n            }\n        }\n        /* No entry was found */\n        this.missCount++;\n        return null;\n    }\n    /**\n     * Add an entry to the cache, pushing out the oldest entry if the cache is full.\n     */\n    addEntry(key, element) {\n        /* Add a new entry to the back of the list */\n        this._entries.add(new CachedItem(key, element, ASystem.time()));\n        if ((this._maxEntries > 0) && (this._entries.size() > this._maxEntries))\n            this._entries.remove(0);\n    }\n}\n//# sourceMappingURL=CacheList.js.map",
      "start": 1693508125366,
      "end": 1693508125420,
      "sourcemaps": null
    }
  ]
}
