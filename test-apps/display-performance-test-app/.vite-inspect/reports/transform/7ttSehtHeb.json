{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/pointcloud/model/AttributeValue.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { LittleEndian } from \"../../system/buffer/LittleEndian\";\nimport { ALong } from \"../../system/runtime/ALong\";\nimport { ASystem } from \"../../system/runtime/ASystem\";\nimport { Numbers } from \"../../system/runtime/Numbers\";\nimport { AttributeTypes } from \"./AttributeTypes\";\n/**\n * Class AttributeValue holds a single (typed) attribute value.\n *\n * @version 1.0 August 2013\n */\n/** @internal */\nclass AttributeValue {\n    /**\n     * Create a new (empty) value.\n     */\n    constructor() {\n        this._type = 0;\n        this._valueI4 = 0;\n        this._valueI8 = ALong.ZERO;\n        this._valueF4 = 0.0;\n        this._valueF8 = 0.0;\n    }\n    /**\n     * Create a new value.\n     * @param value the value.\n     */\n    static createBoolean(value) {\n        let avalue = new AttributeValue();\n        avalue.setBoolean(value);\n        return avalue;\n    }\n    /**\n     * Create a new value.\n     * @param value the value.\n     */\n    static createInt1(value) {\n        let avalue = new AttributeValue();\n        avalue.setInt1(value);\n        return avalue;\n    }\n    /**\n     * Create a new value.\n     * @param value the value.\n     */\n    static createInt2(value) {\n        let avalue = new AttributeValue();\n        avalue.setInt2(value);\n        return avalue;\n    }\n    /**\n     * Create a new value.\n     * @param value the value.\n     */\n    static createInt4(value) {\n        let avalue = new AttributeValue();\n        avalue.setInt4(value);\n        return avalue;\n    }\n    /**\n     * Create a new value.\n     * @param value the value.\n     */\n    static createInt8(value) {\n        let avalue = new AttributeValue();\n        avalue.setInt8(value);\n        return avalue;\n    }\n    /**\n     * Create a new value.\n     * @param value the value.\n     */\n    static createFloat4(value) {\n        let avalue = new AttributeValue();\n        avalue.setFloat4(value);\n        return avalue;\n    }\n    /**\n     * Create a new value.\n     * @param value the value.\n     */\n    static createFloat8(value) {\n        let avalue = new AttributeValue();\n        avalue.setFloat8(value);\n        return avalue;\n    }\n    /**\n     * Create a new value.\n     * @param value the value.\n     */\n    static createColor(value) {\n        let avalue = new AttributeValue();\n        avalue.setColor(value);\n        return avalue;\n    }\n    /**\n     * Get the type.\n     * @return the type.\n     */\n    getType() {\n        return this._type;\n    }\n    /**\n     * Clear the value.\n     */\n    clear() {\n        this._type = 0;\n    }\n    /**\n     * Is this an empty value?\n     * @return true for empty.\n     */\n    isEmpty() {\n        return (this._type == 0);\n    }\n    /**\n     * Get the value.\n     * @return the value.\n     */\n    getBoolean() {\n        return (this._valueI4 != 0);\n    }\n    /**\n     * Get the value.\n     * @return the value.\n     */\n    getBooleanAsInt() {\n        return this._valueI4;\n    }\n    /**\n     * Set the value.\n     * @param value the new value.\n     */\n    setBoolean(value) {\n        this._type = AttributeTypes.TYPE_BOOLEAN;\n        if (value)\n            this._valueI4 = 1;\n        else\n            this._valueI4 = 0;\n    }\n    /**\n     * Set the value.\n     * @param value the new value.\n     */\n    setBooleanFromInt(value) {\n        this._type = AttributeTypes.TYPE_BOOLEAN;\n        if (value == 0)\n            this._valueI4 = 0;\n        else\n            this._valueI4 = 1;\n    }\n    /**\n     * Get the value.\n     * @return the value.\n     */\n    getInt1() {\n        return this._valueI4;\n    }\n    /**\n     * Set the value.\n     * @param value the new value.\n     */\n    setInt1(value) {\n        this._type = AttributeTypes.TYPE_INT1;\n        this._valueI4 = value;\n    }\n    /**\n     * Get the value.\n     * @return the value.\n     */\n    getInt2() {\n        return this._valueI4;\n    }\n    /**\n     * Set the value.\n     * @param value the new value.\n     */\n    setInt2(value) {\n        this._type = AttributeTypes.TYPE_INT2;\n        this._valueI4 = value;\n    }\n    /**\n     * Get the value.\n     * @return the value.\n     */\n    getInt4() {\n        return this._valueI4;\n    }\n    /**\n     * Set the value.\n     * @param value the new value.\n     */\n    setInt4(value) {\n        this._type = AttributeTypes.TYPE_INT4;\n        this._valueI4 = value;\n    }\n    /**\n     * Get the value.\n     * @return the value.\n     */\n    getInt8() {\n        return this._valueI8;\n    }\n    /**\n     * Set the value.\n     * @param value the new value.\n     */\n    setInt8(value) {\n        this._type = AttributeTypes.TYPE_INT8;\n        this._valueI8 = value;\n    }\n    /**\n     * Get the value.\n     * @return the value.\n     */\n    getFloat4() {\n        return this._valueF4;\n    }\n    /**\n     * Set the value.\n     * @param value the new value.\n     */\n    setFloat4(value) {\n        this._type = AttributeTypes.TYPE_FLOAT4;\n        this._valueF4 = value;\n    }\n    /**\n     * Get the value.\n     * @return the value.\n     */\n    getFloat8() {\n        return this._valueF8;\n    }\n    /**\n     * Set the value.\n     * @param value the new value.\n     */\n    setFloat8(value) {\n        this._type = AttributeTypes.TYPE_FLOAT8;\n        this._valueF8 = value;\n    }\n    /**\n     * Get the value.\n     * @return the value.\n     */\n    getColor() {\n        return this._valueI4;\n    }\n    /**\n     * Set the value.\n     * @param value the new value.\n     */\n    setColor(value) {\n        this._type = AttributeTypes.TYPE_COLOR;\n        this._valueI4 = value;\n    }\n    /**\n     * Check if the value equals another value.\n     * @param other the other value.\n     * @return true if same.\n     */\n    same(other) {\n        /* Check the type */\n        if (other._type != this._type)\n            return false;\n        /* Check the value */\n        if (this._type == AttributeTypes.TYPE_BOOLEAN)\n            return (other._valueI4 == this._valueI4);\n        if (this._type == AttributeTypes.TYPE_INT1)\n            return (other._valueI4 == this._valueI4);\n        if (this._type == AttributeTypes.TYPE_INT2)\n            return (other._valueI4 == this._valueI4);\n        if (this._type == AttributeTypes.TYPE_INT4)\n            return (other._valueI4 == this._valueI4);\n        if (this._type == AttributeTypes.TYPE_INT8)\n            return (other._valueI8.same(this._valueI8));\n        if (this._type == AttributeTypes.TYPE_FLOAT4)\n            return (other._valueF4 == this._valueF4);\n        if (this._type == AttributeTypes.TYPE_FLOAT8)\n            return (other._valueF8 == this._valueF8);\n        if (this._type == AttributeTypes.TYPE_COLOR)\n            return (other._valueI4 == this._valueI4);\n        /* Empty value */\n        return true;\n    }\n    /**\n     * Copy to another value.\n     * @param other the other value to copy to.\n     */\n    copyTo(other) {\n        /* Copy the type */\n        other._type = this._type;\n        /* Check the value */\n        if (this._type == AttributeTypes.TYPE_BOOLEAN) {\n            other._valueI4 = this._valueI4;\n            return;\n        }\n        if (this._type == AttributeTypes.TYPE_INT1) {\n            other._valueI4 = this._valueI4;\n            return;\n        }\n        if (this._type == AttributeTypes.TYPE_INT2) {\n            other._valueI4 = this._valueI4;\n            return;\n        }\n        if (this._type == AttributeTypes.TYPE_INT4) {\n            other._valueI4 = this._valueI4;\n            return;\n        }\n        if (this._type == AttributeTypes.TYPE_INT8) {\n            other._valueI8 = this._valueI8;\n            return;\n        }\n        if (this._type == AttributeTypes.TYPE_FLOAT4) {\n            other._valueF4 = this._valueF4;\n            return;\n        }\n        if (this._type == AttributeTypes.TYPE_FLOAT8) {\n            other._valueF8 = this._valueF8;\n            return;\n        }\n        if (this._type == AttributeTypes.TYPE_COLOR) {\n            other._valueI4 = this._valueI4;\n            return;\n        }\n        /* Empty value */\n    }\n    /**\n     * Copy the value.\n     * @return the copied value.\n     */\n    copy() {\n        let copy = new AttributeValue();\n        this.copyTo(copy);\n        return copy;\n    }\n    /**\n     * Copy a list of values.\n     * @return the copied values.\n     */\n    static copyList(list) {\n        if (list == null)\n            return null;\n        let list2 = new Array(list.length);\n        for (let i = 0; i < list.length; i++)\n            list2[i] = list[i].copy();\n        return list2;\n    }\n    /**\n     * Get the value as a string.\n     * @return the string.\n     */\n    asString() {\n        if (this._type == AttributeTypes.TYPE_BOOLEAN)\n            return \"\" + this.getBoolean();\n        else if (this._type == AttributeTypes.TYPE_INT1)\n            return \"\" + this.getInt1();\n        else if (this._type == AttributeTypes.TYPE_INT2)\n            return \"\" + this.getInt2();\n        else if (this._type == AttributeTypes.TYPE_INT4)\n            return \"\" + this.getInt4();\n        else if (this._type == AttributeTypes.TYPE_INT8)\n            return \"\" + this.getInt8().toString();\n        else if (this._type == AttributeTypes.TYPE_FLOAT4)\n            return \"\" + this.getFloat4();\n        else if (this._type == AttributeTypes.TYPE_FLOAT8)\n            return \"\" + this.getFloat8();\n        else if (this._type == AttributeTypes.TYPE_COLOR)\n            return Numbers.rgbToString(this.getColor());\n        return \"\";\n    }\n    /**\n     * The standard toString method.\n     * @see Object#toString\n     */\n    toString() {\n        return \"[AttributeValue:type=\" + AttributeTypes.getTypeName(this._type) + \",value=\" + this.asString() + \"]\";\n    }\n    /**\n     * Create a default attribute value.\n     * @param type the type of value.\n     * @return a default value.\n     */\n    static createDefault(type) {\n        if (type == AttributeTypes.TYPE_BOOLEAN)\n            return AttributeValue.createBoolean(false);\n        if (type == AttributeTypes.TYPE_INT1)\n            return AttributeValue.createInt1(0);\n        if (type == AttributeTypes.TYPE_INT2)\n            return AttributeValue.createInt2(0);\n        if (type == AttributeTypes.TYPE_INT4)\n            return AttributeValue.createInt4(0);\n        if (type == AttributeTypes.TYPE_INT8)\n            return AttributeValue.createInt8(ALong.ZERO);\n        if (type == AttributeTypes.TYPE_FLOAT4)\n            return AttributeValue.createFloat4(0.0);\n        if (type == AttributeTypes.TYPE_FLOAT8)\n            return AttributeValue.createFloat8(0.0);\n        if (type == AttributeTypes.TYPE_COLOR)\n            return AttributeValue.createColor(0);\n        ASystem.assertNot(true, \"Cannot create attribute value of type \" + type);\n        return null;\n    }\n    /**\n     * Read an attribute value.\n     * @param buffer the buffer to read from.\n     * @param bufferOffset the buffer offset to read from.\n     * @param attributeType the type of the attribute.\n     * @param the value to read into.\n     */\n    static readFromBufferTo(buffer, bufferOffset, attributeType, value) {\n        if (attributeType == AttributeTypes.TYPE_BOOLEAN)\n            value.setBoolean(LittleEndian.readBufferByte(buffer, bufferOffset) != 0);\n        else if (attributeType == AttributeTypes.TYPE_INT1)\n            value.setInt1(LittleEndian.readBufferByte(buffer, bufferOffset));\n        else if (attributeType == AttributeTypes.TYPE_INT2)\n            value.setInt2(LittleEndian.readBufferShort(buffer, bufferOffset));\n        else if (attributeType == AttributeTypes.TYPE_INT4)\n            value.setInt4(LittleEndian.readBufferInt(buffer, bufferOffset));\n        else if (attributeType == AttributeTypes.TYPE_INT8)\n            value.setInt8(LittleEndian.readBufferLong(buffer, bufferOffset));\n        else if (attributeType == AttributeTypes.TYPE_FLOAT4)\n            value.setFloat4(LittleEndian.readBufferFloat(buffer, bufferOffset));\n        else if (attributeType == AttributeTypes.TYPE_FLOAT8)\n            value.setFloat8(LittleEndian.readBufferDouble(buffer, bufferOffset));\n        else if (attributeType == AttributeTypes.TYPE_COLOR)\n            value.setColor(LittleEndian.readBufferInt3(buffer, bufferOffset));\n        else\n            ASystem.assertNot(true, \"Cannot read attribute value type \" + attributeType);\n    }\n    /**\n     * Read an attribute value.\n     * @param input the input stream to read from.\n     * @param attributeType the type of the attribute.\n     * @param the value to read into.\n     */\n    static readFromStreamTo(stream, attributeType, value) {\n        if (attributeType == AttributeTypes.TYPE_BOOLEAN)\n            value.setBoolean(LittleEndian.readStreamByte(stream) != 0);\n        else if (attributeType == AttributeTypes.TYPE_INT1)\n            value.setInt1(LittleEndian.readStreamByte(stream));\n        else if (attributeType == AttributeTypes.TYPE_INT2)\n            value.setInt2(LittleEndian.readStreamShort(stream));\n        else if (attributeType == AttributeTypes.TYPE_INT4)\n            value.setInt4(LittleEndian.readStreamInt(stream));\n        else if (attributeType == AttributeTypes.TYPE_INT8)\n            value.setInt8(LittleEndian.readStreamLong(stream));\n        else if (attributeType == AttributeTypes.TYPE_FLOAT4)\n            value.setFloat4(LittleEndian.readStreamFloat(stream));\n        else if (attributeType == AttributeTypes.TYPE_FLOAT8)\n            value.setFloat8(LittleEndian.readStreamDouble(stream));\n        else if (attributeType == AttributeTypes.TYPE_COLOR)\n            value.setColor(LittleEndian.readStreamInt3(stream));\n        else\n            ASystem.assertNot(true, \"Cannot read attribute value type \" + attributeType);\n    }\n    /**\n     * Read an attribute value.\n     * @param input the input stream to read from.\n     * @param attributeType the type of the attribute.\n     * @return the value.\n     */\n    static readFromStream(stream, attributeType) {\n        let value = new AttributeValue();\n        AttributeValue.readFromStreamTo(stream, attributeType, value);\n        return value;\n    }\n    /**\n     * Write an attribute value.\n     * @param output the output stream to write to.\n     * @param attributeType the type of the attribute.\n     * @param value the value of the attribute.\n     */\n    static writeToStream(stream, attributeType, value) {\n        if (attributeType == AttributeTypes.TYPE_BOOLEAN)\n            LittleEndian.writeStreamByte(stream, value.getBooleanAsInt());\n        else if (attributeType == AttributeTypes.TYPE_INT1)\n            LittleEndian.writeStreamByte(stream, value.getInt1());\n        else if (attributeType == AttributeTypes.TYPE_INT2)\n            LittleEndian.writeStreamShort(stream, value.getInt2());\n        else if (attributeType == AttributeTypes.TYPE_INT4)\n            LittleEndian.writeStreamInt(stream, value.getInt4());\n        else if (attributeType == AttributeTypes.TYPE_INT8)\n            LittleEndian.writeStreamLong(stream, value.getInt8());\n        else if (attributeType == AttributeTypes.TYPE_FLOAT4)\n            LittleEndian.writeStreamFloat(stream, value.getFloat4());\n        else if (attributeType == AttributeTypes.TYPE_FLOAT8)\n            LittleEndian.writeStreamDouble(stream, value.getFloat8());\n        else if (attributeType == AttributeTypes.TYPE_COLOR)\n            LittleEndian.writeStreamInt3(stream, value.getColor());\n        else\n            ASystem.assertNot(true, \"Cannot write attribute value type \" + attributeType);\n    }\n}\n/** The 'false' value */\nAttributeValue.FALSE = AttributeValue.createBoolean(false);\n/** The 'true' value */\nAttributeValue.TRUE = AttributeValue.createBoolean(true);\nexport { AttributeValue };\n//# sourceMappingURL=AttributeValue.js.map",
      "start": 1693508125474,
      "end": 1693508125516,
      "sourcemaps": null
    }
  ]
}
