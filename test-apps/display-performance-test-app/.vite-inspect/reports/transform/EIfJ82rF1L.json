{
  "resolvedId": "D:/hub2023A/itwinjs-core/common/temp/node_modules/.pnpm/crypto-js@4.1.1/node_modules/crypto-js/enc-base64.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": ";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * Base64 encoding strategy.\n\t     */\n\t    var Base64 = C_enc.Base64 = {\n\t        /**\n\t         * Converts a word array to a Base64 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Base64 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\t            var map = this._map;\n\n\t            // Clamp excess bits\n\t            wordArray.clamp();\n\n\t            // Convert\n\t            var base64Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 3) {\n\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n\t                }\n\t            }\n\n\t            // Add padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                while (base64Chars.length % 4) {\n\t                    base64Chars.push(paddingChar);\n\t                }\n\t            }\n\n\t            return base64Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Base64 string to a word array.\n\t         *\n\t         * @param {string} base64Str The Base64 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n\t         */\n\t        parse: function (base64Str) {\n\t            // Shortcuts\n\t            var base64StrLength = base64Str.length;\n\t            var map = this._map;\n\t            var reverseMap = this._reverseMap;\n\n\t            if (!reverseMap) {\n\t                    reverseMap = this._reverseMap = [];\n\t                    for (var j = 0; j < map.length; j++) {\n\t                        reverseMap[map.charCodeAt(j)] = j;\n\t                    }\n\t            }\n\n\t            // Ignore padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                var paddingIndex = base64Str.indexOf(paddingChar);\n\t                if (paddingIndex !== -1) {\n\t                    base64StrLength = paddingIndex;\n\t                }\n\t            }\n\n\t            // Convert\n\t            return parseLoop(base64Str, base64StrLength, reverseMap);\n\n\t        },\n\n\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n\t    };\n\n\t    function parseLoop(base64Str, base64StrLength, reverseMap) {\n\t      var words = [];\n\t      var nBytes = 0;\n\t      for (var i = 0; i < base64StrLength; i++) {\n\t          if (i % 4) {\n\t              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\n\t              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\n\t              var bitsCombined = bits1 | bits2;\n\t              words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);\n\t              nBytes++;\n\t          }\n\t      }\n\t      return WordArray.create(words, nBytes);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Base64;\n\n}));",
      "start": 1693508122061,
      "end": 1693508122199,
      "sourcemaps": null
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as encBase64Module } from \"\\u0000D:/hub2023A/itwinjs-core/common/temp/node_modules/.pnpm/crypto-js@4.1.1/node_modules/crypto-js/enc-base64.js?commonjs-module\";\nvar encBase64 = encBase64Module.exports;\nimport require$$0 from \"\\u0000D:/hub2023A/itwinjs-core/common/temp/node_modules/.pnpm/crypto-js@4.1.1/node_modules/crypto-js/core.js?commonjs-proxy\";\n\n(function (module, exports) {\n\t;(function (root, factory) {\n\t\tif ('object' === \"object\") {\n\t\t\t// CommonJS\n\t\t\tmodule.exports = exports = factory(require$$0);\n\t\t}\n\t\telse if (typeof undefined === \"function\" && undefined.amd) {\n\t\t\t// AMD\n\t\t\tundefined([\"./core\"], factory);\n\t\t}\n\t\telse {\n\t\t\t// Global (browser)\n\t\t\tfactory(root.CryptoJS);\n\t\t}\n\t}(commonjsHelpers.commonjsGlobal, function (CryptoJS) {\n\n\t\t(function () {\n\t\t    // Shortcuts\n\t\t    var C = CryptoJS;\n\t\t    var C_lib = C.lib;\n\t\t    var WordArray = C_lib.WordArray;\n\t\t    var C_enc = C.enc;\n\n\t\t    /**\n\t\t     * Base64 encoding strategy.\n\t\t     */\n\t\t    var Base64 = C_enc.Base64 = {\n\t\t        /**\n\t\t         * Converts a word array to a Base64 string.\n\t\t         *\n\t\t         * @param {WordArray} wordArray The word array.\n\t\t         *\n\t\t         * @return {string} The Base64 string.\n\t\t         *\n\t\t         * @static\n\t\t         *\n\t\t         * @example\n\t\t         *\n\t\t         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n\t\t         */\n\t\t        stringify: function (wordArray) {\n\t\t            // Shortcuts\n\t\t            var words = wordArray.words;\n\t\t            var sigBytes = wordArray.sigBytes;\n\t\t            var map = this._map;\n\n\t\t            // Clamp excess bits\n\t\t            wordArray.clamp();\n\n\t\t            // Convert\n\t\t            var base64Chars = [];\n\t\t            for (var i = 0; i < sigBytes; i += 3) {\n\t\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n\t\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n\t\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n\t\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n\t\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n\t\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n\t\t                }\n\t\t            }\n\n\t\t            // Add padding\n\t\t            var paddingChar = map.charAt(64);\n\t\t            if (paddingChar) {\n\t\t                while (base64Chars.length % 4) {\n\t\t                    base64Chars.push(paddingChar);\n\t\t                }\n\t\t            }\n\n\t\t            return base64Chars.join('');\n\t\t        },\n\n\t\t        /**\n\t\t         * Converts a Base64 string to a word array.\n\t\t         *\n\t\t         * @param {string} base64Str The Base64 string.\n\t\t         *\n\t\t         * @return {WordArray} The word array.\n\t\t         *\n\t\t         * @static\n\t\t         *\n\t\t         * @example\n\t\t         *\n\t\t         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n\t\t         */\n\t\t        parse: function (base64Str) {\n\t\t            // Shortcuts\n\t\t            var base64StrLength = base64Str.length;\n\t\t            var map = this._map;\n\t\t            var reverseMap = this._reverseMap;\n\n\t\t            if (!reverseMap) {\n\t\t                    reverseMap = this._reverseMap = [];\n\t\t                    for (var j = 0; j < map.length; j++) {\n\t\t                        reverseMap[map.charCodeAt(j)] = j;\n\t\t                    }\n\t\t            }\n\n\t\t            // Ignore padding\n\t\t            var paddingChar = map.charAt(64);\n\t\t            if (paddingChar) {\n\t\t                var paddingIndex = base64Str.indexOf(paddingChar);\n\t\t                if (paddingIndex !== -1) {\n\t\t                    base64StrLength = paddingIndex;\n\t\t                }\n\t\t            }\n\n\t\t            // Convert\n\t\t            return parseLoop(base64Str, base64StrLength, reverseMap);\n\n\t\t        },\n\n\t\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n\t\t    };\n\n\t\t    function parseLoop(base64Str, base64StrLength, reverseMap) {\n\t\t      var words = [];\n\t\t      var nBytes = 0;\n\t\t      for (var i = 0; i < base64StrLength; i++) {\n\t\t          if (i % 4) {\n\t\t              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\n\t\t              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\n\t\t              var bitsCombined = bits1 | bits2;\n\t\t              words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);\n\t\t              nBytes++;\n\t\t          }\n\t\t      }\n\t\t      return WordArray.create(words, nBytes);\n\t\t    }\n\t\t}());\n\n\n\t\treturn CryptoJS.enc.Base64;\n\n\t})); \n} (encBase64Module, encBase64Module.exports));\n\nvar encBase64Exports = encBase64Module.exports;\nexport default /*@__PURE__*/commonjsHelpers.getDefaultExportFromCjs(encBase64Exports);\nexport { encBase64Exports as __moduleExports };",
      "start": 1693508122200,
      "end": 1693508123913,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "file": null,
        "sources": [
          null
        ],
        "sourcesContent": [
          null
        ],
        "names": [
          "define",
          "this"
        ],
        "mappings": "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"
      }
    }
  ]
}
