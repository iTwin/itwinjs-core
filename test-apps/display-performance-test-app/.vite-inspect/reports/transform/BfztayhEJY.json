{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/ChangeFlags.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Views\n */\n/** Bit masks describing which aspects of a [[Viewport]] have changed as part of a [[ChangeFlags]].\n * @see [[Viewport.onViewportChanged]].\n * @public\n */\nexport var ChangeFlag;\n(function (ChangeFlag) {\n    /** No changes. */\n    ChangeFlag[ChangeFlag[\"None\"] = 0] = \"None\";\n    /** See [[ChangeFlags.alwaysDrawn]]. */\n    ChangeFlag[ChangeFlag[\"AlwaysDrawn\"] = 1] = \"AlwaysDrawn\";\n    /** See [[ChangeFlags.neverDrawn]]. */\n    ChangeFlag[ChangeFlag[\"NeverDrawn\"] = 2] = \"NeverDrawn\";\n    /** See [[ChangeFlags.viewedCategories]]. */\n    ChangeFlag[ChangeFlag[\"ViewedCategories\"] = 4] = \"ViewedCategories\";\n    /** See [[ChangeFlags.viewedModels]]. */\n    ChangeFlag[ChangeFlag[\"ViewedModels\"] = 8] = \"ViewedModels\";\n    /** See [[ChangeFlags.displayStyle]]. */\n    ChangeFlag[ChangeFlag[\"DisplayStyle\"] = 16] = \"DisplayStyle\";\n    /** See [[ChangeFlags.featureOverrideProvider]]. */\n    ChangeFlag[ChangeFlag[\"FeatureOverrideProvider\"] = 32] = \"FeatureOverrideProvider\";\n    /** See [[ChangeFlags.viewedCategoriesPerModel]]. */\n    ChangeFlag[ChangeFlag[\"ViewedCategoriesPerModel\"] = 64] = \"ViewedCategoriesPerModel\";\n    /** See [[ChangeFlags.viewState]]. */\n    ChangeFlag[ChangeFlag[\"ViewState\"] = 128] = \"ViewState\";\n    /** A bitmask indicating all aspects of the viewport's state have changed. */\n    ChangeFlag[ChangeFlag[\"All\"] = 268435455] = \"All\";\n    /** A bitmask indicating all aspects of the viewport's state related to symbology overrides have changed. */\n    ChangeFlag[ChangeFlag[\"Overrides\"] = 268435319] = \"Overrides\";\n    /** A bitmask indicating the initial state of a newly-created [[Viewport]]. */\n    ChangeFlag[ChangeFlag[\"Initial\"] = 28] = \"Initial\";\n})(ChangeFlag || (ChangeFlag = {}));\n/** Describes which aspects of a [[Viewport]] have changed. Each time [[Viewport.renderFrame]] is invoked, the aspects of the viewport that have changed since\n * the previous call to `renderFrame` are computed and dispatched via the [[Viewport.onViewportChanged]] event.\n * @public\n * @extensions\n */\nexport class ChangeFlags {\n    /** Create a new ChangeFlags.\n     * @param flags The initial flags that should be set.\n     */\n    constructor(flags = ChangeFlag.Initial) {\n        this._flags = flags;\n    }\n    /** The set of always-drawn elements has changed.\n     * @see [[Viewport.setAlwaysDrawn]] and [[Viewport.clearAlwaysDrawn]].\n     */\n    get alwaysDrawn() { return this.isSet(ChangeFlag.AlwaysDrawn); }\n    /** The set of never-drawn elements has changed.\n     * @see [[Viewport.setNeverDrawn]] and [[Viewport.clearNeverDrawn]].\n     */\n    get neverDrawn() { return this.isSet(ChangeFlag.NeverDrawn); }\n    /** The set of displayed categories defined by the viewport's [[CategorySelectorState]] has changed. */\n    get viewedCategories() { return this.isSet(ChangeFlag.ViewedCategories); }\n    /** The set of models to be displayed in the viewport has changed. */\n    get viewedModels() { return this.isSet(ChangeFlag.ViewedModels); }\n    /** The [[DisplayStyleState]] or its settings such as [ViewFlags]($common) have changed. */\n    get displayStyle() { return this.isSet(ChangeFlag.DisplayStyle); }\n    /** The [[FeatureOverrideProvider]] has changed, or its internal state has changed such that its overrides must be recomputed.\n     * @see [[Viewport.addFeatureOverrideProvider]] and [[Viewport.setFeatureOverrideProviderChanged]].\n     */\n    get featureOverrideProvider() { return this.isSet(ChangeFlag.FeatureOverrideProvider); }\n    /** [[Vewport.changeView]] was used to replace the previous [[ViewState]] with a new one. */\n    get viewState() { return this.isSet(ChangeFlag.ViewState); }\n    /** The [[PerModelCategoryVisibility.Overrides]] associated with the viewport have changed.\n     * @beta\n     */\n    get viewedCategoriesPerModel() { return this.isSet(ChangeFlag.ViewedCategoriesPerModel); }\n    /** Returns true if any of the specified flags are set. */\n    isSet(flags) { return 0 !== (this._flags & flags); }\n    /** Returns true if all of the specified flags are set. */\n    areAllSet(flags) { return flags === (this._flags & flags); }\n    /** Returns true if any aspects affecting [[FeatureSymbology.Overrides]] have changed. */\n    get areFeatureOverridesDirty() { return this.isSet(ChangeFlag.Overrides); }\n    /** Returns true if any aspect at all has changed. */\n    get hasChanges() { return this.isSet(ChangeFlag.All); }\n    /** The underlying bitmask indicating the state of each individual flag. */\n    get value() { return this._flags; }\n}\n/** A [[ChangeFlags]] that permits modifying the states of individual [[ChangeFlag]]s.\n * @public\n */\nexport class MutableChangeFlags extends ChangeFlags {\n    /** Create a new MutableChangeFlags.\n     * @param flags The initial flags that should be set.\n     */\n    constructor(flags = ChangeFlag.Initial) {\n        super(flags);\n    }\n    /** Set all of the specified flags. */\n    set(flags) { this._flags |= flags; }\n    setAlwaysDrawn() { this.set(ChangeFlag.AlwaysDrawn); }\n    setNeverDrawn() { this.set(ChangeFlag.NeverDrawn); }\n    setViewedCategories() { this.set(ChangeFlag.ViewedCategories); }\n    setViewedModels() { this.set(ChangeFlag.ViewedModels); }\n    setDisplayStyle() { this.set(ChangeFlag.DisplayStyle); }\n    setFeatureOverrideProvider() { this.set(ChangeFlag.FeatureOverrideProvider); }\n    setViewState() { this.set(ChangeFlag.ViewState); }\n    setViewedCategoriesPerModel() { this.set(ChangeFlag.ViewedCategoriesPerModel); }\n    /** Clear all of the specified flags. By default, clears all flags. */\n    clear(flags = ChangeFlag.All) { this._flags &= ~flags; }\n}\n//# sourceMappingURL=ChangeFlags.js.map",
      "start": 1693508118341,
      "end": 1693508118718,
      "sourcemaps": null
    }
  ]
}
