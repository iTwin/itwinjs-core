{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/tile/TileIO.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tile\n */\nimport { BentleyError } from \"@itwin/core-bentley\";\nimport { Point3d } from \"@itwin/core-geometry\";\n/** Type codes for various tile formats. Often these are embedded as 32-bit 'magic numbers' in a binary stream to indicate the format.\n * @internal\n */\nexport var TileFormat;\n(function (TileFormat) {\n    TileFormat[TileFormat[\"Unknown\"] = 0] = \"Unknown\";\n    TileFormat[TileFormat[\"B3dm\"] = 1835283298] = \"B3dm\";\n    TileFormat[TileFormat[\"Gltf\"] = 1179937895] = \"Gltf\";\n    TileFormat[TileFormat[\"Pnts\"] = 1937010288] = \"Pnts\";\n    TileFormat[TileFormat[\"IModel\"] = 1818512745] = \"IModel\";\n    TileFormat[TileFormat[\"Cmpt\"] = 1953525091] = \"Cmpt\";\n    TileFormat[TileFormat[\"I3dm\"] = 1835283305] = \"I3dm\";\n    TileFormat[TileFormat[\"A3x\"] = 5780289] = \"A3x\";\n})(TileFormat || (TileFormat = {}));\n/** Given a magic number, return whether it identifies a known tile format.\n * @internal\n */\nexport function isKnownTileFormat(format) {\n    switch (format) {\n        case TileFormat.Unknown:\n        case TileFormat.B3dm:\n        case TileFormat.Gltf:\n        case TileFormat.IModel:\n        case TileFormat.Pnts:\n        case TileFormat.Cmpt:\n        case TileFormat.I3dm:\n        case TileFormat.A3x:\n            return true;\n        default:\n            return false;\n    }\n}\n/** Given a magic number, attempt to convert it to a known TileFormat.\n * @internal\n */\nexport function tileFormatFromNumber(formatNumber) {\n    const format = formatNumber;\n    return isKnownTileFormat(format) ? format : TileFormat.Unknown;\n}\n/** Status codes for tile reading operations\n * @internal\n */\nexport var TileReadStatus;\n(function (TileReadStatus) {\n    TileReadStatus[TileReadStatus[\"Success\"] = 0] = \"Success\";\n    TileReadStatus[TileReadStatus[\"InvalidTileData\"] = 1] = \"InvalidTileData\";\n    TileReadStatus[TileReadStatus[\"InvalidHeader\"] = 2] = \"InvalidHeader\";\n    TileReadStatus[TileReadStatus[\"InvalidBatchTable\"] = 3] = \"InvalidBatchTable\";\n    TileReadStatus[TileReadStatus[\"InvalidScene\"] = 4] = \"InvalidScene\";\n    TileReadStatus[TileReadStatus[\"InvalidFeatureTable\"] = 5] = \"InvalidFeatureTable\";\n    TileReadStatus[TileReadStatus[\"NewerMajorVersion\"] = 6] = \"NewerMajorVersion\";\n    TileReadStatus[TileReadStatus[\"Canceled\"] = 7] = \"Canceled\";\n})(TileReadStatus || (TileReadStatus = {}));\nconst readStatusMessages = [\n    \"Success\",\n    \"Invalid tile data\",\n    \"Invalid tile header\",\n    \"Invalid batch table\",\n    \"Invalid scene\",\n    \"Invalid feature table\",\n    \"Major version too new\",\n    \"Canceled\",\n];\n/** Exception thrown by functions that deserialize tiles.\n * @internal\n */\nexport class TileReadError extends BentleyError {\n    constructor(status, message) {\n        if (undefined === message)\n            message = readStatusMessages[status];\n        super(status, message);\n    }\n    get wasCanceled() { return TileReadStatus.Canceled === this.errorNumber; }\n}\n/** The base header preceding tile data of most formats, identifying the tile format and version of that format.\n * Specific tile formats may define their own headers as sub-types of this Header, appending\n * additional format-specific data.\n * @internal\n */\nexport class TileHeader {\n    /** Construct a Header from the binary data at the supplied stream's current read position */\n    constructor(stream) {\n        this._format = tileFormatFromNumber(stream.readUint32());\n        this.version = stream.readUint32();\n    }\n    get format() { return this._format; }\n    /** Mark the header as representing invalid data */\n    invalidate() {\n        this._format = TileFormat.Unknown;\n    }\n}\n/** Read 3 64-bit floating point numbers at the byte stream's current read position, advance by 24 bytes, and return a Point3d constructed from the 3 numbers.\n * @internal\n */\nexport function nextPoint3d64FromByteStream(stream, result) {\n    const x = stream.readFloat64(), y = stream.readFloat64(), z = stream.readFloat64();\n    if (undefined === result)\n        return new Point3d(x, y, z);\n    result.set(x, y, z);\n    return result;\n}\n//# sourceMappingURL=TileIO.js.map",
      "start": 1693508120915,
      "end": 1693508120987,
      "sourcemaps": null
    }
  ]
}
