{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/rpc/web/BentleyCloudRpcManager.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module RpcInterface\n */\nimport { RpcManager } from \"../../RpcManager\";\nimport { RpcConfiguration } from \"../core/RpcConfiguration\";\nimport { RpcRequestEvent } from \"../core/RpcConstants\";\nimport { RpcRequest } from \"../core/RpcRequest\";\nimport { BentleyCloudRpcProtocol } from \"./BentleyCloudRpcProtocol\";\nimport { RpcRoutingToken } from \"../core/RpcRoutingToken\";\n/** Operating parameters for Bentley cloud RPC interface deployments.\n * @beta\n */\nclass BentleyCloudRpcConfiguration extends RpcConfiguration {\n}\n/** Access-Control header values for backend servers that serve frontends using BentleyCloudRpcProtocol. */\nBentleyCloudRpcConfiguration.accessControl = {\n    allowOrigin: \"*\",\n    allowMethods: \"POST, GET, OPTIONS\",\n    allowHeaders: \"Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With, X-Correlation-Id, X-Session-Id, X-Application-Id, X-Application-Version, X-User-Id, X-Protocol-Version\",\n};\nexport { BentleyCloudRpcConfiguration };\n/** Coordinates usage of RPC interfaces for Bentley cloud deployments.\n * @beta\n */\nexport class BentleyCloudRpcManager extends RpcManager {\n    /** @beta Initializes BentleyCloudRpcManager for the frontend of an application. */\n    static initializeClient(params, interfaces, routing = RpcRoutingToken.default) {\n        return BentleyCloudRpcManager.performInitialization(params, interfaces, routing);\n    }\n    /** @beta Initializes BentleyCloudRpcManager for the backend of an application. */\n    static initializeImpl(params, interfaces) {\n        return BentleyCloudRpcManager.performInitialization(params, interfaces);\n    }\n    static performInitialization(params, interfaces, routing = RpcRoutingToken.default) {\n        const protocol = class extends (params.protocol || BentleyCloudRpcProtocol) {\n            constructor() {\n                super(...arguments);\n                this.pathPrefix = params.uriPrefix || \"\";\n                this.info = params.info;\n            }\n        };\n        const config = class extends BentleyCloudRpcConfiguration {\n            constructor() {\n                super(...arguments);\n                this.interfaces = () => interfaces;\n                this.protocol = new protocol(this);\n                this.routing = routing;\n            }\n        };\n        for (const def of interfaces) {\n            RpcConfiguration.assignWithRouting(def, routing, config);\n        }\n        const instance = RpcConfiguration.obtain(config);\n        if (params.pathPrefix) {\n            instance.protocol.pathPrefix = params.pathPrefix;\n        }\n        RpcConfiguration.initializeInterfaces(instance);\n        if (params.pendingRequestListener) {\n            const listener = params.pendingRequestListener;\n            RpcRequest.events.addListener((type, request) => {\n                if (type === RpcRequestEvent.PendingUpdateReceived && request.protocol === instance.protocol) {\n                    listener(type, request);\n                }\n            });\n        }\n        return instance;\n    }\n}\n//# sourceMappingURL=BentleyCloudRpcManager.js.map",
      "start": 1693508120859,
      "end": 1693508120938,
      "sourcemaps": null
    }
  ]
}
