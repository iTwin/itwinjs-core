{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/rpc/core/RpcSessionInvocation.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module RpcInterface\n */\nimport { RpcConfiguration } from \"./RpcConfiguration\";\nimport { RpcRequestStatus, RpcResponseCacheControl } from \"./RpcConstants\";\nimport { RpcInvocation } from \"./RpcInvocation\";\nimport { RpcSerializedValue } from \"./RpcMarshaling\";\nimport { RpcProtocol } from \"./RpcProtocol\";\nimport { RpcRequest } from \"./RpcRequest\";\n/* eslint-disable deprecation/deprecation */\nclass SessionConfiguration extends RpcConfiguration {\n    constructor() {\n        super(...arguments);\n        this.interfaces = () => [];\n    }\n    get protocol() { return SessionProtocol.instance; }\n}\nclass SessionProtocol extends RpcProtocol {\n    constructor() {\n        super(new SessionConfiguration());\n        this.requestType = RpcRequest;\n        this.supportsStatusCategory = true;\n    }\n}\nSessionProtocol.instance = new SessionProtocol();\n/** @internal */\nexport class RpcSessionInvocation extends RpcInvocation {\n    static create(request) {\n        const serializedRequest = {\n            id: request.context.id,\n            applicationId: request.context.applicationId,\n            applicationVersion: request.context.applicationVersion,\n            sessionId: request.context.sessionId,\n            authorization: \"\",\n            operation: {\n                interfaceDefinition: request.definition.interfaceName,\n                interfaceVersion: request.definition.interfaceVersion,\n                operationName: request.operation,\n            },\n            method: request.operation,\n            path: \"\",\n            parameters: RpcSerializedValue.create(),\n            parametersOverride: request.parameters,\n            caching: RpcResponseCacheControl.None,\n            protocolVersion: parseInt(request.context.protocolVersion, 10),\n        };\n        return new RpcSessionInvocation(SessionProtocol.instance, serializedRequest);\n    }\n    get rejected() {\n        return this.status === RpcRequestStatus.Rejected;\n    }\n}\n//# sourceMappingURL=RpcSessionInvocation.js.map",
      "start": 1693508120813,
      "end": 1693508120870,
      "sourcemaps": null
    }
  ]
}
