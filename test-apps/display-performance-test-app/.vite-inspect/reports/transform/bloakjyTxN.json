{
  "resolvedId": "D:/hub2023A/itwinjs-core/extensions/frontend-tiles/lib/esm/BatchedTile.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\nimport { assert, ByteStream, Logger } from \"@itwin/core-bentley\";\nimport { ColorDef } from \"@itwin/core-common\";\nimport { IModelApp, RealityTileLoader, Tile, TileBoundingBoxes, TileRequestChannel, TileTreeLoadStatus, TileVisibility, } from \"@itwin/core-frontend\";\nimport { loggerCategory } from \"./LoggerCategory\";\nimport { getMaxLevelsToSkip } from \"./FrontendTiles\";\nlet channel;\n/** @internal */\nexport class BatchedTile extends Tile {\n    get batchedTree() {\n        return this.tree;\n    }\n    constructor(params, tree) {\n        super(params, tree);\n        // The root tile never has content, so it doesn't count toward max levels to skip.\n        this._unskippable = 0 === (this.depth % getMaxLevelsToSkip());\n        if (params.childrenProps?.length)\n            this._childrenProps = params.childrenProps;\n        if (!this.contentId) {\n            this.setIsReady();\n            // mark \"undisplayable\"\n            this._maximumSize = 0;\n        }\n    }\n    get _batchedChildren() {\n        return this.children;\n    }\n    computeLoadPriority(viewports, _users) {\n        // Prioritize tiles closer to camera and center of attention (zoom point or screen center).\n        return RealityTileLoader.computeTileLocationPriority(this, viewports, this.tree.iModelTransform);\n    }\n    selectTiles(selected, args, closestDisplayableAncestor) {\n        const vis = this.computeVisibility(args);\n        if (TileVisibility.OutsideFrustum === vis)\n            return;\n        if (this._unskippable) {\n            // Prevent this tile's content from being unloaded due to memory pressure.\n            args.touchedTiles.add(this);\n            args.markUsed(this);\n        }\n        closestDisplayableAncestor = this.hasGraphics ? this : closestDisplayableAncestor;\n        if (TileVisibility.TooCoarse === vis && (this.isReady || !this._unskippable)) {\n            args.markUsed(this);\n            args.markReady(this);\n            const childrenLoadStatus = this.loadChildren();\n            if (TileTreeLoadStatus.Loading === childrenLoadStatus)\n                args.markChildrenLoading();\n            const children = this._batchedChildren;\n            if (children) {\n                for (const child of children)\n                    child.selectTiles(selected, args, closestDisplayableAncestor);\n                return;\n            }\n        }\n        // We want to display this tile. Request its content if not already loaded.\n        if ((TileVisibility.Visible === vis || this._unskippable) && !this.isReady)\n            args.insertMissing(this);\n        if (closestDisplayableAncestor)\n            selected.add(closestDisplayableAncestor);\n    }\n    _loadChildren(resolve, reject) {\n        let children;\n        if (this._childrenProps) {\n            try {\n                for (const childProps of this._childrenProps) {\n                    const params = this.batchedTree.reader.readTileParams(childProps, this);\n                    const child = new BatchedTile(params, this.batchedTree);\n                    children = children ?? [];\n                    children.push(child);\n                }\n            }\n            catch (err) {\n                Logger.logException(loggerCategory, err);\n                children = undefined;\n                if (err instanceof Error)\n                    reject(err);\n            }\n        }\n        resolve(children);\n    }\n    get channel() {\n        if (!channel) {\n            channel = new TileRequestChannel(\"itwinjs-batched-models\", 20);\n            IModelApp.tileAdmin.channels.add(channel);\n        }\n        return channel;\n    }\n    async requestContent(_isCanceled) {\n        const url = new URL(this.contentId, this.batchedTree.reader.baseUrl);\n        url.search = this.batchedTree.reader.baseUrl.search;\n        const response = await fetch(url.toString());\n        return response.arrayBuffer();\n    }\n    async readContent(data, system, isCanceled) {\n        assert(data instanceof Uint8Array);\n        if (!(data instanceof Uint8Array))\n            return {};\n        try {\n            return await this.batchedTree.decoder.decode({\n                stream: ByteStream.fromUint8Array(data),\n                options: { tileId: this.contentId },\n                system,\n                isCanceled,\n                isLeaf: this.isLeaf,\n            });\n        }\n        catch {\n            return { isLeaf: true };\n        }\n    }\n    addRangeGraphic(builder, type) {\n        if (TileBoundingBoxes.ChildVolumes !== type) {\n            super.addRangeGraphic(builder, type);\n            return;\n        }\n        builder.setSymbology(ColorDef.green, ColorDef.green, 2);\n        builder.addRangeBox(this.range);\n        this.loadChildren();\n        const children = this.children;\n        if (!children)\n            return;\n        builder.setSymbology(ColorDef.blue, ColorDef.blue.withTransparency(0xdf), 1);\n        for (const child of children) {\n            const range = child.range;\n            builder.addRangeBox(range);\n            builder.addRangeBox(range, true);\n        }\n    }\n    prune(olderThan) {\n        const children = this._batchedChildren;\n        if (!children)\n            return;\n        if (this.usageMarker.isExpired(olderThan)) {\n            this.disposeChildren();\n        }\n        else {\n            for (const child of children)\n                child.prune(olderThan);\n        }\n    }\n}\n//# sourceMappingURL=BatchedTile.js.map",
      "start": 1693508125374,
      "end": 1693508125434,
      "sourcemaps": null
    }
  ]
}
