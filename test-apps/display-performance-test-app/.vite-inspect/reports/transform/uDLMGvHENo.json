{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/geometry/lib/esm/curve/internalContexts/CloneCurvesContext.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Curve\n */\nimport { BagOfCurves, CurveChain, CurveCollection } from \"../CurveCollection\";\nimport { RecursiveCurveProcessorWithStack } from \"../CurveProcessor\";\n/**\n * Algorithmic class for cloning curve collections.\n * * recurse through collection nodes, building image nodes as needed and inserting clones of children.\n * * for individual primitive, invoke doClone (protected) for direct clone; insert into parent\n */\nexport class CloneCurvesContext extends RecursiveCurveProcessorWithStack {\n    constructor(transform) {\n        super();\n        this._transform = transform;\n        this._result = undefined;\n    }\n    static clone(target, transform) {\n        const context = new CloneCurvesContext(transform);\n        target.announceToCurveProcessor(context);\n        return context._result;\n    }\n    enter(c) {\n        if (c instanceof CurveCollection)\n            super.enter(c.cloneEmptyPeer());\n    }\n    leave() {\n        const result = super.leave();\n        if (result) {\n            if (this._stack.length === 0) // this should only happen once !!!\n                this._result = result;\n            else // push this result to top of stack.\n                this._stack[this._stack.length - 1].tryAddChild(result);\n        }\n        return result;\n    }\n    // specialized clone methods override this (and allow announceCurvePrimitive to insert to parent)\n    doClone(primitive) {\n        if (this._transform)\n            return primitive.cloneTransformed(this._transform);\n        return primitive.clone();\n    }\n    announceCurvePrimitive(primitive, _indexInParent) {\n        const c = this.doClone(primitive);\n        if (c !== undefined && this._stack.length > 0) {\n            const parent = this._stack[this._stack.length - 1];\n            if (parent instanceof CurveChain || parent instanceof BagOfCurves)\n                if (Array.isArray(c)) {\n                    for (const c1 of c) {\n                        parent.tryAddChild(c1);\n                    }\n                }\n                else {\n                    parent.tryAddChild(c);\n                }\n        }\n    }\n}\n//# sourceMappingURL=CloneCurvesContext.js.map",
      "start": 1693508124112,
      "end": 1693508124192,
      "sourcemaps": null
    }
  ]
}
