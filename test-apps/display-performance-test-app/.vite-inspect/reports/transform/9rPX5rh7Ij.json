{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/webgl/StyleUniforms.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module WebGL\n */\nimport { ColorDef, WhiteOnWhiteReversalSettings } from \"@itwin/core-common\";\nimport { ColorInfo } from \"./ColorInfo\";\nimport { FloatRgb, FloatRgba } from \"./FloatRGBA\";\nimport { desync, sync } from \"./Sync\";\n/** Maintains state of uniforms associated with the DisplayStyleState.\n * @internal\n */\nexport class StyleUniforms {\n    constructor() {\n        this._bgColor = ColorDef.white;\n        this._bgRgba = FloatRgba.fromColorDef(this._bgColor);\n        this._bgRgb = FloatRgb.fromColorDef(this._bgColor);\n        this._monoColor = ColorDef.white;\n        this._monoRgb = FloatRgb.fromColorDef(this._monoColor);\n        this._wantWoWReversal = true;\n        this._wowReversalSettings = WhiteOnWhiteReversalSettings.fromJSON();\n        this._bgIntensity = 0;\n        this.syncKey = 0;\n    }\n    update(plan) {\n        if (this._bgColor.equals(plan.bgColor) && this._monoColor.equals(plan.monoColor) && this._wowReversalSettings.equals(plan.whiteOnWhiteReversal))\n            return;\n        desync(this);\n        this._monoColor = plan.monoColor;\n        this._monoRgb.setColorDef(plan.monoColor);\n        this._wowReversalSettings = plan.whiteOnWhiteReversal;\n        this.updateBackgroundColor(plan.bgColor);\n    }\n    updateBackgroundColor(bgColor) {\n        this._bgColor = bgColor;\n        this._bgRgba.setColorDef(bgColor);\n        this._bgRgb.setColorDef(bgColor);\n        this._wantWoWReversal = this._wowReversalSettings.ignoreBackgroundColor || this._bgRgb.isWhite;\n        this._bgIntensity = this._bgRgb.red * 0.3 + this._bgRgb.green * 0.59 + this._bgRgb.blue * 0.11;\n    }\n    changeBackgroundColor(bgColor) {\n        if (bgColor.equals(this._bgColor))\n            return;\n        desync(this);\n        this.updateBackgroundColor(bgColor);\n    }\n    // vec4\n    bindBackgroundRgba(uniform) {\n        if (!sync(this, uniform))\n            this._bgRgba.bind(uniform);\n    }\n    //  vec3\n    bindBackgroundRgb(uniform) {\n        if (!sync(this, uniform))\n            this._bgRgb.bind(uniform);\n    }\n    // vec3\n    bindMonochromeRgb(uniform) {\n        if (!sync(this, uniform))\n            this._monoRgb.bind(uniform);\n    }\n    get backgroundIntensity() {\n        return this._bgIntensity;\n    }\n    get backgroundTbgr() {\n        return this._bgColor.tbgr;\n    }\n    get backgroundHexString() {\n        return this._bgColor.toHexString();\n    }\n    get backgroundAlpha() {\n        return this._bgRgba.alpha;\n    }\n    get backgroundColor() {\n        return this._bgColor;\n    }\n    cloneBackgroundRgba(result) {\n        this._bgRgba.clone(result);\n    }\n    get wantWoWReversal() {\n        return this._wantWoWReversal;\n    }\n    get backgroundColorInfo() {\n        return ColorInfo.createUniform(this._bgRgba);\n    }\n}\n//# sourceMappingURL=StyleUniforms.js.map",
      "start": 1693508123825,
      "end": 1693508124040,
      "sourcemaps": null
    }
  ]
}
