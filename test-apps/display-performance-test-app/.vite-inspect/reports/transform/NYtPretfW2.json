{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/Hilite.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Rendering\n */\nimport { ColorDef } from \"./ColorDef\";\n/** Contains types related to display of hilited elements within a [[Viewport]].\n * @public\n */\nexport var Hilite;\n(function (Hilite) {\n    /**  Describes the width of the outline applied to hilited geometry. The outline is drawn around the union of all hilited geometry and is visible behind non-hilited geometry.\n     * @see [[Hilite.Settings]]\n     */\n    let Silhouette;\n    (function (Silhouette) {\n        /** No outline. */\n        Silhouette[Silhouette[\"None\"] = 0] = \"None\";\n        /** 1-pixel-wide outline. */\n        Silhouette[Silhouette[\"Thin\"] = 1] = \"Thin\";\n        /** 2-pixel-wide outline. */\n        Silhouette[Silhouette[\"Thick\"] = 2] = \"Thick\";\n    })(Silhouette = Hilite.Silhouette || (Hilite.Silhouette = {}));\n    /**\n     * Describes how the hilite effect is applied to elements within a [[Viewport]].\n     * The hilite effect is applied to elements contained in the [[IModelConnection]]'s [[SelectionSet]].\n     * It is designed to draw attention to those elements. The effect is produced as follows:\n     *  1. All hilited elements are drawn as normal, except that their element color is mixed with the hilite color.\n     *  2. The union of the regions of the screen corresponding to hilited elements is computed.\n     *  3. A silhouette is drawn using the hilite color around the boundaries of the hilited region. This silhouette is visible behind other geometry.\n     *  4. The hilite color is mixed with the color of each pixel within the hilited region. This enables surfaces of hilited geometry to be visible behind other geometry.\n     *\n     * The Settings allow an application to customize how this effect is applied.\n     * @see [[Viewport.hilite]]\n     */\n    class Settings {\n        static clamp(value) { return Math.min(1.0, Math.max(0.0, value)); }\n        constructor(color = ColorDef.from(0x23, 0xbb, 0xfc), visibleRatio = 0.25, hiddenRatio = 0.0, silhouette = Silhouette.Thin) {\n            this.color = color;\n            this.silhouette = silhouette;\n            this.visibleRatio = Settings.clamp(visibleRatio);\n            this.hiddenRatio = Settings.clamp(hiddenRatio);\n        }\n    }\n    Hilite.Settings = Settings;\n    /** Compare two Settings objects for equivalence. */\n    function equalSettings(lhs, rhs) {\n        return lhs.color.equals(rhs.color)\n            && lhs.visibleRatio === rhs.visibleRatio\n            && lhs.hiddenRatio === rhs.hiddenRatio\n            && lhs.silhouette === rhs.silhouette;\n    }\n    Hilite.equalSettings = equalSettings;\n    /** Create a copy of a Settings object. */\n    function cloneSettings(settings) {\n        return new Settings(settings.color, settings.visibleRatio, settings.hiddenRatio, settings.silhouette);\n    }\n    Hilite.cloneSettings = cloneSettings;\n})(Hilite || (Hilite = {}));\n//# sourceMappingURL=Hilite.js.map",
      "start": 1693508120622,
      "end": 1693508120709,
      "sourcemaps": null
    }
  ]
}
