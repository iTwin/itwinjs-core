{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/quantity-formatting/LocalUnitFormatProvider.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module QuantityFormatting\n */\nimport { BaseUnitFormattingSettingsProvider } from \"./BaseUnitFormattingSettingsProvider\";\n/** Implementation of BaseUnitFormattingSettingsProvider that stores and retrieves data in local storage.\n *  @beta\n */\nexport class LocalUnitFormatProvider extends BaseUnitFormattingSettingsProvider {\n    /** If `maintainOverridesPerIModel` is true, the base class will set up listeners to monitor active iModel\n     *  changes so the overrides for the QuantityFormatter properly match the overrides set up by the user. */\n    constructor(quantityFormatter, maintainOverridesPerIModel) {\n        super(quantityFormatter, maintainOverridesPerIModel);\n    }\n    buildUnitSystemKey() {\n        if (this.imodelConnection)\n            return `unitsystem#i:${this.imodelConnection.iModelId}`;\n        return `unitsystem#user`;\n    }\n    async retrieveUnitSystem(defaultKey) {\n        const readUnitSystem = localStorage.getItem(this.buildUnitSystemKey());\n        if (readUnitSystem && readUnitSystem.length) {\n            return readUnitSystem;\n        }\n        return defaultKey;\n    }\n    async storeUnitSystemKey(unitSystemKey) {\n        try {\n            localStorage.setItem(this.buildUnitSystemKey(), unitSystemKey);\n            return true;\n        }\n        catch (_e) {\n            return false;\n        }\n    }\n    buildOverridesKey(quantityTypeKey) {\n        if (this.imodelConnection)\n            return `quantityTypeFormat#i:${this.imodelConnection.iModelId}#q:${quantityTypeKey}`;\n        return `quantityTypeFormat#user#q:${quantityTypeKey}`;\n    }\n    async store(quantityTypeKey, overrideProps) {\n        try {\n            localStorage.setItem(this.buildOverridesKey(quantityTypeKey), JSON.stringify(overrideProps));\n            return true;\n        }\n        catch (_e) {\n            return false;\n        }\n    }\n    async retrieve(quantityTypeKey) {\n        const storedFormat = localStorage.getItem(this.buildOverridesKey(quantityTypeKey));\n        if (storedFormat) {\n            return JSON.parse(storedFormat);\n        }\n        return undefined;\n    }\n    async remove(quantityTypeKey) {\n        const key = this.buildOverridesKey(quantityTypeKey);\n        if (localStorage.getItem(key)) {\n            localStorage.removeItem(key);\n            return true;\n        }\n        return false;\n    }\n}\n//# sourceMappingURL=LocalUnitFormatProvider.js.map",
      "start": 1693508119401,
      "end": 1693508119614,
      "sourcemaps": null
    }
  ]
}
