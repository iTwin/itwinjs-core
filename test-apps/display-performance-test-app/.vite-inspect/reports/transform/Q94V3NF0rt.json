{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/telemetry/lib/esm/TelemetryClient.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Telemetry\n */\nimport { BentleyError, Logger } from \"@itwin/core-bentley\";\nimport { TelemetryClientLoggerCategory } from \"./TelemetryClientLoggerCategory\";\n/** Represents a particular occurrence of an event that can be tracked through various telemetry services\n * @internal\n */\nexport class TelemetryEvent {\n    constructor(\n    /** Human-readable name for the event being tracked */\n    eventName, \n    /**\n     * Optional Guid that can be used to more accurately identify the telemetry event.\n     * This field is required when posting a telemetry event as feature usage to ULAS.\n     */\n    eventId, \n    /** iModel parent iTwin id */\n    iTwinId, iModelId, changeSetId, time, \n    /** Custom properties  */\n    additionalProperties = {}) {\n        this.eventName = eventName;\n        this.eventId = eventId;\n        this.iTwinId = iTwinId;\n        this.iModelId = iModelId;\n        this.changeSetId = changeSetId;\n        this.time = time;\n        this.additionalProperties = additionalProperties;\n    }\n    /**\n     * Returns all properties as a new object\n     */\n    getProperties() {\n        const properties = {\n            eventName: this.eventName,\n            eventId: this.eventId,\n            iTwinId: this.iTwinId,\n            iModelId: this.iModelId,\n            changeSetId: this.changeSetId,\n            time: this.time,\n            additionalProperties: this.additionalProperties,\n        };\n        return properties;\n    }\n}\n/** @internal */\nexport class TelemetryManager {\n    constructor(...clients) {\n        this._clients = new Set(clients);\n    }\n    async postTelemetry(requestContext, telemetryEvent) {\n        const postPerClient = async (subClient) => {\n            try {\n                await subClient.postTelemetry(requestContext, telemetryEvent);\n            }\n            catch (err) {\n                Logger.logError(TelemetryClientLoggerCategory.Telemetry, `Failed to post telemetry via subclient`, () => BentleyError.getErrorProps(err));\n            }\n        };\n        const subClientPromises = [];\n        for (const subClient of this._clients) {\n            subClientPromises.push(postPerClient(subClient));\n        }\n        await Promise.all(subClientPromises);\n    }\n    addClient(client) {\n        this._clients.add(client);\n    }\n    hasClient(client) {\n        return this._clients.has(client);\n    }\n}\n//# sourceMappingURL=TelemetryClient.js.map",
      "start": 1693508124565,
      "end": 1693508124633,
      "sourcemaps": null
    }
  ]
}
