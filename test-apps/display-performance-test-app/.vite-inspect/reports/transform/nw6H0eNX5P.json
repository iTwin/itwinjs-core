{
  "resolvedId": "D:/hub2023A/itwinjs-core/common/temp/node_modules/.pnpm/@loaders.gl+schema@3.4.7/node_modules/@loaders.gl/schema/dist/esm/lib/utils/async-queue.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nlet _Symbol$asyncIterator;\nclass ArrayQueue extends Array {\n  enqueue(value) {\n    return this.push(value);\n  }\n  dequeue() {\n    return this.shift();\n  }\n}\n_Symbol$asyncIterator = Symbol.asyncIterator;\nexport default class AsyncQueue {\n  constructor() {\n    _defineProperty(this, \"_values\", void 0);\n    _defineProperty(this, \"_settlers\", void 0);\n    _defineProperty(this, \"_closed\", void 0);\n    this._values = new ArrayQueue();\n    this._settlers = new ArrayQueue();\n    this._closed = false;\n  }\n  close() {\n    while (this._settlers.length > 0) {\n      this._settlers.dequeue().resolve({\n        done: true\n      });\n    }\n    this._closed = true;\n  }\n  [_Symbol$asyncIterator]() {\n    return this;\n  }\n  enqueue(value) {\n    if (this._closed) {\n      throw new Error('Closed');\n    }\n    if (this._settlers.length > 0) {\n      if (this._values.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      const settler = this._settlers.dequeue();\n      if (value instanceof Error) {\n        settler.reject(value);\n      } else {\n        settler.resolve({\n          value\n        });\n      }\n    } else {\n      this._values.enqueue(value);\n    }\n  }\n  next() {\n    if (this._values.length > 0) {\n      const value = this._values.dequeue();\n      if (value instanceof Error) {\n        return Promise.reject(value);\n      }\n      return Promise.resolve({\n        value\n      });\n    }\n    if (this._closed) {\n      if (this._settlers.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      return Promise.resolve({\n        done: true\n      });\n    }\n    return new Promise((resolve, reject) => {\n      this._settlers.enqueue({\n        resolve,\n        reject\n      });\n    });\n  }\n}\nexport async function takeAsync(asyncIterable) {\n  let count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n  const result = [];\n  const iterator = asyncIterable[Symbol.asyncIterator]();\n  while (result.length < count) {\n    const {\n      value,\n      done\n    } = await iterator.next();\n    if (done) {\n      break;\n    }\n    result.push(value);\n  }\n  return result;\n}\n//# sourceMappingURL=async-queue.js.map",
      "start": 1693508125043,
      "end": 1693508125161,
      "sourcemaps": null
    }
  ]
}
