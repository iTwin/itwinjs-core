{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/geometry/lib/esm/curve/spiral/CubicEvaluator.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Curve\n */\nimport { XYCurveEvaluator } from \"./XYCurveEvaluator\";\n/** Intermediate class for evaluation of bare cubic spirals `y = m ^x^3` with x axis from [0..xLength]\n * * This implements all the computations among fraction, x, and y.\n * * Derived classes implement specialized logic such as (a) precomputing `m` and (b) domain-specific fraction-to-distance approximations.\n * @internal\n */\nexport class CubicEvaluator extends XYCurveEvaluator {\n    constructor(axisLength, cubicM) {\n        super();\n        this._cubicM = cubicM;\n        this._axisLength = axisLength;\n    }\n    /** Update both constants. */\n    setConstants(axisLength, cubicM) {\n        this._axisLength = axisLength;\n        this._cubicM = cubicM;\n    }\n    get axisLength() { return this._axisLength; }\n    get cubicM() { return this._cubicM; }\n    /**\n     * Apply `scaleFactor` to the xLength and cubicM.\n     * * Derived classes commonly call this as `super.scaleInPlace()`, and additionally apply the scale to their members.\n     * @param scaleFactor\n     */\n    scaleInPlace(scaleFactor) {\n        this._axisLength *= scaleFactor;\n        // \"x\" arriving at \"m * x^3\" will be scaled. \"m\" has to be divided by the scale to cancel 2 of the 3 . .\n        this._cubicM /= (scaleFactor * scaleFactor);\n    }\n    /** Evaluate X at fraction. */\n    fractionToX(fraction) { return fraction * this._axisLength; }\n    /** Evaluate derivative of X with respect to fraction */\n    fractionToDX(_fraction) { return this._axisLength; }\n    /** Evaluate second derivative of X with respect to fraction */\n    fractionToDDX(_fraction) { return 0.0; }\n    /** Evaluate third derivative of X with respect to fraction */\n    fractionToD3X(_fraction) { return 0.0; }\n    /** Evaluate Y at fraction. */\n    fractionToY(fraction) {\n        const x = fraction * this._axisLength;\n        return this._cubicM * x * x * x;\n    }\n    /** Evaluate derivative of Y with respect to fraction. */\n    fractionToDY(fraction) {\n        const x = fraction * this._axisLength;\n        return 3.0 * this._cubicM * x * x * this._axisLength;\n    }\n    /** Evaluate second derivative of Y with respect to fraction. */\n    fractionToDDY(fraction) {\n        const x = fraction * this._axisLength;\n        return 6.0 * this._cubicM * x * this._axisLength * this._axisLength;\n    }\n    /** Evaluate third derivative of Y with respect to fraction. */\n    fractionToD3Y(_fraction) {\n        return 6.0 * this._cubicM * this._axisLength * this._axisLength * this._axisLength;\n    }\n    /** Evaluate fraction at x. */\n    xToFraction(x) { return x / this._axisLength; }\n}\n//# sourceMappingURL=CubicEvaluator.js.map",
      "start": 1693508124979,
      "end": 1693508125062,
      "sourcemaps": null
    }
  ]
}
