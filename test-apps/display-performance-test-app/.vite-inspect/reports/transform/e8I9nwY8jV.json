{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/PlanarClipMaskState.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Views\n */\nimport { assert } from \"@itwin/core-bentley\";\nimport { PlanarClipMaskMode, PlanarClipMaskPriority, PlanarClipMaskSettings } from \"@itwin/core-common\";\nimport { FeatureSymbology } from \"./render/FeatureSymbology\";\nimport { createMaskTreeReference } from \"./tile/internal\";\n/** The State of Planar Clip Mask applied to a reality model or background map.\n * Handles loading models and their associated tiles for models that are used by masks but may not be otherwise loaded or displayed.\n * @beta\n */\nexport class PlanarClipMaskState {\n    constructor(settings) {\n        this._allLoaded = false;\n        this.settings = settings;\n    }\n    static create(settings) {\n        return new PlanarClipMaskState(settings);\n    }\n    static fromJSON(props) {\n        return this.create(PlanarClipMaskSettings.fromJSON(props));\n    }\n    discloseTileTrees(trees) {\n        if (this._tileTreeRefs)\n            this._tileTreeRefs.forEach((treeRef) => treeRef.discloseTileTrees(trees));\n    }\n    getTileTrees(view, classifiedModelId) {\n        if (this.settings.mode === PlanarClipMaskMode.Priority) {\n            const viewTrees = new Array();\n            const thisPriority = this.settings.priority === undefined ? PlanarClipMaskPriority.RealityModel : this.settings.priority;\n            view.forEachTileTreeRef((ref) => {\n                const tree = ref.treeOwner.load();\n                if (tree && tree.modelId !== classifiedModelId && ref.planarclipMaskPriority > thisPriority)\n                    viewTrees.push(ref);\n            });\n            return viewTrees;\n        }\n        if (!this._tileTreeRefs) {\n            this._tileTreeRefs = new Array();\n            if (this.settings.modelIds) {\n                for (const modelId of this.settings.modelIds) {\n                    const model = view.iModel.models.getLoaded(modelId);\n                    assert(model !== undefined); // Models should be loaded by RealityModelTileTree\n                    if (model?.asGeometricModel)\n                        this._tileTreeRefs.push(createMaskTreeReference(view, model.asGeometricModel));\n                }\n            }\n        }\n        if (!this._allLoaded)\n            this._allLoaded = this._tileTreeRefs.every((treeRef) => treeRef.treeOwner.load() !== undefined);\n        return this._allLoaded ? this._tileTreeRefs : undefined;\n    }\n    getPlanarClipMaskSymbologyOverrides() {\n        if (!this.settings.subCategoryOrElementIds)\n            return undefined;\n        switch (this.settings.mode) {\n            case PlanarClipMaskMode.IncludeElements: {\n                const overrides = new FeatureSymbology.Overrides();\n                overrides.setAlwaysDrawnSet(this.settings.subCategoryOrElementIds, true);\n                return overrides;\n            }\n            case PlanarClipMaskMode.ExcludeElements: {\n                const overrides = new FeatureSymbology.Overrides();\n                overrides.ignoreSubCategory = true;\n                overrides.setNeverDrawnSet(this.settings.subCategoryOrElementIds);\n                return overrides;\n            }\n            case PlanarClipMaskMode.IncludeSubCategories: {\n                const overrides = new FeatureSymbology.Overrides();\n                for (const subCategoryId of this.settings.subCategoryOrElementIds)\n                    overrides.setVisibleSubCategory(subCategoryId);\n                return overrides;\n            }\n        }\n        return undefined;\n    }\n}\n//# sourceMappingURL=PlanarClipMaskState.js.map",
      "start": 1693508119121,
      "end": 1693508119325,
      "sourcemaps": null
    }
  ]
}
