{
  "resolvedId": "D:/hub2023A/itwinjs-core/common/temp/node_modules/.pnpm/@itwin+reality-data-client@0.9.0_mdtbcqczpmeuv6yjzfaigjndwi/node_modules/@itwin/reality-data-client/lib/esm/RealityDataClient.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\nimport { BentleyError } from \"@itwin/core-bentley\";\nimport { Angle } from \"@itwin/core-geometry\";\nimport axios from \"axios\";\nimport { Project } from \"./Projects\";\nimport { ITwinRealityData } from \"./RealityData\";\nimport { getRequestConfig } from \"./RequestOptions\";\n/** Available Reality Data API Versions */\nexport var ApiVersion;\n(function (ApiVersion) {\n    ApiVersion[ApiVersion[\"v1\"] = 0] = \"v1\";\n})(ApiVersion || (ApiVersion = {}));\n/**\n * Client wrapper to Reality Data API.\n * An instance of this class is used to extract reality data from the Reality Data API.\n * Most important methods enable to obtain a specific reality data, fetch all reality data associated with an iTwin and\n * all reality data of an iTwin within a provided spatial extent.\n * This class also implements extraction of the Azure blob address.\n * @beta\n */\nexport class RealityDataAccessClient {\n    /**\n     * Creates an instance of RealityDataAccessClient.\n     */\n    constructor(realityDataClientOptions) {\n        this.baseUrl = \"https://api.bentley.com/realitydata\";\n        this.apiVersion = ApiVersion.v1;\n        this.authorizationClient = undefined;\n        // runtime config\n        if (realityDataClientOptions) {\n            if (realityDataClientOptions.version)\n                this.apiVersion = realityDataClientOptions.version;\n            if (realityDataClientOptions.baseUrl)\n                this.baseUrl = realityDataClientOptions.baseUrl;\n            if (realityDataClientOptions.authorizationClient)\n                this.authorizationClient = realityDataClientOptions.authorizationClient;\n        }\n    }\n    /**\n     * Try to use authorizationClient in RealityDataClientOptions to get the access token\n     * otherwise, will return the input token\n     * This is a workaround to support different authorization client for the reality data client and iTwin-core.\n     */\n    async resolveAccessToken(accessToken) {\n        return this.authorizationClient ? this.authorizationClient.getAccessToken() : accessToken;\n    }\n    /**\n     * This method returns the URL to obtain the Reality Data details.\n     * Technically it should never be required as the RealityData object returned should have all the information to obtain the\n     * data.\n     * @param iTwinId the iTwin identifier\n     * @param realityDataId realityData identifier\n     * @returns string containing the URL to reality data for indicated tile.\n     * @beta\n     */\n    async getRealityDataUrl(iTwinId, realityDataId) {\n        if (iTwinId) {\n            return `${this.baseUrl}/${realityDataId}?projectId=${iTwinId}`;\n        }\n        return `${this.baseUrl}/${realityDataId}`;\n    }\n    /**\n     * Gets reality data with all of its properties\n     * @param accessToken The client request context.\n     * @param iTwinId id of associated iTwin (or project)\n     * @param realityDataId realityData identifier\n     * @returns The requested reality data.\n     * @throws [[BentleyError]] with code 401 when the request lacks valid authentication credentials\n     * @throws [[BentleyError]] with code 404 when the specified reality data is not found\n     * @throws [[BentleyError]] with code 422 when the request is invalid\n     * @beta\n     */\n    async getRealityData(accessToken, iTwinId, realityDataId) {\n        const accessTokenResolved = await this.resolveAccessToken(accessToken);\n        const url = `${await this.getRealityDataUrl(iTwinId, realityDataId)}`;\n        try {\n            const realityDataResponse = await axios.get(url, getRequestConfig(accessTokenResolved, \"GET\", url, this.apiVersion));\n            // Axios throws on 4XX and 5XX; we make sure the response here is 200\n            if (realityDataResponse.status !== 200)\n                throw new BentleyError(422, iTwinId ? `Could not fetch reality data: ${realityDataId} with iTwinId ${iTwinId}`\n                    : `Could not fetch reality data: ${realityDataId}`);\n            const realityData = new ITwinRealityData(this, realityDataResponse.data.realityData, iTwinId);\n            return realityData;\n        }\n        catch (error) {\n            return this.handleError(error);\n        }\n    }\n    /**\n    * Gets all reality data associated with the iTwin.\n    * @param accessToken The client request context.\n    * @param iTwinId id of associated iTwin\n    * @param criteria Criteria by which to query.\n    * @returns an array of RealityData that are associated to the iTwin.\n    * @throws [[BentleyError]] with code 401 when the request lacks valid authentication credentials\n    * @throws [[BentleyError]] with code 422 when the request is invalid\n    * @beta\n    */\n    async getRealityDatas(accessToken, iTwinId, criteria) {\n        var _a, _b;\n        try {\n            const accessTokenResolved = await this.resolveAccessToken(accessToken);\n            // {api-url}/realitydata/[?projectId][&continuationToken][&$top][&extent]\n            let url = iTwinId ? `${this.baseUrl}?projectId=${iTwinId}` : this.baseUrl;\n            if (criteria) {\n                if (criteria.continuationToken) {\n                    url += `&continuationToken=${criteria.continuationToken}`;\n                }\n                if (criteria.top) {\n                    const top = criteria.top;\n                    if (top > 500) {\n                        throw new BentleyError(422, \"Maximum value for top parameter is 500.\");\n                    }\n                    url += `&$top=${top}`;\n                }\n                if (criteria.extent) {\n                    const iModelRange = criteria.extent.getLongitudeLatitudeBoundingBox();\n                    const extent = `${Angle.radiansToDegrees(iModelRange.low.x)},${Angle.radiansToDegrees(iModelRange.low.y)},${Angle.radiansToDegrees(iModelRange.high.x)},${Angle.radiansToDegrees(iModelRange.high.y)}`;\n                    url += `&extent=${extent}`;\n                }\n            }\n            const response = await axios.get(url, getRequestConfig(accessTokenResolved, \"GET\", url, this.apiVersion, ((criteria === null || criteria === void 0 ? void 0 : criteria.getFullRepresentation) === true ? true : false)));\n            // Axios throws on 4XX and 5XX; we make sure the response here is 200\n            if (response.status !== 200)\n                throw new BentleyError(422, iTwinId ? `Could not fetch reality data with iTwinId ${iTwinId}`\n                    : `Could not fetch reality data`);\n            const realityDatasResponseBody = response.data;\n            const realityDataResponse = {\n                realityDatas: [],\n                continuationToken: this.extractContinuationToken((_b = (_a = response.data._links) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.href),\n            };\n            realityDatasResponseBody.realityData.forEach((realityData) => {\n                realityDataResponse.realityDatas.push(new ITwinRealityData(this, realityData, iTwinId));\n            });\n            return realityDataResponse;\n        }\n        catch (error) {\n            return this.handleError(error);\n        }\n    }\n    extractContinuationToken(url) {\n        if (url) {\n            const continuationToken = url.split(\"&continuationToken=\");\n            return continuationToken[continuationToken.length - 1];\n        }\n        return undefined;\n    }\n    /**\n    * Retrieves the list of projects associated to the specified realityData.\n    * @param accessToken The client request context.\n    * @param realityDataId realityData identifier\n    * @returns an array of Projects that are associated to the realityData.\n    * @throws [[BentleyError]] with code 401 when the request lacks valid authentication credentials\n    * @beta\n    */\n    async getRealityDataProjects(accessToken, realityDataId) {\n        try {\n            const accessTokenResolved = await this.resolveAccessToken(accessToken);\n            // GET https://{{hostname-apim}}/realitydata/{{realityDataId}}/projects\n            const url = `${this.baseUrl}/${realityDataId}/projects`;\n            const options = getRequestConfig(accessTokenResolved, \"GET\", url, this.apiVersion);\n            // execute query\n            const response = await axios.get(url, options);\n            const projectsResponseBody = response.data;\n            const projectsResponse = [];\n            projectsResponseBody.projects.forEach((projectValue) => {\n                projectsResponse.push(new Project(projectValue));\n            });\n            return projectsResponse;\n        }\n        catch (error) {\n            return this.handleError(error);\n        }\n    }\n    /**\n     * Creates a RealityData\n     * @param accessToken The client request context.\n     * @param iTwinId id of associated iTwin\n     * @param iTwinRealityDAta the realityData to create\n     * @throws [[BentleyError]] with code 401 when the request lacks valid authentication credentials\n     * @throws [[BentleyError]] with code 403 when user does not have required permissions to create a reality data\n     * @throws [[BentleyError]] with code 422 when the request is invalid\n     * @beta\n     */\n    async createRealityData(accessToken, iTwinId, iTwinRealityData) {\n        try {\n            const accessTokenResolved = await this.resolveAccessToken(accessToken);\n            const url = this.baseUrl;\n            const options = getRequestConfig(accessTokenResolved, \"POST\", url, this.apiVersion);\n            // creation payload\n            const realityDataToCreate = {\n                displayName: iTwinRealityData.displayName,\n                classification: iTwinRealityData.classification,\n                type: iTwinRealityData.type,\n                dataset: iTwinRealityData.dataset,\n                group: iTwinRealityData.group,\n                description: iTwinRealityData.description,\n                rootDocument: iTwinRealityData.rootDocument,\n                acquisition: iTwinRealityData.acquisition,\n                authoring: iTwinRealityData.authoring,\n                extent: iTwinRealityData.extent,\n                accessControl: iTwinRealityData.accessControl,\n            };\n            const createPayload = iTwinId ?\n                {\n                    projectId: iTwinId,\n                    realityData: realityDataToCreate,\n                } :\n                {\n                    realityData: realityDataToCreate,\n                };\n            const response = await axios.post(url, createPayload, options);\n            iTwinRealityData = new ITwinRealityData(this, response.data.realityData, iTwinId);\n        }\n        catch (error) {\n            return this.handleError(error);\n        }\n        return iTwinRealityData;\n    }\n    /**\n    * Modifies an existing RealityData\n    * @param accessToken The client request context.\n    * @param iTwinId id of associated iTwin\n    * @param iTwinRealityDAta the realityData to modify\n    * @throws [[BentleyError]] with code 401 when the request lacks valid authentication credentials\n    * @throws [[BentleyError]] with code 404 when the specified reality data was not found\n    * @throws [[BentleyError]] with code 422 when the request is invalid\n    * @beta\n    */\n    async modifyRealityData(accessToken, iTwinId, iTwinRealityData) {\n        try {\n            const accessTokenResolved = await this.resolveAccessToken(accessToken);\n            const url = iTwinId ? `${this.baseUrl}/${iTwinRealityData.id}?projectId=${iTwinId}` : `${this.baseUrl}/${iTwinRealityData.id}`;\n            const options = getRequestConfig(accessTokenResolved, \"PATCH\", url, this.apiVersion);\n            // payload\n            const realityDataToModify = {\n                id: iTwinRealityData.id,\n                displayName: iTwinRealityData.displayName,\n                classification: iTwinRealityData.classification,\n                type: iTwinRealityData.type,\n                dataset: iTwinRealityData.dataset,\n                group: iTwinRealityData.group,\n                description: iTwinRealityData.description,\n                rootDocument: iTwinRealityData.rootDocument,\n                acquisition: iTwinRealityData.acquisition,\n                authoring: iTwinRealityData.authoring,\n                extent: iTwinRealityData.extent,\n                // accessControl: iTwinRealityData.accessControl, this is readonly for the moment\n            };\n            const modifyPayload = iTwinId ?\n                {\n                    projectId: iTwinId,\n                    realityData: realityDataToModify,\n                } :\n                {\n                    realityData: realityDataToModify,\n                };\n            const response = await axios.patch(url, modifyPayload, options);\n            iTwinRealityData = new ITwinRealityData(this, response.data.realityData, iTwinId);\n        }\n        catch (error) {\n            return this.handleError(error);\n        }\n        return iTwinRealityData;\n    }\n    /**\n     * Deletes a RealityData\n     * @param accessToken The client request context.\n     * @param iTwinRealityDAta the realityData to delete\n     * @returns true if successful (204 response), false if not\n     * @throws [[BentleyError]] with code 401 when the request lacks valid authentication credentials\n     * @throws [[BentleyError]] with code 404 when the specified reality data was not found\n     * @throws [[BentleyError]] with code 422 when the request is invalid\n     * @beta\n     */\n    async deleteRealityData(accessToken, realityDataId) {\n        let response;\n        try {\n            const accessTokenResolved = await this.resolveAccessToken(accessToken);\n            const url = `${this.baseUrl}/${realityDataId}`;\n            const options = getRequestConfig(accessTokenResolved, \"POST\", url, this.apiVersion);\n            response = await axios.delete(url, options);\n        }\n        catch (error) {\n            return this.handleError(error);\n        }\n        if (response.status === 204)\n            return true;\n        else\n            return false;\n    }\n    /**\n     * Associates a RealityData to an iTwin\n     * @param accessToken The client request context.\n     * @param iTwinId id of iTwin to associate the realityData to.\n     * @param realityDataId id of the RealityData.\n     * @returns true if successful (201 response) or false if not\n     * @throws [[BentleyError]] with code 401 when the request lacks valid authentication credentials\n     * @throws [[BentleyError]] with code 404 when the specified reality data or project was not found\n     * @throws [[BentleyError]] with code 422 when the request is invalid\n     * @beta\n     */\n    async associateRealityData(accessToken, iTwinId, realityDataId) {\n        let response;\n        try {\n            const accessTokenResolved = await this.resolveAccessToken(accessToken);\n            const url = `${this.baseUrl}/${realityDataId}/projects/${iTwinId}`;\n            const options = getRequestConfig(accessTokenResolved, \"PUT\", url, this.apiVersion);\n            response = await axios.put(url, undefined, options);\n        }\n        catch (error) {\n            return this.handleError(error);\n        }\n        if (response.status === 201)\n            return true;\n        else\n            return false;\n    }\n    /**\n    * Dissociates a RealityData from an iTwin\n    * @param accessToken The client request context.\n    * @param iTwinId id of iTwin to dissociate the realityData from.\n    * @param realityDataId id of the RealityData.\n    * @returns true if successful (204 response) or false if not\n    * @throws [[BentleyError]] with code 401 when the request lacks valid authentication credentials\n    * @throws [[BentleyError]] with code 404 when the association between the reality data and project was not found\n    * @throws [[BentleyError]] with code 422 when the request is invalid\n    * @beta\n    */\n    async dissociateRealityData(accessToken, iTwinId, realityDataId) {\n        let response;\n        try {\n            const accessTokenResolved = await this.resolveAccessToken(accessToken);\n            const url = `${this.baseUrl}/${realityDataId}/projects/${iTwinId}`;\n            const options = getRequestConfig(accessTokenResolved, \"DELETE\", url, this.apiVersion);\n            response = await axios.delete(url, options);\n        }\n        catch (error) {\n            return this.handleError(error);\n        }\n        if (response.status === 204)\n            return true;\n        else\n            return false;\n    }\n    /**\n    * Handle errors thrown.\n    * Handled errors can be of AxiosError type or BentleyError.\n    * @beta\n    */\n    handleError(error) {\n        var _a, _b;\n        // Default error\n        let status = 422;\n        let message = \"Unknown error. Please ensure that the request is valid.\";\n        if (axios.isAxiosError(error)) {\n            const axiosResponse = error.response;\n            status = axiosResponse.status;\n            message = (_b = (_a = axiosResponse.data) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.message;\n        }\n        else {\n            const bentleyError = error;\n            if (bentleyError !== undefined) {\n                status = bentleyError.errorNumber;\n                message = bentleyError.message;\n            }\n        }\n        return Promise.reject(new BentleyError(status, message));\n    }\n}\n//# sourceMappingURL=RealityDataClient.js.map",
      "start": 1693508123371,
      "end": 1693508123538,
      "sourcemaps": null
    }
  ]
}
