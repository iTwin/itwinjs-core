{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/geometry/lib/esm/geometry3d/Point2dArrayCarrier.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module CartesianGeometry\n */\n/* eslint-disable @typescript-eslint/naming-convention, no-empty */\nimport { IndexedXYCollection } from \"./IndexedXYCollection\";\nimport { Point2d, Vector2d, XY } from \"./Point2dVector2d\";\n/**\n * Helper object to access members of a Point2d[] in geometric calculations.\n * * The collection holds only a reference to the actual array.\n * * The actual array may be replaced by the user as needed.\n * * When replaced, there is no cached data to be updated.\n * @public\n*/\nexport class Point2dArrayCarrier extends IndexedXYCollection {\n    /** CAPTURE caller supplied array ... */\n    constructor(data) {\n        super();\n        this.data = data;\n    }\n    /** test if index is valid  */\n    isValidIndex(index) {\n        return index >= 0 && index < this.data.length;\n    }\n    /**\n     * Access by index, returning strongly typed Point2d\n     * * This returns the xy value but NOT reference to the point in the \"carried\" array.\n     * @param index index of point within the array\n     * @param result caller-allocated destination\n     * @returns undefined if the index is out of bounds\n     */\n    getPoint2dAtCheckedPointIndex(index, result) {\n        if (this.isValidIndex(index)) {\n            const source = this.data[index];\n            return Point2d.create(source.x, source.y, result);\n        }\n        return undefined;\n    }\n    /**\n     * Access by index, returning strongly typed Vector2d\n     * @param index index of point within the array\n     * @param result caller-allocated destination\n     * @returns undefined if the index is out of bounds\n     */\n    getVector2dAtCheckedVectorIndex(index, result) {\n        if (this.isValidIndex(index)) {\n            const source = this.data[index];\n            return Vector2d.create(source.x, source.y, result);\n        }\n        return undefined;\n    }\n    /**\n     * Return a vector from the point at indexA to the point at indexB\n     * @param indexA index of point within the array\n     * @param indexB index of point within the array\n     * @param result caller-allocated vector.\n     * @returns undefined if either index is out of bounds\n     */\n    vectorIndexIndex(indexA, indexB, result) {\n        if (this.isValidIndex(indexA) && this.isValidIndex(indexB))\n            return Vector2d.createStartEnd(this.data[indexA], this.data[indexB], result);\n        return undefined;\n    }\n    /**\n     * Return a vector from given origin to point at indexB\n     * @param origin origin for vector\n     * @param indexB index of point within the array\n     * @param result caller-allocated vector.\n     * @returns undefined if index is out of bounds\n     */\n    vectorXAndYIndex(origin, indexB, result) {\n        if (this.isValidIndex(indexB))\n            return Vector2d.createStartEnd(origin, this.data[indexB], result);\n        return undefined;\n    }\n    /**\n     * Return the cross product of vectors from origin to points at indexA and indexB\n     * @param origin origin for vector\n     * @param indexA index of first target within the array\n     * @param indexB index of second target within the array\n     * @param result caller-allocated vector.\n     * @returns undefined if either index is out of bounds\n     */\n    crossProductXAndYIndexIndex(origin, indexA, indexB) {\n        if (this.isValidIndex(indexA) && this.isValidIndex(indexB))\n            return XY.crossProductToPoints(origin, this.data[indexA], this.data[indexB]);\n        return undefined;\n    }\n    /**\n     * Return the cross product of vectors from point at originIndex to points at indexA and indexB\n     * @param originIndex index of origin\n     * @param indexA index of first target within the array\n     * @param indexB index of second target within the array\n     * @param result caller-allocated vector.\n     * @returns return true if indexA, indexB both valid\n     */\n    crossProductIndexIndexIndex(originIndex, indexA, indexB) {\n        if (this.isValidIndex(originIndex) && this.isValidIndex(indexA) && this.isValidIndex(indexB))\n            return XY.crossProductToPoints(this.data[originIndex], this.data[indexA], this.data[indexB]);\n        return undefined;\n    }\n    /** Read-only property for number of XYZ in the collection. */\n    get length() {\n        return this.data.length;\n    }\n    /**\n     * Get x coordinate by point index, with no index checking\n     * @param pointIndex index to access\n     */\n    getXAtUncheckedPointIndex(pointIndex) {\n        return this.data[pointIndex].x;\n    }\n    /**\n     * Get y coordinate by point index, with no index checking\n     * @param pointIndex index to access\n     */\n    getYAtUncheckedPointIndex(pointIndex) {\n        return this.data[pointIndex].y;\n    }\n}\n//# sourceMappingURL=Point2dArrayCarrier.js.map",
      "start": 1693508122341,
      "end": 1693508122484,
      "sourcemaps": null
    }
  ]
}
