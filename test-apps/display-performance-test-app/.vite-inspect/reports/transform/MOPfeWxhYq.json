{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/geometry/lib/esm/geometry3d/LongitudeLatitudeAltitude.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module CartesianGeometry\n */\nimport { Geometry } from \"../Geometry\";\nimport { Angle } from \"./Angle\";\n/**\n * An `AngleAngleNumber` is a pair of angles (named `longitude` and `latitude`) and an additional number.\n * * This is directly intended to support `Ellipsoid` computations, with the two angles used as\n *    * `longitude` is \"around the equator\"\n *    * `latitude` is \"equator to pole\"\n *    * `h` is altitude above the `Ellipsoid surface.\n * * The structure may also be used for torus coordinates.\n * @public\n */\nexport class LongitudeLatitudeNumber {\n    /** (property getter) longitude in radians */\n    get longitudeRadians() { return this._longitude.radians; }\n    /** (property getter) longitude in degrees */\n    get longitudeDegrees() { return this._longitude.degrees; }\n    /** (property getter) (reference to) longitude as a strongly typed `Angle` */\n    get longitudeRef() { return this._longitude; }\n    /** (property getter) (clone of)  longitude as a strongly typed `Angle` */\n    get longitude() { return this._longitude.clone(); }\n    /** (property getter) latitude in radians */\n    get latitudeRadians() { return this._latitude.radians; }\n    /** (property getter) latitude in degrees */\n    get latitudeDegrees() { return this._latitude.degrees; }\n    /** (property getter) (reference to) latitude as a strongly typed `Angle` */\n    get latitudeRef() { return this._latitude; }\n    /** (property getter) (clone of)  latitude as a strongly typed `Angle` */\n    get latitude() { return this._latitude.clone(); }\n    /** Get or set the altitude. */\n    get altitude() { return this._altitude; }\n    set altitude(value) { this._altitude = value; }\n    /** Constructor: Capture angles and altitude */\n    constructor(longitude, latitude, altitude) {\n        this._longitude = longitude;\n        this._latitude = latitude;\n        this._altitude = altitude;\n    }\n    /** Create with all zero angles and altitude. */\n    static createZero() { return new LongitudeLatitudeNumber(Angle.createDegrees(0), Angle.createDegrees(0), 0); }\n    /** Create with strongly typed `Angle` inputs */\n    static create(longitude, latitude, h = 0, result) {\n        if (result) {\n            result._latitude.setFrom(latitude);\n            result._longitude.setFrom(longitude);\n            result._altitude = h;\n            return result;\n        }\n        return new LongitudeLatitudeNumber(longitude.clone(), latitude.clone(), h);\n    }\n    /** Create with angles in radians. */\n    static createRadians(longitudeRadians, latitudeRadians, h = 0, result) {\n        if (result) {\n            result._longitude.setRadians(longitudeRadians);\n            result._latitude.setRadians(latitudeRadians);\n            result._altitude = h;\n            return result;\n        }\n        return new LongitudeLatitudeNumber(Angle.createRadians(longitudeRadians), Angle.createRadians(latitudeRadians), h);\n    }\n    /** Create with angles in degrees. */\n    static createDegrees(longitudeDegrees, latitudeDegrees, h = 0, result) {\n        if (result) {\n            result._longitude.setRadians(longitudeDegrees);\n            result._latitude.setRadians(latitudeDegrees);\n            result._altitude = h;\n            return result;\n        }\n        return new LongitudeLatitudeNumber(Angle.createDegrees(longitudeDegrees), Angle.createDegrees(latitudeDegrees), h);\n    }\n    /**\n     * Set content from a JSON object.\n     * If the json object is undefined or unrecognized, always set a default value.\n     *\n     */\n    setFromJSON(json) {\n        if (json.latitude !== undefined) {\n            this._latitude.setFromJSON(json.latitude);\n        }\n        else {\n            this._latitude.setDegrees(0);\n        }\n        if (json.longitude !== undefined) {\n            this._longitude.setFromJSON(json.longitude);\n        }\n        else {\n            this._longitude.setDegrees(0);\n        }\n        if (json.h !== undefined && Number.isFinite(json.h)) {\n            this._altitude = json.h;\n        }\n        else {\n            this._altitude = 0;\n        }\n    }\n    /** Return a json object with this object's contents.\n     * * Tag names are: longitude, latitude, h\n     */\n    toJSON() {\n        return { latitude: this._latitude.toJSON(), longitude: this._longitude.toJSON(), h: this._altitude };\n    }\n    /** Test for near equality */\n    isAlmostEqual(other) {\n        return this._latitude.isAlmostEqual(other._latitude)\n            && this._longitude.isAlmostEqual(other._longitude)\n            && Geometry.isSameCoordinate(this._altitude, other._altitude);\n    }\n    /** Return a copy */\n    clone() {\n        return new LongitudeLatitudeNumber(this._longitude.clone(), this._latitude.clone(), this._altitude);\n    }\n}\n//# sourceMappingURL=LongitudeLatitudeAltitude.js.map",
      "start": 1693508122301,
      "end": 1693508122341,
      "sourcemaps": null
    }
  ]
}
