{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/quantity-formatting/BaseUnitFormattingSettingsProvider.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module QuantityFormatting\n */\nimport { IModelApp } from \"../IModelApp\";\nimport { IModelConnection } from \"../IModelConnection\";\n/** This abstract class reacts to changes in the \"active\" iModel and updates the [[QuantityFormatter]] overrides and active\n * presentation unit system based on stored preferences.  In addition, monitors the [[QuantityFormatter]] for changes to format overrides and the active\n * unit system and stores these changes. The \"active\" iModel is determined by listening to the `IModelApp.viewManager.onSelectedViewportChanged` event\n * and gets the iModel from the selected viewport.\n * @beta\n */\nexport class BaseUnitFormattingSettingsProvider {\n    /**\n     * @param maintainOverridesPerIModel If maintainOverridesPerIModel is true the base class will set up listeners\n     * to monitor \"active\" iModel changes so the overrides for the QuantityFormatter properly match the overrides set\n     * up by the user. If false then the overrides are maintained only per user.\n     * @beta\n     */\n    constructor(_quantityFormatter, _maintainOverridesPerIModel) {\n        this._quantityFormatter = _quantityFormatter;\n        this._maintainOverridesPerIModel = _maintainOverridesPerIModel;\n        this.storeFormatOverrides = async ({ typeKey, overrideEntry, unitSystem }) => {\n            if (undefined === overrideEntry) {\n                // remove all overrides for quantity type\n                if (undefined === unitSystem) {\n                    await this.remove(typeKey);\n                    return;\n                }\n                else {\n                    // remove only system specific overrides for quantity type\n                    const storedJson = await this.retrieve(typeKey);\n                    if (storedJson) {\n                        delete storedJson[unitSystem];\n                        if (Object.keys(storedJson).length) {\n                            await this.store(typeKey, storedJson);\n                        }\n                        else {\n                            await this.remove(typeKey);\n                        }\n                    }\n                }\n            }\n            else {\n                // setting a new override or set of overrides\n                const storedJson = await this.retrieve(typeKey);\n                const updatedFormat = { ...storedJson, ...overrideEntry };\n                await this.store(typeKey, updatedFormat);\n            }\n        };\n        /** save UnitSystem for active iModel */\n        this.storeUnitSystemSetting = async ({ system }) => {\n            await this.storeUnitSystemKey(system);\n        };\n        this.applyQuantityFormattingSettingsForIModel = async (imodel) => {\n            if (this._maintainOverridesPerIModel)\n                this._imodelConnection = imodel;\n            const overrideFormatProps = await this.buildQuantityFormatOverridesMap();\n            const unitSystemKey = await this.retrieveUnitSystem(this._quantityFormatter.activeUnitSystem);\n            await this._quantityFormatter.reinitializeFormatAndParsingsMaps(overrideFormatProps, unitSystemKey, true, true);\n        };\n        this.handleIModelOpen = async (imodel) => {\n            await this.applyQuantityFormattingSettingsForIModel(imodel);\n        };\n        this.handleViewportChanged = async (args) => {\n            if (args.current?.iModel && (args.current?.iModel?.iModelId !== this.imodelConnection?.iModelId)) {\n                await this.applyQuantityFormattingSettingsForIModel(args.current?.iModel);\n            }\n        };\n        this.handleIModelClose = async () => {\n            this._imodelConnection = undefined;\n        };\n        if (this._maintainOverridesPerIModel) {\n            IModelApp.viewManager.onSelectedViewportChanged.addListener(this.handleViewportChanged);\n            IModelConnection.onOpen.addListener(this.handleIModelOpen);\n            IModelConnection.onClose.addListener(this.handleIModelClose);\n        }\n    }\n    get maintainOverridesPerIModel() {\n        return !!this._maintainOverridesPerIModel;\n    }\n    async loadOverrides(imodel) {\n        await this.applyQuantityFormattingSettingsForIModel(imodel);\n    }\n    get imodelConnection() {\n        return this._imodelConnection;\n    }\n    /** function to convert from serialized JSON format for Quantity Type overrides to build a map compatible with QuantityManager */\n    async buildQuantityFormatOverridesMap() {\n        const overrideFormatProps = new Map();\n        // use map and await all returned promises - overrides are stored by QuantityType\n        for await (const quantityTypeKey of [...this._quantityFormatter.quantityTypesRegistry.keys()]) {\n            const quantityTypeDef = this._quantityFormatter.quantityTypesRegistry.get(quantityTypeKey);\n            if (quantityTypeDef) {\n                const typeKey = quantityTypeDef.key;\n                const overrideEntry = await this.retrieve(typeKey);\n                if (overrideEntry) {\n                    // extract overrides and insert into appropriate override map entry\n                    Object.keys(overrideEntry).forEach((systemKey) => {\n                        const unitSystemKey = systemKey;\n                        const props = overrideEntry[unitSystemKey];\n                        if (props) {\n                            if (overrideFormatProps.has(unitSystemKey)) {\n                                overrideFormatProps.get(unitSystemKey).set(typeKey, props);\n                            }\n                            else {\n                                const newMap = new Map();\n                                newMap.set(typeKey, props);\n                                overrideFormatProps.set(unitSystemKey, newMap);\n                            }\n                        }\n                    });\n                }\n            }\n        }\n        return overrideFormatProps;\n    }\n}\n//# sourceMappingURL=BaseUnitFormattingSettingsProvider.js.map",
      "start": 1693508119393,
      "end": 1693508119609,
      "sourcemaps": null
    }
  ]
}
