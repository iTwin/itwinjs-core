{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/bentley/lib/esm/SortedArray.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Collections\n */\n/**\n * A [[CloneFunction]] that, given a value of type T, returns the same value.\n * Useful as a default argument for functions that can alternatively accept custom logic for cloning values of object type.\n * @param value The value to clone.\n * @returns the input value.\n * @public\n */\nexport function shallowClone(value) {\n    return value;\n}\n/**\n * Given a sorted array, computes the position at which the specified value should be inserted into the array so that the array remains sorted.\n * @param value The value whose position is to be computed.\n * @param list An array of U already sorted according to the comparison criterion.\n * @param compare The function used to compare the value with elements in `list`.\n * @returns an object with 'index' corresponding to the computed position and 'equal' set to true if an equivalent element already exists at that index.\n * @public\n */\nexport function lowerBound(value, list, compare) {\n    return lowerBoundOfEquivalent(list, (element) => compare(value, element));\n}\nfunction lowerBoundOfEquivalent(list, criterion) {\n    let low = 0;\n    let high = list.length;\n    while (low < high) {\n        const mid = Math.floor((low + high) / 2);\n        const comp = criterion(list[mid]);\n        if (0 === comp)\n            return { index: mid, equal: true };\n        else if (comp < 0)\n            high = mid;\n        else\n            low = mid + 1;\n    }\n    return { index: low, equal: false };\n}\n/** Describes how duplicate values are handled when inserting into a [[SortedArray]].\n * A \"duplicate\" value is one that compares equal to a value already present in the array, per the array's comparison function.\n * @public\n */\nexport var DuplicatePolicy;\n(function (DuplicatePolicy) {\n    /** The array allows duplicate values to be inserted. All duplicate values will be adjacent in the array, but the ordering between duplicate values is unspecified.\n     * @note In the presence of duplicate values, functions like [[SortedArray.indexOf]] and [[SortedArray.findEqual]] will return one of the values - exactly which one is unspecified.\n     */\n    DuplicatePolicy[DuplicatePolicy[\"Allow\"] = 0] = \"Allow\";\n    /** Duplicate values are forbidden - when attempting to insert a value equivalent to one already present, the already-present value is retained. */\n    DuplicatePolicy[DuplicatePolicy[\"Retain\"] = 1] = \"Retain\";\n    /** Duplicate values are forbidden - when attempting to insert a value equivalent to one already present, the already-present value is replaced by the new value.\n     * This can be useful when the value type carries additional data that is not evaluated by the comparison function.\n     */\n    DuplicatePolicy[DuplicatePolicy[\"Replace\"] = 2] = \"Replace\";\n})(DuplicatePolicy || (DuplicatePolicy = {}));\n/**\n * A read-only view of an array of some type T sorted according to some user-supplied criterion.\n * Duplicate elements may be present, though sub-types may enforce uniqueness of elements.\n * In the absence of duplicates, a ReadonlySortedArray<T> can behave like a Set<T> where T is an object and equality is determined\n * by some criterion other than object identity.\n *\n * Because the array is always sorted, querying for the presence of an element is performed using binary\n * search, which is more efficient than a linear search for reasonably large arrays.\n *\n * The comparison function must meet the following criteria, given 'lhs' and 'rhs' of type T:\n *  - If lhs is equal to rhs, returns 0\n *  - If lhs is less than rhs, returns a negative value\n *  - If lhs is greater than rhs, returns a positive value\n *  - If compare(lhs, rhs) returns 0, then compare(rhs, lhs) must also return 0\n *  - If compare(lhs, rhs) returns a negative value, then compare(rhs, lhs) must return a positive value, and vice versa.\n *\n * Note that the array is read-only only from the perspective of its public interface. Mutation methods are defined for internal use by sub-types.\n *\n * @see [[SortedArray]] for a general-purpose mutable sorted array.\n * @public\n */\nexport class ReadonlySortedArray {\n    /**\n     * Construct a new ReadonlySortedArray<T>.\n     * @param compare The function used to compare elements within the array.\n     * @param duplicatePolicy Policy for handling attempts to insert a value when an equivalent value already exists. If the input is a boolean, then `true` indicates [[DuplicatePolicy.Allow]], and `false` indicates [[DuplicatePolicy.Retain]].\n     * @param clone The function invoked to clone a new element for insertion into the array. The default implementation simply returns its input.\n     */\n    constructor(compare, duplicatePolicy = false, clone = shallowClone) {\n        this._array = [];\n        this._compare = compare;\n        this._clone = clone;\n        if (typeof duplicatePolicy === \"boolean\")\n            duplicatePolicy = duplicatePolicy ? DuplicatePolicy.Allow : DuplicatePolicy.Retain;\n        this._duplicatePolicy = duplicatePolicy;\n    }\n    /** The number of elements in the array */\n    get length() { return this._array.length; }\n    /** Returns true if the array contains no elements. */\n    get isEmpty() { return 0 === this.length; }\n    /** Returns an iterator over the contents of the array in sorted order, suitable for use in `for-of` loops. */\n    [Symbol.iterator]() { return this._array[Symbol.iterator](); }\n    /**\n     * Looks up the index of an element comparing equal to the specified value using binary search.\n     * @param value The value to search for\n     * @returns the index of the first equivalent element found in the array, or -1 if no such element exists.\n     */\n    indexOf(value) {\n        const bound = this.lowerBound(value);\n        return bound.equal ? bound.index : -1;\n    }\n    /**\n     * Returns true if this array contains at least one value comparing equal to the specified value.\n     * @param value The value to search for\n     * @returns true if an equivalent element exists in the array.\n     */\n    contains(value) {\n        return -1 !== this.indexOf(value);\n    }\n    /**\n     * Looks up an element comparing equal to the specified value using binary search.\n     * @param value The value to search for\n     * @returns the first equivalent element found in the array, or undefined if no such element exists.\n     */\n    findEqual(value) {\n        const index = this.indexOf(value);\n        return -1 !== index ? this._array[index] : undefined;\n    }\n    /** Find an element that compares as equivalent based on some criterion. If multiple elements are equivalent, the specific one returned is unspecified.\n     * As an example, consider a `SortedArray<ModelState>` which uses `ModelState.id` as its ordering criterion. To find a model by its Id,\n     * use `sortedArray.findEquivalent((element) => compareStrings(element.id, modelId))` where `modelId` is an [[Id64String]].\n     * @param criterion A function accepting an element and returning 0 if it compares as equivalent, a negative number if it compares as \"less-than\", or a positive value if it compares as \"greater-than\".\n     * @returns The first element found that meets the criterion, or `undefined` if no elements meet the criterion.\n     * @see [[indexOfEquivalent]].\n     * @public\n     */\n    findEquivalent(criterion) {\n        const index = this.indexOfEquivalent(criterion);\n        return -1 !== index ? this._array[index] : undefined;\n    }\n    /** Find the index of an element that compares as equivalent based on some criterion. If multiple elements are equivalent, the specific one returned is unspecified.\n     * As an example, consider a `SortedArray<ModelState>` which uses `ModelState.id` as its ordering criterion. To find the index of a model by its Id,\n     * use `sortedArray.indexOfEquivalent((element) => compareStrings(element.id, modelId))` where `modelId` is an [[Id64String]].\n     * @param criterion A function accepting an element and returning 0 if it compares as equivalent, a negative number if the element compares as \"less-than\", or a positive value if the element compares as \"greater-than\".\n     * @returns The index of the first element found that meets the criterion, or -1 if no elements meet the criterion.\n     * @public\n     */\n    indexOfEquivalent(criterion) {\n        // NB: Must invert the ordering.\n        const bound = lowerBoundOfEquivalent(this._array, (elem) => 0 - criterion(elem));\n        return bound.equal ? bound.index : -1;\n    }\n    /**\n     * Looks up an element by its index in the array.\n     * @param index The array index\n     * @returns the element corresponding to that position in the array, or undefined if the supplied index exceeds the length of the array.\n     */\n    get(index) { return index < this.length ? this._array[index] : undefined; }\n    /** Apply a function to each element in the array, in sorted order.\n     * @param func The function to be applied.\n     */\n    forEach(func) {\n        for (let i = 0; i < this.length; i++)\n            func(this._array[i]);\n    }\n    /** The equivalent of [Array.slice](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice). */\n    slice(start, end) {\n        const slice = new ReadonlySortedArray(this._compare, this._duplicatePolicy, this._clone);\n        slice._array = this._array.slice(start, end);\n        return slice;\n    }\n    /**\n     * Computes the position at which the specified value should be inserted to maintain sorted order.\n     * @param value The value whose position is to be computed.\n     * @returns an object with 'index' corresponding to the computed position and 'equal' set to true if an equivalent element already exists at that index.\n     */\n    lowerBound(value) { return lowerBound(value, this._array, this._compare); }\n    /** Clears the contents of the sorted array. */\n    _clear() { this._array.length = 0; }\n    /** Extracts the sorted array as a T[] and empties the contents of this ReadonlySortedArray.\n     * @returns the contents of this ReadonlySortedArray as a T[].\n     */\n    _extractArray() {\n        const result = this._array;\n        this._array = [];\n        return result;\n    }\n    /**\n     * Attempts to insert a new value into the array at a position determined by the ordering.\n     * The behavior differs based on the array's [[DuplicatePolicy]]:\n     * If duplicates are **not** permitted, then:\n     *  - If an equivalent element already exists in the array:\n     *    - [[DuplicatePolicy.Retain]]: nothing will be inserted and the index of the existing element will be returned.\n     *    - [[DuplicatePolicy.Replace]]: the input value will overwrite the existing element at the same index and that index will be returned.\n     *  - Otherwise, the element is inserted and its index is returned.\n     * If duplicates **are** permitted, then:\n     *  - The element will be inserted in a correct position based on the sorting criterion;\n     *  - The position of the element relative to other elements comparing as equal to it is unspecified; and\n     *  - The actual index of the newly-inserted element is returned.\n     * If the element is to be inserted, then the supplied value will be passed to the clone function supplied to the constructor and the result will be inserted into the array.\n     * @param value The value to insert\n     * @param onInsert The optional callback method to call if insertion occurs with the inserted value\n     * @returns the index in the array of the newly-inserted value, or, if duplicates are not permitted and an equivalent value already exists, the index of the equivalent value.\n     */\n    _insert(value, onInsert) {\n        const bound = this.lowerBound(value);\n        if (bound.equal) {\n            switch (this._duplicatePolicy) {\n                case DuplicatePolicy.Retain:\n                    return bound.index;\n                case DuplicatePolicy.Replace:\n                    this._array[bound.index] = this._clone(value);\n                    if (onInsert)\n                        onInsert(value);\n                    return bound.index;\n            }\n        }\n        this._array.splice(bound.index, 0, this._clone(value));\n        if (undefined !== onInsert)\n            onInsert(value);\n        return bound.index;\n    }\n    /**\n     * Removes the first occurrence of a value comparing equal to the specified value from the array.\n     * @param value The value of the element to delete\n     * @returns the index of the deleted value, or -1 if no such element exists.\n     */\n    _remove(value) {\n        const bound = this.lowerBound(value);\n        if (bound.equal) {\n            this._array.splice(bound.index, 1);\n            return bound.index;\n        }\n        else {\n            return -1;\n        }\n    }\n}\n/**\n * Maintains an array of some type T in sorted order. The ordering is specified by a function supplied\n * by the user.\n * By default, only unique elements are permitted; attempting to insert a new element that compares\n * as equal to an element already in the array will not modify the contents of the array.\n *\n * This allows a SortedArray<T> to behave like a Set<T> where T is an object and equality is determined\n * by some criterion other than object identity.\n *\n * Because the array is always sorted, querying for the presence of an element is performed using binary\n * search, which is more efficient than a linear search for reasonably large arrays.\n *\n * The user can also specify how the SortedArray takes ownership of inserted values, e.g., by cloning them.\n *\n * The comparison function must meet the following criteria, given 'lhs' and 'rhs' of type T:\n *  - If lhs is equal to rhs, returns 0\n *  - If lhs is less than rhs, returns a negative value\n *  - If lhs is greater than rhs, returns a positive value\n *  - If compare(lhs, rhs) returns 0, then compare(rhs, lhs) must also return 0\n *  - If compare(lhs, rhs) returns a negative value, then compare(rhs, lhs) must return a positive value, and vice versa.\n *\n * Modifying an element in a way that affects the comparison function will produce unpredictable results, the\n * most likely of which is that the array will cease to be sorted.\n * @public\n */\nexport class SortedArray extends ReadonlySortedArray {\n    /**\n     * Construct a new SortedArray<T>.\n     * @param compare The function used to compare elements within the array.\n     * @param duplicatePolicy Policy for handling attempts to insert a value when an equivalent value already exists. If the input is a boolean, then `true` indicates [[DuplicatePolicy.Allow]], and `false` indicates [[DuplicatePolicy.Retain]].\n     * @param clone The function invoked to clone a new element for insertion into the array. The default implementation simply returns its input.\n     */\n    constructor(compare, duplicatePolicy = false, clone = shallowClone) {\n        super(compare, duplicatePolicy, clone);\n    }\n    /** Clears the contents of the sorted array. */\n    clear() { this._clear(); }\n    /** Extracts the sorted array as a T[] and empties the contents of this SortedArray.\n     * @returns the contents of this SortedArray as a T[].\n     */\n    extractArray() { return this._extractArray(); }\n    /**\n     * Attempts to insert a new value into the array at a position determined by the ordering.\n     * The behavior differs based on whether or not duplicate elements are permitted.\n     * If duplicates are **not** permitted, then:\n     *  - If an equivalent element already exists in the array, nothing will be inserted and the index of the existing element will be returned.\n     *  - Otherwise, the element is inserted and its index is returned.\n     * If duplicates **are** permitted, then:\n     *  - The element will be inserted in a correct position based on the sorting criterion;\n     *  - The position of the element relative to other elements comparing as equal to it is unspecified; and\n     *  - The actual index of the newly-inserted element is returned.\n     * If the element is to be inserted, then the supplied value will be passed to the clone function supplied to the constructor and the result will be inserted into the array.\n     * @param value The value to insert\n     * @param onInsert The optional callback method to call if insertion occurs with the inserted value\n     * @returns the index in the array of the newly-inserted value, or, if duplicates are not permitted and an equivalent value already exists, the index of the equivalent value.\n     */\n    insert(value, onInsert) { return this._insert(value, onInsert); }\n    /**\n     * Removes the first occurrence of a value comparing equal to the specified value from the array.\n     * @param value The value of the element to delete\n     * @returns the index of the deleted value, or -1 if no such element exists.\n     */\n    remove(value) { return this._remove(value); }\n    /** The equivalent of [Array.slice](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice). */\n    slice(start, end) {\n        const slice = new SortedArray(this._compare, this._duplicatePolicy, this._clone);\n        slice._array = this._array.slice(start, end);\n        return slice;\n    }\n}\n//# sourceMappingURL=SortedArray.js.map",
      "start": 1693508120422,
      "end": 1693508120480,
      "sourcemaps": null
    }
  ]
}
