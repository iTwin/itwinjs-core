{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/SolarShadows.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module DisplayStyles\n */\nimport { JsonUtils } from \"@itwin/core-bentley\";\nimport { ColorByName } from \"./ColorByName\";\nimport { ColorDef } from \"./ColorDef\";\nimport { RgbColor } from \"./RgbColor\";\nconst defaultColor = RgbColor.fromColorDef(ColorDef.fromTbgr(ColorByName.grey));\n/** Settings controlling display of solar shadows for a [[DisplayStyle3dSettings]].\n * Solar shadows are imposed as a color scaling on geometry occluded from solar lighting.\n * @public\n */\nclass SolarShadowSettings {\n    constructor(props) {\n        this.bias = JsonUtils.asDouble(props.bias, 0.001);\n        if (undefined === props.color || null === props.color)\n            this.color = defaultColor;\n        else\n            this.color = RgbColor.fromColorDef(ColorDef.fromJSON(props.color));\n    }\n    static fromJSON(props) {\n        return props ? new SolarShadowSettings(props) : this.defaults;\n    }\n    toJSON() {\n        const defaults = SolarShadowSettings.defaults;\n        if (this.equals(defaults))\n            return undefined;\n        const props = {};\n        if (!this.color.equals(defaults.color))\n            props.color = this.color.toColorDef().toJSON();\n        if (this.bias !== defaults.bias)\n            props.bias = this.bias;\n        return props;\n    }\n    equals(rhs) {\n        return this.bias === rhs.bias && this.color.equals(rhs.color);\n    }\n    /** Create a copy of these settings.\n     * @param changedProps Any property explicitly defined will be overridden in the copy.\n     * @returns A settings object equivalent to this one except for any properties explicitly overridden by `changedProps`.\n     */\n    clone(changedProps) {\n        if (!changedProps)\n            return this;\n        const props = this.toJSON() ?? {};\n        if (changedProps.color)\n            props.color = changedProps.color;\n        if (undefined !== changedProps.bias)\n            props.bias = changedProps.bias;\n        return SolarShadowSettings.fromJSON(props);\n    }\n}\nSolarShadowSettings.defaults = new SolarShadowSettings({});\nexport { SolarShadowSettings };\n//# sourceMappingURL=SolarShadows.js.map",
      "start": 1693508120757,
      "end": 1693508120813,
      "sourcemaps": null
    }
  ]
}
