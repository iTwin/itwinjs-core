{
  "resolvedId": "D:/hub2023A/itwinjs-core/common/temp/node_modules/.pnpm/@itwin+imodels-client-management@3.1.0/node_modules/@itwin/imodels-client-management/lib/esm/base/internal/UtilityFunctions.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n * Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n * See LICENSE.md in the project root for license terms and full copyright notice.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Constants } from \"../../Constants\";\r\nexport async function sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\nexport async function waitForCondition(params) {\r\n    var _a;\r\n    const sleepPeriodInMs = Constants.time.sleepPeriodInMs;\r\n    const timeOutInMs = (_a = params.timeOutInMs) !== null && _a !== void 0 ? _a : Constants.time.iModelInitiazationTimeOutInMs;\r\n    for (let retries = Math.ceil(timeOutInMs / sleepPeriodInMs); retries > 0; --retries) {\r\n        const isTargetStateReached = await params.conditionToSatisfy();\r\n        if (isTargetStateReached)\r\n            return;\r\n        await sleep(sleepPeriodInMs);\r\n    }\r\n    const timeoutError = params.timeoutErrorFactory();\r\n    throw timeoutError;\r\n}\r\n//# sourceMappingURL=UtilityFunctions.js.map",
      "start": 1693508124023,
      "end": 1693508124111,
      "sourcemaps": null
    }
  ]
}
