{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/RealityDataSourceContextShareImpl.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tiles\n */\nimport { request } from \"./request/Request\";\nimport { assert, Logger } from \"@itwin/core-bentley\";\nimport { RealityDataFormat, RealityDataProvider } from \"@itwin/core-common\";\nimport { FrontendLoggerCategory } from \"./common/FrontendLoggerCategory\";\nimport { IModelApp } from \"./IModelApp\";\nimport { OPCFormatInterpreter, ThreeDTileFormatInterpreter } from \"./tile/internal\";\n/** This class provides access to the reality data provider services.\n * It encapsulates access to a reality data weiter it be from local access, http or ProjectWise Context Share.\n * The key provided at the creation determines if this is ProjectWise Context Share reference.\n * If not then it is considered local (ex: C:\\temp\\TileRoot.json) or plain http access (http://someserver.com/data/TileRoot.json)\n * There is a one to one relationship between a reality data and the instances of present class.\n* @internal\n*/\nexport class RealityDataSourceContextShareImpl {\n    /** Construct a new reality data source.\n     * @param props JSON representation of the reality data source\n     */\n    constructor(props) {\n        this._isUrlResolved = false;\n        /** For use by all Reality Data. For RD stored on PW Context Share, represents the portion from the root of the Azure Blob Container*/\n        this._baseUrl = \"\";\n        // this implementaiton is specific to ContextShare provider\n        assert(props.sourceKey.provider === RealityDataProvider.ContextShare);\n        this.key = props.sourceKey;\n        this._isUrlResolved = false;\n    }\n    /**\n     * Create an instance of this class from a source key and iTwin context/\n     */\n    static async createFromKey(sourceKey, iTwinId) {\n        if (sourceKey.provider !== RealityDataProvider.ContextShare)\n            return undefined;\n        const rdSource = new RealityDataSourceContextShareImpl({ sourceKey });\n        let tilesetUrl;\n        try {\n            await rdSource.queryRealityData(iTwinId);\n            tilesetUrl = await rdSource.getServiceUrl(iTwinId);\n        }\n        catch (e) {\n        }\n        return (tilesetUrl !== undefined) ? rdSource : undefined;\n    }\n    get isContextShare() {\n        return (this.key.provider === RealityDataProvider.ContextShare);\n    }\n    /**\n     * Returns Reality Data if available\n    */\n    get realityData() {\n        return this._rd;\n    }\n    get realityDataId() {\n        const realityDataId = this.key.id;\n        return realityDataId;\n    }\n    /**\n     * Returns Reality Data type if available\n     */\n    get realityDataType() {\n        return this._rd?.type;\n    }\n    /**\n     * Query Reality Data from provider\n     */\n    async queryRealityData(iTwinId) {\n        if (!this._rd) {\n            const token = await IModelApp.getAccessToken();\n            if (token && this.realityDataId) {\n                if (undefined === IModelApp.realityDataAccess)\n                    throw new Error(\"Missing an implementation of RealityDataAccess on IModelApp, it is required to access reality data. Please provide an implementation to the IModelApp.startup using IModelAppOptions.realityDataAccess.\");\n                this._rd = await IModelApp.realityDataAccess.getRealityData(token, iTwinId, this.realityDataId);\n                // A reality data that has not root document set should not be considered.\n                const rootDocument = this._rd.rootDocument ?? \"\";\n                this.setBaseUrl(rootDocument);\n            }\n        }\n    }\n    // This is to set the root url from the provided root document path.\n    // If the root document is stored on PW Context Share then the root document property of the Reality Data is provided,\n    // otherwise the full path to root document is given.\n    // The base URL contains the base URL from which tile relative path are constructed.\n    // The tile's path root will need to be reinserted for child tiles to return a 200\n    setBaseUrl(url) {\n        const urlParts = url.split(\"/\");\n        urlParts.pop();\n        if (urlParts.length === 0)\n            this._baseUrl = \"\";\n        else\n            this._baseUrl = `${urlParts.join(\"/\")}/`;\n    }\n    /**\n     * Gets a tileset's app data json\n     * @param name name or path of tile\n     * @returns app data json object\n     * @internal\n     */\n    async getRealityDataTileJson(accessToken, name, realityData) {\n        const url = await realityData.getBlobUrl(accessToken, name);\n        return request(url.toString(), \"json\");\n    }\n    /**\n     * This method returns the URL to access the actual 3d tiles from the service provider.\n     * @returns string containing the URL to reality data.\n     */\n    async getServiceUrl(iTwinId) {\n        // If url was not resolved - resolve it\n        if (!this._isUrlResolved) {\n            const rdSourceKey = this.key;\n            // we need to resolve tilesetURl from realityDataId and iTwinId\n            if (undefined === IModelApp.realityDataAccess)\n                throw new Error(\"Missing an implementation of RealityDataAccess on IModelApp, it is required to access reality data. Please provide an implementation to the IModelApp.startup using IModelAppOptions.realityDataAccess.\");\n            try {\n                const resolvedITwinId = iTwinId ? iTwinId : rdSourceKey.iTwinId;\n                this._tilesetUrl = await IModelApp.realityDataAccess.getRealityDataUrl(resolvedITwinId, rdSourceKey.id);\n                this._isUrlResolved = true;\n            }\n            catch (e) {\n                const errMsg = `Error getting URL from ContextShare using realityDataId=${rdSourceKey.id} and iTwinId=${iTwinId}`;\n                Logger.logError(FrontendLoggerCategory.RealityData, errMsg);\n            }\n        }\n        return this._tilesetUrl;\n    }\n    async getRootDocument(_iTwinId) {\n        const token = await IModelApp.getAccessToken();\n        if (token) {\n            const realityData = this.realityData;\n            if (!realityData)\n                throw new Error(`Reality Data not defined`);\n            if (!realityData.rootDocument)\n                throw new Error(`Root document not defined for reality data: ${realityData.id}`);\n            return this.getRealityDataTileJson(token, realityData.rootDocument, realityData);\n        }\n    }\n    /**\n     * Gets tile content\n     * @param name name or path of tile\n     * @returns array buffer of tile content\n     */\n    async getRealityDataTileContent(accessToken, name, realityData) {\n        const url = await realityData.getBlobUrl(accessToken, name);\n        return request(url.toString(), \"arraybuffer\");\n    }\n    /**\n     * Returns the tile content. The path to the tile is relative to the base url of present reality data whatever the type.\n     */\n    async getTileContent(name) {\n        const token = await IModelApp.getAccessToken();\n        const tileUrl = this._baseUrl + name;\n        if (this.realityData) {\n            return this.getRealityDataTileContent(token, tileUrl, this.realityData);\n        }\n        return undefined;\n    }\n    /**\n     * Returns the tile content in json format. The path to the tile is relative to the base url of present reality data whatever the type.\n     */\n    async getTileJson(name) {\n        const token = await IModelApp.getAccessToken();\n        const tileUrl = this._baseUrl + name;\n        if (this.realityData) {\n            return this.getRealityDataTileJson(token, tileUrl, this.realityData);\n        }\n        return undefined;\n    }\n    getTileContentType(url) {\n        return url.endsWith(\"json\") ? \"tileset\" : \"tile\";\n    }\n    /**\n     * Gets spatial location and extents of this reality data source\n     * @returns spatial location and extents\n     * @internal\n     */\n    async getSpatialLocationAndExtents() {\n        let spatialLocation;\n        const fileType = this.realityDataType;\n        // Mapping Resource are not currenlty supported\n        if (fileType === \"OMR\")\n            return undefined;\n        if (this.key.format === RealityDataFormat.ThreeDTile) {\n            const rootDocument = await this.getRootDocument(undefined);\n            spatialLocation = ThreeDTileFormatInterpreter.getSpatialLocationAndExtents(rootDocument);\n        }\n        else if (this.key.format === RealityDataFormat.OPC) {\n            if (this.realityData === undefined)\n                return undefined;\n            const token = await IModelApp.getAccessToken();\n            const docRootName = this.realityData.rootDocument;\n            if (!docRootName)\n                return undefined;\n            const blobUrl = await this.realityData.getBlobUrl(token, docRootName);\n            if (!blobUrl)\n                return undefined;\n            const blobStringUrl = blobUrl.toString();\n            const filereader = await OPCFormatInterpreter.getFileReaderFromBlobFileURL(blobStringUrl);\n            spatialLocation = await OPCFormatInterpreter.getSpatialLocationAndExtents(filereader);\n        }\n        return spatialLocation;\n    }\n    /**\n     * Gets information to identify the product and engine that create this reality data\n     * Will return undefined if cannot be resolved\n     * @returns information to identify the product and engine that create this reality data\n     * @alpha\n     */\n    async getPublisherProductInfo() {\n        let publisherInfo;\n        if (this.key.format === RealityDataFormat.ThreeDTile) {\n            const rootDocument = await this.getRootDocument(undefined);\n            publisherInfo = ThreeDTileFormatInterpreter.getPublisherProductInfo(rootDocument);\n        }\n        return publisherInfo;\n    }\n}\n//# sourceMappingURL=RealityDataSourceContextShareImpl.js.map",
      "start": 1693508122015,
      "end": 1693508122172,
      "sourcemaps": null
    }
  ]
}
