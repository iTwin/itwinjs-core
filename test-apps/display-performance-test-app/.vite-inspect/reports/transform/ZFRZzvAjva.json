{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/geometry/lib/esm/geometry3d/Plane3d.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module CartesianGeometry\n */\nimport { Geometry } from \"../Geometry\";\nimport { Point3d, Vector3d } from \"./Point3dVector3d\";\n/**\n * Plane3d is the abstract base class for multiple 3d plane representations:\n * * [[Plane3dByOriginAndUnitNormal]] -- plane defined by origin and normal, with no preferred in-plane directions\n * * [[Plane3dByOriginAndVectors]] -- plane defined by origin and 2 vectors in the plane, with normal implied by the vectors' cross product\n * * [[Point4d]] -- homogeneous form of xyzw plane.\n * * [[ClipPlane]] -- implicit plane with additional markup as used by compound clip structures such as [[ConvexClipPlaneSet]] and [[UnionOfConvexClipPlaneSets]]\n *\n * As an abstract base class, Plane3d demands that its derived classes implement queries to answer questions\n * about the plane's normal and the altitude of points above or below the plane.  (Altitude is measured perpendicular to the plane.)\n * These abstract methods are:\n * * altitude(Point3d), altitudeXYZ(x,y,z), and altitudeXYZW(Point4d) -- evaluate altitude\n * * normalX(), normalY(), normalZ() -- return components of the plane's normal vector.\n * * velocity(Vector3d), velocityXYZ(x,y,z) -- return dot product of the input vector with the plane normal.\n * * projectPointToPlane (spacePoint: Point3d) -- return projection of spacePoint into the plane.\n *\n * The Plane3d base class also provides implementations of several queries which it can implement by calling the abstract queries.\n * * Derived classes may choose to override these default implementations using private knowledge of what they have stored.\n * * isPointInPlane(spacePoint, tolerance?) -- test if spacePoint is in the plane with tolerance.  Default tolerance is small metric distance\n * * classifyAltitude (spacePoint, tolerance?), classifyAltitudeXYZ (x,y,z,tolerance?) -- return -1,0,1 indicating if spacePoint's altitude\n *     is negative, near zero, or positive.\n *\n * Notes about scaling and signs in methods that compute altitudes, normal components and velocities:\n * * The term \"altitude\" indicates a _signed_ distance from the plane.\n *   * altitude zero is _on_ the plane\n *   * positive altitudes are on one side\n *   * negatives are on the other.\n *  * Altitude values and normal components are not strictly required to be true cartesian distance.   If the calling code happens to use \"distance scaled by 1000X\" it\n *     understands that it can be OK for its plane implementation to have that scaling.\n *  * By convention, derived classes whose definitions (normals and vectors in plane) are simple cartesian are expected\n *    to return true distances.  This applies to:\n *    * [[Plane3dByOriginAndUnitNormal]] and [[ClipPlane]]\n *       * These maintain a stored unit normal so the altitude calculations are inherently true cartesian distance.\n *    * [[Plane3dByOriginAndVectors]] -- this is a bit expensive because\n *       * the normal is the cross product of the defining vectors.\n *       * that cross product is not typically unit\n *       * normalization adds to the cost of computing off-plane distances\n *       * Since a main purpose of using this class is often to navigate a skewed, non-unit grid, occasional off-plane queries are not likely to be important.\n *  * \"4 dimensional\" (homogeneous coordinate planes) ([[Point4d]] and [[PlaneByOriginAndVectors4d]])\n *     * typically do _not_ force their coefficients to any distance-based normalization\n *     * are typically used for calculations in spaces with skewing effects do to perspective, and true distances are not required.\n *  * In all classes, the `weightedAltitude` method is free to be scaled distance.\n * @public\n */\nexport class Plane3d {\n    /** Returns true if spacePoint is within distance tolerance of the plane. */\n    isPointInPlane(spacePoint, tolerance = Geometry.smallMetricDistance) {\n        return Math.abs(this.altitude(spacePoint)) <= tolerance;\n    }\n    /**\n     * Return a value -1, 0, 1 giving a signed indicator of whether the toleranced altitude of the point is\n     * negative, near zero, or positive.\n     *\n     */\n    classifyAltitude(point, tolerance = Geometry.smallMetricDistance) {\n        return Geometry.split3Way01(this.altitude(point), tolerance);\n    }\n    /**\n     * Return a value -1, 0, 1 giving a signed indicator of whether the toleranced altitude of x,y,z is\n     * negative, near zero, or positive.\n     *\n     */\n    classifyAltitudeXYZ(x, y, z, tolerance = Geometry.smallMetricDistance) {\n        return Geometry.split3Way01(this.altitudeXYZ(x, y, z), tolerance);\n    }\n    /**\n     * Return the unit normal for the plane.\n     * * The abstract base class implementation assembles the normal from normalX, normalY, normalZ calls.\n     * * Derived classes should (but are not required to) override for maximum efficiency if the separate normal calls\n     * cause repeated normalization.\n     * @param result\n     */\n    getUnitNormal(result) {\n        return Vector3d.createNormalized(this.normalX(), this.normalY(), this.normalZ(), result);\n    }\n    /**\n     * Return any point on the plane.\n     * * Default implementation projects the origin (0,0,0) to the plane.\n     * * Classes that have a preferred origin for their plane should override.\n     * * Classes with a purely implicit equation of their plane can accept the default implementation\n     */\n    getAnyPointOnPlane(result) {\n        return this.projectPointToPlane(Point3d.create(0, 0, 0), result);\n    }\n}\n//# sourceMappingURL=Plane3d.js.map",
      "start": 1693508122328,
      "end": 1693508122476,
      "sourcemaps": null
    }
  ]
}
