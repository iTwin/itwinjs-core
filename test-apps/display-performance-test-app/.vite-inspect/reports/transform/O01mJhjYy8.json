{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/ClipStyle.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Views\n */\nimport { assert, JsonUtils } from \"@itwin/core-bentley\";\nimport { RgbColor } from \"./RgbColor\";\nimport { HiddenLine } from \"./HiddenLine\";\nimport { FeatureAppearance } from \"./FeatureSymbology\";\n/** As part of a [[ClipStyle]], describes how section-cut graphics should be displayed.\n * @note Section-cut graphics are only produced if [[ClipStyle.produceCutGeometry]] is `true`.\n * @public\n */\nclass CutStyle {\n    constructor(viewflags, hiddenLine, appearance) {\n        this.viewflags = viewflags ?? {};\n        if (hiddenLine && !hiddenLine.matchesDefaults)\n            this.hiddenLine = hiddenLine;\n        if (appearance && !appearance.matchesDefaults)\n            this.appearance = appearance;\n    }\n    /** Create a CutStyle from its components. */\n    static create(viewflags, hiddenLine, appearance) {\n        if ((viewflags && JsonUtils.isNonEmptyObject(viewflags)) || (hiddenLine && !hiddenLine.matchesDefaults) || (appearance && !appearance.matchesDefaults))\n            return new CutStyle(viewflags, hiddenLine, appearance);\n        return this.defaults;\n    }\n    static fromJSON(props) {\n        if (JsonUtils.isNonEmptyObject(props)) {\n            const viewflags = { ...props?.viewflags };\n            const hiddenLine = props?.hiddenLine ? HiddenLine.Settings.fromJSON(props.hiddenLine) : undefined;\n            const appearance = props?.appearance ? FeatureAppearance.fromJSON(props.appearance) : undefined;\n            return this.create(viewflags, hiddenLine, appearance);\n        }\n        else {\n            return this.defaults;\n        }\n    }\n    /** Return JSON representation. The representation is `undefined` if this style matches the default style. */\n    toJSON() {\n        if (this.matchesDefaults)\n            return undefined;\n        const props = {};\n        if (JsonUtils.isNonEmptyObject(this.viewflags))\n            props.viewflags = this.viewflags;\n        if (this.hiddenLine && !this.hiddenLine.matchesDefaults)\n            props.hiddenLine = this.hiddenLine?.toJSON();\n        if (this.appearance && !this.appearance.matchesDefaults)\n            props.appearance = this.appearance.toJSON();\n        return props;\n    }\n    /** Returns true if this style matches the default style - that is, it overrides none of the view's settings. */\n    get matchesDefaults() {\n        if (this === CutStyle.defaults)\n            return true;\n        return !JsonUtils.isNonEmptyObject(this.viewflags) && (!this.hiddenLine || this.hiddenLine.matchesDefaults) && (!this.appearance || this.appearance.matchesDefaults);\n    }\n}\n/** The default CutStyle, configured to draw the section-cut graphics using the view's settings, with no overrides. */\nCutStyle.defaults = new CutStyle();\nexport { CutStyle };\n/** Describes symbology and behavior applied to a [ClipVector]($core-geometry) when applied to a [ViewState]($frontend) or [[ModelClipGroup]].\n * @see [[DisplayStyleSettings.clipStyle]].\n * @public\n */\nclass ClipStyle {\n    constructor(produceCutGeometry, cutStyle, inside, outside) {\n        this.produceCutGeometry = produceCutGeometry;\n        this.cutStyle = cutStyle;\n        this.insideColor = inside;\n        this.outsideColor = outside;\n    }\n    /** Create a style from its components. */\n    static create(produceCutGeometry, cutStyle, insideColor, outsideColor) {\n        if (!produceCutGeometry && cutStyle.matchesDefaults && !insideColor && !outsideColor)\n            return this.defaults;\n        return new ClipStyle(produceCutGeometry, cutStyle, insideColor, outsideColor);\n    }\n    static fromJSON(props) {\n        if (JsonUtils.isNonEmptyObject(props)) {\n            const produceCutGeometry = props.produceCutGeometry ?? false;\n            const cutStyle = CutStyle.fromJSON(props.cutStyle);\n            const inside = props.insideColor ? RgbColor.fromJSON(props.insideColor) : undefined;\n            const outside = props.outsideColor ? RgbColor.fromJSON(props.outsideColor) : undefined;\n            return this.create(produceCutGeometry, cutStyle, inside, outside);\n        }\n        return this.defaults;\n    }\n    /** The JSON representation of this style. It is `undefined` if this style matches the defaults. */\n    toJSON() {\n        if (this.matchesDefaults)\n            return undefined;\n        const props = {};\n        if (this.produceCutGeometry)\n            props.produceCutGeometry = true;\n        const cutStyle = this.cutStyle.toJSON();\n        if (cutStyle) {\n            assert(!this.cutStyle.matchesDefaults);\n            props.cutStyle = cutStyle;\n        }\n        if (this.insideColor)\n            props.insideColor = this.insideColor.toJSON();\n        if (this.outsideColor)\n            props.outsideColor = this.outsideColor.toJSON();\n        return props;\n    }\n    /** Returns true if this style matches the [[ClipStyle.defaults]] - that is, it overrides no settings from the view. */\n    get matchesDefaults() {\n        if (this === ClipStyle.defaults)\n            return true;\n        return !this.produceCutGeometry && !this.insideColor && !this.outsideColor && this.cutStyle.matchesDefaults;\n    }\n}\n/** The default style, which overrides none of the view's settings. */\nClipStyle.defaults = new ClipStyle(false, CutStyle.defaults, undefined, undefined);\nexport { ClipStyle };\n//# sourceMappingURL=ClipStyle.js.map",
      "start": 1693508120483,
      "end": 1693508120521,
      "sourcemaps": null
    }
  ]
}
