{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/ViewPose.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Views\n */\nimport { Matrix3d, Point3d, Vector3d } from \"@itwin/core-geometry\";\nimport { ViewState2d, ViewState3d } from \"./ViewState\";\n/** The \"pose\" for a [View]($docs/learning/frontend/views#viewstate-parameters) describing the viewed area or volume, depending upon whether\n * the view is 2d or 3d.\n * @see [[ViewState.savePose]] to extract a pose from a view and [[ViewState.applyPose]] to apply a pose to a view.\n * @note a ViewPose is immutable.\n * @public\n * @extensions\n */\nexport class ViewPose {\n    /** Computes the center of the viewed volume. */\n    get center() {\n        const delta = this.rotation.multiplyTransposeVector(this.extents);\n        return this.origin.plusScaled(delta, 0.5);\n    }\n    /** Returns the target point of the view. This is the same as [[center]] unless [[cameraOn]] is `true`. */\n    get target() { return this.center; }\n    /** Computes the Z vector of the [[rotation]] matrix. */\n    get zVec() { return this.rotation.getRow(2); }\n    constructor(cameraOn) {\n        this.cameraOn = cameraOn;\n    }\n}\n/** The \"pose\" for a [[ViewState3d]], including information about the view's [Camera]($common) if it is enabled.\n * @public\n * @extensions\n */\nexport class ViewPose3d extends ViewPose {\n    /** Construct a pose from the specified 3d view. */\n    constructor(view) {\n        super(view.isCameraOn);\n        this.origin = view.origin.clone();\n        this.extents = view.extents.clone();\n        this.rotation = view.rotation.clone();\n        this.camera = view.camera.clone();\n    }\n    /** See [[ViewPose.target]]. */\n    get target() {\n        return this.cameraOn ? this.camera.eye.plusScaled(this.rotation.getRow(2), -1.0 * this.camera.focusDist) : this.center;\n    }\n    /** See [[ViewPose.equal]]. */\n    equal(other) {\n        if (!(other instanceof ViewPose3d))\n            return false;\n        return this.cameraOn === other.cameraOn &&\n            this.origin.isAlmostEqual(other.origin) &&\n            this.extents.isAlmostEqual(other.extents) &&\n            this.rotation.isAlmostEqual(other.rotation) &&\n            (!this.cameraOn || this.camera.equals(other.camera));\n    }\n    /** See [[ViewPose.equalState]]. */\n    equalState(view) {\n        if (!(view instanceof ViewState3d))\n            return false;\n        return this.cameraOn === view.isCameraOn &&\n            this.origin.isAlmostEqual(view.origin) &&\n            this.extents.isAlmostEqual(view.extents) &&\n            this.rotation.isAlmostEqual(view.rotation) &&\n            (!this.cameraOn || this.camera.equals(view.camera));\n    }\n}\n/** The \"pose\" for a [[ViewState2d]].\n * @public\n * @extensions\n */\nexport class ViewPose2d extends ViewPose {\n    /** Construct a pose from the specified 2d view. */\n    constructor(view) {\n        super(false);\n        this.origin2d = view.origin.clone();\n        this.delta = view.delta.clone();\n        this.angle = view.angle.clone();\n    }\n    /** See [[ViewPose.equal]]. */\n    equal(other) {\n        if (!(other instanceof ViewPose2d))\n            return false;\n        return this.origin2d.isAlmostEqual(other.origin) &&\n            this.delta.isAlmostEqual(other.delta) &&\n            this.angle.isAlmostEqualNoPeriodShift(other.angle);\n    }\n    /** See [[ViewPose.equalState]]. */\n    equalState(view) {\n        if (!(view instanceof ViewState2d))\n            return false;\n        return this.origin2d.isAlmostEqual(view.origin) &&\n            this.delta.isAlmostEqual(view.delta) &&\n            this.angle.isAlmostEqualNoPeriodShift(view.angle);\n    }\n    /** See [[ViewPose.origin]]. */\n    get origin() {\n        return new Point3d(this.origin2d.x, this.origin2d.y);\n    }\n    /** See [[ViewPose.extents]]. */\n    get extents() {\n        return new Vector3d(this.delta.x, this.delta.y);\n    }\n    /** See [[ViewPose.rotation]]. */\n    get rotation() {\n        return Matrix3d.createRotationAroundVector(Vector3d.unitZ(), this.angle);\n    }\n}\n//# sourceMappingURL=ViewPose.js.map",
      "start": 1693508119302,
      "end": 1693508119447,
      "sourcemaps": null
    }
  ]
}
