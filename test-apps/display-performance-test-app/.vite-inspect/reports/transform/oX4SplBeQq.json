{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/rpc/web/OpenAPI.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module RpcInterface\n */\nimport { RpcOperation } from \"../core/RpcOperation\";\n/** An OpenAPI-compatible description of an RPC protocol.\n * @internal\n */\nexport class RpcOpenAPIDescription {\n    /** The OpenAPI paths object for the protocol. */\n    get paths() {\n        const paths = {};\n        this.protocol.configuration.interfaces().forEach((definition) => {\n            RpcOperation.forEach(definition, (operation) => {\n                const path = this.protocol.supplyPathForOperation(operation, undefined);\n                paths[path] = this.generateDescription(operation);\n            });\n        });\n        return paths;\n    }\n    /** An OpenAPI 3.0 (Swagger) description of the RESTful API that is exposed through the protocol. */\n    get document() {\n        return {\n            openapi: \"3.0.0\",\n            info: this.protocol.info,\n            paths: this.paths,\n        };\n    }\n    /** Creates an OpenAPI description of an RPC protocol. */\n    constructor(protocol) {\n        this.protocol = protocol;\n    }\n    /** Converts to JSON. */\n    toJSON() {\n        return this.document;\n    }\n    generateDescription(operation) {\n        const requestContent = { \"application/json\": { schema: { type: \"array\" } } };\n        const responseContent = { \"application/json\": { schema: { type: \"object\" } } };\n        const description = {};\n        description.head = {\n            requestBody: { content: requestContent, required: true },\n            responses: {\n                200: { description: \"Success\", content: responseContent },\n                default: { description: \"Error\", content: responseContent },\n            },\n        };\n        const parameters = this.protocol.supplyPathParametersForOperation(operation);\n        if (parameters.length)\n            description.parameters = parameters;\n        return description;\n    }\n}\n//# sourceMappingURL=OpenAPI.js.map",
      "start": 1693508120870,
      "end": 1693508120949,
      "sourcemaps": null
    }
  ]
}
