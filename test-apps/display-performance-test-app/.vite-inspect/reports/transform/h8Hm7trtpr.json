{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/webgl/BranchState.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module WebGL\n */\nimport { Transform } from \"@itwin/core-geometry\";\nimport { RenderMode, ViewFlags, } from \"@itwin/core-common\";\nimport { FeatureSymbology } from \"../FeatureSymbology\";\nimport { EdgeSettings } from \"./EdgeSettings\";\n/**\n * Represents a branch node in the scene graph, with associated view flags and transform to be applied to\n * all sub-nodes of the branch.\n * @internal\n */\nexport class BranchState {\n    get transform() { return this._opts.transform; }\n    get viewFlags() { return this._opts.viewFlags; }\n    set viewFlags(vf) { this._opts.viewFlags = vf.normalize(); }\n    get clipVolume() { return this._opts.clipVolume; }\n    get forceViewCoords() { return true === this._opts.forceViewCoords; }\n    get planarClassifier() { return this._opts.planarClassifier; }\n    get textureDrape() { return this._opts.textureDrape; }\n    get edgeSettings() { return this._opts.edgeSettings; }\n    get iModel() { return this._opts.iModel; }\n    get is3d() { return this._opts.is3d; }\n    get frustumScale() { return this._opts.frustumScale; }\n    get appearanceProvider() { return this._opts.appearanceProvider; }\n    get secondaryClassifiers() { return this._opts.secondaryClassifiers; }\n    get realityModelDisplaySettings() { return this._opts.realityModelDisplaySettings; }\n    get viewAttachmentId() { return this._opts.viewAttachmentId; }\n    get symbologyOverrides() {\n        return this._opts.symbologyOverrides;\n    }\n    set symbologyOverrides(ovrs) {\n        this._opts.symbologyOverrides = ovrs;\n    }\n    changeRenderPlan(viewFlags, is3d, hline) {\n        this.viewFlags = viewFlags;\n        this._opts.is3d = is3d;\n        this.edgeSettings.init(hline);\n    }\n    /** Create a BranchState from a Branch. Any properties not explicitly specified by the new Branch are inherited from the previous BranchState. */\n    static fromBranch(prev, branch) {\n        return new BranchState({\n            viewFlags: branch.branch.getViewFlags(prev.viewFlags),\n            transform: prev.transform.multiplyTransformTransform(branch.localToWorldTransform),\n            symbologyOverrides: branch.branch.symbologyOverrides ?? prev.symbologyOverrides,\n            iModel: branch.iModel ?? prev.iModel,\n            planarClassifier: (undefined !== branch.planarClassifier && undefined !== branch.planarClassifier.texture) ? branch.planarClassifier : prev.planarClassifier,\n            textureDrape: branch.textureDrape ?? prev.textureDrape,\n            clipVolume: branch.clips,\n            forceViewCoords: prev.forceViewCoords,\n            edgeSettings: branch.edgeSettings ?? prev.edgeSettings,\n            is3d: branch.frustum?.is3d ?? prev.is3d,\n            frustumScale: branch.frustum?.scale ?? prev.frustumScale,\n            secondaryClassifiers: branch.secondaryClassifiers ?? prev.secondaryClassifiers,\n            // The branch can augment the symbology overrides. If it doesn't want to, allow its parent to do so, unless this branch supplies its own symbology overrides.\n            appearanceProvider: branch.appearanceProvider ?? (branch.branch.symbologyOverrides ? undefined : prev.appearanceProvider),\n            realityModelDisplaySettings: branch.branch.realityModelDisplaySettings ?? prev.realityModelDisplaySettings,\n            viewAttachmentId: branch.viewAttachmentId ?? prev.viewAttachmentId,\n        });\n    }\n    getFeatureAppearance(overrides, elemLo, elemHi, subcatLo, subcatHi, geomClass, modelLo, modelHi, type, animationNodeId) {\n        if (this._opts.appearanceProvider)\n            return this._opts.appearanceProvider.getFeatureAppearance(overrides, elemLo, elemHi, subcatLo, subcatHi, geomClass, modelLo, modelHi, type, animationNodeId);\n        return overrides.getAppearance(elemLo, elemHi, subcatLo, subcatHi, geomClass, modelLo, modelHi, type, animationNodeId);\n    }\n    static createForDecorations() {\n        const vf = new ViewFlags({ renderMode: RenderMode.SmoothShade, lighting: false, whiteOnWhiteReversal: false });\n        return new BranchState({ viewFlags: vf, transform: Transform.createIdentity(), symbologyOverrides: new FeatureSymbology.Overrides(), edgeSettings: EdgeSettings.create(undefined), is3d: true });\n    }\n    withViewCoords() {\n        return new BranchState({ ...this._opts, forceViewCoords: true });\n    }\n    constructor(opts) {\n        if (!opts.frustumScale)\n            opts.frustumScale = { x: 1, y: 1 };\n        this._opts = opts;\n        this._opts.viewFlags = this._opts.viewFlags.normalize();\n    }\n}\n//# sourceMappingURL=BranchState.js.map",
      "start": 1693508121068,
      "end": 1693508121328,
      "sourcemaps": null
    }
  ]
}
