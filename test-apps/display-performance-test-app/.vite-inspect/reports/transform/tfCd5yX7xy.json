{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/bentley/lib/esm/Assert.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Utils\n */\nconst assertionsEnabled = process.env.NODE_ENV === \"development\";\n/** Asserts that a condition is `true` and - when enabled - throws an error if it is not.\n * Assertions are enabled only if the build configuration defines `process.env.NODE_ENV` as `development` at build time.\n *\n * Assertions exist solely to assist programmers during development, in the following ways:\n *  1 They allow the programmer to declare conditions that they believe cannot possibly occur. If such conditions occur, they indicate\n *    a serious flaw in the programmer's logic.\n *  2 They allow the programmer to assure the TypeScript compiler of the truth of some condition that the compiler cannot itself infer.\n *  3 They allow the author of an API to indicate to consumers of the API a serious misuse that should be corrected during development.\n *\n * Assertions should **never** be used to test for conditions - however unlikely - that could be expected to occur at run-time,\n * such as failing to write to a file or load a resource over the network. If the condition asserted ever fails in a production environment,\n * the programmer has made a serious mistake.\n *\n * Note that even when assertions are disabled, calls to `assert` remain in the code and their arguments will be evaluated at run-time.\n * Therefore, if your condition or message requires computation, prefer to pass it as a function to prevent it from being evaluated when assertions are disabled.\n *\n * @param condition The condition that is asserted to be `true`. If the condition is more complex than a simple `boolean` variable, pass it as a function to prevent it from being evaluated when assertions are disabled.\n * @param message An optional description of the condition being asserted, to be included in the exception if `condition` is `false`. If the message must be computed, pass it as a function to prevent it from being evaluated when assertions are disabled. Defaults to \"Programmer Error\".\n * @throws Error containing the specified `message` if `condition` is `false`.\n * @public\n */\nexport function assert(condition, message) {\n    if (!assertionsEnabled)\n        return;\n    if (\"boolean\" !== typeof condition)\n        condition = condition();\n    if (condition)\n        return;\n    message = message ?? \"Programmer Error\";\n    if (\"string\" !== typeof message)\n        message = message();\n    throw new Error(`Assert: ${message}`);\n}\n//# sourceMappingURL=Assert.js.map",
      "start": 1693508120010,
      "end": 1693508120333,
      "sourcemaps": null
    },
    {
      "name": "vite:define",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Utils\n */\nconst assertionsEnabled = \"development\" === \"development\";\n/** Asserts that a condition is `true` and - when enabled - throws an error if it is not.\n * Assertions are enabled only if the build configuration defines `\"development\"` as `development` at build time.\n *\n * Assertions exist solely to assist programmers during development, in the following ways:\n *  1 They allow the programmer to declare conditions that they believe cannot possibly occur. If such conditions occur, they indicate\n *    a serious flaw in the programmer's logic.\n *  2 They allow the programmer to assure the TypeScript compiler of the truth of some condition that the compiler cannot itself infer.\n *  3 They allow the author of an API to indicate to consumers of the API a serious misuse that should be corrected during development.\n *\n * Assertions should **never** be used to test for conditions - however unlikely - that could be expected to occur at run-time,\n * such as failing to write to a file or load a resource over the network. If the condition asserted ever fails in a production environment,\n * the programmer has made a serious mistake.\n *\n * Note that even when assertions are disabled, calls to `assert` remain in the code and their arguments will be evaluated at run-time.\n * Therefore, if your condition or message requires computation, prefer to pass it as a function to prevent it from being evaluated when assertions are disabled.\n *\n * @param condition The condition that is asserted to be `true`. If the condition is more complex than a simple `boolean` variable, pass it as a function to prevent it from being evaluated when assertions are disabled.\n * @param message An optional description of the condition being asserted, to be included in the exception if `condition` is `false`. If the message must be computed, pass it as a function to prevent it from being evaluated when assertions are disabled. Defaults to \"Programmer Error\".\n * @throws Error containing the specified `message` if `condition` is `false`.\n * @public\n */\nexport function assert(condition, message) {\n    if (!assertionsEnabled)\n        return;\n    if (\"boolean\" !== typeof condition)\n        condition = condition();\n    if (condition)\n        return;\n    message = message ?? \"Programmer Error\";\n    if (\"string\" !== typeof message)\n        message = message();\n    throw new Error(`Assert: ${message}`);\n}\n//# sourceMappingURL=Assert.js.map",
      "start": 1693508120333,
      "end": 1693508120333,
      "order": "normal",
      "sourcemaps": null
    }
  ]
}
