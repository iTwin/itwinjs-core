{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/system/runtime/Numbers.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { ALong } from \"./ALong\";\n/**\n * Class Numbers defines the common numerical tools.\n */\n/** @internal */\nclass Numbers {\n    constructor() {\n    }\n    static sqrt(value) {\n        return Math.sqrt(value);\n    }\n    static floor(value) {\n        return Math.floor(value);\n    }\n    static intFloor(value) {\n        return Math.floor(value);\n    }\n    static divInt(value1, value2) {\n        return Math.trunc(value1 / value2);\n    }\n    static intBitsToFloat(value) {\n        Numbers.I32_BUFFER1[0] = value;\n        return Numbers.F32_BUFFER1[0];\n    }\n    static floatToIntBits(value) {\n        Numbers.F32_BUFFER1[0] = value;\n        return Numbers.I32_BUFFER1[0];\n    }\n    static longBitsToDouble(value) {\n        Numbers.I32_BUFFER1[0] = value.getLow();\n        Numbers.I32_BUFFER1[1] = value.getHigh();\n        return Numbers.F64_BUFFER1[0];\n    }\n    static doubleToLongBits(value) {\n        Numbers.F64_BUFFER1[0] = value;\n        return ALong.fromHighLow(Numbers.I32_BUFFER1[1], Numbers.I32_BUFFER1[0]);\n    }\n    static intToDouble(value) {\n        return value;\n    }\n    static doubleToInt(value) {\n        return Math.floor(value);\n    }\n    static getInteger(value, defaultValue) {\n        if (value == undefined)\n            return defaultValue;\n        if (value == null)\n            return defaultValue;\n        if (value.length == 0)\n            return defaultValue;\n        let parsed = parseInt(value);\n        return (Number.isNaN(parsed)) ? defaultValue : parsed;\n    }\n    static getDouble(value, defaultValue) {\n        if (value == undefined)\n            return defaultValue;\n        if (value == null)\n            return defaultValue;\n        if (value.length == 0)\n            return defaultValue;\n        let parsed = parseFloat(value);\n        return (Number.isNaN(parsed)) ? defaultValue : parsed;\n    }\n    static rgbToString(color) {\n        let r = (color >> 16) & 0xFF;\n        let g = (color >> 8) & 0xFF;\n        let b = (color >> 0) & 0xFF;\n        return \"\" + r + \".\" + g + \".\" + b;\n    }\n}\n/** The static byte buffer for number format conversions */\nNumbers.BUFFER1 = new ArrayBuffer(8);\nNumbers.I8_BUFFER1 = new Int8Array(Numbers.BUFFER1);\nNumbers.I32_BUFFER1 = new Int32Array(Numbers.BUFFER1);\nNumbers.F32_BUFFER1 = new Float32Array(Numbers.BUFFER1);\nNumbers.F64_BUFFER1 = new Float64Array(Numbers.BUFFER1);\nexport { Numbers };\n//# sourceMappingURL=Numbers.js.map",
      "start": 1693508125353,
      "end": 1693508125410,
      "sourcemaps": null
    }
  ]
}
