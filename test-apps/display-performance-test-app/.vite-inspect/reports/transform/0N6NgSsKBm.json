{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/webgl/glsl/LookupTable.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module WebGL\n */\nconst computeLUTCoords = `\r\nvec2 computeLUTCoords(float index, vec2 dimensions, vec2 center, float mult) {\r\n  float baseIndex = index*mult;\r\n\r\n  // Fix precision issues wherein mod(x,y) => y instead of 0 when x is multiple of y...\r\n  float epsilon = 0.5 / dimensions.x;\r\n  float yId = floor(baseIndex / dimensions.x + epsilon);\r\n  float xId = baseIndex - dimensions.x * yId; // replaces mod()...\r\n\r\n  return center + vec2(xId/dimensions.x, yId/dimensions.y);\r\n}\r\n`;\nconst computeCoordsTemplate = `\r\nvec2 compute_{LUTNAME}_coords(float index) {\r\n  return computeLUTCoords(index, u_{LUTNAME}Params.xy, g_{LUTNAME}_center, {MULT});\r\n}\r\n`;\nconst initializerTemplate = `\r\n  {LUTSTEPX} = 1.0 / {LUTPARAMS}.x;\r\n  float {LUTSTEPY} = 1.0 / {LUTPARAMS}.y;\r\n  {LUTCENTER} = vec2(0.5*{LUTSTEPX}, 0.5*{LUTSTEPY});\r\n`;\n/** Add support for a lookup table to the vertex shader. Returns the code used to initialize the global variables.\n * @internal\n */\nexport function addLookupTable(sb, lutName, mult = \"1.0\", addInitializer = true) {\n    sb.addFunction(computeLUTCoords);\n    const lutStepX = `g_${lutName}_stepX`;\n    const lutStepY = `${lutName}_stepY`;\n    const lutCenter = `g_${lutName}_center`;\n    const lutParams = `u_${lutName}Params`;\n    sb.addGlobal(lutStepX, 2 /* VariableType.Float */);\n    sb.addGlobal(lutCenter, 3 /* VariableType.Vec2 */);\n    let initializerSpecific = initializerTemplate;\n    initializerSpecific = initializerSpecific.replace(/{LUTSTEPX}/g, lutStepX);\n    initializerSpecific = initializerSpecific.replace(/{LUTSTEPY}/g, lutStepY);\n    initializerSpecific = initializerSpecific.replace(/{LUTCENTER}/g, lutCenter);\n    initializerSpecific = initializerSpecific.replace(/{LUTPARAMS}/g, lutParams);\n    if (addInitializer)\n        sb.addInitializer(initializerSpecific);\n    let computeCoordsSpecific = computeCoordsTemplate;\n    computeCoordsSpecific = computeCoordsSpecific.replace(/{LUTNAME}/g, lutName);\n    computeCoordsSpecific = computeCoordsSpecific.replace(/{MULT}/g, mult);\n    sb.addFunction(computeCoordsSpecific);\n    return initializerSpecific;\n}\n//# sourceMappingURL=LookupTable.js.map",
      "start": 1693508125154,
      "end": 1693508125337,
      "sourcemaps": null
    }
  ]
}
