{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/NativeAppLogger.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module NativeApp\n */\nimport { BentleyError, Logger, LogLevel } from \"@itwin/core-bentley\";\nimport { IpcApp } from \"./IpcApp\";\n/**\n * NativeAppLogger send log message from frontend to backend. It works on native app only.\n * @internal\n */\nclass NativeAppLogger {\n    static flushToBackend() {\n        if (!this._onFlushed && this._messages.length > 0) {\n            this._onFlushed = new Promise(() => this._onFlushed = undefined);\n            const messages = this._messages;\n            this._messages = [];\n            setTimeout(async () => this.flushBucket(messages));\n        }\n    }\n    static async flushBucket(messages) {\n        try {\n            while (messages.length > 0) {\n                const msg = messages.shift();\n                await IpcApp.appFunctionIpc.log(msg.timestamp, msg.level, msg.category, msg.message, { ...msg.metaData });\n            }\n        }\n        finally {\n            // Put back unsent messages.\n            this._messages.unshift(...messages);\n            if (this._messages.length > 0) {\n                this.flushToBackend();\n            }\n            else {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                Promise.resolve(this._onFlushed);\n            }\n        }\n    }\n    static log(level, category, message, metaData) {\n        this._messages.push({ timestamp: Date.now(), level, category, message, metaData: BentleyError.getMetaData(metaData) });\n        this.flushToBackend();\n    }\n    static logError(category, message, metaData) {\n        this.log(LogLevel.Error, category, message, metaData);\n    }\n    static logInfo(category, message, metaData) {\n        this.log(LogLevel.Info, category, message, metaData);\n    }\n    static logTrace(category, message, metaData) {\n        this.log(LogLevel.Trace, category, message, metaData);\n    }\n    static logWarning(category, message, metaData) {\n        this.log(LogLevel.Warning, category, message, metaData);\n    }\n    static async flush() {\n        this.flushToBackend();\n        if (this._onFlushed) {\n            return this._onFlushed;\n        }\n    }\n    static initialize() {\n        const errCb = (category, message, metaData) => this.logError(category, message, metaData);\n        const warnCb = (category, message, metaData) => this.logWarning(category, message, metaData);\n        const infoCb = (category, message, metaData) => this.logInfo(category, message, metaData);\n        const traceCb = (category, message, metaData) => this.logTrace(category, message, metaData);\n        Logger.initialize(errCb, warnCb, infoCb, traceCb);\n    }\n}\nNativeAppLogger._messages = [];\nexport { NativeAppLogger };\n//# sourceMappingURL=NativeAppLogger.js.map",
      "start": 1693508119112,
      "end": 1693508119292,
      "sourcemaps": null
    }
  ]
}
