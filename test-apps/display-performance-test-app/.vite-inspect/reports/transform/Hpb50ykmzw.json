{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/rpc/core/RpcMarshaling.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module RpcInterface\n */\nimport { BentleyStatus, IModelError } from \"../../IModelError\";\n// cspell:ignore unmarshal\n/* eslint-disable deprecation/deprecation */\nfunction isBuffer(val) {\n    return val && typeof (val.constructor) !== \"undefined\" && typeof (val.constructor.isBuffer) === \"function\" && val.constructor.isBuffer(val);\n}\nlet marshalingTarget;\nlet chunkThreshold = 0;\n/** @internal */\nexport var MarshalingBinaryMarker;\n(function (MarshalingBinaryMarker) {\n    function createDefault() {\n        return { isBinary: true, index: 0, size: -1, chunks: 1 };\n    }\n    MarshalingBinaryMarker.createDefault = createDefault;\n})(MarshalingBinaryMarker || (MarshalingBinaryMarker = {}));\n/** @internal */\nexport var RpcSerializedValue;\n(function (RpcSerializedValue) {\n    function create(objects = \"\", data = []) {\n        return { objects, data };\n    }\n    RpcSerializedValue.create = create;\n})(RpcSerializedValue || (RpcSerializedValue = {}));\n/** @internal */\nexport class RpcMarshaling {\n    constructor() { }\n    /** Serializes a value. */\n    static async serialize(protocol, value) {\n        const serialized = RpcSerializedValue.create();\n        if (typeof (value) === \"undefined\") {\n            return serialized;\n        }\n        marshalingTarget = serialized;\n        chunkThreshold = protocol ? protocol.transferChunkThreshold : 0;\n        serialized.objects = JSON.stringify(value, (_key, _value) => WireFormat.marshal(_key, _value));\n        marshalingTarget = undefined;\n        chunkThreshold = 0;\n        return serialized;\n    }\n    /** Deserializes a value. */\n    static deserialize(protocol, value) {\n        if (value.objects === \"\") {\n            return undefined;\n        }\n        marshalingTarget = value;\n        chunkThreshold = protocol ? protocol.transferChunkThreshold : 0;\n        let result;\n        try {\n            result = JSON.parse(value.objects, (_key, _value) => WireFormat.unmarshal(_key, _value));\n        }\n        catch (error) {\n            if (error instanceof SyntaxError)\n                throw new IModelError(BentleyStatus.ERROR, `Invalid JSON: \"${value.objects}\"`);\n            throw error;\n        }\n        marshalingTarget = undefined;\n        chunkThreshold = 0;\n        return result;\n    }\n}\nclass WireFormat {\n    /** JSON.stringify replacer callback. */\n    static marshal(_key, value) {\n        const asBinary = WireFormat.marshalBinary(value);\n        if (asBinary) {\n            return asBinary;\n        }\n        const asError = WireFormat.marshalError(value);\n        if (asError) {\n            return asError;\n        }\n        return value;\n    }\n    /** JSON.parse reviver callback. */\n    static unmarshal(_key, value) {\n        if (typeof (value) === \"object\" && value !== null && value.hasOwnProperty(\"isBinary\") && value.isBinary) {\n            return WireFormat.unmarshalBinary(value);\n        }\n        return value;\n    }\n    static marshalBinary(value) {\n        if (value instanceof Uint8Array || isBuffer(value)) {\n            const marker = { isBinary: true, index: -1, size: value.byteLength, chunks: 1 };\n            if (chunkThreshold && value.byteLength > chunkThreshold) {\n                marker.index = marshalingTarget.data.length;\n                marker.chunks = 0;\n                let cursor = value.byteOffset;\n                const end = cursor + value.byteLength;\n                let chunk = chunkThreshold;\n                for (;;) {\n                    if (cursor >= end) {\n                        break;\n                    }\n                    marshalingTarget.data.push(new Uint8Array(value.buffer, cursor, chunk));\n                    ++marker.chunks;\n                    cursor += chunk;\n                    const consumed = cursor - value.byteOffset;\n                    const remaining = value.byteLength - consumed;\n                    chunk = Math.min(chunkThreshold, remaining);\n                }\n            }\n            else {\n                marker.index = marshalingTarget.data.push(value) - 1;\n            }\n            return marker;\n        }\n        else {\n            return undefined;\n        }\n    }\n    static unmarshalBinary(value) {\n        if (value.index >= marshalingTarget.data.length) {\n            throw new IModelError(BentleyStatus.ERROR, `Cannot unmarshal missing binary value.`);\n        }\n        if (value.chunks === 0) {\n            return new Uint8Array();\n        }\n        else if (value.chunks === 1) {\n            return new Uint8Array(marshalingTarget.data[value.index]);\n        }\n        else {\n            const buffer = new ArrayBuffer(value.size);\n            const view = new Uint8Array(buffer);\n            let cursor = 0;\n            for (let c = 0; c !== value.chunks; ++c) {\n                const chunk = marshalingTarget.data[value.index + c];\n                view.set(chunk, cursor);\n                cursor += chunk.byteLength;\n            }\n            return view;\n        }\n    }\n    static marshalError(value) {\n        if (value instanceof Error) {\n            const props = Object.getOwnPropertyDescriptors(value);\n            props.isError = { configurable: true, enumerable: true, writable: true, value: true };\n            props.name = { configurable: true, enumerable: true, writable: true, value: value.name };\n            props.message = { configurable: true, enumerable: true, writable: true, value: value.message };\n            props.stack = { configurable: true, enumerable: true, writable: true, value: value.stack };\n            return Object.create(Object.prototype, props);\n        }\n        return undefined;\n    }\n}\n//# sourceMappingURL=RpcMarshaling.js.map",
      "start": 1693508120813,
      "end": 1693508120873,
      "sourcemaps": null
    }
  ]
}
