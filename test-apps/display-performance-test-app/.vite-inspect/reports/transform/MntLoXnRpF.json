{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/Base64EncodedString.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Entities\n */\nimport { Base64 } from \"js-base64\";\n/** Represents an array of bytes encoded in base-64 with a prefix indicating the encoding, as persisted in an [ECDb]($backend) for properties of `binary` type.\n * @public\n */\nexport var Base64EncodedString;\n(function (Base64EncodedString) {\n    /** The prefix prepended to the string identifying it as base-64-encoded. */\n    Base64EncodedString.prefix = \"encoding=base64;\";\n    /** Encode an array of bytes into a Base64EncodedString. */\n    function fromUint8Array(bytes) {\n        return `${Base64EncodedString.prefix}${Base64.fromUint8Array(bytes)}`;\n    }\n    Base64EncodedString.fromUint8Array = fromUint8Array;\n    /** Decode a Base64EncodedString into an array of bytes. */\n    function toUint8Array(base64) {\n        return Base64.toUint8Array(stripPrefix(base64));\n    }\n    Base64EncodedString.toUint8Array = toUint8Array;\n    /** Returns true if the input starts with [[Base64EncodedString.prefix]] indicating it is a well-formed Base64EncodedString. */\n    function hasPrefix(str) {\n        return str.startsWith(Base64EncodedString.prefix);\n    }\n    Base64EncodedString.hasPrefix = hasPrefix;\n    /** Ensure that the base-64-encoded string starts with the [[Base64EncodedString.prefix]]. */\n    function ensurePrefix(base64) {\n        return hasPrefix(base64) ? base64 : `${Base64EncodedString.prefix}${base64}`;\n    }\n    Base64EncodedString.ensurePrefix = ensurePrefix;\n    /** Remove the [[Base64EncodedString.prefix]] from the string if present. */\n    function stripPrefix(base64) {\n        return hasPrefix(base64) ? base64.substring(Base64EncodedString.prefix.length) : base64;\n    }\n    Base64EncodedString.stripPrefix = stripPrefix;\n    /** A function suitable for use with `JSON.parse` to revive a Base64EncodedString into a Uint8Array. */\n    Base64EncodedString.reviver = (_name, value) => {\n        if (typeof value === \"string\" && hasPrefix(value))\n            value = toUint8Array(value);\n        return value;\n    };\n    /** A function suitable for use with `JSON.stringify` to serialize a Uint8Array as a Base64EncodedString. */\n    Base64EncodedString.replacer = (_name, value) => {\n        if (value && value.constructor === Uint8Array)\n            value = fromUint8Array(value);\n        return value;\n    };\n    /* Encode a string into a Base64EncodedString. */\n    function encode(src, urlSafe) {\n        return Base64.encode(src, urlSafe);\n    }\n    Base64EncodedString.encode = encode;\n    /* Decode a Base64EncodedString into a string. */\n    function decode(src) {\n        return Base64.decode(src);\n    }\n    Base64EncodedString.decode = decode;\n})(Base64EncodedString || (Base64EncodedString = {}));\n//# sourceMappingURL=Base64EncodedString.js.map",
      "start": 1693508120471,
      "end": 1693508120513,
      "sourcemaps": null
    }
  ]
}
