{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/Pixel.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Rendering\n */\nimport { Id64 } from \"@itwin/core-bentley\";\nimport { BatchType, Feature } from \"@itwin/core-common\";\nimport { HitPriority } from \"../HitDetail\";\n/** Describes aspects of a pixel as read from a [[Viewport]].\n * @see [[Viewport.readPixels]].\n * @public\n * @extensions\n */\nexport var Pixel;\n(function (Pixel) {\n    /** Describes a single pixel within a [[Pixel.Buffer]]. */\n    class Data {\n        /** @internal */\n        get isClassifier() {\n            return undefined !== this.batchType && BatchType.Primary !== this.batchType;\n        }\n        /** @internal */\n        constructor(args) {\n            if (args?.feature)\n                this.feature = new Feature(args.feature.elementId, args.feature.subCategoryId, args.feature.geometryClass);\n            this.modelId = args?.feature?.modelId;\n            this.distanceFraction = args?.distanceFraction ?? -1;\n            this.type = args?.type ?? GeometryType.Unknown;\n            this.planarity = args?.planarity ?? Planarity.Unknown;\n            this.iModel = args?.iModel;\n            this.tileId = args?.tileId;\n            this.viewAttachmentId = args?.viewAttachmentId;\n        }\n        /** The Id of the element that produced the pixel. */\n        get elementId() {\n            return this.feature?.elementId;\n        }\n        /** The Id of the [SubCategory]($backend) that produced the pixel. */\n        get subCategoryId() {\n            return this.feature?.subCategoryId;\n        }\n        /** The class of geometry that produced the pixel. */\n        get geometryClass() {\n            return this.feature?.geometryClass;\n        }\n        /** Computes the [[HitPriority]] of this pixel based on its [[type]] and [[planarity]]. */\n        computeHitPriority() {\n            switch (this.type) {\n                case Pixel.GeometryType.Surface:\n                    return Pixel.Planarity.Planar === this.planarity ? HitPriority.PlanarSurface : HitPriority.NonPlanarSurface;\n                case Pixel.GeometryType.Linear:\n                    return HitPriority.WireEdge;\n                case Pixel.GeometryType.Edge:\n                    return Pixel.Planarity.Planar === this.planarity ? HitPriority.PlanarEdge : HitPriority.NonPlanarEdge;\n                case Pixel.GeometryType.Silhouette:\n                    return HitPriority.SilhouetteEdge;\n                default:\n                    return HitPriority.Unknown;\n            }\n        }\n        /** Convert this pixel to a [[Pixel.HitProps]] suitable for constructing a [[HitDetail]].\n         * @param viewport The viewport in which the hit originated.\n         */\n        toHitProps(viewport) {\n            let viewAttachment;\n            if (this.viewAttachmentId) {\n                const attachmentViewport = viewport.view.getAttachmentViewport(this.viewAttachmentId);\n                if (attachmentViewport)\n                    viewAttachment = { viewport: attachmentViewport, id: this.viewAttachmentId };\n            }\n            return {\n                sourceId: this.elementId ?? Id64.invalid,\n                priority: this.computeHitPriority(),\n                distFraction: this.distanceFraction,\n                subCategoryId: this.subCategoryId,\n                geometryClass: this.geometryClass,\n                modelId: this.modelId,\n                tileId: this.tileId,\n                isClassifier: this.isClassifier,\n                sourceIModel: this.iModel,\n                viewAttachment,\n            };\n        }\n    }\n    Pixel.Data = Data;\n    /** Describes the type of geometry that produced the [[Pixel.Data]]. */\n    let GeometryType;\n    (function (GeometryType) {\n        /** [[Pixel.Selector.GeometryAndDistance]] was not specified, or the type could not be determined. */\n        GeometryType[GeometryType[\"Unknown\"] = 0] = \"Unknown\";\n        /** No geometry was rendered to this pixel. */\n        GeometryType[GeometryType[\"None\"] = 1] = \"None\";\n        /** A surface produced this pixel. */\n        GeometryType[GeometryType[\"Surface\"] = 2] = \"Surface\";\n        /** A point primitive or polyline produced this pixel. */\n        GeometryType[GeometryType[\"Linear\"] = 3] = \"Linear\";\n        /** This pixel was produced by an edge of a surface. */\n        GeometryType[GeometryType[\"Edge\"] = 4] = \"Edge\";\n        /** This pixel was produced by a silhouette edge of a curved surface. */\n        GeometryType[GeometryType[\"Silhouette\"] = 5] = \"Silhouette\";\n    })(GeometryType = Pixel.GeometryType || (Pixel.GeometryType = {}));\n    /** Describes the planarity of the foremost geometry which produced the pixel. */\n    let Planarity;\n    (function (Planarity) {\n        /** [[Pixel.Selector.GeometryAndDistance]] was not specified, or the planarity could not be determined. */\n        Planarity[Planarity[\"Unknown\"] = 0] = \"Unknown\";\n        /** No geometry was rendered to this pixel. */\n        Planarity[Planarity[\"None\"] = 1] = \"None\";\n        /** Planar geometry produced this pixel. */\n        Planarity[Planarity[\"Planar\"] = 2] = \"Planar\";\n        /** Non-planar geometry produced this pixel. */\n        Planarity[Planarity[\"NonPlanar\"] = 3] = \"NonPlanar\";\n    })(Planarity = Pixel.Planarity || (Pixel.Planarity = {}));\n    /**\n     * Bit-mask by which callers of [[Viewport.readPixels]] specify which aspects are of interest.\n     * Aspects not specified will be omitted from the returned data.\n     */\n    let Selector;\n    (function (Selector) {\n        Selector[Selector[\"None\"] = 0] = \"None\";\n        /** Select the [[Feature]] which produced each pixel. */\n        Selector[Selector[\"Feature\"] = 1] = \"Feature\";\n        /** Select the type and planarity of geometry which produced each pixel as well as the fraction of its distance between the near and far planes. */\n        Selector[Selector[\"GeometryAndDistance\"] = 4] = \"GeometryAndDistance\";\n        /** Select all aspects of each pixel. */\n        Selector[Selector[\"All\"] = 5] = \"All\";\n    })(Selector = Pixel.Selector || (Pixel.Selector = {}));\n})(Pixel || (Pixel = {}));\n//# sourceMappingURL=Pixel.js.map",
      "start": 1693508119582,
      "end": 1693508119656,
      "sourcemaps": null
    }
  ]
}
