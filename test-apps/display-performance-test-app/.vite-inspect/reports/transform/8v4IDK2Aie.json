{
  "resolvedId": "D:/hub2023A/itwinjs-core/common/temp/node_modules/.pnpm/@itwin+imodels-client-management@3.1.0/node_modules/@itwin/imodels-client-management/lib/esm/operations/imodel/IModelOperations.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n * Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n * See LICENSE.md in the project root for license terms and full copyright notice.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { EntityListIteratorImpl, IModelsErrorImpl, OperationsBase, waitForCondition } from \"../../base/internal\";\r\nimport { IModelState, IModelsErrorCode, PreferReturn } from \"../../base/types\";\r\nexport class IModelOperations extends OperationsBase {\r\n    constructor(options, _iModelsClient) {\r\n        super(options);\r\n        this._iModelsClient = _iModelsClient;\r\n    }\r\n    /**\r\n     * Gets iModels for a specific iTwin. This method returns iModels in their minimal representation. The returned iterator\r\n     * internally queries entities in pages. Wraps the {@link https://developer.bentley.com/apis/imodels-v2/operations/get-itwin-imodels/ Get iTwin iModels}\r\n     * operation from iModels API.\r\n     * @param {GetiModelListParams} params parameters for this operation. See {@link GetiModelListParams}.\r\n     * @returns {EntityListIterator<MinimaliModel>} iterator for iModel list. See {@link EntityListIterator}, {@link MinimaliModel}.\r\n     */\r\n    getMinimalList(params) {\r\n        return new EntityListIteratorImpl(async () => this.getEntityCollectionPage({\r\n            authorization: params.authorization,\r\n            url: this._options.urlFormatter.getIModelListUrl({ urlParams: params.urlParams }),\r\n            preferReturn: PreferReturn.Minimal,\r\n            entityCollectionAccessor: (response) => response.iModels\r\n        }));\r\n    }\r\n    /**\r\n     * Gets iModels for a specific iTwin. This method returns iModels in their full representation. The returned iterator\r\n     * internally queries entities in pages. Wraps the {@link https://developer.bentley.com/apis/imodels-v2/operations/get-itwin-imodels/ Get iTwin iModels}\r\n     * operation from iModels API.\r\n     * @param {GetiModelListParams} params parameters for this operation. See {@link GetiModelListParams}.\r\n     * @returns {EntityListIterator<iModel>} iterator for iModel list. See {@link EntityListIterator}, {@link iModel}.\r\n     */\r\n    getRepresentationList(params) {\r\n        const entityCollectionAccessor = (response) => {\r\n            const iModels = response.iModels;\r\n            const mappedIModels = iModels.map((iModel) => this.appendRelatedEntityCallbacks(params.authorization, iModel));\r\n            return mappedIModels;\r\n        };\r\n        return new EntityListIteratorImpl(async () => this.getEntityCollectionPage({\r\n            authorization: params.authorization,\r\n            url: this._options.urlFormatter.getIModelListUrl({ urlParams: params.urlParams }),\r\n            preferReturn: PreferReturn.Representation,\r\n            entityCollectionAccessor\r\n        }));\r\n    }\r\n    /**\r\n     * Gets a single iModel by its id. This method returns an iModel in its full representation. Wraps the\r\n     * {@link https://developer.bentley.com/apis/imodels-v2/operations/get-imodel-details/ Get iModel} operation from iModels API.\r\n     * @param {GetSingleiModelParams} params parameters for this operation. See {@link GetSingleiModelParams}.\r\n     * @returns {Promise<iModel>} an iModel with specified id. See {@link iModel}.\r\n     */\r\n    async getSingle(params) {\r\n        const response = await this.sendGetRequest({\r\n            authorization: params.authorization,\r\n            url: this._options.urlFormatter.getSingleIModelUrl({ iModelId: params.iModelId })\r\n        });\r\n        const result = this.appendRelatedEntityCallbacks(params.authorization, response.iModel);\r\n        return result;\r\n    }\r\n    /**\r\n     * Creates an empty iModel with specified properties. Wraps the\r\n     * {@link https://developer.bentley.com/apis/imodels-v2/operations/create-imodel/ Create iModel} operation from iModels API.\r\n     * @param {CreateEmptyiModelParams} params parameters for this operation. See {@link CreateEmptyiModelParams}.\r\n     * @returns {Promise<iModel>} newly created iModel. See {@link iModel}.\r\n     */\r\n    async createEmpty(params) {\r\n        const createIModelBody = this.getCreateEmptyIModelRequestBody(params.iModelProperties);\r\n        const createdIModel = await this.sendIModelPostRequest(params.authorization, createIModelBody);\r\n        const result = this.appendRelatedEntityCallbacks(params.authorization, createdIModel);\r\n        return result;\r\n    }\r\n    /**\r\n     * Creates an iModel from a template. Wraps the\r\n     * {@link https://developer.bentley.com/apis/imodels-v2/operations/create-imodel/ Create iModel} operation from iModels API.\r\n     * It uses the `template` request body property to specify the source iModel which will be used as a template. Internally\r\n     * this method creates the iModel instance and then repeatedly queries the iModel state until the iModel is initialized.\r\n     * The execution of this method can take up to several minutes due to waiting for initialization to complete.\r\n     * @param {CreateIModelFromTemplateParams} params parameters for this operation. See {@link CreateIModelFromTemplateParams}.\r\n     * @returns {Promise<iModel>} newly created iModel. See {@link iModel}.\r\n     * @throws an error that implements `iModelsError` interface with code `iModelsErrorCode.IModelFromTemplateInitializationFailed`\r\n     * if iModel initialization failed or did not complete in time. See {@link iModelsErrorCode}.\r\n     */\r\n    async createFromTemplate(params) {\r\n        const createIModelBody = this.getCreateIModelFromTemplateRequestBody(params.iModelProperties);\r\n        const createdIModel = await this.sendIModelPostRequest(params.authorization, createIModelBody);\r\n        await this.waitForTemplatedIModelInitialization({\r\n            authorization: params.authorization,\r\n            iModelId: createdIModel.id,\r\n            timeOutInMs: params.timeOutInMs\r\n        });\r\n        return this.getSingle({\r\n            authorization: params.authorization,\r\n            iModelId: createdIModel.id\r\n        });\r\n    }\r\n    /**\r\n     * Updates iModel properties. Wraps the\r\n     * {@link https://developer.bentley.com/apis/imodels-v2/operations/update-imodel/ Update iModel} operation from iModels API.\r\n     * @param {UpdateIModelParams} params parameters for this operation. See {@link UpdateIModelParams}.\r\n     * @returns {Promise<IModel>} updated iModel. See {@link IModel}.\r\n     */\r\n    async update(params) {\r\n        const updateIModelBody = this.getUpdateIModelRequestBody(params.iModelProperties);\r\n        const updateIModelResponse = await this.sendPatchRequest({\r\n            authorization: params.authorization,\r\n            url: this._options.urlFormatter.getSingleIModelUrl({ iModelId: params.iModelId }),\r\n            body: updateIModelBody\r\n        });\r\n        const result = this.appendRelatedEntityCallbacks(params.authorization, updateIModelResponse.iModel);\r\n        return result;\r\n    }\r\n    /**\r\n     * Deletes an iModel with specified id. Wraps the {@link https://developer.bentley.com/apis/imodels-v2/operations/delete-imodel/ Delete iModel}\r\n     * operation from iModels API.\r\n     * @param {DeleteiModelParams} params parameters for this operation. See {@link DeleteiModelParams}.\r\n     * @returns {Promise<void>} a promise that resolves after operation completes.\r\n     */\r\n    async delete(params) {\r\n        return this.sendDeleteRequest({\r\n            authorization: params.authorization,\r\n            url: this._options.urlFormatter.getSingleIModelUrl({ iModelId: params.iModelId })\r\n        });\r\n    }\r\n    appendRelatedEntityCallbacks(authorization, iModel) {\r\n        const getCreator = async () => { var _a; return this.getCreator(authorization, (_a = iModel._links.creator) === null || _a === void 0 ? void 0 : _a.href); };\r\n        const result = {\r\n            ...iModel,\r\n            getCreator\r\n        };\r\n        return result;\r\n    }\r\n    getCreateEmptyIModelRequestBody(iModelProperties) {\r\n        return {\r\n            iTwinId: iModelProperties.iTwinId,\r\n            name: iModelProperties.name,\r\n            description: iModelProperties.description,\r\n            extent: iModelProperties.extent\r\n        };\r\n    }\r\n    async sendIModelPostRequest(authorization, createIModelBody) {\r\n        const createIModelResponse = await this.sendPostRequest({\r\n            authorization,\r\n            url: this._options.urlFormatter.getCreateIModelUrl(),\r\n            body: createIModelBody\r\n        });\r\n        return createIModelResponse.iModel;\r\n    }\r\n    async getCreator(authorization, creatorLink) {\r\n        if (!creatorLink)\r\n            return undefined;\r\n        const { iModelId, userId } = this._options.urlFormatter.parseUserUrl(creatorLink);\r\n        return this._iModelsClient.users.getSingle({\r\n            authorization,\r\n            iModelId,\r\n            userId\r\n        });\r\n    }\r\n    getCreateIModelFromTemplateRequestBody(iModelProperties) {\r\n        return {\r\n            ...this.getCreateEmptyIModelRequestBody(iModelProperties),\r\n            template: {\r\n                iModelId: iModelProperties.template.iModelId,\r\n                changesetId: iModelProperties.template.changesetId\r\n            }\r\n        };\r\n    }\r\n    getUpdateIModelRequestBody(iModelProperties) {\r\n        return {\r\n            name: iModelProperties.name,\r\n            description: iModelProperties.description,\r\n            extent: iModelProperties.extent\r\n        };\r\n    }\r\n    async waitForTemplatedIModelInitialization(params) {\r\n        const isIModelInitialized = async () => {\r\n            const iModel = await this.getSingle({\r\n                authorization: params.authorization,\r\n                iModelId: params.iModelId\r\n            });\r\n            return iModel.state === IModelState.Initialized;\r\n        };\r\n        return waitForCondition({\r\n            conditionToSatisfy: isIModelInitialized,\r\n            timeoutErrorFactory: () => new IModelsErrorImpl({\r\n                code: IModelsErrorCode.IModelFromTemplateInitializationFailed,\r\n                message: \"Timed out waiting for Baseline File initialization.\"\r\n            }),\r\n            timeOutInMs: params.timeOutInMs\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=IModelOperations.js.map",
      "start": 1693508124917,
      "end": 1693508124993,
      "sourcemaps": null
    }
  ]
}
