{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/tile/map/MapLayerFormatRegistry.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module MapLayers\n */\nimport { assert, Logger } from \"@itwin/core-bentley\";\nimport { IModelApp } from \"../../IModelApp\";\nimport { internalMapLayerImageryFormats, MapLayerSourceStatus } from \"../internal\";\nconst loggerCategory = \"ArcGISFeatureProvider\";\n/** Class representing a map-layer format.\n * Each format has it's unique 'formatId' string, used to uniquely identify a format in the [[MapLayerFormatRegistry]].\n * When creating an [[ImageMapLayerSettings]] object, a format needs to be specified this 'formatId'.\n * The MapLayerFormat object can later be used to validate a source, or create a provider.\n *\n * Subclasses should override formatId and [[MapLayerFormat.createImageryProvider]].\n * @public\n */\nexport class MapLayerFormat {\n    /** Register the current format in the [[MapLayerFormatRegistry]].\n    */\n    static register() { IModelApp.mapLayerFormatRegistry.register(this); }\n    /** Allow a source of a specific to be validated before being attached as a map-layer.\n    */\n    static async validateSource(_url, _userName, _password, _ignoreCache) { return { status: MapLayerSourceStatus.Valid }; }\n    /** Create a [[MapLayerImageryProvider]] that will be used to feed data in a map-layer tile Tree.\n     * @internal\n    */\n    static createImageryProvider(_settings) { assert(false); }\n    /** @internal */\n    static createMapLayerTree(_layerSettings, _layerIndex, _iModel) {\n        assert(false);\n        return undefined;\n    }\n}\n/** A registry of MapLayerFormats identified by their unique format IDs. The registry can be accessed via [[IModelApp.mapLayerFormatRegistry]].\n * @public\n */\nexport class MapLayerFormatRegistry {\n    constructor(opts) {\n        this._formats = new Map();\n        this._configOptions = opts ?? {};\n        internalMapLayerImageryFormats.forEach((format) => this.register(format));\n    }\n    isRegistered(formatId) { return this._formats.get(formatId) !== undefined; }\n    register(formatClass) {\n        if (formatClass.formatId.length === 0)\n            return; // must be an abstract class, ignore it\n        this._formats.set(formatClass.formatId, { type: formatClass });\n    }\n    /** @beta */\n    setAccessClient(formatId, accessClient) {\n        const entry = this._formats.get(formatId);\n        if (entry !== undefined) {\n            entry.accessClient = accessClient;\n            return true;\n        }\n        return false;\n    }\n    /** @beta */\n    getAccessClient(formatId) {\n        if (formatId.length === 0)\n            return undefined;\n        return this._formats.get(formatId)?.accessClient;\n    }\n    get configOptions() {\n        return this._configOptions;\n    }\n    /** @internal */\n    createImageryMapLayerTree(layerSettings, layerIndex, iModel) {\n        const entry = this._formats.get(layerSettings.formatId);\n        const format = entry?.type;\n        if (format === undefined) {\n            Logger.logError(loggerCategory, `Could not find format '${layerSettings.formatId}' in registry`);\n            return undefined;\n        }\n        return format.createMapLayerTree(layerSettings, layerIndex, iModel);\n    }\n    /** Returns a [[MapLayerImageryProvider]] based on the provided [[ImageMapLayerSettings]] object.\n     * @internal\n     */\n    createImageryProvider(layerSettings) {\n        const entry = this._formats.get(layerSettings.formatId);\n        const format = entry?.type;\n        if (this._configOptions[layerSettings.formatId] !== undefined) {\n            const keyValuePair = this._configOptions[layerSettings.formatId];\n            const key = { key: keyValuePair.key, value: keyValuePair.value };\n            layerSettings = layerSettings.clone({ accessKey: key });\n        }\n        return (format === undefined) ? undefined : format.createImageryProvider(layerSettings);\n    }\n    async validateSource(formatId, url, userName, password, ignoreCache) {\n        const entry = this._formats.get(formatId);\n        const format = entry?.type;\n        return (format === undefined) ? { status: MapLayerSourceStatus.InvalidFormat } : format.validateSource(url, userName, password, ignoreCache);\n    }\n}\n//# sourceMappingURL=MapLayerFormatRegistry.js.map",
      "start": 1693508121664,
      "end": 1693508121823,
      "sourcemaps": null
    }
  ]
}
