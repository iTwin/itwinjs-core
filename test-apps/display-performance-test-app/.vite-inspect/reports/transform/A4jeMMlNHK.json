{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/spatial/ecrs/projection/Mercator1SP.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { OperationMethod } from \"../OperationMethod\";\n/**\n * Class Mercator1SP defines the Mercator method with one standard parallel.\n *\n * The 'source' CRS is the geographic CRS.\n * The 'target' CRS is the projected CRS.\n *\n * Based on the following document:\n *\n * Coordinate Conversions and Transformations including Formulas\n * Guidance Note Number 7, part 2\n * Revised January 2009\n * Available at: http://www.epsg.org/\n *\n * Formulas: see 1.3.3.1 -> 1.3.3.2\n *\n * Note that in these formulas common to both 1SP and 2SP cases, the parameter latitude of natural origin (latN)\n * is not used. However for the Merctor (1SP) method the EPSG dataset includes this parameter, which must\n * have a value of zero, for completeness in CRS labelling.\n\n * @version 1.0 April 2009\n */\n/** @internal */\nclass Mercator1SP extends OperationMethod {\n    /**\n     * Create a new projection.\n     * @param parameters the values of the parameters.\n     */\n    constructor(parameters) {\n        super(Mercator1SP.METHOD_CODE, \"Mercator (1SP)\", parameters);\n        /* Store the parameters */\n        this._latN = (parameters != null) ? parameters.getValue2(8801, 0.0) : 0.0;\n        this._lonN = (parameters != null) ? parameters.getValue2(8802, 0.0) : 0.0;\n        this._k0 = (parameters != null) ? parameters.getValue2(8805, 1.0) : 1.0;\n        this._fE = (parameters != null) ? parameters.getValue2(8806, 0.0) : 0.0;\n        this._fN = (parameters != null) ? parameters.getValue2(8807, 0.0) : 0.0;\n    }\n    /**\n     * Create a new projection.\n     * @param latN latitude of natural origin.\n     * @param lonN longitude of natural origin (the central meridian).\n     * @param k0 scale factor at natural origin.\n     * @param fE false easting.\n     * @param fN false northing.\n     * @return the projection.\n     */\n    static create(latN, lonN, k0, fE, fN) {\n        let projection = new Mercator1SP(null);\n        projection._latN = latN;\n        projection._lonN = lonN;\n        projection._k0 = k0;\n        projection._fE = fE;\n        projection._fN = fN;\n        return projection;\n    }\n    /**\n     * OperationMethod interface method.\n     * @see OperationMethod#forward\n     */\n    forward(sourceCRS, source, targetCRS, target) {\n        /* Get the geographic parameters (radians) */\n        let lon = source.getX();\n        let lat = source.getY();\n        /* Get the radius of the sphere */\n        let R = sourceCRS.getEllipsoid().getA();\n        /* Calculate easting */\n        let E = this._fE + R * (lon - this._lonN);\n        /* Calculate northing */\n        let sin = Math.sin(lat);\n        let N = this._fN + 0.5 * R * Math.log((1.0 + sin) / (1.0 - sin));\n        //        double N = this._fN+R*Math.log(Math.tan(QPI+0.5*lat));\n        /* Save the position */\n        target.setX(E);\n        target.setY(N);\n        target.setZ(source.getZ()); // Keep the Z value\n    }\n    /**\n     * OperationMethod interface method.\n     * @see OperationMethod#reverse\n     */\n    reverse(sourceCRS, source, targetCRS, target) {\n        /* Get the parameters */\n        let E = target.getX();\n        let N = target.getY();\n        /* Get the radius of the sphere */\n        let R = sourceCRS.getEllipsoid().getA();\n        /* Calculate longitude */\n        let lon = ((E - this._fE) / R) + this._lonN;\n        /* Calculate latitude */\n        let D = (this._fN - N) / R;\n        let lat = 2.0 * (Mercator1SP.QPI - Math.atan(Math.exp(D)));\n        /* Save the position */\n        source.setX(lon);\n        source.setY(lat);\n        source.setZ(target.getZ()); // Keep the Z value\n    }\n}\n/** The code of this method */\nMercator1SP.METHOD_CODE = 9804;\n/** The value of PI/4 */\nMercator1SP.QPI = Math.PI / 4.0;\nexport { Mercator1SP };\n//# sourceMappingURL=Mercator1SP.js.map",
      "start": 1693508125631,
      "end": 1693508125675,
      "sourcemaps": null
    }
  ]
}
