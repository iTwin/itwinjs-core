{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/webgl/LightingUniforms.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module WebGL\n */\nimport { ColorDef, LightSettings } from \"@itwin/core-common\";\nimport { FloatRgb } from \"./FloatRGBA\";\nimport { desync, sync } from \"./Sync\";\n/** Maintains state of uniforms associated with a DisplayStyle3dState's LightSettings.\n * A single float array stored as:\n *  0  float solar intensity\n *  1  vec3 ambient color\n *  4  float ambient intensity\n *  5  vec3 hemi lower color\n *  8  vec3 hemi upper color\n *  11 float hemi intensity\n *  12 float portrait intensity\n *  13 float specular intensity\n *  14 float num cels\n *  15 fresnel intensity (negative if fresnel is to be inverted)\n * Note solar direction is handled separately in TargetUniforms.\n * @internal\n */\nexport class LightingUniforms {\n    constructor() {\n        this.syncKey = 0;\n        // CPU state\n        this._settings = LightSettings.fromJSON();\n        this._initialized = false;\n        // GPU state.\n        this._data = new Float32Array(16);\n        // Working state\n        this._rgb = new FloatRgb();\n    }\n    setRgb(rgb, index) {\n        this._rgb.setTbgr(ColorDef.computeTbgrFromComponents(rgb.r, rgb.g, rgb.b));\n        this._data[index + 0] = this._rgb.red;\n        this._data[index + 1] = this._rgb.green;\n        this._data[index + 2] = this._rgb.blue;\n    }\n    update(settings) {\n        if (this._initialized && this._settings.equals(settings))\n            return;\n        this._initialized = true;\n        this._settings = settings;\n        desync(this);\n        const data = this._data;\n        data[0] = settings.solar.intensity;\n        this.setRgb(settings.ambient.color, 1);\n        data[4] = settings.ambient.intensity;\n        this.setRgb(settings.hemisphere.lowerColor, 5);\n        this.setRgb(settings.hemisphere.upperColor, 8);\n        data[11] = settings.hemisphere.intensity;\n        data[12] = settings.portraitIntensity;\n        data[13] = settings.specularIntensity;\n        data[14] = settings.numCels;\n        const fresnel = settings.fresnel.intensity;\n        data[15] = settings.fresnel.invert ? -fresnel : fresnel;\n    }\n    bind(uniform) {\n        if (!sync(this, uniform))\n            uniform.setUniform1fv(this._data);\n    }\n}\n//# sourceMappingURL=LightingUniforms.js.map",
      "start": 1693508123815,
      "end": 1693508124030,
      "sourcemaps": null
    }
  ]
}
