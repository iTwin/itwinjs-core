{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/system/storage/ContentLoader.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { AList } from \"../collection/AList\";\nimport { Message } from \"../runtime/Message\";\nimport { FileRange } from \"./FileRange\";\n/**\n * Class ContentLoader helps requesting and loading multiple ranges from a file with a single request to the storage service.\n */\n/** @internal */\nclass ContentLoader {\n    /**\n     * Create a new content loader.\n     */\n    constructor(fileStorage, fileName) {\n        this._fileStorage = fileStorage;\n        this._fileName = fileName;\n        this.clear();\n    }\n    /**\n     * Clear the content loader for reuse.\n     */\n    clear() {\n        this._requests = new AList();\n        this._loading = false;\n        this._loaded = false;\n        this._responses = null;\n    }\n    /**\n     * Add a request to load a content range.\n     */\n    requestFilePart(offset, size) {\n        this._requests.add(new FileRange(offset, size));\n        return this;\n    }\n    /**\n     * Get the total size of the data to be loaded.\n     */\n    getTotalRequestSize() {\n        let totalSize = 0;\n        for (let i = 0; i < this._requests.size(); i++)\n            totalSize += this._requests.get(i).size;\n        return totalSize;\n    }\n    /**\n     * Print info.\n     */\n    printInfo() {\n        Message.print(ContentLoader.MODULE, \"Requesting \" + this._requests.size() + \" parts from '\" + this._fileName + \"' with total size \" + this.getTotalRequestSize());\n    }\n    /**\n     * Has all content been loaded?\n     */\n    isLoaded() {\n        return this._loaded;\n    }\n    /**\n     * Has all content been loaded?\n     */\n    isAvailable() {\n        return this.isLoaded();\n    }\n    /**\n     * Load all content from storage.\n     */\n    async load() {\n        this._loading = true;\n        this.printInfo();\n        this._responses = await this._fileStorage.readFileParts(this._fileName, this._requests);\n        this._loaded = true;\n        return this;\n    }\n    /**\n     * Get a content range that has been loaded.\n     */\n    getFilePart(offset, size) {\n        for (let i = 0; i < this._responses.size(); i++) {\n            let response = this._responses.get(i);\n            if (response.offset.same(offset) && (response.content.size() == size)) {\n                return response.content;\n            }\n        }\n        return null;\n    }\n}\n/** The name of this module */\nContentLoader.MODULE = \"ContentLoader\";\nexport { ContentLoader };\n//# sourceMappingURL=ContentLoader.js.map",
      "start": 1693508125238,
      "end": 1693508125370,
      "sourcemaps": null
    }
  ]
}
