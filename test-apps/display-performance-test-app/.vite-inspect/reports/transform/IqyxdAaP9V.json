{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/rpc/WipRpcInterface.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module RpcInterface\n */\nimport { RpcInterface } from \"../RpcInterface\";\nimport { RpcManager } from \"../RpcManager\";\n/** The purpose of this class is to house WIP RPC methods. For example:\n * - WIP methods where signatures or behavior is still changing\n * - Experimental methods that we may decide are a bad idea and never release\n * The idea is to house these WIP RPC methods away from other RpcInterfaces that have stated compatibility goals.\n * Once stable, the goal is to move methods out to their rightful home.\n * Apps/services should understand the *flux* implied by registering this RpcInterface and should be in control of both the client and server before even considering using it.\n * @internal\n */\nclass WipRpcInterface extends RpcInterface {\n    /** Returns the IModelReadRpcInterface instance for the frontend. */\n    static getClient() { return RpcManager.getClientForInterface(WipRpcInterface); }\n    /*===========================================================================================\n      NOTE: Any add/remove/change to the methods below requires an update of the interface version.\n      NOTE: Please consult the README in this folder for the semantic versioning rules.\n    ==========================================================================================*/\n    async placeholder(_iModelToken) { return this.forward(arguments); } // here to test that WipRpcInterface is configured properly\n    async isChangeCacheAttached(_iModelToken) { return this.forward(arguments); }\n    async attachChangeCache(_iModelToken) { return this.forward(arguments); }\n    async getChangedElements(_iModelToken, _startChangesetId, _endChangesetId) { return this.forward(arguments); }\n    async isChangesetProcessed(_iModelToken, _changesetId) { return this.forward(arguments); }\n}\n/** The immutable name of the interface. */\nWipRpcInterface.interfaceName = \"WipRpcInterface\";\n/** The semantic version of the interface.\n * @note The WipRpcInterface will never progress to 1.0 since it is never intended to be public.\n */\nWipRpcInterface.interfaceVersion = \"0.5.0\";\nexport { WipRpcInterface };\n//# sourceMappingURL=WipRpcInterface.js.map",
      "start": 1693508120854,
      "end": 1693508120927,
      "sourcemaps": null
    }
  ]
}
