{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-performance-test-app/src/frontend/TestConfig.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { assert, Id64Array, Id64String } from \"@itwin/core-bentley\";\r\nimport {\r\n  BackgroundMapProps, ColorDef, Hilite, RenderMode, ViewFlags, ViewStateProps,\r\n} from \"@itwin/core-common\";\r\nimport { RenderSystem, TileAdmin } from \"@itwin/core-frontend\";\r\n\r\n/** Dimensions of the Viewport for a TestConfig. */\r\nexport interface ViewSize {\r\n  readonly width: number;\r\n  readonly height: number;\r\n}\r\n\r\n/** Selectively overrides individual ViewFlags for a TestConfig.\r\n * @note renderMode can be a string \"wireframe\", \"hiddenline\", \"solidfill\", or \"smoothshade\" (case-insensitive).\r\n */\r\nexport type ViewFlagProps = Partial<Omit<ViewFlags, \"renderMode\">> & { renderMode?: string | RenderMode };\r\n\r\n/** The types of saved views to include in a TestConfig. Case-insensitive in TestConfigProps; always lower-case in TestConfig.\r\n * local and internal mean exactly the same thing - include all persistent views from the iModel, including private ones.\r\n * external means to include external saved views from a *_ESV.json file\r\n * both means to include both types.\r\n */\r\nexport type SavedViewType = \"both\" | \"external\" | \"internal\" | \"local\";\r\n\r\n/** The type(s) of tests specified by a TestConfig.\r\n * timing means to record and output timing for drawing to the screen.\r\n * readPixels means to record and output timing for drawing to an offscreen framebuffer for reading pixel data.\r\n * image means to save an image of the screen.\r\n * both means to do \"timing\" and \"image\".\r\n */\r\nexport type TestType = \"timing\" | \"readPixels\" | \"image\" | \"both\";\r\n\r\n/** Specifies symbology overrides to apply to elements in a TestConfig. */\r\nexport interface ElementOverrideProps {\r\n  /** The Id of the affected element, or \"-default-\" to apply to all elements not otherwise overridden. */\r\n  id: Id64String | \"-default-\";\r\n  /** The symbology overrides to apply. */\r\n  fsa: string; // A stringified FeatureAppearanceProps. Why is all the JSON double-stringified???\r\n}\r\n\r\n/** JSON representation of a ViewState with some additional data used by external saved views in a *_ESV.json file and by TestConfigProps.viewString. */\r\nexport interface ViewStateSpecProps {\r\n  _name: string; // eslint-disable-line @typescript-eslint/naming-convention\r\n  _viewStatePropsString: string; // eslint-disable-line @typescript-eslint/naming-convention\r\n  _overrideElements?: string; // eslint-disable-line @typescript-eslint/naming-convention\r\n  _selectedElements?: string; // eslint-disable-line @typescript-eslint/naming-convention\r\n}\r\n\r\n/** Parsed in-memory representation of a ViewStateSpecProps. */\r\nexport interface ViewStateSpec {\r\n  name: string;\r\n  viewProps: ViewStateProps;\r\n  elementOverrides?: ElementOverrideProps[];\r\n  selectedElements?: Id64String | Id64Array;\r\n}\r\n\r\n/** Overrides aspects of the Hilite.Settings used for emphasis or hilite in a TestConfig. */\r\nexport interface HiliteProps {\r\n  visibleRatio?: number;\r\n  hiddenRatio?: number;\r\n  silhouette?: Hilite.Silhouette;\r\n  red?: number;\r\n  green?: number;\r\n  blue?: number;\r\n}\r\n\r\n/** Specifies how to apply hypermodeling in a TestConfig. */\r\nexport interface HyperModelingProps {\r\n  /** The Id of the [SectionDrawingLocation]($backend) element from which the section view and 2d section graphics are obtained. */\r\n  sectionDrawingLocationId: Id64String;\r\n  /** If true, the spatial view associated with the section drawing location will be applied before the test is executed.\r\n   * This essentially overrides the view defined by TestConfig's viewName, extViewName, and viewString properties. However,\r\n   * the spatial view is applied before other properties like viewFlags, backgroundMap, etc, so those can still override aspects of\r\n   * the view.\r\n   * If not true, only the clip and 2d section graphics from the section drawing location are applied to the viewport.\r\n   */\r\n  applySpatialView?: boolean;\r\n}\r\n\r\n/** JSON representation of a TestConfig. */\r\nexport interface TestConfigProps {\r\n  /** The default output path. Not stored in the JSON file but supplied by the backend for the base config. Ignored if outputPath is defined. */\r\n  argOutputPath?: string;\r\n  /** The dimensions of the viewport.\r\n   * Default: 1000x1000.\r\n   */\r\n  view?: ViewSize;\r\n  /** The number of frames to draw while recording timings. Timings are averaged over these frames.\r\n   * Default: 50\r\n   */\r\n  numRendersToTime?: number;\r\n  /** The number of frames to draw without recording timings, to prime the system so that recorded timings are more consistent.\r\n   * Default: 100\r\n   */\r\n  numRendersToSkip?: number;\r\n  /** The name of the output .csv file to contain the recorded timing data.\r\n   * Default: performanceResults.csv\r\n   */\r\n  outputName?: string;\r\n  /** The directory to contain output like the .csv file containing timing data, saved images, log files, etc.\r\n   * Default: d:\\output\\performanceData\\\r\n   */\r\n  outputPath?: string;\r\n  /** The url template for @itwin/frontend-tiles to obtain tile trees for spatial views, served over localhost.\r\n   * The string can include special tokens: {iModel.key} or {iModel.filename}.\r\n   *   e.g.: http://localhost:8080{iModel.key}-tiles/3dft/ or http://localhost:8080/MshX/{iModel.filename}/\r\n   * These will get replaced by the value of iModel.key or just the filename of that (no path or extension), correspondingly.\r\n   * Note that the contents of iModel.key in DPTA is a GUID.\r\n   */\r\n  frontendTilesUrlTemplate?: string;\r\n  /** The location of the iModel file(s) used by the test.\r\n   * Default: \"\"\r\n   */\r\n  iModelLocation?: string;\r\n  /** The name of the iModel(s) to test. Can include wildcards.\r\n   * Default: \"*\"\r\n   */\r\n  iModelName?: string;\r\n  /** The ID of the iModel if it should be downloaded from iModelHub. */\r\n  iModelId?: string;\r\n  /** The ID of the iTwin project from which to obtain the iModel. */\r\n  iTwinId?: string;\r\n  /** The format in which to output the timing data. See DisplayPerfRpcImpl.saveCsv - only \"original\" is treated specially.\r\n   * Default: \"original\".\r\n   */\r\n  csvFormat?: string;\r\n  /** Substrings to omit from generated file names. See removeOptsFromString. */\r\n  filenameOptsToIgnore?: string[] | string;\r\n  /** The name of the view(s) to test. Can include wildcards.\r\n   * Default: \"*\"\r\n   */\r\n  viewName?: string;\r\n  /** The name of an external saved view to test. Supersedes viewName if defined. */\r\n  extViewName?: string;\r\n  /** The type of test(s) to run. */\r\n  testType?: TestType;\r\n  /** The name (Code value) of a display style to apply to the view. */\r\n  displayStyle?: string;\r\n  /** Overrides for selected ViewFlags to apply to the view. */\r\n  viewFlags?: ViewFlagProps;\r\n  /** Selectively overrides how the background map is drawn. */\r\n  backgroundMap?: BackgroundMapProps;\r\n  /** Selectively overrides options used to initialize the RenderSystem. */\r\n  renderOptions?: RenderSystem.Options;\r\n  /** Selectively overrides options used to initialize the TileAdmin. */\r\n  tileProps?: TileAdmin.Props;\r\n  hilite?: HiliteProps;\r\n  emphasis?: HiliteProps;\r\n  /** The type(s) of saved views to include. */\r\n  savedViewType?: SavedViewType;\r\n  /** An object (not a string) describing a non-persistent view. Supersedes viewName if defined. */\r\n  viewString?: ViewStateSpecProps;\r\n  /** Specifies hypermodeling settings applied to the view. */\r\n  hyperModeling?: HyperModelingProps;\r\n  /** Specifies if EXT_disjoint_timer_query extension is used to collect GPU data */\r\n  useDisjointTimer?: boolean;\r\n  /** Describes how to react to an otherwise uncaught exception during a test.\r\n   *  - \"terminate\" => log the exception and terminate immediately.\r\n   *  - undefined => log the exception and continue to next test.\r\n   * Logged exceptions will include the string \"DPTA_EXCEPTION\" for easy grepping.\r\n   */\r\n  onException?: \"terminate\";\r\n}\r\n\r\nexport const defaultHilite = new Hilite.Settings();\r\nexport const defaultEmphasis = new Hilite.Settings(ColorDef.black, 0, 0, Hilite.Silhouette.Thick);\r\nexport const isWindows = window.navigator.userAgent.toLowerCase().includes(\"win\");\r\nexport const separator = isWindows ? \"\\\\\" : \"/\";\r\n\r\n/** Configures how one or more tests are run. A Test belongs to a TestSet and can test multiple iModels and views thereof.\r\n * A single base config is supplied by the backend.\r\n * Each TestSet can override aspects of that base config.\r\n * Each Test within a TestSet receives the TestSet's config and can override aspects of it.\r\n * Most properties have the same meanings as those in TestConfigProps.\r\n */\r\nexport class TestConfig {\r\n  public readonly view: ViewSize;\r\n  public readonly numRendersToTime: number;\r\n  public readonly numRendersToSkip: number;\r\n  public readonly outputName: string;\r\n  public readonly outputPath: string;\r\n  public iModelName: string;\r\n  public frontendTilesUrlTemplate?: string;\r\n  public urlStr?: string;\r\n  public readonly iModelId?: string;\r\n  public readonly iTwinId?: string;\r\n  public viewName: string;\r\n  public readonly testType: TestType;\r\n  public readonly csvFormat: string;\r\n  public readonly renderOptions: RenderSystem.Options;\r\n  public readonly savedViewType: SavedViewType;\r\n  public readonly iModelLocation: string;\r\n  public readonly useDisjointTimer: boolean;\r\n\r\n  public readonly extViewName?: string;\r\n  public readonly displayStyle?: string;\r\n  public readonly viewFlags?: ViewFlagProps;\r\n  public readonly tileProps?: TileAdmin.Props;\r\n  public readonly hilite?: Hilite.Settings;\r\n  public readonly emphasis?: Hilite.Settings;\r\n\r\n  /** A string representation of a ViewState, produced from TestConfigProps.viewString. */\r\n  public readonly viewStateSpec?: ViewStateSpec;\r\n  public readonly filenameOptsToIgnore?: string[] | string;\r\n  public readonly backgroundMap?: BackgroundMapProps;\r\n  public readonly hyperModeling?: HyperModelingProps;\r\n  public readonly onException?: \"terminate\";\r\n\r\n  /** Construct a new TestConfig with properties initialized by following priority:\r\n   *  As defined by `props`; or\r\n   *  as defined by `prevConfig` if not defined by props; or\r\n   *  to default values if not defined by prevConfig or prevConfig is not supplied.\r\n   */\r\n  public constructor(props: TestConfigProps, prevConfig?: TestConfig) {\r\n    this.view = props.view ?? prevConfig?.view ?? { width: 1000, height: 1000 };\r\n    this.numRendersToTime = props.numRendersToTime ?? prevConfig?.numRendersToTime ?? 100;\r\n    this.numRendersToSkip = props.numRendersToSkip ?? prevConfig?.numRendersToSkip ?? 50;\r\n    this.outputName = props.outputName ?? prevConfig?.outputName ?? \"performanceResults.csv\";\r\n    this.outputPath = prevConfig?.outputPath ?? (isWindows ? \"D:\\\\output\\\\performanceData\\\\\" : \"/Users/\");\r\n    this.iModelLocation = prevConfig?.iModelLocation ?? \"\";\r\n    this.iModelName = props.iModelName ?? prevConfig?.iModelName ?? \"*\";\r\n    this.iModelId = props.iModelId ?? prevConfig?.iModelId;\r\n    this.iTwinId = props.iTwinId ?? prevConfig?.iTwinId;\r\n    this.csvFormat = props.csvFormat ?? prevConfig?.csvFormat ?? \"original\";\r\n    this.viewName = props.viewName ?? props.extViewName ?? prevConfig?.viewName ?? prevConfig?.extViewName ?? \"*\";\r\n    this.extViewName = props.extViewName;\r\n    this.testType = props.testType ?? prevConfig?.testType ?? \"timing\";\r\n    this.savedViewType = (props.savedViewType?.toLowerCase() as SavedViewType) ?? prevConfig?.savedViewType ?? \"both\";\r\n    this.renderOptions = prevConfig?.renderOptions ? { ...prevConfig.renderOptions } : { useWebGL2: true, dpiAwareLOD: true };\r\n    this.filenameOptsToIgnore = props.filenameOptsToIgnore ?? prevConfig?.filenameOptsToIgnore;\r\n    this.displayStyle = props.displayStyle ?? prevConfig?.displayStyle;\r\n    this.hyperModeling = props.hyperModeling ?? prevConfig?.hyperModeling;\r\n    this.useDisjointTimer = props.useDisjointTimer ?? prevConfig?.useDisjointTimer ?? true;\r\n    this.onException = props.onException ?? prevConfig?.onException;\r\n    this.frontendTilesUrlTemplate = props.frontendTilesUrlTemplate ?? prevConfig?.frontendTilesUrlTemplate;\r\n\r\n    if (prevConfig) {\r\n      if (prevConfig.viewStateSpec) {\r\n        // Don't preserve selected elements or appearance overrides.\r\n        this.viewStateSpec = { name: prevConfig.viewStateSpec.name, viewProps: prevConfig.viewStateSpec.viewProps };\r\n      }\r\n\r\n      this.hilite = prevConfig.hilite;\r\n      this.emphasis = prevConfig.emphasis;\r\n\r\n      if (prevConfig.backgroundMap)\r\n        this.backgroundMap = { ...prevConfig.backgroundMap };\r\n\r\n      if (prevConfig.tileProps)\r\n        this.tileProps = { ...prevConfig.tileProps };\r\n\r\n      if (prevConfig.viewFlags)\r\n        this.viewFlags = { ...prevConfig.viewFlags };\r\n\r\n    } else if (props.argOutputPath) {\r\n      this.outputPath = props.argOutputPath;\r\n    }\r\n\r\n    if (props.iModelLocation)\r\n      this.iModelLocation = combineFilePaths(props.iModelLocation, this.iModelLocation);\r\n\r\n    if (props.outputPath)\r\n      this.outputPath = combineFilePaths(props.outputPath, this.outputPath);\r\n\r\n    if (props.viewString) {\r\n      this.viewStateSpec = {\r\n        name: props.viewString._name,\r\n        viewProps: JSON.parse(props.viewString._viewStatePropsString),\r\n      };\r\n\r\n      if (props.viewString._overrideElements)\r\n        this.viewStateSpec.elementOverrides = JSON.parse(props.viewString._overrideElements);\r\n\r\n      if (props.viewString._selectedElements)\r\n        this.viewStateSpec.selectedElements = JSON.parse(props.viewString._selectedElements);\r\n    }\r\n\r\n    if (props.renderOptions) {\r\n      const options = merge(this.renderOptions, props.renderOptions);\r\n      assert(options !== undefined);\r\n      this.renderOptions = options;\r\n    }\r\n\r\n    this.tileProps = merge(this.tileProps, props.tileProps);\r\n    this.backgroundMap = merge(this.backgroundMap, props.backgroundMap);\r\n    this.viewFlags = merge(this.viewFlags, props.viewFlags);\r\n\r\n    if (props.hilite)\r\n      this.hilite = hiliteSettings(this.hilite ?? defaultHilite, props.hilite);\r\n\r\n    if (props.emphasis)\r\n      this.emphasis = hiliteSettings(this.emphasis ?? defaultEmphasis, props.emphasis);\r\n  }\r\n\r\n  /** Returns true if IModelApp must be restarted when transitioning from this config to the specified config. */\r\n  public requiresRestart(newConfig: TestConfig): boolean {\r\n    if (!areObjectsEqual(this.renderOptions, newConfig.renderOptions))\r\n      return true;\r\n\r\n    if (!this.tileProps || !newConfig.tileProps)\r\n      return undefined !== this.tileProps || undefined !== newConfig.tileProps;\r\n\r\n    return !areObjectsEqual(this.tileProps, newConfig.tileProps);\r\n  }\r\n}\r\n\r\n/** Maintains a stack of TestConfigs such that entries pushed on the stack inherit properties from the entry currently on the top of the stack. */\r\nexport class TestConfigStack {\r\n  private readonly _stack: TestConfig[] = [];\r\n\r\n  public constructor(base: TestConfig) {\r\n    this._stack.push(base);\r\n  }\r\n\r\n  public get top(): TestConfig {\r\n    assert(this._stack.length > 0);\r\n    return this._stack[this._stack.length - 1];\r\n  }\r\n\r\n  // Push to the top of the stack\r\n  public push(props: TestConfigProps): void {\r\n    const config = new TestConfig(props, this.top);\r\n    this._stack.push(config);\r\n  }\r\n\r\n  public pop(): void {\r\n    assert(this._stack.length > 1); // never pop the base of the stack.\r\n    this._stack.pop();\r\n  }\r\n}\r\n\r\n/** Override properties of settings with those defined by props. */\r\nfunction hiliteSettings(settings: Hilite.Settings, props: HiliteProps): Hilite.Settings {\r\n  const colors = settings.color.colors;\r\n  const color = ColorDef.from(props?.red ?? colors.r, props?.green ?? colors.g, props?.blue ?? colors.b, 0);\r\n  return new Hilite.Settings(color, props.visibleRatio ?? settings.visibleRatio, props.hiddenRatio ?? settings.hiddenRatio, props.silhouette ?? settings.silhouette);\r\n}\r\n\r\n/** Merge two objects of type T such that any property defined by second overrides the value supplied for that property by first.\r\n * The inputs are not modified - a new object is returned if two objects are supplied.\r\n */\r\nfunction merge<T extends object>(first: T | undefined, second: T | undefined): T | undefined {\r\n  if (!first)\r\n    return second;\r\n  else if (!second)\r\n    return first;\r\n  else\r\n    return { ...first, ...second };\r\n}\r\n\r\n/** Combine two file paths. e.g., combineFilePaths(\"images/img.png\", \"/usr/tmp\") returns \"/usr/tmp/images/img.png\".\r\n * If isWindows & additionalPath begins with a drive letter, initialPath is ignored.\r\n * If !isWindows & additionalPath begins with \"/\", initialPath is ignored.\r\n */\r\nfunction combineFilePaths(additionalPath: string, initialPath: string): string {\r\n  if (initialPath.length === 0 || (isWindows && additionalPath[1] === \":\") || (!isWindows && additionalPath[0] === \"/\"))\r\n    return additionalPath;\r\n  return `${initialPath}${separator}${additionalPath}`;\r\n}\r\n\r\n/** Compare two values for equality, recursing into arrays and object fields. */\r\nfunction areEqual(a: any, b: any): boolean {\r\n  if (typeof a !== typeof b)\r\n    return false;\r\n\r\n  if (Array.isArray(a) && Array.isArray(b)) {\r\n    if (a.length !== b.length)\r\n      return false;\r\n\r\n    for (let i = 0; i < a.length; i++)\r\n      if (!areEqual(a[i], b[i]))\r\n        return false;\r\n\r\n    return true;\r\n  }\r\n\r\n  if (typeof a === \"object\")\r\n    return areObjectsEqual(a, b as object);\r\n\r\n  return a === b;\r\n}\r\n\r\n/** Compare the fields of each object for equality. */\r\nfunction areObjectsEqual(a: object, b: object): boolean {\r\n  if (Object.keys(a).length !== Object.keys(b).length)\r\n    return false;\r\n\r\n  const ob = b as { [key: string]: any };\r\n  for (const [key, value] of Object.entries(a))\r\n    if (!areEqual(value, ob[key]))\r\n      return false;\r\n\r\n  return true;\r\n}\r\n",
      "start": 1693508121029,
      "end": 1693508121180,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nimport { assert } from \"@itwin/core-bentley\";\nimport {\n  ColorDef,\n  Hilite\n} from \"@itwin/core-common\";\nexport const defaultHilite = new Hilite.Settings();\nexport const defaultEmphasis = new Hilite.Settings(ColorDef.black, 0, 0, Hilite.Silhouette.Thick);\nexport const isWindows = window.navigator.userAgent.toLowerCase().includes(\"win\");\nexport const separator = isWindows ? \"\\\\\" : \"/\";\nexport class TestConfig {\n  /** Construct a new TestConfig with properties initialized by following priority:\n   *  As defined by `props`; or\n   *  as defined by `prevConfig` if not defined by props; or\n   *  to default values if not defined by prevConfig or prevConfig is not supplied.\n   */\n  constructor(props, prevConfig) {\n    this.view = props.view ?? prevConfig?.view ?? { width: 1e3, height: 1e3 };\n    this.numRendersToTime = props.numRendersToTime ?? prevConfig?.numRendersToTime ?? 100;\n    this.numRendersToSkip = props.numRendersToSkip ?? prevConfig?.numRendersToSkip ?? 50;\n    this.outputName = props.outputName ?? prevConfig?.outputName ?? \"performanceResults.csv\";\n    this.outputPath = prevConfig?.outputPath ?? (isWindows ? \"D:\\\\output\\\\performanceData\\\\\" : \"/Users/\");\n    this.iModelLocation = prevConfig?.iModelLocation ?? \"\";\n    this.iModelName = props.iModelName ?? prevConfig?.iModelName ?? \"*\";\n    this.iModelId = props.iModelId ?? prevConfig?.iModelId;\n    this.iTwinId = props.iTwinId ?? prevConfig?.iTwinId;\n    this.csvFormat = props.csvFormat ?? prevConfig?.csvFormat ?? \"original\";\n    this.viewName = props.viewName ?? props.extViewName ?? prevConfig?.viewName ?? prevConfig?.extViewName ?? \"*\";\n    this.extViewName = props.extViewName;\n    this.testType = props.testType ?? prevConfig?.testType ?? \"timing\";\n    this.savedViewType = props.savedViewType?.toLowerCase() ?? prevConfig?.savedViewType ?? \"both\";\n    this.renderOptions = prevConfig?.renderOptions ? { ...prevConfig.renderOptions } : { useWebGL2: true, dpiAwareLOD: true };\n    this.filenameOptsToIgnore = props.filenameOptsToIgnore ?? prevConfig?.filenameOptsToIgnore;\n    this.displayStyle = props.displayStyle ?? prevConfig?.displayStyle;\n    this.hyperModeling = props.hyperModeling ?? prevConfig?.hyperModeling;\n    this.useDisjointTimer = props.useDisjointTimer ?? prevConfig?.useDisjointTimer ?? true;\n    this.onException = props.onException ?? prevConfig?.onException;\n    this.frontendTilesUrlTemplate = props.frontendTilesUrlTemplate ?? prevConfig?.frontendTilesUrlTemplate;\n    if (prevConfig) {\n      if (prevConfig.viewStateSpec) {\n        this.viewStateSpec = { name: prevConfig.viewStateSpec.name, viewProps: prevConfig.viewStateSpec.viewProps };\n      }\n      this.hilite = prevConfig.hilite;\n      this.emphasis = prevConfig.emphasis;\n      if (prevConfig.backgroundMap)\n        this.backgroundMap = { ...prevConfig.backgroundMap };\n      if (prevConfig.tileProps)\n        this.tileProps = { ...prevConfig.tileProps };\n      if (prevConfig.viewFlags)\n        this.viewFlags = { ...prevConfig.viewFlags };\n    } else if (props.argOutputPath) {\n      this.outputPath = props.argOutputPath;\n    }\n    if (props.iModelLocation)\n      this.iModelLocation = combineFilePaths(props.iModelLocation, this.iModelLocation);\n    if (props.outputPath)\n      this.outputPath = combineFilePaths(props.outputPath, this.outputPath);\n    if (props.viewString) {\n      this.viewStateSpec = {\n        name: props.viewString._name,\n        viewProps: JSON.parse(props.viewString._viewStatePropsString)\n      };\n      if (props.viewString._overrideElements)\n        this.viewStateSpec.elementOverrides = JSON.parse(props.viewString._overrideElements);\n      if (props.viewString._selectedElements)\n        this.viewStateSpec.selectedElements = JSON.parse(props.viewString._selectedElements);\n    }\n    if (props.renderOptions) {\n      const options = merge(this.renderOptions, props.renderOptions);\n      assert(options !== void 0);\n      this.renderOptions = options;\n    }\n    this.tileProps = merge(this.tileProps, props.tileProps);\n    this.backgroundMap = merge(this.backgroundMap, props.backgroundMap);\n    this.viewFlags = merge(this.viewFlags, props.viewFlags);\n    if (props.hilite)\n      this.hilite = hiliteSettings(this.hilite ?? defaultHilite, props.hilite);\n    if (props.emphasis)\n      this.emphasis = hiliteSettings(this.emphasis ?? defaultEmphasis, props.emphasis);\n  }\n  /** Returns true if IModelApp must be restarted when transitioning from this config to the specified config. */\n  requiresRestart(newConfig) {\n    if (!areObjectsEqual(this.renderOptions, newConfig.renderOptions))\n      return true;\n    if (!this.tileProps || !newConfig.tileProps)\n      return void 0 !== this.tileProps || void 0 !== newConfig.tileProps;\n    return !areObjectsEqual(this.tileProps, newConfig.tileProps);\n  }\n}\nexport class TestConfigStack {\n  constructor(base) {\n    this._stack = [];\n    this._stack.push(base);\n  }\n  get top() {\n    assert(this._stack.length > 0);\n    return this._stack[this._stack.length - 1];\n  }\n  // Push to the top of the stack\n  push(props) {\n    const config = new TestConfig(props, this.top);\n    this._stack.push(config);\n  }\n  pop() {\n    assert(this._stack.length > 1);\n    this._stack.pop();\n  }\n}\nfunction hiliteSettings(settings, props) {\n  const colors = settings.color.colors;\n  const color = ColorDef.from(props?.red ?? colors.r, props?.green ?? colors.g, props?.blue ?? colors.b, 0);\n  return new Hilite.Settings(color, props.visibleRatio ?? settings.visibleRatio, props.hiddenRatio ?? settings.hiddenRatio, props.silhouette ?? settings.silhouette);\n}\nfunction merge(first, second) {\n  if (!first)\n    return second;\n  else if (!second)\n    return first;\n  else\n    return { ...first, ...second };\n}\nfunction combineFilePaths(additionalPath, initialPath) {\n  if (initialPath.length === 0 || isWindows && additionalPath[1] === \":\" || !isWindows && additionalPath[0] === \"/\")\n    return additionalPath;\n  return `${initialPath}${separator}${additionalPath}`;\n}\nfunction areEqual(a, b) {\n  if (typeof a !== typeof b)\n    return false;\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length)\n      return false;\n    for (let i = 0; i < a.length; i++)\n      if (!areEqual(a[i], b[i]))\n        return false;\n    return true;\n  }\n  if (typeof a === \"object\")\n    return areObjectsEqual(a, b);\n  return a === b;\n}\nfunction areObjectsEqual(a, b) {\n  if (Object.keys(a).length !== Object.keys(b).length)\n    return false;\n  const ob = b;\n  for (const [key, value] of Object.entries(a))\n    if (!areEqual(value, ob[key]))\n      return false;\n  return true;\n}\n",
      "start": 1693508121180,
      "end": 1693508121494,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-performance-test-app/src/frontend/TestConfig.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { assert, Id64Array, Id64String } from \"@itwin/core-bentley\";\r\nimport {\r\n  BackgroundMapProps, ColorDef, Hilite, RenderMode, ViewFlags, ViewStateProps,\r\n} from \"@itwin/core-common\";\r\nimport { RenderSystem, TileAdmin } from \"@itwin/core-frontend\";\r\n\r\n/** Dimensions of the Viewport for a TestConfig. */\r\nexport interface ViewSize {\r\n  readonly width: number;\r\n  readonly height: number;\r\n}\r\n\r\n/** Selectively overrides individual ViewFlags for a TestConfig.\r\n * @note renderMode can be a string \"wireframe\", \"hiddenline\", \"solidfill\", or \"smoothshade\" (case-insensitive).\r\n */\r\nexport type ViewFlagProps = Partial<Omit<ViewFlags, \"renderMode\">> & { renderMode?: string | RenderMode };\r\n\r\n/** The types of saved views to include in a TestConfig. Case-insensitive in TestConfigProps; always lower-case in TestConfig.\r\n * local and internal mean exactly the same thing - include all persistent views from the iModel, including private ones.\r\n * external means to include external saved views from a *_ESV.json file\r\n * both means to include both types.\r\n */\r\nexport type SavedViewType = \"both\" | \"external\" | \"internal\" | \"local\";\r\n\r\n/** The type(s) of tests specified by a TestConfig.\r\n * timing means to record and output timing for drawing to the screen.\r\n * readPixels means to record and output timing for drawing to an offscreen framebuffer for reading pixel data.\r\n * image means to save an image of the screen.\r\n * both means to do \"timing\" and \"image\".\r\n */\r\nexport type TestType = \"timing\" | \"readPixels\" | \"image\" | \"both\";\r\n\r\n/** Specifies symbology overrides to apply to elements in a TestConfig. */\r\nexport interface ElementOverrideProps {\r\n  /** The Id of the affected element, or \"-default-\" to apply to all elements not otherwise overridden. */\r\n  id: Id64String | \"-default-\";\r\n  /** The symbology overrides to apply. */\r\n  fsa: string; // A stringified FeatureAppearanceProps. Why is all the JSON double-stringified???\r\n}\r\n\r\n/** JSON representation of a ViewState with some additional data used by external saved views in a *_ESV.json file and by TestConfigProps.viewString. */\r\nexport interface ViewStateSpecProps {\r\n  _name: string; // eslint-disable-line @typescript-eslint/naming-convention\r\n  _viewStatePropsString: string; // eslint-disable-line @typescript-eslint/naming-convention\r\n  _overrideElements?: string; // eslint-disable-line @typescript-eslint/naming-convention\r\n  _selectedElements?: string; // eslint-disable-line @typescript-eslint/naming-convention\r\n}\r\n\r\n/** Parsed in-memory representation of a ViewStateSpecProps. */\r\nexport interface ViewStateSpec {\r\n  name: string;\r\n  viewProps: ViewStateProps;\r\n  elementOverrides?: ElementOverrideProps[];\r\n  selectedElements?: Id64String | Id64Array;\r\n}\r\n\r\n/** Overrides aspects of the Hilite.Settings used for emphasis or hilite in a TestConfig. */\r\nexport interface HiliteProps {\r\n  visibleRatio?: number;\r\n  hiddenRatio?: number;\r\n  silhouette?: Hilite.Silhouette;\r\n  red?: number;\r\n  green?: number;\r\n  blue?: number;\r\n}\r\n\r\n/** Specifies how to apply hypermodeling in a TestConfig. */\r\nexport interface HyperModelingProps {\r\n  /** The Id of the [SectionDrawingLocation]($backend) element from which the section view and 2d section graphics are obtained. */\r\n  sectionDrawingLocationId: Id64String;\r\n  /** If true, the spatial view associated with the section drawing location will be applied before the test is executed.\r\n   * This essentially overrides the view defined by TestConfig's viewName, extViewName, and viewString properties. However,\r\n   * the spatial view is applied before other properties like viewFlags, backgroundMap, etc, so those can still override aspects of\r\n   * the view.\r\n   * If not true, only the clip and 2d section graphics from the section drawing location are applied to the viewport.\r\n   */\r\n  applySpatialView?: boolean;\r\n}\r\n\r\n/** JSON representation of a TestConfig. */\r\nexport interface TestConfigProps {\r\n  /** The default output path. Not stored in the JSON file but supplied by the backend for the base config. Ignored if outputPath is defined. */\r\n  argOutputPath?: string;\r\n  /** The dimensions of the viewport.\r\n   * Default: 1000x1000.\r\n   */\r\n  view?: ViewSize;\r\n  /** The number of frames to draw while recording timings. Timings are averaged over these frames.\r\n   * Default: 50\r\n   */\r\n  numRendersToTime?: number;\r\n  /** The number of frames to draw without recording timings, to prime the system so that recorded timings are more consistent.\r\n   * Default: 100\r\n   */\r\n  numRendersToSkip?: number;\r\n  /** The name of the output .csv file to contain the recorded timing data.\r\n   * Default: performanceResults.csv\r\n   */\r\n  outputName?: string;\r\n  /** The directory to contain output like the .csv file containing timing data, saved images, log files, etc.\r\n   * Default: d:\\output\\performanceData\\\r\n   */\r\n  outputPath?: string;\r\n  /** The url template for @itwin/frontend-tiles to obtain tile trees for spatial views, served over localhost.\r\n   * The string can include special tokens: {iModel.key} or {iModel.filename}.\r\n   *   e.g.: http://localhost:8080{iModel.key}-tiles/3dft/ or http://localhost:8080/MshX/{iModel.filename}/\r\n   * These will get replaced by the value of iModel.key or just the filename of that (no path or extension), correspondingly.\r\n   * Note that the contents of iModel.key in DPTA is a GUID.\r\n   */\r\n  frontendTilesUrlTemplate?: string;\r\n  /** The location of the iModel file(s) used by the test.\r\n   * Default: \"\"\r\n   */\r\n  iModelLocation?: string;\r\n  /** The name of the iModel(s) to test. Can include wildcards.\r\n   * Default: \"*\"\r\n   */\r\n  iModelName?: string;\r\n  /** The ID of the iModel if it should be downloaded from iModelHub. */\r\n  iModelId?: string;\r\n  /** The ID of the iTwin project from which to obtain the iModel. */\r\n  iTwinId?: string;\r\n  /** The format in which to output the timing data. See DisplayPerfRpcImpl.saveCsv - only \"original\" is treated specially.\r\n   * Default: \"original\".\r\n   */\r\n  csvFormat?: string;\r\n  /** Substrings to omit from generated file names. See removeOptsFromString. */\r\n  filenameOptsToIgnore?: string[] | string;\r\n  /** The name of the view(s) to test. Can include wildcards.\r\n   * Default: \"*\"\r\n   */\r\n  viewName?: string;\r\n  /** The name of an external saved view to test. Supersedes viewName if defined. */\r\n  extViewName?: string;\r\n  /** The type of test(s) to run. */\r\n  testType?: TestType;\r\n  /** The name (Code value) of a display style to apply to the view. */\r\n  displayStyle?: string;\r\n  /** Overrides for selected ViewFlags to apply to the view. */\r\n  viewFlags?: ViewFlagProps;\r\n  /** Selectively overrides how the background map is drawn. */\r\n  backgroundMap?: BackgroundMapProps;\r\n  /** Selectively overrides options used to initialize the RenderSystem. */\r\n  renderOptions?: RenderSystem.Options;\r\n  /** Selectively overrides options used to initialize the TileAdmin. */\r\n  tileProps?: TileAdmin.Props;\r\n  hilite?: HiliteProps;\r\n  emphasis?: HiliteProps;\r\n  /** The type(s) of saved views to include. */\r\n  savedViewType?: SavedViewType;\r\n  /** An object (not a string) describing a non-persistent view. Supersedes viewName if defined. */\r\n  viewString?: ViewStateSpecProps;\r\n  /** Specifies hypermodeling settings applied to the view. */\r\n  hyperModeling?: HyperModelingProps;\r\n  /** Specifies if EXT_disjoint_timer_query extension is used to collect GPU data */\r\n  useDisjointTimer?: boolean;\r\n  /** Describes how to react to an otherwise uncaught exception during a test.\r\n   *  - \"terminate\" => log the exception and terminate immediately.\r\n   *  - undefined => log the exception and continue to next test.\r\n   * Logged exceptions will include the string \"DPTA_EXCEPTION\" for easy grepping.\r\n   */\r\n  onException?: \"terminate\";\r\n}\r\n\r\nexport const defaultHilite = new Hilite.Settings();\r\nexport const defaultEmphasis = new Hilite.Settings(ColorDef.black, 0, 0, Hilite.Silhouette.Thick);\r\nexport const isWindows = window.navigator.userAgent.toLowerCase().includes(\"win\");\r\nexport const separator = isWindows ? \"\\\\\" : \"/\";\r\n\r\n/** Configures how one or more tests are run. A Test belongs to a TestSet and can test multiple iModels and views thereof.\r\n * A single base config is supplied by the backend.\r\n * Each TestSet can override aspects of that base config.\r\n * Each Test within a TestSet receives the TestSet's config and can override aspects of it.\r\n * Most properties have the same meanings as those in TestConfigProps.\r\n */\r\nexport class TestConfig {\r\n  public readonly view: ViewSize;\r\n  public readonly numRendersToTime: number;\r\n  public readonly numRendersToSkip: number;\r\n  public readonly outputName: string;\r\n  public readonly outputPath: string;\r\n  public iModelName: string;\r\n  public frontendTilesUrlTemplate?: string;\r\n  public urlStr?: string;\r\n  public readonly iModelId?: string;\r\n  public readonly iTwinId?: string;\r\n  public viewName: string;\r\n  public readonly testType: TestType;\r\n  public readonly csvFormat: string;\r\n  public readonly renderOptions: RenderSystem.Options;\r\n  public readonly savedViewType: SavedViewType;\r\n  public readonly iModelLocation: string;\r\n  public readonly useDisjointTimer: boolean;\r\n\r\n  public readonly extViewName?: string;\r\n  public readonly displayStyle?: string;\r\n  public readonly viewFlags?: ViewFlagProps;\r\n  public readonly tileProps?: TileAdmin.Props;\r\n  public readonly hilite?: Hilite.Settings;\r\n  public readonly emphasis?: Hilite.Settings;\r\n\r\n  /** A string representation of a ViewState, produced from TestConfigProps.viewString. */\r\n  public readonly viewStateSpec?: ViewStateSpec;\r\n  public readonly filenameOptsToIgnore?: string[] | string;\r\n  public readonly backgroundMap?: BackgroundMapProps;\r\n  public readonly hyperModeling?: HyperModelingProps;\r\n  public readonly onException?: \"terminate\";\r\n\r\n  /** Construct a new TestConfig with properties initialized by following priority:\r\n   *  As defined by `props`; or\r\n   *  as defined by `prevConfig` if not defined by props; or\r\n   *  to default values if not defined by prevConfig or prevConfig is not supplied.\r\n   */\r\n  public constructor(props: TestConfigProps, prevConfig?: TestConfig) {\r\n    this.view = props.view ?? prevConfig?.view ?? { width: 1000, height: 1000 };\r\n    this.numRendersToTime = props.numRendersToTime ?? prevConfig?.numRendersToTime ?? 100;\r\n    this.numRendersToSkip = props.numRendersToSkip ?? prevConfig?.numRendersToSkip ?? 50;\r\n    this.outputName = props.outputName ?? prevConfig?.outputName ?? \"performanceResults.csv\";\r\n    this.outputPath = prevConfig?.outputPath ?? (isWindows ? \"D:\\\\output\\\\performanceData\\\\\" : \"/Users/\");\r\n    this.iModelLocation = prevConfig?.iModelLocation ?? \"\";\r\n    this.iModelName = props.iModelName ?? prevConfig?.iModelName ?? \"*\";\r\n    this.iModelId = props.iModelId ?? prevConfig?.iModelId;\r\n    this.iTwinId = props.iTwinId ?? prevConfig?.iTwinId;\r\n    this.csvFormat = props.csvFormat ?? prevConfig?.csvFormat ?? \"original\";\r\n    this.viewName = props.viewName ?? props.extViewName ?? prevConfig?.viewName ?? prevConfig?.extViewName ?? \"*\";\r\n    this.extViewName = props.extViewName;\r\n    this.testType = props.testType ?? prevConfig?.testType ?? \"timing\";\r\n    this.savedViewType = (props.savedViewType?.toLowerCase() as SavedViewType) ?? prevConfig?.savedViewType ?? \"both\";\r\n    this.renderOptions = prevConfig?.renderOptions ? { ...prevConfig.renderOptions } : { useWebGL2: true, dpiAwareLOD: true };\r\n    this.filenameOptsToIgnore = props.filenameOptsToIgnore ?? prevConfig?.filenameOptsToIgnore;\r\n    this.displayStyle = props.displayStyle ?? prevConfig?.displayStyle;\r\n    this.hyperModeling = props.hyperModeling ?? prevConfig?.hyperModeling;\r\n    this.useDisjointTimer = props.useDisjointTimer ?? prevConfig?.useDisjointTimer ?? true;\r\n    this.onException = props.onException ?? prevConfig?.onException;\r\n    this.frontendTilesUrlTemplate = props.frontendTilesUrlTemplate ?? prevConfig?.frontendTilesUrlTemplate;\r\n\r\n    if (prevConfig) {\r\n      if (prevConfig.viewStateSpec) {\r\n        // Don't preserve selected elements or appearance overrides.\r\n        this.viewStateSpec = { name: prevConfig.viewStateSpec.name, viewProps: prevConfig.viewStateSpec.viewProps };\r\n      }\r\n\r\n      this.hilite = prevConfig.hilite;\r\n      this.emphasis = prevConfig.emphasis;\r\n\r\n      if (prevConfig.backgroundMap)\r\n        this.backgroundMap = { ...prevConfig.backgroundMap };\r\n\r\n      if (prevConfig.tileProps)\r\n        this.tileProps = { ...prevConfig.tileProps };\r\n\r\n      if (prevConfig.viewFlags)\r\n        this.viewFlags = { ...prevConfig.viewFlags };\r\n\r\n    } else if (props.argOutputPath) {\r\n      this.outputPath = props.argOutputPath;\r\n    }\r\n\r\n    if (props.iModelLocation)\r\n      this.iModelLocation = combineFilePaths(props.iModelLocation, this.iModelLocation);\r\n\r\n    if (props.outputPath)\r\n      this.outputPath = combineFilePaths(props.outputPath, this.outputPath);\r\n\r\n    if (props.viewString) {\r\n      this.viewStateSpec = {\r\n        name: props.viewString._name,\r\n        viewProps: JSON.parse(props.viewString._viewStatePropsString),\r\n      };\r\n\r\n      if (props.viewString._overrideElements)\r\n        this.viewStateSpec.elementOverrides = JSON.parse(props.viewString._overrideElements);\r\n\r\n      if (props.viewString._selectedElements)\r\n        this.viewStateSpec.selectedElements = JSON.parse(props.viewString._selectedElements);\r\n    }\r\n\r\n    if (props.renderOptions) {\r\n      const options = merge(this.renderOptions, props.renderOptions);\r\n      assert(options !== undefined);\r\n      this.renderOptions = options;\r\n    }\r\n\r\n    this.tileProps = merge(this.tileProps, props.tileProps);\r\n    this.backgroundMap = merge(this.backgroundMap, props.backgroundMap);\r\n    this.viewFlags = merge(this.viewFlags, props.viewFlags);\r\n\r\n    if (props.hilite)\r\n      this.hilite = hiliteSettings(this.hilite ?? defaultHilite, props.hilite);\r\n\r\n    if (props.emphasis)\r\n      this.emphasis = hiliteSettings(this.emphasis ?? defaultEmphasis, props.emphasis);\r\n  }\r\n\r\n  /** Returns true if IModelApp must be restarted when transitioning from this config to the specified config. */\r\n  public requiresRestart(newConfig: TestConfig): boolean {\r\n    if (!areObjectsEqual(this.renderOptions, newConfig.renderOptions))\r\n      return true;\r\n\r\n    if (!this.tileProps || !newConfig.tileProps)\r\n      return undefined !== this.tileProps || undefined !== newConfig.tileProps;\r\n\r\n    return !areObjectsEqual(this.tileProps, newConfig.tileProps);\r\n  }\r\n}\r\n\r\n/** Maintains a stack of TestConfigs such that entries pushed on the stack inherit properties from the entry currently on the top of the stack. */\r\nexport class TestConfigStack {\r\n  private readonly _stack: TestConfig[] = [];\r\n\r\n  public constructor(base: TestConfig) {\r\n    this._stack.push(base);\r\n  }\r\n\r\n  public get top(): TestConfig {\r\n    assert(this._stack.length > 0);\r\n    return this._stack[this._stack.length - 1];\r\n  }\r\n\r\n  // Push to the top of the stack\r\n  public push(props: TestConfigProps): void {\r\n    const config = new TestConfig(props, this.top);\r\n    this._stack.push(config);\r\n  }\r\n\r\n  public pop(): void {\r\n    assert(this._stack.length > 1); // never pop the base of the stack.\r\n    this._stack.pop();\r\n  }\r\n}\r\n\r\n/** Override properties of settings with those defined by props. */\r\nfunction hiliteSettings(settings: Hilite.Settings, props: HiliteProps): Hilite.Settings {\r\n  const colors = settings.color.colors;\r\n  const color = ColorDef.from(props?.red ?? colors.r, props?.green ?? colors.g, props?.blue ?? colors.b, 0);\r\n  return new Hilite.Settings(color, props.visibleRatio ?? settings.visibleRatio, props.hiddenRatio ?? settings.hiddenRatio, props.silhouette ?? settings.silhouette);\r\n}\r\n\r\n/** Merge two objects of type T such that any property defined by second overrides the value supplied for that property by first.\r\n * The inputs are not modified - a new object is returned if two objects are supplied.\r\n */\r\nfunction merge<T extends object>(first: T | undefined, second: T | undefined): T | undefined {\r\n  if (!first)\r\n    return second;\r\n  else if (!second)\r\n    return first;\r\n  else\r\n    return { ...first, ...second };\r\n}\r\n\r\n/** Combine two file paths. e.g., combineFilePaths(\"images/img.png\", \"/usr/tmp\") returns \"/usr/tmp/images/img.png\".\r\n * If isWindows & additionalPath begins with a drive letter, initialPath is ignored.\r\n * If !isWindows & additionalPath begins with \"/\", initialPath is ignored.\r\n */\r\nfunction combineFilePaths(additionalPath: string, initialPath: string): string {\r\n  if (initialPath.length === 0 || (isWindows && additionalPath[1] === \":\") || (!isWindows && additionalPath[0] === \"/\"))\r\n    return additionalPath;\r\n  return `${initialPath}${separator}${additionalPath}`;\r\n}\r\n\r\n/** Compare two values for equality, recursing into arrays and object fields. */\r\nfunction areEqual(a: any, b: any): boolean {\r\n  if (typeof a !== typeof b)\r\n    return false;\r\n\r\n  if (Array.isArray(a) && Array.isArray(b)) {\r\n    if (a.length !== b.length)\r\n      return false;\r\n\r\n    for (let i = 0; i < a.length; i++)\r\n      if (!areEqual(a[i], b[i]))\r\n        return false;\r\n\r\n    return true;\r\n  }\r\n\r\n  if (typeof a === \"object\")\r\n    return areObjectsEqual(a, b as object);\r\n\r\n  return a === b;\r\n}\r\n\r\n/** Compare the fields of each object for equality. */\r\nfunction areObjectsEqual(a: object, b: object): boolean {\r\n  if (Object.keys(a).length !== Object.keys(b).length)\r\n    return false;\r\n\r\n  const ob = b as { [key: string]: any };\r\n  for (const [key, value] of Object.entries(a))\r\n    if (!areEqual(value, ob[key]))\r\n      return false;\r\n\r\n  return true;\r\n}\r\n"
        ],
        "mappings": "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",
        "names": []
      }
    }
  ]
}
