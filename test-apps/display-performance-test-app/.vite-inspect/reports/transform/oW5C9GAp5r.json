{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/bentley/lib/esm/UnexpectedErrors.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Errors\n */\nvar _a;\nimport { Logger } from \"./Logger\";\n/**\n * Utility for handling/reporting unexpected runtime errors. This class establishes a global handler for\n * unexpected errors, and programmers should use its `handle` method when they occur. Generally, unexpected\n * errors should not cause program termination, and should instead be logged and swallowed. However, for\n * development/debugging, it can be helpful to re-throw exceptions so they are not missed.\n * @public\n */\nclass UnexpectedErrors {\n    constructor() { } // this is a singleton\n    /** Add a \"telemetry tracker\" for unexpected errors. Useful for tracking/reporting errors without changing handler.\n     * @returns a method to remove the tracker\n     */\n    static addTelemetry(tracker) {\n        this._telemetry.push(tracker);\n        return () => this._telemetry.splice(this._telemetry.indexOf(tracker), 1);\n    }\n    /** call this method when an unexpected error happens so the global handler can process it.\n     * @param error the unexpected error\n     * @param notifyTelemetry if false, don't notify telemetry trackers. Use this for exceptions from third-party code, for example.\n     */\n    static handle(error, notifyTelemetry = true) {\n        this._handler(error);\n        if (notifyTelemetry) {\n            this._telemetry.forEach((telemetry) => {\n                try {\n                    telemetry(error);\n                }\n                catch (_) {\n                    // ignore errors from telemetry trackers\n                }\n            });\n        }\n    }\n    /** establish a new global *unexpected error* handler.\n     * @param handler the new global handler. You may provide your own function or use one of the static members of this class.\n     * The default is [[errorLog]].\n     * @returns the previous handler. Useful to temporarily change the handler.\n     */\n    static setHandler(handler) {\n        const oldHandler = this._handler;\n        this._handler = handler;\n        return oldHandler;\n    }\n}\n_a = UnexpectedErrors;\n/** handler for re-throwing exceptions directly */\nUnexpectedErrors.reThrowImmediate = (e) => { throw e; };\n/** handler for re-throwing exceptions from an asynchronous interval (so the current call stack is not aborted) */\nUnexpectedErrors.reThrowDeferred = (e) => setTimeout(() => { throw e; }, 0);\n/** handler for logging exception to console */\nUnexpectedErrors.consoleLog = (e) => console.error(e); // eslint-disable-line no-console\n/** handler for logging exception with [[Logger]] */\nUnexpectedErrors.errorLog = (e) => Logger.logException(\"unhandled\", e);\nUnexpectedErrors._telemetry = [];\nUnexpectedErrors._handler = _a.errorLog; // default to error logging\nexport { UnexpectedErrors };\n//# sourceMappingURL=UnexpectedErrors.js.map",
      "start": 1693508120449,
      "end": 1693508120497,
      "sourcemaps": null
    }
  ]
}
