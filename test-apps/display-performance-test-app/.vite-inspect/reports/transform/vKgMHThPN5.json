{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/RenderMaterial.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Rendering\n */\n/** Represents a material which can be applied to a surface to control aspects of its appearance such as color, reflectivity, texture, and so on.\n * @public\n */\nexport class RenderMaterial {\n    // eslint-disable-next-line deprecation/deprecation\n    constructor(params) {\n        this.key = params.key;\n        this.textureMapping = params.textureMapping;\n    }\n    get hasTexture() {\n        return undefined !== this.textureMapping?.texture;\n    }\n}\n/** @public */\n(function (RenderMaterial) {\n    function clampToNormalizedRange(value) {\n        return Math.max(0.0, Math.min(1.0, value));\n    }\n    /** @deprecated in 3.x. Use [CreateRenderMaterialArgs]($frontend). */\n    class Params {\n        constructor(key) {\n            /** Diffuse weight in [0..1] */\n            this.diffuse = 0.6;\n            /** Specular weight in [0..1] */\n            this.specular = 0.4;\n            this.specularExponent = 13.5;\n            /** Currently unused. @alpha */\n            this.reflect = 0.0;\n            /** Currently unused. @alpha */\n            this.refract = 1.0;\n            /** Currently unused. @alpha */\n            this.ambient = .3;\n            /** Currently unused. @alpha */\n            this.shadows = true;\n            this.key = key;\n        }\n        /** A value from 0.0 (fully-transparent) to 1.0 (fully-opaque) controlling the transparency of surfaces to which this material is applied;\n         * or undefined if this material does not override surface transparency.\n         */\n        get alpha() { return this._alpha; }\n        set alpha(alpha) {\n            this._alpha = undefined !== alpha ? clampToNormalizedRange(alpha) : undefined;\n        }\n        /** Create a RenderMaterial params object using specified key and ColorDef values, as well as an optional texture mapping. */\n        // eslint-disable-next-line deprecation/deprecation\n        static fromColors(key, diffuseColor, specularColor, emissiveColor, reflectColor, textureMap) {\n            // eslint-disable-next-line deprecation/deprecation\n            const materialParams = new Params();\n            materialParams.key = key;\n            materialParams.diffuseColor = diffuseColor;\n            materialParams.specularColor = specularColor;\n            materialParams.emissiveColor = emissiveColor;\n            materialParams.reflectColor = reflectColor;\n            materialParams.textureMapping = textureMap;\n            return materialParams;\n        }\n    }\n    /** Obtain an immutable instance of a RenderMaterial with all default properties. */\n    // eslint-disable-next-line deprecation/deprecation\n    Params.defaults = new Params();\n    RenderMaterial.Params = Params;\n})(RenderMaterial || (RenderMaterial = {}));\n// eslint-disable-next-line deprecation/deprecation\nObject.freeze(RenderMaterial.Params.defaults);\n//# sourceMappingURL=RenderMaterial.js.map",
      "start": 1693508120737,
      "end": 1693508120787,
      "sourcemaps": null
    }
  ]
}
