{
  "resolvedId": "D:/hub2023A/itwinjs-core/common/temp/node_modules/.pnpm/@itwin+imodels-client-management@3.1.0/node_modules/@itwin/imodels-client-management/lib/esm/base/internal/AxiosRestClient.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n * Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n * See LICENSE.md in the project root for license terms and full copyright notice.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport axios from \"axios\";\r\nimport { ContentType } from \"../types/RestClient\";\r\n/** Default implementation for {@link RestClient} interface that uses `axios` library for sending the requests. */\r\nexport class AxiosRestClient {\r\n    constructor(parseErrorFunc) {\r\n        this._parseErrorFunc = parseErrorFunc;\r\n    }\r\n    async sendGetRequest(params) {\r\n        const requestConfig = {\r\n            headers: params.headers\r\n        };\r\n        if (params.responseType === ContentType.Png) {\r\n            requestConfig.responseType = \"arraybuffer\";\r\n            const responseData = await this.executeRequest(async () => axios.get(params.url, requestConfig));\r\n            if (responseData instanceof ArrayBuffer)\r\n                return new Uint8Array(responseData);\r\n            return responseData;\r\n        }\r\n        return this.executeRequest(async () => axios.get(params.url, requestConfig));\r\n    }\r\n    async sendPostRequest(params) {\r\n        const requestConfig = {\r\n            headers: params.headers\r\n        };\r\n        return this.executeRequest(async () => { var _a; return axios.post(params.url, (_a = params.body.content) !== null && _a !== void 0 ? _a : {}, requestConfig); });\r\n    }\r\n    async sendPutRequest(params) {\r\n        const requestConfig = {\r\n            headers: params.headers\r\n        };\r\n        return this.executeRequest(async () => axios.put(params.url, params.body.content, requestConfig));\r\n    }\r\n    async sendPatchRequest(params) {\r\n        const requestConfig = {\r\n            headers: params.headers\r\n        };\r\n        return this.executeRequest(async () => { var _a; return axios.patch(params.url, (_a = params.body.content) !== null && _a !== void 0 ? _a : {}, requestConfig); });\r\n    }\r\n    async sendDeleteRequest(params) {\r\n        const requestConfig = {\r\n            headers: params.headers\r\n        };\r\n        return this.executeRequest(async () => axios.delete(params.url, requestConfig));\r\n    }\r\n    async executeRequest(requestFunc) {\r\n        var _a, _b;\r\n        try {\r\n            const response = await requestFunc();\r\n            return response.data;\r\n        }\r\n        catch (error) {\r\n            if (axios.isAxiosError(error)) {\r\n                const parsedError = this._parseErrorFunc({ statusCode: (_a = error.response) === null || _a === void 0 ? void 0 : _a.status, body: (_b = error.response) === null || _b === void 0 ? void 0 : _b.data }, error);\r\n                throw parsedError;\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=AxiosRestClient.js.map",
      "start": 1693508123983,
      "end": 1693508124101,
      "sourcemaps": null
    }
  ]
}
