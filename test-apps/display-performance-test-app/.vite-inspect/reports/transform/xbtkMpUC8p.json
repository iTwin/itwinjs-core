{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/system/storage/UrlFS.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { AList } from \"../collection/AList\";\nimport { StringMap } from \"../collection/StringMap\";\nimport { ALong } from \"../runtime/ALong\";\nimport { ASystem } from \"../runtime/ASystem\";\nimport { Downloader } from \"../runtime/Downloader\";\nimport { FileContent } from \"./FileContent\";\nimport { FileStorage } from \"./FileStorage\";\n/**\n * Class UrlFS provides access to file content using URLs.\n */\n/** @internal */\nexport class UrlFS extends FileStorage {\n    /**\n       * Create the URL to access a blob file in an Azure storage account.\n       * @param accountName the name of the Azure storage account.\n       * @param containerName the name of the container that stores the blob file.\n       * @param blobName the name of the blob (should start with a forward slash).\n       * @param sasToken the SAS (shared access signature) of the blob or container (the part after the '?' character of the URL).\n       * @return the URL.\n       */\n    static getAzureBlobSasUrl(accountName, containerName, blobName, sasToken) {\n        let blobURL = `https://${accountName}.blob.core.windows.net/${containerName}${blobName}`;\n        if (sasToken != null)\n            blobURL += `?${sasToken}`;\n        return blobURL;\n    }\n    /**\n       * Create a new instance.\n       */\n    constructor() {\n        super();\n        this._downloader = Downloader.INSTANCE;\n        this.requestCount = 0;\n        this.responseSize = 0;\n    }\n    /**\n       * FileStorage method.\n       */\n    close() {\n    }\n    /**\n       * FileStorage method.\n       */\n    async getFileLength(url) {\n        const requestHeaders = null;\n        const responseHeaders = new StringMap();\n        await this._downloader.downloadBytes(\"HEAD\" /* method*/, url, requestHeaders, null /* postText*/, null /* postData*/, responseHeaders);\n        const fileLength = parseInt(responseHeaders.get(\"content-length\"));\n        return ALong.fromDouble(fileLength);\n    }\n    /**\n       * FileStorage method.\n       */\n    async readFilePart(url, offset, size) {\n        const extent = offset.addInt(size - 1);\n        const range = `bytes=${offset.toString()}-${extent.toString()}`;\n        const requestHeaders = new StringMap();\n        requestHeaders.set(\"Range\", range);\n        // requestHeaders.set(\"x-ms-range\",range); // https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-the-range-header-for-file-service-operations\n        const responseHeaders = new StringMap();\n        const content = await this._downloader.downloadBytes(\"GET\" /* method*/, url, requestHeaders, null /* postText*/, null /* postData*/, responseHeaders);\n        const contentLength = parseInt(responseHeaders.get(\"content-length\"));\n        ASystem.assertNot(contentLength != size, `Expected ${size} bytes of content, not ${contentLength}`);\n        ASystem.assertNot(content.size() != size, `Expected content buffer size ${size}, not ${content}`);\n        this.requestCount++;\n        this.responseSize += size;\n        return content;\n    }\n    /**\n       * FileStorage method.\n       */\n    async readFileParts(url, ranges) {\n        /* Request all file parts in parallel */\n        const contentFetchers = [];\n        for (let i = 0; i < ranges.size(); i++) {\n            const range = ranges.get(i);\n            const contentFetcher = this.readFilePart(url, range.offset, range.size);\n            contentFetchers.push(contentFetcher);\n        }\n        /* Await all requests at once */\n        const contentResponses = await Promise.all(contentFetchers);\n        /* Create the result list */\n        const contentParts = new AList();\n        for (let i = 0; i < ranges.size(); i++) {\n            const range = ranges.get(i);\n            const contentResponse = contentResponses[i];\n            contentParts.add(new FileContent(range.offset, contentResponse));\n        }\n        return contentParts;\n    }\n    /**\n       * FileStorage method.\n       */\n    printStatistics(clear) {\n        console.log(\"File url access statistics:\");\n        console.log(`Request count ${this.requestCount}`);\n        console.log(`Response size ${this.responseSize}`);\n        if (clear)\n            this.requestCount = 0;\n        if (clear)\n            this.responseSize = 0;\n    }\n}\n//# sourceMappingURL=UrlFS.js.map",
      "start": 1693508124908,
      "end": 1693508124988,
      "sourcemaps": null
    }
  ]
}
