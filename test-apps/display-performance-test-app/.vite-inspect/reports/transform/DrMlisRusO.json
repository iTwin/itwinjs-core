{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/webgl/glsl/CopyStencil.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module WebGL\n */\nimport { ColorDef, SpatialClassifierInsideDisplay, SpatialClassifierOutsideDisplay } from \"@itwin/core-common\";\nimport { BoundaryType } from \"../CachedGeometry\";\nimport { FloatRgba } from \"../FloatRGBA\";\nimport { TextureUnit } from \"../RenderFlags\";\nimport { Texture2DHandle } from \"../Texture\";\nimport { assignFragColor } from \"./Fragment\";\nimport { createViewportQuadBuilder } from \"./ViewportQuad\";\nconst computehiliteColor = \"return vec4(u_hilite_color.rgb, 1.0);\";\nconst computeSetBlendColor = \"return u_blend_color;\";\nconst computeBlendTextureColor = \"return TEXTURE(u_blendTexture, v_texCoord);\";\nconst computeTexCoord = \"v_texCoord = (rawPosition.xy + 1.0) * 0.5;\";\nconst checkDiscardBackgroundByZ = `\r\n  if (u_boundaryType == kBoundaryType_Out)\r\n    return TEXTURE(u_depthTexture, v_texCoord).r == 1.0;\r\n  return false;\r\n`;\nconst depthFromTexture = \"return TEXTURE(u_depthTexture, v_texCoord).r;\";\nconst scratchColor = FloatRgba.fromColorDef(ColorDef.white);\n/** @internal */\nfunction addBoundaryTypeConstants(builder) {\n    // NB: These are the bit positions of each flag in OvrFlags enum - not the flag values\n    builder.addConstant(\"kBoundaryType_Out\", 1 /* VariableType.Int */, \"0\");\n    builder.addConstant(\"kBoundaryType_In\", 1 /* VariableType.Int */, \"1\");\n    builder.addConstant(\"kBoundaryType_Selected\", 1 /* VariableType.Int */, \"2\");\n}\n/** @internal */\nfunction setScratchColor(display, hilite, hAlpha) {\n    switch (display) {\n        case SpatialClassifierOutsideDisplay.Dimmed:\n            scratchColor.set(0.0, 0.0, 0.0, 0.3);\n            break;\n        case SpatialClassifierOutsideDisplay.Off:\n            scratchColor.set(0.0, 0.0, 0.0, 0.8);\n            break;\n        case SpatialClassifierOutsideDisplay.On:\n            scratchColor.set(0.0, 0.0, 0.0, 0.0);\n            break;\n        default: // Hilite or ByElementColor (though ByElementColor should never use this shader)\n            scratchColor.set(hilite.red, hilite.green, hilite.blue, hAlpha);\n            break;\n    }\n}\n/** @internal */\nexport function createVolClassColorUsingStencilProgram(context) {\n    const builder = createViewportQuadBuilder(false);\n    const frag = builder.frag;\n    frag.set(1 /* FragmentShaderComponent.ComputeBaseColor */, computehiliteColor);\n    frag.set(16 /* FragmentShaderComponent.AssignFragData */, assignFragColor);\n    frag.addUniform(\"u_hilite_color\", 5 /* VariableType.Vec4 */, (prog) => {\n        prog.addGraphicUniform(\"u_hilite_color\", (uniform, params) => {\n            const useLighting = params.geometry.getFlashMode(params);\n            if (useLighting) {\n                const hiliteColor = params.target.uniforms.hilite.hiliteColor;\n                scratchColor.set(hiliteColor.red, hiliteColor.green, hiliteColor.blue, 1.0);\n            }\n            else\n                scratchColor.set(1.0, 1.0, 1.0, 0.0);\n            scratchColor.bind(uniform);\n        });\n    });\n    builder.vert.headerComment = \"//!V! VolClassColorUsingStencil\";\n    builder.frag.headerComment = \"//!F! VolClassColorUsingStencil\";\n    return builder.buildProgram(context);\n}\n/** @internal */\nexport function createVolClassCopyZProgram(context) {\n    const builder = createViewportQuadBuilder(true);\n    builder.addInlineComputedVarying(\"v_texCoord\", 3 /* VariableType.Vec2 */, computeTexCoord); // TODO: I think this is not necessary because it's already added from the create above\n    const frag = builder.frag;\n    frag.set(1 /* FragmentShaderComponent.ComputeBaseColor */, computeSetBlendColor);\n    frag.set(16 /* FragmentShaderComponent.AssignFragData */, assignFragColor);\n    frag.addUniform(\"u_blend_color\", 5 /* VariableType.Vec4 */, (prog) => {\n        prog.addGraphicUniform(\"u_blend_color\", (uniform, _params) => {\n            scratchColor.set(0.0, 0.0, 0.0, 0.0);\n            scratchColor.bind(uniform);\n        });\n    });\n    frag.addUniform(\"u_depthTexture\", 8 /* VariableType.Sampler2D */, (prog) => {\n        prog.addGraphicUniform(\"u_depthTexture\", (uniform, params) => {\n            const geom = params.geometry;\n            Texture2DHandle.bindSampler(uniform, geom.texture, TextureUnit.Zero);\n        });\n    });\n    frag.set(18 /* FragmentShaderComponent.FinalizeDepth */, depthFromTexture);\n    builder.vert.headerComment = \"//!V! VolClassCopyZ\";\n    builder.frag.headerComment = \"//!F! VolClassCopyZ\";\n    return builder.buildProgram(context);\n}\n/** @internal */\nexport function createVolClassSetBlendProgram(context) {\n    const builder = createViewportQuadBuilder(true);\n    builder.addInlineComputedVarying(\"v_texCoord\", 3 /* VariableType.Vec2 */, computeTexCoord);\n    const frag = builder.frag;\n    addBoundaryTypeConstants(frag);\n    frag.set(0 /* FragmentShaderComponent.CheckForEarlyDiscard */, checkDiscardBackgroundByZ);\n    frag.set(1 /* FragmentShaderComponent.ComputeBaseColor */, computeSetBlendColor);\n    frag.set(16 /* FragmentShaderComponent.AssignFragData */, assignFragColor);\n    frag.addUniform(\"u_boundaryType\", 1 /* VariableType.Int */, (prog) => {\n        prog.addGraphicUniform(\"u_boundaryType\", (uniform, params) => {\n            const geom = params.geometry;\n            uniform.setUniform1i(geom.boundaryType);\n        });\n    });\n    frag.addUniform(\"u_blend_color\", 5 /* VariableType.Vec4 */, (prog) => {\n        prog.addGraphicUniform(\"u_blend_color\", (uniform, params) => {\n            const geom = params.geometry;\n            const hiliteColor = params.target.uniforms.hilite.hiliteColor;\n            const hiliteAlpha = params.target.uniforms.hilite.hiliteSettings.visibleRatio;\n            switch (geom.boundaryType) {\n                case BoundaryType.Outside:\n                    setScratchColor(params.target.activeVolumeClassifierProps.flags.outside, hiliteColor, hiliteAlpha);\n                    break;\n                case BoundaryType.Inside:\n                    setScratchColor(params.target.activeVolumeClassifierProps.flags.inside, hiliteColor, hiliteAlpha);\n                    break;\n                case BoundaryType.Selected:\n                    // setScratchColor(params.target.activeVolumeClassifierProps!.flags.selected, hiliteColor, hiliteAlpha);\n                    setScratchColor(SpatialClassifierInsideDisplay.Hilite, hiliteColor, hiliteAlpha); // option for how to display selected classifiers has been removed, always just hilite\n                    break;\n            }\n            scratchColor.bind(uniform);\n        });\n    });\n    frag.addUniform(\"u_depthTexture\", 8 /* VariableType.Sampler2D */, (prog) => {\n        prog.addGraphicUniform(\"u_depthTexture\", (uniform, params) => {\n            const geom = params.geometry;\n            Texture2DHandle.bindSampler(uniform, geom.texture, TextureUnit.Zero);\n        });\n    });\n    builder.vert.headerComment = \"//!V! VolClassSetBlend\";\n    builder.frag.headerComment = \"//!F! VolClassSetBlend\";\n    return builder.buildProgram(context);\n}\n/** @internal */\nexport function createVolClassBlendProgram(context) {\n    const builder = createViewportQuadBuilder(true);\n    builder.addInlineComputedVarying(\"v_texCoord\", 3 /* VariableType.Vec2 */, computeTexCoord);\n    const frag = builder.frag;\n    frag.set(1 /* FragmentShaderComponent.ComputeBaseColor */, computeBlendTextureColor);\n    frag.set(16 /* FragmentShaderComponent.AssignFragData */, assignFragColor);\n    frag.addUniform(\"u_blendTexture\", 8 /* VariableType.Sampler2D */, (prog) => {\n        prog.addGraphicUniform(\"u_blendTexture\", (uniform, params) => {\n            const geom = params.geometry;\n            Texture2DHandle.bindSampler(uniform, geom.texture, TextureUnit.Zero);\n        });\n    });\n    builder.vert.headerComment = \"//!V! VolClassBlend\";\n    builder.frag.headerComment = \"//!F! VolClassBlend\";\n    return builder.buildProgram(context);\n}\n//# sourceMappingURL=CopyStencil.js.map",
      "start": 1693508124648,
      "end": 1693508124773,
      "sourcemaps": null
    }
  ]
}
