{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/RealityDataSourceTilesetUrlImpl.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Tiles\n */\nimport { assert, BentleyStatus } from \"@itwin/core-bentley\";\nimport { IModelError, RealityDataFormat, RealityDataProvider } from \"@itwin/core-common\";\nimport { request } from \"./request/Request\";\nimport { ThreeDTileFormatInterpreter } from \"./tile/internal\";\n/** This class provides access to the reality data provider services.\n * It encapsulates access to a reality data weiter it be from local access, http or ProjectWise Context Share.\n * The key provided at the creation determines if this is ProjectWise Context Share reference.\n * If not then it is considered local (ex: C:\\temp\\TileRoot.json) or plain http access (http://someserver.com/data/TileRoot.json)\n * There is a one to one relationship between a reality data and the instances of present class.\n* @internal\n*/\nexport class RealityDataSourceTilesetUrlImpl {\n    /** Construct a new reality data source.\n     * @param props JSON representation of the reality data source\n     */\n    constructor(props) {\n        /** For use by all Reality Data. For RD stored on PW Context Share, represents the portion from the root of the Azure Blob Container*/\n        this._baseUrl = \"\";\n        assert(props.sourceKey.provider === RealityDataProvider.TilesetUrl || props.sourceKey.provider === RealityDataProvider.OrbitGtBlob);\n        this.key = props.sourceKey;\n        this._tilesetUrl = this.key.id;\n    }\n    /**\n     * Create an instance of this class from a source key and iTwin context/\n     */\n    static async createFromKey(sourceKey, _iTwinId) {\n        if (sourceKey.provider !== RealityDataProvider.TilesetUrl)\n            return undefined;\n        const rdSource = new RealityDataSourceTilesetUrlImpl({ sourceKey });\n        return rdSource;\n    }\n    get isContextShare() {\n        return false;\n    }\n    /**\n     * Returns Reality Data if available\n    */\n    get realityData() {\n        return undefined;\n    }\n    get realityDataId() {\n        return undefined;\n    }\n    /**\n     * Returns Reality Data type if available\n     */\n    get realityDataType() {\n        return undefined;\n    }\n    // This is to set the root url from the provided root document path.\n    // If the root document is stored on PW Context Share then the root document property of the Reality Data is provided,\n    // otherwise the full path to root document is given.\n    // The base URL contains the base URL from which tile relative path are constructed.\n    // The tile's path root will need to be reinserted for child tiles to return a 200\n    setBaseUrl(url) {\n        const urlParts = url.split(\"/\");\n        urlParts.pop();\n        if (urlParts.length === 0)\n            this._baseUrl = \"\";\n        else\n            this._baseUrl = `${urlParts.join(\"/\")}/`;\n    }\n    /**\n     * This method returns the URL to access the actual 3d tiles from the service provider.\n     * @returns string containing the URL to reality data.\n     */\n    async getServiceUrl(_iTwinId) {\n        return this._tilesetUrl;\n    }\n    async getRootDocument(iTwinId) {\n        const url = await this.getServiceUrl(iTwinId);\n        if (!url)\n            throw new IModelError(BentleyStatus.ERROR, \"Unable to get service url\");\n        // The following is only if the reality data is not stored on PW Context Share.\n        this.setBaseUrl(url);\n        return request(url, \"json\");\n    }\n    /**\n     * Returns the tile content. The path to the tile is relative to the base url of present reality data whatever the type.\n     */\n    async getTileContent(name) {\n        const tileUrl = this._baseUrl + name;\n        return request(tileUrl, \"arraybuffer\");\n    }\n    /**\n     * Returns the tile content in json format. The path to the tile is relative to the base url of present reality data whatever the type.\n     */\n    async getTileJson(name) {\n        const tileUrl = this._baseUrl + name;\n        return request(tileUrl, \"json\");\n    }\n    getTileContentType(url) {\n        return url.endsWith(\"json\") ? \"tileset\" : \"tile\";\n    }\n    /**\n     * Gets spatial location and extents of this reality data source\n     * @returns spatial location and extents\n     * @internal\n     */\n    async getSpatialLocationAndExtents() {\n        let spatialLocation;\n        if (this.key.format === RealityDataFormat.ThreeDTile) {\n            const rootDocument = await this.getRootDocument(undefined);\n            spatialLocation = ThreeDTileFormatInterpreter.getSpatialLocationAndExtents(rootDocument);\n        }\n        return spatialLocation;\n    }\n    /**\n     * Gets information to identify the product and engine that create this reality data\n     * Will return undefined if cannot be resolved\n     * @returns information to identify the product and engine that create this reality data\n     * @alpha\n     */\n    async getPublisherProductInfo() {\n        let publisherInfo;\n        return publisherInfo;\n    }\n}\n//# sourceMappingURL=RealityDataSourceTilesetUrlImpl.js.map",
      "start": 1693508122010,
      "end": 1693508122167,
      "sourcemaps": null
    }
  ]
}
