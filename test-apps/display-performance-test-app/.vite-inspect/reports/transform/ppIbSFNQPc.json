{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/geometry/lib/esm/curve/GeometryQuery.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { Range3d } from \"../geometry3d/Range\";\nimport { Transform } from \"../geometry3d/Transform\";\n/**\n * Queries to be supported by Curve, Surface, and Solid objects\n * * `GeometryQuery` is an abstract base class with (abstract) methods for querying curve, solid primitive, mesh,\n * and bspline surfaces\n * @public\n */\nexport class GeometryQuery {\n    /** Return the range of the entire GeometryQuery tree */\n    range(transform, result) {\n        if (result)\n            result.setNull();\n        const range = result ? result : Range3d.createNull();\n        this.extendRange(range, transform);\n        return range;\n    }\n    /** Try to move the geometry by dx,dy,dz */\n    tryTranslateInPlace(dx, dy = 0.0, dz = 0.0) {\n        return this.tryTransformInPlace(Transform.createTranslationXYZ(dx, dy, dz));\n    }\n    /**\n     * Return GeometryQuery children for recursive queries.\n     * * leaf classes do not need to implement.\n     */\n    get children() { return undefined; }\n    /**\n     * Test for exact structure and nearly identical geometry.\n     * *  Leaf classes must implement !!!\n     * *  base class implementation recurses through children.\n     * *  base implementation is complete for classes with children and no properties.\n     * *  classes with both children and properties must implement for properties, call super for children.\n     */\n    isAlmostEqual(other) {\n        if (this.isSameGeometryClass(other)) {\n            const childrenA = this.children;\n            const childrenB = other.children;\n            if (childrenA && childrenB) {\n                if (childrenA.length !== childrenB.length)\n                    return false;\n                for (let i = 0; i < childrenA.length; i++) {\n                    if (!childrenA[i].isAlmostEqual(childrenB[i]))\n                        return false;\n                }\n                return true;\n            }\n            else if (childrenA || childrenB) { // CurveCollections start with empty arrays for children.  So these null pointer cases are never reached.\n                return false; // plainly different .\n            }\n            else {\n                // both children null. call it equal?   This class should probably have implemented.\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Apply instance method [[isAlmostEqual]] if both are defined.\n     * * both undefined returns true\n     * * single defined returns false\n     */\n    static areAlmostEqual(a, b) {\n        if (a instanceof GeometryQuery && b instanceof GeometryQuery)\n            return a.isAlmostEqual(b);\n        if ((a === undefined) && (b === undefined))\n            return true;\n        return false;\n    }\n}\n//# sourceMappingURL=GeometryQuery.js.map",
      "start": 1693508122760,
      "end": 1693508122906,
      "sourcemaps": null
    }
  ]
}
