{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/webgl/MeshGeometry.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module WebGL\n */\nimport { RenderMode } from \"@itwin/core-common\";\nimport { LUTGeometry } from \"./CachedGeometry\";\n/** Defines one aspect of the geometry of a mesh (surface or edges)\n * @internal\n */\nexport class MeshGeometry extends LUTGeometry {\n    get asMesh() { return this; }\n    _getLineWeight(params) { return this.computeEdgeWeight(params); }\n    // Convenience accessors...\n    get edgeWidth() { return this.mesh.edgeWidth; }\n    get edgeLineCode() { return this.mesh.edgeLineCode; }\n    get hasFeatures() { return this.mesh.hasFeatures; }\n    get surfaceType() { return this.mesh.type; }\n    get fillFlags() { return this.mesh.fillFlags; }\n    get isPlanar() { return this.mesh.isPlanar; }\n    get colorInfo() { return this.mesh.lut.colorInfo; }\n    get uniformColor() { return this.colorInfo.isUniform ? this.colorInfo.uniform : undefined; }\n    get texture() { return this.mesh.texture; }\n    get normalMap() { return this.mesh.normalMap; }\n    get hasBakedLighting() { return this.mesh.hasBakedLighting; }\n    get lut() { return this.mesh.lut; }\n    get hasScalarAnimation() { return this.mesh.lut.hasScalarAnimation; }\n    constructor(mesh, numIndices) {\n        super(mesh.viewIndependentOrigin);\n        this._numIndices = numIndices;\n        this.mesh = mesh;\n    }\n    computeEdgeWeight(params) {\n        return params.target.computeEdgeWeight(params.renderPass, this.edgeWidth);\n    }\n    computeEdgeLineCode(params) {\n        return params.target.computeEdgeLineCode(params.renderPass, this.edgeLineCode);\n    }\n    computeEdgeColor(target) {\n        return target.computeEdgeColor(this.colorInfo);\n    }\n    computeEdgePass(target) {\n        if (target.isDrawingShadowMap)\n            return \"none\";\n        const vf = target.currentViewFlags;\n        if (RenderMode.SmoothShade === vf.renderMode && !vf.visibleEdges)\n            return \"none\";\n        // Only want translucent edges in wireframe mode.\n        const isTranslucent = RenderMode.Wireframe === vf.renderMode && vf.transparency && this.colorInfo.hasTranslucency;\n        return isTranslucent ? \"translucent\" : \"opaque-linear\";\n    }\n}\n//# sourceMappingURL=MeshGeometry.js.map",
      "start": 1693508125071,
      "end": 1693508125184,
      "sourcemaps": null
    }
  ]
}
