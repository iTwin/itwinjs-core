{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/webgl/PointCloud.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module WebGL\n */\nimport { assert, dispose } from \"@itwin/core-bentley\";\nimport { FeatureIndexType } from \"@itwin/core-common\";\nimport { AttributeMap } from \"./AttributeMap\";\nimport { CachedGeometry } from \"./CachedGeometry\";\nimport { GL } from \"./GL\";\nimport { BufferHandle, BufferParameters, BuffersContainer, QBufferHandle3d } from \"./AttributeBuffers\";\nimport { System } from \"./System\";\n/** @internal */\nexport class PointCloudGeometry extends CachedGeometry {\n    get isDisposed() { return this.buffers.isDisposed && this._vertices.isDisposed; }\n    get asPointCloud() { return this; }\n    get supportsThematicDisplay() { return true; }\n    get overrideColorMix() { return .5; } // This could be a setting from either the mesh or the override if required.\n    dispose() {\n        dispose(this.buffers);\n        dispose(this._vertices);\n    }\n    constructor(pointCloud) {\n        super();\n        this._colorHandle = undefined;\n        this.buffers = BuffersContainer.create();\n        this._vertices = QBufferHandle3d.create(pointCloud.qparams, pointCloud.positions);\n        const attrPos = AttributeMap.findAttribute(\"a_pos\", 2 /* TechniqueId.PointCloud */, false);\n        assert(undefined !== attrPos);\n        const vertexDataType = (pointCloud.positions instanceof Float32Array) ? GL.DataType.Float : ((pointCloud.positions instanceof Uint8Array) ? GL.DataType.UnsignedByte : GL.DataType.UnsignedShort);\n        this.buffers.addBuffer(this._vertices, [BufferParameters.create(attrPos.location, 3, vertexDataType, false, 0, 0, false)]);\n        this._vertexCount = pointCloud.positions.length / 3;\n        this._hasFeatures = FeatureIndexType.Empty !== pointCloud.features.type;\n        this.voxelSize = pointCloud.voxelSize;\n        this.colorIsBgr = \"bgr\" === pointCloud.colorFormat;\n        if (undefined !== pointCloud.colors) {\n            this._colorHandle = BufferHandle.createArrayBuffer(pointCloud.colors);\n            const attrColor = AttributeMap.findAttribute(\"a_color\", 2 /* TechniqueId.PointCloud */, false);\n            assert(undefined !== attrColor);\n            this.buffers.addBuffer(this._colorHandle, [BufferParameters.create(attrColor.location, 3, GL.DataType.UnsignedByte, true, 0, 0, false)]);\n        }\n    }\n    collectStatistics(stats) {\n        const bytesUsed = this._vertices.bytesUsed + (undefined !== this._colorHandle ? this._colorHandle.bytesUsed : 0);\n        stats.addPointCloud(bytesUsed);\n    }\n    _wantWoWReversal(_target) { return false; }\n    get techniqueId() { return 2 /* TechniqueId.PointCloud */; }\n    getPass(target) {\n        // Point clouds don't cast shadows.\n        return target.isDrawingShadowMap ? \"none\" : \"point-clouds\";\n    }\n    get renderOrder() { return 5 /* RenderOrder.Linear */; }\n    get qOrigin() { return this._vertices.origin; }\n    get qScale() { return this._vertices.scale; }\n    get colors() { return this._colorHandle; }\n    get hasFeatures() { return this._hasFeatures; }\n    get hasBakedLighting() { return true; }\n    draw() {\n        this.buffers.bind();\n        System.instance.context.drawArrays(GL.PrimitiveType.Points, 0, this._vertexCount);\n        this.buffers.unbind();\n    }\n    // ###TODO delete this.\n    getLineWeight(_params) {\n        // If line weight < 0 it is real size in meters (voxel size).\n        return (this.voxelSize > 0) ? -this.voxelSize : 1;\n    }\n}\n//# sourceMappingURL=PointCloud.js.map",
      "start": 1693508123644,
      "end": 1693508123715,
      "sourcemaps": null
    }
  ]
}
