{
  "resolvedId": "D:/hub2023A/itwinjs-core/ui/appui-abstract/lib/esm/appui-abstract/dialogs/UiDataProvider.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Dialog\n */\nimport { BeUiEvent } from \"@itwin/core-bentley\";\n/** Sync UI Control Properties Event class.\n * @public\n */\nexport class SyncPropertiesChangeEvent extends BeUiEvent {\n}\n/** [[UiDataProvider]] Abstract class that allows property values to be passed between hosting API and UI.\n * @public\n */\n// istanbul ignore next\nexport class UiDataProvider {\n    constructor() {\n        /** Get Sync UI Control Properties Event */\n        this.onSyncPropertiesChangeEvent = new SyncPropertiesChangeEvent();\n        this.onItemsReloadedEvent = new BeUiEvent();\n    }\n    /** Called by UI to inform data provider of changes. */\n    processChangesInUi(_properties) {\n        throw (new Error(\"Derived UiDataProvider must implement this method to apply changes to a bulk set of properties.\"));\n    }\n    /** Called by UI to validate a property value */\n    validateProperty(_item) {\n        return { status: PropertyChangeStatus.Success };\n    }\n    /** Called to sync properties synchronously if a UiDataProvider is active for the UI */\n    syncProperties(syncProperties) {\n        this.fireSyncPropertiesEvent(syncProperties);\n    }\n    /** Called to inform listener that the UiDataProvider has updated values for the UI */\n    fireSyncPropertiesEvent(syncProperties) {\n        this.onSyncPropertiesChangeEvent.emit({ properties: syncProperties });\n    }\n    /** Called to inform listeners that new properties are ready for display in UI.\n     */\n    fireItemsReloadedEvent() {\n        this.onItemsReloadedEvent.emit();\n    }\n    /** Used to pass properties between a tool and an explicity defined UI dialog. See method supplyDialogItems in [[UiLayoutDataProvider]] for supplying\n     * properties that will be used to dynamically create and layout control in a Dialog or Widget.\n     */\n    supplyAvailableProperties() {\n        throw (new Error(\"Derived UiDataProvider that want to use DialogPropertyItems must implement this method. Not for use with dynamic UI controls.\"));\n    }\n}\n/** Status of Proposed property changes from UI to UiDataProvider\n * @public\n */\nexport var PropertyChangeStatus;\n(function (PropertyChangeStatus) {\n    /** Property Change(s) Succeeded */\n    PropertyChangeStatus[PropertyChangeStatus[\"Success\"] = 0] = \"Success\";\n    /** Error Processing Property Change(s) */\n    PropertyChangeStatus[PropertyChangeStatus[\"Error\"] = 2] = \"Error\";\n})(PropertyChangeStatus || (PropertyChangeStatus = {}));\n//# sourceMappingURL=UiDataProvider.js.map",
      "start": 1693508123551,
      "end": 1693508123604,
      "sourcemaps": null
    }
  ]
}
