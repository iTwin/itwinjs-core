{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/quantity-formatting/BasicUnitsProvider.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module QuantityFormatting\n */\nimport { BadUnit, BasicUnit, } from \"@itwin/core-quantity\";\nimport { UNIT_EXTRA_DATA } from \"./UnitsData\";\n// cSpell:ignore ussurvey USCUSTOM\n/** Units provider that provides a limited number of UnitDefinitions that are needed to support basic tools.\n * @internal\n */\nexport class BasicUnitsProvider {\n    /** Find a unit given the unitLabel. */\n    async findUnit(unitLabel, schemaName, phenomenon, unitSystem) {\n        const labelToFind = unitLabel.toLowerCase();\n        const unitFamilyToFind = phenomenon ? phenomenon.toLowerCase() : undefined;\n        const unitSystemToFind = unitSystem ? unitSystem.toLowerCase() : undefined;\n        for (const entry of UNIT_DATA) {\n            if (schemaName && schemaName !== \"Units\")\n                continue;\n            if (phenomenon && entry.phenomenon.toLowerCase() !== unitFamilyToFind)\n                continue;\n            if (unitSystemToFind && entry.system.toLowerCase() !== unitSystemToFind)\n                continue;\n            if (entry.displayLabel.toLowerCase() === labelToFind || entry.name.toLowerCase() === labelToFind) {\n                const unitProps = new BasicUnit(entry.name, entry.displayLabel, entry.phenomenon, entry.system);\n                return unitProps;\n            }\n            if (entry.altDisplayLabels && entry.altDisplayLabels.length > 0) {\n                if (entry.altDisplayLabels.findIndex((ref) => ref.toLowerCase() === labelToFind) !== -1) {\n                    const unitProps = new BasicUnit(entry.name, entry.displayLabel, entry.phenomenon, entry.system);\n                    return unitProps;\n                }\n            }\n        }\n        return new BadUnit();\n    }\n    /** Find all units given phenomenon */\n    async getUnitsByFamily(phenomenon) {\n        const units = [];\n        for (const entry of UNIT_DATA) {\n            if (entry.phenomenon !== phenomenon)\n                continue;\n            units.push(new BasicUnit(entry.name, entry.displayLabel, entry.phenomenon, entry.system));\n        }\n        return units;\n    }\n    findUnitDefinition(name) {\n        for (const entry of UNIT_DATA) {\n            if (entry.name === name)\n                return entry;\n        }\n        return undefined;\n    }\n    /** Find a unit given the unit's unique name. */\n    async findUnitByName(unitName) {\n        const unitDataEntry = this.findUnitDefinition(unitName);\n        if (unitDataEntry) {\n            return new BasicUnit(unitDataEntry.name, unitDataEntry.displayLabel, unitDataEntry.phenomenon, unitDataEntry.system);\n        }\n        return new BadUnit();\n    }\n    /** Return the information needed to convert a value between two different units.  The units should be from the same phenomenon. */\n    async getConversion(fromUnit, toUnit) {\n        const fromUnitData = this.findUnitDefinition(fromUnit.name);\n        const toUnitData = this.findUnitDefinition(toUnit.name);\n        if (fromUnitData && toUnitData) {\n            const deltaOffset = toUnitData.conversion.offset - fromUnitData.conversion.offset;\n            const deltaNumerator = toUnitData.conversion.numerator * fromUnitData.conversion.denominator;\n            const deltaDenominator = toUnitData.conversion.denominator * fromUnitData.conversion.numerator;\n            const conversionData = new ConversionData();\n            conversionData.factor = deltaNumerator / deltaDenominator;\n            conversionData.offset = deltaOffset;\n            return conversionData;\n        }\n        return new ConversionData();\n    }\n}\n/** Class that implements the minimum UnitConversionProps interface to provide information needed to convert unit values.\n * @alpha\n */\nclass ConversionData {\n    constructor() {\n        this.factor = 1.0;\n        this.offset = 0.0;\n        this.error = false;\n    }\n}\n/** Function to generate default set of alternate unit labels\n *  @internal\n */\nexport function getDefaultAlternateUnitLabels() {\n    const altDisplayLabelsMap = new Map();\n    for (const entry of UNIT_EXTRA_DATA) {\n        if (entry.altDisplayLabels && entry.altDisplayLabels.length > 0) {\n            altDisplayLabelsMap.set(entry.name, new Set(entry.altDisplayLabels));\n        }\n    }\n    if (altDisplayLabelsMap.size)\n        return altDisplayLabelsMap;\n    return undefined;\n}\n// ========================================================================================================================================\n// Minimum set of UNITs to be removed when official UnitsProvider is available\n// ========================================================================================================================================\n// cSpell:ignore MILLIINCH, MICROINCH, MILLIFOOT\n// Set of supported units - this information will come from Schema-based units once the EC package is ready to provide this information.\nconst UNIT_DATA = [\n    // Angles ( base unit radian )\n    { name: \"Units.RAD\", phenomenon: \"Units.ANGLE\", system: \"Units.SI\", conversion: { numerator: 1.0, denominator: 1.0, offset: 0.0 }, displayLabel: \"rad\" },\n    // 1 rad = 180.0/PI °\n    { name: \"Units.ARC_DEG\", phenomenon: \"Units.ANGLE\", system: \"Units.METRIC\", conversion: { numerator: 180.0, denominator: 3.141592653589793, offset: 0.0 }, displayLabel: \"°\" },\n    { name: \"Units.ARC_MINUTE\", phenomenon: \"Units.ANGLE\", system: \"Units.METRIC\", conversion: { numerator: 10800.0, denominator: 3.141592653589793, offset: 0.0 }, displayLabel: \"'\" },\n    { name: \"Units.ARC_SECOND\", phenomenon: \"Units.ANGLE\", system: \"Units.METRIC\", conversion: { numerator: 648000.0, denominator: 3.141592653589793, offset: 0.0 }, displayLabel: '\"' },\n    { name: \"Units.GRAD\", phenomenon: \"Units.ANGLE\", system: \"Units.METRIC\", conversion: { numerator: 200, denominator: 3.141592653589793, offset: 0.0 }, displayLabel: \"grad\" },\n    // Time ( base unit second )\n    { name: \"Units.S\", phenomenon: \"Units.TIME\", system: \"Units.SI\", conversion: { numerator: 1.0, denominator: 1.0, offset: 0.0 }, displayLabel: \"s\" },\n    { name: \"Units.MIN\", phenomenon: \"Units.TIME\", system: \"Units.INTERNATIONAL\", conversion: { numerator: 1.0, denominator: 60.0, offset: 0.0 }, displayLabel: \"min\" },\n    { name: \"Units.HR\", phenomenon: \"Units.TIME\", system: \"Units.INTERNATIONAL\", conversion: { numerator: 1.0, denominator: 3600.0, offset: 0.0 }, displayLabel: \"h\" },\n    { name: \"Units.DAY\", phenomenon: \"Units.TIME\", system: \"Units.INTERNATIONAL\", conversion: { numerator: 1.0, denominator: 86400.0, offset: 0.0 }, displayLabel: \"days\" },\n    { name: \"Units.WEEK\", phenomenon: \"Units.TIME\", system: \"Units.INTERNATIONAL\", conversion: { numerator: 1.0, denominator: 604800.0, offset: 0.0 }, displayLabel: \"weeks\" },\n    // 1 sec = 1/31536000.0 yr\n    { name: \"Units.YR\", phenomenon: \"Units.TIME\", system: \"Units.INTERNATIONAL\", conversion: { numerator: 1.0, denominator: 31536000.0, offset: 0.0 }, displayLabel: \"years\" },\n    // conversion => specified unit to base unit of m\n    { name: \"Units.M\", phenomenon: \"Units.LENGTH\", system: \"Units.SI\", conversion: { numerator: 1.0, denominator: 1.0, offset: 0.0 }, displayLabel: \"m\" },\n    { name: \"Units.MM\", phenomenon: \"Units.LENGTH\", system: \"Units.METRIC\", conversion: { numerator: 1000.0, denominator: 1.0, offset: 0.0 }, displayLabel: \"mm\" },\n    { name: \"Units.CM\", phenomenon: \"Units.LENGTH\", system: \"Units.METRIC\", conversion: { numerator: 100.0, denominator: 1.0, offset: 0.0 }, displayLabel: \"cm\" },\n    { name: \"Units.DM\", phenomenon: \"Units.LENGTH\", system: \"Units.METRIC\", conversion: { numerator: 10.0, denominator: 1.0, offset: 0.0 }, displayLabel: \"dm\" },\n    { name: \"Units.KM\", phenomenon: \"Units.LENGTH\", system: \"Units.METRIC\", conversion: { numerator: 1.0, denominator: 1000.0, offset: 0.0 }, displayLabel: \"km\" },\n    { name: \"Units.UM\", phenomenon: \"Units.LENGTH\", system: \"Units.METRIC\", conversion: { numerator: 1000000.0, denominator: 1.0, offset: 0.0 }, displayLabel: \"µm\" },\n    { name: \"Units.MILLIINCH\", phenomenon: \"Units.LENGTH\", system: \"Units.USCUSTOM\", conversion: { numerator: 1000.0, denominator: 0.0254, offset: 0.0 }, displayLabel: \"mil\" },\n    { name: \"Units.MICROINCH\", phenomenon: \"Units.LENGTH\", system: \"Units.USCUSTOM\", conversion: { numerator: 1000000.0, denominator: 0.0254, offset: 0.0 }, displayLabel: \"µin\" },\n    { name: \"Units.MILLIFOOT\", phenomenon: \"Units.LENGTH\", system: \"Units.USCUSTOM\", conversion: { numerator: 1000.0, denominator: 0.3048, offset: 0.0 }, displayLabel: \"mft\" },\n    { name: \"Units.IN\", phenomenon: \"Units.LENGTH\", system: \"Units.USCUSTOM\", conversion: { numerator: 1.0, denominator: 0.0254, offset: 0.0 }, displayLabel: \"in\" },\n    { name: \"Units.FT\", phenomenon: \"Units.LENGTH\", system: \"Units.USCUSTOM\", conversion: { numerator: 1.0, denominator: 0.3048, offset: 0.0 }, displayLabel: \"ft\" },\n    { name: \"Units.CHAIN\", phenomenon: \"Units.LENGTH\", system: \"Units.USCUSTOM\", conversion: { numerator: 1.0, denominator: 66.0 * 0.3048, offset: 0.0 }, displayLabel: \"chain\" },\n    { name: \"Units.YRD\", phenomenon: \"Units.LENGTH\", system: \"Units.USCUSTOM\", conversion: { numerator: 1.0, denominator: 0.9144, offset: 0.0 }, displayLabel: \"yd\" },\n    { name: \"Units.MILE\", phenomenon: \"Units.LENGTH\", system: \"Units.USCUSTOM\", conversion: { numerator: 1.0, denominator: 1609.344, offset: 0.0 }, displayLabel: \"mi\" },\n    { name: \"Units.US_SURVEY_FT\", phenomenon: \"Units.LENGTH\", system: \"Units.USSURVEY\", conversion: { numerator: 3937.0, denominator: 1200.0, offset: 0.0 }, displayLabel: \"ft (US Survey)\" },\n    { name: \"Units.US_SURVEY_YRD\", phenomenon: \"Units.LENGTH\", system: \"Units.USSURVEY\", conversion: { numerator: 3937.0, denominator: 3.0 * 1200.0, offset: 0.0 }, displayLabel: \"yrd (US Survey)\" },\n    { name: \"Units.US_SURVEY_IN\", phenomenon: \"Units.LENGTH\", system: \"Units.USSURVEY\", conversion: { numerator: 3937.0, denominator: 100.0, offset: 0.0 }, displayLabel: \"in (US Survey)\" },\n    { name: \"Units.US_SURVEY_MILE\", phenomenon: \"Units.LENGTH\", system: \"Units.USSURVEY\", conversion: { numerator: 3937.0, denominator: 5280.0 * 1200.0, offset: 0.0 }, displayLabel: \"mi (US Survey)\" },\n    { name: \"Units.US_SURVEY_CHAIN\", phenomenon: \"Units.LENGTH\", system: \"Units.USSURVEY\", conversion: { numerator: 1.0, denominator: 20.11684, offset: 0.0 }, displayLabel: \"chain (US Survey)\" },\n    // conversion => specified unit to base unit of m²\n    { name: \"Units.SQ_FT\", phenomenon: \"Units.AREA\", system: \"Units.USCUSTOM\", conversion: { numerator: 1.0, denominator: .09290304, offset: 0.0 }, displayLabel: \"ft²\" },\n    { name: \"Units.SQ_US_SURVEY_FT\", phenomenon: \"Units.AREA\", system: \"Units.USCUSTOM\", conversion: { numerator: 15499969.0, denominator: 1440000, offset: 0.0 }, displayLabel: \"ft² (US Survey)\" },\n    { name: \"Units.SQ_M\", phenomenon: \"Units.AREA\", system: \"Units.SI\", conversion: { numerator: 1.0, denominator: 1.0, offset: 0.0 }, displayLabel: \"m²\" },\n    // conversion => specified unit to base unit m³\n    { name: \"Units.CUB_FT\", phenomenon: \"Units.VOLUME\", system: \"Units.USCUSTOM\", conversion: { numerator: 1.0, denominator: 0.028316847, offset: 0.0 }, displayLabel: \"ft³\" },\n    { name: \"Units.CUB_US_SURVEY_FT\", phenomenon: \"Units.VOLUME\", system: \"Units.USSURVEY\", conversion: { numerator: 1, denominator: 0.0283170164937591, offset: 0.0 }, displayLabel: \"ft³\" },\n    { name: \"Units.CUB_YRD\", phenomenon: \"Units.VOLUME\", system: \"Units.USCUSTOM\", conversion: { numerator: 1.0, denominator: 0.76455486, offset: 0.0 }, displayLabel: \"yd³\" },\n    { name: \"Units.CUB_M\", phenomenon: \"Units.VOLUME\", system: \"Units.SI\", conversion: { numerator: 1.0, denominator: 1.0, offset: 0.0 }, displayLabel: \"m³\" },\n];\n//# sourceMappingURL=BasicUnitsProvider.js.map",
      "start": 1693508121061,
      "end": 1693508121322,
      "sourcemaps": null
    }
  ]
}
