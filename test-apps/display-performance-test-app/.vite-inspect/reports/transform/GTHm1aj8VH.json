{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/pointcloud/format/opc/ContainerFilePart.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { ASystem } from \"../../../system/runtime/ASystem\";\n/**\n * Class ContainerFilePart defines a part in a container file.\n *\n * @version 1.0 January 2014\n */\n/** @internal */\nexport class ContainerFilePart {\n    /**\n     * Create a new part.\n     * @param name the name of the part.\n     * @param fileAccess the file access.\n     * @param offset the offset of the part.\n     * @param size the size of the part.\n     */\n    constructor(name, fileAccess, offset, size) {\n        this._fileAccess = fileAccess;\n        this._offset = offset;\n        this._size = size;\n        this._name = name;\n    }\n    /**\n     * Get the name of the part.\n     * @return the name of the part.\n     */\n    getName() {\n        return this._name;\n    }\n    /**\n     * Get the file access.\n     * @return the file access.\n     */\n    getFileAccess() {\n        return this._fileAccess;\n    }\n    /**\n     * Get the offset of the part.\n     * @return the offset of the part.\n     */\n    getOffset() {\n        return this._offset;\n    }\n    /**\n     * Get the size of the part.\n     * @return the size of the part.\n     */\n    getSize() {\n        return this._size;\n    }\n    /**\n     * Do a range check for this part.\n     * @param checkOffset the offset of the range we want to touch.\n     * @param checkSize the size of the range we want to touch.\n     */\n    rangeCheck(checkOffset, checkSize) {\n        let checkExtent = checkOffset.add(checkSize);\n        let extent = this._offset.add(this._size);\n        ASystem.assertNot(checkOffset.sub(this._offset).isNegative(), \"Range offset \" + checkOffset.toString() + \" falls before part \" + this._offset.toString() + \"..\" + extent.toString());\n        ASystem.assertNot(extent.sub(checkOffset).isNegative(), \"Range offset \" + checkOffset.toString() + \" falls after part \" + this._offset.toString() + \"..\" + extent.toString());\n        ASystem.assertNot(checkSize.isNegative(), \"Range size \" + checkSize.toString() + \" is negative\");\n        ASystem.assertNot(extent.sub(checkExtent).isNegative(), \"Range extent \" + checkExtent.toString() + \" falls after part \" + this._offset.toString() + \"..\" + extent.toString());\n    }\n}\n//ContainerFilePart.java\n//# sourceMappingURL=ContainerFilePart.js.map",
      "start": 1693508125601,
      "end": 1693508125632,
      "sourcemaps": null
    }
  ]
}
