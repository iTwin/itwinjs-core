{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/ViewCreator3d.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Views\n */\nimport { CompressedId64Set, Id64 } from \"@itwin/core-bentley\";\nimport { Camera, Code, Environment, IModel, IModelReadRpcInterface, RenderMode, } from \"@itwin/core-common\";\nimport { Range3d } from \"@itwin/core-geometry\";\nimport { SpatialViewState } from \"./SpatialViewState\";\n/**\n * API for creating a 3D default [[ViewState3d]] for an iModel. @see [[ViewCreator2d]] to create a view for a 2d model.\n * Example usage:\n * ```ts\n * const viewCreator = new ViewCreator3d(imodel);\n * const defaultView = await viewCreator.createDefaultView({skyboxOn: true});\n * ```\n * @public\n * @extensions\n */\nexport class ViewCreator3d {\n    /**\n     * Constructs a ViewCreator3d using an [[IModelConnection]].\n     * @param _imodel [[IModelConnection]] to query for categories and/or models.\n     */\n    constructor(_imodel) {\n        this._imodel = _imodel;\n    }\n    /**\n     * Creates a default [[ViewState3d]] based on the model ids passed in. If no model ids are passed in, all 3D models in the iModel are used.\n     * @param [options] Options for creating the view.\n     * @param [modelIds] Ids of models to display in the view.\n     * @throws [IModelError]($common) If no 3d models are found in the iModel.\n     */\n    async createDefaultView(options, modelIds) {\n        const rpcOptions = modelIds ? { modelIds: CompressedId64Set.sortAndCompress(modelIds) } : {};\n        const rpc = IModelReadRpcInterface.getClientForRouting(this._imodel.routingContext.token);\n        const serializedProps = await rpc.getCustomViewState3dData(this._imodel.getRpcProps(), rpcOptions);\n        const baseExtents = Range3d.fromJSON(serializedProps.modelExtents);\n        const props = await this._createViewStateProps(CompressedId64Set.decompressArray(serializedProps.modelIds), CompressedId64Set.decompressArray(serializedProps.categoryIds), baseExtents, options);\n        const viewState = SpatialViewState.createFromProps(props, this._imodel);\n        try {\n            await viewState.load();\n        }\n        catch {\n        }\n        if (options?.standardViewId)\n            viewState.setStandardRotation(options.standardViewId);\n        if (options?.allSubCategoriesVisible)\n            viewState.displayStyle.enableAllLoadedSubCategories(viewState.categorySelector.categories);\n        const range = viewState.computeFitRange({ baseExtents });\n        viewState.lookAtVolume(range, options?.vpAspect);\n        return viewState;\n    }\n    /**\n     * Generates a view state props object for creating a view. Merges display styles with a seed view if the options.useSeedView is true\n     * @param models Models to put in view props\n     * @param options view creation options like camera On and skybox On\n     */\n    async _createViewStateProps(models, categories, modelExtents, options) {\n        // Use dictionary model in all props\n        const dictionaryId = IModel.dictionaryId;\n        if (modelExtents.isNull)\n            modelExtents.setFrom(this._imodel.projectExtents);\n        let originX = modelExtents.low.x;\n        let originY = modelExtents.low.y;\n        const originZ = modelExtents.low.z;\n        let deltaX = modelExtents.xLength();\n        let deltaY = modelExtents.yLength();\n        const deltaZ = modelExtents.zLength();\n        // if vp aspect given, update model extents to fit view\n        if (options?.vpAspect) {\n            const modelAspect = deltaY / deltaX;\n            if (modelAspect > options.vpAspect) {\n                const xFix = deltaY / options.vpAspect;\n                originX = originX - xFix / 2;\n                deltaX = deltaX + xFix;\n            }\n            else if (modelAspect < options.vpAspect) {\n                const yFix = deltaX * options.vpAspect;\n                originY = originY - yFix / 2;\n                deltaY = deltaY + yFix;\n            }\n        }\n        const categorySelectorProps = {\n            categories,\n            code: Code.createEmpty(),\n            model: dictionaryId,\n            classFullName: \"BisCore:CategorySelector\",\n        };\n        const modelSelectorProps = {\n            models,\n            code: Code.createEmpty(),\n            model: dictionaryId,\n            classFullName: \"BisCore:ModelSelector\",\n        };\n        const cameraData = new Camera();\n        const cameraOn = options?.cameraOn !== false;\n        const viewDefinitionProps = {\n            categorySelectorId: \"\",\n            displayStyleId: \"\",\n            code: Code.createEmpty(),\n            model: dictionaryId,\n            origin: { x: originX, y: originY, z: originZ },\n            extents: { x: deltaX, y: deltaY, z: deltaZ },\n            classFullName: \"BisCore:SpatialViewDefinition\",\n            cameraOn,\n            camera: {\n                lens: cameraData.lens.toJSON(),\n                focusDist: cameraData.focusDist,\n                eye: cameraData.eye.toJSON(),\n            },\n        };\n        const displayStyleProps = {\n            code: Code.createEmpty(),\n            model: dictionaryId,\n            classFullName: \"BisCore:DisplayStyle3d\",\n            jsonProperties: {\n                styles: {\n                    viewflags: {\n                        renderMode: RenderMode.SmoothShade,\n                        noSourceLights: false,\n                        noCameraLights: false,\n                        noSolarLight: false,\n                        noConstruct: true,\n                        noTransp: false,\n                        visEdges: false,\n                        backgroundMap: this._imodel.isGeoLocated,\n                    },\n                    environment: options !== undefined &&\n                        options.skyboxOn !== undefined &&\n                        options.skyboxOn\n                        ? Environment.defaults.withDisplay({ sky: true }).toJSON()\n                        : undefined,\n                },\n            },\n        };\n        const viewStateProps = {\n            displayStyleProps,\n            categorySelectorProps,\n            modelSelectorProps,\n            viewDefinitionProps,\n        };\n        // merge seed view props if needed\n        return options?.useSeedView ? this._mergeSeedView(viewStateProps) : viewStateProps;\n    }\n    /**\n     * Merges a seed view in the iModel with the passed view state props. It will be a no-op if there are no default 3D views in the iModel\n     * @param viewStateProps Input view props to be merged\n     */\n    async _mergeSeedView(viewStateProps) {\n        const viewId = await this._getDefaultViewId();\n        // Handle iModels without any default view id\n        if (viewId === undefined)\n            return viewStateProps;\n        const seedViewState = await this._imodel.views.load(viewId);\n        const seedViewStateProps = {\n            categorySelectorProps: seedViewState.categorySelector.toJSON(),\n            modelSelectorProps: seedViewState.modelSelector.toJSON(),\n            viewDefinitionProps: seedViewState.toJSON(),\n            displayStyleProps: seedViewState.displayStyle.toJSON(),\n        };\n        const mergedDisplayProps = seedViewStateProps.displayStyleProps;\n        if (mergedDisplayProps.jsonProperties !== undefined) {\n            mergedDisplayProps.jsonProperties.styles = {\n                ...mergedDisplayProps.jsonProperties.styles,\n                ...viewStateProps.displayStyleProps.jsonProperties.styles,\n            };\n        }\n        return { ...seedViewStateProps, ...viewStateProps, displayStyleProps: mergedDisplayProps };\n    }\n    /**\n     * Get the Id of the default view.\n     */\n    async _getDefaultViewId() {\n        const viewId = await this._imodel.views.queryDefaultViewId();\n        if (viewId !== Id64.invalid)\n            return viewId;\n        // Return the first spatial view\n        const viewList = await this._imodel.views.getViewList({ wantPrivate: false, limit: 1, from: SpatialViewState.classFullName });\n        return viewList.length === 0 ? undefined : viewList[0].id;\n    }\n}\n//# sourceMappingURL=ViewCreator3d.js.map",
      "start": 1693508119815,
      "end": 1693508120291,
      "sourcemaps": null
    }
  ]
}
