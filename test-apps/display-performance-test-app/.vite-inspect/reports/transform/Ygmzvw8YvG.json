{
  "resolvedId": "D:/hub2023A/itwinjs-core/test-apps/display-performance-test-app/src/common/DisplayPerfRpcInterface.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport * as chromeLauncher from \"chrome-launcher\";\r\nimport * as http from \"http\";\r\nimport * as https from \"https\";\r\nimport { RpcInterface, RpcManager, RpcOperation, RpcRequestTokenSupplier_T } from \"@itwin/core-common\";\r\nimport { DptaEnvConfig } from \"./DisplayPerfEnvConfig\";\r\n\r\nconst localDeploymentOnly: RpcRequestTokenSupplier_T = () => ({ iModelId: \"none\", key: \"\" });\r\n\r\n/** Display Performance RPC interface. */\r\nexport default class DisplayPerfRpcInterface extends RpcInterface { // eslint-disable-line deprecation/deprecation\r\n  /** The immutable name of the interface. */\r\n  public static readonly interfaceName = \"DisplayPerfRpcInterface\";\r\n\r\n  /** The version of the interface. */\r\n  public static interfaceVersion = \"1.0.0\";\r\n\r\n  /** Full path of the json file; will use the default json file instead if this file cannot be found */\r\n  public static jsonFilePath = \"\";\r\n\r\n  /** The backend server, when running on a browser */\r\n  public static backendServer: http.Server | https.Server;\r\n  public static webServer: http.Server | https.Server;\r\n\r\n  /** A chrome browser window, when testing with chrome */\r\n  public static chrome?: chromeLauncher.LaunchedChrome;\r\n\r\n  public static getClient(): DisplayPerfRpcInterface { return RpcManager.getClientForInterface(DisplayPerfRpcInterface); }\r\n\r\n  @RpcOperation.setRoutingProps(localDeploymentOnly)\r\n  public async getDefaultConfigs(): Promise<string> { return this.forward(arguments); }\r\n\r\n  public async saveCsv(_outputPath: string, _outputName: string, _rowDataJson: string, _csvFormat?: string): Promise<void> { return this.forward(arguments); }\r\n  public async savePng(_fileName: string, _png: string): Promise<void> { return this.forward(arguments); }\r\n\r\n  @RpcOperation.setRoutingProps(localDeploymentOnly)\r\n  public async writeExternalFile(_outputPath: string, _outputName: string, _append: boolean, _content: string): Promise<void> { return this.forward(arguments); }\r\n\r\n  @RpcOperation.setRoutingProps(localDeploymentOnly)\r\n  public async consoleLog(_content: string): Promise<void> { return this.forward(arguments); }\r\n\r\n  public async finishCsv(_output: string, _outputPath?: string, _outputName?: string, _csvFormat?: string): Promise<void> { return this.forward(arguments); }\r\n  public async terminate(): Promise<void> { return this.forward(arguments); }\r\n\r\n  public async readExternalSavedViews(_filename: string): Promise<string> { return this.forward(arguments); }\r\n  public async getMatchingFiles(_rootDir: string, _pattern: string): Promise<string> { return this.forward(arguments); }\r\n\r\n  public async getAccessToken(): Promise<string> { return this.forward(arguments); }\r\n\r\n  public async getEnvConfig(): Promise<DptaEnvConfig> { return this.forward(arguments); }\r\n}\r\n",
      "start": 1693508118232,
      "end": 1693508118469,
      "sourcemaps": null
    },
    {
      "name": "vite:esbuild",
      "result": "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\nimport { RpcInterface, RpcManager, RpcOperation } from \"@itwin/core-common\";\nconst localDeploymentOnly = () => ({ iModelId: \"none\", key: \"\" });\nconst _DisplayPerfRpcInterface = class _DisplayPerfRpcInterface extends RpcInterface {\n  static getClient() {\n    return RpcManager.getClientForInterface(_DisplayPerfRpcInterface);\n  }\n  async getDefaultConfigs() {\n    return this.forward(arguments);\n  }\n  async saveCsv(_outputPath, _outputName, _rowDataJson, _csvFormat) {\n    return this.forward(arguments);\n  }\n  async savePng(_fileName, _png) {\n    return this.forward(arguments);\n  }\n  async writeExternalFile(_outputPath, _outputName, _append, _content) {\n    return this.forward(arguments);\n  }\n  async consoleLog(_content) {\n    return this.forward(arguments);\n  }\n  async finishCsv(_output, _outputPath, _outputName, _csvFormat) {\n    return this.forward(arguments);\n  }\n  async terminate() {\n    return this.forward(arguments);\n  }\n  async readExternalSavedViews(_filename) {\n    return this.forward(arguments);\n  }\n  async getMatchingFiles(_rootDir, _pattern) {\n    return this.forward(arguments);\n  }\n  async getAccessToken() {\n    return this.forward(arguments);\n  }\n  async getEnvConfig() {\n    return this.forward(arguments);\n  }\n};\n// eslint-disable-line deprecation/deprecation\n/** The immutable name of the interface. */\n_DisplayPerfRpcInterface.interfaceName = \"DisplayPerfRpcInterface\";\n/** The version of the interface. */\n_DisplayPerfRpcInterface.interfaceVersion = \"1.0.0\";\n/** Full path of the json file; will use the default json file instead if this file cannot be found */\n_DisplayPerfRpcInterface.jsonFilePath = \"\";\n__decorateClass([\n  RpcOperation.setRoutingProps(localDeploymentOnly)\n], _DisplayPerfRpcInterface.prototype, \"getDefaultConfigs\", 1);\n__decorateClass([\n  RpcOperation.setRoutingProps(localDeploymentOnly)\n], _DisplayPerfRpcInterface.prototype, \"writeExternalFile\", 1);\n__decorateClass([\n  RpcOperation.setRoutingProps(localDeploymentOnly)\n], _DisplayPerfRpcInterface.prototype, \"consoleLog\", 1);\nlet DisplayPerfRpcInterface = _DisplayPerfRpcInterface;\nexport {\n  DisplayPerfRpcInterface as default\n};\n",
      "start": 1693508118469,
      "end": 1693508118826,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/hub2023A/itwinjs-core/test-apps/display-performance-test-app/src/common/DisplayPerfRpcInterface.ts"
        ],
        "sourcesContent": [
          "/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\r\n* See LICENSE.md in the project root for license terms and full copyright notice.\r\n*--------------------------------------------------------------------------------------------*/\r\nimport * as chromeLauncher from \"chrome-launcher\";\r\nimport * as http from \"http\";\r\nimport * as https from \"https\";\r\nimport { RpcInterface, RpcManager, RpcOperation, RpcRequestTokenSupplier_T } from \"@itwin/core-common\";\r\nimport { DptaEnvConfig } from \"./DisplayPerfEnvConfig\";\r\n\r\nconst localDeploymentOnly: RpcRequestTokenSupplier_T = () => ({ iModelId: \"none\", key: \"\" });\r\n\r\n/** Display Performance RPC interface. */\r\nexport default class DisplayPerfRpcInterface extends RpcInterface { // eslint-disable-line deprecation/deprecation\r\n  /** The immutable name of the interface. */\r\n  public static readonly interfaceName = \"DisplayPerfRpcInterface\";\r\n\r\n  /** The version of the interface. */\r\n  public static interfaceVersion = \"1.0.0\";\r\n\r\n  /** Full path of the json file; will use the default json file instead if this file cannot be found */\r\n  public static jsonFilePath = \"\";\r\n\r\n  /** The backend server, when running on a browser */\r\n  public static backendServer: http.Server | https.Server;\r\n  public static webServer: http.Server | https.Server;\r\n\r\n  /** A chrome browser window, when testing with chrome */\r\n  public static chrome?: chromeLauncher.LaunchedChrome;\r\n\r\n  public static getClient(): DisplayPerfRpcInterface { return RpcManager.getClientForInterface(DisplayPerfRpcInterface); }\r\n\r\n  @RpcOperation.setRoutingProps(localDeploymentOnly)\r\n  public async getDefaultConfigs(): Promise<string> { return this.forward(arguments); }\r\n\r\n  public async saveCsv(_outputPath: string, _outputName: string, _rowDataJson: string, _csvFormat?: string): Promise<void> { return this.forward(arguments); }\r\n  public async savePng(_fileName: string, _png: string): Promise<void> { return this.forward(arguments); }\r\n\r\n  @RpcOperation.setRoutingProps(localDeploymentOnly)\r\n  public async writeExternalFile(_outputPath: string, _outputName: string, _append: boolean, _content: string): Promise<void> { return this.forward(arguments); }\r\n\r\n  @RpcOperation.setRoutingProps(localDeploymentOnly)\r\n  public async consoleLog(_content: string): Promise<void> { return this.forward(arguments); }\r\n\r\n  public async finishCsv(_output: string, _outputPath?: string, _outputName?: string, _csvFormat?: string): Promise<void> { return this.forward(arguments); }\r\n  public async terminate(): Promise<void> { return this.forward(arguments); }\r\n\r\n  public async readExternalSavedViews(_filename: string): Promise<string> { return this.forward(arguments); }\r\n  public async getMatchingFiles(_rootDir: string, _pattern: string): Promise<string> { return this.forward(arguments); }\r\n\r\n  public async getAccessToken(): Promise<string> { return this.forward(arguments); }\r\n\r\n  public async getEnvConfig(): Promise<DptaEnvConfig> { return this.forward(arguments); }\r\n}\r\n"
        ],
        "mappings": ";;;;;;;;;;;;AAOA,SAAS,cAAc,YAAY,oBAA+C;AAGlF,MAAM,sBAAiD,OAAO,EAAE,UAAU,QAAQ,KAAK,GAAG;AAG1F,MAAqB,2BAArB,MAAqB,iCAAgC,aAAa;AAAA,EAiBhE,OAAc,YAAqC;AAAE,WAAO,WAAW,sBAAsB,wBAAuB;AAAA,EAAG;AAAA,EAGvH,MAAa,oBAAqC;AAAE,WAAO,KAAK,QAAQ,SAAS;AAAA,EAAG;AAAA,EAEpF,MAAa,QAAQ,aAAqB,aAAqB,cAAsB,YAAoC;AAAE,WAAO,KAAK,QAAQ,SAAS;AAAA,EAAG;AAAA,EAC3J,MAAa,QAAQ,WAAmB,MAA6B;AAAE,WAAO,KAAK,QAAQ,SAAS;AAAA,EAAG;AAAA,EAGvG,MAAa,kBAAkB,aAAqB,aAAqB,SAAkB,UAAiC;AAAE,WAAO,KAAK,QAAQ,SAAS;AAAA,EAAG;AAAA,EAG9J,MAAa,WAAW,UAAiC;AAAE,WAAO,KAAK,QAAQ,SAAS;AAAA,EAAG;AAAA,EAE3F,MAAa,UAAU,SAAiB,aAAsB,aAAsB,YAAoC;AAAE,WAAO,KAAK,QAAQ,SAAS;AAAA,EAAG;AAAA,EAC1J,MAAa,YAA2B;AAAE,WAAO,KAAK,QAAQ,SAAS;AAAA,EAAG;AAAA,EAE1E,MAAa,uBAAuB,WAAoC;AAAE,WAAO,KAAK,QAAQ,SAAS;AAAA,EAAG;AAAA,EAC1G,MAAa,iBAAiB,UAAkB,UAAmC;AAAE,WAAO,KAAK,QAAQ,SAAS;AAAA,EAAG;AAAA,EAErH,MAAa,iBAAkC;AAAE,WAAO,KAAK,QAAQ,SAAS;AAAA,EAAG;AAAA,EAEjF,MAAa,eAAuC;AAAE,WAAO,KAAK,QAAQ,SAAS;AAAA,EAAG;AACxF;AAAA;AAAA;AAxCqB,yBAEI,gBAAgB;AAAA;AAFpB,yBAKL,mBAAmB;AAAA;AALd,yBAQL,eAAe;AAYhB;AAAA,EADZ,aAAa,gBAAgB,mBAAmB;AAAA,GAnB9B,yBAoBN;AAMA;AAAA,EADZ,aAAa,gBAAgB,mBAAmB;AAAA,GAzB9B,yBA0BN;AAGA;AAAA,EADZ,aAAa,gBAAgB,mBAAmB;AAAA,GA5B9B,yBA6BN;AA7Bf,IAAqB,0BAArB;AAAA;AAAA,EAAO,2BAbP;AAAA;",
        "names": []
      }
    }
  ]
}
