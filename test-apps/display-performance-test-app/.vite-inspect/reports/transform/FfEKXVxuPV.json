{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/webgl/RenderFlags.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module WebGL\n */\n/* eslint-disable no-restricted-syntax */\n/** @internal */\nexport var Pass;\n(function (Pass) {\n    /** Return the RenderPass corresponding to the specified Pass. */\n    function toRenderPass(pass) {\n        switch (pass) {\n            case \"skybox\": return 14 /* RenderPass.SkyBox */;\n            case \"opaque\": return 5 /* RenderPass.OpaqueGeneral */;\n            case \"opaque-linear\": return 2 /* RenderPass.OpaqueLinear */;\n            case \"opaque-planar\": return 3 /* RenderPass.OpaquePlanar */;\n            case \"translucent\": return 8 /* RenderPass.Translucent */;\n            case \"point-clouds\": return 4 /* RenderPass.PointClouds */;\n            case \"view-overlay\": return 13 /* RenderPass.ViewOverlay */;\n            case \"classification\": return 6 /* RenderPass.Classification */;\n            case \"none\": return 255 /* RenderPass.None */;\n        }\n    }\n    Pass.toRenderPass = toRenderPass;\n    /** Return true if the specified Pass renders during RenderPass.Translucent.\n     * @note It is possible for both [[rendersTranslucent]] and [[rendersOpaque]] to return true (or false) for a given Pass.\n     */\n    function rendersTranslucent(pass) {\n        switch (pass) {\n            case \"translucent\":\n            case \"opaque-translucent\":\n            case \"opaque-planar-translucent\":\n                return true;\n            default:\n                return false;\n        }\n    }\n    Pass.rendersTranslucent = rendersTranslucent;\n    /** Return true if the specified Pass renders during one of the opaque RenderPasses.\n     * @note It is possible for both [[rendersTranslucent]] and [[rendersOpaque]] to return true for a given Pass.\n     */\n    function rendersOpaque(pass) {\n        switch (pass) {\n            case \"opaque-translucent\":\n            case \"opaque-planar-translucent\":\n            case \"opaque\":\n            case \"opaque-planar\":\n            case \"opaque-linear\":\n            case \"point-clouds\":\n                return true;\n            default:\n                return false;\n        }\n    }\n    Pass.rendersOpaque = rendersOpaque;\n    /** Return true if the specified Pass renders both during RenderPass.Translucent and one of the opaque RenderPasses. */\n    function rendersOpaqueAndTranslucent(pass) {\n        return \"opaque-translucent\" === pass || \"opaque-planar-translucent\" === pass;\n    }\n    Pass.rendersOpaqueAndTranslucent = rendersOpaqueAndTranslucent;\n    function toOpaquePass(pass) {\n        return \"opaque-translucent\" === pass ? 5 /* RenderPass.OpaqueGeneral */ : 3 /* RenderPass.OpaquePlanar */;\n    }\n    Pass.toOpaquePass = toOpaquePass;\n})(Pass || (Pass = {}));\n/** Reserved texture units for specific sampler variables, to avoid conflicts between shader components which each have their own textures.\n * WebGL 2 guarantees a minimum of 16 vertex texture units.\n * @internal\n */\nexport var TextureUnit;\n(function (TextureUnit) {\n    // For shaders which know exactly which textures will be used\n    TextureUnit[TextureUnit[\"Zero\"] = WebGLRenderingContext.TEXTURE0] = \"Zero\";\n    TextureUnit[TextureUnit[\"One\"] = WebGLRenderingContext.TEXTURE1] = \"One\";\n    TextureUnit[TextureUnit[\"Two\"] = WebGLRenderingContext.TEXTURE2] = \"Two\";\n    TextureUnit[TextureUnit[\"Three\"] = WebGLRenderingContext.TEXTURE3] = \"Three\";\n    TextureUnit[TextureUnit[\"Four\"] = WebGLRenderingContext.TEXTURE4] = \"Four\";\n    TextureUnit[TextureUnit[\"Five\"] = WebGLRenderingContext.TEXTURE5] = \"Five\";\n    TextureUnit[TextureUnit[\"Six\"] = WebGLRenderingContext.TEXTURE6] = \"Six\";\n    TextureUnit[TextureUnit[\"Seven\"] = WebGLRenderingContext.TEXTURE7] = \"Seven\";\n    TextureUnit[TextureUnit[\"ClipVolume\"] = TextureUnit.Zero] = \"ClipVolume\";\n    TextureUnit[TextureUnit[\"FeatureSymbology\"] = TextureUnit.One] = \"FeatureSymbology\";\n    TextureUnit[TextureUnit[\"SurfaceTexture\"] = TextureUnit.Two] = \"SurfaceTexture\";\n    TextureUnit[TextureUnit[\"LineCode\"] = TextureUnit.Two] = \"LineCode\";\n    TextureUnit[TextureUnit[\"PickFeatureId\"] = TextureUnit.Three] = \"PickFeatureId\";\n    TextureUnit[TextureUnit[\"PickDepthAndOrder\"] = TextureUnit.Four] = \"PickDepthAndOrder\";\n    TextureUnit[TextureUnit[\"VertexLUT\"] = TextureUnit.Five] = \"VertexLUT\";\n    // Texture unit 6 is overloaded. Therefore classification, hilite classification, and aux channel are all mutually exclusive.\n    TextureUnit[TextureUnit[\"AuxChannelLUT\"] = TextureUnit.Six] = \"AuxChannelLUT\";\n    TextureUnit[TextureUnit[\"PlanarClassification\"] = TextureUnit.Six] = \"PlanarClassification\";\n    TextureUnit[TextureUnit[\"PlanarClassificationHilite\"] = TextureUnit.Six] = \"PlanarClassificationHilite\";\n    // Texture unit 7 is overloaded. Therefore receiving shadows and thematic display are mutually exclusive.\n    TextureUnit[TextureUnit[\"ShadowMap\"] = TextureUnit.Seven] = \"ShadowMap\";\n    TextureUnit[TextureUnit[\"ThematicSensors\"] = TextureUnit.Seven] = \"ThematicSensors\";\n    // Textures used for up to 6 background or overlay map layers.\n    TextureUnit[TextureUnit[\"RealityMesh0\"] = TextureUnit.Two] = \"RealityMesh0\";\n    TextureUnit[TextureUnit[\"RealityMesh1\"] = TextureUnit.VertexLUT] = \"RealityMesh1\";\n    TextureUnit[TextureUnit[\"RealityMesh2\"] = TextureUnit.ShadowMap] = \"RealityMesh2\";\n    TextureUnit[TextureUnit[\"RealityMesh3\"] = WebGLRenderingContext.TEXTURE8] = \"RealityMesh3\";\n    TextureUnit[TextureUnit[\"RealityMesh4\"] = WebGLRenderingContext.TEXTURE9] = \"RealityMesh4\";\n    TextureUnit[TextureUnit[\"RealityMesh5\"] = WebGLRenderingContext.TEXTURE10] = \"RealityMesh5\";\n    TextureUnit[TextureUnit[\"RealityMeshThematicGradient\"] = WebGLRenderingContext.TEXTURE11] = \"RealityMeshThematicGradient\";\n    // Lookup table for indexed edges.\n    TextureUnit[TextureUnit[\"EdgeLUT\"] = WebGLRenderingContext.TEXTURE12] = \"EdgeLUT\";\n    // Normal map texture.\n    TextureUnit[TextureUnit[\"NormalMap\"] = WebGLRenderingContext.TEXTURE13] = \"NormalMap\";\n})(TextureUnit || (TextureUnit = {}));\n/** @internal */\nexport function isPlanar(order) {\n    return order >= 8 /* RenderOrder.PlanarBit */;\n}\n//# sourceMappingURL=RenderFlags.js.map",
      "start": 1693508123649,
      "end": 1693508123738,
      "sourcemaps": null
    }
  ]
}
