{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/Camera.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module Views\n */\nimport { JsonUtils } from \"@itwin/core-bentley\";\nimport { Angle, Point3d } from \"@itwin/core-geometry\";\n/** The current position (eyepoint), lens angle, and focus distance of a camera.\n * @see [Views]($docs/learning/frontend/Views.md)\n * @public\n */\nexport class Camera {\n    static isValidLensAngle(val) {\n        return val.radians > (Math.PI / 8.0) && val.radians < Math.PI;\n    }\n    static validateLensAngle(val) {\n        if (!this.isValidLensAngle(val))\n            val.setRadians(Math.PI / 2.0);\n    }\n    invalidateFocus() { this.focusDist = 0.0; }\n    get isFocusValid() { return this.focusDist > 0.0 && this.focusDist < 1.0e14; }\n    getFocusDistance() { return this.focusDist; }\n    setFocusDistance(dist) { this.focusDist = dist; }\n    get isLensValid() { return Camera.isValidLensAngle(this.lens); }\n    validateLens() { Camera.validateLensAngle(this.lens); }\n    getLensAngle() { return this.lens; }\n    setLensAngle(angle) { this.lens.setFrom(angle); }\n    getEyePoint() { return this.eye; }\n    setEyePoint(pt) { this.eye.setFrom(pt); }\n    get isValid() { return this.isLensValid && this.isFocusValid; }\n    equals(other) {\n        return Math.abs(this.lens.radians - other.lens.radians) < .01 &&\n            Math.abs(this.focusDist - other.focusDist) < .1 &&\n            this.eye.isAlmostEqual(other.eye);\n    }\n    clone() { return new Camera(this); }\n    setFrom(rhs) {\n        this.lens.setFrom(rhs.lens);\n        this.focusDist = rhs.focusDist;\n        this.eye.setFrom(rhs.eye);\n    }\n    /** Construct a Camera\n     * @param props The properties of the new camera. If undefined, create a camera with eye at {0,0,0}, 90 degree lens, 1 meter focus distance.\n     */\n    constructor(props) {\n        if (props !== undefined) {\n            this.lens = Angle.fromJSON(props.lens);\n            this.focusDist = JsonUtils.asDouble(props.focusDist);\n            this.eye = Point3d.fromJSON(props.eye);\n            return;\n        }\n        this.lens = Angle.createRadians(Math.PI / 2.0);\n        this.focusDist = 1;\n        this.eye = new Point3d();\n    }\n}\n//# sourceMappingURL=Camera.js.map",
      "start": 1693508120474,
      "end": 1693508120517,
      "sourcemaps": null
    }
  ]
}
