{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/frontend/lib/esm/render/webgl/glsl/SkyBox.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module WebGL\n */\nimport { AttributeMap } from \"../AttributeMap\";\nimport { Matrix3 } from \"../Matrix\";\nimport { TextureUnit } from \"../RenderFlags\";\nimport { ProgramBuilder } from \"../ShaderBuilder\";\nconst computeBaseColor = `return vec4(0, 0, 0, 0);`;\nconst assignFragData = `FragColor = TEXTURE_CUBE(s_cube, v_texDir);`;\nconst computePosition = `vec3 pos = u_rot * vec3(rawPos.x, rawPos.z, -rawPos.y); return pos.xyzz;`; // rawPos swizzling accounts for iModel rotation.\nconst computeTexDir = `v_texDir = rawPosition.xyz;`;\nconst scratchRotMatrix = new Matrix3();\n/** @internal */\nexport function createSkyBoxProgram(context) {\n    const prog = new ProgramBuilder(AttributeMap.findAttributeMap(undefined, false));\n    prog.frag.set(1 /* FragmentShaderComponent.ComputeBaseColor */, computeBaseColor);\n    prog.frag.set(16 /* FragmentShaderComponent.AssignFragData */, assignFragData);\n    prog.vert.set(10 /* VertexShaderComponent.ComputePosition */, computePosition);\n    prog.vert.addUniform(\"u_rot\", 6 /* VariableType.Mat3 */, (prg) => {\n        prg.addGraphicUniform(\"u_rot\", (uniform, params) => {\n            const rot = params.target.uniforms.frustum.viewMatrix.matrix;\n            const mat3 = scratchRotMatrix;\n            mat3.m00 = -rot.at(0, 0);\n            mat3.m01 = -rot.at(0, 1);\n            mat3.m02 = -rot.at(0, 2);\n            mat3.m10 = -rot.at(1, 0);\n            mat3.m11 = -rot.at(1, 1);\n            mat3.m12 = -rot.at(1, 2);\n            mat3.m20 = rot.at(2, 0);\n            mat3.m21 = rot.at(2, 1);\n            mat3.m22 = rot.at(2, 2);\n            uniform.setMatrix3(mat3);\n        });\n    });\n    prog.frag.addUniform(\"s_cube\", 9 /* VariableType.SamplerCube */, (prg) => {\n        prg.addGraphicUniform(\"s_cube\", (uniform, params) => {\n            const geom = params.geometry;\n            geom.cube.texture.bindSampler(uniform, TextureUnit.Zero);\n        });\n    });\n    prog.addInlineComputedVarying(\"v_texDir\", 4 /* VariableType.Vec3 */, computeTexDir);\n    prog.vert.headerComment = \"//!V! SkyBox\";\n    prog.frag.headerComment = \"//!F! SkyBox\";\n    return prog.buildProgram(context);\n}\n//# sourceMappingURL=SkyBox.js.map",
      "start": 1693508124719,
      "end": 1693508124802,
      "sourcemaps": null
    }
  ]
}
