{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/orbitgt/lib/esm/pointcloud/format/opc/OPCReader.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module OrbitGT\n */\nimport { Coordinate } from \"../../../spatial/geom/Coordinate\";\nimport { ABuffer } from \"../../../system/buffer/ABuffer\";\nimport { Uint8Buffer } from \"../../../system/buffer/Uint8Buffer\";\nimport { AList } from \"../../../system/collection/AList\";\nimport { ASystem } from \"../../../system/runtime/ASystem\";\nimport { Strings } from \"../../../system/runtime/Strings\";\nimport { PointCloudReader } from \"../../model/PointCloudReader\";\nimport { PointDataRaw } from \"../../model/PointDataRaw\";\nimport { ReadRequest } from \"../../model/ReadRequest\";\nimport { StandardAttributes } from \"../../model/StandardAttributes\";\nimport { AttributeMask } from \"./AttributeMask\";\nimport { FileReader } from \"./FileReader\";\nimport { PointReader } from \"./PointReader\";\nimport { TileReadBuffer } from \"./TileReadBuffer\";\n/**\n * Class OPCReader reads pointcloud files.\n *\n * @version 1.0 January 2014\n */\n/** @internal */\nexport class OPCReader extends PointCloudReader {\n    /**\n       * Create a new reader for a file.\n       * @param fileName the name of the file.\n       * @param lazyLoading avoid early loading of all block indexes to keep a low memory profile? Lazy loading only loads the block indexes of the top 6 levels (see CLOUD-1152 issue)\n       * @return the reader.\n       */\n    static async openFile(fileStorage, fileName, lazyLoading) {\n        /* Open the file */\n        const fileReader = await FileReader.openFile(fileStorage, fileName, lazyLoading);\n        /* Create the reader */\n        return new OPCReader(fileReader, 0, fileReader.getLevelCount());\n    }\n    /**\n       * Create a new reader.\n       */\n    constructor(fileReader, levelOffset, levelCount) {\n        super();\n        this._fileReader = fileReader;\n        this._levelOffset = levelOffset;\n        this._levelCount = levelCount;\n    }\n    /**\n       * Get the file reader.\n       * @return the file reader.\n       */\n    getFileReader() {\n        return this._fileReader;\n    }\n    /**\n       * PointCloudReader method.\n       * @see PointCloudReader#close\n       */\n    close() {\n        if (this._fileReader != null)\n            this._fileReader.close();\n        this._fileReader = null;\n    }\n    /**\n       * PointCloudReader method.\n       * @see PointCloudReader#getProperty\n       */\n    getProperty(propertyName) {\n        if (propertyName == null)\n            return null;\n        if (Strings.equalsIgnoreCase(propertyName, \"metricCellSize\"))\n            return new Coordinate(this._fileReader.getFileRecord().getMetricCellSize(), 0.0, 0.0);\n        return null;\n    }\n    /**\n       * PointCloudReader method.\n       * @see PointCloudReader#getFileStorage\n       */\n    getFileStorage() {\n        return this._fileReader.getFileStorage();\n    }\n    /**\n       * PointCloudReader method.\n       * @see PointCloudReader#getFileName\n       */\n    getFileName() {\n        return this._fileReader.getFileName();\n    }\n    /**\n       * PointCloudReader method.\n       * @see PointCloudReader#getFileCRS\n       */\n    getFileCRS() {\n        return this._fileReader.getFileRecord().getCRS();\n    }\n    /**\n       * PointCloudReader method.\n       * @see PointCloudReader#getFileBounds\n       */\n    getFileBounds() {\n        return this._fileReader.getGeometryReader(0).getGeometryRecord().getBounds();\n    }\n    /**\n       * PointCloudReader method.\n       * @see PointCloudReader#getPointAttributes\n       */\n    getPointAttributes() {\n        return this._fileReader.getAttributes();\n    }\n    /**\n       * PointCloudReader method.\n       * @see PointCloudReader#getMinAttributeValue\n       */\n    getMinAttributeValue(attribute) {\n        for (const reader of this._fileReader.getAttributeReaders())\n            if (reader.getAttribute().hasName(attribute.getName()))\n                return reader.getMinimumValue();\n        return null;\n    }\n    /**\n       * PointCloudReader method.\n       * @see PointCloudReader#getMaxAttributeValue\n       */\n    getMaxAttributeValue(attribute) {\n        for (const reader of this._fileReader.getAttributeReaders())\n            if (reader.getAttribute().hasName(attribute.getName()))\n                return reader.getMaximumValue();\n        return null;\n    }\n    /**\n       * PointCloudReader method.\n       * @see PointCloudReader#getLevelCount\n       */\n    getLevelCount() {\n        return this._fileReader.getLevelCount();\n    }\n    /**\n       * PointCloudReader method.\n       * @see PointCloudReader#getLevelPointCount\n       */\n    getLevelPointCount(level) {\n        return this._fileReader.getDirectoryReader(level).getDirectoryRecord().getPointCount();\n    }\n    /**\n       * PointCloudReader method.\n       * @see PointCloudReader#getLevelPointBounds\n       */\n    getLevelPointBounds(level) {\n        return this._fileReader.getGeometryReader(level).getGeometryRecord().getBounds();\n    }\n    /**\n       * PointCloudReader method.\n       * @see PointCloudReader#getLevelBlockGrid\n       */\n    getLevelBlockGrid(level) {\n        return this.getLevelTileGrid(level).scale(this._fileReader.getFileRecord().getBlockSize());\n    }\n    /**\n       * PointCloudReader method.\n       * @see PointCloudReader#getLevelTileGrid\n       */\n    getLevelTileGrid(level) {\n        return this._fileReader.getGeometryReader(level).getGeometryRecord().getTileGrid();\n    }\n    /**\n       * PointCloudReader method.\n       * @see PointCloudReader#peekBlockIndexes\n       */\n    peekBlockIndexes(level) {\n        return this._fileReader.getDirectoryReader(level).getBlocks();\n    }\n    /**\n       * PointCloudReader method.\n       * @see PointCloudReader#readBlockIndexes\n       */\n    readBlockIndexes(level, fileContents) {\n        /* Get the directory reader */\n        const directoryReader = this._fileReader.getDirectoryReader(level);\n        /* Already read all blocks? */\n        const blocks = directoryReader.getBlocks();\n        if (blocks.length > 0)\n            return blocks;\n        /* Delegate to the directory reader */\n        return directoryReader.readBlocks(this._fileReader.getFileRecord(), fileContents);\n    }\n    /**\n       * PointCloudReader method.\n       * @see PointCloudReader#readTileIndexes\n       */\n    readTileIndexes(block, fileContents) {\n        return this._fileReader.getDirectoryReader(block.level).readTiles2(block, fileContents);\n    }\n    /**\n       * Get the attribute mask to use for reading.\n       * @param parameters the read parameters.\n       * @return the attribute mask.\n       */\n    getAttributeMask(parameters) {\n        /* Make a list of readers */\n        const readers = new AList();\n        /* Should we read all attributes? */\n        if (parameters.readAllExtraAttributes()) {\n            /* Read all attributes */\n            for (const reader of this._fileReader.getAttributeReaders())\n                readers.add(reader);\n        }\n        else {\n            /* Read color? */\n            if (parameters.readColor()) {\n                const reader = this._fileReader.findAttributeReader(StandardAttributes.COLOR.getName());\n                if (reader != null)\n                    readers.add(reader);\n            }\n            /* Read intensity? */\n            if (parameters.readIntensity()) {\n                const reader = this._fileReader.findAttributeReader(StandardAttributes.INTENSITY.getName());\n                if (reader != null)\n                    readers.add(reader);\n            }\n            /* Read the extra attributes */\n            const extraAttributes = parameters.getExtraAttributes();\n            for (let i = 0; i < extraAttributes.size(); i++) {\n                /* Get the name of the extra attribute */\n                const extraAttribute = extraAttributes.get(i);\n                /* Did we already add the color? */\n                if (parameters.readColor() && Strings.equalsIgnoreCase(extraAttribute, StandardAttributes.COLOR.getName()))\n                    continue;\n                /* Did we already add the intensity? */\n                if (parameters.readIntensity() && Strings.equalsIgnoreCase(extraAttribute, StandardAttributes.INTENSITY.getName()))\n                    continue;\n                /* Find the attribute reader */\n                const reader = this._fileReader.findAttributeReader(extraAttribute);\n                /* Add the reader */\n                if (reader != null)\n                    readers.add(reader);\n            }\n        }\n        /* Create the mask */\n        return new AttributeMask(readers);\n    }\n    /**\n       * PointCloudReader interface method.\n       * @see PointCloudReader#readPoints\n       */\n    readPoints(tileIndex, readRequest, fileContents) {\n        /* Create the attribute mask */\n        const attributeMask = this.getAttributeMask(readRequest);\n        /* Create the read buffer */\n        const tileBuffer = new TileReadBuffer(attributeMask.attributes.length);\n        /* Read the points in the tile */\n        const pointOffset = 0;\n        const pointCount = tileIndex.pointCount;\n        return PointReader.readTilePoints(this.getFileReader(), readRequest, attributeMask, tileIndex.level, tileIndex, pointOffset, pointCount, tileBuffer, fileContents);\n    }\n    /**\n       * PointCloudReader interface method.\n       * @see PointCloudReader#readPointData\n       */\n    readPointData(tileIndex, dataFormat, accessTime, fileContents) {\n        /* 16-bit XYZ geometry and 8-bit RGB colors? */\n        if (dataFormat == PointDataRaw.TYPE) {\n            /* Create the attribute mask */\n            const readRequest = ReadRequest.READ_GEOMETRY_AND_COLOR;\n            const readers = new AList();\n            const colorReader = this._fileReader.findAttributeReader(StandardAttributes.COLOR.getName());\n            if (colorReader != null)\n                readers.add(colorReader);\n            const attributeMask = new AttributeMask(readers);\n            /* Has the data been loaded? */\n            let tileBuffer = null;\n            let pointData = null;\n            if (fileContents.isAvailable()) {\n                /* Create the read buffer */\n                tileBuffer = new TileReadBuffer(attributeMask.attributes.length);\n                /* Create the point data buffer */\n                const tileGrid = this._fileReader.getGeometryReader(tileIndex.level).getGeometryRecord().getTileGrid();\n                const tileBounds = tileGrid.getCellBounds(tileIndex.gridIndex);\n                pointData = new PointDataRaw(tileIndex, tileBounds, null, null, null);\n            }\n            /* Fill the point data buffer */\n            PointReader.readTilePointsRaw(this.getFileReader(), readRequest, attributeMask, tileIndex, tileBuffer, pointData, fileContents);\n            /* Missing color channel after data load? */\n            if (fileContents.isAvailable() && (pointData.colors == null)) {\n                /* Define the default RGB color (0xE6C60D) */\n                const defaultR = 230;\n                const defaultG = 198;\n                const defaultB = 13;\n                /* Create a default color buffer (BGR sample sequence) */\n                pointData.colors = Uint8Buffer.wrap(new ABuffer(3 * tileIndex.pointCount));\n                for (let i = 0; i < tileIndex.pointCount; i++) {\n                    pointData.colors.set(3 * i + 0, defaultB);\n                    pointData.colors.set(3 * i + 1, defaultG);\n                    pointData.colors.set(3 * i + 2, defaultR);\n                }\n            }\n            return pointData;\n        }\n        /* Unknown format */\n        return null;\n    }\n    /**\n       * PointCloudReader interface method.\n       * @see PointCloudReader#clipToLevelRange\n       */\n    clipToLevelRange(levelOffset, levelCount) {\n        /* Check the parameters */\n        ASystem.assert0(levelOffset >= 0, `Invalid level offset ${levelOffset}`);\n        ASystem.assert0(levelCount > 0, `Invalid level count ${levelCount}`);\n        ASystem.assert0(levelOffset + levelCount <= this._levelCount, `Level range ${levelOffset}+${levelCount} not possible in ${this._levelCount} levels`);\n        /* Create a new reader */\n        return new OPCReader(this._fileReader, this._levelOffset + levelOffset, levelCount);\n    }\n}\n//# sourceMappingURL=OPCReader.js.map",
      "start": 1693508124845,
      "end": 1693508124945,
      "sourcemaps": null
    }
  ]
}
