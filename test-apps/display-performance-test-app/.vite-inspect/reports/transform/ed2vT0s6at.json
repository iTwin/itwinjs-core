{
  "resolvedId": "D:/hub2023A/itwinjs-core/core/common/lib/esm/PlanProjectionSettings.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*---------------------------------------------------------------------------------------------\n* Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n* See LICENSE.md in the project root for license terms and full copyright notice.\n*--------------------------------------------------------------------------------------------*/\n/** @packageDocumentation\n * @module DisplayStyles\n */\n/** Describes how to draw a plan projection model. A plan projection model is a [GeometricModel3d]($backend) whose geometry all lies in\n * a single XY plane, wherein the Z coordinate of the plane may be arbitrary or flexible. Multiple plan projection models can be combined into one view\n * and drawn as \"layers\" with relative priorities.\n * @see [[DisplayStyle3dSettings.setPlanProjectionSettings]] to define plan projection settings for a [DisplayStyle3dState]($frontend).\n * @see [GeometricModel3d.isPlanProjection]($backend).\n * @public\n */\nexport class PlanProjectionSettings {\n    toJSON() {\n        return {\n            elevation: this.elevation,\n            transparency: this.transparency,\n            overlay: true === this.overlay ? true : undefined,\n            enforceDisplayPriority: true === this.enforceDisplayPriority ? true : undefined,\n        };\n    }\n    static fromJSON(props) {\n        if (undefined === props)\n            return undefined;\n        if (undefined === props.elevation && undefined === props.transparency && undefined === props.overlay && undefined === props.enforceDisplayPriority)\n            return undefined;\n        return new PlanProjectionSettings(props);\n    }\n    /** @internal */\n    constructor(props) {\n        this.elevation = props.elevation;\n        this.overlay = true === props.overlay;\n        this.enforceDisplayPriority = true === props.enforceDisplayPriority;\n        let transparency = props.transparency;\n        if (undefined !== transparency)\n            transparency = Math.max(0, Math.min(1, transparency));\n        this.transparency = transparency;\n    }\n    /** Create a copy of this PlanProjectionSettings, optionally modifying some of its properties.\n     * @param changedProps JSON representation of the properties to change.\n     * @returns A PlanProjectionSettings with all of its properties set to match those of `this`, except those explicitly defined in `changedProps`.\n     */\n    clone(changedProps) {\n        if (undefined === changedProps)\n            return this;\n        const props = this.toJSON();\n        if (undefined !== changedProps.elevation)\n            props.elevation = changedProps.elevation;\n        if (undefined !== changedProps.transparency)\n            props.transparency = changedProps.transparency;\n        if (undefined !== changedProps.overlay)\n            props.overlay = changedProps.overlay;\n        if (undefined !== changedProps.enforceDisplayPriority)\n            props.enforceDisplayPriority = changedProps.enforceDisplayPriority;\n        return new PlanProjectionSettings(props);\n    }\n}\n//# sourceMappingURL=PlanProjectionSettings.js.map",
      "start": 1693508120725,
      "end": 1693508120768,
      "sourcemaps": null
    }
  ]
}
