parameters:
  - name: NodeVersion # name of the parameter; required
    type: string # data type of the parameter; required
  - name: workingDir
    type: string
    default: $(System.DefaultWorkingDirectory)

steps:
  #-------
  # Clients Tests
  #-------
  - task: PublishTestResults@2
    displayName: "Publish Clients - iTwin Test Results"
    inputs:
      testResultsFiles: "clients/itwin/lib/test/junit_results.xml"
      testRunTitle: "Clients - iTwin Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()

  #-------
  # Core Tests
  #-------
  - task: PublishTestResults@2
    displayName: "Publish Backend Test Results"
    inputs:
      testResultsFiles: "core/backend/lib/test/junit_results.xml"
      testRunTitle: "Core - Backend Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Bentley Test Results"
    inputs:
      testResultsFiles: "core/bentley/lib/test/junit_results.xml"
      testRunTitle: "Core - Bentley Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  # - task: PublishTestResults@2
  #   displayName: "Publish Backend iTwin Client Test Results"
  #   inputs:
  #     testResultsFiles: "core/backend-itwin-client/lib/test/junit_results.xml"
  #     testRunTitle: "Core - Backend iTwin Client Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
  #     searchFolder: ${{ parameters.workingDir }}
  #   condition: succeededOrFailed()
  #   enabled: false
  - task: PublishTestResults@2
    displayName: "Publish Common Backend Test Results"
    inputs:
      testResultsFiles: "core/common/lib/test/junit_results.xml"
      testRunTitle: "Core - Common Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish ECSchema Locaters Test Results"
    inputs:
      testResultsFiles: "core/ecschema-locaters/lib/test/junit_results.xml"
      testRunTitle: "Core - ECSchema Locaters Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish ECSchema Metadata Test Results"
    inputs:
      testResultsFiles: "core/ecschema-metadata/lib/test/junit_results.xml"
      testRunTitle: "Core - ECSchema Metadata Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Frontend Test Results"
    inputs:
      testResultsFiles: "core/frontend/lib/test/junit_results.xml"
      testRunTitle: "Core - Frontend Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Geometry Test Results"
    inputs:
      testResultsFiles: "core/geometry/lib/test/junit_results.xml"
      testRunTitle: "Core - Geometry Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Quantity Test Results"
    inputs:
      testResultsFiles: "core/quantity/lib/test/junit_results.xml"
      testRunTitle: "Core - Quantity Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  #-------
  # Presentation Tests
  #-------
  - task: PublishTestResults@2
    displayName: "Publish Presentation Backend Test Results"
    inputs:
      testResultsFiles: "presentation/backend/lib/test/junit_results.xml"
      testRunTitle: "Presentation - Backend Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Presentation Common Test Results"
    inputs:
      testResultsFiles: "presentation/common/lib/test/junit_results.xml"
      testRunTitle: "Presentation - Common Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Presentation Components Test Results"
    inputs:
      testResultsFiles: "presentation/components/lib/test/junit_results.xml"
      testRunTitle: "Presentation - Components Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Presentation Frontend Test Results"
    inputs:
      testResultsFiles: "presentation/frontend/lib/test/junit_results.xml"
      testRunTitle: "Presentation - Frontend Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Presentation Testing Test Results"
    inputs:
      testResultsFiles: "presentation/testing/lib/test/junit_results.xml"
      testRunTitle: "Presentation - Testing Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()

  #-------
  # UI Tests
  #-------
  - task: PublishTestResults@2
    displayName: "Publish UI Abstract Test Results"
    inputs:
      testResultsFiles: "ui/abstract/lib/test/junit_results.xml"
      testRunTitle: "UI - Abstract Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish UI Components Test Results"
    inputs:
      testResultsFiles: "ui/components/lib/test/junit_results.xml"
      testRunTitle: "UI - Components Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish UI Core Test Results"
    inputs:
      testResultsFiles: "ui/core/lib/test/junit_results.xml"
      testRunTitle: "UI - Core Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish UI Framework Test Results"
    inputs:
      testResultsFiles: "ui/framework/lib/test/junit_results.xml"
      testRunTitle: "UI - Framework Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish UI Ninezone Test Results"
    inputs:
      testResultsFiles: "ui/ninezone/lib/test/junit_results.xml"
      testRunTitle: "UI - Ninezone Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()

  #-------
  # Full Stack Tests
  #-------
  - task: PublishTestResults@2
    displayName: "Publish Core Full Stack Test Results"
    inputs:
      testResultsFiles: "full-stack-tests/core/lib/test/junit_results.xml"
      testRunTitle: "Core Full Stack - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Native App Full Stack Test Results"
    inputs:
      testResultsFiles: "full-stack-tests/native-app/lib/test/junit_results.xml"
      testRunTitle: "Core Full Stack - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Presentation Full Stack Test Results"
    inputs:
      testResultsFiles: "full-stack-tests/presentation/lib/test/junit_results.xml"
      testRunTitle: "Presentation Full Stack - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish RPC Full Stack Test Results"
    inputs:
      testResultsFiles: "full-stack-tests/rpc/lib/test/junit_results.xml"
      testRunTitle: "RPC Full Stack - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()

  #-------
  # Example Code Tests
  #-------
  - task: PublishTestResults@2
    displayName: "Publish Example App"
    inputs:
      testResultsFiles: "example-code/app/lib/test/junit_results.xml"
      testRunTitle: "Example Apps - App Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Example Snippets"
    inputs:
      testResultsFiles: "example-code/snippets/lib/test/junit_results.xml"
      testRunTitle: "Example Apps - Snippets Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  #-------
  # Code Coverage Tests
  #-------
  ## TODO: Fix combining code coverage into a single xml file to publish
  # - task: PythonScript@0
  #   displayName: "Combine code coverage"
  #   inputs:
  #     workingDirectory: ${{ parameters.workingDir }}
  #     scriptSource: inline
  #     script: |
  #       import os, argparse, shutil
  #       from pathlib import Path  # Requires python 3.5+

  #       def readXML(compName, filePath):
  #         covFile = open(filePath).read()
  #         pattern = 'package name="'
  #         component = 'package name="'+ compName
  #         covFile = covFile.replace(pattern, component)
  #         outfile = open(filePath, 'w')
  #         outfile.write(covFile)
  #         outfile.close()

  #       parser = argparse.ArgumentParser()
  #       parser.add_argument("--output", help="Output path where xml reports will be copied")
  #       args = parser.parse_args()
  #       workDir = os.getcwd()
  #       testing = args.components.split(';')[1]
  #       print ("Working directory" + (os.getcwd() + os.sep + testing))

  #       listOfFiles = []
  #       for path in Path('.').rglob('cobertura-coverage.xml'):
  #         listOfFiles.append(path.name)

  #       print (listOfFiles)

  #       # Get the list of component folders that exist.  If a folder does not exist, it is skipped.
  #       # components = list(filter(lambda x: '' != x and os.path.exists(os.path.normpath(os.path.join(workDir, x))), args.components.split(';')))
  #       # print (components)
  #       # output_Dir = os.path.join(args.output, "coverageXMLs")

  #       # if not os.path.exists(output_Dir):
  #       #  os.makedirs(output_Dir)
  #       #  print ("*** Output directory created at: " + output_Dir)

  #       # Copy the reports to the respective dirs
  #       # postfix = os.path.join("lib", "test", "coverage", "cobertura-coverage.xml")
  #       # for comp in components:
  #       #   print ("Processing component: " + comp)
  #       #   src =  workDir + os.sep + comp + os.sep + postfix
  #       #   if not os.path.exists(src):
  #       #     print ("*** Source path for xml not exist: " + src)
  #       #     continue
  #       #   dstFileDir = output_Dir + os.sep + comp
  #       #   if not os.path.exists(dstFileDir):
  #       #     print ("*** Creating destination folder, '" + dstFileDir + "'...")
  #       #     os.makedirs(dstFileDir)
  #       #   shutil.copy(src, dstFileDir)
  #       #   print ("Copied: " + src)
  #       #   filePath = os.path.join(dstFileDir, "cobertura-coverage.xml")
  #       #   readXML(comp, filePath)
  #     arguments: --output '$(Build.BinariesDirectory)'
  #   condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'Schedule', 'Manual')) #, eq(variables['Agent.OS'], 'Windows_NT'))
  # - task: PublishCodeCoverageResults@1
  #   displayName: "Publish code coverage"
  #   inputs:
  #     codeCoverageTool: Cobertura
  #     summaryFileLocation: $(Build.SourcesDirectory)/**/**/lib/test/coverage/cobertura-coverage.xml
  #   condition: succeededOrFailed()