parameters:
  - name: NodeVersion # name of the parameter; required
    type: string # data type of the parameter; required
  - name: workingDir
    type: string
    default: $(System.DefaultWorkingDirectory)

steps:
  #-------
  # Clients Tests
  #-------
  - task: PublishTestResults@2
    displayName: "Publish Clients - iTwin Test Results"
    inputs:
      testResultsFiles: "clients/itwin/lib/test/junit_results.xml"
      testRunTitle: "Clients - iTwin Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()

  #-------
  # Core Tests
  #-------
  - task: PublishTestResults@2
    displayName: "Publish Backend Test Results"
    inputs:
      testResultsFiles: "core/backend/lib/test/junit_results.xml"
      testRunTitle: "Core - Backend Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Bentley Test Results"
    inputs:
      testResultsFiles: "core/bentley/lib/test/junit_results.xml"
      testRunTitle: "Core - Bentley Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  # - task: PublishTestResults@2
  #   displayName: "Publish Backend iTwin Client Test Results"
  #   inputs:
  #     testResultsFiles: "core/backend-itwin-client/lib/test/junit_results.xml"
  #     testRunTitle: "Core - Backend iTwin Client Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
  #     searchFolder: ${{ parameters.workingDir }}
  #   condition: succeededOrFailed()
  #   enabled: false
  - task: PublishTestResults@2
    displayName: "Publish Common Backend Test Results"
    inputs:
      testResultsFiles: "core/common/lib/test/junit_results.xml"
      testRunTitle: "Core - Common Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish ECSchema Locaters Test Results"
    inputs:
      testResultsFiles: "core/ecschema-locaters/lib/test/junit_results.xml"
      testRunTitle: "Core - ECSchema Locaters Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish ECSchema Metadata Test Results"
    inputs:
      testResultsFiles: "core/ecschema-metadata/lib/test/junit_results.xml"
      testRunTitle: "Core - ECSchema Metadata Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Frontend Test Results"
    inputs:
      testResultsFiles: "core/frontend/lib/test/junit_results.xml"
      testRunTitle: "Core - Frontend Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Geometry Test Results"
    inputs:
      testResultsFiles: "core/geometry/lib/test/junit_results.xml"
      testRunTitle: "Core - Geometry Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Quantity Test Results"
    inputs:
      testResultsFiles: "core/quantity/lib/test/junit_results.xml"
      testRunTitle: "Core - Quantity Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  #-------
  # Presentation Tests
  #-------
  - task: PublishTestResults@2
    displayName: "Publish Presentation Backend Test Results"
    inputs:
      testResultsFiles: "presentation/backend/lib/test/junit_results.xml"
      testRunTitle: "Presentation - Backend Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Presentation Common Test Results"
    inputs:
      testResultsFiles: "presentation/common/lib/test/junit_results.xml"
      testRunTitle: "Presentation - Common Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Presentation Components Test Results"
    inputs:
      testResultsFiles: "presentation/components/lib/test/junit_results.xml"
      testRunTitle: "Presentation - Components Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Presentation Frontend Test Results"
    inputs:
      testResultsFiles: "presentation/frontend/lib/test/junit_results.xml"
      testRunTitle: "Presentation - Frontend Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Presentation Testing Test Results"
    inputs:
      testResultsFiles: "presentation/testing/lib/test/junit_results.xml"
      testRunTitle: "Presentation - Testing Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()

  #-------
  # UI Tests
  #-------
  - task: PublishTestResults@2
    displayName: "Publish UI Abstract Test Results"
    inputs:
      testResultsFiles: "ui/abstract/lib/test/junit_results.xml"
      testRunTitle: "UI - Abstract Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish UI Components Test Results"
    inputs:
      testResultsFiles: "ui/components/lib/test/junit_results.xml"
      testRunTitle: "UI - Components Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish UI Core Test Results"
    inputs:
      testResultsFiles: "ui/core/lib/test/junit_results.xml"
      testRunTitle: "UI - Core Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish UI Framework Test Results"
    inputs:
      testResultsFiles: "ui/framework/lib/test/junit_results.xml"
      testRunTitle: "UI - Framework Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish UI Ninezone Test Results"
    inputs:
      testResultsFiles: "ui/ninezone/lib/test/junit_results.xml"
      testRunTitle: "UI - Ninezone Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()

  #-------
  # Full Stack Tests
  #-------
  - task: PublishTestResults@2
    displayName: "Publish Core Full Stack Test Results"
    inputs:
      testResultsFiles: "full-stack-tests/core/lib/test/junit_results.xml"
      testRunTitle: "Core Full Stack - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Native App Full Stack Test Results"
    inputs:
      testResultsFiles: "full-stack-tests/native-app/lib/test/junit_results.xml"
      testRunTitle: "Core Full Stack - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Presentation Full Stack Test Results"
    inputs:
      testResultsFiles: "full-stack-tests/presentation/lib/test/junit_results.xml"
      testRunTitle: "Presentation Full Stack - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish RPC Full Stack Test Results"
    inputs:
      testResultsFiles: "full-stack-tests/rpc/lib/test/junit_results.xml"
      testRunTitle: "RPC Full Stack - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()

  #-------
  # Example Code Tests
  #-------
  - task: PublishTestResults@2
    displayName: "Publish Example App"
    inputs:
      testResultsFiles: "example-code/app/lib/test/junit_results.xml"
      testRunTitle: "Example Apps - App Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Example Snippets"
    inputs:
      testResultsFiles: "example-code/snippets/lib/test/junit_results.xml"
      testRunTitle: "Example Apps - Snippets Tests - $(Agent.OS) - ${{ parameters.NodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  #-------
  # Code Coverage Tests
  #-------
  ## TODO: Fix combining code coverage into a single xml file to publish
  - task: PythonScript@0
    displayName: "Combine code coverage"
    inputs:
      workingDirectory: ${{ parameters.workingDir }}
      pythonInterpreter: python3
      scriptSource: inline
      script: |
        import os, argparse, shutil, glob
        import xml.etree.ElementTree as ET
        from xml.dom import minidom

        def prettifyXML(elem):
          rough_string = ET.tostring(elem, 'utf-8')
          reparsed = minidom.parseString(rough_string)
          return reparsed.toprettyxml(indent="  ")

        def replacePackageName(packageSource, filePath):
          covFile = open(filePath).read()
          pattern = 'package name="'
          component = 'package name="' + packageSource + os.sep
          covFile = covFile.replace(pattern, component)
          editedCovFile = open(filePath, "w")
          editedCovFile.write(covFile)
          editedCovFile.close()

        def getCoverageTag(filePath):
          tree = ET.parse(filePath)
          root = tree.getroot()
          return root

        parser = argparse.ArgumentParser()
        parser.add_argument(
          "--output", help="Output path where xml reports will be copied")
        args = parser.parse_args()
        workDir = os.getcwd()

        listOfFiles = []
        print(workDir)

        for path in glob.iglob((workDir + "/*/*/lib/**/cobertura-coverage.xml"), recursive=True):
          listOfFiles.append(path)

        print("List of Files : ", listOfFiles)

        outputDir = os.path.join(args.output, "coverageXMLs")
        if not os.path.exists(outputDir):
          os.makedirs(outputDir)

        print(os.path.abspath(outputDir))

        start = "s"
        end = "lib"

        outputXML = "coverage.xml"

        outfile = open(os.path.join(outputDir, outputXML), 'w')

        count = 0

        for file in listOfFiles:
          filePathParts = file.split(os.sep)
          coveragePath = os.path.join(*filePathParts[filePathParts.index((start))+1:filePathParts.index(end)])
          destFilePath = os.path.join(outputDir, coveragePath)

          destFile = os.path.join(destFilePath, "cobertura-coverage.xml")
          if os.path.exists(destFile):
            coveragePath = os.path.join(*filePathParts[filePathParts.index(("coverage"))+1:filePathParts.index("cobertura-coverage.xml")])
            destFilePath = os.path.join(destFilePath, coveragePath)

          if not os.path.exists(destFilePath):
            os.makedirs(destFilePath)

          destFile = os.path.join(destFilePath, "cobertura-coverage.xml")

          shutil.copy(file, destFilePath)
          replacePackageName(coveragePath, destFile)

          if count != 0:
            coverage = getCoverageTag(destFile)
            outfile.write(prettifyXML(coverage))
          else:
            outfile.write(open(destFile).read())

          count += 1

        outfile.close()

      arguments: --output common/config/azure-pipelines/templates
    # condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'Schedule', 'Manual')) #, eq(variables['Agent.OS'], 'Windows_NT'))
  - task: CmdLine@2
    displayName: "Check Dir after combining"
    inputs:
      script: dir
  - task: CmdLine@2
    displayName: "Check Dir after combining"
    inputs:
      script: dir
      workingDirectory: common/config/azure-pipelines/templates/coverageXMLs
  - task: PublishCodeCoverageResults@1
    displayName: "Publish code coverage"
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: "common/config/azure-pipelines/templates/coverageXMLs/coverage.xml"
    condition: succeededOrFailed()