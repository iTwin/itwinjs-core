parameters:
  - name: nodeVersion # name of the parameter; required
    type: string # data type of the parameter; required
  - name: workingDir
    type: string
    default: $(System.DefaultWorkingDirectory)

steps:
  #-------
  # Core Tests
  #-------
  - task: PublishTestResults@2
    displayName: "Publish Backend Test Results"
    inputs:
      testResultsFiles: "core/backend/lib/test/junit_results.xml"
      testRunTitle: "Core - Backend Tests - $(Agent.OS) - ${{ parameters.nodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish iOS Backend Test Results"
    inputs:
      testResultsFiles: core/backend/lib/junit_results.xml
      testRunTitle: "Test suite Core - Backend on iOS"
    condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Darwin'))
  - task: PublishTestResults@2
    displayName: "Publish Bentley Test Results"
    inputs:
      testResultsFiles: "core/bentley/lib/test/junit_results.xml"
      testRunTitle: "Core - Bentley Tests - $(Agent.OS) - ${{ parameters.nodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Common Backend Test Results"
    inputs:
      testResultsFiles: "core/common/lib/test/junit_results.xml"
      testRunTitle: "Core - Common Tests - $(Agent.OS) - ${{ parameters.nodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish ECSchema Locaters Test Results"
    inputs:
      testResultsFiles: "core/ecschema-locaters/lib/test/junit_results.xml"
      testRunTitle: "Core - ECSchema Locaters Tests - $(Agent.OS) - ${{ parameters.nodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish ECSchema Metadata Test Results"
    inputs:
      testResultsFiles: "core/ecschema-metadata/lib/test/junit_results.xml"
      testRunTitle: "Core - ECSchema Metadata Tests - $(Agent.OS) - ${{ parameters.nodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Frontend Test Results"
    inputs:
      testResultsFiles: "core/frontend/lib/test/junit_results.xml"
      testRunTitle: "Core - Frontend Tests - $(Agent.OS) - ${{ parameters.nodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Geometry Test Results"
    inputs:
      testResultsFiles: "core/geometry/lib/test/junit_results.xml"
      testRunTitle: "Core - Geometry Tests - $(Agent.OS) - ${{ parameters.nodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish i18n Test Results"
    inputs:
      testResultsFiles: "core/i18n/lib/test/junit_results.xml"
      testRunTitle: "Core - i18n Tests - $(Agent.OS) - ${{ parameters.nodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Quantity Test Results"
    inputs:
      testResultsFiles: "core/quantity/lib/test/junit_results.xml"
      testRunTitle: "Core - Quantity Tests - $(Agent.OS) - ${{ parameters.nodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  #-------
  # Presentation Tests
  #-------
  - task: PublishTestResults@2
    displayName: "Publish Presentation Backend Test Results"
    inputs:
      testResultsFiles: "presentation/backend/lib/test/junit_results.xml"
      testRunTitle: "Presentation - Backend Tests - $(Agent.OS) - ${{ parameters.nodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Presentation Common Test Results"
    inputs:
      testResultsFiles: "presentation/common/lib/test/junit_results.xml"
      testRunTitle: "Presentation - Common Tests - $(Agent.OS) - ${{ parameters.nodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Presentation Frontend Test Results"
    inputs:
      testResultsFiles: "presentation/frontend/lib/test/junit_results.xml"
      testRunTitle: "Presentation - Frontend Tests - $(Agent.OS) - ${{ parameters.nodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  #-------
  # UI Tests
  #-------
  - task: PublishTestResults@2
    displayName: "Publish UI Abstract Test Results"
    inputs:
      testResultsFiles: "ui/abstract/lib/test/junit_results.xml"
      testRunTitle: "UI - Abstract Tests - $(Agent.OS) - ${{ parameters.nodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  #-------
  # Full Stack Tests
  #-------
  - task: PublishTestResults@2
    displayName: "Publish Core Full Stack Test Results"
    inputs:
      testResultsFiles: "full-stack-tests/core/lib/test/junit_results.xml"
      testRunTitle: "Core Full Stack - $(Agent.OS) - ${{ parameters.nodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Presentation Full Stack Test Results"
    inputs:
      testResultsFiles: "full-stack-tests/presentation/lib/test/junit_results.xml"
      testRunTitle: "Presentation Full Stack - $(Agent.OS) - ${{ parameters.nodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish RPC Full Stack Test Results"
    inputs:
      testResultsFiles: "full-stack-tests/rpc/lib/test/junit_results.xml"
      testRunTitle: "RPC Full Stack - $(Agent.OS) - ${{ parameters.nodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()

  #-------
  # Example Code Tests
  #-------
  - task: PublishTestResults@2
    displayName: "Publish Example App"
    inputs:
      testResultsFiles: "example-code/app/lib/test/junit_results.xml"
      testRunTitle: "Example Apps - App Tests - $(Agent.OS) - ${{ parameters.nodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  - task: PublishTestResults@2
    displayName: "Publish Example Snippets"
    inputs:
      testResultsFiles: "example-code/snippets/lib/test/junit_results.xml"
      testRunTitle: "Example Apps - Snippets Tests - $(Agent.OS) - ${{ parameters.nodeVersion }}"
      searchFolder: ${{ parameters.workingDir }}
    condition: succeededOrFailed()
  #-------
  # Code Coverage Tests
  #-------
  ## TODO: Fix combining code coverage into a single xml file to publish
  - task: PythonScript@0
    displayName: "Combine code coverage"
    inputs:
      workingDirectory: ${{ parameters.workingDir }}
      pythonInterpreter: python3
      scriptSource: inline
      script: |
        import os, argparse, shutil, glob

        parser = argparse.ArgumentParser()
        parser.add_argument(
          "--output", help="Output path where xml reports will be copied")
        args = parser.parse_args()
        workDir = os.getcwd()

        listOfPaths = []

        for path in glob.iglob((workDir + "/*/*/.nyc_output"), recursive=True):
          listOfPaths.append(path)

        for path in glob.iglob((workDir + "/*/*/lib/**/.nyc_output"), recursive=True):
          listOfPaths.append(path)

        for path in glob.iglob((workDir + "/*/*/*/lib/**/.nyc_output"), recursive=True):
          listOfPaths.append(path)

        outputDir = os.path.join(args.output, "coverageXMLs")
        processInfoDir = os.path.join(args.output, "coverageXMLs/processinfo")
        if not os.path.exists(processInfoDir):
          os.makedirs(processInfoDir)

        for path in listOfPaths:
          for file in glob.iglob((path + "/**"), recursive=True):
            if os.path.isfile(file):
              if "processinfo" in file:
                shutil.copy(file, processInfoDir)
              else:
                shutil.copy(file, outputDir)

      arguments: --output $(Build.ArtifactStagingDirectory)
    condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Darwin'))
  - task: Cmdline@2
    displayName: "Generate combined coverage report"
    inputs:
      script: npx nyc report --temp-dir="$(Build.ArtifactStagingDirectory)/coverageXMLs/" --report-dir="$(Build.ArtifactStagingDirectory)/coverageResults" --all --reporter=lcov --reporter=cobertura
    condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Darwin'))
  - task: PublishCodeCoverageResults@1
    displayName: "Publish code coverage"
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: "$(Build.ArtifactStagingDirectory)/coverageResults/cobertura-coverage.xml"
      reportDirectory: "$(Build.ArtifactStagingDirectory)/coverageResults/lcov-report"
    condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Darwin'))