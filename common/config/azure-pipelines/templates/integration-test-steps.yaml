parameters:
  - name: nodeVersion # name of the parameter; required
    type: string # data type of the parameter; required

steps:
  - template: setup-integration-users.yaml

  - task: NodeTool@0
    displayName: "Use Node ${{ parameters.nodeVersion }}"
    inputs:
      versionSpec: "${{ parameters.nodeVersion }}"
      checkLatest: true

  - script: "git config --local user.email imodeljs-admin@users.noreply.github.com"
    displayName: "git config email"
  - script: "git config --local user.name imodeljs-admin"
    displayName: "git config name"

  - script: node ./common/scripts/install-run-rush install
    displayName: rush install

  - script: |
      # full-stack-tests/backend/package.json
      node ./common/scripts/install-run-rush build -v --to backend-integration-tests
      # full-stack-tests/core/package.json
      node ./common/scripts/install-run-rush build -v --to core-full-stack-tests
      # full-stack-tests/ecschema-rpc-interface/package.json
      node ./common/scripts/install-run-rush build -v --to @itwin/ecschema-rpcinterface-tests
      # full-stack-tests/rpc/package.json
      node ./common/scripts/install-run-rush build -v --to rpc-full-stack-tests
      # full-stack-tests/rpc-interface/package.json
      node ./common/scripts/install-run-rush build -v --to rpcinterface-full-stack-tests
      # full-stack-tests/presentation/package.json
      node ./common/scripts/install-run-rush build -v --to presentation-full-stack-tests

      node ./common/scripts/install-run-rush webpack:test -v
    displayName: "Rush build"

  - script: npm run test:integration
    workingDirectory: "full-stack-tests/backend"
    env:
      NODE_ENV: development
    displayName: "Run Backend Tests"
    condition: succeededOrFailed()

  # Linux agents do not have a real display so use the virtual framebuffer
  - script: xvfb-run --auto-servernum --server-args='-screen 0, 1600x900x24' npm run test:integration
    workingDirectory: "full-stack-tests/core"
    env:
      NODE_ENV: development
    displayName: "Run Core Full Stack Tests"
    condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Linux'))

  # MacOS and Windows agents work without any virtual display
  - script: npm run test:integration
    workingDirectory: "full-stack-tests/core"
    env:
      NODE_ENV: development
    displayName: "Run Core Full Stack Tests"
    condition: and(succeededOrFailed(), ne(variables['Agent.OS'], 'Linux'))

  - script: npm run test:integration
    workingDirectory: "full-stack-tests/ecschema-rpc-interface"
    env:
      NODE_ENV: development
    displayName: "Run ECSchema RPC Interface Tests"
    condition: succeededOrFailed()

  # By default linux agents do not have a real display so use the virtual framebuffer
  - script: xvfb-run --auto-servernum --server-args='-screen 0, 1600x900x24' npm run test
    workingDirectory: "full-stack-tests/rpc"
    env:
      NODE_ENV: development
    displayName: "Run RPC Full Stack Tests"
    condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Linux'))

  # MacOS and Windows agents work without any virtual display
  - script: npm run test
    workingDirectory: "full-stack-tests/rpc"
    displayName: "Run RPC Full Stack Tests"
    condition: and(succeededOrFailed(), ne(variables['Agent.OS'], 'Linux'))

  - script: npm run test:integration
    workingDirectory: "full-stack-tests/rpc-interface"
    env:
      NODE_ENV: development
    displayName: "Run RPC Interface Full Stack Tests"
    condition: succeededOrFailed()

  - script: npm run test:integration
    workingDirectory: "full-stack-tests/presentation"
    env:
      NODE_ENV: development
    displayName: "Run Presentation Full Stack Tests"
    condition: succeededOrFailed()

  # By default linux agents do not have a real display so use the virtual framebuffer
  - script: xvfb-run --auto-servernum --server-args='-screen 0, 1600x900x24' npm run test:integration:frontend
    workingDirectory: "core/electron"
    env:
      NODE_ENV: development
    displayName: "Run Electron Frontend Tests"
    condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Linux'))

  # MacOS and Windows agents work without any virtual display
  - script: npm run test:integration:frontend
    workingDirectory: "core/electron"
    env:
      NODE_ENV: development
    displayName: "Run Electron Frontend Tests"
    condition: and(succeededOrFailed(), ne(variables['Agent.OS'], 'Linux'))

  # By default linux agents do not have a real display so use the virtual framebuffer
  - script: xvfb-run --auto-servernum --server-args='-screen 0, 1600x900x24' npm run test:integration:backend
    workingDirectory: "core/electron"
    env:
      NODE_ENV: development
    displayName: "Run Electron Backend Tests"
    condition: and(succeededOrFailed(), eq(variables['Agent.OS'], 'Linux'))

  # MacOS and Windows agents work without any virtual display
  - script: npm run test:integration:backend
    workingDirectory: "core/electron"
    displayName: "Run Electron Backend Tests"
    condition: and(succeededOrFailed(), ne(variables['Agent.OS'], 'Linux'))

  - task: PublishTestResults@2
    displayName: "Publish Backend Test Results"
    inputs:
      testResultsFiles: "full-stack-tests/backend/lib/test/junit_results.xml"
      testRunTitle: "Core - Backend Tests - ${{ parameters.nodeVersion }}"
    continueOnError: true
    condition: succeededOrFailed()

  - task: PublishTestResults@2
    displayName: "Publish Core Integration Test Results"
    inputs:
      testResultsFiles: "full-stack-tests/core/lib/test/junit_results.xml"
      testRunTitle: "Core - Integration Tests - ${{ parameters.nodeVersion }}"
    condition: succeededOrFailed()

  - task: PublishTestResults@2
    displayName: "Publish ECSchema Rpc Interface Integration Test Results"
    inputs:
      testResultsFiles: "full-stack-tests/ecschema-rpc-interface/ecschema-rpcinterface-tests-result/ecschema-rpcinterface-tests-result.xml"
      testRunTitle: "ECSchema Rpc Interface - Integration Tests - ${{ parameters.nodeVersion }}"
    condition: succeededOrFailed()

  - task: PublishTestResults@2
    displayName: "Publish RPC Full Stack Test Results"
    inputs:
      testResultsFiles: "full-stack-tests/rpc/lib/test/junit_results.xml"
      testRunTitle: "RPC Full Stack - ${{ parameters.nodeVersion }}"
    condition: succeededOrFailed()

  - task: PublishTestResults@2
    displayName: "Publish Rpc Interface Integration Test Results"
    inputs:
      testResultsFiles: "full-stack-tests/rpc-interface/full_stack_test_results/full_stack_test_result.xml"
      testRunTitle: "Rpc Interface - Integration Tests - ${{ parameters.nodeVersion }}"
    condition: succeededOrFailed()

  - task: PublishTestResults@2
    displayName: "Publish Presentation Integration Test Results"
    inputs:
      testResultsFiles: full-stack-tests/presentation/lib/test/junit_results.xml
      testRunTitle: "Presentation - Integration Tests - ${{ parameters.nodeVersion }}"
    condition: succeededOrFailed()

  - task: PublishTestResults@2
    displayName: "Publish Electron Test Results"
    inputs:
      testResultsFiles: core/electron/lib/test/*_junit_results.xml
      testRunTitle: "Core - Electron Tests - ${{ parameters.nodeVersion }}"
    condition: succeededOrFailed()
