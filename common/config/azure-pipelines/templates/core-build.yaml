# This defines the core steps for building and validating iModel.js

parameters:
  - name: workingDir
    type: string
    default: $(System.DefaultWorkingDirectory)

steps:
  - script: node common/scripts/install-run-rush.js check
    displayName: rush check
    workingDirectory: ${{ parameters.workingDir }}
  - task: PythonScript@0
    displayName: "rush change -v"
    inputs:
      workingDirectory: ${{ parameters.workingDir }}
      scriptSource: inline
      script: |
        import sys, subprocess

        srcBranch = sys.argv[1]
        targetBranch = srcBranch

        # Second param, is the build reason which will be used to determine the target branch.
        #   If the build reason is a PR, the target branch changes.
        buildReason = sys.argv[2]

        if buildReason == "PullRequest":
            # Third param, is the target branch of the PR
            targetBranch = sys.argv[3]

        print ("Current branch: " + srcBranch)
        print ("Target branch: " + targetBranch)

        # Verifying with rush change requires the branch that is being merged into to be provided.  More details, https://rushjs.io/pages/commands/rush_change/.
        # With release/* being a potential target branch in addition to master, special case those branches.
        if targetBranch.find("refs/heads/release") != -1:
            branchCmd = " -b " + targetBranch.replace("refs/heads/", "origin/")
        elif targetBranch.find("release") != -1:
            # ADOps uses the branch name (i.e. 'release/2.8.0') for GH PR branch names instead of full refs.
            branchCmd = " -b origin/" + targetBranch
        else:
            # Uses default head ("origin/master"), if not defined
            branchCmd = ""

        command = "node common/scripts/install-run-rush.js change -v" + branchCmd
        print ("Executing " + command)

        proc = subprocess.Popen(command, stdin = subprocess.PIPE, stdout = subprocess.PIPE, shell=True)
        exit(proc.returncode)

      arguments: $(Build.SourceBranch) $(Build.Reason) $(System.PullRequest.TargetBranch)
      failOnStderr: true
  - script: node common/scripts/install-run-rush.js install
    displayName: rush install
    workingDirectory: ${{ parameters.workingDir }}
  - script: node common/scripts/install-run-rush.js audit
    displayName: rush audit
    workingDirectory: ${{ parameters.workingDir }}

  - script: node common/scripts/install-run-rush.js rebuild -v --to-version-policy prerelease-monorepo-lockStep -p max
    displayName: rush build packages
    workingDirectory: ${{ parameters.workingDir }}
  - script: node common/scripts/install-run-rush.js build -v -p max
    displayName: rush build everything else (test-apps and example code)
    workingDirectory: ${{ parameters.workingDir }}
  - script: node common/scripts/install-run-rush.js lint
    displayName: rush lint
    workingDirectory: ${{ parameters.workingDir }}
  - script: node common/scripts/install-run-rush.js extract-api
    displayName: rush extract-api
    workingDirectory: ${{ parameters.workingDir }}

  # By default linux agents do not have a real display so use the virtual framebuffer
  - ${{ if eq(variables['Agent.OS'], 'Linux') }}:
    - script: xvfb-run --auto-servernum --server-args='-screen 0, 1600x900x24' node common/scripts/install-run-rush.js cover --verbose
      displayName: rush cover
      workingDirectory: ${{ parameters.workingDir }}

  # MacOS and Windows agents work without any virtual display
  - ${{ if ne(variables['Agent.OS'], 'Linux') }}:
    - script: node common/scripts/install-run-rush.js cover --verbose
      displayName: rush cover
      workingDirectory: ${{ parameters.workingDir }}

  - script: node common/scripts/install-run-rush.js docs
    displayName: rush docs
    workingDirectory: ${{ parameters.workingDir }}
