# The template defines the primary steps for creating the TypeDoc API files, gathering other md files,
# and running a step to combine everything.

parameters:
  - name: workingDir
    type: string
    default: $(Pipeline.Workspace)/itwinjs-core
  - name: stagingDir
    type: string
    default: $(System.ArtifactsDirectory)/staging
  - name: outputDir
    type: string
    default: $(Pipeline.Workspace)/tempDocsBuild
  - name: downloadCurrentBuildArtifacts
    type: boolean
    default: false
  - name: shouldPublish
    type: boolean
    default: false

jobs:
  - job:
    workspace:
      clean: all
    pool:
      name: iModelTechCI
      demands: Agent.OS -equals Windows_NT

    steps:
      - checkout: self
        path: itwinjs-core
        clean: true

      - task: NodeTool@0
        displayName: Use Node 14
        inputs:
          versionSpec: 14.17.4
          checkLatest: true

      - script: |
          git config --local user.email imodeljs-admin@users.noreply.github.com
          git config --local user.name imodeljs-admin
        displayName: Setup git config

      - script: node common/scripts/install-run-rush.js install
        displayName: rush install
        workingDirectory: ${{ parameters.workingDir }}

      - script: node common/scripts/install-run-rush.js build:ci
        displayName: rush build
        workingDirectory: ${{ parameters.workingDir }}

      - script: node common/scripts/install-run-rush.js docs
        displayName: rush docs
        workingDirectory: ${{ parameters.workingDir }}

      # Gathers all the pieces to run BeMetalsmith
      - template: ../../templates/gather-docs.yaml
        parameters:
          workingDir: ${{ parameters.workingDir }}
          stagingDir: ${{ parameters.stagingDir }}
          downloadCurrentBuildArtifacts: ${{ parameters.downloadCurrentBuildArtifacts }}

      # Currently BeMetalsmith is an internal only tool
      - script: npm install @bentley/bemetalsmith@4.x
        displayName: Install BeMetalsmith
        workingDirectory: ${{ parameters.workingDir }}

      - script: "./node_modules/.bin/bmsBuild --strictLinkChecking --topicsMustHaveDesc --source ${{ parameters.stagingDir }} --destination ${{ parameters.outputDir }}/public_build --siteTitle iTwin.js"
        displayName: Run bmsBuild
        workingDirectory: ${{ parameters.workingDir }}

      # Update the .updated.json file after the bmsBuild
      - publish: ${{ parameters.stagingDir }}/config/.updated.json
        artifact: .updated.json
        displayName: Publish Pipeline Artifact - .updated.json
        condition: and(succeeded(), eq('${{ parameters.downloadCurrentBuildArtifacts }}', false))

      - task: PythonScript@0
        inputs:
          scriptSource: inline
          script: |
            import os, subprocess, sys

            # Validate arguments
            if len(sys.argv) != 2:
              sys.exit("Invalid number of arguments to script provided.\nExpected: 1\nReceived: {0}".format(len(sys.argv) - 1))
            outputDir = os.path.realpath(sys.argv[1])

            # Get local version from @itwin/core-backend
            cmd = ["node", "-p", "require('./core/backend/package.json').version"]
            process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            try:
              out, err = process.communicate()
            except:
              process.kill()
              out, err = process.communicate()

            if process.returncode > 0:
              print(err.decode())
            else:
              package_version = out.decode().strip()

              # # Check npm to see if local version of @itwin/core-backend has been published
              # cmd = ["npm", "view", "@itwin/core-backend@" + package_version]
              # process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
              # try:
              #   out, err = process.communicate()
              # except:
              #   process.kill()
              #   out, err = process.communicate()

              # if process.returncode > 0:
              #   err = err.decode()
              #   if err.find("code E404"):
              print("Releasing version " + package_version)
              f = open(os.path.join(outputDir, "version.txt"), "w")
              f.write(package_version)
              f.close()

              print("##vso[build.addbuildtag]iTwinJsDocsRelease")
                # else:
                #   print(err)
              else:
                print("Version " + package_version + " already exists")
          arguments: ${{ parameters.outputDir }}
          workingDirectory: ${{ parameters.workingDir }}
        displayName: Tag if new release
        condition: and(succeeded(), eq('${{ parameters.shouldPublish }}', true))

      - publish: ${{ parameters.outputDir }}
        artifact: DocsBuild
        displayName: Publish Pipeline Artifact - DocsBuild
        condition: and(succeeded(), eq('${{ parameters.shouldPublish }}', true))
