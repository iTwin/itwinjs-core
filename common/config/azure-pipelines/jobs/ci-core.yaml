parameters:
  name: ''
  pool: ''
  nodeVersion: ''

jobs:
- job:
  strategy:
    matrix:
      "Windows_${{ parameters.name }}":
        OS: windows-latest
        platform: Windows_NT
      "Linux_${{ parameters.name }}":
        OS: ubuntu-latest
        platform: Linux
      "MacOS_${{ parameters.name }}":
        OS: macOS-latest
        platform: Darwin

  timeoutInMinutes: 120

  pool: ${{ parameters.pool }}

  workspace:
    clean: all

  steps:
    - checkout: self
      clean: true
    - task: NodeTool@0
      displayName: "Use Node ${{ parameters.nodeVersion }}"
      inputs:
        versionSpec: ${{ parameters.nodeVersion }}
        checkLatest: true

    - script: |
        git config --local user.email imodeljs-admin@users.noreply.github.com
        git config --local user.name imodeljs-admin
      displayName: git config

    - ${{ if eq(variables['Agent.OS'], 'Windows_NT') }}:
      - powershell: |
          # Get the new version number.
          $json = Get-Content -Raw -Path common/config/rush/version-policies.json | ConvertFrom-Json
          $currVersion = $json[0].version

          $newBuildNumber = $currVersion + "_$(Build.BuildNumber)"

          Write-Host "##vso[build.updatebuildnumber]$newBuildNumber"
        displayName: Set build number

    - template: ../templates/core-build.yaml

    # Will run if even there is a failure somewhere else in the pipeline.
    - template: ../templates/publish-test-results.yaml
      parameters:
        NodeVersion: ${{ parameters.nodeVersion }}
    # The publish script identifies any new packages not previously published and tags the build
    - ${{ if and(in(variables['Build.Reason'], 'IndividualCI', 'Schedule', 'Manual'), eq(variables['Agent.OS'], 'Windows_NT')) }}:
      - template: ../templates/publish.yaml
