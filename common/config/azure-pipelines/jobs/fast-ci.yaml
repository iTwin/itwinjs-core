# iTwin.js Core CI Build

trigger:
  - master
  - release/*

variables:
  - group: Rush Build Cache SAS Token
  - group: Travis Cobbs - GitHub PAT
  - group: imodel-native secret variables
  - name: shouldWriteToCache
    value: ${{ and(eq(variables['Agent.OS'], 'Linux'), in(variables['Build.Reason'], 'IndividualCI', 'Manual')) }}
  - name: win_pool
    value: "imodelNative-Win11-VS2022"
  - name: linux_pool
    value: "imodelNative-Debian12"
  - name: mac_pool
    value: "iModelTechMacArm"
  - name: BUILD_URL
    value: "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"

pr:
  autoCancel: true
  drafts: true
  branches:
    include:
      - master
      - release/*
  paths:
    exclude:
      - "**/README.md"
      - "**.api.md"
      - docs/**
      - .github/CODEOWNERS
      - common/changes/**/*.json
      - "**/CHANGELOG.json"
      - "**/CHANGELOG.md"

resources:
  repositories:
    - repository: build-pipeline-scripts
      type: git
      name: iModelTechnologies/imodeljs-build-pipeline-scripts

jobs:
  - job: Build
    dependsOn: CheckLinkedPR
    condition: succeeded()
    strategy:
      matrix:
        "Windows_Node_22":
          platform: Windows_NT
          name: $(win_pool)
        "Linux_Node_22":
          platform: Linux
          name: $(linux_pool)
        "MacOS_Node_22":
          platform: Darwin
          name: $(mac_pool)

    pool:
      name: $(name)
      demands:
        - Agent.OS -equals $(platform)

    timeoutInMinutes: 60

    workspace:
      clean: all

    steps:
      - checkout: self
        clean: true
      - template: ../templates/core-build.yaml
        parameters:
          nodeVersion: 22.x
          buildMobile: true
      # Will run if even there is a failure somewhere else in the pipeline.
      - template: ../templates/publish-test-results.yaml
        parameters:
          nodeVersion: 22.x
      # The publish script identifies any new packages not previously published and tags the build
      - template: ../templates/publish.yaml

  - job: PostResult
    dependsOn:
      - CheckLinkedPR
      - Build
    condition: and(succeeded(), eq(dependencies.CheckLinkedPR.outputs['checkForPr.POST_STATUS'], 'true'), eq(variables['Build.Reason'], 'PullRequest'))
    displayName: Post Success
    pool:
      vmImage: ubuntu-latest

    steps:
      - bash: |
          branch=$(System.PullRequest.SourceBranch)
          sha=$(gh pr view $branch --json "headRefOid" -q ".headRefOid")
          echo "Posting 'success' status to current PR"
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/$(Build.Repository.Name)/statuses/$sha \
            -f state='success' \
            -f target_url='$(BUILD_URL)' \
            -f context='itwinjs-core PR validation' \
            -f description='No native PR was linked'
        env:
          GITHUB_TOKEN: $(GH_TOKEN)
