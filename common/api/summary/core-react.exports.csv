sep=;
Release Tag;API Item
public;ActivateSettingsTabEvent 
public;ActivateSettingsTabEventArgs
internal;AnnularSector
internal;Annulus
public;AsyncGetAutoSuggestDataFunc = (value: string) => Promise
public;AutoSuggest 
public;AutoSuggestData
public;AutoSuggestProps 
internal;Badge 
internal;BadgeProps 
internal;BadgeUtilities
internal;BetaBadge(props: CommonProps): JSX.Element
public;BlockText(props: TextProps): JSX.Element
public;BodyText(props: TextProps): JSX.Element
public;Button 
deprecated;Button 
public;ButtonProps 
deprecated;ButtonProps 
public;ButtonSize
deprecated;ButtonSize
public;ButtonType
deprecated;ButtonType
internal;calculateBackdropFilterBlur: (proximityScale: number) => number
internal;calculateBoxShadowOpacity: (proximityScale: number) => number
internal;calculateProximityScale: (proximity: number, snap?: boolean, threshold?: number) => number
internal;calculateToolbarOpacity: (proximityScale: number) => number
public;Centered(props: CommonDivProps): JSX.Element
public;Checkbox 
deprecated;Checkbox 
public;CheckBoxInfo
public;CheckboxProps 
deprecated;CheckboxProps 
public;CheckBoxState
public;CheckListBox 
public;CheckListBoxItem 
public;CheckListBoxItemProps 
public;CheckListBoxSeparator(): JSX.Element
internal;Circle
public;ClassNameProps
internal;CloseSettingsContainerEvent 
public;CommonDivProps 
public;CommonProps 
public;ContextMenu 
public;ContextMenuDirection
public;ContextMenuDivider 
public;ContextMenuItem 
public;ContextMenuItemProps 
public;ContextMenuProps 
public;ContextSubMenu 
public;ContextSubMenuProps 
internal;Corner
internal;CrossAxisArrowKeyFunc = (forward: boolean) => void
public;Dialog 
public;DialogAlignment
public;DialogButtonDef
deprecated;DialogButtonDef
public;DialogButtonStyle
deprecated;DialogButtonStyle
public;DialogButtonType
deprecated;DialogButtonType
public;DialogProps 
public;DisabledText(props: TextProps): JSX.Element
public;Div(props: DivProps): JSX.Element
public;DivProps 
public;DivWithOutsideClick:
public;ElementResizeObserver({ watchedElement, render }:
public;ElementSeparator: (props: ElementSeparatorProps) => JSX.Element
public;ElementSeparatorProps 
public;ExecuteHandler = (this: void) => void
public;ExpandableBlock 
deprecated;ExpandableBlock 
public;ExpandableBlockProps 
deprecated;ExpandableBlockProps 
public;ExpandableList 
public;ExpandableListProps 
public;ExpansionToggle 
public;ExpansionToggleProps 
beta;FeaturedTile(props: TileProps): JSX.Element
deprecated;FeaturedTile(props: TileProps): JSX.Element
public;Field 
deprecated;Field 
public;FieldDef
deprecated;FieldDef
public;FieldDefinitions
public;FieldEditor = "textbox" | "multilinetextbox" | "dropdown" | "checkbox"
deprecated;FieldEditor = "textbox" | "multilinetextbox" | "dropdown" | "checkbox"
public;FieldProps 
deprecated;FieldProps 
public;FieldValues
deprecated;FieldValues
public;FillCentered(props: CommonDivProps): JSX.Element
alpha;FilteredText(props: FilteredTextProps): JSX.Element
alpha;FilteredTextProps 
internal;flattenChildren: (children: React.ReactNode) => React.ReactNode
public;FlexWrapContainer(props: CommonDivProps): JSX.Element
internal;focusIntoContainer(focusContainer: HTMLDivElement, initialFocusElement?: React.RefObject
internal;FocusTrap(props: FocusTrapProps): JSX.Element | null
internal;FocusTrapProps 
public;Form 
public;FormContext: React.Context
deprecated;FormContext: React.Context
public;FormContextState 
public;FormProps
public;Gap(props: GapProps): JSX.Element
public;GapProps 
public;GetAutoSuggestDataFunc = (value: string) => AutoSuggestData[]
internal;getBestBWContrastColor(hexColor: string): "black" | "white"
internal;getButtonTypeClassName(buttonType?: ButtonType): string
public;getCssVariable(variableName: string, htmlElement?: HTMLElement): string
public;getCssVariableAsNumber(variableName: string, htmlElement?: HTMLElement): number
internal;getDisplayName: (component: React.ComponentType
internal;getToolbarBackdropFilter: (filterBlur: number) => string
internal;getToolbarBackgroundColor: (opacity: number) => string
internal;getToolbarBoxShadow: (opacity: number) => string
internal;getUserColor(email: string): string
public;GlobalContextMenu 
public;GlobalContextMenuProps 
public;GlobalDialog 
public;GlobalDialogProps 
public;GlobalDialogState
internal;hasPointerEventsSupport(): boolean
public;Headline(props: TextProps): JSX.Element
deprecated;Headline(props: TextProps): JSX.Element
public;HorizontalAlignment
public;HorizontalTabs(props: TabsProps): JSX.Element
deprecated;HorizontalTabs(props: TabsProps): JSX.Element
public;Icon(props: IconProps): JSX.Element | null
public;IconHelper
public;IconInput: (props: IconInputProps) => JSX.Element | null
public;IconInputProps 
public;IconProps 
public;IconSpec = string | ConditionalStringValue | React.ReactNode
public;ImageCheckBox 
public;ImageCheckBoxProps 
public;Input: (props: InputProps) => JSX.Element | null
deprecated;Input: (props: InputProps) => JSX.Element | null
public;InputLabel 
public;InputLabelProps 
public;InputProps 
deprecated;InputProps 
public;InputStatus
internal;isHTMLElement: (message: MessageType) => message is HTMLElement
internal;isNavigationKey(key: string): boolean
internal;isPromiseLike(obj: unknown): obj is PromiseLike
internal;isReactMessage: (message: MessageType) => message is ReactMessage
internal;ItemKeyboardNavigator
public;LabeledComponentProps
public;LabeledInput(props: LabeledInputProps): JSX.Element
deprecated;LabeledInput(props: LabeledInputProps): JSX.Element
public;LabeledInputProps 
deprecated;LabeledInputProps 
public;LabeledSelect 
deprecated;LabeledSelect 
public;LabeledSelectProps 
deprecated;LabeledSelectProps 
public;LabeledTextarea(props: LabeledTextareaProps): JSX.Element
deprecated;LabeledTextarea(props: LabeledTextareaProps): JSX.Element
public;LabeledTextareaProps 
deprecated;LabeledTextareaProps 
beta;LabeledThemedSelect(props: LabeledThemedSelectProps): JSX.Element
deprecated;LabeledThemedSelect(props: LabeledThemedSelectProps): JSX.Element
beta;LabeledThemedSelectProps 
deprecated;LabeledThemedSelectProps 
public;LabeledToggle 
deprecated;LabeledToggle 
public;LabeledToggleProps 
deprecated;LabeledToggleProps 
public;LeadingText(props: TextProps): JSX.Element
deprecated;LeadingText(props: TextProps): JSX.Element
public;LeadingText2(props: TextProps): JSX.Element
deprecated;LeadingText2(props: TextProps): JSX.Element
internal;Line
alpha;Listbox(props: ListboxProps): JSX.Element
alpha;ListboxContext: React.Context
alpha;ListboxContextProps
alpha;ListboxItem(props: ListboxItemProps): JSX.Element
alpha;ListboxItemProps 
alpha;ListboxProps 
alpha;ListboxValue = string
public;LoadingBar 
public;LoadingBarProps 
public;LoadingPrompt 
public;LoadingPromptProps 
public;LoadingSpinner 
public;LoadingSpinnerProps 
public;LoadingStatus 
public;LoadingStatusProps 
public;LocalStateStorage 
public;MainTabsProps 
internal;mergeRefs
public;MessageBox 
public;MessageBoxProps 
public;MessageContainer 
public;MessageContainerProps 
public;MessagedComponentProps
public;MessageRenderer(props: MessageRendererProps): JSX.Element | null
public;MessageRendererProps 
public;MessageSeverity
deprecated;MessageSeverity
public;MessageType = string | HTMLElement | ReactMessage
beta;MinimalFeaturedTile(props: TileProps): JSX.Element
deprecated;MinimalFeaturedTile(props: TileProps): JSX.Element
beta;MinimalTile(props: TileProps): JSX.Element
deprecated;MinimalTile(props: TileProps): JSX.Element
public;MutedText(props: TextProps): JSX.Element
internal;NewBadge(props: CommonProps): JSX.Element
public;NoChildrenProps
public;NodeCheckboxProps
public;NodeCheckboxRenderer = (props: NodeCheckboxRenderProps) => React.ReactNode
public;NodeCheckboxRenderProps = Omit
public;NumberInput: (props: NumberInputProps) => JSX.Element | null
public;NumberInputProps 
public;Omit
public;OmitChildrenProp
beta;OptionsType = Array
deprecated;OptionsType = Array
beta;OptionType
deprecated;OptionType
public;Orientation
public;OutsideClickEvent = PointerEvent | MouseEvent | TouchEvent
internal;percentInRange(percent: number): number
internal;placementToPosition(placement: TooltipPlacement | undefined): RelativePosition
internal;Point 
public;PointProps
deprecated;PointProps
public;Popup 
public;PopupContextMenu(props: PopupContextMenuProps): JSX.Element
public;PopupContextMenuProps 
public;PopupProps 
public;ProcessSettingsContainerCloseEvent 
public;ProcessSettingsContainerCloseEventArgs
public;ProcessSettingsTabActivationEvent 
public;ProcessSettingsTabActivationEventArgs
beta;ProgressBar(props: ProgressBarProps): JSX.Element
deprecated;ProgressBar(props: ProgressBarProps): JSX.Element
beta;ProgressBarProps 
deprecated;ProgressBarProps 
beta;ProgressSpinner(props: ProgressSpinnerProps): JSX.Element
deprecated;ProgressSpinner(props: ProgressSpinnerProps): JSX.Element
beta;ProgressSpinnerProps 
deprecated;ProgressSpinnerProps 
internal;PROXIMITY_THRESHOLD_DEFAULT = 100
public;RadialButton 
public;RadialButtonProps 
public;RadialMenu 
public;RadialMenuProps 
public;RadialSizeType = ProgressRadialProps["size"]
public;Radio 
deprecated;Radio 
public;RadioProps 
deprecated;RadioProps 
public;RatioChangeResult
public;ReactMessage
internal;Rectangle 
public;RectangleProps
public;RenderPropsArgs
public;ResizableContainerObserver({ onResize, children }:
internal;ResizeObserver: ResizeObserverType
internal;ResizeObserverType = typeof import("resize-observer-polyfill").default
public;ScrollPositionMaintainer 
public;ScrollView(props: CommonDivProps): JSX.Element
public;SearchBox 
public;SearchBoxProps 
public;Select: (props: SelectProps) => JSX.Element | null
deprecated;Select: (props: SelectProps) => JSX.Element | null
public;SelectOption
deprecated;SelectOption
public;SelectProps 
deprecated;SelectProps 
public;SettingsContainer: ({ tabs, onSettingsTabSelected, currentSettingsTab, settingsManager, showHeader }: SettingsContainerProps) => JSX.Element
public;SettingsContainerProps
public;SettingsManager
public;SettingsProvidersChangedEvent 
public;SettingsProvidersChangedEventArgs
public;SettingsTabEntry
public;SettingsTabsProvider
internal;shallowDiffers: (a:
internal;Size 
public;SizeProps
public;Slider(props: SliderProps): JSX.Element
deprecated;Slider(props: SliderProps): JSX.Element
public;SliderProps 
public;SmallText(props: TextProps): JSX.Element
deprecated;SmallText(props: TextProps): JSX.Element
public;SortDirection
public;Spinner 
deprecated;Spinner 
public;SpinnerProps
deprecated;SpinnerProps
public;SpinnerSize
deprecated;SpinnerSize
public;SplitButton 
deprecated;SplitButton 
internal;SplitButtonActionType
public;SplitButtonProps 
deprecated;SplitButtonProps 
public;StepFunctionProp = number | ((direction: string) => number | undefined)
public;StyledText(props: StyledTextProps): JSX.Element
public;StyledTextProps 
public;Subheading(props: TextProps): JSX.Element
deprecated;Subheading(props: TextProps): JSX.Element
public;Subheading2(props: TextProps): JSX.Element
deprecated;Subheading2(props: TextProps): JSX.Element
public;SvgPath 
public;SvgPathProps 
public;SvgSprite 
deprecated;SvgSprite 
public;SvgSpriteProps 
deprecated;SvgSpriteProps 
public;TabLabel
public;Tabs 
public;TabsProps 
public;Textarea: (props: TextareaProps) => JSX.Element | null
deprecated;Textarea: (props: TextareaProps) => JSX.Element | null
public;TextareaProps 
deprecated;TextareaProps 
public;TextProps 
beta;ThemedSelect(props: ThemedSelectProps): JSX.Element
deprecated;ThemedSelect(props: ThemedSelectProps): JSX.Element
beta;ThemedSelectProps =
deprecated;ThemedSelectProps =
beta;Tile 
deprecated;Tile 
internal;TileDefaultProps = Pick
beta;TileProps 
deprecated;TileProps 
public;TimeFormat
public;Timer
public;Title(props: TextProps): JSX.Element
deprecated;Title(props: TextProps): JSX.Element
public;Title2(props: TextProps): JSX.Element
deprecated;Title2(props: TextProps): JSX.Element
public;Toggle: (props: ToggleProps) => JSX.Element | null
deprecated;Toggle: (props: ToggleProps) => JSX.Element | null
public;ToggleButtonType
deprecated;ToggleButtonType
public;ToggleProps 
deprecated;ToggleProps 
internal;TOOLBAR_BACKDROP_FILTER_BLUR_DEFAULT = 10
internal;TOOLBAR_BOX_SHADOW_OPACITY_DEFAULT = 0.35
internal;TOOLBAR_OPACITY_DEFAULT = 0.5
beta;Tooltip(props: TooltipProps): JSX.Element
deprecated;Tooltip(props: TooltipProps): JSX.Element
beta;TooltipPlacement = "bottom" | "left" | "right" | "top"
deprecated;TooltipPlacement = "bottom" | "left" | "right" | "top"
beta;TooltipProps 
deprecated;TooltipProps 
public;Tree 
public;TreeBranch 
public;TreeBranchProps 
public;TreeNode 
public;TreeNodePlaceholder 
public;TreeNodePlaceholderProps 
public;TreeNodeProps 
public;TreeProps 
public;UiCore
public;UiEvent
deprecated;UiEvent
internal;UiGeometry
public;UiStateEntry
public;UiStateStorage
public;UiStateStorageResult
public;UiStateStorageStatus
public;UnderlinedButton(props: UnderlinedButtonProps): JSX.Element
public;UnderlinedButtonProps
beta;useCrossOriginPopup(visible: boolean, url: string | undefined, title: string, width: number, height: number, onClose: () => void): void
public;useDisposable
public;useEffectSkipFirst(callback: () => (void | (() => void | undefined)) | void, deps?: any[]): void
internal;useEventListener(eventName: string, handler: (event: Event) => void, element: HTMLElement | Document | undefined): void
beta;useInterval(callback: (...args: any[]) => void, delay: number | undefined): void
internal;useLayoutResizeObserver(inElement: HTMLElement | null, onResize?: (width?: number, height?: number) => void): (number | undefined)[]
public;useOptionalDisposable
internal;useProximityToMouse: (elementSet: WidgetElementSet, snap?: boolean, threshold?: number) => number
internal;useRefEffect
internal;useRefs
internal;useRefState
internal;useResizeObserver
public;useSaveBeforeActivatingNewSettingsTab(settingsManager: SettingsManager, saveFunction: (tabSelectionFunc: (args: any) => void, requestedSettingsTabId?: string) => void): void
public;useSaveBeforeClosingSettingsContainer(settingsManager: SettingsManager, saveFunction: (closeFunc: (args: any) => void, closeFuncArgs?: any) => void): void
internal;useTargeted: (ref: React.RefObject
internal;useWidgetOpacityContext(): WidgetOpacityContextProps
public;VerticalAlignment
public;VerticalTabs(props: TabsProps): JSX.Element
public;WebFontIcon(props: WebFontIconProps): JSX.Element
public;WebFontIconProps 
internal;WidgetElementSet 
internal;WidgetOpacityContext: React.Context
internal;WidgetOpacityContextProps
public;withIsPressed: 
public;WithIsPressedProps
public;withOnOutsideClick: 
public;WithOnOutsideClickProps
public;withTimeout: 
public;WithTimeoutProps