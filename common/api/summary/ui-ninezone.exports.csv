sep=;
Release Tag;API Item
internal;ActiveTabIdContext: React.Context
internal;addFloatingWidget(state: NineZoneState, id: FloatingWidgetState["id"], tabs: WidgetState["tabs"], floatingWidgetArgs?: Partial
internal;addPanelWidget(state: NineZoneState, side: PanelSide, id: WidgetState["id"], tabs: WidgetState["tabs"], widgetArgs?: Partial
internal;addTab(state: NineZoneState, id: TabState["id"], tabArgs?: Partial
alpha;AppButton 
alpha;AppButtonProps 
internal;AppContent: React.NamedExoticComponent
alpha;BackArrow 
alpha;BackArrowProps 
alpha;BackButton 
alpha;BackButtonProps 
beta;Backstage 
beta;BackstageDefaultProps = Pick
beta;BackstageItem 
beta;BackstageItemProps 
beta;BackstageProps 
beta;BackstageSeparator 
alpha;BackTarget 
alpha;BackTargetProps 
internal;BottomPanelSide = "bottom"
alpha;Cell 
alpha;CellProps
internal;CenterContent: React.NamedExoticComponent
internal;CenterContentNodeContext: React.Context
alpha;Columns 
alpha;ColumnsProps 
alpha;contain: (componentBounds: RectangleProps, containerBounds: RectangleProps) => RectangleProps
alpha;containHorizontally: (componentBounds: RectangleProps, containerBounds: RectangleProps) => RectangleProps
alpha;containVertically: (componentBounds: RectangleProps, containerBounds: RectangleProps) => RectangleProps
internal;ContentNodeContext: React.Context
internal;ContentZoneId = 5
internal;createDraggedTabState(tabId: DraggedTabState["tabId"], args?: Partial
internal;createFloatingWidgetState(id: FloatingWidgetState["id"], args?: Partial
internal;createHorizontalPanelState(side: HorizontalPanelSide, args?: Partial
internal;createNineZoneState(args?: Partial
internal;createPanelsState(args?: Partial
internal;createPanelState(side: PanelSide):
internal;createTabsState(args?: Partial
internal;createTabState(id: TabState["id"], args?: Partial
internal;createVerticalPanelState(side: VerticalPanelSide, args?: Partial
internal;createWidgetState(id: WidgetState["id"], tabs: WidgetState["tabs"], args?: Partial
internal;Css
internal;CssProperties
internal;CursorType = "nwse-resize" | "nesw-resize" | "ew-resize" | "ns-resize" | "grabbing"
internal;CursorTypeContext: React.Context
beta;Dialog 
beta;DialogProps 
beta;Direction
internal;DirectionHelpers
beta;DisabledResizeHandles
internal;DisabledResizeHandlesHelpers
internal;Dock: React.NamedExoticComponent
internal;DockedToolSetting(props: ToolSettingProps): JSX.Element
internal;DockedToolSettings(props: DockedToolSettingsProps): JSX.Element
internal;DockedToolSettingsHandle: React.NamedExoticComponent
internal;DockedToolSettingsHandleProps 
internal;DockedToolSettingsOverflow: React.MemoExoticComponent
internal;DockedToolSettingsOverflowProps 
internal;DockedToolSettingsProps 
internal;DockedToolSettingsState
internal;DraggedPanelSideContext: React.Context
internal;DraggedResizeHandleContext: React.Context
internal;DraggedTabContext: React.Context
internal;DraggedTabState
internal;DraggedTabStateContext: React.Context
internal;DraggedWidgetIdContext: React.Context
internal;DraggedWidgetManager
beta;DraggedWidgetManagerProps
internal;DragHandle 
internal;DragHandleProps 
internal;DragItemDragStartArgs
internal;DragManager
internal;DragManagerContext: React.Context
internal;DragProvider: React.NamedExoticComponent
internal;DragProviderProps
internal;DragTabDragStartArgs 
internal;DragTarget = TabTarget | PanelTarget_2 | WidgetTarget_2
internal;Ellipsis(props: CommonProps): JSX.Element
internal;eqlOverflown(prev: readonly string[] | undefined, value: readonly string[]): boolean
internal;Event
internal;EventEmitter
internal;EventHandler = (...args: any[]) => void
alpha;ExpandableButton 
alpha;ExpandableButtonProps 
beta;ExpandableItem 
beta;ExpandableItemProps 
internal;findTab(state: NineZoneState, id: TabState["id"]): TabLocation | undefined
internal;findWidget(state: NineZoneState, id: WidgetState["id"]): WidgetLocation | undefined
internal;FloatingTab(): JSX.Element
internal;FloatingWidget: React.NamedExoticComponent
internal;floatingWidgetBringToFront(state: Draft
internal;FloatingWidgetBringToFrontAction
internal;FloatingWidgetContext: React.Context
internal;FloatingWidgetHomeState
internal;FloatingWidgetIdContext: React.Context
internal;FloatingWidgetProps
internal;FloatingWidgetResizeAction
internal;FloatingWidgetResizeHandle = FloatingWidgetEdgeHandle | FloatingWidgetCornerHandle
internal;FloatingWidgets: React.NamedExoticComponent
internal;FloatingWidgetSendBackAction
internal;FloatingWidgetsState
internal;FloatingWidgetsStateContext: React.Context
internal;FloatingWidgetState
beta;Footer 
beta;FooterIndicator(props: FooterIndicatorProps): JSX.Element
beta;FooterIndicatorProps 
beta;FooterPopup 
beta;FooterPopupContentType
beta;FooterPopupDefaultProps = Pick
beta;FooterPopupProps 
beta;FooterProps 
beta;FooterSeparator 
beta;FooterSeparatorProps 
internal;getChildKey(child: React.ReactNode, index: number): string
internal;getClosedWidgetTabIndex: (tabIndex: number) => number
internal;getColumnZones: (id: WidgetZoneId) => WidgetZoneId[]
internal;getCursorClassName(type: CursorType): string
internal;getDefaultAllowsMerging: (id: WidgetZoneId) => boolean
alpha;getDefaultNineZoneStagePanelManagerProps: () => NineZoneStagePanelManagerProps
alpha;getDefaultNineZoneStagePanelPaneManagerProps: () => NineZoneStagePanelPaneManagerProps
alpha;getDefaultNineZoneStagePanelsManagerProps: () => NineZoneStagePanelsManagerProps
beta;getDefaultStagePanelManagerProps: () => StagePanelManagerProps
beta;getDefaultStagePanelsManagerProps: () => StagePanelsManagerProps
internal;getDefaultToolSettingsWidgetManagerProps: () => ToolSettingsWidgetManagerProps
internal;getDefaultWidgetHorizontalAnchor: (id: WidgetZoneId) => HorizontalAnchor
internal;getDefaultWidgetManagerProps: (id: WidgetZoneId) => WidgetManagerProps
internal;getDefaultWidgetVerticalAnchor: (id: WidgetZoneId) => VerticalAnchor.Bottom | VerticalAnchor.Middle
internal;getDefaultZoneManagerProps: (id: WidgetZoneId) => ZoneManagerProps
beta;getDefaultZonesManagerProps: () => ZonesManagerProps
internal;getDefaultZonesManagerWidgetsProps: () => ZonesManagerWidgetsProps
internal;getDefaultZonesManagerZonesProps: () => ZonesManagerZonesProps
internal;getDragDistance: (from: Point, to: Point, direction: Direction) => number
internal;getOverflown(width: number, docked: ReadonlyArray
internal;getResizeBy(handle: FloatingWidgetResizeHandle, offset: PointProps): Rectangle
alpha;getToolbarDirection: (expandsTo: Direction) => OrthogonalDirection
alpha;getToolbarItemProps: 
internal;getUniqueId(): string
internal;getWindowResizeSettings: (zoneId: WidgetZoneId) => ZoneWindowResizeSettings
internal;getZoneCell: (id: ZoneId) => Cell
internal;getZoneIdFromCell: (cell: CellProps) => WidgetZoneId
alpha;Group 
alpha;GroupColumn 
alpha;GroupColumnProps 
alpha;GroupProps 
alpha;GroupTool 
alpha;GroupToolExpander 
alpha;GroupToolExpanderProps 
alpha;GroupToolProps 
internal;GrowBottom 
internal;GrowLeft 
internal;GrowRight 
internal;class GrowStrategy 
internal;GrowTop 
alpha;HandleMode
alpha;HandleModeHelpers
internal;handleToCursorType(handle: FloatingWidgetResizeHandle): CursorType
beta;HorizontalAnchor
internal;HorizontalAnchorHelpers
internal;HorizontalPanelSide = TopPanelSide | BottomPanelSide
internal;HorizontalPanelState 
internal;isHorizontalPanelSide: (side: PanelSide) => side is HorizontalPanelSide
internal;isHorizontalPanelState(state: PanelState): state is HorizontalPanelState
internal;isTabTarget(target: DragTarget): target is TabTarget
beta;Item 
beta;ItemProps 
alpha;Items 
alpha;ItemsProps 
internal;LeftPanelSide = "left"
internal;MeasureContext: React.Context
beta;MergeTarget 
beta;MergeTargetProps 
beta;Message 
beta;MessageButton 
beta;MessageButtonProps 
beta;MessageCenter 
beta;MessageCenterDialog 
beta;MessageCenterDialogProps 
beta;MessageCenterMessage 
beta;MessageCenterMessageProps 
beta;MessageCenterProps 
beta;MessageCenterTab 
beta;MessageCenterTabProps 
beta;MessageHyperlink 
beta;MessageHyperlinkProps 
beta;MessageLayout 
beta;MessageLayoutProps 
beta;MessageProgress 
alpha;NavigationArea: React.NamedExoticComponent
alpha;NavigationAreaProps 
alpha;NestedGroup 
alpha;NestedGroupProps 
beta;NestedStagePanelKey
beta;NestedStagePanelsId
beta;NestedStagePanelsManager
beta;NestedStagePanelsManagerProps
beta;NestedToolSettings 
beta;NestedToolSettingsProps 
internal;NineZone(props: NineZoneProps): JSX.Element
internal;NineZoneActionTypes = ResizeAction | PanelToggleCollapsedAction | PanelSetCollapsedAction | PanelSetSizeAction | PanelToggleSpanAction | PanelTogglePinnedAction | PanelInitializeAction | FloatingWidgetResizeAction | FloatingWidgetBringToFrontAction | FloatingWidgetSendBackAction | PanelWidgetDragStartAction | WidgetDragAction | WidgetDragEndAction | WidgetTabClickAction | WidgetTabDoubleClickAction | WidgetTabDragStartAction | WidgetTabDragAction | WidgetTabDragEndAction | ToolSettingsDragStartAction | ToolSettingsDockAction
internal;NineZoneContext: React.Context
internal;NineZoneDispatch = (action: NineZoneActionTypes) => void
internal;NineZoneDispatchContext: React.Context
internal;NineZoneLabels
internal;NineZoneLabelsContext: React.Context
alpha;NineZoneManager
internal;NineZoneManagerHiddenWidget
internal;NineZoneManagerHiddenWidgets =
alpha;NineZoneManagerPanelTarget
alpha;NineZoneManagerPaneTarget 
alpha;NineZoneManagerProps
alpha;NineZoneNestedStagePanelsManager 
alpha;NineZoneNestedStagePanelsManagerProps 
internal;NineZoneProps
internal;NineZoneProvider(props: NineZoneProviderProps): JSX.Element
internal;NineZoneProviderProps 
alpha;NineZoneStagePanelManager 
alpha;NineZoneStagePanelManagerProps 
alpha;NineZoneStagePanelPaneManager
alpha;NineZoneStagePanelPaneManagerProps
alpha;NineZoneStagePanelsManager 
alpha;NineZoneStagePanelsManagerProps 
internal;NineZoneState
internal;NineZoneStateReducer: (state: NineZoneState, action: NineZoneActionTypes) => NineZoneState
internal;offsetAndContainInContainer: (tooltipBounds: RectangleProps, containerSize: SizeProps, offset?: PointProps) => Point
internal;onOverflowLabelAndEditorResize(): void
alpha;OrthogonalDirection
internal;OrthogonalDirectionHelpers
beta;Outline 
beta;OutlineProps 
beta;Overflow 
beta;OverflowProps 
alpha;Panel 
internal;PanelInitializeAction
alpha;PanelProps 
internal;PanelSetCollapsedAction
internal;PanelSetSizeAction
internal;PanelSide = VerticalPanelSide | HorizontalPanelSide
internal;PanelSideContext: React.Context
internal;panelSides: [LeftPanelSide, RightPanelSide, TopPanelSide, BottomPanelSide]
alpha;PanelsProvider 
alpha;PanelsProviderProps
internal;PanelsState
internal;PanelsStateContext: React.Context
internal;PanelState
internal;PanelStateContext: React.Context
internal;PanelTarget: React.NamedExoticComponent
internal;PanelToggleCollapsedAction
internal;PanelTogglePinnedAction
internal;PanelToggleSpanAction
internal;PanelWidget: React.MemoExoticComponent
internal;PanelWidgetDragStartAction
internal;PanelWidgetProps
internal;PinToggle: React.NamedExoticComponent
internal;PointerCaptor 
internal;PointerCaptorArgs
internal;PointerCaptorEvent = MouseEvent | TouchEvent
internal;PointerCaptorProps 
beta;ProgressProps 
internal;RECTANGULAR_DEFAULT_MIN_HEIGHT = 220
internal;RECTANGULAR_DEFAULT_MIN_WIDTH = 296
internal;removeTab(state: Draft
internal;ResizeAction
alpha;ResizeDirection
alpha;ResizeDirectionHelpers
alpha;ResizeGrip 
alpha;ResizeGripProps 
alpha;ResizeGripResizeArgs
beta;ResizeHandle
internal;ResizeStrategy
internal;restrainInitialWidgetSize(size: SizeProps, nzSize: SizeProps): SizeProps
internal;RightPanelSide = "right"
beta;SafeAreaInsets
internal;SafeAreaInsetsHelpers
beta;ScrollableToolSettings 
beta;ScrollableToolSettingsProps 
internal;ScrollableWidgetContent: React.NamedExoticComponent
internal;ScrollableWidgetContentProps
internal;SendBack: React.NamedExoticComponent
internal;setRectangleProps(props: Draft
internal;ShrinkBottom 
internal;class ShrinkHorizontalStrategy 
internal;ShrinkLeft 
internal;ShrinkRight 
internal;class ShrinkStrategy 
internal;ShrinkTop 
internal;class ShrinkVerticalStrategy 
internal;sideToCursorType(side: PanelSide): CursorType
beta;Snap 
beta;SnapMode 
beta;SnapModePanel 
beta;SnapModePanelProps 
beta;SnapModeProps 
beta;SnapProps 
beta;Splitter 
beta;SplitterPaneTarget 
beta;SplitterProps 
beta;SplitterTarget 
beta;SplitterTargetProps 
alpha;Stacked 
alpha;StackedProps 
beta;StagePanel 
beta;StagePanelManager
beta;StagePanelManagerProps
beta;StagePanelProps 
beta;StagePanels 
beta;StagePanelsManager
beta;StagePanelsManagerProps
beta;StagePanelsProps 
beta;StagePanelTarget 
beta;StagePanelTargetProps 
beta;StagePanelType
internal;StagePanelTypeHelpers
beta;Status
internal;StatusHelpers
beta;StatusMessageProps 
alpha;Tab 
internal;TabBarButtons: React.NamedExoticComponent
alpha;TabGroup 
alpha;TabGroupProps 
internal;TabIdContext: React.Context
alpha;TabMode
alpha;TabModeHelpers
internal;TabNodeContext: React.Context
internal;TabPositionContext: React.Context
internal;TabPositionContextArgs
alpha;TabProps 
alpha;TabSeparator 
alpha;TabSeparatorProps 
internal;TabsState
internal;TabsStateContext: React.Context
internal;TabState
internal;TabStateContext: React.Context
internal;TabTargetFloatingWidgetState
internal;TabTargetPanelState
internal;TabTargetState = TabTargetPanelState | TabTargetWidgetState | TabTargetTabState | TabTargetFloatingWidgetState
internal;TabTargetTabState
internal;TabTargetWidgetState
alpha;Title 
beta;TitleBar 
beta;TitleBarButton 
beta;TitleBarButtonProps 
beta;TitleBarProps 
alpha;TitleProps 
alpha;Toast 
alpha;ToastDefaultProps = Pick
alpha;ToastProps 
alpha;ToastStyle = Pick
beta;ToolAssistance 
beta;ToolAssistanceDialog 
beta;ToolAssistanceDialogProps 
beta;ToolAssistanceInstruction 
beta;ToolAssistanceInstructionProps 
beta;ToolAssistanceItem 
beta;ToolAssistanceItemProps 
beta;ToolAssistanceProps 
beta;ToolAssistanceSeparator 
beta;ToolAssistanceSeparatorProps 
beta;Toolbar 
alpha;ToolbarButton 
alpha;ToolbarButtonProps 
internal;ToolbarDirectionContext: React.Context
alpha;ToolbarIcon 
alpha;ToolbarIconProps 
alpha;ToolbarItem
alpha;ToolbarItemProps
beta;ToolbarPanelAlignment
alpha;ToolbarPanelAlignmentHelpers
beta;ToolbarProps 
alpha;Tools 
alpha;ToolsArea 
alpha;ToolsAreaProps 
internal;ToolSettingProps 
beta;ToolSettings 
internal;ToolSettingsDockAction
internal;ToolSettingsDragStartAction
internal;ToolSettingsNodeContext: React.Context
internal;ToolSettingsOverflowPanel(props: ToolSettingsOverflowPanelProps): JSX.Element
internal;ToolSettingsOverflowPanelProps 
beta;ToolSettingsPopup 
beta;ToolSettingsPopupProps 
beta;ToolSettingsProps 
internal;ToolSettingsState = DockedToolSettingsState | WidgetToolSettingsState
internal;ToolSettingsStateContext: React.Context
beta;ToolSettingsTab 
internal;toolSettingsTabId = "nz-tool-settings-tab"
beta;ToolSettingsTabProps 
beta;ToolSettingsWidgetManagerProps 
beta;ToolSettingsWidgetMode
alpha;ToolsProps 
beta;Tooltip 
beta;TooltipDefaultProps = Pick
beta;TooltipProps 
internal;TopPanelSide = "top"
internal;UpdateWindowResizeSettings 
internal;useAllowedPanelTarget(): boolean
internal;useAnimatePanelWidgets():
internal;useBorders(widgetId: WidgetState["id"]):
internal;useCursor(): void
internal;useDoubleClick(onDoubleClick?: () => void): () => void
internal;useDrag
internal;useDraggedItemId
internal;useDragItem
internal;UseDragItemArgs
internal;useDragPanelGrip(args: UseDragPanelGripArgs): ({ initialPointerPosition }: DragItemDragStartArgs) => void
internal;UseDragPanelGripArgs
internal;useDragResizeHandle(args: UseDragResizeHandleArgs): ({ initialPointerPosition }: DragItemDragStartArgs) => void
internal;UseDragResizeHandleArgs
internal;useDragTab(args: UseDragTabArgs): ({ initialPointerPosition, widgetSize }: DragTabDragStartArgs) => void
internal;UseDragTabArgs
internal;useDragToolSettings(args: UseDragToolSettingsArgs): ({ initialPointerPosition }: DragItemDragStartArgs) => void
internal;UseDragToolSettingsArgs
internal;useDragWidget(args: UseDragWidgetArgs): ({ initialPointerPosition }: DragItemDragStartArgs) => void
internal;UseDragWidgetArgs
internal;useIsDragged(callback: () => boolean): boolean
internal;useIsDraggedItem(item: DragItem): boolean
internal;useIsDraggedType(type: DragItem["type"]): boolean
internal;useIsMainPanelWidget(): boolean
internal;useLabel(labelKey: keyof NineZoneLabels): string | undefined
internal;useMode(widgetId: string): "fit" | "fill" | "minimized"
internal;useOverflow(children: React.ReactNode, activeChildIndex?: number): [ReadonlyArray
internal;usePanelsAutoCollapse
internal;usePanelTarget
internal;UsePanelTargetArgs
internal;usePointerCaptor: 
internal;useResizeGrip: 
beta;UserProfile 
beta;UserProfileProps 
internal;useTabTarget
internal;UseTabTargetArgs
internal;useTabTransientState(tabId: string, onSave?: () => void, onRestore?: () => void): void
internal;useToolSettingsEntry(): DockedToolSettingsEntryContextArgs
internal;useTransientState(onSave?: () => void, onRestore?: () => void): void
internal;useWidgetTarget
internal;UseWidgetTargetArgs
beta;VerticalAnchor
internal;VerticalAnchorHelpers
internal;VerticalPanelSide = LeftPanelSide | RightPanelSide
internal;VerticalPanelState 
internal;Widget: React.MemoExoticComponent
internal;WidgetComponent
alpha;WidgetContent 
internal;WidgetContentContainer: React.NamedExoticComponent
internal;WidgetContentContainersContext: React.Context
internal;WidgetContentManager: React.NamedExoticComponent
internal;WidgetContentManagerContext: React.Context
internal;WidgetContentManagerContextArgs
internal;WidgetContentManagerProps
internal;WidgetContentNodeContext: React.Context
alpha;WidgetContentProps 
internal;WidgetContentRenderer: React.NamedExoticComponent
internal;WidgetContentRenderers: React.NamedExoticComponent
internal;WidgetContext: React.Context
internal;WidgetContextArgs
internal;WidgetDragAction
internal;WidgetDragEndAction
internal;WidgetIdContext: React.Context
beta;WidgetManagerProps
internal;WidgetMenu(props: WidgetMenuProps): JSX.Element
internal;WidgetMenuProps 
internal;WidgetOverflow: React.NamedExoticComponent
internal;WidgetOverflowContext: React.Context
internal;WidgetOverflowProps
internal;WidgetPanel: React.NamedExoticComponent
internal;WidgetPanelComponent: React.NamedExoticComponent
internal;WidgetPanelComponentProps
internal;WidgetPanelContext: React.Context
internal;WidgetPanelContextArgs
internal;WidgetPanelExpander({ side }: WidgetPanelExpanderProps): JSX.Element
internal;WidgetPanelExpanderProps
internal;WidgetPanelExpanders(): JSX.Element
internal;WidgetPanelGrip: React.NamedExoticComponent
internal;WidgetPanelProps
internal;WidgetPanels: React.NamedExoticComponent
internal;WidgetPanelsContent: React.MemoExoticComponent
internal;WidgetPanelsContentProps 
internal;WidgetPanelsProps 
internal;WidgetProps 
internal;WidgetProvider: React.NamedExoticComponent
internal;WidgetProviderProps
internal;WidgetsState
internal;WidgetsStateContext: React.Context
internal;WidgetState
internal;WidgetStateContext: React.Context
internal;WidgetTab: React.NamedExoticComponent
internal;WidgetTabBar: React.NamedExoticComponent
internal;WidgetTabBarProps
internal;WidgetTabClickAction
internal;WidgetTabDoubleClickAction
internal;WidgetTabDragAction
internal;WidgetTabDragEndAction
internal;WidgetTabDragStartAction
alpha;WidgetTabDragStartArguments
internal;WidgetTabProps 
internal;WidgetTabProvider({ tab, first, firstInactive, last }: WidgetTabProviderProps): JSX.Element
internal;WidgetTabProviderProps 
internal;WidgetTabs: React.NamedExoticComponent
internal;WidgetTabsEntryContext: React.Context
internal;WidgetTabsEntryContextProviderProps
internal;WidgetTabsEntryProvider: React.NamedExoticComponent
internal;WidgetTabTarget: React.NamedExoticComponent
internal;WidgetTabTargetProps
internal;WidgetTarget: React.NamedExoticComponent
internal;WidgetTargetFloatingWidgetState
internal;WidgetTargetPanelState = TabTargetPanelState
internal;WidgetTargetProps
internal;WidgetTargetState = WidgetTargetPanelState | WidgetTargetWidgetState | WidgetTargetTabState | WidgetTargetFloatingWidgetState
internal;WidgetTargetTabState = TabTargetTabState
internal;WidgetTargetWidgetState = TabTargetWidgetState
internal;WidgetToolSettingsState
internal;widgetZoneColumnIds: ReadonlyArray
beta;WidgetZoneId = 1 | 2 | 3 | 4 | 6 | 7 | 8 | 9
beta;widgetZoneIds: ReadonlyArray
alpha;withContainIn: 
alpha;WithContainInProps
beta;withDragInteraction: 
beta;WithDragInteractionProps
beta;Zone 
internal;ZoneId = WidgetZoneId | ContentZoneId
internal;ZoneManager
beta;ZoneManagerFloatingProps
beta;ZoneManagerProps
beta;ZoneProps 
beta;Zones 
beta;ZonesManager
beta;ZonesManagerProps
beta;ZonesManagerTargetProps
beta;ZonesManagerWidgetResizeArgs
beta;ZonesManagerWidgetsProps =
beta;ZonesManagerZonesProps =
beta;ZonesProps 
beta;ZoneTargetType
internal;ZoneWindowResizeSettings